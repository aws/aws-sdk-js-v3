// smithy-typescript generated code
import { error, list, op, struct } from "@smithy/core/schema";

import { AccountSuspendedException as __AccountSuspendedException } from "../models/index";
import {
  _a,
  _aI,
  _aO,
  _ar,
  _aRL,
  _aRLO,
  _ASE,
  _ba,
  _BB,
  _bB,
  _bBC,
  _bBCO,
  _bBN,
  _bBNF,
  _BBP,
  _BBPu,
  _bBS,
  _BBu,
  _bBu,
  _bE,
  _BG,
  _bG,
  _BGBB,
  _BGBBI,
  _BGBBO,
  _BGP,
  _BGPI,
  _BGPO,
  _BGS,
  _BGSI,
  _BGSO,
  _BGu,
  _bOA,
  _bOu,
  _BR,
  _bRM,
  _bRU,
  _BS,
  _bS,
  _bSCO,
  _BSu,
  _bTIM,
  _bTIMO,
  _bui,
  _c,
  _cA,
  _ca,
  _cBL,
  _cBS,
  _cO,
  _co,
  _cOa,
  _con,
  _CP,
  _cP,
  _CPI,
  _CPO,
  _cr,
  _cS,
  _cTA,
  _cTO,
  _cWL,
  _de,
  _dIS,
  _dO,
  _dSE,
  _e,
  _eD,
  _eK,
  _eKO,
  _en,
  _eT,
  _eTO,
  _eVO,
  _fA,
  _fO,
  _fSL,
  _gCDO,
  _gSCO,
  _i,
  _id,
  _ide,
  _iF,
  _in,
  _iO,
  _iPCTO,
  _iSO,
  _iTd,
  _l,
  _LC,
  _lC,
  _lCO,
  _lCo,
  _lMa,
  _lo,
  _m,
  _mBA,
  _n,
  _na,
  _nI,
  _nTa,
  _oAN,
  _P,
  _p,
  _PA,
  _pA,
  _pa,
  _pac,
  _PAL,
  _PB,
  _PBBC,
  _pBSL,
  _ph,
  _pMO,
  _pN,
  _pNF,
  _pPA,
  _Pr,
  _pr,
  _pS,
  _pT,
  _pV,
  _qTIM,
  _qTIMO,
  _RA,
  _rA,
  _rAR,
  _RBB,
  _RBBI,
  _RBBO,
  _rBBSO,
  _rBSO,
  _rCO,
  _re,
  _rO,
  _RSA,
  _rSV,
  _rT,
  _rTe,
  _S,
  _s,
  _Sa,
  _sA,
  _sa,
  _sAO,
  _sAOo,
  _SB,
  _SBB,
  _SBBI,
  _SBBIt,
  _SBBO,
  _SBBOt,
  _SBBt,
  _SBI,
  _SBO,
  _sL,
  _sLO,
  _sNF,
  _so,
  _sR,
  _sRO,
  _sS,
  _SSa,
  _SSI,
  _SSIt,
  _SSO,
  _sSO,
  _SSOt,
  _SSP,
  _SSPa,
  _SSt,
  _SSto,
  _sSV,
  _sSVO,
  _sT,
  _st,
  _sTO,
  _sV,
  _t,
  _ta,
  _tIM,
  _tIMi,
  _tIMO,
  _UP,
  _UPI,
  _UPO,
  _vC,
  _w,
  BuildStatusConfig,
  CloudWatchLogsConfig,
  EnvironmentVariables,
  GitSubmodulesConfig,
  n0,
  ProjectEnvironment,
  ProjectFileSystemLocations,
  ProjectFleet,
  ProjectSecondarySourceVersions,
  ProjectSource,
  ProjectSources,
  RegistryCredential,
  S3LogsConfig,
  SourceAuth,
  VpcConfig,
} from "./schemas_0";
import { Build, BuildArtifacts, BuildArtifactsList, ProjectCache } from "./schemas_2_Build";
import { TagList } from "./schemas_3_BatchGet";
import { Webhook } from "./schemas_9_Webhook";
import { SensitiveString } from "./schemas_13_List";
import { NetworkInterface, PhaseContexts } from "./schemas_28_Build";
import { LogsLocation } from "./schemas_29_Build";

/* eslint no-var: 0 */

export var AccountSuspendedException = error(
  n0,
  _ASE,
  {
    [_e]: _c,
  },
  [_m],
  [0],

  __AccountSuspendedException
);
export var BatchGetBuildBatchesInput = struct(n0, _BGBBI, 0, [_i], [64 | 0]);
export var BatchGetBuildBatchesOutput = struct(n0, _BGBBO, 0, [_bB, _bBNF], [() => BuildBatches, 64 | 0]);
export var BatchGetProjectsInput = struct(n0, _BGPI, 0, [_n], [64 | 0]);
export var BatchGetProjectsOutput = struct(n0, _BGPO, 0, [_p, _pNF], [() => Projects, 64 | 0]);
export var BatchGetSandboxesInput = struct(n0, _BGSI, 0, [_i], [64 | 0]);
export var BatchGetSandboxesOutput = struct(n0, _BGSO, 0, [_s, _sNF], [() => Sandboxes, 64 | 0]);
export var BatchRestrictions = struct(n0, _BR, 0, [_mBA, _cTA, _fA], [1, 64 | 0, 64 | 0]);
export var BuildBatch = struct(
  n0,
  _BB,
  0,
  [
    _id,
    _a,
    _sT,
    _eT,
    _cP,
    _bBS,
    _sV,
    _rSV,
    _pN,
    _ph,
    _so,
    _sS,
    _sSV,
    _ar,
    _sA,
    _ca,
    _en,
    _sR,
    _lC,
    _bTIM,
    _qTIM,
    _co,
    _in,
    _vC,
    _eK,
    _bBN,
    _fSL,
    _bBC,
    _bG,
    _dSE,
    _rA,
  ],
  [
    0,
    0,
    4,
    4,
    0,
    0,
    0,
    0,
    0,
    () => BuildBatchPhases,
    () => ProjectSource,
    () => ProjectSources,
    () => ProjectSecondarySourceVersions,
    () => BuildArtifacts,
    () => BuildArtifactsList,
    () => ProjectCache,
    () => ProjectEnvironment,
    0,
    () => LogsConfig,
    1,
    1,
    2,
    0,
    () => VpcConfig,
    0,
    1,
    () => ProjectFileSystemLocations,
    () => ProjectBuildBatchConfig,
    () => BuildGroups,
    2,
    64 | 0,
  ]
);
export var BuildBatchPhase = struct(
  n0,
  _BBP,
  0,
  [_pT, _pS, _sT, _eT, _dIS, _con],
  [0, 0, 4, 4, 1, () => PhaseContexts]
);
export var BuildGroup = struct(
  n0,
  _BG,
  0,
  [_ide, _dO, _iF, _cBS, _pBSL],
  [0, 64 | 0, 2, () => BuildSummary, () => BuildSummaries]
);
export var BuildSummary = struct(
  n0,
  _BS,
  0,
  [_a, _rO, _bS, _pA, _sA],
  [0, 4, 0, () => ResolvedArtifact, () => ResolvedSecondaryArtifacts]
);
export var CreateProjectInput = struct(
  n0,
  _CPI,
  0,
  [
    _na,
    _de,
    _so,
    _sS,
    _sV,
    _sSV,
    _ar,
    _sA,
    _ca,
    _en,
    _sR,
    _tIM,
    _qTIM,
    _eK,
    _ta,
    _vC,
    _bE,
    _lCo,
    _fSL,
    _bBC,
    _cBL,
    _aRL,
  ],
  [
    0,
    0,
    () => ProjectSource,
    () => ProjectSources,
    0,
    () => ProjectSecondarySourceVersions,
    () => ProjectArtifacts,
    () => ProjectArtifactsList,
    () => ProjectCache,
    () => ProjectEnvironment,
    0,
    1,
    1,
    0,
    () => TagList,
    () => VpcConfig,
    2,
    () => LogsConfig,
    () => ProjectFileSystemLocations,
    () => ProjectBuildBatchConfig,
    1,
    1,
  ]
);
export var CreateProjectOutput = struct(n0, _CPO, 0, [_pr], [() => Project]);
export var LogsConfig = struct(n0, _LC, 0, [_cWL, _sL], [() => CloudWatchLogsConfig, () => S3LogsConfig]);
export var Project = struct(
  n0,
  _P,
  0,
  [
    _na,
    _a,
    _de,
    _so,
    _sS,
    _sV,
    _sSV,
    _ar,
    _sA,
    _ca,
    _en,
    _sR,
    _tIM,
    _qTIM,
    _eK,
    _ta,
    _cr,
    _lMa,
    _w,
    _vC,
    _ba,
    _lCo,
    _fSL,
    _bBC,
    _cBL,
    _pV,
    _pPA,
    _rAR,
    _aRL,
  ],
  [
    0,
    0,
    0,
    () => ProjectSource,
    () => ProjectSources,
    0,
    () => ProjectSecondarySourceVersions,
    () => ProjectArtifacts,
    () => ProjectArtifactsList,
    () => ProjectCache,
    () => ProjectEnvironment,
    0,
    1,
    1,
    0,
    () => TagList,
    4,
    4,
    () => Webhook,
    () => VpcConfig,
    () => ProjectBadge,
    () => LogsConfig,
    () => ProjectFileSystemLocations,
    () => ProjectBuildBatchConfig,
    1,
    0,
    0,
    0,
    1,
  ]
);
export var ProjectArtifacts = struct(
  n0,
  _PA,
  0,
  [_t, _lo, _pa, _nTa, _na, _pac, _oAN, _eD, _aI, _bOA],
  [0, 0, 0, 0, 0, 0, 2, 2, 0, 0]
);
export var ProjectBadge = struct(n0, _PB, 0, [_bE, _bRU], [2, 0]);
export var ProjectBuildBatchConfig = struct(
  n0,
  _PBBC,
  0,
  [_sR, _cA, _re, _tIMi, _bRM],
  [0, 2, () => BatchRestrictions, 1, 0]
);
export var ResolvedArtifact = struct(n0, _RA, 0, [_t, _lo, _ide], [0, 0, 0]);
export var RetryBuildBatchInput = struct(n0, _RBBI, 0, [_id, _iTd, _rT], [0, 0, 0]);
export var RetryBuildBatchOutput = struct(n0, _RBBO, 0, [_bBu], [() => BuildBatch]);
export var Sandbox = struct(
  n0,
  _S,
  0,
  [_id, _a, _pN, _rTe, _sT, _eT, _st, _so, _sV, _sS, _sSV, _en, _fSL, _tIM, _qTIM, _vC, _lC, _eK, _sR, _cS],
  [
    0,
    0,
    0,
    4,
    4,
    4,
    0,
    () => ProjectSource,
    0,
    () => ProjectSources,
    () => ProjectSecondarySourceVersions,
    () => ProjectEnvironment,
    () => ProjectFileSystemLocations,
    1,
    1,
    () => VpcConfig,
    () => LogsConfig,
    0,
    0,
    () => SandboxSession,
  ]
);
export var SandboxSession = struct(
  n0,
  _SSa,
  0,
  [_id, _st, _sT, _eT, _cP, _ph, _rSV, _l, _nI],
  [0, 0, 4, 4, 0, () => SandboxSessionPhases, 0, () => LogsLocation, () => NetworkInterface]
);
export var SandboxSessionPhase = struct(
  n0,
  _SSP,
  0,
  [_pT, _pS, _sT, _eT, _dIS, _con],
  [0, 0, 4, 4, 1, () => PhaseContexts]
);
export var StartBuildBatchInput = struct(
  n0,
  _SBBI,
  0,
  [
    _pN,
    _sSO,
    _sSVO,
    _sV,
    _aO,
    _sAO,
    _eVO,
    _sTO,
    _sLO,
    _sAOo,
    _gCDO,
    _gSCO,
    _bOu,
    _iSO,
    _rBBSO,
    _eTO,
    _iO,
    _cTO,
    _cO,
    _cOa,
    _sRO,
    _pMO,
    _bTIMO,
    _qTIMO,
    _eKO,
    _iTd,
    _lCO,
    _rCO,
    _iPCTO,
    _bBCO,
    _dSE,
  ],
  [
    0,
    () => ProjectSources,
    () => ProjectSecondarySourceVersions,
    0,
    () => ProjectArtifacts,
    () => ProjectArtifactsList,
    () => EnvironmentVariables,
    0,
    0,
    () => SourceAuth,
    1,
    () => GitSubmodulesConfig,
    0,
    2,
    2,
    0,
    0,
    0,
    0,
    () => ProjectCache,
    0,
    2,
    1,
    1,
    0,
    0,
    () => LogsConfig,
    () => RegistryCredential,
    0,
    () => ProjectBuildBatchConfig,
    2,
  ]
);
export var StartBuildBatchOutput = struct(n0, _SBBO, 0, [_bBu], [() => BuildBatch]);
export var StartBuildInput = struct(
  n0,
  _SBI,
  0,
  [
    _pN,
    _sSO,
    _sSVO,
    _sV,
    _aO,
    _sAO,
    _eVO,
    _sTO,
    _sLO,
    _sAOo,
    _gCDO,
    _gSCO,
    _bOu,
    _iSO,
    _rBSO,
    _bSCO,
    _eTO,
    _iO,
    _cTO,
    _cO,
    _cOa,
    _sRO,
    _pMO,
    _tIMO,
    _qTIMO,
    _eKO,
    _iTd,
    _lCO,
    _rCO,
    _iPCTO,
    _dSE,
    _fO,
    _aRLO,
  ],
  [
    0,
    () => ProjectSources,
    () => ProjectSecondarySourceVersions,
    0,
    () => ProjectArtifacts,
    () => ProjectArtifactsList,
    () => EnvironmentVariables,
    0,
    0,
    () => SourceAuth,
    1,
    () => GitSubmodulesConfig,
    0,
    2,
    2,
    () => BuildStatusConfig,
    0,
    0,
    0,
    0,
    () => ProjectCache,
    0,
    2,
    1,
    1,
    0,
    0,
    () => LogsConfig,
    () => RegistryCredential,
    0,
    2,
    () => ProjectFleet,
    1,
  ]
);
export var StartBuildOutput = struct(n0, _SBO, 0, [_bui], [() => Build]);
export var StartSandboxInput = struct(n0, _SSI, 0, [_pN, _iTd], [0, [() => SensitiveString, 0]]);
export var StartSandboxOutput = struct(n0, _SSO, 0, [_sa], [() => Sandbox]);
export var StopBuildBatchInput = struct(n0, _SBBIt, 0, [_id], [0]);
export var StopBuildBatchOutput = struct(n0, _SBBOt, 0, [_bBu], [() => BuildBatch]);
export var StopSandboxInput = struct(n0, _SSIt, 0, [_id], [0]);
export var StopSandboxOutput = struct(n0, _SSOt, 0, [_sa], [() => Sandbox]);
export var UpdateProjectInput = struct(
  n0,
  _UPI,
  0,
  [
    _na,
    _de,
    _so,
    _sS,
    _sV,
    _sSV,
    _ar,
    _sA,
    _ca,
    _en,
    _sR,
    _tIM,
    _qTIM,
    _eK,
    _ta,
    _vC,
    _bE,
    _lCo,
    _fSL,
    _bBC,
    _cBL,
    _aRL,
  ],
  [
    0,
    0,
    () => ProjectSource,
    () => ProjectSources,
    0,
    () => ProjectSecondarySourceVersions,
    () => ProjectArtifacts,
    () => ProjectArtifactsList,
    () => ProjectCache,
    () => ProjectEnvironment,
    0,
    1,
    1,
    0,
    () => TagList,
    () => VpcConfig,
    2,
    () => LogsConfig,
    () => ProjectFileSystemLocations,
    () => ProjectBuildBatchConfig,
    1,
    1,
  ]
);
export var UpdateProjectOutput = struct(n0, _UPO, 0, [_pr], [() => Project]);
export var BuildBatches = list(n0, _BBu, 0, () => BuildBatch);
export var BuildBatchPhases = list(n0, _BBPu, 0, () => BuildBatchPhase);
export var BuildGroups = list(n0, _BGu, 0, () => BuildGroup);
export var BuildSummaries = list(n0, _BSu, 0, () => BuildSummary);
export var ComputeTypesAllowed = 64 | 0;

export var FleetsAllowed = 64 | 0;

export var Identifiers = 64 | 0;

export var ProjectArtifactsList = list(n0, _PAL, 0, () => ProjectArtifacts);
export var Projects = list(n0, _Pr, 0, () => Project);
export var ResolvedSecondaryArtifacts = list(n0, _RSA, 0, () => ResolvedArtifact);
export var Sandboxes = list(n0, _Sa, 0, () => Sandbox);
export var SandboxSessionPhases = list(n0, _SSPa, 0, () => SandboxSessionPhase);
export var BatchGetBuildBatches = op(
  n0,
  _BGBB,
  0,
  () => BatchGetBuildBatchesInput,
  () => BatchGetBuildBatchesOutput
);
export var BatchGetProjects = op(
  n0,
  _BGP,
  0,
  () => BatchGetProjectsInput,
  () => BatchGetProjectsOutput
);
export var BatchGetSandboxes = op(
  n0,
  _BGS,
  0,
  () => BatchGetSandboxesInput,
  () => BatchGetSandboxesOutput
);
export var CreateProject = op(
  n0,
  _CP,
  0,
  () => CreateProjectInput,
  () => CreateProjectOutput
);
export var RetryBuildBatch = op(
  n0,
  _RBB,
  0,
  () => RetryBuildBatchInput,
  () => RetryBuildBatchOutput
);
export var StartBuild = op(
  n0,
  _SB,
  0,
  () => StartBuildInput,
  () => StartBuildOutput
);
export var StartBuildBatch = op(
  n0,
  _SBB,
  0,
  () => StartBuildBatchInput,
  () => StartBuildBatchOutput
);
export var StartSandbox = op(
  n0,
  _SSt,
  0,
  () => StartSandboxInput,
  () => StartSandboxOutput
);
export var StopBuildBatch = op(
  n0,
  _SBBt,
  0,
  () => StopBuildBatchInput,
  () => StopBuildBatchOutput
);
export var StopSandbox = op(
  n0,
  _SSto,
  0,
  () => StopSandboxInput,
  () => StopSandboxOutput
);
export var UpdateProject = op(
  n0,
  _UP,
  0,
  () => UpdateProjectInput,
  () => UpdateProjectOutput
);
