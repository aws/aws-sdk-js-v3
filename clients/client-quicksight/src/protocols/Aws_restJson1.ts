// smithy-typescript generated code
import { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from "@aws-sdk/protocol-http";
import {
  decorateServiceException as __decorateServiceException,
  expectBoolean as __expectBoolean,
  expectInt32 as __expectInt32,
  expectLong as __expectLong,
  expectNonNull as __expectNonNull,
  expectNumber as __expectNumber,
  expectObject as __expectObject,
  expectString as __expectString,
  expectUnion as __expectUnion,
  extendedEncodeURIComponent as __extendedEncodeURIComponent,
  limitedParseDouble as __limitedParseDouble,
  map as __map,
  parseEpochTimestamp as __parseEpochTimestamp,
  resolvedPath as __resolvedPath,
  serializeFloat as __serializeFloat,
  throwDefaultError,
} from "@aws-sdk/smithy-client";
import {
  Endpoint as __Endpoint,
  ResponseMetadata as __ResponseMetadata,
  SerdeContext as __SerdeContext,
} from "@aws-sdk/types";

import { CancelIngestionCommandInput, CancelIngestionCommandOutput } from "../commands/CancelIngestionCommand";
import {
  CreateAccountCustomizationCommandInput,
  CreateAccountCustomizationCommandOutput,
} from "../commands/CreateAccountCustomizationCommand";
import {
  CreateAccountSubscriptionCommandInput,
  CreateAccountSubscriptionCommandOutput,
} from "../commands/CreateAccountSubscriptionCommand";
import { CreateAnalysisCommandInput, CreateAnalysisCommandOutput } from "../commands/CreateAnalysisCommand";
import { CreateDashboardCommandInput, CreateDashboardCommandOutput } from "../commands/CreateDashboardCommand";
import { CreateDataSetCommandInput, CreateDataSetCommandOutput } from "../commands/CreateDataSetCommand";
import { CreateDataSourceCommandInput, CreateDataSourceCommandOutput } from "../commands/CreateDataSourceCommand";
import { CreateFolderCommandInput, CreateFolderCommandOutput } from "../commands/CreateFolderCommand";
import {
  CreateFolderMembershipCommandInput,
  CreateFolderMembershipCommandOutput,
} from "../commands/CreateFolderMembershipCommand";
import { CreateGroupCommandInput, CreateGroupCommandOutput } from "../commands/CreateGroupCommand";
import {
  CreateGroupMembershipCommandInput,
  CreateGroupMembershipCommandOutput,
} from "../commands/CreateGroupMembershipCommand";
import {
  CreateIAMPolicyAssignmentCommandInput,
  CreateIAMPolicyAssignmentCommandOutput,
} from "../commands/CreateIAMPolicyAssignmentCommand";
import { CreateIngestionCommandInput, CreateIngestionCommandOutput } from "../commands/CreateIngestionCommand";
import { CreateNamespaceCommandInput, CreateNamespaceCommandOutput } from "../commands/CreateNamespaceCommand";
import {
  CreateTemplateAliasCommandInput,
  CreateTemplateAliasCommandOutput,
} from "../commands/CreateTemplateAliasCommand";
import { CreateTemplateCommandInput, CreateTemplateCommandOutput } from "../commands/CreateTemplateCommand";
import { CreateThemeAliasCommandInput, CreateThemeAliasCommandOutput } from "../commands/CreateThemeAliasCommand";
import { CreateThemeCommandInput, CreateThemeCommandOutput } from "../commands/CreateThemeCommand";
import {
  DeleteAccountCustomizationCommandInput,
  DeleteAccountCustomizationCommandOutput,
} from "../commands/DeleteAccountCustomizationCommand";
import {
  DeleteAccountSubscriptionCommandInput,
  DeleteAccountSubscriptionCommandOutput,
} from "../commands/DeleteAccountSubscriptionCommand";
import { DeleteAnalysisCommandInput, DeleteAnalysisCommandOutput } from "../commands/DeleteAnalysisCommand";
import { DeleteDashboardCommandInput, DeleteDashboardCommandOutput } from "../commands/DeleteDashboardCommand";
import { DeleteDataSetCommandInput, DeleteDataSetCommandOutput } from "../commands/DeleteDataSetCommand";
import { DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput } from "../commands/DeleteDataSourceCommand";
import { DeleteFolderCommandInput, DeleteFolderCommandOutput } from "../commands/DeleteFolderCommand";
import {
  DeleteFolderMembershipCommandInput,
  DeleteFolderMembershipCommandOutput,
} from "../commands/DeleteFolderMembershipCommand";
import { DeleteGroupCommandInput, DeleteGroupCommandOutput } from "../commands/DeleteGroupCommand";
import {
  DeleteGroupMembershipCommandInput,
  DeleteGroupMembershipCommandOutput,
} from "../commands/DeleteGroupMembershipCommand";
import {
  DeleteIAMPolicyAssignmentCommandInput,
  DeleteIAMPolicyAssignmentCommandOutput,
} from "../commands/DeleteIAMPolicyAssignmentCommand";
import { DeleteNamespaceCommandInput, DeleteNamespaceCommandOutput } from "../commands/DeleteNamespaceCommand";
import {
  DeleteTemplateAliasCommandInput,
  DeleteTemplateAliasCommandOutput,
} from "../commands/DeleteTemplateAliasCommand";
import { DeleteTemplateCommandInput, DeleteTemplateCommandOutput } from "../commands/DeleteTemplateCommand";
import { DeleteThemeAliasCommandInput, DeleteThemeAliasCommandOutput } from "../commands/DeleteThemeAliasCommand";
import { DeleteThemeCommandInput, DeleteThemeCommandOutput } from "../commands/DeleteThemeCommand";
import {
  DeleteUserByPrincipalIdCommandInput,
  DeleteUserByPrincipalIdCommandOutput,
} from "../commands/DeleteUserByPrincipalIdCommand";
import { DeleteUserCommandInput, DeleteUserCommandOutput } from "../commands/DeleteUserCommand";
import {
  DescribeAccountCustomizationCommandInput,
  DescribeAccountCustomizationCommandOutput,
} from "../commands/DescribeAccountCustomizationCommand";
import {
  DescribeAccountSettingsCommandInput,
  DescribeAccountSettingsCommandOutput,
} from "../commands/DescribeAccountSettingsCommand";
import {
  DescribeAccountSubscriptionCommandInput,
  DescribeAccountSubscriptionCommandOutput,
} from "../commands/DescribeAccountSubscriptionCommand";
import { DescribeAnalysisCommandInput, DescribeAnalysisCommandOutput } from "../commands/DescribeAnalysisCommand";
import {
  DescribeAnalysisDefinitionCommandInput,
  DescribeAnalysisDefinitionCommandOutput,
} from "../commands/DescribeAnalysisDefinitionCommand";
import {
  DescribeAnalysisPermissionsCommandInput,
  DescribeAnalysisPermissionsCommandOutput,
} from "../commands/DescribeAnalysisPermissionsCommand";
import { DescribeDashboardCommandInput, DescribeDashboardCommandOutput } from "../commands/DescribeDashboardCommand";
import {
  DescribeDashboardDefinitionCommandInput,
  DescribeDashboardDefinitionCommandOutput,
} from "../commands/DescribeDashboardDefinitionCommand";
import {
  DescribeDashboardPermissionsCommandInput,
  DescribeDashboardPermissionsCommandOutput,
} from "../commands/DescribeDashboardPermissionsCommand";
import { DescribeDataSetCommandInput, DescribeDataSetCommandOutput } from "../commands/DescribeDataSetCommand";
import {
  DescribeDataSetPermissionsCommandInput,
  DescribeDataSetPermissionsCommandOutput,
} from "../commands/DescribeDataSetPermissionsCommand";
import { DescribeDataSourceCommandInput, DescribeDataSourceCommandOutput } from "../commands/DescribeDataSourceCommand";
import {
  DescribeDataSourcePermissionsCommandInput,
  DescribeDataSourcePermissionsCommandOutput,
} from "../commands/DescribeDataSourcePermissionsCommand";
import { DescribeFolderCommandInput, DescribeFolderCommandOutput } from "../commands/DescribeFolderCommand";
import {
  DescribeFolderPermissionsCommandInput,
  DescribeFolderPermissionsCommandOutput,
} from "../commands/DescribeFolderPermissionsCommand";
import {
  DescribeFolderResolvedPermissionsCommandInput,
  DescribeFolderResolvedPermissionsCommandOutput,
} from "../commands/DescribeFolderResolvedPermissionsCommand";
import { DescribeGroupCommandInput, DescribeGroupCommandOutput } from "../commands/DescribeGroupCommand";
import {
  DescribeGroupMembershipCommandInput,
  DescribeGroupMembershipCommandOutput,
} from "../commands/DescribeGroupMembershipCommand";
import {
  DescribeIAMPolicyAssignmentCommandInput,
  DescribeIAMPolicyAssignmentCommandOutput,
} from "../commands/DescribeIAMPolicyAssignmentCommand";
import { DescribeIngestionCommandInput, DescribeIngestionCommandOutput } from "../commands/DescribeIngestionCommand";
import {
  DescribeIpRestrictionCommandInput,
  DescribeIpRestrictionCommandOutput,
} from "../commands/DescribeIpRestrictionCommand";
import { DescribeNamespaceCommandInput, DescribeNamespaceCommandOutput } from "../commands/DescribeNamespaceCommand";
import {
  DescribeTemplateAliasCommandInput,
  DescribeTemplateAliasCommandOutput,
} from "../commands/DescribeTemplateAliasCommand";
import { DescribeTemplateCommandInput, DescribeTemplateCommandOutput } from "../commands/DescribeTemplateCommand";
import {
  DescribeTemplateDefinitionCommandInput,
  DescribeTemplateDefinitionCommandOutput,
} from "../commands/DescribeTemplateDefinitionCommand";
import {
  DescribeTemplatePermissionsCommandInput,
  DescribeTemplatePermissionsCommandOutput,
} from "../commands/DescribeTemplatePermissionsCommand";
import { DescribeThemeAliasCommandInput, DescribeThemeAliasCommandOutput } from "../commands/DescribeThemeAliasCommand";
import { DescribeThemeCommandInput, DescribeThemeCommandOutput } from "../commands/DescribeThemeCommand";
import {
  DescribeThemePermissionsCommandInput,
  DescribeThemePermissionsCommandOutput,
} from "../commands/DescribeThemePermissionsCommand";
import { DescribeUserCommandInput, DescribeUserCommandOutput } from "../commands/DescribeUserCommand";
import {
  GenerateEmbedUrlForAnonymousUserCommandInput,
  GenerateEmbedUrlForAnonymousUserCommandOutput,
} from "../commands/GenerateEmbedUrlForAnonymousUserCommand";
import {
  GenerateEmbedUrlForRegisteredUserCommandInput,
  GenerateEmbedUrlForRegisteredUserCommandOutput,
} from "../commands/GenerateEmbedUrlForRegisteredUserCommand";
import {
  GetDashboardEmbedUrlCommandInput,
  GetDashboardEmbedUrlCommandOutput,
} from "../commands/GetDashboardEmbedUrlCommand";
import { GetSessionEmbedUrlCommandInput, GetSessionEmbedUrlCommandOutput } from "../commands/GetSessionEmbedUrlCommand";
import { ListAnalysesCommandInput, ListAnalysesCommandOutput } from "../commands/ListAnalysesCommand";
import { ListDashboardsCommandInput, ListDashboardsCommandOutput } from "../commands/ListDashboardsCommand";
import {
  ListDashboardVersionsCommandInput,
  ListDashboardVersionsCommandOutput,
} from "../commands/ListDashboardVersionsCommand";
import { ListDataSetsCommandInput, ListDataSetsCommandOutput } from "../commands/ListDataSetsCommand";
import { ListDataSourcesCommandInput, ListDataSourcesCommandOutput } from "../commands/ListDataSourcesCommand";
import { ListFolderMembersCommandInput, ListFolderMembersCommandOutput } from "../commands/ListFolderMembersCommand";
import { ListFoldersCommandInput, ListFoldersCommandOutput } from "../commands/ListFoldersCommand";
import {
  ListGroupMembershipsCommandInput,
  ListGroupMembershipsCommandOutput,
} from "../commands/ListGroupMembershipsCommand";
import { ListGroupsCommandInput, ListGroupsCommandOutput } from "../commands/ListGroupsCommand";
import {
  ListIAMPolicyAssignmentsCommandInput,
  ListIAMPolicyAssignmentsCommandOutput,
} from "../commands/ListIAMPolicyAssignmentsCommand";
import {
  ListIAMPolicyAssignmentsForUserCommandInput,
  ListIAMPolicyAssignmentsForUserCommandOutput,
} from "../commands/ListIAMPolicyAssignmentsForUserCommand";
import { ListIngestionsCommandInput, ListIngestionsCommandOutput } from "../commands/ListIngestionsCommand";
import { ListNamespacesCommandInput, ListNamespacesCommandOutput } from "../commands/ListNamespacesCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "../commands/ListTagsForResourceCommand";
import {
  ListTemplateAliasesCommandInput,
  ListTemplateAliasesCommandOutput,
} from "../commands/ListTemplateAliasesCommand";
import { ListTemplatesCommandInput, ListTemplatesCommandOutput } from "../commands/ListTemplatesCommand";
import {
  ListTemplateVersionsCommandInput,
  ListTemplateVersionsCommandOutput,
} from "../commands/ListTemplateVersionsCommand";
import { ListThemeAliasesCommandInput, ListThemeAliasesCommandOutput } from "../commands/ListThemeAliasesCommand";
import { ListThemesCommandInput, ListThemesCommandOutput } from "../commands/ListThemesCommand";
import { ListThemeVersionsCommandInput, ListThemeVersionsCommandOutput } from "../commands/ListThemeVersionsCommand";
import { ListUserGroupsCommandInput, ListUserGroupsCommandOutput } from "../commands/ListUserGroupsCommand";
import { ListUsersCommandInput, ListUsersCommandOutput } from "../commands/ListUsersCommand";
import { RegisterUserCommandInput, RegisterUserCommandOutput } from "../commands/RegisterUserCommand";
import { RestoreAnalysisCommandInput, RestoreAnalysisCommandOutput } from "../commands/RestoreAnalysisCommand";
import { SearchAnalysesCommandInput, SearchAnalysesCommandOutput } from "../commands/SearchAnalysesCommand";
import { SearchDashboardsCommandInput, SearchDashboardsCommandOutput } from "../commands/SearchDashboardsCommand";
import { SearchDataSetsCommandInput, SearchDataSetsCommandOutput } from "../commands/SearchDataSetsCommand";
import { SearchDataSourcesCommandInput, SearchDataSourcesCommandOutput } from "../commands/SearchDataSourcesCommand";
import { SearchFoldersCommandInput, SearchFoldersCommandOutput } from "../commands/SearchFoldersCommand";
import { SearchGroupsCommandInput, SearchGroupsCommandOutput } from "../commands/SearchGroupsCommand";
import { TagResourceCommandInput, TagResourceCommandOutput } from "../commands/TagResourceCommand";
import { UntagResourceCommandInput, UntagResourceCommandOutput } from "../commands/UntagResourceCommand";
import {
  UpdateAccountCustomizationCommandInput,
  UpdateAccountCustomizationCommandOutput,
} from "../commands/UpdateAccountCustomizationCommand";
import {
  UpdateAccountSettingsCommandInput,
  UpdateAccountSettingsCommandOutput,
} from "../commands/UpdateAccountSettingsCommand";
import { UpdateAnalysisCommandInput, UpdateAnalysisCommandOutput } from "../commands/UpdateAnalysisCommand";
import {
  UpdateAnalysisPermissionsCommandInput,
  UpdateAnalysisPermissionsCommandOutput,
} from "../commands/UpdateAnalysisPermissionsCommand";
import { UpdateDashboardCommandInput, UpdateDashboardCommandOutput } from "../commands/UpdateDashboardCommand";
import {
  UpdateDashboardPermissionsCommandInput,
  UpdateDashboardPermissionsCommandOutput,
} from "../commands/UpdateDashboardPermissionsCommand";
import {
  UpdateDashboardPublishedVersionCommandInput,
  UpdateDashboardPublishedVersionCommandOutput,
} from "../commands/UpdateDashboardPublishedVersionCommand";
import { UpdateDataSetCommandInput, UpdateDataSetCommandOutput } from "../commands/UpdateDataSetCommand";
import {
  UpdateDataSetPermissionsCommandInput,
  UpdateDataSetPermissionsCommandOutput,
} from "../commands/UpdateDataSetPermissionsCommand";
import { UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput } from "../commands/UpdateDataSourceCommand";
import {
  UpdateDataSourcePermissionsCommandInput,
  UpdateDataSourcePermissionsCommandOutput,
} from "../commands/UpdateDataSourcePermissionsCommand";
import { UpdateFolderCommandInput, UpdateFolderCommandOutput } from "../commands/UpdateFolderCommand";
import {
  UpdateFolderPermissionsCommandInput,
  UpdateFolderPermissionsCommandOutput,
} from "../commands/UpdateFolderPermissionsCommand";
import { UpdateGroupCommandInput, UpdateGroupCommandOutput } from "../commands/UpdateGroupCommand";
import {
  UpdateIAMPolicyAssignmentCommandInput,
  UpdateIAMPolicyAssignmentCommandOutput,
} from "../commands/UpdateIAMPolicyAssignmentCommand";
import {
  UpdateIpRestrictionCommandInput,
  UpdateIpRestrictionCommandOutput,
} from "../commands/UpdateIpRestrictionCommand";
import {
  UpdatePublicSharingSettingsCommandInput,
  UpdatePublicSharingSettingsCommandOutput,
} from "../commands/UpdatePublicSharingSettingsCommand";
import {
  UpdateTemplateAliasCommandInput,
  UpdateTemplateAliasCommandOutput,
} from "../commands/UpdateTemplateAliasCommand";
import { UpdateTemplateCommandInput, UpdateTemplateCommandOutput } from "../commands/UpdateTemplateCommand";
import {
  UpdateTemplatePermissionsCommandInput,
  UpdateTemplatePermissionsCommandOutput,
} from "../commands/UpdateTemplatePermissionsCommand";
import { UpdateThemeAliasCommandInput, UpdateThemeAliasCommandOutput } from "../commands/UpdateThemeAliasCommand";
import { UpdateThemeCommandInput, UpdateThemeCommandOutput } from "../commands/UpdateThemeCommand";
import {
  UpdateThemePermissionsCommandInput,
  UpdateThemePermissionsCommandOutput,
} from "../commands/UpdateThemePermissionsCommand";
import { UpdateUserCommandInput, UpdateUserCommandOutput } from "../commands/UpdateUserCommand";
import {
  AccessDeniedException,
  AccountCustomization,
  AccountInfo,
  AccountSettings,
  ActiveIAMPolicyAssignment,
  AdHocFilteringOption,
  AggregationFunction,
  AggregationSortConfiguration,
  AmazonElasticsearchParameters,
  AmazonOpenSearchParameters,
  Analysis,
  AnalysisDefaults,
  AnalysisError,
  AnchorDateConfiguration,
  AxisDataOptions,
  AxisDisplayDataDrivenRange,
  AxisDisplayMinMaxRange,
  AxisDisplayOptions,
  AxisDisplayRange,
  AxisLabelOptions,
  AxisLabelReferenceOptions,
  AxisLinearScale,
  AxisLogarithmicScale,
  AxisScale,
  AxisTickLabelOptions,
  BarChartAggregatedFieldWells,
  BarChartConfiguration,
  BarChartFieldWells,
  BarChartSortConfiguration,
  BarChartVisual,
  BodySectionConfiguration,
  BodySectionContent,
  BoxPlotAggregatedFieldWells,
  BoxPlotChartConfiguration,
  BoxPlotFieldWells,
  BoxPlotOptions,
  BoxPlotSortConfiguration,
  BoxPlotStyleOptions,
  BoxPlotVisual,
  CalculatedField,
  CalculatedMeasureField,
  CascadingControlConfiguration,
  CascadingControlSource,
  CategoricalDimensionField,
  CategoricalMeasureField,
  CategoryDrillDownFilter,
  CategoryFilter,
  CategoryFilterConfiguration,
  ChartAxisLabelOptions,
  ColumnConfiguration,
  ColumnHierarchy,
  ColumnIdentifier,
  ColumnSort,
  ColumnTooltipItem,
  ComboChartAggregatedFieldWells,
  ComboChartConfiguration,
  ComboChartFieldWells,
  ComboChartSortConfiguration,
  ContributionAnalysisDefault,
  CurrencyDisplayFormatConfiguration,
  CustomActionFilterOperation,
  CustomActionNavigationOperation,
  CustomActionSetParametersOperation,
  CustomActionURLOperation,
  CustomFilterConfiguration,
  CustomFilterListConfiguration,
  CustomParameterValues,
  CustomValuesConfiguration,
  DataLabelOptions,
  DataLabelType,
  DataPathColor,
  DataPathLabelType,
  DataPathValue,
  DataSetIdentifierDeclaration,
  DateAxisOptions,
  DateDimensionField,
  DateMeasureField,
  DateTimeDefaultValues,
  DateTimeFormatConfiguration,
  DateTimeHierarchy,
  DateTimeParameterDeclaration,
  DateTimePickerControlDisplayOptions,
  DateTimeValueWhenUnsetConfiguration,
  DecimalDefaultValues,
  DecimalParameterDeclaration,
  DecimalPlacesConfiguration,
  DecimalValueWhenUnsetConfiguration,
  DefaultFreeFormLayoutConfiguration,
  DefaultGridLayoutConfiguration,
  DefaultInteractiveLayoutConfiguration,
  DefaultNewSheetConfiguration,
  DefaultPaginatedLayoutConfiguration,
  DefaultSectionBasedLayoutConfiguration,
  DestinationParameterValueConfiguration,
  DimensionField,
  DrillDownFilter,
  DropDownControlDisplayOptions,
  DynamicDefaultValue,
  Entity,
  ExcludePeriodConfiguration,
  ExplicitHierarchy,
  FieldBasedTooltip,
  FieldLabelType,
  FieldSort,
  FieldSortOptions,
  FieldTooltipItem,
  Filter,
  FilterControl,
  FilterDateTimePickerControl,
  FilterDropDownControl,
  FilterGroup,
  FilterListConfiguration,
  FilterListControl,
  FilterOperationSelectedFieldsConfiguration,
  FilterOperationTargetVisualsConfiguration,
  FilterRelativeDateTimeControl,
  FilterScopeConfiguration,
  FilterSelectableValues,
  FilterSliderControl,
  FilterTextAreaControl,
  FilterTextFieldControl,
  FontConfiguration,
  FontSize,
  FontWeight,
  FormatConfiguration,
  FreeFormLayoutCanvasSizeOptions,
  FreeFormLayoutConfiguration,
  FreeFormLayoutElement,
  FreeFormLayoutElementBackgroundStyle,
  FreeFormLayoutElementBorderStyle,
  FreeFormLayoutScreenCanvasSizeOptions,
  FreeFormSectionLayoutConfiguration,
  GridLayoutCanvasSizeOptions,
  GridLayoutConfiguration,
  GridLayoutElement,
  GridLayoutScreenCanvasSizeOptions,
  HeaderFooterSectionConfiguration,
  IntegerDefaultValues,
  IntegerParameterDeclaration,
  IntegerValueWhenUnsetConfiguration,
  ItemsLimitConfiguration,
  LabelOptions,
  Layout,
  LayoutConfiguration,
  LegendOptions,
  ListControlDisplayOptions,
  ListControlSearchOptions,
  ListControlSelectAllOptions,
  LoadingAnimation,
  LocalNavigationConfiguration,
  LongFormatText,
  MaximumLabelType,
  MeasureField,
  MinimumLabelType,
  NegativeValueConfiguration,
  NullValueFormatConfiguration,
  NumberDisplayFormatConfiguration,
  NumberFormatConfiguration,
  NumericalAggregationFunction,
  NumericalDimensionField,
  NumericalMeasureField,
  NumericAxisOptions,
  NumericEqualityDrillDownFilter,
  NumericEqualityFilter,
  NumericFormatConfiguration,
  NumericRangeFilter,
  NumericRangeFilterValue,
  NumericSeparatorConfiguration,
  PaginationConfiguration,
  PanelConfiguration,
  PanelTitleOptions,
  ParameterControl,
  ParameterDateTimePickerControl,
  ParameterDeclaration,
  ParameterDropDownControl,
  ParameterListControl,
  ParameterSelectableValues,
  ParameterSliderControl,
  ParameterTextAreaControl,
  ParameterTextFieldControl,
  PercentageDisplayFormatConfiguration,
  PercentileAggregation,
  PercentVisibleRange,
  PredefinedHierarchy,
  RangeEndsLabelType,
  ReferenceLine,
  ReferenceLineCustomLabelConfiguration,
  ReferenceLineDataConfiguration,
  ReferenceLineDynamicDataConfiguration,
  ReferenceLineLabelConfiguration,
  ReferenceLineStaticDataConfiguration,
  ReferenceLineStyleConfiguration,
  ReferenceLineValueLabelConfiguration,
  RelativeDatesFilter,
  RelativeDateTimeControlDisplayOptions,
  RollingDateConfiguration,
  SameSheetTargetVisualConfiguration,
  ScrollBarOptions,
  SectionAfterPageBreak,
  SectionBasedLayoutCanvasSizeOptions,
  SectionBasedLayoutConfiguration,
  SectionBasedLayoutPaperCanvasSizeOptions,
  SectionLayoutConfiguration,
  SectionPageBreakConfiguration,
  SectionStyle,
  SelectedSheetsFilterScopeConfiguration,
  SetParameterValueConfiguration,
  Sheet,
  SheetControlLayout,
  SheetControlLayoutConfiguration,
  SheetElementConfigurationOverrides,
  SheetElementRenderingRule,
  SheetTextBox,
  SheetVisualScopingConfiguration,
  ShortFormatText,
  SliderControlDisplayOptions,
  SmallMultiplesOptions,
  Spacing,
  StringDefaultValues,
  StringFormatConfiguration,
  StringParameterDeclaration,
  StringValueWhenUnsetConfiguration,
  TextAreaControlDisplayOptions,
  TextControlPlaceholderOptions,
  TextFieldControlDisplayOptions,
  ThousandSeparatorOptions,
  TimeEqualityFilter,
  TimeRangeDrillDownFilter,
  TimeRangeFilter,
  TimeRangeFilterValue,
  TooltipItem,
  TooltipOptions,
  TopBottomFilter,
  VisibleRangeOptions,
  VisualCustomAction,
  VisualCustomActionOperation,
  VisualPalette,
  VisualSubtitleLabelOptions,
  VisualTitleLabelOptions,
} from "../models/models_0";
import {
  AnalysisDefinition,
  AnalysisSearchFilter,
  AnalysisSourceEntity,
  AnalysisSourceTemplate,
  AnalysisSummary,
  AnonymousUserDashboardEmbeddingConfiguration,
  AnonymousUserDashboardVisualEmbeddingConfiguration,
  AnonymousUserEmbeddingExperienceConfiguration,
  AnonymousUserQSearchBarEmbeddingConfiguration,
  ArcAxisConfiguration,
  ArcAxisDisplayRange,
  ArcConfiguration,
  ArcOptions,
  AthenaParameters,
  AuroraParameters,
  AuroraPostgreSqlParameters,
  AwsIotAnalyticsParameters,
  BinCountOptions,
  BinWidthOptions,
  BorderStyle,
  CalculatedColumn,
  CastColumnTypeOperation,
  ClusterMarker,
  ClusterMarkerConfiguration,
  ColorScale,
  ColumnDescription,
  ColumnGroup,
  ColumnGroupColumnSchema,
  ColumnGroupSchema,
  ColumnLevelPermissionRule,
  ColumnSchema,
  ColumnTag,
  ColumnTagName,
  ComboChartVisual,
  ComparisonConfiguration,
  ComparisonFormatConfiguration,
  Computation,
  ConcurrentUpdatingException,
  ConditionalFormattingColor,
  ConditionalFormattingCustomIconCondition,
  ConditionalFormattingCustomIconOptions,
  ConditionalFormattingGradientColor,
  ConditionalFormattingIcon,
  ConditionalFormattingIconDisplayConfiguration,
  ConditionalFormattingIconSet,
  ConditionalFormattingSolidColor,
  ConflictException,
  CustomContentConfiguration,
  CustomContentVisual,
  CustomNarrativeOptions,
  DashboardVisualId,
  DataBarsOptions,
  DataColor,
  DataFieldSeriesItem,
  DataPathSort,
  DataSetReference,
  DonutCenterOptions,
  DonutOptions,
  EmptyVisual,
  FieldSeriesItem,
  FilledMapAggregatedFieldWells,
  FilledMapConditionalFormatting,
  FilledMapConditionalFormattingOption,
  FilledMapConfiguration,
  FilledMapFieldWells,
  FilledMapShapeConditionalFormatting,
  FilledMapSortConfiguration,
  FilledMapVisual,
  ForecastComputation,
  ForecastConfiguration,
  ForecastScenario,
  FunnelChartAggregatedFieldWells,
  FunnelChartConfiguration,
  FunnelChartDataLabelOptions,
  FunnelChartFieldWells,
  FunnelChartSortConfiguration,
  FunnelChartVisual,
  GaugeChartArcConditionalFormatting,
  GaugeChartConditionalFormatting,
  GaugeChartConditionalFormattingOption,
  GaugeChartConfiguration,
  GaugeChartFieldWells,
  GaugeChartOptions,
  GaugeChartPrimaryValueConditionalFormatting,
  GaugeChartVisual,
  GeoSpatialColumnGroup,
  GeospatialCoordinateBounds,
  GeospatialMapAggregatedFieldWells,
  GeospatialMapConfiguration,
  GeospatialMapFieldWells,
  GeospatialMapStyleOptions,
  GeospatialMapVisual,
  GeospatialPointStyleOptions,
  GeospatialWindowOptions,
  GlobalTableBorderOptions,
  GradientColor,
  GradientStop,
  GrowthRateComputation,
  HeatMapAggregatedFieldWells,
  HeatMapConfiguration,
  HeatMapFieldWells,
  HeatMapSortConfiguration,
  HeatMapVisual,
  HistogramAggregatedFieldWells,
  HistogramBinOptions,
  HistogramConfiguration,
  HistogramFieldWells,
  HistogramVisual,
  InsightConfiguration,
  InsightVisual,
  InternalFailureException,
  InvalidParameterValueException,
  KPIConditionalFormatting,
  KPIConditionalFormattingOption,
  KPIConfiguration,
  KPIFieldWells,
  KPIOptions,
  KPIPrimaryValueConditionalFormatting,
  KPIProgressBarConditionalFormatting,
  KPISortConfiguration,
  KPIVisual,
  LineChartAggregatedFieldWells,
  LineChartConfiguration,
  LineChartDefaultSeriesSettings,
  LineChartFieldWells,
  LineChartLineStyleSettings,
  LineChartMarkerStyleSettings,
  LineChartSeriesSettings,
  LineChartSortConfiguration,
  LineChartVisual,
  LineSeriesAxisDisplayOptions,
  MaximumMinimumComputation,
  MetricComparisonComputation,
  MissingDataConfiguration,
  PeriodOverPeriodComputation,
  PeriodToDateComputation,
  PieChartAggregatedFieldWells,
  PieChartConfiguration,
  PieChartFieldWells,
  PieChartSortConfiguration,
  PieChartVisual,
  PivotFieldSortOptions,
  PivotTableAggregatedFieldWells,
  PivotTableCellConditionalFormatting,
  PivotTableConditionalFormatting,
  PivotTableConditionalFormattingOption,
  PivotTableConditionalFormattingScope,
  PivotTableConfiguration,
  PivotTableDataPathOption,
  PivotTableFieldOption,
  PivotTableFieldOptions,
  PivotTableFieldSubtotalOptions,
  PivotTableFieldWells,
  PivotTableOptions,
  PivotTablePaginatedReportOptions,
  PivotTableSortBy,
  PivotTableSortConfiguration,
  PivotTableTotalOptions,
  PivotTableVisual,
  PivotTotalOptions,
  ProgressBarOptions,
  RadarChartAggregatedFieldWells,
  RadarChartAreaStyleSettings,
  RadarChartConfiguration,
  RadarChartFieldWells,
  RadarChartSeriesSettings,
  RadarChartSortConfiguration,
  RadarChartVisual,
  ResourceExistsException,
  ResourceNotFoundException,
  ResourceUnavailableException,
  RowAlternateColorOptions,
  SankeyDiagramAggregatedFieldWells,
  SankeyDiagramChartConfiguration,
  SankeyDiagramFieldWells,
  SankeyDiagramSortConfiguration,
  SankeyDiagramVisual,
  ScatterPlotCategoricallyAggregatedFieldWells,
  ScatterPlotConfiguration,
  ScatterPlotFieldWells,
  ScatterPlotUnaggregatedFieldWells,
  ScatterPlotVisual,
  SecondaryValueOptions,
  SeriesItem,
  ShapeConditionalFormat,
  SheetDefinition,
  SignupResponse,
  SimpleClusterMarker,
  SubtotalOptions,
  TableAggregatedFieldWells,
  TableBorderOptions,
  TableCellConditionalFormatting,
  TableCellImageSizingConfiguration,
  TableCellStyle,
  TableConditionalFormatting,
  TableConditionalFormattingOption,
  TableConfiguration,
  TableFieldCustomIconContent,
  TableFieldCustomTextContent,
  TableFieldImageConfiguration,
  TableFieldLinkConfiguration,
  TableFieldLinkContentConfiguration,
  TableFieldOption,
  TableFieldOptions,
  TableFieldURLConfiguration,
  TableFieldWells,
  TableInlineVisualization,
  TableOptions,
  TablePaginatedReportOptions,
  TableRowConditionalFormatting,
  TableSideBorderOptions,
  TableSortConfiguration,
  TableUnaggregatedFieldWells,
  TableVisual,
  Tag,
  TextConditionalFormat,
  ThrottlingException,
  TimeBasedForecastProperties,
  TopBottomMoversComputation,
  TopBottomRankedComputation,
  TotalAggregationComputation,
  TotalOptions,
  TreeMapAggregatedFieldWells,
  TreeMapConfiguration,
  TreeMapFieldWells,
  TreeMapSortConfiguration,
  TreeMapVisual,
  TrendArrowOptions,
  UnaggregatedField,
  UniqueValuesComputation,
  Visual,
  WaterfallChartAggregatedFieldWells,
  WaterfallChartConfiguration,
  WaterfallChartFieldWells,
  WaterfallChartOptions,
  WaterfallChartSortConfiguration,
  WaterfallVisual,
  WhatIfPointScenario,
  WhatIfRangeScenario,
  WordCloudAggregatedFieldWells,
  WordCloudChartConfiguration,
  WordCloudFieldWells,
  WordCloudOptions,
  WordCloudSortConfiguration,
  WordCloudVisual,
} from "../models/models_1";
import {
  _Parameters,
  CreateColumnsOperation,
  CredentialPair,
  CustomSql,
  Dashboard,
  DashboardError,
  DashboardPublishOptions,
  DashboardSearchFilter,
  DashboardSourceEntity,
  DashboardSourceTemplate,
  DashboardSummary,
  DashboardVersion,
  DashboardVersionDefinition,
  DashboardVersionSummary,
  DashboardVisualPublishOptions,
  DatabricksParameters,
  DataColorPalette,
  DataPointDrillUpDownOption,
  DataPointMenuLabelOption,
  DataPointTooltipOption,
  DataSet,
  DataSetConfiguration,
  DataSetSchema,
  DataSetSearchFilter,
  DataSetSummary,
  DataSetUsageConfiguration,
  DataSource,
  DataSourceCredentials,
  DataSourceErrorInfo,
  DataSourceParameters,
  DataSourceSearchFilter,
  DataSourceSummary,
  DateTimeParameter,
  DecimalParameter,
  DomainNotWhitelistedException,
  ErrorInfo,
  ExasolParameters,
  ExportHiddenFieldsOption,
  ExportToCSVOption,
  ExportWithHiddenFieldsOption,
  FieldFolder,
  FilterOperation,
  Folder,
  FolderMember,
  FolderSearchFilter,
  FolderSummary,
  Font,
  Group,
  GroupMember,
  GutterStyle,
  IAMPolicyAssignment,
  Ingestion,
  InputColumn,
  IntegerParameter,
  InvalidNextTokenException,
  JiraParameters,
  JoinInstruction,
  JoinKeyProperties,
  LimitExceededException,
  LinkSharingConfiguration,
  LogicalTable,
  LogicalTableSource,
  ManifestFileLocation,
  MarginStyle,
  MariaDbParameters,
  MemberIdArnPair,
  MySqlParameters,
  NamespaceError,
  NamespaceInfoV2,
  OracleParameters,
  OutputColumn,
  PhysicalTable,
  PostgreSqlParameters,
  PreconditionNotMetException,
  PrestoParameters,
  ProjectOperation,
  QueueInfo,
  QuickSightUserNotFoundException,
  RdsParameters,
  RedshiftParameters,
  RegisteredUserConsoleFeatureConfigurations,
  RegisteredUserDashboardEmbeddingConfiguration,
  RegisteredUserDashboardFeatureConfigurations,
  RegisteredUserDashboardVisualEmbeddingConfiguration,
  RegisteredUserEmbeddingExperienceConfiguration,
  RegisteredUserQSearchBarEmbeddingConfiguration,
  RegisteredUserQuickSightConsoleEmbeddingConfiguration,
  RelationalTable,
  RenameColumnOperation,
  ResourcePermission,
  RowInfo,
  RowLevelPermissionDataSet,
  RowLevelPermissionTagConfiguration,
  RowLevelPermissionTagRule,
  S3Parameters,
  S3Source,
  ServiceNowParameters,
  SessionLifetimeInMinutesInvalidException,
  SessionTag,
  SheetControlsOption,
  SheetLayoutElementMaximizationOption,
  SheetStyle,
  SnowflakeParameters,
  SparkParameters,
  SqlServerParameters,
  SslProperties,
  StatePersistenceConfigurations,
  StringParameter,
  TagColumnOperation,
  Template,
  TemplateAlias,
  TemplateError,
  TemplateSourceAnalysis,
  TemplateSourceEntity,
  TemplateSourceTemplate,
  TemplateVersion,
  TemplateVersionDefinition,
  TeradataParameters,
  Theme,
  ThemeAlias,
  ThemeConfiguration,
  ThemeError,
  ThemeVersion,
  TileLayoutStyle,
  TileStyle,
  TransformOperation,
  TwitterParameters,
  Typography,
  UIColorPalette,
  UnsupportedPricingPlanException,
  UnsupportedUserEditionException,
  UntagColumnOperation,
  UploadSettings,
  User,
  VisualAxisSortOption,
  VisualMenuOption,
  VpcConnectionProperties,
} from "../models/models_2";
import {
  GroupSearchFilter,
  IAMPolicyAssignmentSummary,
  IdentityTypeNotSupportedException,
  InvalidRequestException,
  TemplateSummary,
  TemplateVersionSummary,
  ThemeSummary,
  ThemeVersionSummary,
} from "../models/models_3";
import { QuickSightServiceException as __BaseException } from "../models/QuickSightServiceException";

/**
 * serializeAws_restJson1CancelIngestionCommand
 */
export const se_CancelIngestionCommand = async (
  input: CancelIngestionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DataSetId", () => input.DataSetId!, "{DataSetId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "IngestionId", () => input.IngestionId!, "{IngestionId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateAccountCustomizationCommand
 */
export const se_CreateAccountCustomizationCommand = async (
  input: CreateAccountCustomizationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/customizations";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    namespace: [, input.Namespace!],
  });
  let body: any;
  body = JSON.stringify({
    ...(input.AccountCustomization != null && {
      AccountCustomization: se_AccountCustomization(input.AccountCustomization, context),
    }),
    ...(input.Tags != null && { Tags: se_TagList(input.Tags, context) }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1CreateAccountSubscriptionCommand
 */
export const se_CreateAccountSubscriptionCommand = async (
  input: CreateAccountSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/account/{AwsAccountId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.AccountName != null && { AccountName: input.AccountName }),
    ...(input.ActiveDirectoryName != null && { ActiveDirectoryName: input.ActiveDirectoryName }),
    ...(input.AdminGroup != null && { AdminGroup: se_GroupsList(input.AdminGroup, context) }),
    ...(input.AuthenticationMethod != null && { AuthenticationMethod: input.AuthenticationMethod }),
    ...(input.AuthorGroup != null && { AuthorGroup: se_GroupsList(input.AuthorGroup, context) }),
    ...(input.ContactNumber != null && { ContactNumber: input.ContactNumber }),
    ...(input.DirectoryId != null && { DirectoryId: input.DirectoryId }),
    ...(input.Edition != null && { Edition: input.Edition }),
    ...(input.EmailAddress != null && { EmailAddress: input.EmailAddress }),
    ...(input.FirstName != null && { FirstName: input.FirstName }),
    ...(input.LastName != null && { LastName: input.LastName }),
    ...(input.NotificationEmail != null && { NotificationEmail: input.NotificationEmail }),
    ...(input.ReaderGroup != null && { ReaderGroup: se_GroupsList(input.ReaderGroup, context) }),
    ...(input.Realm != null && { Realm: input.Realm }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateAnalysisCommand
 */
export const se_CreateAnalysisCommand = async (
  input: CreateAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/analyses/{AnalysisId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "AnalysisId", () => input.AnalysisId!, "{AnalysisId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.Definition != null && { Definition: se_AnalysisDefinition(input.Definition, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Parameters != null && { Parameters: se__Parameters(input.Parameters, context) }),
    ...(input.Permissions != null && { Permissions: se_ResourcePermissionList(input.Permissions, context) }),
    ...(input.SourceEntity != null && { SourceEntity: se_AnalysisSourceEntity(input.SourceEntity, context) }),
    ...(input.Tags != null && { Tags: se_TagList(input.Tags, context) }),
    ...(input.ThemeArn != null && { ThemeArn: input.ThemeArn }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateDashboardCommand
 */
export const se_CreateDashboardCommand = async (
  input: CreateDashboardCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DashboardId", () => input.DashboardId!, "{DashboardId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.DashboardPublishOptions != null && {
      DashboardPublishOptions: se_DashboardPublishOptions(input.DashboardPublishOptions, context),
    }),
    ...(input.Definition != null && { Definition: se_DashboardVersionDefinition(input.Definition, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Parameters != null && { Parameters: se__Parameters(input.Parameters, context) }),
    ...(input.Permissions != null && { Permissions: se_ResourcePermissionList(input.Permissions, context) }),
    ...(input.SourceEntity != null && { SourceEntity: se_DashboardSourceEntity(input.SourceEntity, context) }),
    ...(input.Tags != null && { Tags: se_TagList(input.Tags, context) }),
    ...(input.ThemeArn != null && { ThemeArn: input.ThemeArn }),
    ...(input.VersionDescription != null && { VersionDescription: input.VersionDescription }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateDataSetCommand
 */
export const se_CreateDataSetCommand = async (
  input: CreateDataSetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/data-sets";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.ColumnGroups != null && { ColumnGroups: se_ColumnGroupList(input.ColumnGroups, context) }),
    ...(input.ColumnLevelPermissionRules != null && {
      ColumnLevelPermissionRules: se_ColumnLevelPermissionRuleList(input.ColumnLevelPermissionRules, context),
    }),
    ...(input.DataSetId != null && { DataSetId: input.DataSetId }),
    ...(input.DataSetUsageConfiguration != null && {
      DataSetUsageConfiguration: se_DataSetUsageConfiguration(input.DataSetUsageConfiguration, context),
    }),
    ...(input.FieldFolders != null && { FieldFolders: se_FieldFolderMap(input.FieldFolders, context) }),
    ...(input.ImportMode != null && { ImportMode: input.ImportMode }),
    ...(input.LogicalTableMap != null && { LogicalTableMap: se_LogicalTableMap(input.LogicalTableMap, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Permissions != null && { Permissions: se_ResourcePermissionList(input.Permissions, context) }),
    ...(input.PhysicalTableMap != null && { PhysicalTableMap: se_PhysicalTableMap(input.PhysicalTableMap, context) }),
    ...(input.RowLevelPermissionDataSet != null && {
      RowLevelPermissionDataSet: se_RowLevelPermissionDataSet(input.RowLevelPermissionDataSet, context),
    }),
    ...(input.RowLevelPermissionTagConfiguration != null && {
      RowLevelPermissionTagConfiguration: se_RowLevelPermissionTagConfiguration(
        input.RowLevelPermissionTagConfiguration,
        context
      ),
    }),
    ...(input.Tags != null && { Tags: se_TagList(input.Tags, context) }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateDataSourceCommand
 */
export const se_CreateDataSourceCommand = async (
  input: CreateDataSourceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/data-sources";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.Credentials != null && { Credentials: se_DataSourceCredentials(input.Credentials, context) }),
    ...(input.DataSourceId != null && { DataSourceId: input.DataSourceId }),
    ...(input.DataSourceParameters != null && {
      DataSourceParameters: se_DataSourceParameters(input.DataSourceParameters, context),
    }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Permissions != null && { Permissions: se_ResourcePermissionList(input.Permissions, context) }),
    ...(input.SslProperties != null && { SslProperties: se_SslProperties(input.SslProperties, context) }),
    ...(input.Tags != null && { Tags: se_TagList(input.Tags, context) }),
    ...(input.Type != null && { Type: input.Type }),
    ...(input.VpcConnectionProperties != null && {
      VpcConnectionProperties: se_VpcConnectionProperties(input.VpcConnectionProperties, context),
    }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateFolderCommand
 */
export const se_CreateFolderCommand = async (
  input: CreateFolderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/folders/{FolderId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "FolderId", () => input.FolderId!, "{FolderId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.FolderType != null && { FolderType: input.FolderType }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.ParentFolderArn != null && { ParentFolderArn: input.ParentFolderArn }),
    ...(input.Permissions != null && { Permissions: se_ResourcePermissionList(input.Permissions, context) }),
    ...(input.Tags != null && { Tags: se_TagList(input.Tags, context) }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateFolderMembershipCommand
 */
export const se_CreateFolderMembershipCommand = async (
  input: CreateFolderMembershipCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/folders/{FolderId}/members/{MemberType}/{MemberId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "FolderId", () => input.FolderId!, "{FolderId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "MemberId", () => input.MemberId!, "{MemberId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "MemberType", () => input.MemberType!, "{MemberType}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateGroupCommand
 */
export const se_CreateGroupCommand = async (
  input: CreateGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.Description != null && { Description: input.Description }),
    ...(input.GroupName != null && { GroupName: input.GroupName }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateGroupMembershipCommand
 */
export const se_CreateGroupMembershipCommand = async (
  input: CreateGroupMembershipCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}";
  resolvedPath = __resolvedPath(resolvedPath, input, "MemberName", () => input.MemberName!, "{MemberName}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "GroupName", () => input.GroupName!, "{GroupName}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateIAMPolicyAssignmentCommand
 */
export const se_CreateIAMPolicyAssignmentCommand = async (
  input: CreateIAMPolicyAssignmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.AssignmentName != null && { AssignmentName: input.AssignmentName }),
    ...(input.AssignmentStatus != null && { AssignmentStatus: input.AssignmentStatus }),
    ...(input.Identities != null && { Identities: se_IdentityMap(input.Identities, context) }),
    ...(input.PolicyArn != null && { PolicyArn: input.PolicyArn }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateIngestionCommand
 */
export const se_CreateIngestionCommand = async (
  input: CreateIngestionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}";
  resolvedPath = __resolvedPath(resolvedPath, input, "DataSetId", () => input.DataSetId!, "{DataSetId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "IngestionId", () => input.IngestionId!, "{IngestionId}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.IngestionType != null && { IngestionType: input.IngestionType }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateNamespaceCommand
 */
export const se_CreateNamespaceCommand = async (
  input: CreateNamespaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.IdentityStore != null && { IdentityStore: input.IdentityStore }),
    ...(input.Namespace != null && { Namespace: input.Namespace }),
    ...(input.Tags != null && { Tags: se_TagList(input.Tags, context) }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateTemplateCommand
 */
export const se_CreateTemplateCommand = async (
  input: CreateTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/templates/{TemplateId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "TemplateId", () => input.TemplateId!, "{TemplateId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.Definition != null && { Definition: se_TemplateVersionDefinition(input.Definition, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Permissions != null && { Permissions: se_ResourcePermissionList(input.Permissions, context) }),
    ...(input.SourceEntity != null && { SourceEntity: se_TemplateSourceEntity(input.SourceEntity, context) }),
    ...(input.Tags != null && { Tags: se_TagList(input.Tags, context) }),
    ...(input.VersionDescription != null && { VersionDescription: input.VersionDescription }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateTemplateAliasCommand
 */
export const se_CreateTemplateAliasCommand = async (
  input: CreateTemplateAliasCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "TemplateId", () => input.TemplateId!, "{TemplateId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "AliasName", () => input.AliasName!, "{AliasName}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.TemplateVersionNumber != null && { TemplateVersionNumber: input.TemplateVersionNumber }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateThemeCommand
 */
export const se_CreateThemeCommand = async (
  input: CreateThemeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/themes/{ThemeId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "ThemeId", () => input.ThemeId!, "{ThemeId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.BaseThemeId != null && { BaseThemeId: input.BaseThemeId }),
    ...(input.Configuration != null && { Configuration: se_ThemeConfiguration(input.Configuration, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Permissions != null && { Permissions: se_ResourcePermissionList(input.Permissions, context) }),
    ...(input.Tags != null && { Tags: se_TagList(input.Tags, context) }),
    ...(input.VersionDescription != null && { VersionDescription: input.VersionDescription }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1CreateThemeAliasCommand
 */
export const se_CreateThemeAliasCommand = async (
  input: CreateThemeAliasCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "ThemeId", () => input.ThemeId!, "{ThemeId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "AliasName", () => input.AliasName!, "{AliasName}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.ThemeVersionNumber != null && { ThemeVersionNumber: input.ThemeVersionNumber }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteAccountCustomizationCommand
 */
export const se_DeleteAccountCustomizationCommand = async (
  input: DeleteAccountCustomizationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/customizations";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    namespace: [, input.Namespace!],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteAccountSubscriptionCommand
 */
export const se_DeleteAccountSubscriptionCommand = async (
  input: DeleteAccountSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/account/{AwsAccountId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteAnalysisCommand
 */
export const se_DeleteAnalysisCommand = async (
  input: DeleteAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/analyses/{AnalysisId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "AnalysisId", () => input.AnalysisId!, "{AnalysisId}", false);
  const query: any = map({
    "recovery-window-in-days": [
      () => input.RecoveryWindowInDays !== void 0,
      () => input.RecoveryWindowInDays!.toString(),
    ],
    "force-delete-without-recovery": [
      () => input.ForceDeleteWithoutRecovery !== void 0,
      () => input.ForceDeleteWithoutRecovery!.toString(),
    ],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteDashboardCommand
 */
export const se_DeleteDashboardCommand = async (
  input: DeleteDashboardCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DashboardId", () => input.DashboardId!, "{DashboardId}", false);
  const query: any = map({
    "version-number": [() => input.VersionNumber !== void 0, () => input.VersionNumber!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteDataSetCommand
 */
export const se_DeleteDataSetCommand = async (
  input: DeleteDataSetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sets/{DataSetId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DataSetId", () => input.DataSetId!, "{DataSetId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteDataSourceCommand
 */
export const se_DeleteDataSourceCommand = async (
  input: DeleteDataSourceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sources/{DataSourceId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "DataSourceId",
    () => input.DataSourceId!,
    "{DataSourceId}",
    false
  );
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteFolderCommand
 */
export const se_DeleteFolderCommand = async (
  input: DeleteFolderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/folders/{FolderId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "FolderId", () => input.FolderId!, "{FolderId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteFolderMembershipCommand
 */
export const se_DeleteFolderMembershipCommand = async (
  input: DeleteFolderMembershipCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/folders/{FolderId}/members/{MemberType}/{MemberId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "FolderId", () => input.FolderId!, "{FolderId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "MemberId", () => input.MemberId!, "{MemberId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "MemberType", () => input.MemberType!, "{MemberType}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteGroupCommand
 */
export const se_DeleteGroupCommand = async (
  input: DeleteGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}";
  resolvedPath = __resolvedPath(resolvedPath, input, "GroupName", () => input.GroupName!, "{GroupName}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteGroupMembershipCommand
 */
export const se_DeleteGroupMembershipCommand = async (
  input: DeleteGroupMembershipCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}";
  resolvedPath = __resolvedPath(resolvedPath, input, "MemberName", () => input.MemberName!, "{MemberName}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "GroupName", () => input.GroupName!, "{GroupName}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteIAMPolicyAssignmentCommand
 */
export const se_DeleteIAMPolicyAssignmentCommand = async (
  input: DeleteIAMPolicyAssignmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespace/{Namespace}/iam-policy-assignments/{AssignmentName}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AssignmentName",
    () => input.AssignmentName!,
    "{AssignmentName}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteNamespaceCommand
 */
export const se_DeleteNamespaceCommand = async (
  input: DeleteNamespaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteTemplateCommand
 */
export const se_DeleteTemplateCommand = async (
  input: DeleteTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/templates/{TemplateId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "TemplateId", () => input.TemplateId!, "{TemplateId}", false);
  const query: any = map({
    "version-number": [() => input.VersionNumber !== void 0, () => input.VersionNumber!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteTemplateAliasCommand
 */
export const se_DeleteTemplateAliasCommand = async (
  input: DeleteTemplateAliasCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "TemplateId", () => input.TemplateId!, "{TemplateId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "AliasName", () => input.AliasName!, "{AliasName}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteThemeCommand
 */
export const se_DeleteThemeCommand = async (
  input: DeleteThemeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/themes/{ThemeId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "ThemeId", () => input.ThemeId!, "{ThemeId}", false);
  const query: any = map({
    "version-number": [() => input.VersionNumber !== void 0, () => input.VersionNumber!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteThemeAliasCommand
 */
export const se_DeleteThemeAliasCommand = async (
  input: DeleteThemeAliasCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "ThemeId", () => input.ThemeId!, "{ThemeId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "AliasName", () => input.AliasName!, "{AliasName}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteUserCommand
 */
export const se_DeleteUserCommand = async (
  input: DeleteUserCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}";
  resolvedPath = __resolvedPath(resolvedPath, input, "UserName", () => input.UserName!, "{UserName}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DeleteUserByPrincipalIdCommand
 */
export const se_DeleteUserByPrincipalIdCommand = async (
  input: DeleteUserByPrincipalIdCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/user-principals/{PrincipalId}";
  resolvedPath = __resolvedPath(resolvedPath, input, "PrincipalId", () => input.PrincipalId!, "{PrincipalId}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeAccountCustomizationCommand
 */
export const se_DescribeAccountCustomizationCommand = async (
  input: DescribeAccountCustomizationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/customizations";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    namespace: [, input.Namespace!],
    resolved: [() => input.Resolved !== void 0, () => input.Resolved!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeAccountSettingsCommand
 */
export const se_DescribeAccountSettingsCommand = async (
  input: DescribeAccountSettingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/settings";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeAccountSubscriptionCommand
 */
export const se_DescribeAccountSubscriptionCommand = async (
  input: DescribeAccountSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/account/{AwsAccountId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeAnalysisCommand
 */
export const se_DescribeAnalysisCommand = async (
  input: DescribeAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/analyses/{AnalysisId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "AnalysisId", () => input.AnalysisId!, "{AnalysisId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeAnalysisDefinitionCommand
 */
export const se_DescribeAnalysisDefinitionCommand = async (
  input: DescribeAnalysisDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/analyses/{AnalysisId}/definition";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "AnalysisId", () => input.AnalysisId!, "{AnalysisId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeAnalysisPermissionsCommand
 */
export const se_DescribeAnalysisPermissionsCommand = async (
  input: DescribeAnalysisPermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "AnalysisId", () => input.AnalysisId!, "{AnalysisId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeDashboardCommand
 */
export const se_DescribeDashboardCommand = async (
  input: DescribeDashboardCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DashboardId", () => input.DashboardId!, "{DashboardId}", false);
  const query: any = map({
    "version-number": [() => input.VersionNumber !== void 0, () => input.VersionNumber!.toString()],
    "alias-name": [, input.AliasName!],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeDashboardDefinitionCommand
 */
export const se_DescribeDashboardDefinitionCommand = async (
  input: DescribeDashboardDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}/definition";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DashboardId", () => input.DashboardId!, "{DashboardId}", false);
  const query: any = map({
    "version-number": [() => input.VersionNumber !== void 0, () => input.VersionNumber!.toString()],
    "alias-name": [, input.AliasName!],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeDashboardPermissionsCommand
 */
export const se_DescribeDashboardPermissionsCommand = async (
  input: DescribeDashboardPermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DashboardId", () => input.DashboardId!, "{DashboardId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeDataSetCommand
 */
export const se_DescribeDataSetCommand = async (
  input: DescribeDataSetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sets/{DataSetId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DataSetId", () => input.DataSetId!, "{DataSetId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeDataSetPermissionsCommand
 */
export const se_DescribeDataSetPermissionsCommand = async (
  input: DescribeDataSetPermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DataSetId", () => input.DataSetId!, "{DataSetId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeDataSourceCommand
 */
export const se_DescribeDataSourceCommand = async (
  input: DescribeDataSourceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sources/{DataSourceId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "DataSourceId",
    () => input.DataSourceId!,
    "{DataSourceId}",
    false
  );
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeDataSourcePermissionsCommand
 */
export const se_DescribeDataSourcePermissionsCommand = async (
  input: DescribeDataSourcePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "DataSourceId",
    () => input.DataSourceId!,
    "{DataSourceId}",
    false
  );
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeFolderCommand
 */
export const se_DescribeFolderCommand = async (
  input: DescribeFolderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/folders/{FolderId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "FolderId", () => input.FolderId!, "{FolderId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeFolderPermissionsCommand
 */
export const se_DescribeFolderPermissionsCommand = async (
  input: DescribeFolderPermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/folders/{FolderId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "FolderId", () => input.FolderId!, "{FolderId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeFolderResolvedPermissionsCommand
 */
export const se_DescribeFolderResolvedPermissionsCommand = async (
  input: DescribeFolderResolvedPermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/folders/{FolderId}/resolved-permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "FolderId", () => input.FolderId!, "{FolderId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeGroupCommand
 */
export const se_DescribeGroupCommand = async (
  input: DescribeGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}";
  resolvedPath = __resolvedPath(resolvedPath, input, "GroupName", () => input.GroupName!, "{GroupName}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeGroupMembershipCommand
 */
export const se_DescribeGroupMembershipCommand = async (
  input: DescribeGroupMembershipCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}";
  resolvedPath = __resolvedPath(resolvedPath, input, "MemberName", () => input.MemberName!, "{MemberName}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "GroupName", () => input.GroupName!, "{GroupName}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeIAMPolicyAssignmentCommand
 */
export const se_DescribeIAMPolicyAssignmentCommand = async (
  input: DescribeIAMPolicyAssignmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AssignmentName",
    () => input.AssignmentName!,
    "{AssignmentName}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeIngestionCommand
 */
export const se_DescribeIngestionCommand = async (
  input: DescribeIngestionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DataSetId", () => input.DataSetId!, "{DataSetId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "IngestionId", () => input.IngestionId!, "{IngestionId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeIpRestrictionCommand
 */
export const se_DescribeIpRestrictionCommand = async (
  input: DescribeIpRestrictionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/ip-restriction";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeNamespaceCommand
 */
export const se_DescribeNamespaceCommand = async (
  input: DescribeNamespaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeTemplateCommand
 */
export const se_DescribeTemplateCommand = async (
  input: DescribeTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/templates/{TemplateId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "TemplateId", () => input.TemplateId!, "{TemplateId}", false);
  const query: any = map({
    "version-number": [() => input.VersionNumber !== void 0, () => input.VersionNumber!.toString()],
    "alias-name": [, input.AliasName!],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeTemplateAliasCommand
 */
export const se_DescribeTemplateAliasCommand = async (
  input: DescribeTemplateAliasCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "TemplateId", () => input.TemplateId!, "{TemplateId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "AliasName", () => input.AliasName!, "{AliasName}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeTemplateDefinitionCommand
 */
export const se_DescribeTemplateDefinitionCommand = async (
  input: DescribeTemplateDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/templates/{TemplateId}/definition";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "TemplateId", () => input.TemplateId!, "{TemplateId}", false);
  const query: any = map({
    "version-number": [() => input.VersionNumber !== void 0, () => input.VersionNumber!.toString()],
    "alias-name": [, input.AliasName!],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeTemplatePermissionsCommand
 */
export const se_DescribeTemplatePermissionsCommand = async (
  input: DescribeTemplatePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/templates/{TemplateId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "TemplateId", () => input.TemplateId!, "{TemplateId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeThemeCommand
 */
export const se_DescribeThemeCommand = async (
  input: DescribeThemeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/themes/{ThemeId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "ThemeId", () => input.ThemeId!, "{ThemeId}", false);
  const query: any = map({
    "version-number": [() => input.VersionNumber !== void 0, () => input.VersionNumber!.toString()],
    "alias-name": [, input.AliasName!],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeThemeAliasCommand
 */
export const se_DescribeThemeAliasCommand = async (
  input: DescribeThemeAliasCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "ThemeId", () => input.ThemeId!, "{ThemeId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "AliasName", () => input.AliasName!, "{AliasName}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeThemePermissionsCommand
 */
export const se_DescribeThemePermissionsCommand = async (
  input: DescribeThemePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/themes/{ThemeId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "ThemeId", () => input.ThemeId!, "{ThemeId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1DescribeUserCommand
 */
export const se_DescribeUserCommand = async (
  input: DescribeUserCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}";
  resolvedPath = __resolvedPath(resolvedPath, input, "UserName", () => input.UserName!, "{UserName}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1GenerateEmbedUrlForAnonymousUserCommand
 */
export const se_GenerateEmbedUrlForAnonymousUserCommand = async (
  input: GenerateEmbedUrlForAnonymousUserCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/embed-url/anonymous-user";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.AllowedDomains != null && { AllowedDomains: se_StringList(input.AllowedDomains, context) }),
    ...(input.AuthorizedResourceArns != null && {
      AuthorizedResourceArns: se_ArnList(input.AuthorizedResourceArns, context),
    }),
    ...(input.ExperienceConfiguration != null && {
      ExperienceConfiguration: se_AnonymousUserEmbeddingExperienceConfiguration(input.ExperienceConfiguration, context),
    }),
    ...(input.Namespace != null && { Namespace: input.Namespace }),
    ...(input.SessionLifetimeInMinutes != null && { SessionLifetimeInMinutes: input.SessionLifetimeInMinutes }),
    ...(input.SessionTags != null && { SessionTags: se_SessionTagList(input.SessionTags, context) }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1GenerateEmbedUrlForRegisteredUserCommand
 */
export const se_GenerateEmbedUrlForRegisteredUserCommand = async (
  input: GenerateEmbedUrlForRegisteredUserCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/embed-url/registered-user";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.AllowedDomains != null && { AllowedDomains: se_StringList(input.AllowedDomains, context) }),
    ...(input.ExperienceConfiguration != null && {
      ExperienceConfiguration: se_RegisteredUserEmbeddingExperienceConfiguration(
        input.ExperienceConfiguration,
        context
      ),
    }),
    ...(input.SessionLifetimeInMinutes != null && { SessionLifetimeInMinutes: input.SessionLifetimeInMinutes }),
    ...(input.UserArn != null && { UserArn: input.UserArn }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1GetDashboardEmbedUrlCommand
 */
export const se_GetDashboardEmbedUrlCommand = async (
  input: GetDashboardEmbedUrlCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}/embed-url";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DashboardId", () => input.DashboardId!, "{DashboardId}", false);
  const query: any = map({
    "creds-type": [, __expectNonNull(input.IdentityType!, `IdentityType`)],
    "session-lifetime": [
      () => input.SessionLifetimeInMinutes !== void 0,
      () => input.SessionLifetimeInMinutes!.toString(),
    ],
    "undo-redo-disabled": [() => input.UndoRedoDisabled !== void 0, () => input.UndoRedoDisabled!.toString()],
    "reset-disabled": [() => input.ResetDisabled !== void 0, () => input.ResetDisabled!.toString()],
    "state-persistence-enabled": [
      () => input.StatePersistenceEnabled !== void 0,
      () => input.StatePersistenceEnabled!.toString(),
    ],
    "user-arn": [, input.UserArn!],
    namespace: [, input.Namespace!],
    "additional-dashboard-ids": [
      () => input.AdditionalDashboardIds !== void 0,
      () => (input.AdditionalDashboardIds! || []).map((_entry) => _entry as any),
    ],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1GetSessionEmbedUrlCommand
 */
export const se_GetSessionEmbedUrlCommand = async (
  input: GetSessionEmbedUrlCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/session-embed-url";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    "entry-point": [, input.EntryPoint!],
    "session-lifetime": [
      () => input.SessionLifetimeInMinutes !== void 0,
      () => input.SessionLifetimeInMinutes!.toString(),
    ],
    "user-arn": [, input.UserArn!],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListAnalysesCommand
 */
export const se_ListAnalysesCommand = async (
  input: ListAnalysesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/analyses";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListDashboardsCommand
 */
export const se_ListDashboardsCommand = async (
  input: ListDashboardsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/dashboards";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListDashboardVersionsCommand
 */
export const se_ListDashboardVersionsCommand = async (
  input: ListDashboardVersionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DashboardId", () => input.DashboardId!, "{DashboardId}", false);
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListDataSetsCommand
 */
export const se_ListDataSetsCommand = async (
  input: ListDataSetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/data-sets";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListDataSourcesCommand
 */
export const se_ListDataSourcesCommand = async (
  input: ListDataSourcesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/data-sources";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListFolderMembersCommand
 */
export const se_ListFolderMembersCommand = async (
  input: ListFolderMembersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/folders/{FolderId}/members";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "FolderId", () => input.FolderId!, "{FolderId}", false);
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListFoldersCommand
 */
export const se_ListFoldersCommand = async (
  input: ListFoldersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/folders";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListGroupMembershipsCommand
 */
export const se_ListGroupMembershipsCommand = async (
  input: ListGroupMembershipsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members";
  resolvedPath = __resolvedPath(resolvedPath, input, "GroupName", () => input.GroupName!, "{GroupName}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListGroupsCommand
 */
export const se_ListGroupsCommand = async (
  input: ListGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListIAMPolicyAssignmentsCommand
 */
export const se_ListIAMPolicyAssignmentsCommand = async (
  input: ListIAMPolicyAssignmentsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  body = JSON.stringify({
    ...(input.AssignmentStatus != null && { AssignmentStatus: input.AssignmentStatus }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListIAMPolicyAssignmentsForUserCommand
 */
export const se_ListIAMPolicyAssignmentsForUserCommand = async (
  input: ListIAMPolicyAssignmentsForUserCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/iam-policy-assignments";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "UserName", () => input.UserName!, "{UserName}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListIngestionsCommand
 */
export const se_ListIngestionsCommand = async (
  input: ListIngestionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions";
  resolvedPath = __resolvedPath(resolvedPath, input, "DataSetId", () => input.DataSetId!, "{DataSetId}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListNamespacesCommand
 */
export const se_ListNamespacesCommand = async (
  input: ListNamespacesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/namespaces";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListTagsForResourceCommand
 */
export const se_ListTagsForResourceCommand = async (
  input: ListTagsForResourceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/resources/{ResourceArn}/tags";
  resolvedPath = __resolvedPath(resolvedPath, input, "ResourceArn", () => input.ResourceArn!, "{ResourceArn}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1ListTemplateAliasesCommand
 */
export const se_ListTemplateAliasesCommand = async (
  input: ListTemplateAliasesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "TemplateId", () => input.TemplateId!, "{TemplateId}", false);
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-result": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListTemplatesCommand
 */
export const se_ListTemplatesCommand = async (
  input: ListTemplatesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/templates";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-result": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListTemplateVersionsCommand
 */
export const se_ListTemplateVersionsCommand = async (
  input: ListTemplateVersionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/templates/{TemplateId}/versions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "TemplateId", () => input.TemplateId!, "{TemplateId}", false);
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListThemeAliasesCommand
 */
export const se_ListThemeAliasesCommand = async (
  input: ListThemeAliasesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "ThemeId", () => input.ThemeId!, "{ThemeId}", false);
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-result": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListThemesCommand
 */
export const se_ListThemesCommand = async (
  input: ListThemesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/themes";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
    type: [, input.Type!],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListThemeVersionsCommand
 */
export const se_ListThemeVersionsCommand = async (
  input: ListThemeVersionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/themes/{ThemeId}/versions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "ThemeId", () => input.ThemeId!, "{ThemeId}", false);
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListUserGroupsCommand
 */
export const se_ListUserGroupsCommand = async (
  input: ListUserGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/groups";
  resolvedPath = __resolvedPath(resolvedPath, input, "UserName", () => input.UserName!, "{UserName}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1ListUsersCommand
 */
export const se_ListUsersCommand = async (
  input: ListUsersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/users";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "GET",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1RegisterUserCommand
 */
export const se_RegisterUserCommand = async (
  input: RegisterUserCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/users";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.CustomFederationProviderUrl != null && {
      CustomFederationProviderUrl: input.CustomFederationProviderUrl,
    }),
    ...(input.CustomPermissionsName != null && { CustomPermissionsName: input.CustomPermissionsName }),
    ...(input.Email != null && { Email: input.Email }),
    ...(input.ExternalLoginFederationProviderType != null && {
      ExternalLoginFederationProviderType: input.ExternalLoginFederationProviderType,
    }),
    ...(input.ExternalLoginId != null && { ExternalLoginId: input.ExternalLoginId }),
    ...(input.IamArn != null && { IamArn: input.IamArn }),
    ...(input.IdentityType != null && { IdentityType: input.IdentityType }),
    ...(input.SessionName != null && { SessionName: input.SessionName }),
    ...(input.UserName != null && { UserName: input.UserName }),
    ...(input.UserRole != null && { UserRole: input.UserRole }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1RestoreAnalysisCommand
 */
export const se_RestoreAnalysisCommand = async (
  input: RestoreAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/restore/analyses/{AnalysisId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "AnalysisId", () => input.AnalysisId!, "{AnalysisId}", false);
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1SearchAnalysesCommand
 */
export const se_SearchAnalysesCommand = async (
  input: SearchAnalysesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/search/analyses";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.Filters != null && { Filters: se_AnalysisSearchFilterList(input.Filters, context) }),
    ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
    ...(input.NextToken != null && { NextToken: input.NextToken }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1SearchDashboardsCommand
 */
export const se_SearchDashboardsCommand = async (
  input: SearchDashboardsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/search/dashboards";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.Filters != null && { Filters: se_DashboardSearchFilterList(input.Filters, context) }),
    ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
    ...(input.NextToken != null && { NextToken: input.NextToken }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1SearchDataSetsCommand
 */
export const se_SearchDataSetsCommand = async (
  input: SearchDataSetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/search/data-sets";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.Filters != null && { Filters: se_DataSetSearchFilterList(input.Filters, context) }),
    ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
    ...(input.NextToken != null && { NextToken: input.NextToken }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1SearchDataSourcesCommand
 */
export const se_SearchDataSourcesCommand = async (
  input: SearchDataSourcesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/search/data-sources";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.Filters != null && { Filters: se_DataSourceSearchFilterList(input.Filters, context) }),
    ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
    ...(input.NextToken != null && { NextToken: input.NextToken }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1SearchFoldersCommand
 */
export const se_SearchFoldersCommand = async (
  input: SearchFoldersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/search/folders";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.Filters != null && { Filters: se_FolderSearchFilterList(input.Filters, context) }),
    ...(input.MaxResults != null && { MaxResults: input.MaxResults }),
    ...(input.NextToken != null && { NextToken: input.NextToken }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1SearchGroupsCommand
 */
export const se_SearchGroupsCommand = async (
  input: SearchGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups-search";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  const query: any = map({
    "next-token": [, input.NextToken!],
    "max-results": [() => input.MaxResults !== void 0, () => input.MaxResults!.toString()],
  });
  let body: any;
  body = JSON.stringify({
    ...(input.Filters != null && { Filters: se_GroupSearchFilterList(input.Filters, context) }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1TagResourceCommand
 */
export const se_TagResourceCommand = async (
  input: TagResourceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/resources/{ResourceArn}/tags";
  resolvedPath = __resolvedPath(resolvedPath, input, "ResourceArn", () => input.ResourceArn!, "{ResourceArn}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.Tags != null && { Tags: se_TagList(input.Tags, context) }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UntagResourceCommand
 */
export const se_UntagResourceCommand = async (
  input: UntagResourceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/resources/{ResourceArn}/tags";
  resolvedPath = __resolvedPath(resolvedPath, input, "ResourceArn", () => input.ResourceArn!, "{ResourceArn}", false);
  const query: any = map({
    keys: [
      __expectNonNull(input.TagKeys, `TagKeys`) != null,
      () => (input.TagKeys! || []).map((_entry) => _entry as any),
    ],
  });
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "DELETE",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateAccountCustomizationCommand
 */
export const se_UpdateAccountCustomizationCommand = async (
  input: UpdateAccountCustomizationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/customizations";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  const query: any = map({
    namespace: [, input.Namespace!],
  });
  let body: any;
  body = JSON.stringify({
    ...(input.AccountCustomization != null && {
      AccountCustomization: se_AccountCustomization(input.AccountCustomization, context),
    }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    query,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateAccountSettingsCommand
 */
export const se_UpdateAccountSettingsCommand = async (
  input: UpdateAccountSettingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/settings";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.DefaultNamespace != null && { DefaultNamespace: input.DefaultNamespace }),
    ...(input.NotificationEmail != null && { NotificationEmail: input.NotificationEmail }),
    ...(input.TerminationProtectionEnabled != null && {
      TerminationProtectionEnabled: input.TerminationProtectionEnabled,
    }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateAnalysisCommand
 */
export const se_UpdateAnalysisCommand = async (
  input: UpdateAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/analyses/{AnalysisId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "AnalysisId", () => input.AnalysisId!, "{AnalysisId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.Definition != null && { Definition: se_AnalysisDefinition(input.Definition, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Parameters != null && { Parameters: se__Parameters(input.Parameters, context) }),
    ...(input.SourceEntity != null && { SourceEntity: se_AnalysisSourceEntity(input.SourceEntity, context) }),
    ...(input.ThemeArn != null && { ThemeArn: input.ThemeArn }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateAnalysisPermissionsCommand
 */
export const se_UpdateAnalysisPermissionsCommand = async (
  input: UpdateAnalysisPermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "AnalysisId", () => input.AnalysisId!, "{AnalysisId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.GrantPermissions != null && {
      GrantPermissions: se_UpdateResourcePermissionList(input.GrantPermissions, context),
    }),
    ...(input.RevokePermissions != null && {
      RevokePermissions: se_UpdateResourcePermissionList(input.RevokePermissions, context),
    }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateDashboardCommand
 */
export const se_UpdateDashboardCommand = async (
  input: UpdateDashboardCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DashboardId", () => input.DashboardId!, "{DashboardId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.DashboardPublishOptions != null && {
      DashboardPublishOptions: se_DashboardPublishOptions(input.DashboardPublishOptions, context),
    }),
    ...(input.Definition != null && { Definition: se_DashboardVersionDefinition(input.Definition, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Parameters != null && { Parameters: se__Parameters(input.Parameters, context) }),
    ...(input.SourceEntity != null && { SourceEntity: se_DashboardSourceEntity(input.SourceEntity, context) }),
    ...(input.ThemeArn != null && { ThemeArn: input.ThemeArn }),
    ...(input.VersionDescription != null && { VersionDescription: input.VersionDescription }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateDashboardPermissionsCommand
 */
export const se_UpdateDashboardPermissionsCommand = async (
  input: UpdateDashboardPermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DashboardId", () => input.DashboardId!, "{DashboardId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.GrantLinkPermissions != null && {
      GrantLinkPermissions: se_UpdateLinkPermissionList(input.GrantLinkPermissions, context),
    }),
    ...(input.GrantPermissions != null && {
      GrantPermissions: se_UpdateResourcePermissionList(input.GrantPermissions, context),
    }),
    ...(input.RevokeLinkPermissions != null && {
      RevokeLinkPermissions: se_UpdateLinkPermissionList(input.RevokeLinkPermissions, context),
    }),
    ...(input.RevokePermissions != null && {
      RevokePermissions: se_UpdateResourcePermissionList(input.RevokePermissions, context),
    }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateDashboardPublishedVersionCommand
 */
export const se_UpdateDashboardPublishedVersionCommand = async (
  input: UpdateDashboardPublishedVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {};
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions/{VersionNumber}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DashboardId", () => input.DashboardId!, "{DashboardId}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "VersionNumber",
    () => input.VersionNumber!.toString(),
    "{VersionNumber}",
    false
  );
  let body: any;
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateDataSetCommand
 */
export const se_UpdateDataSetCommand = async (
  input: UpdateDataSetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sets/{DataSetId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DataSetId", () => input.DataSetId!, "{DataSetId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.ColumnGroups != null && { ColumnGroups: se_ColumnGroupList(input.ColumnGroups, context) }),
    ...(input.ColumnLevelPermissionRules != null && {
      ColumnLevelPermissionRules: se_ColumnLevelPermissionRuleList(input.ColumnLevelPermissionRules, context),
    }),
    ...(input.DataSetUsageConfiguration != null && {
      DataSetUsageConfiguration: se_DataSetUsageConfiguration(input.DataSetUsageConfiguration, context),
    }),
    ...(input.FieldFolders != null && { FieldFolders: se_FieldFolderMap(input.FieldFolders, context) }),
    ...(input.ImportMode != null && { ImportMode: input.ImportMode }),
    ...(input.LogicalTableMap != null && { LogicalTableMap: se_LogicalTableMap(input.LogicalTableMap, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.PhysicalTableMap != null && { PhysicalTableMap: se_PhysicalTableMap(input.PhysicalTableMap, context) }),
    ...(input.RowLevelPermissionDataSet != null && {
      RowLevelPermissionDataSet: se_RowLevelPermissionDataSet(input.RowLevelPermissionDataSet, context),
    }),
    ...(input.RowLevelPermissionTagConfiguration != null && {
      RowLevelPermissionTagConfiguration: se_RowLevelPermissionTagConfiguration(
        input.RowLevelPermissionTagConfiguration,
        context
      ),
    }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateDataSetPermissionsCommand
 */
export const se_UpdateDataSetPermissionsCommand = async (
  input: UpdateDataSetPermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "DataSetId", () => input.DataSetId!, "{DataSetId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.GrantPermissions != null && {
      GrantPermissions: se_ResourcePermissionList(input.GrantPermissions, context),
    }),
    ...(input.RevokePermissions != null && {
      RevokePermissions: se_ResourcePermissionList(input.RevokePermissions, context),
    }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateDataSourceCommand
 */
export const se_UpdateDataSourceCommand = async (
  input: UpdateDataSourceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sources/{DataSourceId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "DataSourceId",
    () => input.DataSourceId!,
    "{DataSourceId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.Credentials != null && { Credentials: se_DataSourceCredentials(input.Credentials, context) }),
    ...(input.DataSourceParameters != null && {
      DataSourceParameters: se_DataSourceParameters(input.DataSourceParameters, context),
    }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.SslProperties != null && { SslProperties: se_SslProperties(input.SslProperties, context) }),
    ...(input.VpcConnectionProperties != null && {
      VpcConnectionProperties: se_VpcConnectionProperties(input.VpcConnectionProperties, context),
    }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateDataSourcePermissionsCommand
 */
export const se_UpdateDataSourcePermissionsCommand = async (
  input: UpdateDataSourcePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "DataSourceId",
    () => input.DataSourceId!,
    "{DataSourceId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.GrantPermissions != null && {
      GrantPermissions: se_ResourcePermissionList(input.GrantPermissions, context),
    }),
    ...(input.RevokePermissions != null && {
      RevokePermissions: se_ResourcePermissionList(input.RevokePermissions, context),
    }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateFolderCommand
 */
export const se_UpdateFolderCommand = async (
  input: UpdateFolderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/folders/{FolderId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "FolderId", () => input.FolderId!, "{FolderId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.Name != null && { Name: input.Name }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateFolderPermissionsCommand
 */
export const se_UpdateFolderPermissionsCommand = async (
  input: UpdateFolderPermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/folders/{FolderId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "FolderId", () => input.FolderId!, "{FolderId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.GrantPermissions != null && {
      GrantPermissions: se_ResourcePermissionList(input.GrantPermissions, context),
    }),
    ...(input.RevokePermissions != null && {
      RevokePermissions: se_ResourcePermissionList(input.RevokePermissions, context),
    }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateGroupCommand
 */
export const se_UpdateGroupCommand = async (
  input: UpdateGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}";
  resolvedPath = __resolvedPath(resolvedPath, input, "GroupName", () => input.GroupName!, "{GroupName}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.Description != null && { Description: input.Description }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateIAMPolicyAssignmentCommand
 */
export const se_UpdateIAMPolicyAssignmentCommand = async (
  input: UpdateIAMPolicyAssignmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AssignmentName",
    () => input.AssignmentName!,
    "{AssignmentName}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.AssignmentStatus != null && { AssignmentStatus: input.AssignmentStatus }),
    ...(input.Identities != null && { Identities: se_IdentityMap(input.Identities, context) }),
    ...(input.PolicyArn != null && { PolicyArn: input.PolicyArn }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateIpRestrictionCommand
 */
export const se_UpdateIpRestrictionCommand = async (
  input: UpdateIpRestrictionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/ip-restriction";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.Enabled != null && { Enabled: input.Enabled }),
    ...(input.IpRestrictionRuleMap != null && {
      IpRestrictionRuleMap: se_IpRestrictionRuleMap(input.IpRestrictionRuleMap, context),
    }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "POST",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdatePublicSharingSettingsCommand
 */
export const se_UpdatePublicSharingSettingsCommand = async (
  input: UpdatePublicSharingSettingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/public-sharing-settings";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  let body: any;
  body = JSON.stringify({
    ...(input.PublicSharingEnabled != null && { PublicSharingEnabled: input.PublicSharingEnabled }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateTemplateCommand
 */
export const se_UpdateTemplateCommand = async (
  input: UpdateTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/templates/{TemplateId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "TemplateId", () => input.TemplateId!, "{TemplateId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.Definition != null && { Definition: se_TemplateVersionDefinition(input.Definition, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.SourceEntity != null && { SourceEntity: se_TemplateSourceEntity(input.SourceEntity, context) }),
    ...(input.VersionDescription != null && { VersionDescription: input.VersionDescription }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateTemplateAliasCommand
 */
export const se_UpdateTemplateAliasCommand = async (
  input: UpdateTemplateAliasCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "TemplateId", () => input.TemplateId!, "{TemplateId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "AliasName", () => input.AliasName!, "{AliasName}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.TemplateVersionNumber != null && { TemplateVersionNumber: input.TemplateVersionNumber }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateTemplatePermissionsCommand
 */
export const se_UpdateTemplatePermissionsCommand = async (
  input: UpdateTemplatePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/templates/{TemplateId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "TemplateId", () => input.TemplateId!, "{TemplateId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.GrantPermissions != null && {
      GrantPermissions: se_UpdateResourcePermissionList(input.GrantPermissions, context),
    }),
    ...(input.RevokePermissions != null && {
      RevokePermissions: se_UpdateResourcePermissionList(input.RevokePermissions, context),
    }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateThemeCommand
 */
export const se_UpdateThemeCommand = async (
  input: UpdateThemeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/accounts/{AwsAccountId}/themes/{ThemeId}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "ThemeId", () => input.ThemeId!, "{ThemeId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.BaseThemeId != null && { BaseThemeId: input.BaseThemeId }),
    ...(input.Configuration != null && { Configuration: se_ThemeConfiguration(input.Configuration, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.VersionDescription != null && { VersionDescription: input.VersionDescription }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateThemeAliasCommand
 */
export const se_UpdateThemeAliasCommand = async (
  input: UpdateThemeAliasCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "ThemeId", () => input.ThemeId!, "{ThemeId}", false);
  resolvedPath = __resolvedPath(resolvedPath, input, "AliasName", () => input.AliasName!, "{AliasName}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.ThemeVersionNumber != null && { ThemeVersionNumber: input.ThemeVersionNumber }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateThemePermissionsCommand
 */
export const se_UpdateThemePermissionsCommand = async (
  input: UpdateThemePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/themes/{ThemeId}/permissions";
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "ThemeId", () => input.ThemeId!, "{ThemeId}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.GrantPermissions != null && {
      GrantPermissions: se_UpdateResourcePermissionList(input.GrantPermissions, context),
    }),
    ...(input.RevokePermissions != null && {
      RevokePermissions: se_UpdateResourcePermissionList(input.RevokePermissions, context),
    }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * serializeAws_restJson1UpdateUserCommand
 */
export const se_UpdateUserCommand = async (
  input: UpdateUserCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const headers: any = {
    "content-type": "application/json",
  };
  let resolvedPath =
    `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
    "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}";
  resolvedPath = __resolvedPath(resolvedPath, input, "UserName", () => input.UserName!, "{UserName}", false);
  resolvedPath = __resolvedPath(
    resolvedPath,
    input,
    "AwsAccountId",
    () => input.AwsAccountId!,
    "{AwsAccountId}",
    false
  );
  resolvedPath = __resolvedPath(resolvedPath, input, "Namespace", () => input.Namespace!, "{Namespace}", false);
  let body: any;
  body = JSON.stringify({
    ...(input.CustomFederationProviderUrl != null && {
      CustomFederationProviderUrl: input.CustomFederationProviderUrl,
    }),
    ...(input.CustomPermissionsName != null && { CustomPermissionsName: input.CustomPermissionsName }),
    ...(input.Email != null && { Email: input.Email }),
    ...(input.ExternalLoginFederationProviderType != null && {
      ExternalLoginFederationProviderType: input.ExternalLoginFederationProviderType,
    }),
    ...(input.ExternalLoginId != null && { ExternalLoginId: input.ExternalLoginId }),
    ...(input.Role != null && { Role: input.Role }),
    ...(input.UnapplyCustomPermissions != null && { UnapplyCustomPermissions: input.UnapplyCustomPermissions }),
  });
  return new __HttpRequest({
    protocol,
    hostname,
    port,
    method: "PUT",
    headers,
    path: resolvedPath,
    body,
  });
};

/**
 * deserializeAws_restJson1CancelIngestionCommand
 */
export const de_CancelIngestionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelIngestionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CancelIngestionCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.IngestionId != null) {
    contents.IngestionId = __expectString(data.IngestionId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CancelIngestionCommandError
 */
const de_CancelIngestionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelIngestionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateAccountCustomizationCommand
 */
export const de_CreateAccountCustomizationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAccountCustomizationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateAccountCustomizationCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AccountCustomization != null) {
    contents.AccountCustomization = de_AccountCustomization(data.AccountCustomization, context);
  }
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.AwsAccountId != null) {
    contents.AwsAccountId = __expectString(data.AwsAccountId);
  }
  if (data.Namespace != null) {
    contents.Namespace = __expectString(data.Namespace);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateAccountCustomizationCommandError
 */
const de_CreateAccountCustomizationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAccountCustomizationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateAccountSubscriptionCommand
 */
export const de_CreateAccountSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAccountSubscriptionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateAccountSubscriptionCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.SignupResponse != null) {
    contents.SignupResponse = de_SignupResponse(data.SignupResponse, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateAccountSubscriptionCommandError
 */
const de_CreateAccountSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAccountSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateAnalysisCommand
 */
export const de_CreateAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAnalysisCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateAnalysisCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AnalysisId != null) {
    contents.AnalysisId = __expectString(data.AnalysisId);
  }
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.CreationStatus != null) {
    contents.CreationStatus = __expectString(data.CreationStatus);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateAnalysisCommandError
 */
const de_CreateAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateDashboardCommand
 */
export const de_CreateDashboardCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDashboardCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateDashboardCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.CreationStatus != null) {
    contents.CreationStatus = __expectString(data.CreationStatus);
  }
  if (data.DashboardId != null) {
    contents.DashboardId = __expectString(data.DashboardId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.VersionArn != null) {
    contents.VersionArn = __expectString(data.VersionArn);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateDashboardCommandError
 */
const de_CreateDashboardCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDashboardCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateDataSetCommand
 */
export const de_CreateDataSetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDataSetCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateDataSetCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.DataSetId != null) {
    contents.DataSetId = __expectString(data.DataSetId);
  }
  if (data.IngestionArn != null) {
    contents.IngestionArn = __expectString(data.IngestionArn);
  }
  if (data.IngestionId != null) {
    contents.IngestionId = __expectString(data.IngestionId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateDataSetCommandError
 */
const de_CreateDataSetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDataSetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateDataSourceCommand
 */
export const de_CreateDataSourceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDataSourceCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateDataSourceCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.CreationStatus != null) {
    contents.CreationStatus = __expectString(data.CreationStatus);
  }
  if (data.DataSourceId != null) {
    contents.DataSourceId = __expectString(data.DataSourceId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateDataSourceCommandError
 */
const de_CreateDataSourceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDataSourceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateFolderCommand
 */
export const de_CreateFolderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFolderCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateFolderCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.FolderId != null) {
    contents.FolderId = __expectString(data.FolderId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateFolderCommandError
 */
const de_CreateFolderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFolderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateFolderMembershipCommand
 */
export const de_CreateFolderMembershipCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFolderMembershipCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateFolderMembershipCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.FolderMember != null) {
    contents.FolderMember = de_FolderMember(data.FolderMember, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.Status != null) {
    contents.Status = __expectInt32(data.Status);
  }
  return contents;
};

/**
 * deserializeAws_restJson1CreateFolderMembershipCommandError
 */
const de_CreateFolderMembershipCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFolderMembershipCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateGroupCommand
 */
export const de_CreateGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateGroupCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Group != null) {
    contents.Group = de_Group(data.Group, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateGroupCommandError
 */
const de_CreateGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateGroupMembershipCommand
 */
export const de_CreateGroupMembershipCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateGroupMembershipCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateGroupMembershipCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.GroupMember != null) {
    contents.GroupMember = de_GroupMember(data.GroupMember, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateGroupMembershipCommandError
 */
const de_CreateGroupMembershipCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateGroupMembershipCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateIAMPolicyAssignmentCommand
 */
export const de_CreateIAMPolicyAssignmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIAMPolicyAssignmentCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateIAMPolicyAssignmentCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AssignmentId != null) {
    contents.AssignmentId = __expectString(data.AssignmentId);
  }
  if (data.AssignmentName != null) {
    contents.AssignmentName = __expectString(data.AssignmentName);
  }
  if (data.AssignmentStatus != null) {
    contents.AssignmentStatus = __expectString(data.AssignmentStatus);
  }
  if (data.Identities != null) {
    contents.Identities = de_IdentityMap(data.Identities, context);
  }
  if (data.PolicyArn != null) {
    contents.PolicyArn = __expectString(data.PolicyArn);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateIAMPolicyAssignmentCommandError
 */
const de_CreateIAMPolicyAssignmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIAMPolicyAssignmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConcurrentUpdatingException":
    case "com.amazonaws.quicksight#ConcurrentUpdatingException":
      throw await de_ConcurrentUpdatingExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateIngestionCommand
 */
export const de_CreateIngestionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIngestionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateIngestionCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.IngestionId != null) {
    contents.IngestionId = __expectString(data.IngestionId);
  }
  if (data.IngestionStatus != null) {
    contents.IngestionStatus = __expectString(data.IngestionStatus);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateIngestionCommandError
 */
const de_CreateIngestionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIngestionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateNamespaceCommand
 */
export const de_CreateNamespaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNamespaceCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateNamespaceCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.CapacityRegion != null) {
    contents.CapacityRegion = __expectString(data.CapacityRegion);
  }
  if (data.CreationStatus != null) {
    contents.CreationStatus = __expectString(data.CreationStatus);
  }
  if (data.IdentityStore != null) {
    contents.IdentityStore = __expectString(data.IdentityStore);
  }
  if (data.Name != null) {
    contents.Name = __expectString(data.Name);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateNamespaceCommandError
 */
const de_CreateNamespaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNamespaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateTemplateCommand
 */
export const de_CreateTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTemplateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateTemplateCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.CreationStatus != null) {
    contents.CreationStatus = __expectString(data.CreationStatus);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.TemplateId != null) {
    contents.TemplateId = __expectString(data.TemplateId);
  }
  if (data.VersionArn != null) {
    contents.VersionArn = __expectString(data.VersionArn);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateTemplateCommandError
 */
const de_CreateTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateTemplateAliasCommand
 */
export const de_CreateTemplateAliasCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTemplateAliasCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateTemplateAliasCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.TemplateAlias != null) {
    contents.TemplateAlias = de_TemplateAlias(data.TemplateAlias, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateTemplateAliasCommandError
 */
const de_CreateTemplateAliasCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTemplateAliasCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateThemeCommand
 */
export const de_CreateThemeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateThemeCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateThemeCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.CreationStatus != null) {
    contents.CreationStatus = __expectString(data.CreationStatus);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ThemeId != null) {
    contents.ThemeId = __expectString(data.ThemeId);
  }
  if (data.VersionArn != null) {
    contents.VersionArn = __expectString(data.VersionArn);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateThemeCommandError
 */
const de_CreateThemeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateThemeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1CreateThemeAliasCommand
 */
export const de_CreateThemeAliasCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateThemeAliasCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CreateThemeAliasCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ThemeAlias != null) {
    contents.ThemeAlias = de_ThemeAlias(data.ThemeAlias, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1CreateThemeAliasCommandError
 */
const de_CreateThemeAliasCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateThemeAliasCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteAccountCustomizationCommand
 */
export const de_DeleteAccountCustomizationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAccountCustomizationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAccountCustomizationCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteAccountCustomizationCommandError
 */
const de_DeleteAccountCustomizationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAccountCustomizationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteAccountSubscriptionCommand
 */
export const de_DeleteAccountSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAccountSubscriptionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAccountSubscriptionCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteAccountSubscriptionCommandError
 */
const de_DeleteAccountSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAccountSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteAnalysisCommand
 */
export const de_DeleteAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAnalysisCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteAnalysisCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AnalysisId != null) {
    contents.AnalysisId = __expectString(data.AnalysisId);
  }
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.DeletionTime != null) {
    contents.DeletionTime = __expectNonNull(__parseEpochTimestamp(__expectNumber(data.DeletionTime)));
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteAnalysisCommandError
 */
const de_DeleteAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteDashboardCommand
 */
export const de_DeleteDashboardCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDashboardCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteDashboardCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.DashboardId != null) {
    contents.DashboardId = __expectString(data.DashboardId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteDashboardCommandError
 */
const de_DeleteDashboardCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDashboardCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteDataSetCommand
 */
export const de_DeleteDataSetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDataSetCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteDataSetCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.DataSetId != null) {
    contents.DataSetId = __expectString(data.DataSetId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteDataSetCommandError
 */
const de_DeleteDataSetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDataSetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteDataSourceCommand
 */
export const de_DeleteDataSourceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDataSourceCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteDataSourceCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.DataSourceId != null) {
    contents.DataSourceId = __expectString(data.DataSourceId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteDataSourceCommandError
 */
const de_DeleteDataSourceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDataSourceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteFolderCommand
 */
export const de_DeleteFolderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFolderCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteFolderCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.FolderId != null) {
    contents.FolderId = __expectString(data.FolderId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteFolderCommandError
 */
const de_DeleteFolderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFolderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteFolderMembershipCommand
 */
export const de_DeleteFolderMembershipCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFolderMembershipCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteFolderMembershipCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.Status != null) {
    contents.Status = __expectInt32(data.Status);
  }
  return contents;
};

/**
 * deserializeAws_restJson1DeleteFolderMembershipCommandError
 */
const de_DeleteFolderMembershipCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFolderMembershipCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteGroupCommand
 */
export const de_DeleteGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteGroupCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteGroupCommandError
 */
const de_DeleteGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteGroupMembershipCommand
 */
export const de_DeleteGroupMembershipCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteGroupMembershipCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteGroupMembershipCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteGroupMembershipCommandError
 */
const de_DeleteGroupMembershipCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteGroupMembershipCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteIAMPolicyAssignmentCommand
 */
export const de_DeleteIAMPolicyAssignmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIAMPolicyAssignmentCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteIAMPolicyAssignmentCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AssignmentName != null) {
    contents.AssignmentName = __expectString(data.AssignmentName);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteIAMPolicyAssignmentCommandError
 */
const de_DeleteIAMPolicyAssignmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIAMPolicyAssignmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConcurrentUpdatingException":
    case "com.amazonaws.quicksight#ConcurrentUpdatingException":
      throw await de_ConcurrentUpdatingExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteNamespaceCommand
 */
export const de_DeleteNamespaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNamespaceCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteNamespaceCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteNamespaceCommandError
 */
const de_DeleteNamespaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNamespaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteTemplateCommand
 */
export const de_DeleteTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTemplateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteTemplateCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.TemplateId != null) {
    contents.TemplateId = __expectString(data.TemplateId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteTemplateCommandError
 */
const de_DeleteTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteTemplateAliasCommand
 */
export const de_DeleteTemplateAliasCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTemplateAliasCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteTemplateAliasCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AliasName != null) {
    contents.AliasName = __expectString(data.AliasName);
  }
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.TemplateId != null) {
    contents.TemplateId = __expectString(data.TemplateId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteTemplateAliasCommandError
 */
const de_DeleteTemplateAliasCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTemplateAliasCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteThemeCommand
 */
export const de_DeleteThemeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteThemeCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteThemeCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ThemeId != null) {
    contents.ThemeId = __expectString(data.ThemeId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteThemeCommandError
 */
const de_DeleteThemeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteThemeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteThemeAliasCommand
 */
export const de_DeleteThemeAliasCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteThemeAliasCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteThemeAliasCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AliasName != null) {
    contents.AliasName = __expectString(data.AliasName);
  }
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ThemeId != null) {
    contents.ThemeId = __expectString(data.ThemeId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteThemeAliasCommandError
 */
const de_DeleteThemeAliasCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteThemeAliasCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteUserCommand
 */
export const de_DeleteUserCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteUserCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteUserCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteUserCommandError
 */
const de_DeleteUserCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteUserCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DeleteUserByPrincipalIdCommand
 */
export const de_DeleteUserByPrincipalIdCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteUserByPrincipalIdCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DeleteUserByPrincipalIdCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DeleteUserByPrincipalIdCommandError
 */
const de_DeleteUserByPrincipalIdCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteUserByPrincipalIdCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeAccountCustomizationCommand
 */
export const de_DescribeAccountCustomizationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountCustomizationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeAccountCustomizationCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AccountCustomization != null) {
    contents.AccountCustomization = de_AccountCustomization(data.AccountCustomization, context);
  }
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.AwsAccountId != null) {
    contents.AwsAccountId = __expectString(data.AwsAccountId);
  }
  if (data.Namespace != null) {
    contents.Namespace = __expectString(data.Namespace);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeAccountCustomizationCommandError
 */
const de_DescribeAccountCustomizationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountCustomizationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeAccountSettingsCommand
 */
export const de_DescribeAccountSettingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountSettingsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeAccountSettingsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AccountSettings != null) {
    contents.AccountSettings = de_AccountSettings(data.AccountSettings, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeAccountSettingsCommandError
 */
const de_DescribeAccountSettingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountSettingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeAccountSubscriptionCommand
 */
export const de_DescribeAccountSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountSubscriptionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeAccountSubscriptionCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AccountInfo != null) {
    contents.AccountInfo = de_AccountInfo(data.AccountInfo, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeAccountSubscriptionCommandError
 */
const de_DescribeAccountSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeAnalysisCommand
 */
export const de_DescribeAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAnalysisCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeAnalysisCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Analysis != null) {
    contents.Analysis = de_Analysis(data.Analysis, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeAnalysisCommandError
 */
const de_DescribeAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeAnalysisDefinitionCommand
 */
export const de_DescribeAnalysisDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAnalysisDefinitionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeAnalysisDefinitionCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AnalysisId != null) {
    contents.AnalysisId = __expectString(data.AnalysisId);
  }
  if (data.Definition != null) {
    contents.Definition = de_AnalysisDefinition(data.Definition, context);
  }
  if (data.Errors != null) {
    contents.Errors = de_AnalysisErrorList(data.Errors, context);
  }
  if (data.Name != null) {
    contents.Name = __expectString(data.Name);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ResourceStatus != null) {
    contents.ResourceStatus = __expectString(data.ResourceStatus);
  }
  if (data.ThemeArn != null) {
    contents.ThemeArn = __expectString(data.ThemeArn);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeAnalysisDefinitionCommandError
 */
const de_DescribeAnalysisDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAnalysisDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeAnalysisPermissionsCommand
 */
export const de_DescribeAnalysisPermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAnalysisPermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeAnalysisPermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AnalysisArn != null) {
    contents.AnalysisArn = __expectString(data.AnalysisArn);
  }
  if (data.AnalysisId != null) {
    contents.AnalysisId = __expectString(data.AnalysisId);
  }
  if (data.Permissions != null) {
    contents.Permissions = de_ResourcePermissionList(data.Permissions, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeAnalysisPermissionsCommandError
 */
const de_DescribeAnalysisPermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAnalysisPermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeDashboardCommand
 */
export const de_DescribeDashboardCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDashboardCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeDashboardCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Dashboard != null) {
    contents.Dashboard = de_Dashboard(data.Dashboard, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeDashboardCommandError
 */
const de_DescribeDashboardCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDashboardCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeDashboardDefinitionCommand
 */
export const de_DescribeDashboardDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDashboardDefinitionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeDashboardDefinitionCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DashboardId != null) {
    contents.DashboardId = __expectString(data.DashboardId);
  }
  if (data.DashboardPublishOptions != null) {
    contents.DashboardPublishOptions = de_DashboardPublishOptions(data.DashboardPublishOptions, context);
  }
  if (data.Definition != null) {
    contents.Definition = de_DashboardVersionDefinition(data.Definition, context);
  }
  if (data.Errors != null) {
    contents.Errors = de_DashboardErrorList(data.Errors, context);
  }
  if (data.Name != null) {
    contents.Name = __expectString(data.Name);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ResourceStatus != null) {
    contents.ResourceStatus = __expectString(data.ResourceStatus);
  }
  if (data.ThemeArn != null) {
    contents.ThemeArn = __expectString(data.ThemeArn);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeDashboardDefinitionCommandError
 */
const de_DescribeDashboardDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDashboardDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeDashboardPermissionsCommand
 */
export const de_DescribeDashboardPermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDashboardPermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeDashboardPermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DashboardArn != null) {
    contents.DashboardArn = __expectString(data.DashboardArn);
  }
  if (data.DashboardId != null) {
    contents.DashboardId = __expectString(data.DashboardId);
  }
  if (data.LinkSharingConfiguration != null) {
    contents.LinkSharingConfiguration = de_LinkSharingConfiguration(data.LinkSharingConfiguration, context);
  }
  if (data.Permissions != null) {
    contents.Permissions = de_ResourcePermissionList(data.Permissions, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeDashboardPermissionsCommandError
 */
const de_DescribeDashboardPermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDashboardPermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeDataSetCommand
 */
export const de_DescribeDataSetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDataSetCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeDataSetCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DataSet != null) {
    contents.DataSet = de_DataSet(data.DataSet, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeDataSetCommandError
 */
const de_DescribeDataSetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDataSetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeDataSetPermissionsCommand
 */
export const de_DescribeDataSetPermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDataSetPermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeDataSetPermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DataSetArn != null) {
    contents.DataSetArn = __expectString(data.DataSetArn);
  }
  if (data.DataSetId != null) {
    contents.DataSetId = __expectString(data.DataSetId);
  }
  if (data.Permissions != null) {
    contents.Permissions = de_ResourcePermissionList(data.Permissions, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeDataSetPermissionsCommandError
 */
const de_DescribeDataSetPermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDataSetPermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeDataSourceCommand
 */
export const de_DescribeDataSourceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDataSourceCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeDataSourceCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DataSource != null) {
    contents.DataSource = de_DataSource(data.DataSource, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeDataSourceCommandError
 */
const de_DescribeDataSourceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDataSourceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeDataSourcePermissionsCommand
 */
export const de_DescribeDataSourcePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDataSourcePermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeDataSourcePermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DataSourceArn != null) {
    contents.DataSourceArn = __expectString(data.DataSourceArn);
  }
  if (data.DataSourceId != null) {
    contents.DataSourceId = __expectString(data.DataSourceId);
  }
  if (data.Permissions != null) {
    contents.Permissions = de_ResourcePermissionList(data.Permissions, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeDataSourcePermissionsCommandError
 */
const de_DescribeDataSourcePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDataSourcePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeFolderCommand
 */
export const de_DescribeFolderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFolderCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeFolderCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Folder != null) {
    contents.Folder = de_Folder(data.Folder, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeFolderCommandError
 */
const de_DescribeFolderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFolderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeFolderPermissionsCommand
 */
export const de_DescribeFolderPermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFolderPermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeFolderPermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.FolderId != null) {
    contents.FolderId = __expectString(data.FolderId);
  }
  if (data.Permissions != null) {
    contents.Permissions = de_ResourcePermissionList(data.Permissions, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeFolderPermissionsCommandError
 */
const de_DescribeFolderPermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFolderPermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeFolderResolvedPermissionsCommand
 */
export const de_DescribeFolderResolvedPermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFolderResolvedPermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeFolderResolvedPermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.FolderId != null) {
    contents.FolderId = __expectString(data.FolderId);
  }
  if (data.Permissions != null) {
    contents.Permissions = de_ResourcePermissionList(data.Permissions, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeFolderResolvedPermissionsCommandError
 */
const de_DescribeFolderResolvedPermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFolderResolvedPermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeGroupCommand
 */
export const de_DescribeGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeGroupCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Group != null) {
    contents.Group = de_Group(data.Group, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeGroupCommandError
 */
const de_DescribeGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeGroupMembershipCommand
 */
export const de_DescribeGroupMembershipCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeGroupMembershipCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeGroupMembershipCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.GroupMember != null) {
    contents.GroupMember = de_GroupMember(data.GroupMember, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeGroupMembershipCommandError
 */
const de_DescribeGroupMembershipCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeGroupMembershipCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeIAMPolicyAssignmentCommand
 */
export const de_DescribeIAMPolicyAssignmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIAMPolicyAssignmentCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeIAMPolicyAssignmentCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.IAMPolicyAssignment != null) {
    contents.IAMPolicyAssignment = de_IAMPolicyAssignment(data.IAMPolicyAssignment, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeIAMPolicyAssignmentCommandError
 */
const de_DescribeIAMPolicyAssignmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIAMPolicyAssignmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeIngestionCommand
 */
export const de_DescribeIngestionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIngestionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeIngestionCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Ingestion != null) {
    contents.Ingestion = de_Ingestion(data.Ingestion, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeIngestionCommandError
 */
const de_DescribeIngestionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIngestionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeIpRestrictionCommand
 */
export const de_DescribeIpRestrictionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpRestrictionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeIpRestrictionCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AwsAccountId != null) {
    contents.AwsAccountId = __expectString(data.AwsAccountId);
  }
  if (data.Enabled != null) {
    contents.Enabled = __expectBoolean(data.Enabled);
  }
  if (data.IpRestrictionRuleMap != null) {
    contents.IpRestrictionRuleMap = de_IpRestrictionRuleMap(data.IpRestrictionRuleMap, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeIpRestrictionCommandError
 */
const de_DescribeIpRestrictionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpRestrictionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeNamespaceCommand
 */
export const de_DescribeNamespaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNamespaceCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeNamespaceCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Namespace != null) {
    contents.Namespace = de_NamespaceInfoV2(data.Namespace, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeNamespaceCommandError
 */
const de_DescribeNamespaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNamespaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeTemplateCommand
 */
export const de_DescribeTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTemplateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeTemplateCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.Template != null) {
    contents.Template = de_Template(data.Template, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeTemplateCommandError
 */
const de_DescribeTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeTemplateAliasCommand
 */
export const de_DescribeTemplateAliasCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTemplateAliasCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeTemplateAliasCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.TemplateAlias != null) {
    contents.TemplateAlias = de_TemplateAlias(data.TemplateAlias, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeTemplateAliasCommandError
 */
const de_DescribeTemplateAliasCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTemplateAliasCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeTemplateDefinitionCommand
 */
export const de_DescribeTemplateDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTemplateDefinitionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeTemplateDefinitionCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Definition != null) {
    contents.Definition = de_TemplateVersionDefinition(data.Definition, context);
  }
  if (data.Errors != null) {
    contents.Errors = de_TemplateErrorList(data.Errors, context);
  }
  if (data.Name != null) {
    contents.Name = __expectString(data.Name);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ResourceStatus != null) {
    contents.ResourceStatus = __expectString(data.ResourceStatus);
  }
  if (data.TemplateId != null) {
    contents.TemplateId = __expectString(data.TemplateId);
  }
  if (data.ThemeArn != null) {
    contents.ThemeArn = __expectString(data.ThemeArn);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeTemplateDefinitionCommandError
 */
const de_DescribeTemplateDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTemplateDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeTemplatePermissionsCommand
 */
export const de_DescribeTemplatePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTemplatePermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeTemplatePermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Permissions != null) {
    contents.Permissions = de_ResourcePermissionList(data.Permissions, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.TemplateArn != null) {
    contents.TemplateArn = __expectString(data.TemplateArn);
  }
  if (data.TemplateId != null) {
    contents.TemplateId = __expectString(data.TemplateId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeTemplatePermissionsCommandError
 */
const de_DescribeTemplatePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTemplatePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeThemeCommand
 */
export const de_DescribeThemeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThemeCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeThemeCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.Theme != null) {
    contents.Theme = de_Theme(data.Theme, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeThemeCommandError
 */
const de_DescribeThemeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThemeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeThemeAliasCommand
 */
export const de_DescribeThemeAliasCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThemeAliasCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeThemeAliasCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ThemeAlias != null) {
    contents.ThemeAlias = de_ThemeAlias(data.ThemeAlias, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeThemeAliasCommandError
 */
const de_DescribeThemeAliasCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThemeAliasCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeThemePermissionsCommand
 */
export const de_DescribeThemePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThemePermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeThemePermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Permissions != null) {
    contents.Permissions = de_ResourcePermissionList(data.Permissions, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ThemeArn != null) {
    contents.ThemeArn = __expectString(data.ThemeArn);
  }
  if (data.ThemeId != null) {
    contents.ThemeId = __expectString(data.ThemeId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeThemePermissionsCommandError
 */
const de_DescribeThemePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeThemePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1DescribeUserCommand
 */
export const de_DescribeUserCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeUserCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_DescribeUserCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.User != null) {
    contents.User = de_User(data.User, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1DescribeUserCommandError
 */
const de_DescribeUserCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeUserCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1GenerateEmbedUrlForAnonymousUserCommand
 */
export const de_GenerateEmbedUrlForAnonymousUserCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GenerateEmbedUrlForAnonymousUserCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GenerateEmbedUrlForAnonymousUserCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AnonymousUserArn != null) {
    contents.AnonymousUserArn = __expectString(data.AnonymousUserArn);
  }
  if (data.EmbedUrl != null) {
    contents.EmbedUrl = __expectString(data.EmbedUrl);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1GenerateEmbedUrlForAnonymousUserCommandError
 */
const de_GenerateEmbedUrlForAnonymousUserCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GenerateEmbedUrlForAnonymousUserCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "SessionLifetimeInMinutesInvalidException":
    case "com.amazonaws.quicksight#SessionLifetimeInMinutesInvalidException":
      throw await de_SessionLifetimeInMinutesInvalidExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedPricingPlanException":
    case "com.amazonaws.quicksight#UnsupportedPricingPlanException":
      throw await de_UnsupportedPricingPlanExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1GenerateEmbedUrlForRegisteredUserCommand
 */
export const de_GenerateEmbedUrlForRegisteredUserCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GenerateEmbedUrlForRegisteredUserCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GenerateEmbedUrlForRegisteredUserCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.EmbedUrl != null) {
    contents.EmbedUrl = __expectString(data.EmbedUrl);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1GenerateEmbedUrlForRegisteredUserCommandError
 */
const de_GenerateEmbedUrlForRegisteredUserCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GenerateEmbedUrlForRegisteredUserCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "QuickSightUserNotFoundException":
    case "com.amazonaws.quicksight#QuickSightUserNotFoundException":
      throw await de_QuickSightUserNotFoundExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "SessionLifetimeInMinutesInvalidException":
    case "com.amazonaws.quicksight#SessionLifetimeInMinutesInvalidException":
      throw await de_SessionLifetimeInMinutesInvalidExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedPricingPlanException":
    case "com.amazonaws.quicksight#UnsupportedPricingPlanException":
      throw await de_UnsupportedPricingPlanExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1GetDashboardEmbedUrlCommand
 */
export const de_GetDashboardEmbedUrlCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetDashboardEmbedUrlCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetDashboardEmbedUrlCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.EmbedUrl != null) {
    contents.EmbedUrl = __expectString(data.EmbedUrl);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1GetDashboardEmbedUrlCommandError
 */
const de_GetDashboardEmbedUrlCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetDashboardEmbedUrlCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "DomainNotWhitelistedException":
    case "com.amazonaws.quicksight#DomainNotWhitelistedException":
      throw await de_DomainNotWhitelistedExceptionRes(parsedOutput, context);
    case "IdentityTypeNotSupportedException":
    case "com.amazonaws.quicksight#IdentityTypeNotSupportedException":
      throw await de_IdentityTypeNotSupportedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "QuickSightUserNotFoundException":
    case "com.amazonaws.quicksight#QuickSightUserNotFoundException":
      throw await de_QuickSightUserNotFoundExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "SessionLifetimeInMinutesInvalidException":
    case "com.amazonaws.quicksight#SessionLifetimeInMinutesInvalidException":
      throw await de_SessionLifetimeInMinutesInvalidExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedPricingPlanException":
    case "com.amazonaws.quicksight#UnsupportedPricingPlanException":
      throw await de_UnsupportedPricingPlanExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1GetSessionEmbedUrlCommand
 */
export const de_GetSessionEmbedUrlCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSessionEmbedUrlCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_GetSessionEmbedUrlCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.EmbedUrl != null) {
    contents.EmbedUrl = __expectString(data.EmbedUrl);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1GetSessionEmbedUrlCommandError
 */
const de_GetSessionEmbedUrlCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSessionEmbedUrlCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "QuickSightUserNotFoundException":
    case "com.amazonaws.quicksight#QuickSightUserNotFoundException":
      throw await de_QuickSightUserNotFoundExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "SessionLifetimeInMinutesInvalidException":
    case "com.amazonaws.quicksight#SessionLifetimeInMinutesInvalidException":
      throw await de_SessionLifetimeInMinutesInvalidExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListAnalysesCommand
 */
export const de_ListAnalysesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAnalysesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListAnalysesCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AnalysisSummaryList != null) {
    contents.AnalysisSummaryList = de_AnalysisSummaryList(data.AnalysisSummaryList, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListAnalysesCommandError
 */
const de_ListAnalysesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAnalysesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListDashboardsCommand
 */
export const de_ListDashboardsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDashboardsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListDashboardsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DashboardSummaryList != null) {
    contents.DashboardSummaryList = de_DashboardSummaryList(data.DashboardSummaryList, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListDashboardsCommandError
 */
const de_ListDashboardsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDashboardsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListDashboardVersionsCommand
 */
export const de_ListDashboardVersionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDashboardVersionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListDashboardVersionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DashboardVersionSummaryList != null) {
    contents.DashboardVersionSummaryList = de_DashboardVersionSummaryList(data.DashboardVersionSummaryList, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListDashboardVersionsCommandError
 */
const de_ListDashboardVersionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDashboardVersionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListDataSetsCommand
 */
export const de_ListDataSetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDataSetsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListDataSetsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DataSetSummaries != null) {
    contents.DataSetSummaries = de_DataSetSummaryList(data.DataSetSummaries, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListDataSetsCommandError
 */
const de_ListDataSetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDataSetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListDataSourcesCommand
 */
export const de_ListDataSourcesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDataSourcesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListDataSourcesCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DataSources != null) {
    contents.DataSources = de_DataSourceList(data.DataSources, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListDataSourcesCommandError
 */
const de_ListDataSourcesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDataSourcesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListFolderMembersCommand
 */
export const de_ListFolderMembersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListFolderMembersCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListFolderMembersCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.FolderMemberList != null) {
    contents.FolderMemberList = de_FolderMemberList(data.FolderMemberList, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListFolderMembersCommandError
 */
const de_ListFolderMembersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListFolderMembersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListFoldersCommand
 */
export const de_ListFoldersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListFoldersCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListFoldersCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.FolderSummaryList != null) {
    contents.FolderSummaryList = de_FolderSummaryList(data.FolderSummaryList, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListFoldersCommandError
 */
const de_ListFoldersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListFoldersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListGroupMembershipsCommand
 */
export const de_ListGroupMembershipsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListGroupMembershipsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListGroupMembershipsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.GroupMemberList != null) {
    contents.GroupMemberList = de_GroupMemberList(data.GroupMemberList, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListGroupMembershipsCommandError
 */
const de_ListGroupMembershipsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListGroupMembershipsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListGroupsCommand
 */
export const de_ListGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListGroupsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListGroupsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.GroupList != null) {
    contents.GroupList = de_GroupList(data.GroupList, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListGroupsCommandError
 */
const de_ListGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListIAMPolicyAssignmentsCommand
 */
export const de_ListIAMPolicyAssignmentsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListIAMPolicyAssignmentsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListIAMPolicyAssignmentsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.IAMPolicyAssignments != null) {
    contents.IAMPolicyAssignments = de_IAMPolicyAssignmentSummaryList(data.IAMPolicyAssignments, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListIAMPolicyAssignmentsCommandError
 */
const de_ListIAMPolicyAssignmentsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListIAMPolicyAssignmentsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListIAMPolicyAssignmentsForUserCommand
 */
export const de_ListIAMPolicyAssignmentsForUserCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListIAMPolicyAssignmentsForUserCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListIAMPolicyAssignmentsForUserCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.ActiveAssignments != null) {
    contents.ActiveAssignments = de_ActiveIAMPolicyAssignmentList(data.ActiveAssignments, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListIAMPolicyAssignmentsForUserCommandError
 */
const de_ListIAMPolicyAssignmentsForUserCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListIAMPolicyAssignmentsForUserCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConcurrentUpdatingException":
    case "com.amazonaws.quicksight#ConcurrentUpdatingException":
      throw await de_ConcurrentUpdatingExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListIngestionsCommand
 */
export const de_ListIngestionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListIngestionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListIngestionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Ingestions != null) {
    contents.Ingestions = de_Ingestions(data.Ingestions, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListIngestionsCommandError
 */
const de_ListIngestionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListIngestionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListNamespacesCommand
 */
export const de_ListNamespacesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListNamespacesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListNamespacesCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Namespaces != null) {
    contents.Namespaces = de_Namespaces(data.Namespaces, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListNamespacesCommandError
 */
const de_ListNamespacesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListNamespacesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListTagsForResourceCommand
 */
export const de_ListTagsForResourceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTagsForResourceCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListTagsForResourceCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.Tags != null) {
    contents.Tags = de_TagList(data.Tags, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListTagsForResourceCommandError
 */
const de_ListTagsForResourceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTagsForResourceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListTemplateAliasesCommand
 */
export const de_ListTemplateAliasesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTemplateAliasesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListTemplateAliasesCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.TemplateAliasList != null) {
    contents.TemplateAliasList = de_TemplateAliasList(data.TemplateAliasList, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListTemplateAliasesCommandError
 */
const de_ListTemplateAliasesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTemplateAliasesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListTemplatesCommand
 */
export const de_ListTemplatesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTemplatesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListTemplatesCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.TemplateSummaryList != null) {
    contents.TemplateSummaryList = de_TemplateSummaryList(data.TemplateSummaryList, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListTemplatesCommandError
 */
const de_ListTemplatesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTemplatesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListTemplateVersionsCommand
 */
export const de_ListTemplateVersionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTemplateVersionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListTemplateVersionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.TemplateVersionSummaryList != null) {
    contents.TemplateVersionSummaryList = de_TemplateVersionSummaryList(data.TemplateVersionSummaryList, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListTemplateVersionsCommandError
 */
const de_ListTemplateVersionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTemplateVersionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListThemeAliasesCommand
 */
export const de_ListThemeAliasesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThemeAliasesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListThemeAliasesCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ThemeAliasList != null) {
    contents.ThemeAliasList = de_ThemeAliasList(data.ThemeAliasList, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListThemeAliasesCommandError
 */
const de_ListThemeAliasesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThemeAliasesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListThemesCommand
 */
export const de_ListThemesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThemesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListThemesCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ThemeSummaryList != null) {
    contents.ThemeSummaryList = de_ThemeSummaryList(data.ThemeSummaryList, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListThemesCommandError
 */
const de_ListThemesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThemesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListThemeVersionsCommand
 */
export const de_ListThemeVersionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThemeVersionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListThemeVersionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ThemeVersionSummaryList != null) {
    contents.ThemeVersionSummaryList = de_ThemeVersionSummaryList(data.ThemeVersionSummaryList, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListThemeVersionsCommandError
 */
const de_ListThemeVersionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListThemeVersionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListUserGroupsCommand
 */
export const de_ListUserGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListUserGroupsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListUserGroupsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.GroupList != null) {
    contents.GroupList = de_GroupList(data.GroupList, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListUserGroupsCommandError
 */
const de_ListUserGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListUserGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1ListUsersCommand
 */
export const de_ListUsersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListUsersCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_ListUsersCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.UserList != null) {
    contents.UserList = de_UserList(data.UserList, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1ListUsersCommandError
 */
const de_ListUsersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListUsersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1RegisterUserCommand
 */
export const de_RegisterUserCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterUserCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_RegisterUserCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.User != null) {
    contents.User = de_User(data.User, context);
  }
  if (data.UserInvitationUrl != null) {
    contents.UserInvitationUrl = __expectString(data.UserInvitationUrl);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1RegisterUserCommandError
 */
const de_RegisterUserCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterUserCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1RestoreAnalysisCommand
 */
export const de_RestoreAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreAnalysisCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_RestoreAnalysisCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AnalysisId != null) {
    contents.AnalysisId = __expectString(data.AnalysisId);
  }
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1RestoreAnalysisCommandError
 */
const de_RestoreAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1SearchAnalysesCommand
 */
export const de_SearchAnalysesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchAnalysesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_SearchAnalysesCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AnalysisSummaryList != null) {
    contents.AnalysisSummaryList = de_AnalysisSummaryList(data.AnalysisSummaryList, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1SearchAnalysesCommandError
 */
const de_SearchAnalysesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchAnalysesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1SearchDashboardsCommand
 */
export const de_SearchDashboardsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchDashboardsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_SearchDashboardsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DashboardSummaryList != null) {
    contents.DashboardSummaryList = de_DashboardSummaryList(data.DashboardSummaryList, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1SearchDashboardsCommandError
 */
const de_SearchDashboardsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchDashboardsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1SearchDataSetsCommand
 */
export const de_SearchDataSetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchDataSetsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_SearchDataSetsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DataSetSummaries != null) {
    contents.DataSetSummaries = de_DataSetSummaryList(data.DataSetSummaries, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1SearchDataSetsCommandError
 */
const de_SearchDataSetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchDataSetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1SearchDataSourcesCommand
 */
export const de_SearchDataSourcesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchDataSourcesCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_SearchDataSourcesCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DataSourceSummaries != null) {
    contents.DataSourceSummaries = de_DataSourceSummaryList(data.DataSourceSummaries, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1SearchDataSourcesCommandError
 */
const de_SearchDataSourcesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchDataSourcesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1SearchFoldersCommand
 */
export const de_SearchFoldersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchFoldersCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_SearchFoldersCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.FolderSummaryList != null) {
    contents.FolderSummaryList = de_FolderSummaryList(data.FolderSummaryList, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1SearchFoldersCommandError
 */
const de_SearchFoldersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchFoldersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.quicksight#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1SearchGroupsCommand
 */
export const de_SearchGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchGroupsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_SearchGroupsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.GroupList != null) {
    contents.GroupList = de_GroupList(data.GroupList, context);
  }
  if (data.NextToken != null) {
    contents.NextToken = __expectString(data.NextToken);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1SearchGroupsCommandError
 */
const de_SearchGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidNextTokenException":
    case "com.amazonaws.quicksight#InvalidNextTokenException":
      throw await de_InvalidNextTokenExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1TagResourceCommand
 */
export const de_TagResourceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TagResourceCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_TagResourceCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1TagResourceCommandError
 */
const de_TagResourceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TagResourceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UntagResourceCommand
 */
export const de_UntagResourceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UntagResourceCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UntagResourceCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UntagResourceCommandError
 */
const de_UntagResourceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UntagResourceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateAccountCustomizationCommand
 */
export const de_UpdateAccountCustomizationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAccountCustomizationCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateAccountCustomizationCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AccountCustomization != null) {
    contents.AccountCustomization = de_AccountCustomization(data.AccountCustomization, context);
  }
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.AwsAccountId != null) {
    contents.AwsAccountId = __expectString(data.AwsAccountId);
  }
  if (data.Namespace != null) {
    contents.Namespace = __expectString(data.Namespace);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateAccountCustomizationCommandError
 */
const de_UpdateAccountCustomizationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAccountCustomizationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateAccountSettingsCommand
 */
export const de_UpdateAccountSettingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAccountSettingsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateAccountSettingsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateAccountSettingsCommandError
 */
const de_UpdateAccountSettingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAccountSettingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateAnalysisCommand
 */
export const de_UpdateAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAnalysisCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateAnalysisCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AnalysisId != null) {
    contents.AnalysisId = __expectString(data.AnalysisId);
  }
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.UpdateStatus != null) {
    contents.UpdateStatus = __expectString(data.UpdateStatus);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateAnalysisCommandError
 */
const de_UpdateAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateAnalysisPermissionsCommand
 */
export const de_UpdateAnalysisPermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAnalysisPermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateAnalysisPermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AnalysisArn != null) {
    contents.AnalysisArn = __expectString(data.AnalysisArn);
  }
  if (data.AnalysisId != null) {
    contents.AnalysisId = __expectString(data.AnalysisId);
  }
  if (data.Permissions != null) {
    contents.Permissions = de_ResourcePermissionList(data.Permissions, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateAnalysisPermissionsCommandError
 */
const de_UpdateAnalysisPermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAnalysisPermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateDashboardCommand
 */
export const de_UpdateDashboardCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDashboardCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateDashboardCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.CreationStatus != null) {
    contents.CreationStatus = __expectString(data.CreationStatus);
  }
  if (data.DashboardId != null) {
    contents.DashboardId = __expectString(data.DashboardId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.Status != null) {
    contents.Status = __expectInt32(data.Status);
  }
  if (data.VersionArn != null) {
    contents.VersionArn = __expectString(data.VersionArn);
  }
  return contents;
};

/**
 * deserializeAws_restJson1UpdateDashboardCommandError
 */
const de_UpdateDashboardCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDashboardCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateDashboardPermissionsCommand
 */
export const de_UpdateDashboardPermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDashboardPermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateDashboardPermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DashboardArn != null) {
    contents.DashboardArn = __expectString(data.DashboardArn);
  }
  if (data.DashboardId != null) {
    contents.DashboardId = __expectString(data.DashboardId);
  }
  if (data.LinkSharingConfiguration != null) {
    contents.LinkSharingConfiguration = de_LinkSharingConfiguration(data.LinkSharingConfiguration, context);
  }
  if (data.Permissions != null) {
    contents.Permissions = de_ResourcePermissionList(data.Permissions, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateDashboardPermissionsCommandError
 */
const de_UpdateDashboardPermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDashboardPermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateDashboardPublishedVersionCommand
 */
export const de_UpdateDashboardPublishedVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDashboardPublishedVersionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateDashboardPublishedVersionCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DashboardArn != null) {
    contents.DashboardArn = __expectString(data.DashboardArn);
  }
  if (data.DashboardId != null) {
    contents.DashboardId = __expectString(data.DashboardId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateDashboardPublishedVersionCommandError
 */
const de_UpdateDashboardPublishedVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDashboardPublishedVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateDataSetCommand
 */
export const de_UpdateDataSetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDataSetCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateDataSetCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.DataSetId != null) {
    contents.DataSetId = __expectString(data.DataSetId);
  }
  if (data.IngestionArn != null) {
    contents.IngestionArn = __expectString(data.IngestionArn);
  }
  if (data.IngestionId != null) {
    contents.IngestionId = __expectString(data.IngestionId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateDataSetCommandError
 */
const de_UpdateDataSetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDataSetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateDataSetPermissionsCommand
 */
export const de_UpdateDataSetPermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDataSetPermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateDataSetPermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DataSetArn != null) {
    contents.DataSetArn = __expectString(data.DataSetArn);
  }
  if (data.DataSetId != null) {
    contents.DataSetId = __expectString(data.DataSetId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateDataSetPermissionsCommandError
 */
const de_UpdateDataSetPermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDataSetPermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateDataSourceCommand
 */
export const de_UpdateDataSourceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDataSourceCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateDataSourceCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.DataSourceId != null) {
    contents.DataSourceId = __expectString(data.DataSourceId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.UpdateStatus != null) {
    contents.UpdateStatus = __expectString(data.UpdateStatus);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateDataSourceCommandError
 */
const de_UpdateDataSourceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDataSourceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateDataSourcePermissionsCommand
 */
export const de_UpdateDataSourcePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDataSourcePermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateDataSourcePermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.DataSourceArn != null) {
    contents.DataSourceArn = __expectString(data.DataSourceArn);
  }
  if (data.DataSourceId != null) {
    contents.DataSourceId = __expectString(data.DataSourceId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateDataSourcePermissionsCommandError
 */
const de_UpdateDataSourcePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDataSourcePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateFolderCommand
 */
export const de_UpdateFolderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateFolderCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateFolderCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.FolderId != null) {
    contents.FolderId = __expectString(data.FolderId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateFolderCommandError
 */
const de_UpdateFolderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateFolderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateFolderPermissionsCommand
 */
export const de_UpdateFolderPermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateFolderPermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateFolderPermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.FolderId != null) {
    contents.FolderId = __expectString(data.FolderId);
  }
  if (data.Permissions != null) {
    contents.Permissions = de_ResourcePermissionList(data.Permissions, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.Status != null) {
    contents.Status = __expectInt32(data.Status);
  }
  return contents;
};

/**
 * deserializeAws_restJson1UpdateFolderPermissionsCommandError
 */
const de_UpdateFolderPermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateFolderPermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateGroupCommand
 */
export const de_UpdateGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateGroupCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateGroupCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Group != null) {
    contents.Group = de_Group(data.Group, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateGroupCommandError
 */
const de_UpdateGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateIAMPolicyAssignmentCommand
 */
export const de_UpdateIAMPolicyAssignmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateIAMPolicyAssignmentCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateIAMPolicyAssignmentCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AssignmentId != null) {
    contents.AssignmentId = __expectString(data.AssignmentId);
  }
  if (data.AssignmentName != null) {
    contents.AssignmentName = __expectString(data.AssignmentName);
  }
  if (data.AssignmentStatus != null) {
    contents.AssignmentStatus = __expectString(data.AssignmentStatus);
  }
  if (data.Identities != null) {
    contents.Identities = de_IdentityMap(data.Identities, context);
  }
  if (data.PolicyArn != null) {
    contents.PolicyArn = __expectString(data.PolicyArn);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateIAMPolicyAssignmentCommandError
 */
const de_UpdateIAMPolicyAssignmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateIAMPolicyAssignmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "ConcurrentUpdatingException":
    case "com.amazonaws.quicksight#ConcurrentUpdatingException":
      throw await de_ConcurrentUpdatingExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateIpRestrictionCommand
 */
export const de_UpdateIpRestrictionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateIpRestrictionCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateIpRestrictionCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.AwsAccountId != null) {
    contents.AwsAccountId = __expectString(data.AwsAccountId);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateIpRestrictionCommandError
 */
const de_UpdateIpRestrictionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateIpRestrictionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdatePublicSharingSettingsCommand
 */
export const de_UpdatePublicSharingSettingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdatePublicSharingSettingsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdatePublicSharingSettingsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdatePublicSharingSettingsCommandError
 */
const de_UpdatePublicSharingSettingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdatePublicSharingSettingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedPricingPlanException":
    case "com.amazonaws.quicksight#UnsupportedPricingPlanException":
      throw await de_UnsupportedPricingPlanExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateTemplateCommand
 */
export const de_UpdateTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTemplateCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateTemplateCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.CreationStatus != null) {
    contents.CreationStatus = __expectString(data.CreationStatus);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.TemplateId != null) {
    contents.TemplateId = __expectString(data.TemplateId);
  }
  if (data.VersionArn != null) {
    contents.VersionArn = __expectString(data.VersionArn);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateTemplateCommandError
 */
const de_UpdateTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateTemplateAliasCommand
 */
export const de_UpdateTemplateAliasCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTemplateAliasCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateTemplateAliasCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.TemplateAlias != null) {
    contents.TemplateAlias = de_TemplateAlias(data.TemplateAlias, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateTemplateAliasCommandError
 */
const de_UpdateTemplateAliasCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTemplateAliasCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateTemplatePermissionsCommand
 */
export const de_UpdateTemplatePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTemplatePermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateTemplatePermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Permissions != null) {
    contents.Permissions = de_ResourcePermissionList(data.Permissions, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.TemplateArn != null) {
    contents.TemplateArn = __expectString(data.TemplateArn);
  }
  if (data.TemplateId != null) {
    contents.TemplateId = __expectString(data.TemplateId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateTemplatePermissionsCommandError
 */
const de_UpdateTemplatePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTemplatePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateThemeCommand
 */
export const de_UpdateThemeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateThemeCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateThemeCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Arn != null) {
    contents.Arn = __expectString(data.Arn);
  }
  if (data.CreationStatus != null) {
    contents.CreationStatus = __expectString(data.CreationStatus);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ThemeId != null) {
    contents.ThemeId = __expectString(data.ThemeId);
  }
  if (data.VersionArn != null) {
    contents.VersionArn = __expectString(data.VersionArn);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateThemeCommandError
 */
const de_UpdateThemeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateThemeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateThemeAliasCommand
 */
export const de_UpdateThemeAliasCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateThemeAliasCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateThemeAliasCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ThemeAlias != null) {
    contents.ThemeAlias = de_ThemeAlias(data.ThemeAlias, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateThemeAliasCommandError
 */
const de_UpdateThemeAliasCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateThemeAliasCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.quicksight#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "ResourceExistsException":
    case "com.amazonaws.quicksight#ResourceExistsException":
      throw await de_ResourceExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateThemePermissionsCommand
 */
export const de_UpdateThemePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateThemePermissionsCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateThemePermissionsCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.Permissions != null) {
    contents.Permissions = de_ResourcePermissionList(data.Permissions, context);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ThemeArn != null) {
    contents.ThemeArn = __expectString(data.ThemeArn);
  }
  if (data.ThemeId != null) {
    contents.ThemeId = __expectString(data.ThemeId);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateThemePermissionsCommandError
 */
const de_UpdateThemePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateThemePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.quicksight#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "UnsupportedUserEditionException":
    case "com.amazonaws.quicksight#UnsupportedUserEditionException":
      throw await de_UnsupportedUserEditionExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

/**
 * deserializeAws_restJson1UpdateUserCommand
 */
export const de_UpdateUserCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateUserCommandOutput> => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_UpdateUserCommandError(output, context);
  }
  const contents: any = map({
    $metadata: deserializeMetadata(output),
  });
  const data: Record<string, any> = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.User != null) {
    contents.User = de_User(data.User, context);
  }
  map(contents, {
    Status: [, output.statusCode],
  });
  return contents;
};

/**
 * deserializeAws_restJson1UpdateUserCommandError
 */
const de_UpdateUserCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateUserCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "AccessDeniedException":
    case "com.amazonaws.quicksight#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.quicksight#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidParameterValueException":
    case "com.amazonaws.quicksight#InvalidParameterValueException":
      throw await de_InvalidParameterValueExceptionRes(parsedOutput, context);
    case "PreconditionNotMetException":
    case "com.amazonaws.quicksight#PreconditionNotMetException":
      throw await de_PreconditionNotMetExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.quicksight#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ResourceUnavailableException":
    case "com.amazonaws.quicksight#ResourceUnavailableException":
      throw await de_ResourceUnavailableExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.quicksight#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
      });
  }
};

const map = __map;
/**
 * deserializeAws_restJson1AccessDeniedExceptionRes
 */
const de_AccessDeniedExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<AccessDeniedException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1ConcurrentUpdatingExceptionRes
 */
const de_ConcurrentUpdatingExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ConcurrentUpdatingException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new ConcurrentUpdatingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1ConflictExceptionRes
 */
const de_ConflictExceptionRes = async (parsedOutput: any, context: __SerdeContext): Promise<ConflictException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1DomainNotWhitelistedExceptionRes
 */
const de_DomainNotWhitelistedExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<DomainNotWhitelistedException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new DomainNotWhitelistedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1IdentityTypeNotSupportedExceptionRes
 */
const de_IdentityTypeNotSupportedExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<IdentityTypeNotSupportedException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new IdentityTypeNotSupportedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1InternalFailureExceptionRes
 */
const de_InternalFailureExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<InternalFailureException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new InternalFailureException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1InvalidNextTokenExceptionRes
 */
const de_InvalidNextTokenExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<InvalidNextTokenException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new InvalidNextTokenException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1InvalidParameterValueExceptionRes
 */
const de_InvalidParameterValueExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<InvalidParameterValueException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new InvalidParameterValueException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1InvalidRequestExceptionRes
 */
const de_InvalidRequestExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<InvalidRequestException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new InvalidRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1LimitExceededExceptionRes
 */
const de_LimitExceededExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<LimitExceededException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ResourceType != null) {
    contents.ResourceType = __expectString(data.ResourceType);
  }
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1PreconditionNotMetExceptionRes
 */
const de_PreconditionNotMetExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<PreconditionNotMetException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new PreconditionNotMetException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1QuickSightUserNotFoundExceptionRes
 */
const de_QuickSightUserNotFoundExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<QuickSightUserNotFoundException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new QuickSightUserNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1ResourceExistsExceptionRes
 */
const de_ResourceExistsExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ResourceExistsException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ResourceType != null) {
    contents.ResourceType = __expectString(data.ResourceType);
  }
  const exception = new ResourceExistsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1ResourceNotFoundExceptionRes
 */
const de_ResourceNotFoundExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ResourceNotFoundException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ResourceType != null) {
    contents.ResourceType = __expectString(data.ResourceType);
  }
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1ResourceUnavailableExceptionRes
 */
const de_ResourceUnavailableExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ResourceUnavailableException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  if (data.ResourceType != null) {
    contents.ResourceType = __expectString(data.ResourceType);
  }
  const exception = new ResourceUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1SessionLifetimeInMinutesInvalidExceptionRes
 */
const de_SessionLifetimeInMinutesInvalidExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<SessionLifetimeInMinutesInvalidException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new SessionLifetimeInMinutesInvalidException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1ThrottlingExceptionRes
 */
const de_ThrottlingExceptionRes = async (parsedOutput: any, context: __SerdeContext): Promise<ThrottlingException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1UnsupportedPricingPlanExceptionRes
 */
const de_UnsupportedPricingPlanExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<UnsupportedPricingPlanException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new UnsupportedPricingPlanException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * deserializeAws_restJson1UnsupportedUserEditionExceptionRes
 */
const de_UnsupportedUserEditionExceptionRes = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<UnsupportedUserEditionException> => {
  const contents: any = map({});
  const data: any = parsedOutput.body;
  if (data.Message != null) {
    contents.Message = __expectString(data.Message);
  }
  if (data.RequestId != null) {
    contents.RequestId = __expectString(data.RequestId);
  }
  const exception = new UnsupportedUserEditionException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents,
  });
  return __decorateServiceException(exception, parsedOutput.body);
};

/**
 * serializeAws_restJson1AccountCustomization
 */
const se_AccountCustomization = (input: AccountCustomization, context: __SerdeContext): any => {
  return {
    ...(input.DefaultEmailCustomizationTemplate != null && {
      DefaultEmailCustomizationTemplate: input.DefaultEmailCustomizationTemplate,
    }),
    ...(input.DefaultTheme != null && { DefaultTheme: input.DefaultTheme }),
  };
};

/**
 * serializeAws_restJson1ActionList
 */
const se_ActionList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1AdHocFilteringOption
 */
const se_AdHocFilteringOption = (input: AdHocFilteringOption, context: __SerdeContext): any => {
  return {
    ...(input.AvailabilityStatus != null && { AvailabilityStatus: input.AvailabilityStatus }),
  };
};

/**
 * serializeAws_restJson1AggregationFunction
 */
const se_AggregationFunction = (input: AggregationFunction, context: __SerdeContext): any => {
  return {
    ...(input.CategoricalAggregationFunction != null && {
      CategoricalAggregationFunction: input.CategoricalAggregationFunction,
    }),
    ...(input.DateAggregationFunction != null && { DateAggregationFunction: input.DateAggregationFunction }),
    ...(input.NumericalAggregationFunction != null && {
      NumericalAggregationFunction: se_NumericalAggregationFunction(input.NumericalAggregationFunction, context),
    }),
  };
};

/**
 * serializeAws_restJson1AggregationSortConfiguration
 */
const se_AggregationSortConfiguration = (input: AggregationSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.AggregationFunction != null && {
      AggregationFunction: se_AggregationFunction(input.AggregationFunction, context),
    }),
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.SortDirection != null && { SortDirection: input.SortDirection }),
  };
};

/**
 * serializeAws_restJson1AggregationSortConfigurationList
 */
const se_AggregationSortConfigurationList = (input: AggregationSortConfiguration[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_AggregationSortConfiguration(entry, context);
    });
};

/**
 * serializeAws_restJson1AmazonElasticsearchParameters
 */
const se_AmazonElasticsearchParameters = (input: AmazonElasticsearchParameters, context: __SerdeContext): any => {
  return {
    ...(input.Domain != null && { Domain: input.Domain }),
  };
};

/**
 * serializeAws_restJson1AmazonOpenSearchParameters
 */
const se_AmazonOpenSearchParameters = (input: AmazonOpenSearchParameters, context: __SerdeContext): any => {
  return {
    ...(input.Domain != null && { Domain: input.Domain }),
  };
};

/**
 * serializeAws_restJson1AnalysisDefaults
 */
const se_AnalysisDefaults = (input: AnalysisDefaults, context: __SerdeContext): any => {
  return {
    ...(input.DefaultNewSheetConfiguration != null && {
      DefaultNewSheetConfiguration: se_DefaultNewSheetConfiguration(input.DefaultNewSheetConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1AnalysisDefinition
 */
const se_AnalysisDefinition = (input: AnalysisDefinition, context: __SerdeContext): any => {
  return {
    ...(input.AnalysisDefaults != null && { AnalysisDefaults: se_AnalysisDefaults(input.AnalysisDefaults, context) }),
    ...(input.CalculatedFields != null && { CalculatedFields: se_CalculatedFields(input.CalculatedFields, context) }),
    ...(input.ColumnConfigurations != null && {
      ColumnConfigurations: se_ColumnConfigurationList(input.ColumnConfigurations, context),
    }),
    ...(input.DataSetIdentifierDeclarations != null && {
      DataSetIdentifierDeclarations: se_DataSetIdentifierDeclarationList(input.DataSetIdentifierDeclarations, context),
    }),
    ...(input.FilterGroups != null && { FilterGroups: se_FilterGroupList(input.FilterGroups, context) }),
    ...(input.ParameterDeclarations != null && {
      ParameterDeclarations: se_ParameterDeclarationList(input.ParameterDeclarations, context),
    }),
    ...(input.Sheets != null && { Sheets: se_SheetDefinitionList(input.Sheets, context) }),
  };
};

/**
 * serializeAws_restJson1AnalysisSearchFilter
 */
const se_AnalysisSearchFilter = (input: AnalysisSearchFilter, context: __SerdeContext): any => {
  return {
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Operator != null && { Operator: input.Operator }),
    ...(input.Value != null && { Value: input.Value }),
  };
};

/**
 * serializeAws_restJson1AnalysisSearchFilterList
 */
const se_AnalysisSearchFilterList = (input: AnalysisSearchFilter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_AnalysisSearchFilter(entry, context);
    });
};

/**
 * serializeAws_restJson1AnalysisSourceEntity
 */
const se_AnalysisSourceEntity = (input: AnalysisSourceEntity, context: __SerdeContext): any => {
  return {
    ...(input.SourceTemplate != null && { SourceTemplate: se_AnalysisSourceTemplate(input.SourceTemplate, context) }),
  };
};

/**
 * serializeAws_restJson1AnalysisSourceTemplate
 */
const se_AnalysisSourceTemplate = (input: AnalysisSourceTemplate, context: __SerdeContext): any => {
  return {
    ...(input.Arn != null && { Arn: input.Arn }),
    ...(input.DataSetReferences != null && {
      DataSetReferences: se_DataSetReferenceList(input.DataSetReferences, context),
    }),
  };
};

/**
 * serializeAws_restJson1AnchorDateConfiguration
 */
const se_AnchorDateConfiguration = (input: AnchorDateConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.AnchorOption != null && { AnchorOption: input.AnchorOption }),
    ...(input.ParameterName != null && { ParameterName: input.ParameterName }),
  };
};

/**
 * serializeAws_restJson1AnonymousUserDashboardEmbeddingConfiguration
 */
const se_AnonymousUserDashboardEmbeddingConfiguration = (
  input: AnonymousUserDashboardEmbeddingConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.InitialDashboardId != null && { InitialDashboardId: input.InitialDashboardId }),
  };
};

/**
 * serializeAws_restJson1AnonymousUserDashboardVisualEmbeddingConfiguration
 */
const se_AnonymousUserDashboardVisualEmbeddingConfiguration = (
  input: AnonymousUserDashboardVisualEmbeddingConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.InitialDashboardVisualId != null && {
      InitialDashboardVisualId: se_DashboardVisualId(input.InitialDashboardVisualId, context),
    }),
  };
};

/**
 * serializeAws_restJson1AnonymousUserEmbeddingExperienceConfiguration
 */
const se_AnonymousUserEmbeddingExperienceConfiguration = (
  input: AnonymousUserEmbeddingExperienceConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.Dashboard != null && {
      Dashboard: se_AnonymousUserDashboardEmbeddingConfiguration(input.Dashboard, context),
    }),
    ...(input.DashboardVisual != null && {
      DashboardVisual: se_AnonymousUserDashboardVisualEmbeddingConfiguration(input.DashboardVisual, context),
    }),
    ...(input.QSearchBar != null && {
      QSearchBar: se_AnonymousUserQSearchBarEmbeddingConfiguration(input.QSearchBar, context),
    }),
  };
};

/**
 * serializeAws_restJson1AnonymousUserQSearchBarEmbeddingConfiguration
 */
const se_AnonymousUserQSearchBarEmbeddingConfiguration = (
  input: AnonymousUserQSearchBarEmbeddingConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.InitialTopicId != null && { InitialTopicId: input.InitialTopicId }),
  };
};

/**
 * serializeAws_restJson1ArcAxisConfiguration
 */
const se_ArcAxisConfiguration = (input: ArcAxisConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.Range != null && { Range: se_ArcAxisDisplayRange(input.Range, context) }),
    ...(input.ReserveRange != null && { ReserveRange: input.ReserveRange }),
  };
};

/**
 * serializeAws_restJson1ArcAxisDisplayRange
 */
const se_ArcAxisDisplayRange = (input: ArcAxisDisplayRange, context: __SerdeContext): any => {
  return {
    ...(input.Max != null && { Max: __serializeFloat(input.Max) }),
    ...(input.Min != null && { Min: __serializeFloat(input.Min) }),
  };
};

/**
 * serializeAws_restJson1ArcConfiguration
 */
const se_ArcConfiguration = (input: ArcConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.ArcAngle != null && { ArcAngle: __serializeFloat(input.ArcAngle) }),
    ...(input.ArcThickness != null && { ArcThickness: input.ArcThickness }),
  };
};

/**
 * serializeAws_restJson1ArcOptions
 */
const se_ArcOptions = (input: ArcOptions, context: __SerdeContext): any => {
  return {
    ...(input.ArcThickness != null && { ArcThickness: input.ArcThickness }),
  };
};

/**
 * serializeAws_restJson1ArnList
 */
const se_ArnList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1AthenaParameters
 */
const se_AthenaParameters = (input: AthenaParameters, context: __SerdeContext): any => {
  return {
    ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
    ...(input.WorkGroup != null && { WorkGroup: input.WorkGroup }),
  };
};

/**
 * serializeAws_restJson1AuroraParameters
 */
const se_AuroraParameters = (input: AuroraParameters, context: __SerdeContext): any => {
  return {
    ...(input.Database != null && { Database: input.Database }),
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Port != null && { Port: input.Port }),
  };
};

/**
 * serializeAws_restJson1AuroraPostgreSqlParameters
 */
const se_AuroraPostgreSqlParameters = (input: AuroraPostgreSqlParameters, context: __SerdeContext): any => {
  return {
    ...(input.Database != null && { Database: input.Database }),
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Port != null && { Port: input.Port }),
  };
};

/**
 * serializeAws_restJson1AwsIotAnalyticsParameters
 */
const se_AwsIotAnalyticsParameters = (input: AwsIotAnalyticsParameters, context: __SerdeContext): any => {
  return {
    ...(input.DataSetName != null && { DataSetName: input.DataSetName }),
  };
};

/**
 * serializeAws_restJson1AxisDataOptions
 */
const se_AxisDataOptions = (input: AxisDataOptions, context: __SerdeContext): any => {
  return {
    ...(input.DateAxisOptions != null && { DateAxisOptions: se_DateAxisOptions(input.DateAxisOptions, context) }),
    ...(input.NumericAxisOptions != null && {
      NumericAxisOptions: se_NumericAxisOptions(input.NumericAxisOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1AxisDisplayDataDrivenRange
 */
const se_AxisDisplayDataDrivenRange = (input: AxisDisplayDataDrivenRange, context: __SerdeContext): any => {
  return {};
};

/**
 * serializeAws_restJson1AxisDisplayMinMaxRange
 */
const se_AxisDisplayMinMaxRange = (input: AxisDisplayMinMaxRange, context: __SerdeContext): any => {
  return {
    ...(input.Maximum != null && { Maximum: __serializeFloat(input.Maximum) }),
    ...(input.Minimum != null && { Minimum: __serializeFloat(input.Minimum) }),
  };
};

/**
 * serializeAws_restJson1AxisDisplayOptions
 */
const se_AxisDisplayOptions = (input: AxisDisplayOptions, context: __SerdeContext): any => {
  return {
    ...(input.AxisLineVisibility != null && { AxisLineVisibility: input.AxisLineVisibility }),
    ...(input.AxisOffset != null && { AxisOffset: input.AxisOffset }),
    ...(input.DataOptions != null && { DataOptions: se_AxisDataOptions(input.DataOptions, context) }),
    ...(input.GridLineVisibility != null && { GridLineVisibility: input.GridLineVisibility }),
    ...(input.ScrollbarOptions != null && { ScrollbarOptions: se_ScrollBarOptions(input.ScrollbarOptions, context) }),
    ...(input.TickLabelOptions != null && {
      TickLabelOptions: se_AxisTickLabelOptions(input.TickLabelOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1AxisDisplayRange
 */
const se_AxisDisplayRange = (input: AxisDisplayRange, context: __SerdeContext): any => {
  return {
    ...(input.DataDriven != null && { DataDriven: se_AxisDisplayDataDrivenRange(input.DataDriven, context) }),
    ...(input.MinMax != null && { MinMax: se_AxisDisplayMinMaxRange(input.MinMax, context) }),
  };
};

/**
 * serializeAws_restJson1AxisLabelOptions
 */
const se_AxisLabelOptions = (input: AxisLabelOptions, context: __SerdeContext): any => {
  return {
    ...(input.ApplyTo != null && { ApplyTo: se_AxisLabelReferenceOptions(input.ApplyTo, context) }),
    ...(input.CustomLabel != null && { CustomLabel: input.CustomLabel }),
    ...(input.FontConfiguration != null && {
      FontConfiguration: se_FontConfiguration(input.FontConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1AxisLabelOptionsList
 */
const se_AxisLabelOptionsList = (input: AxisLabelOptions[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_AxisLabelOptions(entry, context);
    });
};

/**
 * serializeAws_restJson1AxisLabelReferenceOptions
 */
const se_AxisLabelReferenceOptions = (input: AxisLabelReferenceOptions, context: __SerdeContext): any => {
  return {
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
  };
};

/**
 * serializeAws_restJson1AxisLinearScale
 */
const se_AxisLinearScale = (input: AxisLinearScale, context: __SerdeContext): any => {
  return {
    ...(input.StepCount != null && { StepCount: input.StepCount }),
    ...(input.StepSize != null && { StepSize: __serializeFloat(input.StepSize) }),
  };
};

/**
 * serializeAws_restJson1AxisLogarithmicScale
 */
const se_AxisLogarithmicScale = (input: AxisLogarithmicScale, context: __SerdeContext): any => {
  return {
    ...(input.Base != null && { Base: __serializeFloat(input.Base) }),
  };
};

/**
 * serializeAws_restJson1AxisScale
 */
const se_AxisScale = (input: AxisScale, context: __SerdeContext): any => {
  return {
    ...(input.Linear != null && { Linear: se_AxisLinearScale(input.Linear, context) }),
    ...(input.Logarithmic != null && { Logarithmic: se_AxisLogarithmicScale(input.Logarithmic, context) }),
  };
};

/**
 * serializeAws_restJson1AxisTickLabelOptions
 */
const se_AxisTickLabelOptions = (input: AxisTickLabelOptions, context: __SerdeContext): any => {
  return {
    ...(input.LabelOptions != null && { LabelOptions: se_LabelOptions(input.LabelOptions, context) }),
    ...(input.RotationAngle != null && { RotationAngle: __serializeFloat(input.RotationAngle) }),
  };
};

/**
 * serializeAws_restJson1BarChartAggregatedFieldWells
 */
const se_BarChartAggregatedFieldWells = (input: BarChartAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.Category != null && { Category: se_DimensionFieldList(input.Category, context) }),
    ...(input.Colors != null && { Colors: se_DimensionFieldList(input.Colors, context) }),
    ...(input.SmallMultiples != null && {
      SmallMultiples: se_SmallMultiplesDimensionFieldList(input.SmallMultiples, context),
    }),
    ...(input.Values != null && { Values: se_MeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1BarChartConfiguration
 */
const se_BarChartConfiguration = (input: BarChartConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.BarsArrangement != null && { BarsArrangement: input.BarsArrangement }),
    ...(input.CategoryAxis != null && { CategoryAxis: se_AxisDisplayOptions(input.CategoryAxis, context) }),
    ...(input.CategoryLabelOptions != null && {
      CategoryLabelOptions: se_ChartAxisLabelOptions(input.CategoryLabelOptions, context),
    }),
    ...(input.ColorLabelOptions != null && {
      ColorLabelOptions: se_ChartAxisLabelOptions(input.ColorLabelOptions, context),
    }),
    ...(input.ContributionAnalysisDefaults != null && {
      ContributionAnalysisDefaults: se_ContributionAnalysisDefaultList(input.ContributionAnalysisDefaults, context),
    }),
    ...(input.DataLabels != null && { DataLabels: se_DataLabelOptions(input.DataLabels, context) }),
    ...(input.FieldWells != null && { FieldWells: se_BarChartFieldWells(input.FieldWells, context) }),
    ...(input.Legend != null && { Legend: se_LegendOptions(input.Legend, context) }),
    ...(input.Orientation != null && { Orientation: input.Orientation }),
    ...(input.ReferenceLines != null && { ReferenceLines: se_ReferenceLineList(input.ReferenceLines, context) }),
    ...(input.SmallMultiplesOptions != null && {
      SmallMultiplesOptions: se_SmallMultiplesOptions(input.SmallMultiplesOptions, context),
    }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_BarChartSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.Tooltip != null && { Tooltip: se_TooltipOptions(input.Tooltip, context) }),
    ...(input.ValueAxis != null && { ValueAxis: se_AxisDisplayOptions(input.ValueAxis, context) }),
    ...(input.ValueLabelOptions != null && {
      ValueLabelOptions: se_ChartAxisLabelOptions(input.ValueLabelOptions, context),
    }),
    ...(input.VisualPalette != null && { VisualPalette: se_VisualPalette(input.VisualPalette, context) }),
  };
};

/**
 * serializeAws_restJson1BarChartFieldWells
 */
const se_BarChartFieldWells = (input: BarChartFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.BarChartAggregatedFieldWells != null && {
      BarChartAggregatedFieldWells: se_BarChartAggregatedFieldWells(input.BarChartAggregatedFieldWells, context),
    }),
  };
};

/**
 * serializeAws_restJson1BarChartSortConfiguration
 */
const se_BarChartSortConfiguration = (input: BarChartSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryItemsLimit != null && {
      CategoryItemsLimit: se_ItemsLimitConfiguration(input.CategoryItemsLimit, context),
    }),
    ...(input.CategorySort != null && { CategorySort: se_FieldSortOptionsList(input.CategorySort, context) }),
    ...(input.ColorItemsLimit != null && {
      ColorItemsLimit: se_ItemsLimitConfiguration(input.ColorItemsLimit, context),
    }),
    ...(input.ColorSort != null && { ColorSort: se_FieldSortOptionsList(input.ColorSort, context) }),
    ...(input.SmallMultiplesLimitConfiguration != null && {
      SmallMultiplesLimitConfiguration: se_ItemsLimitConfiguration(input.SmallMultiplesLimitConfiguration, context),
    }),
    ...(input.SmallMultiplesSort != null && {
      SmallMultiplesSort: se_FieldSortOptionsList(input.SmallMultiplesSort, context),
    }),
  };
};

/**
 * serializeAws_restJson1BarChartVisual
 */
const se_BarChartVisual = (input: BarChartVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_BarChartConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1BinCountOptions
 */
const se_BinCountOptions = (input: BinCountOptions, context: __SerdeContext): any => {
  return {
    ...(input.Value != null && { Value: input.Value }),
  };
};

/**
 * serializeAws_restJson1BinWidthOptions
 */
const se_BinWidthOptions = (input: BinWidthOptions, context: __SerdeContext): any => {
  return {
    ...(input.BinCountLimit != null && { BinCountLimit: input.BinCountLimit }),
    ...(input.Value != null && { Value: __serializeFloat(input.Value) }),
  };
};

/**
 * serializeAws_restJson1BodySectionConfiguration
 */
const se_BodySectionConfiguration = (input: BodySectionConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.Content != null && { Content: se_BodySectionContent(input.Content, context) }),
    ...(input.PageBreakConfiguration != null && {
      PageBreakConfiguration: se_SectionPageBreakConfiguration(input.PageBreakConfiguration, context),
    }),
    ...(input.SectionId != null && { SectionId: input.SectionId }),
    ...(input.Style != null && { Style: se_SectionStyle(input.Style, context) }),
  };
};

/**
 * serializeAws_restJson1BodySectionConfigurationList
 */
const se_BodySectionConfigurationList = (input: BodySectionConfiguration[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_BodySectionConfiguration(entry, context);
    });
};

/**
 * serializeAws_restJson1BodySectionContent
 */
const se_BodySectionContent = (input: BodySectionContent, context: __SerdeContext): any => {
  return {
    ...(input.Layout != null && { Layout: se_SectionLayoutConfiguration(input.Layout, context) }),
  };
};

/**
 * serializeAws_restJson1BorderStyle
 */
const se_BorderStyle = (input: BorderStyle, context: __SerdeContext): any => {
  return {
    ...(input.Show != null && { Show: input.Show }),
  };
};

/**
 * serializeAws_restJson1BoxPlotAggregatedFieldWells
 */
const se_BoxPlotAggregatedFieldWells = (input: BoxPlotAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.GroupBy != null && { GroupBy: se_BoxPlotDimensionFieldList(input.GroupBy, context) }),
    ...(input.Values != null && { Values: se_BoxPlotMeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1BoxPlotChartConfiguration
 */
const se_BoxPlotChartConfiguration = (input: BoxPlotChartConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.BoxPlotOptions != null && { BoxPlotOptions: se_BoxPlotOptions(input.BoxPlotOptions, context) }),
    ...(input.CategoryAxis != null && { CategoryAxis: se_AxisDisplayOptions(input.CategoryAxis, context) }),
    ...(input.CategoryLabelOptions != null && {
      CategoryLabelOptions: se_ChartAxisLabelOptions(input.CategoryLabelOptions, context),
    }),
    ...(input.FieldWells != null && { FieldWells: se_BoxPlotFieldWells(input.FieldWells, context) }),
    ...(input.Legend != null && { Legend: se_LegendOptions(input.Legend, context) }),
    ...(input.PrimaryYAxisDisplayOptions != null && {
      PrimaryYAxisDisplayOptions: se_AxisDisplayOptions(input.PrimaryYAxisDisplayOptions, context),
    }),
    ...(input.PrimaryYAxisLabelOptions != null && {
      PrimaryYAxisLabelOptions: se_ChartAxisLabelOptions(input.PrimaryYAxisLabelOptions, context),
    }),
    ...(input.ReferenceLines != null && { ReferenceLines: se_ReferenceLineList(input.ReferenceLines, context) }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_BoxPlotSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.Tooltip != null && { Tooltip: se_TooltipOptions(input.Tooltip, context) }),
    ...(input.VisualPalette != null && { VisualPalette: se_VisualPalette(input.VisualPalette, context) }),
  };
};

/**
 * serializeAws_restJson1BoxPlotDimensionFieldList
 */
const se_BoxPlotDimensionFieldList = (input: DimensionField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DimensionField(entry, context);
    });
};

/**
 * serializeAws_restJson1BoxPlotFieldWells
 */
const se_BoxPlotFieldWells = (input: BoxPlotFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.BoxPlotAggregatedFieldWells != null && {
      BoxPlotAggregatedFieldWells: se_BoxPlotAggregatedFieldWells(input.BoxPlotAggregatedFieldWells, context),
    }),
  };
};

/**
 * serializeAws_restJson1BoxPlotMeasureFieldList
 */
const se_BoxPlotMeasureFieldList = (input: MeasureField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_MeasureField(entry, context);
    });
};

/**
 * serializeAws_restJson1BoxPlotOptions
 */
const se_BoxPlotOptions = (input: BoxPlotOptions, context: __SerdeContext): any => {
  return {
    ...(input.AllDataPointsVisibility != null && { AllDataPointsVisibility: input.AllDataPointsVisibility }),
    ...(input.OutlierVisibility != null && { OutlierVisibility: input.OutlierVisibility }),
    ...(input.StyleOptions != null && { StyleOptions: se_BoxPlotStyleOptions(input.StyleOptions, context) }),
  };
};

/**
 * serializeAws_restJson1BoxPlotSortConfiguration
 */
const se_BoxPlotSortConfiguration = (input: BoxPlotSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategorySort != null && { CategorySort: se_FieldSortOptionsList(input.CategorySort, context) }),
    ...(input.PaginationConfiguration != null && {
      PaginationConfiguration: se_PaginationConfiguration(input.PaginationConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1BoxPlotStyleOptions
 */
const se_BoxPlotStyleOptions = (input: BoxPlotStyleOptions, context: __SerdeContext): any => {
  return {
    ...(input.FillStyle != null && { FillStyle: input.FillStyle }),
  };
};

/**
 * serializeAws_restJson1BoxPlotVisual
 */
const se_BoxPlotVisual = (input: BoxPlotVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_BoxPlotChartConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1CalculatedColumn
 */
const se_CalculatedColumn = (input: CalculatedColumn, context: __SerdeContext): any => {
  return {
    ...(input.ColumnId != null && { ColumnId: input.ColumnId }),
    ...(input.ColumnName != null && { ColumnName: input.ColumnName }),
    ...(input.Expression != null && { Expression: input.Expression }),
  };
};

/**
 * serializeAws_restJson1CalculatedColumnList
 */
const se_CalculatedColumnList = (input: CalculatedColumn[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_CalculatedColumn(entry, context);
    });
};

/**
 * serializeAws_restJson1CalculatedField
 */
const se_CalculatedField = (input: CalculatedField, context: __SerdeContext): any => {
  return {
    ...(input.DataSetIdentifier != null && { DataSetIdentifier: input.DataSetIdentifier }),
    ...(input.Expression != null && { Expression: input.Expression }),
    ...(input.Name != null && { Name: input.Name }),
  };
};

/**
 * serializeAws_restJson1CalculatedFields
 */
const se_CalculatedFields = (input: CalculatedField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_CalculatedField(entry, context);
    });
};

/**
 * serializeAws_restJson1CalculatedMeasureField
 */
const se_CalculatedMeasureField = (input: CalculatedMeasureField, context: __SerdeContext): any => {
  return {
    ...(input.Expression != null && { Expression: input.Expression }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
  };
};

/**
 * serializeAws_restJson1CascadingControlConfiguration
 */
const se_CascadingControlConfiguration = (input: CascadingControlConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.SourceControls != null && {
      SourceControls: se_CascadingControlSourceList(input.SourceControls, context),
    }),
  };
};

/**
 * serializeAws_restJson1CascadingControlSource
 */
const se_CascadingControlSource = (input: CascadingControlSource, context: __SerdeContext): any => {
  return {
    ...(input.ColumnToMatch != null && { ColumnToMatch: se_ColumnIdentifier(input.ColumnToMatch, context) }),
    ...(input.SourceSheetControlId != null && { SourceSheetControlId: input.SourceSheetControlId }),
  };
};

/**
 * serializeAws_restJson1CascadingControlSourceList
 */
const se_CascadingControlSourceList = (input: CascadingControlSource[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_CascadingControlSource(entry, context);
    });
};

/**
 * serializeAws_restJson1CastColumnTypeOperation
 */
const se_CastColumnTypeOperation = (input: CastColumnTypeOperation, context: __SerdeContext): any => {
  return {
    ...(input.ColumnName != null && { ColumnName: input.ColumnName }),
    ...(input.Format != null && { Format: input.Format }),
    ...(input.NewColumnType != null && { NewColumnType: input.NewColumnType }),
  };
};

/**
 * serializeAws_restJson1CategoricalDimensionField
 */
const se_CategoricalDimensionField = (input: CategoricalDimensionField, context: __SerdeContext): any => {
  return {
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.FormatConfiguration != null && {
      FormatConfiguration: se_StringFormatConfiguration(input.FormatConfiguration, context),
    }),
    ...(input.HierarchyId != null && { HierarchyId: input.HierarchyId }),
  };
};

/**
 * serializeAws_restJson1CategoricalMeasureField
 */
const se_CategoricalMeasureField = (input: CategoricalMeasureField, context: __SerdeContext): any => {
  return {
    ...(input.AggregationFunction != null && { AggregationFunction: input.AggregationFunction }),
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.FormatConfiguration != null && {
      FormatConfiguration: se_StringFormatConfiguration(input.FormatConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1CategoryDrillDownFilter
 */
const se_CategoryDrillDownFilter = (input: CategoryDrillDownFilter, context: __SerdeContext): any => {
  return {
    ...(input.CategoryValues != null && { CategoryValues: se_CategoryValueList(input.CategoryValues, context) }),
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
  };
};

/**
 * serializeAws_restJson1CategoryFilter
 */
const se_CategoryFilter = (input: CategoryFilter, context: __SerdeContext): any => {
  return {
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.Configuration != null && { Configuration: se_CategoryFilterConfiguration(input.Configuration, context) }),
    ...(input.FilterId != null && { FilterId: input.FilterId }),
  };
};

/**
 * serializeAws_restJson1CategoryFilterConfiguration
 */
const se_CategoryFilterConfiguration = (input: CategoryFilterConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CustomFilterConfiguration != null && {
      CustomFilterConfiguration: se_CustomFilterConfiguration(input.CustomFilterConfiguration, context),
    }),
    ...(input.CustomFilterListConfiguration != null && {
      CustomFilterListConfiguration: se_CustomFilterListConfiguration(input.CustomFilterListConfiguration, context),
    }),
    ...(input.FilterListConfiguration != null && {
      FilterListConfiguration: se_FilterListConfiguration(input.FilterListConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1CategoryValueList
 */
const se_CategoryValueList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1ChartAxisLabelOptions
 */
const se_ChartAxisLabelOptions = (input: ChartAxisLabelOptions, context: __SerdeContext): any => {
  return {
    ...(input.AxisLabelOptions != null && {
      AxisLabelOptions: se_AxisLabelOptionsList(input.AxisLabelOptions, context),
    }),
    ...(input.SortIconVisibility != null && { SortIconVisibility: input.SortIconVisibility }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1ClusterMarker
 */
const se_ClusterMarker = (input: ClusterMarker, context: __SerdeContext): any => {
  return {
    ...(input.SimpleClusterMarker != null && {
      SimpleClusterMarker: se_SimpleClusterMarker(input.SimpleClusterMarker, context),
    }),
  };
};

/**
 * serializeAws_restJson1ClusterMarkerConfiguration
 */
const se_ClusterMarkerConfiguration = (input: ClusterMarkerConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.ClusterMarker != null && { ClusterMarker: se_ClusterMarker(input.ClusterMarker, context) }),
  };
};

/**
 * serializeAws_restJson1ColorList
 */
const se_ColorList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1ColorScale
 */
const se_ColorScale = (input: ColorScale, context: __SerdeContext): any => {
  return {
    ...(input.ColorFillType != null && { ColorFillType: input.ColorFillType }),
    ...(input.Colors != null && { Colors: se_ColorScaleColorList(input.Colors, context) }),
    ...(input.NullValueColor != null && { NullValueColor: se_DataColor(input.NullValueColor, context) }),
  };
};

/**
 * serializeAws_restJson1ColorScaleColorList
 */
const se_ColorScaleColorList = (input: DataColor[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DataColor(entry, context);
    });
};

/**
 * serializeAws_restJson1ColumnConfiguration
 */
const se_ColumnConfiguration = (input: ColumnConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.FormatConfiguration != null && {
      FormatConfiguration: se_FormatConfiguration(input.FormatConfiguration, context),
    }),
    ...(input.Role != null && { Role: input.Role }),
  };
};

/**
 * serializeAws_restJson1ColumnConfigurationList
 */
const se_ColumnConfigurationList = (input: ColumnConfiguration[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ColumnConfiguration(entry, context);
    });
};

/**
 * serializeAws_restJson1ColumnDescription
 */
const se_ColumnDescription = (input: ColumnDescription, context: __SerdeContext): any => {
  return {
    ...(input.Text != null && { Text: input.Text }),
  };
};

/**
 * serializeAws_restJson1ColumnGroup
 */
const se_ColumnGroup = (input: ColumnGroup, context: __SerdeContext): any => {
  return {
    ...(input.GeoSpatialColumnGroup != null && {
      GeoSpatialColumnGroup: se_GeoSpatialColumnGroup(input.GeoSpatialColumnGroup, context),
    }),
  };
};

/**
 * serializeAws_restJson1ColumnGroupColumnSchema
 */
const se_ColumnGroupColumnSchema = (input: ColumnGroupColumnSchema, context: __SerdeContext): any => {
  return {
    ...(input.Name != null && { Name: input.Name }),
  };
};

/**
 * serializeAws_restJson1ColumnGroupColumnSchemaList
 */
const se_ColumnGroupColumnSchemaList = (input: ColumnGroupColumnSchema[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ColumnGroupColumnSchema(entry, context);
    });
};

/**
 * serializeAws_restJson1ColumnGroupList
 */
const se_ColumnGroupList = (input: ColumnGroup[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ColumnGroup(entry, context);
    });
};

/**
 * serializeAws_restJson1ColumnGroupSchema
 */
const se_ColumnGroupSchema = (input: ColumnGroupSchema, context: __SerdeContext): any => {
  return {
    ...(input.ColumnGroupColumnSchemaList != null && {
      ColumnGroupColumnSchemaList: se_ColumnGroupColumnSchemaList(input.ColumnGroupColumnSchemaList, context),
    }),
    ...(input.Name != null && { Name: input.Name }),
  };
};

/**
 * serializeAws_restJson1ColumnGroupSchemaList
 */
const se_ColumnGroupSchemaList = (input: ColumnGroupSchema[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ColumnGroupSchema(entry, context);
    });
};

/**
 * serializeAws_restJson1ColumnHierarchy
 */
const se_ColumnHierarchy = (input: ColumnHierarchy, context: __SerdeContext): any => {
  return {
    ...(input.DateTimeHierarchy != null && {
      DateTimeHierarchy: se_DateTimeHierarchy(input.DateTimeHierarchy, context),
    }),
    ...(input.ExplicitHierarchy != null && {
      ExplicitHierarchy: se_ExplicitHierarchy(input.ExplicitHierarchy, context),
    }),
    ...(input.PredefinedHierarchy != null && {
      PredefinedHierarchy: se_PredefinedHierarchy(input.PredefinedHierarchy, context),
    }),
  };
};

/**
 * serializeAws_restJson1ColumnHierarchyList
 */
const se_ColumnHierarchyList = (input: ColumnHierarchy[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ColumnHierarchy(entry, context);
    });
};

/**
 * serializeAws_restJson1ColumnIdentifier
 */
const se_ColumnIdentifier = (input: ColumnIdentifier, context: __SerdeContext): any => {
  return {
    ...(input.ColumnName != null && { ColumnName: input.ColumnName }),
    ...(input.DataSetIdentifier != null && { DataSetIdentifier: input.DataSetIdentifier }),
  };
};

/**
 * serializeAws_restJson1ColumnLevelPermissionRule
 */
const se_ColumnLevelPermissionRule = (input: ColumnLevelPermissionRule, context: __SerdeContext): any => {
  return {
    ...(input.ColumnNames != null && { ColumnNames: se_ColumnNameList(input.ColumnNames, context) }),
    ...(input.Principals != null && { Principals: se_PrincipalList(input.Principals, context) }),
  };
};

/**
 * serializeAws_restJson1ColumnLevelPermissionRuleList
 */
const se_ColumnLevelPermissionRuleList = (input: ColumnLevelPermissionRule[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ColumnLevelPermissionRule(entry, context);
    });
};

/**
 * serializeAws_restJson1ColumnList
 */
const se_ColumnList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1ColumnNameList
 */
const se_ColumnNameList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1ColumnSchema
 */
const se_ColumnSchema = (input: ColumnSchema, context: __SerdeContext): any => {
  return {
    ...(input.DataType != null && { DataType: input.DataType }),
    ...(input.GeographicRole != null && { GeographicRole: input.GeographicRole }),
    ...(input.Name != null && { Name: input.Name }),
  };
};

/**
 * serializeAws_restJson1ColumnSchemaList
 */
const se_ColumnSchemaList = (input: ColumnSchema[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ColumnSchema(entry, context);
    });
};

/**
 * serializeAws_restJson1ColumnSort
 */
const se_ColumnSort = (input: ColumnSort, context: __SerdeContext): any => {
  return {
    ...(input.AggregationFunction != null && {
      AggregationFunction: se_AggregationFunction(input.AggregationFunction, context),
    }),
    ...(input.Direction != null && { Direction: input.Direction }),
    ...(input.SortBy != null && { SortBy: se_ColumnIdentifier(input.SortBy, context) }),
  };
};

/**
 * serializeAws_restJson1ColumnTag
 */
const se_ColumnTag = (input: ColumnTag, context: __SerdeContext): any => {
  return {
    ...(input.ColumnDescription != null && {
      ColumnDescription: se_ColumnDescription(input.ColumnDescription, context),
    }),
    ...(input.ColumnGeographicRole != null && { ColumnGeographicRole: input.ColumnGeographicRole }),
  };
};

/**
 * serializeAws_restJson1ColumnTagList
 */
const se_ColumnTagList = (input: ColumnTag[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ColumnTag(entry, context);
    });
};

/**
 * serializeAws_restJson1ColumnTagNames
 */
const se_ColumnTagNames = (input: (ColumnTagName | string)[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1ColumnTooltipItem
 */
const se_ColumnTooltipItem = (input: ColumnTooltipItem, context: __SerdeContext): any => {
  return {
    ...(input.Aggregation != null && { Aggregation: se_AggregationFunction(input.Aggregation, context) }),
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.Label != null && { Label: input.Label }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1ComboChartAggregatedFieldWells
 */
const se_ComboChartAggregatedFieldWells = (input: ComboChartAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.BarValues != null && { BarValues: se_MeasureFieldList(input.BarValues, context) }),
    ...(input.Category != null && { Category: se_DimensionFieldList(input.Category, context) }),
    ...(input.Colors != null && { Colors: se_DimensionFieldList(input.Colors, context) }),
    ...(input.LineValues != null && { LineValues: se_MeasureFieldList(input.LineValues, context) }),
  };
};

/**
 * serializeAws_restJson1ComboChartConfiguration
 */
const se_ComboChartConfiguration = (input: ComboChartConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.BarDataLabels != null && { BarDataLabels: se_DataLabelOptions(input.BarDataLabels, context) }),
    ...(input.BarsArrangement != null && { BarsArrangement: input.BarsArrangement }),
    ...(input.CategoryAxis != null && { CategoryAxis: se_AxisDisplayOptions(input.CategoryAxis, context) }),
    ...(input.CategoryLabelOptions != null && {
      CategoryLabelOptions: se_ChartAxisLabelOptions(input.CategoryLabelOptions, context),
    }),
    ...(input.ColorLabelOptions != null && {
      ColorLabelOptions: se_ChartAxisLabelOptions(input.ColorLabelOptions, context),
    }),
    ...(input.FieldWells != null && { FieldWells: se_ComboChartFieldWells(input.FieldWells, context) }),
    ...(input.Legend != null && { Legend: se_LegendOptions(input.Legend, context) }),
    ...(input.LineDataLabels != null && { LineDataLabels: se_DataLabelOptions(input.LineDataLabels, context) }),
    ...(input.PrimaryYAxisDisplayOptions != null && {
      PrimaryYAxisDisplayOptions: se_AxisDisplayOptions(input.PrimaryYAxisDisplayOptions, context),
    }),
    ...(input.PrimaryYAxisLabelOptions != null && {
      PrimaryYAxisLabelOptions: se_ChartAxisLabelOptions(input.PrimaryYAxisLabelOptions, context),
    }),
    ...(input.ReferenceLines != null && { ReferenceLines: se_ReferenceLineList(input.ReferenceLines, context) }),
    ...(input.SecondaryYAxisDisplayOptions != null && {
      SecondaryYAxisDisplayOptions: se_AxisDisplayOptions(input.SecondaryYAxisDisplayOptions, context),
    }),
    ...(input.SecondaryYAxisLabelOptions != null && {
      SecondaryYAxisLabelOptions: se_ChartAxisLabelOptions(input.SecondaryYAxisLabelOptions, context),
    }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_ComboChartSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.Tooltip != null && { Tooltip: se_TooltipOptions(input.Tooltip, context) }),
    ...(input.VisualPalette != null && { VisualPalette: se_VisualPalette(input.VisualPalette, context) }),
  };
};

/**
 * serializeAws_restJson1ComboChartFieldWells
 */
const se_ComboChartFieldWells = (input: ComboChartFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.ComboChartAggregatedFieldWells != null && {
      ComboChartAggregatedFieldWells: se_ComboChartAggregatedFieldWells(input.ComboChartAggregatedFieldWells, context),
    }),
  };
};

/**
 * serializeAws_restJson1ComboChartSortConfiguration
 */
const se_ComboChartSortConfiguration = (input: ComboChartSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryItemsLimit != null && {
      CategoryItemsLimit: se_ItemsLimitConfiguration(input.CategoryItemsLimit, context),
    }),
    ...(input.CategorySort != null && { CategorySort: se_FieldSortOptionsList(input.CategorySort, context) }),
    ...(input.ColorItemsLimit != null && {
      ColorItemsLimit: se_ItemsLimitConfiguration(input.ColorItemsLimit, context),
    }),
    ...(input.ColorSort != null && { ColorSort: se_FieldSortOptionsList(input.ColorSort, context) }),
  };
};

/**
 * serializeAws_restJson1ComboChartVisual
 */
const se_ComboChartVisual = (input: ComboChartVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_ComboChartConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1ComparisonConfiguration
 */
const se_ComparisonConfiguration = (input: ComparisonConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.ComparisonFormat != null && {
      ComparisonFormat: se_ComparisonFormatConfiguration(input.ComparisonFormat, context),
    }),
    ...(input.ComparisonMethod != null && { ComparisonMethod: input.ComparisonMethod }),
  };
};

/**
 * serializeAws_restJson1ComparisonFormatConfiguration
 */
const se_ComparisonFormatConfiguration = (input: ComparisonFormatConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.NumberDisplayFormatConfiguration != null && {
      NumberDisplayFormatConfiguration: se_NumberDisplayFormatConfiguration(
        input.NumberDisplayFormatConfiguration,
        context
      ),
    }),
    ...(input.PercentageDisplayFormatConfiguration != null && {
      PercentageDisplayFormatConfiguration: se_PercentageDisplayFormatConfiguration(
        input.PercentageDisplayFormatConfiguration,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1Computation
 */
const se_Computation = (input: Computation, context: __SerdeContext): any => {
  return {
    ...(input.Forecast != null && { Forecast: se_ForecastComputation(input.Forecast, context) }),
    ...(input.GrowthRate != null && { GrowthRate: se_GrowthRateComputation(input.GrowthRate, context) }),
    ...(input.MaximumMinimum != null && {
      MaximumMinimum: se_MaximumMinimumComputation(input.MaximumMinimum, context),
    }),
    ...(input.MetricComparison != null && {
      MetricComparison: se_MetricComparisonComputation(input.MetricComparison, context),
    }),
    ...(input.PeriodOverPeriod != null && {
      PeriodOverPeriod: se_PeriodOverPeriodComputation(input.PeriodOverPeriod, context),
    }),
    ...(input.PeriodToDate != null && { PeriodToDate: se_PeriodToDateComputation(input.PeriodToDate, context) }),
    ...(input.TopBottomMovers != null && {
      TopBottomMovers: se_TopBottomMoversComputation(input.TopBottomMovers, context),
    }),
    ...(input.TopBottomRanked != null && {
      TopBottomRanked: se_TopBottomRankedComputation(input.TopBottomRanked, context),
    }),
    ...(input.TotalAggregation != null && {
      TotalAggregation: se_TotalAggregationComputation(input.TotalAggregation, context),
    }),
    ...(input.UniqueValues != null && { UniqueValues: se_UniqueValuesComputation(input.UniqueValues, context) }),
  };
};

/**
 * serializeAws_restJson1ComputationList
 */
const se_ComputationList = (input: Computation[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_Computation(entry, context);
    });
};

/**
 * serializeAws_restJson1ConditionalFormattingColor
 */
const se_ConditionalFormattingColor = (input: ConditionalFormattingColor, context: __SerdeContext): any => {
  return {
    ...(input.Gradient != null && { Gradient: se_ConditionalFormattingGradientColor(input.Gradient, context) }),
    ...(input.Solid != null && { Solid: se_ConditionalFormattingSolidColor(input.Solid, context) }),
  };
};

/**
 * serializeAws_restJson1ConditionalFormattingCustomIconCondition
 */
const se_ConditionalFormattingCustomIconCondition = (
  input: ConditionalFormattingCustomIconCondition,
  context: __SerdeContext
): any => {
  return {
    ...(input.Color != null && { Color: input.Color }),
    ...(input.DisplayConfiguration != null && {
      DisplayConfiguration: se_ConditionalFormattingIconDisplayConfiguration(input.DisplayConfiguration, context),
    }),
    ...(input.Expression != null && { Expression: input.Expression }),
    ...(input.IconOptions != null && {
      IconOptions: se_ConditionalFormattingCustomIconOptions(input.IconOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1ConditionalFormattingCustomIconOptions
 */
const se_ConditionalFormattingCustomIconOptions = (
  input: ConditionalFormattingCustomIconOptions,
  context: __SerdeContext
): any => {
  return {
    ...(input.Icon != null && { Icon: input.Icon }),
    ...(input.UnicodeIcon != null && { UnicodeIcon: input.UnicodeIcon }),
  };
};

/**
 * serializeAws_restJson1ConditionalFormattingGradientColor
 */
const se_ConditionalFormattingGradientColor = (
  input: ConditionalFormattingGradientColor,
  context: __SerdeContext
): any => {
  return {
    ...(input.Color != null && { Color: se_GradientColor(input.Color, context) }),
    ...(input.Expression != null && { Expression: input.Expression }),
  };
};

/**
 * serializeAws_restJson1ConditionalFormattingIcon
 */
const se_ConditionalFormattingIcon = (input: ConditionalFormattingIcon, context: __SerdeContext): any => {
  return {
    ...(input.CustomCondition != null && {
      CustomCondition: se_ConditionalFormattingCustomIconCondition(input.CustomCondition, context),
    }),
    ...(input.IconSet != null && { IconSet: se_ConditionalFormattingIconSet(input.IconSet, context) }),
  };
};

/**
 * serializeAws_restJson1ConditionalFormattingIconDisplayConfiguration
 */
const se_ConditionalFormattingIconDisplayConfiguration = (
  input: ConditionalFormattingIconDisplayConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.IconDisplayOption != null && { IconDisplayOption: input.IconDisplayOption }),
  };
};

/**
 * serializeAws_restJson1ConditionalFormattingIconSet
 */
const se_ConditionalFormattingIconSet = (input: ConditionalFormattingIconSet, context: __SerdeContext): any => {
  return {
    ...(input.Expression != null && { Expression: input.Expression }),
    ...(input.IconSetType != null && { IconSetType: input.IconSetType }),
  };
};

/**
 * serializeAws_restJson1ConditionalFormattingSolidColor
 */
const se_ConditionalFormattingSolidColor = (input: ConditionalFormattingSolidColor, context: __SerdeContext): any => {
  return {
    ...(input.Color != null && { Color: input.Color }),
    ...(input.Expression != null && { Expression: input.Expression }),
  };
};

/**
 * serializeAws_restJson1ContributionAnalysisDefault
 */
const se_ContributionAnalysisDefault = (input: ContributionAnalysisDefault, context: __SerdeContext): any => {
  return {
    ...(input.ContributorDimensions != null && {
      ContributorDimensions: se_ContributorDimensionList(input.ContributorDimensions, context),
    }),
    ...(input.MeasureFieldId != null && { MeasureFieldId: input.MeasureFieldId }),
  };
};

/**
 * serializeAws_restJson1ContributionAnalysisDefaultList
 */
const se_ContributionAnalysisDefaultList = (input: ContributionAnalysisDefault[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ContributionAnalysisDefault(entry, context);
    });
};

/**
 * serializeAws_restJson1ContributorDimensionList
 */
const se_ContributorDimensionList = (input: ColumnIdentifier[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ColumnIdentifier(entry, context);
    });
};

/**
 * serializeAws_restJson1CreateColumnsOperation
 */
const se_CreateColumnsOperation = (input: CreateColumnsOperation, context: __SerdeContext): any => {
  return {
    ...(input.Columns != null && { Columns: se_CalculatedColumnList(input.Columns, context) }),
  };
};

/**
 * serializeAws_restJson1CredentialPair
 */
const se_CredentialPair = (input: CredentialPair, context: __SerdeContext): any => {
  return {
    ...(input.AlternateDataSourceParameters != null && {
      AlternateDataSourceParameters: se_DataSourceParametersList(input.AlternateDataSourceParameters, context),
    }),
    ...(input.Password != null && { Password: input.Password }),
    ...(input.Username != null && { Username: input.Username }),
  };
};

/**
 * serializeAws_restJson1CurrencyDisplayFormatConfiguration
 */
const se_CurrencyDisplayFormatConfiguration = (
  input: CurrencyDisplayFormatConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.DecimalPlacesConfiguration != null && {
      DecimalPlacesConfiguration: se_DecimalPlacesConfiguration(input.DecimalPlacesConfiguration, context),
    }),
    ...(input.NegativeValueConfiguration != null && {
      NegativeValueConfiguration: se_NegativeValueConfiguration(input.NegativeValueConfiguration, context),
    }),
    ...(input.NullValueFormatConfiguration != null && {
      NullValueFormatConfiguration: se_NullValueFormatConfiguration(input.NullValueFormatConfiguration, context),
    }),
    ...(input.NumberScale != null && { NumberScale: input.NumberScale }),
    ...(input.Prefix != null && { Prefix: input.Prefix }),
    ...(input.SeparatorConfiguration != null && {
      SeparatorConfiguration: se_NumericSeparatorConfiguration(input.SeparatorConfiguration, context),
    }),
    ...(input.Suffix != null && { Suffix: input.Suffix }),
    ...(input.Symbol != null && { Symbol: input.Symbol }),
  };
};

/**
 * serializeAws_restJson1CustomActionFilterOperation
 */
const se_CustomActionFilterOperation = (input: CustomActionFilterOperation, context: __SerdeContext): any => {
  return {
    ...(input.SelectedFieldsConfiguration != null && {
      SelectedFieldsConfiguration: se_FilterOperationSelectedFieldsConfiguration(
        input.SelectedFieldsConfiguration,
        context
      ),
    }),
    ...(input.TargetVisualsConfiguration != null && {
      TargetVisualsConfiguration: se_FilterOperationTargetVisualsConfiguration(
        input.TargetVisualsConfiguration,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1CustomActionNavigationOperation
 */
const se_CustomActionNavigationOperation = (input: CustomActionNavigationOperation, context: __SerdeContext): any => {
  return {
    ...(input.LocalNavigationConfiguration != null && {
      LocalNavigationConfiguration: se_LocalNavigationConfiguration(input.LocalNavigationConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1CustomActionSetParametersOperation
 */
const se_CustomActionSetParametersOperation = (
  input: CustomActionSetParametersOperation,
  context: __SerdeContext
): any => {
  return {
    ...(input.ParameterValueConfigurations != null && {
      ParameterValueConfigurations: se_SetParameterValueConfigurationList(input.ParameterValueConfigurations, context),
    }),
  };
};

/**
 * serializeAws_restJson1CustomActionURLOperation
 */
const se_CustomActionURLOperation = (input: CustomActionURLOperation, context: __SerdeContext): any => {
  return {
    ...(input.URLTarget != null && { URLTarget: input.URLTarget }),
    ...(input.URLTemplate != null && { URLTemplate: input.URLTemplate }),
  };
};

/**
 * serializeAws_restJson1CustomContentConfiguration
 */
const se_CustomContentConfiguration = (input: CustomContentConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.ContentType != null && { ContentType: input.ContentType }),
    ...(input.ContentUrl != null && { ContentUrl: input.ContentUrl }),
    ...(input.ImageScaling != null && { ImageScaling: input.ImageScaling }),
  };
};

/**
 * serializeAws_restJson1CustomContentVisual
 */
const se_CustomContentVisual = (input: CustomContentVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_CustomContentConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.DataSetIdentifier != null && { DataSetIdentifier: input.DataSetIdentifier }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1CustomFilterConfiguration
 */
const se_CustomFilterConfiguration = (input: CustomFilterConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryValue != null && { CategoryValue: input.CategoryValue }),
    ...(input.MatchOperator != null && { MatchOperator: input.MatchOperator }),
    ...(input.NullOption != null && { NullOption: input.NullOption }),
    ...(input.ParameterName != null && { ParameterName: input.ParameterName }),
    ...(input.SelectAllOptions != null && { SelectAllOptions: input.SelectAllOptions }),
  };
};

/**
 * serializeAws_restJson1CustomFilterListConfiguration
 */
const se_CustomFilterListConfiguration = (input: CustomFilterListConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryValues != null && { CategoryValues: se_CategoryValueList(input.CategoryValues, context) }),
    ...(input.MatchOperator != null && { MatchOperator: input.MatchOperator }),
    ...(input.NullOption != null && { NullOption: input.NullOption }),
    ...(input.SelectAllOptions != null && { SelectAllOptions: input.SelectAllOptions }),
  };
};

/**
 * serializeAws_restJson1CustomNarrativeOptions
 */
const se_CustomNarrativeOptions = (input: CustomNarrativeOptions, context: __SerdeContext): any => {
  return {
    ...(input.Narrative != null && { Narrative: input.Narrative }),
  };
};

/**
 * serializeAws_restJson1CustomParameterValues
 */
const se_CustomParameterValues = (input: CustomParameterValues, context: __SerdeContext): any => {
  return {
    ...(input.DateTimeValues != null && { DateTimeValues: se_DateTimeDefaultValueList(input.DateTimeValues, context) }),
    ...(input.DecimalValues != null && { DecimalValues: se_DecimalDefaultValueList(input.DecimalValues, context) }),
    ...(input.IntegerValues != null && { IntegerValues: se_IntegerDefaultValueList(input.IntegerValues, context) }),
    ...(input.StringValues != null && { StringValues: se_StringDefaultValueList(input.StringValues, context) }),
  };
};

/**
 * serializeAws_restJson1CustomSql
 */
const se_CustomSql = (input: CustomSql, context: __SerdeContext): any => {
  return {
    ...(input.Columns != null && { Columns: se_InputColumnList(input.Columns, context) }),
    ...(input.DataSourceArn != null && { DataSourceArn: input.DataSourceArn }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.SqlQuery != null && { SqlQuery: input.SqlQuery }),
  };
};

/**
 * serializeAws_restJson1CustomValuesConfiguration
 */
const se_CustomValuesConfiguration = (input: CustomValuesConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CustomValues != null && { CustomValues: se_CustomParameterValues(input.CustomValues, context) }),
    ...(input.IncludeNullValue != null && { IncludeNullValue: input.IncludeNullValue }),
  };
};

/**
 * serializeAws_restJson1DashboardPublishOptions
 */
const se_DashboardPublishOptions = (input: DashboardPublishOptions, context: __SerdeContext): any => {
  return {
    ...(input.AdHocFilteringOption != null && {
      AdHocFilteringOption: se_AdHocFilteringOption(input.AdHocFilteringOption, context),
    }),
    ...(input.DataPointDrillUpDownOption != null && {
      DataPointDrillUpDownOption: se_DataPointDrillUpDownOption(input.DataPointDrillUpDownOption, context),
    }),
    ...(input.DataPointMenuLabelOption != null && {
      DataPointMenuLabelOption: se_DataPointMenuLabelOption(input.DataPointMenuLabelOption, context),
    }),
    ...(input.DataPointTooltipOption != null && {
      DataPointTooltipOption: se_DataPointTooltipOption(input.DataPointTooltipOption, context),
    }),
    ...(input.ExportToCSVOption != null && {
      ExportToCSVOption: se_ExportToCSVOption(input.ExportToCSVOption, context),
    }),
    ...(input.ExportWithHiddenFieldsOption != null && {
      ExportWithHiddenFieldsOption: se_ExportWithHiddenFieldsOption(input.ExportWithHiddenFieldsOption, context),
    }),
    ...(input.SheetControlsOption != null && {
      SheetControlsOption: se_SheetControlsOption(input.SheetControlsOption, context),
    }),
    ...(input.SheetLayoutElementMaximizationOption != null && {
      SheetLayoutElementMaximizationOption: se_SheetLayoutElementMaximizationOption(
        input.SheetLayoutElementMaximizationOption,
        context
      ),
    }),
    ...(input.VisualAxisSortOption != null && {
      VisualAxisSortOption: se_VisualAxisSortOption(input.VisualAxisSortOption, context),
    }),
    ...(input.VisualMenuOption != null && { VisualMenuOption: se_VisualMenuOption(input.VisualMenuOption, context) }),
    ...(input.VisualPublishOptions != null && {
      VisualPublishOptions: se_DashboardVisualPublishOptions(input.VisualPublishOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1DashboardSearchFilter
 */
const se_DashboardSearchFilter = (input: DashboardSearchFilter, context: __SerdeContext): any => {
  return {
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Operator != null && { Operator: input.Operator }),
    ...(input.Value != null && { Value: input.Value }),
  };
};

/**
 * serializeAws_restJson1DashboardSearchFilterList
 */
const se_DashboardSearchFilterList = (input: DashboardSearchFilter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DashboardSearchFilter(entry, context);
    });
};

/**
 * serializeAws_restJson1DashboardSourceEntity
 */
const se_DashboardSourceEntity = (input: DashboardSourceEntity, context: __SerdeContext): any => {
  return {
    ...(input.SourceTemplate != null && { SourceTemplate: se_DashboardSourceTemplate(input.SourceTemplate, context) }),
  };
};

/**
 * serializeAws_restJson1DashboardSourceTemplate
 */
const se_DashboardSourceTemplate = (input: DashboardSourceTemplate, context: __SerdeContext): any => {
  return {
    ...(input.Arn != null && { Arn: input.Arn }),
    ...(input.DataSetReferences != null && {
      DataSetReferences: se_DataSetReferenceList(input.DataSetReferences, context),
    }),
  };
};

/**
 * serializeAws_restJson1DashboardVersionDefinition
 */
const se_DashboardVersionDefinition = (input: DashboardVersionDefinition, context: __SerdeContext): any => {
  return {
    ...(input.AnalysisDefaults != null && { AnalysisDefaults: se_AnalysisDefaults(input.AnalysisDefaults, context) }),
    ...(input.CalculatedFields != null && { CalculatedFields: se_CalculatedFields(input.CalculatedFields, context) }),
    ...(input.ColumnConfigurations != null && {
      ColumnConfigurations: se_ColumnConfigurationList(input.ColumnConfigurations, context),
    }),
    ...(input.DataSetIdentifierDeclarations != null && {
      DataSetIdentifierDeclarations: se_DataSetIdentifierDeclarationList(input.DataSetIdentifierDeclarations, context),
    }),
    ...(input.FilterGroups != null && { FilterGroups: se_FilterGroupList(input.FilterGroups, context) }),
    ...(input.ParameterDeclarations != null && {
      ParameterDeclarations: se_ParameterDeclarationList(input.ParameterDeclarations, context),
    }),
    ...(input.Sheets != null && { Sheets: se_SheetDefinitionList(input.Sheets, context) }),
  };
};

/**
 * serializeAws_restJson1DashboardVisualId
 */
const se_DashboardVisualId = (input: DashboardVisualId, context: __SerdeContext): any => {
  return {
    ...(input.DashboardId != null && { DashboardId: input.DashboardId }),
    ...(input.SheetId != null && { SheetId: input.SheetId }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1DashboardVisualPublishOptions
 */
const se_DashboardVisualPublishOptions = (input: DashboardVisualPublishOptions, context: __SerdeContext): any => {
  return {
    ...(input.ExportHiddenFieldsOption != null && {
      ExportHiddenFieldsOption: se_ExportHiddenFieldsOption(input.ExportHiddenFieldsOption, context),
    }),
  };
};

/**
 * serializeAws_restJson1DataBarsOptions
 */
const se_DataBarsOptions = (input: DataBarsOptions, context: __SerdeContext): any => {
  return {
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.NegativeColor != null && { NegativeColor: input.NegativeColor }),
    ...(input.PositiveColor != null && { PositiveColor: input.PositiveColor }),
  };
};

/**
 * serializeAws_restJson1DatabricksParameters
 */
const se_DatabricksParameters = (input: DatabricksParameters, context: __SerdeContext): any => {
  return {
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Port != null && { Port: input.Port }),
    ...(input.SqlEndpointPath != null && { SqlEndpointPath: input.SqlEndpointPath }),
  };
};

/**
 * serializeAws_restJson1DataColor
 */
const se_DataColor = (input: DataColor, context: __SerdeContext): any => {
  return {
    ...(input.Color != null && { Color: input.Color }),
    ...(input.DataValue != null && { DataValue: __serializeFloat(input.DataValue) }),
  };
};

/**
 * serializeAws_restJson1DataColorPalette
 */
const se_DataColorPalette = (input: DataColorPalette, context: __SerdeContext): any => {
  return {
    ...(input.Colors != null && { Colors: se_ColorList(input.Colors, context) }),
    ...(input.EmptyFillColor != null && { EmptyFillColor: input.EmptyFillColor }),
    ...(input.MinMaxGradient != null && { MinMaxGradient: se_ColorList(input.MinMaxGradient, context) }),
  };
};

/**
 * serializeAws_restJson1DataFieldSeriesItem
 */
const se_DataFieldSeriesItem = (input: DataFieldSeriesItem, context: __SerdeContext): any => {
  return {
    ...(input.AxisBinding != null && { AxisBinding: input.AxisBinding }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.FieldValue != null && { FieldValue: input.FieldValue }),
    ...(input.Settings != null && { Settings: se_LineChartSeriesSettings(input.Settings, context) }),
  };
};

/**
 * serializeAws_restJson1DataLabelOptions
 */
const se_DataLabelOptions = (input: DataLabelOptions, context: __SerdeContext): any => {
  return {
    ...(input.CategoryLabelVisibility != null && { CategoryLabelVisibility: input.CategoryLabelVisibility }),
    ...(input.DataLabelTypes != null && { DataLabelTypes: se_DataLabelTypes(input.DataLabelTypes, context) }),
    ...(input.LabelColor != null && { LabelColor: input.LabelColor }),
    ...(input.LabelContent != null && { LabelContent: input.LabelContent }),
    ...(input.LabelFontConfiguration != null && {
      LabelFontConfiguration: se_FontConfiguration(input.LabelFontConfiguration, context),
    }),
    ...(input.MeasureLabelVisibility != null && { MeasureLabelVisibility: input.MeasureLabelVisibility }),
    ...(input.Overlap != null && { Overlap: input.Overlap }),
    ...(input.Position != null && { Position: input.Position }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1DataLabelType
 */
const se_DataLabelType = (input: DataLabelType, context: __SerdeContext): any => {
  return {
    ...(input.DataPathLabelType != null && {
      DataPathLabelType: se_DataPathLabelType(input.DataPathLabelType, context),
    }),
    ...(input.FieldLabelType != null && { FieldLabelType: se_FieldLabelType(input.FieldLabelType, context) }),
    ...(input.MaximumLabelType != null && { MaximumLabelType: se_MaximumLabelType(input.MaximumLabelType, context) }),
    ...(input.MinimumLabelType != null && { MinimumLabelType: se_MinimumLabelType(input.MinimumLabelType, context) }),
    ...(input.RangeEndsLabelType != null && {
      RangeEndsLabelType: se_RangeEndsLabelType(input.RangeEndsLabelType, context),
    }),
  };
};

/**
 * serializeAws_restJson1DataLabelTypes
 */
const se_DataLabelTypes = (input: DataLabelType[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DataLabelType(entry, context);
    });
};

/**
 * serializeAws_restJson1DataPathColor
 */
const se_DataPathColor = (input: DataPathColor, context: __SerdeContext): any => {
  return {
    ...(input.Color != null && { Color: input.Color }),
    ...(input.Element != null && { Element: se_DataPathValue(input.Element, context) }),
    ...(input.TimeGranularity != null && { TimeGranularity: input.TimeGranularity }),
  };
};

/**
 * serializeAws_restJson1DataPathColorList
 */
const se_DataPathColorList = (input: DataPathColor[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DataPathColor(entry, context);
    });
};

/**
 * serializeAws_restJson1DataPathLabelType
 */
const se_DataPathLabelType = (input: DataPathLabelType, context: __SerdeContext): any => {
  return {
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.FieldValue != null && { FieldValue: input.FieldValue }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1DataPathSort
 */
const se_DataPathSort = (input: DataPathSort, context: __SerdeContext): any => {
  return {
    ...(input.Direction != null && { Direction: input.Direction }),
    ...(input.SortPaths != null && { SortPaths: se_DataPathValueList(input.SortPaths, context) }),
  };
};

/**
 * serializeAws_restJson1DataPathValue
 */
const se_DataPathValue = (input: DataPathValue, context: __SerdeContext): any => {
  return {
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.FieldValue != null && { FieldValue: input.FieldValue }),
  };
};

/**
 * serializeAws_restJson1DataPathValueList
 */
const se_DataPathValueList = (input: DataPathValue[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DataPathValue(entry, context);
    });
};

/**
 * serializeAws_restJson1DataPointDrillUpDownOption
 */
const se_DataPointDrillUpDownOption = (input: DataPointDrillUpDownOption, context: __SerdeContext): any => {
  return {
    ...(input.AvailabilityStatus != null && { AvailabilityStatus: input.AvailabilityStatus }),
  };
};

/**
 * serializeAws_restJson1DataPointMenuLabelOption
 */
const se_DataPointMenuLabelOption = (input: DataPointMenuLabelOption, context: __SerdeContext): any => {
  return {
    ...(input.AvailabilityStatus != null && { AvailabilityStatus: input.AvailabilityStatus }),
  };
};

/**
 * serializeAws_restJson1DataPointTooltipOption
 */
const se_DataPointTooltipOption = (input: DataPointTooltipOption, context: __SerdeContext): any => {
  return {
    ...(input.AvailabilityStatus != null && { AvailabilityStatus: input.AvailabilityStatus }),
  };
};

/**
 * serializeAws_restJson1DataSetConfiguration
 */
const se_DataSetConfiguration = (input: DataSetConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.ColumnGroupSchemaList != null && {
      ColumnGroupSchemaList: se_ColumnGroupSchemaList(input.ColumnGroupSchemaList, context),
    }),
    ...(input.DataSetSchema != null && { DataSetSchema: se_DataSetSchema(input.DataSetSchema, context) }),
    ...(input.Placeholder != null && { Placeholder: input.Placeholder }),
  };
};

/**
 * serializeAws_restJson1DataSetConfigurationList
 */
const se_DataSetConfigurationList = (input: DataSetConfiguration[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DataSetConfiguration(entry, context);
    });
};

/**
 * serializeAws_restJson1DataSetIdentifierDeclaration
 */
const se_DataSetIdentifierDeclaration = (input: DataSetIdentifierDeclaration, context: __SerdeContext): any => {
  return {
    ...(input.DataSetArn != null && { DataSetArn: input.DataSetArn }),
    ...(input.Identifier != null && { Identifier: input.Identifier }),
  };
};

/**
 * serializeAws_restJson1DataSetIdentifierDeclarationList
 */
const se_DataSetIdentifierDeclarationList = (input: DataSetIdentifierDeclaration[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DataSetIdentifierDeclaration(entry, context);
    });
};

/**
 * serializeAws_restJson1DataSetReference
 */
const se_DataSetReference = (input: DataSetReference, context: __SerdeContext): any => {
  return {
    ...(input.DataSetArn != null && { DataSetArn: input.DataSetArn }),
    ...(input.DataSetPlaceholder != null && { DataSetPlaceholder: input.DataSetPlaceholder }),
  };
};

/**
 * serializeAws_restJson1DataSetReferenceList
 */
const se_DataSetReferenceList = (input: DataSetReference[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DataSetReference(entry, context);
    });
};

/**
 * serializeAws_restJson1DataSetSchema
 */
const se_DataSetSchema = (input: DataSetSchema, context: __SerdeContext): any => {
  return {
    ...(input.ColumnSchemaList != null && { ColumnSchemaList: se_ColumnSchemaList(input.ColumnSchemaList, context) }),
  };
};

/**
 * serializeAws_restJson1DataSetSearchFilter
 */
const se_DataSetSearchFilter = (input: DataSetSearchFilter, context: __SerdeContext): any => {
  return {
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Operator != null && { Operator: input.Operator }),
    ...(input.Value != null && { Value: input.Value }),
  };
};

/**
 * serializeAws_restJson1DataSetSearchFilterList
 */
const se_DataSetSearchFilterList = (input: DataSetSearchFilter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DataSetSearchFilter(entry, context);
    });
};

/**
 * serializeAws_restJson1DataSetUsageConfiguration
 */
const se_DataSetUsageConfiguration = (input: DataSetUsageConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DisableUseAsDirectQuerySource != null && {
      DisableUseAsDirectQuerySource: input.DisableUseAsDirectQuerySource,
    }),
    ...(input.DisableUseAsImportedSource != null && { DisableUseAsImportedSource: input.DisableUseAsImportedSource }),
  };
};

/**
 * serializeAws_restJson1DataSourceCredentials
 */
const se_DataSourceCredentials = (input: DataSourceCredentials, context: __SerdeContext): any => {
  return {
    ...(input.CopySourceArn != null && { CopySourceArn: input.CopySourceArn }),
    ...(input.CredentialPair != null && { CredentialPair: se_CredentialPair(input.CredentialPair, context) }),
    ...(input.SecretArn != null && { SecretArn: input.SecretArn }),
  };
};

/**
 * serializeAws_restJson1DataSourceParameters
 */
const se_DataSourceParameters = (input: DataSourceParameters, context: __SerdeContext): any => {
  return DataSourceParameters.visit(input, {
    AmazonElasticsearchParameters: (value) => ({
      AmazonElasticsearchParameters: se_AmazonElasticsearchParameters(value, context),
    }),
    AmazonOpenSearchParameters: (value) => ({
      AmazonOpenSearchParameters: se_AmazonOpenSearchParameters(value, context),
    }),
    AthenaParameters: (value) => ({ AthenaParameters: se_AthenaParameters(value, context) }),
    AuroraParameters: (value) => ({ AuroraParameters: se_AuroraParameters(value, context) }),
    AuroraPostgreSqlParameters: (value) => ({
      AuroraPostgreSqlParameters: se_AuroraPostgreSqlParameters(value, context),
    }),
    AwsIotAnalyticsParameters: (value) => ({ AwsIotAnalyticsParameters: se_AwsIotAnalyticsParameters(value, context) }),
    DatabricksParameters: (value) => ({ DatabricksParameters: se_DatabricksParameters(value, context) }),
    ExasolParameters: (value) => ({ ExasolParameters: se_ExasolParameters(value, context) }),
    JiraParameters: (value) => ({ JiraParameters: se_JiraParameters(value, context) }),
    MariaDbParameters: (value) => ({ MariaDbParameters: se_MariaDbParameters(value, context) }),
    MySqlParameters: (value) => ({ MySqlParameters: se_MySqlParameters(value, context) }),
    OracleParameters: (value) => ({ OracleParameters: se_OracleParameters(value, context) }),
    PostgreSqlParameters: (value) => ({ PostgreSqlParameters: se_PostgreSqlParameters(value, context) }),
    PrestoParameters: (value) => ({ PrestoParameters: se_PrestoParameters(value, context) }),
    RdsParameters: (value) => ({ RdsParameters: se_RdsParameters(value, context) }),
    RedshiftParameters: (value) => ({ RedshiftParameters: se_RedshiftParameters(value, context) }),
    S3Parameters: (value) => ({ S3Parameters: se_S3Parameters(value, context) }),
    ServiceNowParameters: (value) => ({ ServiceNowParameters: se_ServiceNowParameters(value, context) }),
    SnowflakeParameters: (value) => ({ SnowflakeParameters: se_SnowflakeParameters(value, context) }),
    SparkParameters: (value) => ({ SparkParameters: se_SparkParameters(value, context) }),
    SqlServerParameters: (value) => ({ SqlServerParameters: se_SqlServerParameters(value, context) }),
    TeradataParameters: (value) => ({ TeradataParameters: se_TeradataParameters(value, context) }),
    TwitterParameters: (value) => ({ TwitterParameters: se_TwitterParameters(value, context) }),
    _: (name, value) => ({ name: value } as any),
  });
};

/**
 * serializeAws_restJson1DataSourceParametersList
 */
const se_DataSourceParametersList = (input: DataSourceParameters[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DataSourceParameters(entry, context);
    });
};

/**
 * serializeAws_restJson1DataSourceSearchFilter
 */
const se_DataSourceSearchFilter = (input: DataSourceSearchFilter, context: __SerdeContext): any => {
  return {
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Operator != null && { Operator: input.Operator }),
    ...(input.Value != null && { Value: input.Value }),
  };
};

/**
 * serializeAws_restJson1DataSourceSearchFilterList
 */
const se_DataSourceSearchFilterList = (input: DataSourceSearchFilter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DataSourceSearchFilter(entry, context);
    });
};

/**
 * serializeAws_restJson1DateAxisOptions
 */
const se_DateAxisOptions = (input: DateAxisOptions, context: __SerdeContext): any => {
  return {
    ...(input.MissingDateVisibility != null && { MissingDateVisibility: input.MissingDateVisibility }),
  };
};

/**
 * serializeAws_restJson1DateDimensionField
 */
const se_DateDimensionField = (input: DateDimensionField, context: __SerdeContext): any => {
  return {
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.DateGranularity != null && { DateGranularity: input.DateGranularity }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.FormatConfiguration != null && {
      FormatConfiguration: se_DateTimeFormatConfiguration(input.FormatConfiguration, context),
    }),
    ...(input.HierarchyId != null && { HierarchyId: input.HierarchyId }),
  };
};

/**
 * serializeAws_restJson1DateMeasureField
 */
const se_DateMeasureField = (input: DateMeasureField, context: __SerdeContext): any => {
  return {
    ...(input.AggregationFunction != null && { AggregationFunction: input.AggregationFunction }),
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.FormatConfiguration != null && {
      FormatConfiguration: se_DateTimeFormatConfiguration(input.FormatConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1DateTimeDefaultValueList
 */
const se_DateTimeDefaultValueList = (input: Date[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return Math.round(entry.getTime() / 1000);
    });
};

/**
 * serializeAws_restJson1DateTimeDefaultValues
 */
const se_DateTimeDefaultValues = (input: DateTimeDefaultValues, context: __SerdeContext): any => {
  return {
    ...(input.DynamicValue != null && { DynamicValue: se_DynamicDefaultValue(input.DynamicValue, context) }),
    ...(input.RollingDate != null && { RollingDate: se_RollingDateConfiguration(input.RollingDate, context) }),
    ...(input.StaticValues != null && { StaticValues: se_DateTimeDefaultValueList(input.StaticValues, context) }),
  };
};

/**
 * serializeAws_restJson1DateTimeFormatConfiguration
 */
const se_DateTimeFormatConfiguration = (input: DateTimeFormatConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DateTimeFormat != null && { DateTimeFormat: input.DateTimeFormat }),
    ...(input.NullValueFormatConfiguration != null && {
      NullValueFormatConfiguration: se_NullValueFormatConfiguration(input.NullValueFormatConfiguration, context),
    }),
    ...(input.NumericFormatConfiguration != null && {
      NumericFormatConfiguration: se_NumericFormatConfiguration(input.NumericFormatConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1DateTimeHierarchy
 */
const se_DateTimeHierarchy = (input: DateTimeHierarchy, context: __SerdeContext): any => {
  return {
    ...(input.DrillDownFilters != null && {
      DrillDownFilters: se_DrillDownFilterList(input.DrillDownFilters, context),
    }),
    ...(input.HierarchyId != null && { HierarchyId: input.HierarchyId }),
  };
};

/**
 * serializeAws_restJson1DateTimeParameter
 */
const se_DateTimeParameter = (input: DateTimeParameter, context: __SerdeContext): any => {
  return {
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Values != null && { Values: se_SensitiveTimestampList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1DateTimeParameterDeclaration
 */
const se_DateTimeParameterDeclaration = (input: DateTimeParameterDeclaration, context: __SerdeContext): any => {
  return {
    ...(input.DefaultValues != null && { DefaultValues: se_DateTimeDefaultValues(input.DefaultValues, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.TimeGranularity != null && { TimeGranularity: input.TimeGranularity }),
    ...(input.ValueWhenUnset != null && {
      ValueWhenUnset: se_DateTimeValueWhenUnsetConfiguration(input.ValueWhenUnset, context),
    }),
  };
};

/**
 * serializeAws_restJson1DateTimeParameterList
 */
const se_DateTimeParameterList = (input: DateTimeParameter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DateTimeParameter(entry, context);
    });
};

/**
 * serializeAws_restJson1DateTimePickerControlDisplayOptions
 */
const se_DateTimePickerControlDisplayOptions = (
  input: DateTimePickerControlDisplayOptions,
  context: __SerdeContext
): any => {
  return {
    ...(input.DateTimeFormat != null && { DateTimeFormat: input.DateTimeFormat }),
    ...(input.TitleOptions != null && { TitleOptions: se_LabelOptions(input.TitleOptions, context) }),
  };
};

/**
 * serializeAws_restJson1DateTimeValueWhenUnsetConfiguration
 */
const se_DateTimeValueWhenUnsetConfiguration = (
  input: DateTimeValueWhenUnsetConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.CustomValue != null && { CustomValue: Math.round(input.CustomValue.getTime() / 1000) }),
    ...(input.ValueWhenUnsetOption != null && { ValueWhenUnsetOption: input.ValueWhenUnsetOption }),
  };
};

/**
 * serializeAws_restJson1DecimalDefaultValueList
 */
const se_DecimalDefaultValueList = (input: number[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return __serializeFloat(entry);
    });
};

/**
 * serializeAws_restJson1DecimalDefaultValues
 */
const se_DecimalDefaultValues = (input: DecimalDefaultValues, context: __SerdeContext): any => {
  return {
    ...(input.DynamicValue != null && { DynamicValue: se_DynamicDefaultValue(input.DynamicValue, context) }),
    ...(input.StaticValues != null && { StaticValues: se_DecimalDefaultValueList(input.StaticValues, context) }),
  };
};

/**
 * serializeAws_restJson1DecimalParameter
 */
const se_DecimalParameter = (input: DecimalParameter, context: __SerdeContext): any => {
  return {
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Values != null && { Values: se_SensitiveDoubleList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1DecimalParameterDeclaration
 */
const se_DecimalParameterDeclaration = (input: DecimalParameterDeclaration, context: __SerdeContext): any => {
  return {
    ...(input.DefaultValues != null && { DefaultValues: se_DecimalDefaultValues(input.DefaultValues, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.ParameterValueType != null && { ParameterValueType: input.ParameterValueType }),
    ...(input.ValueWhenUnset != null && {
      ValueWhenUnset: se_DecimalValueWhenUnsetConfiguration(input.ValueWhenUnset, context),
    }),
  };
};

/**
 * serializeAws_restJson1DecimalParameterList
 */
const se_DecimalParameterList = (input: DecimalParameter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DecimalParameter(entry, context);
    });
};

/**
 * serializeAws_restJson1DecimalPlacesConfiguration
 */
const se_DecimalPlacesConfiguration = (input: DecimalPlacesConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DecimalPlaces != null && { DecimalPlaces: input.DecimalPlaces }),
  };
};

/**
 * serializeAws_restJson1DecimalValueWhenUnsetConfiguration
 */
const se_DecimalValueWhenUnsetConfiguration = (
  input: DecimalValueWhenUnsetConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.CustomValue != null && { CustomValue: __serializeFloat(input.CustomValue) }),
    ...(input.ValueWhenUnsetOption != null && { ValueWhenUnsetOption: input.ValueWhenUnsetOption }),
  };
};

/**
 * serializeAws_restJson1DefaultFreeFormLayoutConfiguration
 */
const se_DefaultFreeFormLayoutConfiguration = (
  input: DefaultFreeFormLayoutConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.CanvasSizeOptions != null && {
      CanvasSizeOptions: se_FreeFormLayoutCanvasSizeOptions(input.CanvasSizeOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1DefaultGridLayoutConfiguration
 */
const se_DefaultGridLayoutConfiguration = (input: DefaultGridLayoutConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CanvasSizeOptions != null && {
      CanvasSizeOptions: se_GridLayoutCanvasSizeOptions(input.CanvasSizeOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1DefaultInteractiveLayoutConfiguration
 */
const se_DefaultInteractiveLayoutConfiguration = (
  input: DefaultInteractiveLayoutConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.FreeForm != null && { FreeForm: se_DefaultFreeFormLayoutConfiguration(input.FreeForm, context) }),
    ...(input.Grid != null && { Grid: se_DefaultGridLayoutConfiguration(input.Grid, context) }),
  };
};

/**
 * serializeAws_restJson1DefaultNewSheetConfiguration
 */
const se_DefaultNewSheetConfiguration = (input: DefaultNewSheetConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.InteractiveLayoutConfiguration != null && {
      InteractiveLayoutConfiguration: se_DefaultInteractiveLayoutConfiguration(
        input.InteractiveLayoutConfiguration,
        context
      ),
    }),
    ...(input.PaginatedLayoutConfiguration != null && {
      PaginatedLayoutConfiguration: se_DefaultPaginatedLayoutConfiguration(input.PaginatedLayoutConfiguration, context),
    }),
    ...(input.SheetContentType != null && { SheetContentType: input.SheetContentType }),
  };
};

/**
 * serializeAws_restJson1DefaultPaginatedLayoutConfiguration
 */
const se_DefaultPaginatedLayoutConfiguration = (
  input: DefaultPaginatedLayoutConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.SectionBased != null && {
      SectionBased: se_DefaultSectionBasedLayoutConfiguration(input.SectionBased, context),
    }),
  };
};

/**
 * serializeAws_restJson1DefaultSectionBasedLayoutConfiguration
 */
const se_DefaultSectionBasedLayoutConfiguration = (
  input: DefaultSectionBasedLayoutConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.CanvasSizeOptions != null && {
      CanvasSizeOptions: se_SectionBasedLayoutCanvasSizeOptions(input.CanvasSizeOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1DestinationParameterValueConfiguration
 */
const se_DestinationParameterValueConfiguration = (
  input: DestinationParameterValueConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.CustomValuesConfiguration != null && {
      CustomValuesConfiguration: se_CustomValuesConfiguration(input.CustomValuesConfiguration, context),
    }),
    ...(input.SelectAllValueOptions != null && { SelectAllValueOptions: input.SelectAllValueOptions }),
    ...(input.SourceField != null && { SourceField: input.SourceField }),
    ...(input.SourceParameterName != null && { SourceParameterName: input.SourceParameterName }),
  };
};

/**
 * serializeAws_restJson1DimensionField
 */
const se_DimensionField = (input: DimensionField, context: __SerdeContext): any => {
  return {
    ...(input.CategoricalDimensionField != null && {
      CategoricalDimensionField: se_CategoricalDimensionField(input.CategoricalDimensionField, context),
    }),
    ...(input.DateDimensionField != null && {
      DateDimensionField: se_DateDimensionField(input.DateDimensionField, context),
    }),
    ...(input.NumericalDimensionField != null && {
      NumericalDimensionField: se_NumericalDimensionField(input.NumericalDimensionField, context),
    }),
  };
};

/**
 * serializeAws_restJson1DimensionFieldList
 */
const se_DimensionFieldList = (input: DimensionField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DimensionField(entry, context);
    });
};

/**
 * serializeAws_restJson1DonutCenterOptions
 */
const se_DonutCenterOptions = (input: DonutCenterOptions, context: __SerdeContext): any => {
  return {
    ...(input.LabelVisibility != null && { LabelVisibility: input.LabelVisibility }),
  };
};

/**
 * serializeAws_restJson1DonutOptions
 */
const se_DonutOptions = (input: DonutOptions, context: __SerdeContext): any => {
  return {
    ...(input.ArcOptions != null && { ArcOptions: se_ArcOptions(input.ArcOptions, context) }),
    ...(input.DonutCenterOptions != null && {
      DonutCenterOptions: se_DonutCenterOptions(input.DonutCenterOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1DrillDownFilter
 */
const se_DrillDownFilter = (input: DrillDownFilter, context: __SerdeContext): any => {
  return {
    ...(input.CategoryFilter != null && { CategoryFilter: se_CategoryDrillDownFilter(input.CategoryFilter, context) }),
    ...(input.NumericEqualityFilter != null && {
      NumericEqualityFilter: se_NumericEqualityDrillDownFilter(input.NumericEqualityFilter, context),
    }),
    ...(input.TimeRangeFilter != null && {
      TimeRangeFilter: se_TimeRangeDrillDownFilter(input.TimeRangeFilter, context),
    }),
  };
};

/**
 * serializeAws_restJson1DrillDownFilterList
 */
const se_DrillDownFilterList = (input: DrillDownFilter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DrillDownFilter(entry, context);
    });
};

/**
 * serializeAws_restJson1DropDownControlDisplayOptions
 */
const se_DropDownControlDisplayOptions = (input: DropDownControlDisplayOptions, context: __SerdeContext): any => {
  return {
    ...(input.SelectAllOptions != null && {
      SelectAllOptions: se_ListControlSelectAllOptions(input.SelectAllOptions, context),
    }),
    ...(input.TitleOptions != null && { TitleOptions: se_LabelOptions(input.TitleOptions, context) }),
  };
};

/**
 * serializeAws_restJson1DynamicDefaultValue
 */
const se_DynamicDefaultValue = (input: DynamicDefaultValue, context: __SerdeContext): any => {
  return {
    ...(input.DefaultValueColumn != null && {
      DefaultValueColumn: se_ColumnIdentifier(input.DefaultValueColumn, context),
    }),
    ...(input.GroupNameColumn != null && { GroupNameColumn: se_ColumnIdentifier(input.GroupNameColumn, context) }),
    ...(input.UserNameColumn != null && { UserNameColumn: se_ColumnIdentifier(input.UserNameColumn, context) }),
  };
};

/**
 * serializeAws_restJson1EmptyVisual
 */
const se_EmptyVisual = (input: EmptyVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.DataSetIdentifier != null && { DataSetIdentifier: input.DataSetIdentifier }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1ExasolParameters
 */
const se_ExasolParameters = (input: ExasolParameters, context: __SerdeContext): any => {
  return {
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Port != null && { Port: input.Port }),
  };
};

/**
 * serializeAws_restJson1ExcludePeriodConfiguration
 */
const se_ExcludePeriodConfiguration = (input: ExcludePeriodConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.Amount != null && { Amount: input.Amount }),
    ...(input.Granularity != null && { Granularity: input.Granularity }),
    ...(input.Status != null && { Status: input.Status }),
  };
};

/**
 * serializeAws_restJson1ExplicitHierarchy
 */
const se_ExplicitHierarchy = (input: ExplicitHierarchy, context: __SerdeContext): any => {
  return {
    ...(input.Columns != null && { Columns: se_ExplicitHierarchyColumnList(input.Columns, context) }),
    ...(input.DrillDownFilters != null && {
      DrillDownFilters: se_DrillDownFilterList(input.DrillDownFilters, context),
    }),
    ...(input.HierarchyId != null && { HierarchyId: input.HierarchyId }),
  };
};

/**
 * serializeAws_restJson1ExplicitHierarchyColumnList
 */
const se_ExplicitHierarchyColumnList = (input: ColumnIdentifier[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ColumnIdentifier(entry, context);
    });
};

/**
 * serializeAws_restJson1ExportHiddenFieldsOption
 */
const se_ExportHiddenFieldsOption = (input: ExportHiddenFieldsOption, context: __SerdeContext): any => {
  return {
    ...(input.AvailabilityStatus != null && { AvailabilityStatus: input.AvailabilityStatus }),
  };
};

/**
 * serializeAws_restJson1ExportToCSVOption
 */
const se_ExportToCSVOption = (input: ExportToCSVOption, context: __SerdeContext): any => {
  return {
    ...(input.AvailabilityStatus != null && { AvailabilityStatus: input.AvailabilityStatus }),
  };
};

/**
 * serializeAws_restJson1ExportWithHiddenFieldsOption
 */
const se_ExportWithHiddenFieldsOption = (input: ExportWithHiddenFieldsOption, context: __SerdeContext): any => {
  return {
    ...(input.AvailabilityStatus != null && { AvailabilityStatus: input.AvailabilityStatus }),
  };
};

/**
 * serializeAws_restJson1FieldBasedTooltip
 */
const se_FieldBasedTooltip = (input: FieldBasedTooltip, context: __SerdeContext): any => {
  return {
    ...(input.AggregationVisibility != null && { AggregationVisibility: input.AggregationVisibility }),
    ...(input.TooltipFields != null && { TooltipFields: se_TooltipItemList(input.TooltipFields, context) }),
    ...(input.TooltipTitleType != null && { TooltipTitleType: input.TooltipTitleType }),
  };
};

/**
 * serializeAws_restJson1FieldFolder
 */
const se_FieldFolder = (input: FieldFolder, context: __SerdeContext): any => {
  return {
    ...(input.columns != null && { columns: se_FolderColumnList(input.columns, context) }),
    ...(input.description != null && { description: input.description }),
  };
};

/**
 * serializeAws_restJson1FieldFolderMap
 */
const se_FieldFolderMap = (input: Record<string, FieldFolder>, context: __SerdeContext): any => {
  return Object.entries(input).reduce((acc: Record<string, any>, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_FieldFolder(value, context);
    return acc;
  }, {});
};

/**
 * serializeAws_restJson1FieldLabelType
 */
const se_FieldLabelType = (input: FieldLabelType, context: __SerdeContext): any => {
  return {
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1FieldOrderList
 */
const se_FieldOrderList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1FieldSeriesItem
 */
const se_FieldSeriesItem = (input: FieldSeriesItem, context: __SerdeContext): any => {
  return {
    ...(input.AxisBinding != null && { AxisBinding: input.AxisBinding }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.Settings != null && { Settings: se_LineChartSeriesSettings(input.Settings, context) }),
  };
};

/**
 * serializeAws_restJson1FieldSort
 */
const se_FieldSort = (input: FieldSort, context: __SerdeContext): any => {
  return {
    ...(input.Direction != null && { Direction: input.Direction }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
  };
};

/**
 * serializeAws_restJson1FieldSortOptions
 */
const se_FieldSortOptions = (input: FieldSortOptions, context: __SerdeContext): any => {
  return {
    ...(input.ColumnSort != null && { ColumnSort: se_ColumnSort(input.ColumnSort, context) }),
    ...(input.FieldSort != null && { FieldSort: se_FieldSort(input.FieldSort, context) }),
  };
};

/**
 * serializeAws_restJson1FieldSortOptionsList
 */
const se_FieldSortOptionsList = (input: FieldSortOptions[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_FieldSortOptions(entry, context);
    });
};

/**
 * serializeAws_restJson1FieldTooltipItem
 */
const se_FieldTooltipItem = (input: FieldTooltipItem, context: __SerdeContext): any => {
  return {
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.Label != null && { Label: input.Label }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1FilledMapAggregatedFieldWells
 */
const se_FilledMapAggregatedFieldWells = (input: FilledMapAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.Geospatial != null && { Geospatial: se_FilledMapDimensionFieldList(input.Geospatial, context) }),
    ...(input.Values != null && { Values: se_FilledMapMeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1FilledMapConditionalFormatting
 */
const se_FilledMapConditionalFormatting = (input: FilledMapConditionalFormatting, context: __SerdeContext): any => {
  return {
    ...(input.ConditionalFormattingOptions != null && {
      ConditionalFormattingOptions: se_FilledMapConditionalFormattingOptionList(
        input.ConditionalFormattingOptions,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1FilledMapConditionalFormattingOption
 */
const se_FilledMapConditionalFormattingOption = (
  input: FilledMapConditionalFormattingOption,
  context: __SerdeContext
): any => {
  return {
    ...(input.Shape != null && { Shape: se_FilledMapShapeConditionalFormatting(input.Shape, context) }),
  };
};

/**
 * serializeAws_restJson1FilledMapConditionalFormattingOptionList
 */
const se_FilledMapConditionalFormattingOptionList = (
  input: FilledMapConditionalFormattingOption[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_FilledMapConditionalFormattingOption(entry, context);
    });
};

/**
 * serializeAws_restJson1FilledMapConfiguration
 */
const se_FilledMapConfiguration = (input: FilledMapConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.FieldWells != null && { FieldWells: se_FilledMapFieldWells(input.FieldWells, context) }),
    ...(input.Legend != null && { Legend: se_LegendOptions(input.Legend, context) }),
    ...(input.MapStyleOptions != null && {
      MapStyleOptions: se_GeospatialMapStyleOptions(input.MapStyleOptions, context),
    }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_FilledMapSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.Tooltip != null && { Tooltip: se_TooltipOptions(input.Tooltip, context) }),
    ...(input.WindowOptions != null && { WindowOptions: se_GeospatialWindowOptions(input.WindowOptions, context) }),
  };
};

/**
 * serializeAws_restJson1FilledMapDimensionFieldList
 */
const se_FilledMapDimensionFieldList = (input: DimensionField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DimensionField(entry, context);
    });
};

/**
 * serializeAws_restJson1FilledMapFieldWells
 */
const se_FilledMapFieldWells = (input: FilledMapFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.FilledMapAggregatedFieldWells != null && {
      FilledMapAggregatedFieldWells: se_FilledMapAggregatedFieldWells(input.FilledMapAggregatedFieldWells, context),
    }),
  };
};

/**
 * serializeAws_restJson1FilledMapMeasureFieldList
 */
const se_FilledMapMeasureFieldList = (input: MeasureField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_MeasureField(entry, context);
    });
};

/**
 * serializeAws_restJson1FilledMapShapeConditionalFormatting
 */
const se_FilledMapShapeConditionalFormatting = (
  input: FilledMapShapeConditionalFormatting,
  context: __SerdeContext
): any => {
  return {
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.Format != null && { Format: se_ShapeConditionalFormat(input.Format, context) }),
  };
};

/**
 * serializeAws_restJson1FilledMapSortConfiguration
 */
const se_FilledMapSortConfiguration = (input: FilledMapSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategorySort != null && { CategorySort: se_FieldSortOptionsList(input.CategorySort, context) }),
  };
};

/**
 * serializeAws_restJson1FilledMapVisual
 */
const se_FilledMapVisual = (input: FilledMapVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_FilledMapConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.ConditionalFormatting != null && {
      ConditionalFormatting: se_FilledMapConditionalFormatting(input.ConditionalFormatting, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1Filter
 */
const se_Filter = (input: Filter, context: __SerdeContext): any => {
  return {
    ...(input.CategoryFilter != null && { CategoryFilter: se_CategoryFilter(input.CategoryFilter, context) }),
    ...(input.NumericEqualityFilter != null && {
      NumericEqualityFilter: se_NumericEqualityFilter(input.NumericEqualityFilter, context),
    }),
    ...(input.NumericRangeFilter != null && {
      NumericRangeFilter: se_NumericRangeFilter(input.NumericRangeFilter, context),
    }),
    ...(input.RelativeDatesFilter != null && {
      RelativeDatesFilter: se_RelativeDatesFilter(input.RelativeDatesFilter, context),
    }),
    ...(input.TimeEqualityFilter != null && {
      TimeEqualityFilter: se_TimeEqualityFilter(input.TimeEqualityFilter, context),
    }),
    ...(input.TimeRangeFilter != null && { TimeRangeFilter: se_TimeRangeFilter(input.TimeRangeFilter, context) }),
    ...(input.TopBottomFilter != null && { TopBottomFilter: se_TopBottomFilter(input.TopBottomFilter, context) }),
  };
};

/**
 * serializeAws_restJson1FilterControl
 */
const se_FilterControl = (input: FilterControl, context: __SerdeContext): any => {
  return {
    ...(input.DateTimePicker != null && {
      DateTimePicker: se_FilterDateTimePickerControl(input.DateTimePicker, context),
    }),
    ...(input.Dropdown != null && { Dropdown: se_FilterDropDownControl(input.Dropdown, context) }),
    ...(input.List != null && { List: se_FilterListControl(input.List, context) }),
    ...(input.RelativeDateTime != null && {
      RelativeDateTime: se_FilterRelativeDateTimeControl(input.RelativeDateTime, context),
    }),
    ...(input.Slider != null && { Slider: se_FilterSliderControl(input.Slider, context) }),
    ...(input.TextArea != null && { TextArea: se_FilterTextAreaControl(input.TextArea, context) }),
    ...(input.TextField != null && { TextField: se_FilterTextFieldControl(input.TextField, context) }),
  };
};

/**
 * serializeAws_restJson1FilterControlList
 */
const se_FilterControlList = (input: FilterControl[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_FilterControl(entry, context);
    });
};

/**
 * serializeAws_restJson1FilterDateTimePickerControl
 */
const se_FilterDateTimePickerControl = (input: FilterDateTimePickerControl, context: __SerdeContext): any => {
  return {
    ...(input.DisplayOptions != null && {
      DisplayOptions: se_DateTimePickerControlDisplayOptions(input.DisplayOptions, context),
    }),
    ...(input.FilterControlId != null && { FilterControlId: input.FilterControlId }),
    ...(input.SourceFilterId != null && { SourceFilterId: input.SourceFilterId }),
    ...(input.Title != null && { Title: input.Title }),
    ...(input.Type != null && { Type: input.Type }),
  };
};

/**
 * serializeAws_restJson1FilterDropDownControl
 */
const se_FilterDropDownControl = (input: FilterDropDownControl, context: __SerdeContext): any => {
  return {
    ...(input.CascadingControlConfiguration != null && {
      CascadingControlConfiguration: se_CascadingControlConfiguration(input.CascadingControlConfiguration, context),
    }),
    ...(input.DisplayOptions != null && {
      DisplayOptions: se_DropDownControlDisplayOptions(input.DisplayOptions, context),
    }),
    ...(input.FilterControlId != null && { FilterControlId: input.FilterControlId }),
    ...(input.SelectableValues != null && {
      SelectableValues: se_FilterSelectableValues(input.SelectableValues, context),
    }),
    ...(input.SourceFilterId != null && { SourceFilterId: input.SourceFilterId }),
    ...(input.Title != null && { Title: input.Title }),
    ...(input.Type != null && { Type: input.Type }),
  };
};

/**
 * serializeAws_restJson1FilteredVisualsList
 */
const se_FilteredVisualsList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1FilterGroup
 */
const se_FilterGroup = (input: FilterGroup, context: __SerdeContext): any => {
  return {
    ...(input.CrossDataset != null && { CrossDataset: input.CrossDataset }),
    ...(input.FilterGroupId != null && { FilterGroupId: input.FilterGroupId }),
    ...(input.Filters != null && { Filters: se_FilterList(input.Filters, context) }),
    ...(input.ScopeConfiguration != null && {
      ScopeConfiguration: se_FilterScopeConfiguration(input.ScopeConfiguration, context),
    }),
    ...(input.Status != null && { Status: input.Status }),
  };
};

/**
 * serializeAws_restJson1FilterGroupList
 */
const se_FilterGroupList = (input: FilterGroup[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_FilterGroup(entry, context);
    });
};

/**
 * serializeAws_restJson1FilterList
 */
const se_FilterList = (input: Filter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_Filter(entry, context);
    });
};

/**
 * serializeAws_restJson1FilterListConfiguration
 */
const se_FilterListConfiguration = (input: FilterListConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryValues != null && { CategoryValues: se_CategoryValueList(input.CategoryValues, context) }),
    ...(input.MatchOperator != null && { MatchOperator: input.MatchOperator }),
    ...(input.SelectAllOptions != null && { SelectAllOptions: input.SelectAllOptions }),
  };
};

/**
 * serializeAws_restJson1FilterListControl
 */
const se_FilterListControl = (input: FilterListControl, context: __SerdeContext): any => {
  return {
    ...(input.CascadingControlConfiguration != null && {
      CascadingControlConfiguration: se_CascadingControlConfiguration(input.CascadingControlConfiguration, context),
    }),
    ...(input.DisplayOptions != null && {
      DisplayOptions: se_ListControlDisplayOptions(input.DisplayOptions, context),
    }),
    ...(input.FilterControlId != null && { FilterControlId: input.FilterControlId }),
    ...(input.SelectableValues != null && {
      SelectableValues: se_FilterSelectableValues(input.SelectableValues, context),
    }),
    ...(input.SourceFilterId != null && { SourceFilterId: input.SourceFilterId }),
    ...(input.Title != null && { Title: input.Title }),
    ...(input.Type != null && { Type: input.Type }),
  };
};

/**
 * serializeAws_restJson1FilterOperation
 */
const se_FilterOperation = (input: FilterOperation, context: __SerdeContext): any => {
  return {
    ...(input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression }),
  };
};

/**
 * serializeAws_restJson1FilterOperationSelectedFieldsConfiguration
 */
const se_FilterOperationSelectedFieldsConfiguration = (
  input: FilterOperationSelectedFieldsConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.SelectedFieldOptions != null && { SelectedFieldOptions: input.SelectedFieldOptions }),
    ...(input.SelectedFields != null && { SelectedFields: se_SelectedFieldList(input.SelectedFields, context) }),
  };
};

/**
 * serializeAws_restJson1FilterOperationTargetVisualsConfiguration
 */
const se_FilterOperationTargetVisualsConfiguration = (
  input: FilterOperationTargetVisualsConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.SameSheetTargetVisualConfiguration != null && {
      SameSheetTargetVisualConfiguration: se_SameSheetTargetVisualConfiguration(
        input.SameSheetTargetVisualConfiguration,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1FilterRelativeDateTimeControl
 */
const se_FilterRelativeDateTimeControl = (input: FilterRelativeDateTimeControl, context: __SerdeContext): any => {
  return {
    ...(input.DisplayOptions != null && {
      DisplayOptions: se_RelativeDateTimeControlDisplayOptions(input.DisplayOptions, context),
    }),
    ...(input.FilterControlId != null && { FilterControlId: input.FilterControlId }),
    ...(input.SourceFilterId != null && { SourceFilterId: input.SourceFilterId }),
    ...(input.Title != null && { Title: input.Title }),
  };
};

/**
 * serializeAws_restJson1FilterScopeConfiguration
 */
const se_FilterScopeConfiguration = (input: FilterScopeConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.SelectedSheets != null && {
      SelectedSheets: se_SelectedSheetsFilterScopeConfiguration(input.SelectedSheets, context),
    }),
  };
};

/**
 * serializeAws_restJson1FilterSelectableValues
 */
const se_FilterSelectableValues = (input: FilterSelectableValues, context: __SerdeContext): any => {
  return {
    ...(input.Values != null && { Values: se_ParameterSelectableValueList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1FilterSliderControl
 */
const se_FilterSliderControl = (input: FilterSliderControl, context: __SerdeContext): any => {
  return {
    ...(input.DisplayOptions != null && {
      DisplayOptions: se_SliderControlDisplayOptions(input.DisplayOptions, context),
    }),
    ...(input.FilterControlId != null && { FilterControlId: input.FilterControlId }),
    ...(input.MaximumValue != null && { MaximumValue: __serializeFloat(input.MaximumValue) }),
    ...(input.MinimumValue != null && { MinimumValue: __serializeFloat(input.MinimumValue) }),
    ...(input.SourceFilterId != null && { SourceFilterId: input.SourceFilterId }),
    ...(input.StepSize != null && { StepSize: __serializeFloat(input.StepSize) }),
    ...(input.Title != null && { Title: input.Title }),
    ...(input.Type != null && { Type: input.Type }),
  };
};

/**
 * serializeAws_restJson1FilterTextAreaControl
 */
const se_FilterTextAreaControl = (input: FilterTextAreaControl, context: __SerdeContext): any => {
  return {
    ...(input.Delimiter != null && { Delimiter: input.Delimiter }),
    ...(input.DisplayOptions != null && {
      DisplayOptions: se_TextAreaControlDisplayOptions(input.DisplayOptions, context),
    }),
    ...(input.FilterControlId != null && { FilterControlId: input.FilterControlId }),
    ...(input.SourceFilterId != null && { SourceFilterId: input.SourceFilterId }),
    ...(input.Title != null && { Title: input.Title }),
  };
};

/**
 * serializeAws_restJson1FilterTextFieldControl
 */
const se_FilterTextFieldControl = (input: FilterTextFieldControl, context: __SerdeContext): any => {
  return {
    ...(input.DisplayOptions != null && {
      DisplayOptions: se_TextFieldControlDisplayOptions(input.DisplayOptions, context),
    }),
    ...(input.FilterControlId != null && { FilterControlId: input.FilterControlId }),
    ...(input.SourceFilterId != null && { SourceFilterId: input.SourceFilterId }),
    ...(input.Title != null && { Title: input.Title }),
  };
};

/**
 * serializeAws_restJson1FolderColumnList
 */
const se_FolderColumnList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1FolderSearchFilter
 */
const se_FolderSearchFilter = (input: FolderSearchFilter, context: __SerdeContext): any => {
  return {
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Operator != null && { Operator: input.Operator }),
    ...(input.Value != null && { Value: input.Value }),
  };
};

/**
 * serializeAws_restJson1FolderSearchFilterList
 */
const se_FolderSearchFilterList = (input: FolderSearchFilter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_FolderSearchFilter(entry, context);
    });
};

/**
 * serializeAws_restJson1Font
 */
const se_Font = (input: Font, context: __SerdeContext): any => {
  return {
    ...(input.FontFamily != null && { FontFamily: input.FontFamily }),
  };
};

/**
 * serializeAws_restJson1FontConfiguration
 */
const se_FontConfiguration = (input: FontConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.FontColor != null && { FontColor: input.FontColor }),
    ...(input.FontDecoration != null && { FontDecoration: input.FontDecoration }),
    ...(input.FontSize != null && { FontSize: se_FontSize(input.FontSize, context) }),
    ...(input.FontStyle != null && { FontStyle: input.FontStyle }),
    ...(input.FontWeight != null && { FontWeight: se_FontWeight(input.FontWeight, context) }),
  };
};

/**
 * serializeAws_restJson1FontList
 */
const se_FontList = (input: Font[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_Font(entry, context);
    });
};

/**
 * serializeAws_restJson1FontSize
 */
const se_FontSize = (input: FontSize, context: __SerdeContext): any => {
  return {
    ...(input.Relative != null && { Relative: input.Relative }),
  };
};

/**
 * serializeAws_restJson1FontWeight
 */
const se_FontWeight = (input: FontWeight, context: __SerdeContext): any => {
  return {
    ...(input.Name != null && { Name: input.Name }),
  };
};

/**
 * serializeAws_restJson1ForecastComputation
 */
const se_ForecastComputation = (input: ForecastComputation, context: __SerdeContext): any => {
  return {
    ...(input.ComputationId != null && { ComputationId: input.ComputationId }),
    ...(input.CustomSeasonalityValue != null && { CustomSeasonalityValue: input.CustomSeasonalityValue }),
    ...(input.LowerBoundary != null && { LowerBoundary: __serializeFloat(input.LowerBoundary) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.PeriodsBackward != null && { PeriodsBackward: input.PeriodsBackward }),
    ...(input.PeriodsForward != null && { PeriodsForward: input.PeriodsForward }),
    ...(input.PredictionInterval != null && { PredictionInterval: input.PredictionInterval }),
    ...(input.Seasonality != null && { Seasonality: input.Seasonality }),
    ...(input.Time != null && { Time: se_DimensionField(input.Time, context) }),
    ...(input.UpperBoundary != null && { UpperBoundary: __serializeFloat(input.UpperBoundary) }),
    ...(input.Value != null && { Value: se_MeasureField(input.Value, context) }),
  };
};

/**
 * serializeAws_restJson1ForecastConfiguration
 */
const se_ForecastConfiguration = (input: ForecastConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.ForecastProperties != null && {
      ForecastProperties: se_TimeBasedForecastProperties(input.ForecastProperties, context),
    }),
    ...(input.Scenario != null && { Scenario: se_ForecastScenario(input.Scenario, context) }),
  };
};

/**
 * serializeAws_restJson1ForecastConfigurationList
 */
const se_ForecastConfigurationList = (input: ForecastConfiguration[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ForecastConfiguration(entry, context);
    });
};

/**
 * serializeAws_restJson1ForecastScenario
 */
const se_ForecastScenario = (input: ForecastScenario, context: __SerdeContext): any => {
  return {
    ...(input.WhatIfPointScenario != null && {
      WhatIfPointScenario: se_WhatIfPointScenario(input.WhatIfPointScenario, context),
    }),
    ...(input.WhatIfRangeScenario != null && {
      WhatIfRangeScenario: se_WhatIfRangeScenario(input.WhatIfRangeScenario, context),
    }),
  };
};

/**
 * serializeAws_restJson1FormatConfiguration
 */
const se_FormatConfiguration = (input: FormatConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DateTimeFormatConfiguration != null && {
      DateTimeFormatConfiguration: se_DateTimeFormatConfiguration(input.DateTimeFormatConfiguration, context),
    }),
    ...(input.NumberFormatConfiguration != null && {
      NumberFormatConfiguration: se_NumberFormatConfiguration(input.NumberFormatConfiguration, context),
    }),
    ...(input.StringFormatConfiguration != null && {
      StringFormatConfiguration: se_StringFormatConfiguration(input.StringFormatConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1FreeFormLayoutCanvasSizeOptions
 */
const se_FreeFormLayoutCanvasSizeOptions = (input: FreeFormLayoutCanvasSizeOptions, context: __SerdeContext): any => {
  return {
    ...(input.ScreenCanvasSizeOptions != null && {
      ScreenCanvasSizeOptions: se_FreeFormLayoutScreenCanvasSizeOptions(input.ScreenCanvasSizeOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1FreeFormLayoutConfiguration
 */
const se_FreeFormLayoutConfiguration = (input: FreeFormLayoutConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CanvasSizeOptions != null && {
      CanvasSizeOptions: se_FreeFormLayoutCanvasSizeOptions(input.CanvasSizeOptions, context),
    }),
    ...(input.Elements != null && { Elements: se_FreeFromLayoutElementList(input.Elements, context) }),
  };
};

/**
 * serializeAws_restJson1FreeFormLayoutElement
 */
const se_FreeFormLayoutElement = (input: FreeFormLayoutElement, context: __SerdeContext): any => {
  return {
    ...(input.BackgroundStyle != null && {
      BackgroundStyle: se_FreeFormLayoutElementBackgroundStyle(input.BackgroundStyle, context),
    }),
    ...(input.BorderStyle != null && { BorderStyle: se_FreeFormLayoutElementBorderStyle(input.BorderStyle, context) }),
    ...(input.ElementId != null && { ElementId: input.ElementId }),
    ...(input.ElementType != null && { ElementType: input.ElementType }),
    ...(input.Height != null && { Height: input.Height }),
    ...(input.LoadingAnimation != null && { LoadingAnimation: se_LoadingAnimation(input.LoadingAnimation, context) }),
    ...(input.RenderingRules != null && {
      RenderingRules: se_SheetElementRenderingRuleList(input.RenderingRules, context),
    }),
    ...(input.SelectedBorderStyle != null && {
      SelectedBorderStyle: se_FreeFormLayoutElementBorderStyle(input.SelectedBorderStyle, context),
    }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
    ...(input.Width != null && { Width: input.Width }),
    ...(input.XAxisLocation != null && { XAxisLocation: input.XAxisLocation }),
    ...(input.YAxisLocation != null && { YAxisLocation: input.YAxisLocation }),
  };
};

/**
 * serializeAws_restJson1FreeFormLayoutElementBackgroundStyle
 */
const se_FreeFormLayoutElementBackgroundStyle = (
  input: FreeFormLayoutElementBackgroundStyle,
  context: __SerdeContext
): any => {
  return {
    ...(input.Color != null && { Color: input.Color }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1FreeFormLayoutElementBorderStyle
 */
const se_FreeFormLayoutElementBorderStyle = (input: FreeFormLayoutElementBorderStyle, context: __SerdeContext): any => {
  return {
    ...(input.Color != null && { Color: input.Color }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1FreeFormLayoutScreenCanvasSizeOptions
 */
const se_FreeFormLayoutScreenCanvasSizeOptions = (
  input: FreeFormLayoutScreenCanvasSizeOptions,
  context: __SerdeContext
): any => {
  return {
    ...(input.OptimizedViewPortWidth != null && { OptimizedViewPortWidth: input.OptimizedViewPortWidth }),
  };
};

/**
 * serializeAws_restJson1FreeFormSectionLayoutConfiguration
 */
const se_FreeFormSectionLayoutConfiguration = (
  input: FreeFormSectionLayoutConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.Elements != null && { Elements: se_FreeFromLayoutElementList(input.Elements, context) }),
  };
};

/**
 * serializeAws_restJson1FreeFromLayoutElementList
 */
const se_FreeFromLayoutElementList = (input: FreeFormLayoutElement[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_FreeFormLayoutElement(entry, context);
    });
};

/**
 * serializeAws_restJson1FunnelChartAggregatedFieldWells
 */
const se_FunnelChartAggregatedFieldWells = (input: FunnelChartAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.Category != null && { Category: se_FunnelChartDimensionFieldList(input.Category, context) }),
    ...(input.Values != null && { Values: se_FunnelChartMeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1FunnelChartConfiguration
 */
const se_FunnelChartConfiguration = (input: FunnelChartConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryLabelOptions != null && {
      CategoryLabelOptions: se_ChartAxisLabelOptions(input.CategoryLabelOptions, context),
    }),
    ...(input.DataLabelOptions != null && {
      DataLabelOptions: se_FunnelChartDataLabelOptions(input.DataLabelOptions, context),
    }),
    ...(input.FieldWells != null && { FieldWells: se_FunnelChartFieldWells(input.FieldWells, context) }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_FunnelChartSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.Tooltip != null && { Tooltip: se_TooltipOptions(input.Tooltip, context) }),
    ...(input.ValueLabelOptions != null && {
      ValueLabelOptions: se_ChartAxisLabelOptions(input.ValueLabelOptions, context),
    }),
    ...(input.VisualPalette != null && { VisualPalette: se_VisualPalette(input.VisualPalette, context) }),
  };
};

/**
 * serializeAws_restJson1FunnelChartDataLabelOptions
 */
const se_FunnelChartDataLabelOptions = (input: FunnelChartDataLabelOptions, context: __SerdeContext): any => {
  return {
    ...(input.CategoryLabelVisibility != null && { CategoryLabelVisibility: input.CategoryLabelVisibility }),
    ...(input.LabelColor != null && { LabelColor: input.LabelColor }),
    ...(input.LabelFontConfiguration != null && {
      LabelFontConfiguration: se_FontConfiguration(input.LabelFontConfiguration, context),
    }),
    ...(input.MeasureDataLabelStyle != null && { MeasureDataLabelStyle: input.MeasureDataLabelStyle }),
    ...(input.MeasureLabelVisibility != null && { MeasureLabelVisibility: input.MeasureLabelVisibility }),
    ...(input.Position != null && { Position: input.Position }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1FunnelChartDimensionFieldList
 */
const se_FunnelChartDimensionFieldList = (input: DimensionField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DimensionField(entry, context);
    });
};

/**
 * serializeAws_restJson1FunnelChartFieldWells
 */
const se_FunnelChartFieldWells = (input: FunnelChartFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.FunnelChartAggregatedFieldWells != null && {
      FunnelChartAggregatedFieldWells: se_FunnelChartAggregatedFieldWells(
        input.FunnelChartAggregatedFieldWells,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1FunnelChartMeasureFieldList
 */
const se_FunnelChartMeasureFieldList = (input: MeasureField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_MeasureField(entry, context);
    });
};

/**
 * serializeAws_restJson1FunnelChartSortConfiguration
 */
const se_FunnelChartSortConfiguration = (input: FunnelChartSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryItemsLimit != null && {
      CategoryItemsLimit: se_ItemsLimitConfiguration(input.CategoryItemsLimit, context),
    }),
    ...(input.CategorySort != null && { CategorySort: se_FieldSortOptionsList(input.CategorySort, context) }),
  };
};

/**
 * serializeAws_restJson1FunnelChartVisual
 */
const se_FunnelChartVisual = (input: FunnelChartVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_FunnelChartConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1GaugeChartArcConditionalFormatting
 */
const se_GaugeChartArcConditionalFormatting = (
  input: GaugeChartArcConditionalFormatting,
  context: __SerdeContext
): any => {
  return {
    ...(input.ForegroundColor != null && {
      ForegroundColor: se_ConditionalFormattingColor(input.ForegroundColor, context),
    }),
  };
};

/**
 * serializeAws_restJson1GaugeChartConditionalFormatting
 */
const se_GaugeChartConditionalFormatting = (input: GaugeChartConditionalFormatting, context: __SerdeContext): any => {
  return {
    ...(input.ConditionalFormattingOptions != null && {
      ConditionalFormattingOptions: se_GaugeChartConditionalFormattingOptionList(
        input.ConditionalFormattingOptions,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1GaugeChartConditionalFormattingOption
 */
const se_GaugeChartConditionalFormattingOption = (
  input: GaugeChartConditionalFormattingOption,
  context: __SerdeContext
): any => {
  return {
    ...(input.Arc != null && { Arc: se_GaugeChartArcConditionalFormatting(input.Arc, context) }),
    ...(input.PrimaryValue != null && {
      PrimaryValue: se_GaugeChartPrimaryValueConditionalFormatting(input.PrimaryValue, context),
    }),
  };
};

/**
 * serializeAws_restJson1GaugeChartConditionalFormattingOptionList
 */
const se_GaugeChartConditionalFormattingOptionList = (
  input: GaugeChartConditionalFormattingOption[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_GaugeChartConditionalFormattingOption(entry, context);
    });
};

/**
 * serializeAws_restJson1GaugeChartConfiguration
 */
const se_GaugeChartConfiguration = (input: GaugeChartConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DataLabels != null && { DataLabels: se_DataLabelOptions(input.DataLabels, context) }),
    ...(input.FieldWells != null && { FieldWells: se_GaugeChartFieldWells(input.FieldWells, context) }),
    ...(input.GaugeChartOptions != null && {
      GaugeChartOptions: se_GaugeChartOptions(input.GaugeChartOptions, context),
    }),
    ...(input.TooltipOptions != null && { TooltipOptions: se_TooltipOptions(input.TooltipOptions, context) }),
    ...(input.VisualPalette != null && { VisualPalette: se_VisualPalette(input.VisualPalette, context) }),
  };
};

/**
 * serializeAws_restJson1GaugeChartFieldWells
 */
const se_GaugeChartFieldWells = (input: GaugeChartFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.TargetValues != null && { TargetValues: se_MeasureFieldList(input.TargetValues, context) }),
    ...(input.Values != null && { Values: se_MeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1GaugeChartOptions
 */
const se_GaugeChartOptions = (input: GaugeChartOptions, context: __SerdeContext): any => {
  return {
    ...(input.Arc != null && { Arc: se_ArcConfiguration(input.Arc, context) }),
    ...(input.ArcAxis != null && { ArcAxis: se_ArcAxisConfiguration(input.ArcAxis, context) }),
    ...(input.Comparison != null && { Comparison: se_ComparisonConfiguration(input.Comparison, context) }),
    ...(input.PrimaryValueDisplayType != null && { PrimaryValueDisplayType: input.PrimaryValueDisplayType }),
    ...(input.PrimaryValueFontConfiguration != null && {
      PrimaryValueFontConfiguration: se_FontConfiguration(input.PrimaryValueFontConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1GaugeChartPrimaryValueConditionalFormatting
 */
const se_GaugeChartPrimaryValueConditionalFormatting = (
  input: GaugeChartPrimaryValueConditionalFormatting,
  context: __SerdeContext
): any => {
  return {
    ...(input.Icon != null && { Icon: se_ConditionalFormattingIcon(input.Icon, context) }),
    ...(input.TextColor != null && { TextColor: se_ConditionalFormattingColor(input.TextColor, context) }),
  };
};

/**
 * serializeAws_restJson1GaugeChartVisual
 */
const se_GaugeChartVisual = (input: GaugeChartVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_GaugeChartConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ConditionalFormatting != null && {
      ConditionalFormatting: se_GaugeChartConditionalFormatting(input.ConditionalFormatting, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1GeoSpatialColumnGroup
 */
const se_GeoSpatialColumnGroup = (input: GeoSpatialColumnGroup, context: __SerdeContext): any => {
  return {
    ...(input.Columns != null && { Columns: se_ColumnList(input.Columns, context) }),
    ...(input.CountryCode != null && { CountryCode: input.CountryCode }),
    ...(input.Name != null && { Name: input.Name }),
  };
};

/**
 * serializeAws_restJson1GeospatialCoordinateBounds
 */
const se_GeospatialCoordinateBounds = (input: GeospatialCoordinateBounds, context: __SerdeContext): any => {
  return {
    ...(input.East != null && { East: __serializeFloat(input.East) }),
    ...(input.North != null && { North: __serializeFloat(input.North) }),
    ...(input.South != null && { South: __serializeFloat(input.South) }),
    ...(input.West != null && { West: __serializeFloat(input.West) }),
  };
};

/**
 * serializeAws_restJson1GeospatialMapAggregatedFieldWells
 */
const se_GeospatialMapAggregatedFieldWells = (
  input: GeospatialMapAggregatedFieldWells,
  context: __SerdeContext
): any => {
  return {
    ...(input.Colors != null && { Colors: se_DimensionFieldList(input.Colors, context) }),
    ...(input.Geospatial != null && { Geospatial: se_DimensionFieldList(input.Geospatial, context) }),
    ...(input.Values != null && { Values: se_MeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1GeospatialMapConfiguration
 */
const se_GeospatialMapConfiguration = (input: GeospatialMapConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.FieldWells != null && { FieldWells: se_GeospatialMapFieldWells(input.FieldWells, context) }),
    ...(input.Legend != null && { Legend: se_LegendOptions(input.Legend, context) }),
    ...(input.MapStyleOptions != null && {
      MapStyleOptions: se_GeospatialMapStyleOptions(input.MapStyleOptions, context),
    }),
    ...(input.PointStyleOptions != null && {
      PointStyleOptions: se_GeospatialPointStyleOptions(input.PointStyleOptions, context),
    }),
    ...(input.Tooltip != null && { Tooltip: se_TooltipOptions(input.Tooltip, context) }),
    ...(input.VisualPalette != null && { VisualPalette: se_VisualPalette(input.VisualPalette, context) }),
    ...(input.WindowOptions != null && { WindowOptions: se_GeospatialWindowOptions(input.WindowOptions, context) }),
  };
};

/**
 * serializeAws_restJson1GeospatialMapFieldWells
 */
const se_GeospatialMapFieldWells = (input: GeospatialMapFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.GeospatialMapAggregatedFieldWells != null && {
      GeospatialMapAggregatedFieldWells: se_GeospatialMapAggregatedFieldWells(
        input.GeospatialMapAggregatedFieldWells,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1GeospatialMapStyleOptions
 */
const se_GeospatialMapStyleOptions = (input: GeospatialMapStyleOptions, context: __SerdeContext): any => {
  return {
    ...(input.BaseMapStyle != null && { BaseMapStyle: input.BaseMapStyle }),
  };
};

/**
 * serializeAws_restJson1GeospatialMapVisual
 */
const se_GeospatialMapVisual = (input: GeospatialMapVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_GeospatialMapConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1GeospatialPointStyleOptions
 */
const se_GeospatialPointStyleOptions = (input: GeospatialPointStyleOptions, context: __SerdeContext): any => {
  return {
    ...(input.ClusterMarkerConfiguration != null && {
      ClusterMarkerConfiguration: se_ClusterMarkerConfiguration(input.ClusterMarkerConfiguration, context),
    }),
    ...(input.SelectedPointStyle != null && { SelectedPointStyle: input.SelectedPointStyle }),
  };
};

/**
 * serializeAws_restJson1GeospatialWindowOptions
 */
const se_GeospatialWindowOptions = (input: GeospatialWindowOptions, context: __SerdeContext): any => {
  return {
    ...(input.Bounds != null && { Bounds: se_GeospatialCoordinateBounds(input.Bounds, context) }),
    ...(input.MapZoomMode != null && { MapZoomMode: input.MapZoomMode }),
  };
};

/**
 * serializeAws_restJson1GlobalTableBorderOptions
 */
const se_GlobalTableBorderOptions = (input: GlobalTableBorderOptions, context: __SerdeContext): any => {
  return {
    ...(input.SideSpecificBorder != null && {
      SideSpecificBorder: se_TableSideBorderOptions(input.SideSpecificBorder, context),
    }),
    ...(input.UniformBorder != null && { UniformBorder: se_TableBorderOptions(input.UniformBorder, context) }),
  };
};

/**
 * serializeAws_restJson1GradientColor
 */
const se_GradientColor = (input: GradientColor, context: __SerdeContext): any => {
  return {
    ...(input.Stops != null && { Stops: se_GradientStopList(input.Stops, context) }),
  };
};

/**
 * serializeAws_restJson1GradientStop
 */
const se_GradientStop = (input: GradientStop, context: __SerdeContext): any => {
  return {
    ...(input.Color != null && { Color: input.Color }),
    ...(input.DataValue != null && { DataValue: __serializeFloat(input.DataValue) }),
    ...(input.GradientOffset != null && { GradientOffset: __serializeFloat(input.GradientOffset) }),
  };
};

/**
 * serializeAws_restJson1GradientStopList
 */
const se_GradientStopList = (input: GradientStop[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_GradientStop(entry, context);
    });
};

/**
 * serializeAws_restJson1GridLayoutCanvasSizeOptions
 */
const se_GridLayoutCanvasSizeOptions = (input: GridLayoutCanvasSizeOptions, context: __SerdeContext): any => {
  return {
    ...(input.ScreenCanvasSizeOptions != null && {
      ScreenCanvasSizeOptions: se_GridLayoutScreenCanvasSizeOptions(input.ScreenCanvasSizeOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1GridLayoutConfiguration
 */
const se_GridLayoutConfiguration = (input: GridLayoutConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CanvasSizeOptions != null && {
      CanvasSizeOptions: se_GridLayoutCanvasSizeOptions(input.CanvasSizeOptions, context),
    }),
    ...(input.Elements != null && { Elements: se_GridLayoutElementList(input.Elements, context) }),
  };
};

/**
 * serializeAws_restJson1GridLayoutElement
 */
const se_GridLayoutElement = (input: GridLayoutElement, context: __SerdeContext): any => {
  return {
    ...(input.ColumnIndex != null && { ColumnIndex: input.ColumnIndex }),
    ...(input.ColumnSpan != null && { ColumnSpan: input.ColumnSpan }),
    ...(input.ElementId != null && { ElementId: input.ElementId }),
    ...(input.ElementType != null && { ElementType: input.ElementType }),
    ...(input.RowIndex != null && { RowIndex: input.RowIndex }),
    ...(input.RowSpan != null && { RowSpan: input.RowSpan }),
  };
};

/**
 * serializeAws_restJson1GridLayoutElementList
 */
const se_GridLayoutElementList = (input: GridLayoutElement[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_GridLayoutElement(entry, context);
    });
};

/**
 * serializeAws_restJson1GridLayoutScreenCanvasSizeOptions
 */
const se_GridLayoutScreenCanvasSizeOptions = (
  input: GridLayoutScreenCanvasSizeOptions,
  context: __SerdeContext
): any => {
  return {
    ...(input.OptimizedViewPortWidth != null && { OptimizedViewPortWidth: input.OptimizedViewPortWidth }),
    ...(input.ResizeOption != null && { ResizeOption: input.ResizeOption }),
  };
};

/**
 * serializeAws_restJson1GroupSearchFilter
 */
const se_GroupSearchFilter = (input: GroupSearchFilter, context: __SerdeContext): any => {
  return {
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Operator != null && { Operator: input.Operator }),
    ...(input.Value != null && { Value: input.Value }),
  };
};

/**
 * serializeAws_restJson1GroupSearchFilterList
 */
const se_GroupSearchFilterList = (input: GroupSearchFilter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_GroupSearchFilter(entry, context);
    });
};

/**
 * serializeAws_restJson1GroupsList
 */
const se_GroupsList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1GrowthRateComputation
 */
const se_GrowthRateComputation = (input: GrowthRateComputation, context: __SerdeContext): any => {
  return {
    ...(input.ComputationId != null && { ComputationId: input.ComputationId }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.PeriodSize != null && { PeriodSize: input.PeriodSize }),
    ...(input.Time != null && { Time: se_DimensionField(input.Time, context) }),
    ...(input.Value != null && { Value: se_MeasureField(input.Value, context) }),
  };
};

/**
 * serializeAws_restJson1GutterStyle
 */
const se_GutterStyle = (input: GutterStyle, context: __SerdeContext): any => {
  return {
    ...(input.Show != null && { Show: input.Show }),
  };
};

/**
 * serializeAws_restJson1HeaderFooterSectionConfiguration
 */
const se_HeaderFooterSectionConfiguration = (input: HeaderFooterSectionConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.Layout != null && { Layout: se_SectionLayoutConfiguration(input.Layout, context) }),
    ...(input.SectionId != null && { SectionId: input.SectionId }),
    ...(input.Style != null && { Style: se_SectionStyle(input.Style, context) }),
  };
};

/**
 * serializeAws_restJson1HeaderFooterSectionConfigurationList
 */
const se_HeaderFooterSectionConfigurationList = (
  input: HeaderFooterSectionConfiguration[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_HeaderFooterSectionConfiguration(entry, context);
    });
};

/**
 * serializeAws_restJson1HeatMapAggregatedFieldWells
 */
const se_HeatMapAggregatedFieldWells = (input: HeatMapAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.Columns != null && { Columns: se_HeatMapDimensionFieldList(input.Columns, context) }),
    ...(input.Rows != null && { Rows: se_HeatMapDimensionFieldList(input.Rows, context) }),
    ...(input.Values != null && { Values: se_HeatMapMeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1HeatMapConfiguration
 */
const se_HeatMapConfiguration = (input: HeatMapConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.ColorScale != null && { ColorScale: se_ColorScale(input.ColorScale, context) }),
    ...(input.ColumnLabelOptions != null && {
      ColumnLabelOptions: se_ChartAxisLabelOptions(input.ColumnLabelOptions, context),
    }),
    ...(input.DataLabels != null && { DataLabels: se_DataLabelOptions(input.DataLabels, context) }),
    ...(input.FieldWells != null && { FieldWells: se_HeatMapFieldWells(input.FieldWells, context) }),
    ...(input.Legend != null && { Legend: se_LegendOptions(input.Legend, context) }),
    ...(input.RowLabelOptions != null && { RowLabelOptions: se_ChartAxisLabelOptions(input.RowLabelOptions, context) }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_HeatMapSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.Tooltip != null && { Tooltip: se_TooltipOptions(input.Tooltip, context) }),
  };
};

/**
 * serializeAws_restJson1HeatMapDimensionFieldList
 */
const se_HeatMapDimensionFieldList = (input: DimensionField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DimensionField(entry, context);
    });
};

/**
 * serializeAws_restJson1HeatMapFieldWells
 */
const se_HeatMapFieldWells = (input: HeatMapFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.HeatMapAggregatedFieldWells != null && {
      HeatMapAggregatedFieldWells: se_HeatMapAggregatedFieldWells(input.HeatMapAggregatedFieldWells, context),
    }),
  };
};

/**
 * serializeAws_restJson1HeatMapMeasureFieldList
 */
const se_HeatMapMeasureFieldList = (input: MeasureField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_MeasureField(entry, context);
    });
};

/**
 * serializeAws_restJson1HeatMapSortConfiguration
 */
const se_HeatMapSortConfiguration = (input: HeatMapSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.HeatMapColumnItemsLimitConfiguration != null && {
      HeatMapColumnItemsLimitConfiguration: se_ItemsLimitConfiguration(
        input.HeatMapColumnItemsLimitConfiguration,
        context
      ),
    }),
    ...(input.HeatMapColumnSort != null && {
      HeatMapColumnSort: se_FieldSortOptionsList(input.HeatMapColumnSort, context),
    }),
    ...(input.HeatMapRowItemsLimitConfiguration != null && {
      HeatMapRowItemsLimitConfiguration: se_ItemsLimitConfiguration(input.HeatMapRowItemsLimitConfiguration, context),
    }),
    ...(input.HeatMapRowSort != null && { HeatMapRowSort: se_FieldSortOptionsList(input.HeatMapRowSort, context) }),
  };
};

/**
 * serializeAws_restJson1HeatMapVisual
 */
const se_HeatMapVisual = (input: HeatMapVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_HeatMapConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1HistogramAggregatedFieldWells
 */
const se_HistogramAggregatedFieldWells = (input: HistogramAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.Values != null && { Values: se_HistogramMeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1HistogramBinOptions
 */
const se_HistogramBinOptions = (input: HistogramBinOptions, context: __SerdeContext): any => {
  return {
    ...(input.BinCount != null && { BinCount: se_BinCountOptions(input.BinCount, context) }),
    ...(input.BinWidth != null && { BinWidth: se_BinWidthOptions(input.BinWidth, context) }),
    ...(input.SelectedBinType != null && { SelectedBinType: input.SelectedBinType }),
    ...(input.StartValue != null && { StartValue: __serializeFloat(input.StartValue) }),
  };
};

/**
 * serializeAws_restJson1HistogramConfiguration
 */
const se_HistogramConfiguration = (input: HistogramConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.BinOptions != null && { BinOptions: se_HistogramBinOptions(input.BinOptions, context) }),
    ...(input.DataLabels != null && { DataLabels: se_DataLabelOptions(input.DataLabels, context) }),
    ...(input.FieldWells != null && { FieldWells: se_HistogramFieldWells(input.FieldWells, context) }),
    ...(input.Tooltip != null && { Tooltip: se_TooltipOptions(input.Tooltip, context) }),
    ...(input.VisualPalette != null && { VisualPalette: se_VisualPalette(input.VisualPalette, context) }),
    ...(input.XAxisDisplayOptions != null && {
      XAxisDisplayOptions: se_AxisDisplayOptions(input.XAxisDisplayOptions, context),
    }),
    ...(input.XAxisLabelOptions != null && {
      XAxisLabelOptions: se_ChartAxisLabelOptions(input.XAxisLabelOptions, context),
    }),
    ...(input.YAxisDisplayOptions != null && {
      YAxisDisplayOptions: se_AxisDisplayOptions(input.YAxisDisplayOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1HistogramFieldWells
 */
const se_HistogramFieldWells = (input: HistogramFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.HistogramAggregatedFieldWells != null && {
      HistogramAggregatedFieldWells: se_HistogramAggregatedFieldWells(input.HistogramAggregatedFieldWells, context),
    }),
  };
};

/**
 * serializeAws_restJson1HistogramMeasureFieldList
 */
const se_HistogramMeasureFieldList = (input: MeasureField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_MeasureField(entry, context);
    });
};

/**
 * serializeAws_restJson1HistogramVisual
 */
const se_HistogramVisual = (input: HistogramVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_HistogramConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1IdentityMap
 */
const se_IdentityMap = (input: Record<string, string[]>, context: __SerdeContext): any => {
  return Object.entries(input).reduce((acc: Record<string, any>, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_IdentityNameList(value, context);
    return acc;
  }, {});
};

/**
 * serializeAws_restJson1IdentityNameList
 */
const se_IdentityNameList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1InputColumn
 */
const se_InputColumn = (input: InputColumn, context: __SerdeContext): any => {
  return {
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Type != null && { Type: input.Type }),
  };
};

/**
 * serializeAws_restJson1InputColumnList
 */
const se_InputColumnList = (input: InputColumn[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_InputColumn(entry, context);
    });
};

/**
 * serializeAws_restJson1InsightConfiguration
 */
const se_InsightConfiguration = (input: InsightConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.Computations != null && { Computations: se_ComputationList(input.Computations, context) }),
    ...(input.CustomNarrative != null && {
      CustomNarrative: se_CustomNarrativeOptions(input.CustomNarrative, context),
    }),
  };
};

/**
 * serializeAws_restJson1InsightVisual
 */
const se_InsightVisual = (input: InsightVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.DataSetIdentifier != null && { DataSetIdentifier: input.DataSetIdentifier }),
    ...(input.InsightConfiguration != null && {
      InsightConfiguration: se_InsightConfiguration(input.InsightConfiguration, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1IntegerDefaultValueList
 */
const se_IntegerDefaultValueList = (input: number[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1IntegerDefaultValues
 */
const se_IntegerDefaultValues = (input: IntegerDefaultValues, context: __SerdeContext): any => {
  return {
    ...(input.DynamicValue != null && { DynamicValue: se_DynamicDefaultValue(input.DynamicValue, context) }),
    ...(input.StaticValues != null && { StaticValues: se_IntegerDefaultValueList(input.StaticValues, context) }),
  };
};

/**
 * serializeAws_restJson1IntegerParameter
 */
const se_IntegerParameter = (input: IntegerParameter, context: __SerdeContext): any => {
  return {
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Values != null && { Values: se_SensitiveLongList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1IntegerParameterDeclaration
 */
const se_IntegerParameterDeclaration = (input: IntegerParameterDeclaration, context: __SerdeContext): any => {
  return {
    ...(input.DefaultValues != null && { DefaultValues: se_IntegerDefaultValues(input.DefaultValues, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.ParameterValueType != null && { ParameterValueType: input.ParameterValueType }),
    ...(input.ValueWhenUnset != null && {
      ValueWhenUnset: se_IntegerValueWhenUnsetConfiguration(input.ValueWhenUnset, context),
    }),
  };
};

/**
 * serializeAws_restJson1IntegerParameterList
 */
const se_IntegerParameterList = (input: IntegerParameter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_IntegerParameter(entry, context);
    });
};

/**
 * serializeAws_restJson1IntegerValueWhenUnsetConfiguration
 */
const se_IntegerValueWhenUnsetConfiguration = (
  input: IntegerValueWhenUnsetConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.CustomValue != null && { CustomValue: input.CustomValue }),
    ...(input.ValueWhenUnsetOption != null && { ValueWhenUnsetOption: input.ValueWhenUnsetOption }),
  };
};

/**
 * serializeAws_restJson1IpRestrictionRuleMap
 */
const se_IpRestrictionRuleMap = (input: Record<string, string>, context: __SerdeContext): any => {
  return Object.entries(input).reduce((acc: Record<string, any>, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = value;
    return acc;
  }, {});
};

/**
 * serializeAws_restJson1ItemsLimitConfiguration
 */
const se_ItemsLimitConfiguration = (input: ItemsLimitConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.ItemsLimit != null && { ItemsLimit: input.ItemsLimit }),
    ...(input.OtherCategories != null && { OtherCategories: input.OtherCategories }),
  };
};

/**
 * serializeAws_restJson1JiraParameters
 */
const se_JiraParameters = (input: JiraParameters, context: __SerdeContext): any => {
  return {
    ...(input.SiteBaseUrl != null && { SiteBaseUrl: input.SiteBaseUrl }),
  };
};

/**
 * serializeAws_restJson1JoinInstruction
 */
const se_JoinInstruction = (input: JoinInstruction, context: __SerdeContext): any => {
  return {
    ...(input.LeftJoinKeyProperties != null && {
      LeftJoinKeyProperties: se_JoinKeyProperties(input.LeftJoinKeyProperties, context),
    }),
    ...(input.LeftOperand != null && { LeftOperand: input.LeftOperand }),
    ...(input.OnClause != null && { OnClause: input.OnClause }),
    ...(input.RightJoinKeyProperties != null && {
      RightJoinKeyProperties: se_JoinKeyProperties(input.RightJoinKeyProperties, context),
    }),
    ...(input.RightOperand != null && { RightOperand: input.RightOperand }),
    ...(input.Type != null && { Type: input.Type }),
  };
};

/**
 * serializeAws_restJson1JoinKeyProperties
 */
const se_JoinKeyProperties = (input: JoinKeyProperties, context: __SerdeContext): any => {
  return {
    ...(input.UniqueKey != null && { UniqueKey: input.UniqueKey }),
  };
};

/**
 * serializeAws_restJson1KPIConditionalFormatting
 */
const se_KPIConditionalFormatting = (input: KPIConditionalFormatting, context: __SerdeContext): any => {
  return {
    ...(input.ConditionalFormattingOptions != null && {
      ConditionalFormattingOptions: se_KPIConditionalFormattingOptionList(input.ConditionalFormattingOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1KPIConditionalFormattingOption
 */
const se_KPIConditionalFormattingOption = (input: KPIConditionalFormattingOption, context: __SerdeContext): any => {
  return {
    ...(input.PrimaryValue != null && {
      PrimaryValue: se_KPIPrimaryValueConditionalFormatting(input.PrimaryValue, context),
    }),
    ...(input.ProgressBar != null && {
      ProgressBar: se_KPIProgressBarConditionalFormatting(input.ProgressBar, context),
    }),
  };
};

/**
 * serializeAws_restJson1KPIConditionalFormattingOptionList
 */
const se_KPIConditionalFormattingOptionList = (
  input: KPIConditionalFormattingOption[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_KPIConditionalFormattingOption(entry, context);
    });
};

/**
 * serializeAws_restJson1KPIConfiguration
 */
const se_KPIConfiguration = (input: KPIConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.FieldWells != null && { FieldWells: se_KPIFieldWells(input.FieldWells, context) }),
    ...(input.KPIOptions != null && { KPIOptions: se_KPIOptions(input.KPIOptions, context) }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_KPISortConfiguration(input.SortConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1KPIFieldWells
 */
const se_KPIFieldWells = (input: KPIFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.TargetValues != null && { TargetValues: se_MeasureFieldList(input.TargetValues, context) }),
    ...(input.TrendGroups != null && { TrendGroups: se_DimensionFieldList(input.TrendGroups, context) }),
    ...(input.Values != null && { Values: se_MeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1KPIOptions
 */
const se_KPIOptions = (input: KPIOptions, context: __SerdeContext): any => {
  return {
    ...(input.Comparison != null && { Comparison: se_ComparisonConfiguration(input.Comparison, context) }),
    ...(input.PrimaryValueDisplayType != null && { PrimaryValueDisplayType: input.PrimaryValueDisplayType }),
    ...(input.PrimaryValueFontConfiguration != null && {
      PrimaryValueFontConfiguration: se_FontConfiguration(input.PrimaryValueFontConfiguration, context),
    }),
    ...(input.ProgressBar != null && { ProgressBar: se_ProgressBarOptions(input.ProgressBar, context) }),
    ...(input.SecondaryValue != null && { SecondaryValue: se_SecondaryValueOptions(input.SecondaryValue, context) }),
    ...(input.SecondaryValueFontConfiguration != null && {
      SecondaryValueFontConfiguration: se_FontConfiguration(input.SecondaryValueFontConfiguration, context),
    }),
    ...(input.TrendArrows != null && { TrendArrows: se_TrendArrowOptions(input.TrendArrows, context) }),
  };
};

/**
 * serializeAws_restJson1KPIPrimaryValueConditionalFormatting
 */
const se_KPIPrimaryValueConditionalFormatting = (
  input: KPIPrimaryValueConditionalFormatting,
  context: __SerdeContext
): any => {
  return {
    ...(input.Icon != null && { Icon: se_ConditionalFormattingIcon(input.Icon, context) }),
    ...(input.TextColor != null && { TextColor: se_ConditionalFormattingColor(input.TextColor, context) }),
  };
};

/**
 * serializeAws_restJson1KPIProgressBarConditionalFormatting
 */
const se_KPIProgressBarConditionalFormatting = (
  input: KPIProgressBarConditionalFormatting,
  context: __SerdeContext
): any => {
  return {
    ...(input.ForegroundColor != null && {
      ForegroundColor: se_ConditionalFormattingColor(input.ForegroundColor, context),
    }),
  };
};

/**
 * serializeAws_restJson1KPISortConfiguration
 */
const se_KPISortConfiguration = (input: KPISortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.TrendGroupSort != null && { TrendGroupSort: se_FieldSortOptionsList(input.TrendGroupSort, context) }),
  };
};

/**
 * serializeAws_restJson1KPIVisual
 */
const se_KPIVisual = (input: KPIVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_KPIConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.ConditionalFormatting != null && {
      ConditionalFormatting: se_KPIConditionalFormatting(input.ConditionalFormatting, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1LabelOptions
 */
const se_LabelOptions = (input: LabelOptions, context: __SerdeContext): any => {
  return {
    ...(input.CustomLabel != null && { CustomLabel: input.CustomLabel }),
    ...(input.FontConfiguration != null && {
      FontConfiguration: se_FontConfiguration(input.FontConfiguration, context),
    }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1Layout
 */
const se_Layout = (input: Layout, context: __SerdeContext): any => {
  return {
    ...(input.Configuration != null && { Configuration: se_LayoutConfiguration(input.Configuration, context) }),
  };
};

/**
 * serializeAws_restJson1LayoutConfiguration
 */
const se_LayoutConfiguration = (input: LayoutConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.FreeFormLayout != null && {
      FreeFormLayout: se_FreeFormLayoutConfiguration(input.FreeFormLayout, context),
    }),
    ...(input.GridLayout != null && { GridLayout: se_GridLayoutConfiguration(input.GridLayout, context) }),
    ...(input.SectionBasedLayout != null && {
      SectionBasedLayout: se_SectionBasedLayoutConfiguration(input.SectionBasedLayout, context),
    }),
  };
};

/**
 * serializeAws_restJson1LayoutList
 */
const se_LayoutList = (input: Layout[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_Layout(entry, context);
    });
};

/**
 * serializeAws_restJson1LegendOptions
 */
const se_LegendOptions = (input: LegendOptions, context: __SerdeContext): any => {
  return {
    ...(input.Height != null && { Height: input.Height }),
    ...(input.Position != null && { Position: input.Position }),
    ...(input.Title != null && { Title: se_LabelOptions(input.Title, context) }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
    ...(input.Width != null && { Width: input.Width }),
  };
};

/**
 * serializeAws_restJson1LineChartAggregatedFieldWells
 */
const se_LineChartAggregatedFieldWells = (input: LineChartAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.Category != null && { Category: se_DimensionFieldList(input.Category, context) }),
    ...(input.Colors != null && { Colors: se_DimensionFieldList(input.Colors, context) }),
    ...(input.SmallMultiples != null && {
      SmallMultiples: se_SmallMultiplesDimensionFieldList(input.SmallMultiples, context),
    }),
    ...(input.Values != null && { Values: se_MeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1LineChartConfiguration
 */
const se_LineChartConfiguration = (input: LineChartConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.ContributionAnalysisDefaults != null && {
      ContributionAnalysisDefaults: se_ContributionAnalysisDefaultList(input.ContributionAnalysisDefaults, context),
    }),
    ...(input.DataLabels != null && { DataLabels: se_DataLabelOptions(input.DataLabels, context) }),
    ...(input.DefaultSeriesSettings != null && {
      DefaultSeriesSettings: se_LineChartDefaultSeriesSettings(input.DefaultSeriesSettings, context),
    }),
    ...(input.FieldWells != null && { FieldWells: se_LineChartFieldWells(input.FieldWells, context) }),
    ...(input.ForecastConfigurations != null && {
      ForecastConfigurations: se_ForecastConfigurationList(input.ForecastConfigurations, context),
    }),
    ...(input.Legend != null && { Legend: se_LegendOptions(input.Legend, context) }),
    ...(input.PrimaryYAxisDisplayOptions != null && {
      PrimaryYAxisDisplayOptions: se_LineSeriesAxisDisplayOptions(input.PrimaryYAxisDisplayOptions, context),
    }),
    ...(input.PrimaryYAxisLabelOptions != null && {
      PrimaryYAxisLabelOptions: se_ChartAxisLabelOptions(input.PrimaryYAxisLabelOptions, context),
    }),
    ...(input.ReferenceLines != null && { ReferenceLines: se_ReferenceLineList(input.ReferenceLines, context) }),
    ...(input.SecondaryYAxisDisplayOptions != null && {
      SecondaryYAxisDisplayOptions: se_LineSeriesAxisDisplayOptions(input.SecondaryYAxisDisplayOptions, context),
    }),
    ...(input.SecondaryYAxisLabelOptions != null && {
      SecondaryYAxisLabelOptions: se_ChartAxisLabelOptions(input.SecondaryYAxisLabelOptions, context),
    }),
    ...(input.Series != null && { Series: se_SeriesItemList(input.Series, context) }),
    ...(input.SmallMultiplesOptions != null && {
      SmallMultiplesOptions: se_SmallMultiplesOptions(input.SmallMultiplesOptions, context),
    }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_LineChartSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.Tooltip != null && { Tooltip: se_TooltipOptions(input.Tooltip, context) }),
    ...(input.Type != null && { Type: input.Type }),
    ...(input.VisualPalette != null && { VisualPalette: se_VisualPalette(input.VisualPalette, context) }),
    ...(input.XAxisDisplayOptions != null && {
      XAxisDisplayOptions: se_AxisDisplayOptions(input.XAxisDisplayOptions, context),
    }),
    ...(input.XAxisLabelOptions != null && {
      XAxisLabelOptions: se_ChartAxisLabelOptions(input.XAxisLabelOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1LineChartDefaultSeriesSettings
 */
const se_LineChartDefaultSeriesSettings = (input: LineChartDefaultSeriesSettings, context: __SerdeContext): any => {
  return {
    ...(input.AxisBinding != null && { AxisBinding: input.AxisBinding }),
    ...(input.LineStyleSettings != null && {
      LineStyleSettings: se_LineChartLineStyleSettings(input.LineStyleSettings, context),
    }),
    ...(input.MarkerStyleSettings != null && {
      MarkerStyleSettings: se_LineChartMarkerStyleSettings(input.MarkerStyleSettings, context),
    }),
  };
};

/**
 * serializeAws_restJson1LineChartFieldWells
 */
const se_LineChartFieldWells = (input: LineChartFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.LineChartAggregatedFieldWells != null && {
      LineChartAggregatedFieldWells: se_LineChartAggregatedFieldWells(input.LineChartAggregatedFieldWells, context),
    }),
  };
};

/**
 * serializeAws_restJson1LineChartLineStyleSettings
 */
const se_LineChartLineStyleSettings = (input: LineChartLineStyleSettings, context: __SerdeContext): any => {
  return {
    ...(input.LineInterpolation != null && { LineInterpolation: input.LineInterpolation }),
    ...(input.LineStyle != null && { LineStyle: input.LineStyle }),
    ...(input.LineVisibility != null && { LineVisibility: input.LineVisibility }),
    ...(input.LineWidth != null && { LineWidth: input.LineWidth }),
  };
};

/**
 * serializeAws_restJson1LineChartMarkerStyleSettings
 */
const se_LineChartMarkerStyleSettings = (input: LineChartMarkerStyleSettings, context: __SerdeContext): any => {
  return {
    ...(input.MarkerColor != null && { MarkerColor: input.MarkerColor }),
    ...(input.MarkerShape != null && { MarkerShape: input.MarkerShape }),
    ...(input.MarkerSize != null && { MarkerSize: input.MarkerSize }),
    ...(input.MarkerVisibility != null && { MarkerVisibility: input.MarkerVisibility }),
  };
};

/**
 * serializeAws_restJson1LineChartSeriesSettings
 */
const se_LineChartSeriesSettings = (input: LineChartSeriesSettings, context: __SerdeContext): any => {
  return {
    ...(input.LineStyleSettings != null && {
      LineStyleSettings: se_LineChartLineStyleSettings(input.LineStyleSettings, context),
    }),
    ...(input.MarkerStyleSettings != null && {
      MarkerStyleSettings: se_LineChartMarkerStyleSettings(input.MarkerStyleSettings, context),
    }),
  };
};

/**
 * serializeAws_restJson1LineChartSortConfiguration
 */
const se_LineChartSortConfiguration = (input: LineChartSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryItemsLimitConfiguration != null && {
      CategoryItemsLimitConfiguration: se_ItemsLimitConfiguration(input.CategoryItemsLimitConfiguration, context),
    }),
    ...(input.CategorySort != null && { CategorySort: se_FieldSortOptionsList(input.CategorySort, context) }),
    ...(input.ColorItemsLimitConfiguration != null && {
      ColorItemsLimitConfiguration: se_ItemsLimitConfiguration(input.ColorItemsLimitConfiguration, context),
    }),
    ...(input.SmallMultiplesLimitConfiguration != null && {
      SmallMultiplesLimitConfiguration: se_ItemsLimitConfiguration(input.SmallMultiplesLimitConfiguration, context),
    }),
    ...(input.SmallMultiplesSort != null && {
      SmallMultiplesSort: se_FieldSortOptionsList(input.SmallMultiplesSort, context),
    }),
  };
};

/**
 * serializeAws_restJson1LineChartVisual
 */
const se_LineChartVisual = (input: LineChartVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_LineChartConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1LineSeriesAxisDisplayOptions
 */
const se_LineSeriesAxisDisplayOptions = (input: LineSeriesAxisDisplayOptions, context: __SerdeContext): any => {
  return {
    ...(input.AxisOptions != null && { AxisOptions: se_AxisDisplayOptions(input.AxisOptions, context) }),
    ...(input.MissingDataConfigurations != null && {
      MissingDataConfigurations: se_MissingDataConfigurationList(input.MissingDataConfigurations, context),
    }),
  };
};

/**
 * serializeAws_restJson1ListControlDisplayOptions
 */
const se_ListControlDisplayOptions = (input: ListControlDisplayOptions, context: __SerdeContext): any => {
  return {
    ...(input.SearchOptions != null && { SearchOptions: se_ListControlSearchOptions(input.SearchOptions, context) }),
    ...(input.SelectAllOptions != null && {
      SelectAllOptions: se_ListControlSelectAllOptions(input.SelectAllOptions, context),
    }),
    ...(input.TitleOptions != null && { TitleOptions: se_LabelOptions(input.TitleOptions, context) }),
  };
};

/**
 * serializeAws_restJson1ListControlSearchOptions
 */
const se_ListControlSearchOptions = (input: ListControlSearchOptions, context: __SerdeContext): any => {
  return {
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1ListControlSelectAllOptions
 */
const se_ListControlSelectAllOptions = (input: ListControlSelectAllOptions, context: __SerdeContext): any => {
  return {
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1LoadingAnimation
 */
const se_LoadingAnimation = (input: LoadingAnimation, context: __SerdeContext): any => {
  return {
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1LocalNavigationConfiguration
 */
const se_LocalNavigationConfiguration = (input: LocalNavigationConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.TargetSheetId != null && { TargetSheetId: input.TargetSheetId }),
  };
};

/**
 * serializeAws_restJson1LogicalTable
 */
const se_LogicalTable = (input: LogicalTable, context: __SerdeContext): any => {
  return {
    ...(input.Alias != null && { Alias: input.Alias }),
    ...(input.DataTransforms != null && { DataTransforms: se_TransformOperationList(input.DataTransforms, context) }),
    ...(input.Source != null && { Source: se_LogicalTableSource(input.Source, context) }),
  };
};

/**
 * serializeAws_restJson1LogicalTableMap
 */
const se_LogicalTableMap = (input: Record<string, LogicalTable>, context: __SerdeContext): any => {
  return Object.entries(input).reduce((acc: Record<string, any>, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_LogicalTable(value, context);
    return acc;
  }, {});
};

/**
 * serializeAws_restJson1LogicalTableSource
 */
const se_LogicalTableSource = (input: LogicalTableSource, context: __SerdeContext): any => {
  return {
    ...(input.DataSetArn != null && { DataSetArn: input.DataSetArn }),
    ...(input.JoinInstruction != null && { JoinInstruction: se_JoinInstruction(input.JoinInstruction, context) }),
    ...(input.PhysicalTableId != null && { PhysicalTableId: input.PhysicalTableId }),
  };
};

/**
 * serializeAws_restJson1LongFormatText
 */
const se_LongFormatText = (input: LongFormatText, context: __SerdeContext): any => {
  return {
    ...(input.PlainText != null && { PlainText: input.PlainText }),
    ...(input.RichText != null && { RichText: input.RichText }),
  };
};

/**
 * serializeAws_restJson1ManifestFileLocation
 */
const se_ManifestFileLocation = (input: ManifestFileLocation, context: __SerdeContext): any => {
  return {
    ...(input.Bucket != null && { Bucket: input.Bucket }),
    ...(input.Key != null && { Key: input.Key }),
  };
};

/**
 * serializeAws_restJson1MarginStyle
 */
const se_MarginStyle = (input: MarginStyle, context: __SerdeContext): any => {
  return {
    ...(input.Show != null && { Show: input.Show }),
  };
};

/**
 * serializeAws_restJson1MariaDbParameters
 */
const se_MariaDbParameters = (input: MariaDbParameters, context: __SerdeContext): any => {
  return {
    ...(input.Database != null && { Database: input.Database }),
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Port != null && { Port: input.Port }),
  };
};

/**
 * serializeAws_restJson1MaximumLabelType
 */
const se_MaximumLabelType = (input: MaximumLabelType, context: __SerdeContext): any => {
  return {
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1MaximumMinimumComputation
 */
const se_MaximumMinimumComputation = (input: MaximumMinimumComputation, context: __SerdeContext): any => {
  return {
    ...(input.ComputationId != null && { ComputationId: input.ComputationId }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Time != null && { Time: se_DimensionField(input.Time, context) }),
    ...(input.Type != null && { Type: input.Type }),
    ...(input.Value != null && { Value: se_MeasureField(input.Value, context) }),
  };
};

/**
 * serializeAws_restJson1MeasureField
 */
const se_MeasureField = (input: MeasureField, context: __SerdeContext): any => {
  return {
    ...(input.CalculatedMeasureField != null && {
      CalculatedMeasureField: se_CalculatedMeasureField(input.CalculatedMeasureField, context),
    }),
    ...(input.CategoricalMeasureField != null && {
      CategoricalMeasureField: se_CategoricalMeasureField(input.CategoricalMeasureField, context),
    }),
    ...(input.DateMeasureField != null && { DateMeasureField: se_DateMeasureField(input.DateMeasureField, context) }),
    ...(input.NumericalMeasureField != null && {
      NumericalMeasureField: se_NumericalMeasureField(input.NumericalMeasureField, context),
    }),
  };
};

/**
 * serializeAws_restJson1MeasureFieldList
 */
const se_MeasureFieldList = (input: MeasureField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_MeasureField(entry, context);
    });
};

/**
 * serializeAws_restJson1MetricComparisonComputation
 */
const se_MetricComparisonComputation = (input: MetricComparisonComputation, context: __SerdeContext): any => {
  return {
    ...(input.ComputationId != null && { ComputationId: input.ComputationId }),
    ...(input.FromValue != null && { FromValue: se_MeasureField(input.FromValue, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.TargetValue != null && { TargetValue: se_MeasureField(input.TargetValue, context) }),
    ...(input.Time != null && { Time: se_DimensionField(input.Time, context) }),
  };
};

/**
 * serializeAws_restJson1MinimumLabelType
 */
const se_MinimumLabelType = (input: MinimumLabelType, context: __SerdeContext): any => {
  return {
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1MissingDataConfiguration
 */
const se_MissingDataConfiguration = (input: MissingDataConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.TreatmentOption != null && { TreatmentOption: input.TreatmentOption }),
  };
};

/**
 * serializeAws_restJson1MissingDataConfigurationList
 */
const se_MissingDataConfigurationList = (input: MissingDataConfiguration[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_MissingDataConfiguration(entry, context);
    });
};

/**
 * serializeAws_restJson1MySqlParameters
 */
const se_MySqlParameters = (input: MySqlParameters, context: __SerdeContext): any => {
  return {
    ...(input.Database != null && { Database: input.Database }),
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Port != null && { Port: input.Port }),
  };
};

/**
 * serializeAws_restJson1NegativeValueConfiguration
 */
const se_NegativeValueConfiguration = (input: NegativeValueConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DisplayMode != null && { DisplayMode: input.DisplayMode }),
  };
};

/**
 * serializeAws_restJson1NullValueFormatConfiguration
 */
const se_NullValueFormatConfiguration = (input: NullValueFormatConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.NullString != null && { NullString: input.NullString }),
  };
};

/**
 * serializeAws_restJson1NumberDisplayFormatConfiguration
 */
const se_NumberDisplayFormatConfiguration = (input: NumberDisplayFormatConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DecimalPlacesConfiguration != null && {
      DecimalPlacesConfiguration: se_DecimalPlacesConfiguration(input.DecimalPlacesConfiguration, context),
    }),
    ...(input.NegativeValueConfiguration != null && {
      NegativeValueConfiguration: se_NegativeValueConfiguration(input.NegativeValueConfiguration, context),
    }),
    ...(input.NullValueFormatConfiguration != null && {
      NullValueFormatConfiguration: se_NullValueFormatConfiguration(input.NullValueFormatConfiguration, context),
    }),
    ...(input.NumberScale != null && { NumberScale: input.NumberScale }),
    ...(input.Prefix != null && { Prefix: input.Prefix }),
    ...(input.SeparatorConfiguration != null && {
      SeparatorConfiguration: se_NumericSeparatorConfiguration(input.SeparatorConfiguration, context),
    }),
    ...(input.Suffix != null && { Suffix: input.Suffix }),
  };
};

/**
 * serializeAws_restJson1NumberFormatConfiguration
 */
const se_NumberFormatConfiguration = (input: NumberFormatConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.FormatConfiguration != null && {
      FormatConfiguration: se_NumericFormatConfiguration(input.FormatConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1NumericalAggregationFunction
 */
const se_NumericalAggregationFunction = (input: NumericalAggregationFunction, context: __SerdeContext): any => {
  return {
    ...(input.PercentileAggregation != null && {
      PercentileAggregation: se_PercentileAggregation(input.PercentileAggregation, context),
    }),
    ...(input.SimpleNumericalAggregation != null && { SimpleNumericalAggregation: input.SimpleNumericalAggregation }),
  };
};

/**
 * serializeAws_restJson1NumericalDimensionField
 */
const se_NumericalDimensionField = (input: NumericalDimensionField, context: __SerdeContext): any => {
  return {
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.FormatConfiguration != null && {
      FormatConfiguration: se_NumberFormatConfiguration(input.FormatConfiguration, context),
    }),
    ...(input.HierarchyId != null && { HierarchyId: input.HierarchyId }),
  };
};

/**
 * serializeAws_restJson1NumericalMeasureField
 */
const se_NumericalMeasureField = (input: NumericalMeasureField, context: __SerdeContext): any => {
  return {
    ...(input.AggregationFunction != null && {
      AggregationFunction: se_NumericalAggregationFunction(input.AggregationFunction, context),
    }),
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.FormatConfiguration != null && {
      FormatConfiguration: se_NumberFormatConfiguration(input.FormatConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1NumericAxisOptions
 */
const se_NumericAxisOptions = (input: NumericAxisOptions, context: __SerdeContext): any => {
  return {
    ...(input.Range != null && { Range: se_AxisDisplayRange(input.Range, context) }),
    ...(input.Scale != null && { Scale: se_AxisScale(input.Scale, context) }),
  };
};

/**
 * serializeAws_restJson1NumericEqualityDrillDownFilter
 */
const se_NumericEqualityDrillDownFilter = (input: NumericEqualityDrillDownFilter, context: __SerdeContext): any => {
  return {
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.Value != null && { Value: __serializeFloat(input.Value) }),
  };
};

/**
 * serializeAws_restJson1NumericEqualityFilter
 */
const se_NumericEqualityFilter = (input: NumericEqualityFilter, context: __SerdeContext): any => {
  return {
    ...(input.AggregationFunction != null && {
      AggregationFunction: se_AggregationFunction(input.AggregationFunction, context),
    }),
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.FilterId != null && { FilterId: input.FilterId }),
    ...(input.MatchOperator != null && { MatchOperator: input.MatchOperator }),
    ...(input.NullOption != null && { NullOption: input.NullOption }),
    ...(input.ParameterName != null && { ParameterName: input.ParameterName }),
    ...(input.SelectAllOptions != null && { SelectAllOptions: input.SelectAllOptions }),
    ...(input.Value != null && { Value: __serializeFloat(input.Value) }),
  };
};

/**
 * serializeAws_restJson1NumericFormatConfiguration
 */
const se_NumericFormatConfiguration = (input: NumericFormatConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CurrencyDisplayFormatConfiguration != null && {
      CurrencyDisplayFormatConfiguration: se_CurrencyDisplayFormatConfiguration(
        input.CurrencyDisplayFormatConfiguration,
        context
      ),
    }),
    ...(input.NumberDisplayFormatConfiguration != null && {
      NumberDisplayFormatConfiguration: se_NumberDisplayFormatConfiguration(
        input.NumberDisplayFormatConfiguration,
        context
      ),
    }),
    ...(input.PercentageDisplayFormatConfiguration != null && {
      PercentageDisplayFormatConfiguration: se_PercentageDisplayFormatConfiguration(
        input.PercentageDisplayFormatConfiguration,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1NumericRangeFilter
 */
const se_NumericRangeFilter = (input: NumericRangeFilter, context: __SerdeContext): any => {
  return {
    ...(input.AggregationFunction != null && {
      AggregationFunction: se_AggregationFunction(input.AggregationFunction, context),
    }),
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.FilterId != null && { FilterId: input.FilterId }),
    ...(input.IncludeMaximum != null && { IncludeMaximum: input.IncludeMaximum }),
    ...(input.IncludeMinimum != null && { IncludeMinimum: input.IncludeMinimum }),
    ...(input.NullOption != null && { NullOption: input.NullOption }),
    ...(input.RangeMaximum != null && { RangeMaximum: se_NumericRangeFilterValue(input.RangeMaximum, context) }),
    ...(input.RangeMinimum != null && { RangeMinimum: se_NumericRangeFilterValue(input.RangeMinimum, context) }),
    ...(input.SelectAllOptions != null && { SelectAllOptions: input.SelectAllOptions }),
  };
};

/**
 * serializeAws_restJson1NumericRangeFilterValue
 */
const se_NumericRangeFilterValue = (input: NumericRangeFilterValue, context: __SerdeContext): any => {
  return {
    ...(input.Parameter != null && { Parameter: input.Parameter }),
    ...(input.StaticValue != null && { StaticValue: __serializeFloat(input.StaticValue) }),
  };
};

/**
 * serializeAws_restJson1NumericSeparatorConfiguration
 */
const se_NumericSeparatorConfiguration = (input: NumericSeparatorConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DecimalSeparator != null && { DecimalSeparator: input.DecimalSeparator }),
    ...(input.ThousandsSeparator != null && {
      ThousandsSeparator: se_ThousandSeparatorOptions(input.ThousandsSeparator, context),
    }),
  };
};

/**
 * serializeAws_restJson1OracleParameters
 */
const se_OracleParameters = (input: OracleParameters, context: __SerdeContext): any => {
  return {
    ...(input.Database != null && { Database: input.Database }),
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Port != null && { Port: input.Port }),
  };
};

/**
 * serializeAws_restJson1PaginationConfiguration
 */
const se_PaginationConfiguration = (input: PaginationConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.PageNumber != null && { PageNumber: input.PageNumber }),
    ...(input.PageSize != null && { PageSize: input.PageSize }),
  };
};

/**
 * serializeAws_restJson1PanelConfiguration
 */
const se_PanelConfiguration = (input: PanelConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.BackgroundColor != null && { BackgroundColor: input.BackgroundColor }),
    ...(input.BackgroundVisibility != null && { BackgroundVisibility: input.BackgroundVisibility }),
    ...(input.BorderColor != null && { BorderColor: input.BorderColor }),
    ...(input.BorderStyle != null && { BorderStyle: input.BorderStyle }),
    ...(input.BorderThickness != null && { BorderThickness: input.BorderThickness }),
    ...(input.BorderVisibility != null && { BorderVisibility: input.BorderVisibility }),
    ...(input.GutterSpacing != null && { GutterSpacing: input.GutterSpacing }),
    ...(input.GutterVisibility != null && { GutterVisibility: input.GutterVisibility }),
    ...(input.Title != null && { Title: se_PanelTitleOptions(input.Title, context) }),
  };
};

/**
 * serializeAws_restJson1PanelTitleOptions
 */
const se_PanelTitleOptions = (input: PanelTitleOptions, context: __SerdeContext): any => {
  return {
    ...(input.FontConfiguration != null && {
      FontConfiguration: se_FontConfiguration(input.FontConfiguration, context),
    }),
    ...(input.HorizontalTextAlignment != null && { HorizontalTextAlignment: input.HorizontalTextAlignment }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1ParameterControl
 */
const se_ParameterControl = (input: ParameterControl, context: __SerdeContext): any => {
  return {
    ...(input.DateTimePicker != null && {
      DateTimePicker: se_ParameterDateTimePickerControl(input.DateTimePicker, context),
    }),
    ...(input.Dropdown != null && { Dropdown: se_ParameterDropDownControl(input.Dropdown, context) }),
    ...(input.List != null && { List: se_ParameterListControl(input.List, context) }),
    ...(input.Slider != null && { Slider: se_ParameterSliderControl(input.Slider, context) }),
    ...(input.TextArea != null && { TextArea: se_ParameterTextAreaControl(input.TextArea, context) }),
    ...(input.TextField != null && { TextField: se_ParameterTextFieldControl(input.TextField, context) }),
  };
};

/**
 * serializeAws_restJson1ParameterControlList
 */
const se_ParameterControlList = (input: ParameterControl[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ParameterControl(entry, context);
    });
};

/**
 * serializeAws_restJson1ParameterDateTimePickerControl
 */
const se_ParameterDateTimePickerControl = (input: ParameterDateTimePickerControl, context: __SerdeContext): any => {
  return {
    ...(input.DisplayOptions != null && {
      DisplayOptions: se_DateTimePickerControlDisplayOptions(input.DisplayOptions, context),
    }),
    ...(input.ParameterControlId != null && { ParameterControlId: input.ParameterControlId }),
    ...(input.SourceParameterName != null && { SourceParameterName: input.SourceParameterName }),
    ...(input.Title != null && { Title: input.Title }),
  };
};

/**
 * serializeAws_restJson1ParameterDeclaration
 */
const se_ParameterDeclaration = (input: ParameterDeclaration, context: __SerdeContext): any => {
  return {
    ...(input.DateTimeParameterDeclaration != null && {
      DateTimeParameterDeclaration: se_DateTimeParameterDeclaration(input.DateTimeParameterDeclaration, context),
    }),
    ...(input.DecimalParameterDeclaration != null && {
      DecimalParameterDeclaration: se_DecimalParameterDeclaration(input.DecimalParameterDeclaration, context),
    }),
    ...(input.IntegerParameterDeclaration != null && {
      IntegerParameterDeclaration: se_IntegerParameterDeclaration(input.IntegerParameterDeclaration, context),
    }),
    ...(input.StringParameterDeclaration != null && {
      StringParameterDeclaration: se_StringParameterDeclaration(input.StringParameterDeclaration, context),
    }),
  };
};

/**
 * serializeAws_restJson1ParameterDeclarationList
 */
const se_ParameterDeclarationList = (input: ParameterDeclaration[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ParameterDeclaration(entry, context);
    });
};

/**
 * serializeAws_restJson1ParameterDropDownControl
 */
const se_ParameterDropDownControl = (input: ParameterDropDownControl, context: __SerdeContext): any => {
  return {
    ...(input.CascadingControlConfiguration != null && {
      CascadingControlConfiguration: se_CascadingControlConfiguration(input.CascadingControlConfiguration, context),
    }),
    ...(input.DisplayOptions != null && {
      DisplayOptions: se_DropDownControlDisplayOptions(input.DisplayOptions, context),
    }),
    ...(input.ParameterControlId != null && { ParameterControlId: input.ParameterControlId }),
    ...(input.SelectableValues != null && {
      SelectableValues: se_ParameterSelectableValues(input.SelectableValues, context),
    }),
    ...(input.SourceParameterName != null && { SourceParameterName: input.SourceParameterName }),
    ...(input.Title != null && { Title: input.Title }),
    ...(input.Type != null && { Type: input.Type }),
  };
};

/**
 * serializeAws_restJson1ParameterListControl
 */
const se_ParameterListControl = (input: ParameterListControl, context: __SerdeContext): any => {
  return {
    ...(input.CascadingControlConfiguration != null && {
      CascadingControlConfiguration: se_CascadingControlConfiguration(input.CascadingControlConfiguration, context),
    }),
    ...(input.DisplayOptions != null && {
      DisplayOptions: se_ListControlDisplayOptions(input.DisplayOptions, context),
    }),
    ...(input.ParameterControlId != null && { ParameterControlId: input.ParameterControlId }),
    ...(input.SelectableValues != null && {
      SelectableValues: se_ParameterSelectableValues(input.SelectableValues, context),
    }),
    ...(input.SourceParameterName != null && { SourceParameterName: input.SourceParameterName }),
    ...(input.Title != null && { Title: input.Title }),
    ...(input.Type != null && { Type: input.Type }),
  };
};

/**
 * serializeAws_restJson1_Parameters
 */
const se__Parameters = (input: _Parameters, context: __SerdeContext): any => {
  return {
    ...(input.DateTimeParameters != null && {
      DateTimeParameters: se_DateTimeParameterList(input.DateTimeParameters, context),
    }),
    ...(input.DecimalParameters != null && {
      DecimalParameters: se_DecimalParameterList(input.DecimalParameters, context),
    }),
    ...(input.IntegerParameters != null && {
      IntegerParameters: se_IntegerParameterList(input.IntegerParameters, context),
    }),
    ...(input.StringParameters != null && {
      StringParameters: se_StringParameterList(input.StringParameters, context),
    }),
  };
};

/**
 * serializeAws_restJson1ParameterSelectableValueList
 */
const se_ParameterSelectableValueList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1ParameterSelectableValues
 */
const se_ParameterSelectableValues = (input: ParameterSelectableValues, context: __SerdeContext): any => {
  return {
    ...(input.LinkToDataSetColumn != null && {
      LinkToDataSetColumn: se_ColumnIdentifier(input.LinkToDataSetColumn, context),
    }),
    ...(input.Values != null && { Values: se_ParameterSelectableValueList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1ParameterSliderControl
 */
const se_ParameterSliderControl = (input: ParameterSliderControl, context: __SerdeContext): any => {
  return {
    ...(input.DisplayOptions != null && {
      DisplayOptions: se_SliderControlDisplayOptions(input.DisplayOptions, context),
    }),
    ...(input.MaximumValue != null && { MaximumValue: __serializeFloat(input.MaximumValue) }),
    ...(input.MinimumValue != null && { MinimumValue: __serializeFloat(input.MinimumValue) }),
    ...(input.ParameterControlId != null && { ParameterControlId: input.ParameterControlId }),
    ...(input.SourceParameterName != null && { SourceParameterName: input.SourceParameterName }),
    ...(input.StepSize != null && { StepSize: __serializeFloat(input.StepSize) }),
    ...(input.Title != null && { Title: input.Title }),
  };
};

/**
 * serializeAws_restJson1ParameterTextAreaControl
 */
const se_ParameterTextAreaControl = (input: ParameterTextAreaControl, context: __SerdeContext): any => {
  return {
    ...(input.Delimiter != null && { Delimiter: input.Delimiter }),
    ...(input.DisplayOptions != null && {
      DisplayOptions: se_TextAreaControlDisplayOptions(input.DisplayOptions, context),
    }),
    ...(input.ParameterControlId != null && { ParameterControlId: input.ParameterControlId }),
    ...(input.SourceParameterName != null && { SourceParameterName: input.SourceParameterName }),
    ...(input.Title != null && { Title: input.Title }),
  };
};

/**
 * serializeAws_restJson1ParameterTextFieldControl
 */
const se_ParameterTextFieldControl = (input: ParameterTextFieldControl, context: __SerdeContext): any => {
  return {
    ...(input.DisplayOptions != null && {
      DisplayOptions: se_TextFieldControlDisplayOptions(input.DisplayOptions, context),
    }),
    ...(input.ParameterControlId != null && { ParameterControlId: input.ParameterControlId }),
    ...(input.SourceParameterName != null && { SourceParameterName: input.SourceParameterName }),
    ...(input.Title != null && { Title: input.Title }),
  };
};

/**
 * serializeAws_restJson1PercentageDisplayFormatConfiguration
 */
const se_PercentageDisplayFormatConfiguration = (
  input: PercentageDisplayFormatConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.DecimalPlacesConfiguration != null && {
      DecimalPlacesConfiguration: se_DecimalPlacesConfiguration(input.DecimalPlacesConfiguration, context),
    }),
    ...(input.NegativeValueConfiguration != null && {
      NegativeValueConfiguration: se_NegativeValueConfiguration(input.NegativeValueConfiguration, context),
    }),
    ...(input.NullValueFormatConfiguration != null && {
      NullValueFormatConfiguration: se_NullValueFormatConfiguration(input.NullValueFormatConfiguration, context),
    }),
    ...(input.Prefix != null && { Prefix: input.Prefix }),
    ...(input.SeparatorConfiguration != null && {
      SeparatorConfiguration: se_NumericSeparatorConfiguration(input.SeparatorConfiguration, context),
    }),
    ...(input.Suffix != null && { Suffix: input.Suffix }),
  };
};

/**
 * serializeAws_restJson1PercentileAggregation
 */
const se_PercentileAggregation = (input: PercentileAggregation, context: __SerdeContext): any => {
  return {
    ...(input.PercentileValue != null && { PercentileValue: __serializeFloat(input.PercentileValue) }),
  };
};

/**
 * serializeAws_restJson1PercentVisibleRange
 */
const se_PercentVisibleRange = (input: PercentVisibleRange, context: __SerdeContext): any => {
  return {
    ...(input.From != null && { From: __serializeFloat(input.From) }),
    ...(input.To != null && { To: __serializeFloat(input.To) }),
  };
};

/**
 * serializeAws_restJson1PeriodOverPeriodComputation
 */
const se_PeriodOverPeriodComputation = (input: PeriodOverPeriodComputation, context: __SerdeContext): any => {
  return {
    ...(input.ComputationId != null && { ComputationId: input.ComputationId }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Time != null && { Time: se_DimensionField(input.Time, context) }),
    ...(input.Value != null && { Value: se_MeasureField(input.Value, context) }),
  };
};

/**
 * serializeAws_restJson1PeriodToDateComputation
 */
const se_PeriodToDateComputation = (input: PeriodToDateComputation, context: __SerdeContext): any => {
  return {
    ...(input.ComputationId != null && { ComputationId: input.ComputationId }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.PeriodTimeGranularity != null && { PeriodTimeGranularity: input.PeriodTimeGranularity }),
    ...(input.Time != null && { Time: se_DimensionField(input.Time, context) }),
    ...(input.Value != null && { Value: se_MeasureField(input.Value, context) }),
  };
};

/**
 * serializeAws_restJson1PhysicalTable
 */
const se_PhysicalTable = (input: PhysicalTable, context: __SerdeContext): any => {
  return PhysicalTable.visit(input, {
    CustomSql: (value) => ({ CustomSql: se_CustomSql(value, context) }),
    RelationalTable: (value) => ({ RelationalTable: se_RelationalTable(value, context) }),
    S3Source: (value) => ({ S3Source: se_S3Source(value, context) }),
    _: (name, value) => ({ name: value } as any),
  });
};

/**
 * serializeAws_restJson1PhysicalTableMap
 */
const se_PhysicalTableMap = (input: Record<string, PhysicalTable>, context: __SerdeContext): any => {
  return Object.entries(input).reduce((acc: Record<string, any>, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_PhysicalTable(value, context);
    return acc;
  }, {});
};

/**
 * serializeAws_restJson1PieChartAggregatedFieldWells
 */
const se_PieChartAggregatedFieldWells = (input: PieChartAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.Category != null && { Category: se_DimensionFieldList(input.Category, context) }),
    ...(input.SmallMultiples != null && {
      SmallMultiples: se_SmallMultiplesDimensionFieldList(input.SmallMultiples, context),
    }),
    ...(input.Values != null && { Values: se_MeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1PieChartConfiguration
 */
const se_PieChartConfiguration = (input: PieChartConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryLabelOptions != null && {
      CategoryLabelOptions: se_ChartAxisLabelOptions(input.CategoryLabelOptions, context),
    }),
    ...(input.ContributionAnalysisDefaults != null && {
      ContributionAnalysisDefaults: se_ContributionAnalysisDefaultList(input.ContributionAnalysisDefaults, context),
    }),
    ...(input.DataLabels != null && { DataLabels: se_DataLabelOptions(input.DataLabels, context) }),
    ...(input.DonutOptions != null && { DonutOptions: se_DonutOptions(input.DonutOptions, context) }),
    ...(input.FieldWells != null && { FieldWells: se_PieChartFieldWells(input.FieldWells, context) }),
    ...(input.Legend != null && { Legend: se_LegendOptions(input.Legend, context) }),
    ...(input.SmallMultiplesOptions != null && {
      SmallMultiplesOptions: se_SmallMultiplesOptions(input.SmallMultiplesOptions, context),
    }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_PieChartSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.Tooltip != null && { Tooltip: se_TooltipOptions(input.Tooltip, context) }),
    ...(input.ValueLabelOptions != null && {
      ValueLabelOptions: se_ChartAxisLabelOptions(input.ValueLabelOptions, context),
    }),
    ...(input.VisualPalette != null && { VisualPalette: se_VisualPalette(input.VisualPalette, context) }),
  };
};

/**
 * serializeAws_restJson1PieChartFieldWells
 */
const se_PieChartFieldWells = (input: PieChartFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.PieChartAggregatedFieldWells != null && {
      PieChartAggregatedFieldWells: se_PieChartAggregatedFieldWells(input.PieChartAggregatedFieldWells, context),
    }),
  };
};

/**
 * serializeAws_restJson1PieChartSortConfiguration
 */
const se_PieChartSortConfiguration = (input: PieChartSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryItemsLimit != null && {
      CategoryItemsLimit: se_ItemsLimitConfiguration(input.CategoryItemsLimit, context),
    }),
    ...(input.CategorySort != null && { CategorySort: se_FieldSortOptionsList(input.CategorySort, context) }),
    ...(input.SmallMultiplesLimitConfiguration != null && {
      SmallMultiplesLimitConfiguration: se_ItemsLimitConfiguration(input.SmallMultiplesLimitConfiguration, context),
    }),
    ...(input.SmallMultiplesSort != null && {
      SmallMultiplesSort: se_FieldSortOptionsList(input.SmallMultiplesSort, context),
    }),
  };
};

/**
 * serializeAws_restJson1PieChartVisual
 */
const se_PieChartVisual = (input: PieChartVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_PieChartConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1PivotFieldSortOptions
 */
const se_PivotFieldSortOptions = (input: PivotFieldSortOptions, context: __SerdeContext): any => {
  return {
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.SortBy != null && { SortBy: se_PivotTableSortBy(input.SortBy, context) }),
  };
};

/**
 * serializeAws_restJson1PivotFieldSortOptionsList
 */
const se_PivotFieldSortOptionsList = (input: PivotFieldSortOptions[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_PivotFieldSortOptions(entry, context);
    });
};

/**
 * serializeAws_restJson1PivotMeasureFieldList
 */
const se_PivotMeasureFieldList = (input: MeasureField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_MeasureField(entry, context);
    });
};

/**
 * serializeAws_restJson1PivotTableAggregatedFieldWells
 */
const se_PivotTableAggregatedFieldWells = (input: PivotTableAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.Columns != null && { Columns: se_PivotTableDimensionList(input.Columns, context) }),
    ...(input.Rows != null && { Rows: se_PivotTableDimensionList(input.Rows, context) }),
    ...(input.Values != null && { Values: se_PivotMeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1PivotTableCellConditionalFormatting
 */
const se_PivotTableCellConditionalFormatting = (
  input: PivotTableCellConditionalFormatting,
  context: __SerdeContext
): any => {
  return {
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.Scope != null && { Scope: se_PivotTableConditionalFormattingScope(input.Scope, context) }),
    ...(input.TextFormat != null && { TextFormat: se_TextConditionalFormat(input.TextFormat, context) }),
  };
};

/**
 * serializeAws_restJson1PivotTableConditionalFormatting
 */
const se_PivotTableConditionalFormatting = (input: PivotTableConditionalFormatting, context: __SerdeContext): any => {
  return {
    ...(input.ConditionalFormattingOptions != null && {
      ConditionalFormattingOptions: se_PivotTableConditionalFormattingOptionList(
        input.ConditionalFormattingOptions,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1PivotTableConditionalFormattingOption
 */
const se_PivotTableConditionalFormattingOption = (
  input: PivotTableConditionalFormattingOption,
  context: __SerdeContext
): any => {
  return {
    ...(input.Cell != null && { Cell: se_PivotTableCellConditionalFormatting(input.Cell, context) }),
  };
};

/**
 * serializeAws_restJson1PivotTableConditionalFormattingOptionList
 */
const se_PivotTableConditionalFormattingOptionList = (
  input: PivotTableConditionalFormattingOption[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_PivotTableConditionalFormattingOption(entry, context);
    });
};

/**
 * serializeAws_restJson1PivotTableConditionalFormattingScope
 */
const se_PivotTableConditionalFormattingScope = (
  input: PivotTableConditionalFormattingScope,
  context: __SerdeContext
): any => {
  return {
    ...(input.Role != null && { Role: input.Role }),
  };
};

/**
 * serializeAws_restJson1PivotTableConfiguration
 */
const se_PivotTableConfiguration = (input: PivotTableConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.FieldOptions != null && { FieldOptions: se_PivotTableFieldOptions(input.FieldOptions, context) }),
    ...(input.FieldWells != null && { FieldWells: se_PivotTableFieldWells(input.FieldWells, context) }),
    ...(input.PaginatedReportOptions != null && {
      PaginatedReportOptions: se_PivotTablePaginatedReportOptions(input.PaginatedReportOptions, context),
    }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_PivotTableSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.TableOptions != null && { TableOptions: se_PivotTableOptions(input.TableOptions, context) }),
    ...(input.TotalOptions != null && { TotalOptions: se_PivotTableTotalOptions(input.TotalOptions, context) }),
  };
};

/**
 * serializeAws_restJson1PivotTableDataPathOption
 */
const se_PivotTableDataPathOption = (input: PivotTableDataPathOption, context: __SerdeContext): any => {
  return {
    ...(input.DataPathList != null && { DataPathList: se_DataPathValueList(input.DataPathList, context) }),
    ...(input.Width != null && { Width: input.Width }),
  };
};

/**
 * serializeAws_restJson1PivotTableDataPathOptionList
 */
const se_PivotTableDataPathOptionList = (input: PivotTableDataPathOption[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_PivotTableDataPathOption(entry, context);
    });
};

/**
 * serializeAws_restJson1PivotTableDimensionList
 */
const se_PivotTableDimensionList = (input: DimensionField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DimensionField(entry, context);
    });
};

/**
 * serializeAws_restJson1PivotTableFieldOption
 */
const se_PivotTableFieldOption = (input: PivotTableFieldOption, context: __SerdeContext): any => {
  return {
    ...(input.CustomLabel != null && { CustomLabel: input.CustomLabel }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1PivotTableFieldOptionList
 */
const se_PivotTableFieldOptionList = (input: PivotTableFieldOption[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_PivotTableFieldOption(entry, context);
    });
};

/**
 * serializeAws_restJson1PivotTableFieldOptions
 */
const se_PivotTableFieldOptions = (input: PivotTableFieldOptions, context: __SerdeContext): any => {
  return {
    ...(input.DataPathOptions != null && {
      DataPathOptions: se_PivotTableDataPathOptionList(input.DataPathOptions, context),
    }),
    ...(input.SelectedFieldOptions != null && {
      SelectedFieldOptions: se_PivotTableFieldOptionList(input.SelectedFieldOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1PivotTableFieldSubtotalOptions
 */
const se_PivotTableFieldSubtotalOptions = (input: PivotTableFieldSubtotalOptions, context: __SerdeContext): any => {
  return {
    ...(input.FieldId != null && { FieldId: input.FieldId }),
  };
};

/**
 * serializeAws_restJson1PivotTableFieldSubtotalOptionsList
 */
const se_PivotTableFieldSubtotalOptionsList = (
  input: PivotTableFieldSubtotalOptions[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_PivotTableFieldSubtotalOptions(entry, context);
    });
};

/**
 * serializeAws_restJson1PivotTableFieldWells
 */
const se_PivotTableFieldWells = (input: PivotTableFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.PivotTableAggregatedFieldWells != null && {
      PivotTableAggregatedFieldWells: se_PivotTableAggregatedFieldWells(input.PivotTableAggregatedFieldWells, context),
    }),
  };
};

/**
 * serializeAws_restJson1PivotTableOptions
 */
const se_PivotTableOptions = (input: PivotTableOptions, context: __SerdeContext): any => {
  return {
    ...(input.CellStyle != null && { CellStyle: se_TableCellStyle(input.CellStyle, context) }),
    ...(input.CollapsedRowDimensionsVisibility != null && {
      CollapsedRowDimensionsVisibility: input.CollapsedRowDimensionsVisibility,
    }),
    ...(input.ColumnHeaderStyle != null && { ColumnHeaderStyle: se_TableCellStyle(input.ColumnHeaderStyle, context) }),
    ...(input.ColumnNamesVisibility != null && { ColumnNamesVisibility: input.ColumnNamesVisibility }),
    ...(input.MetricPlacement != null && { MetricPlacement: input.MetricPlacement }),
    ...(input.RowAlternateColorOptions != null && {
      RowAlternateColorOptions: se_RowAlternateColorOptions(input.RowAlternateColorOptions, context),
    }),
    ...(input.RowFieldNamesStyle != null && {
      RowFieldNamesStyle: se_TableCellStyle(input.RowFieldNamesStyle, context),
    }),
    ...(input.RowHeaderStyle != null && { RowHeaderStyle: se_TableCellStyle(input.RowHeaderStyle, context) }),
    ...(input.SingleMetricVisibility != null && { SingleMetricVisibility: input.SingleMetricVisibility }),
    ...(input.ToggleButtonsVisibility != null && { ToggleButtonsVisibility: input.ToggleButtonsVisibility }),
  };
};

/**
 * serializeAws_restJson1PivotTablePaginatedReportOptions
 */
const se_PivotTablePaginatedReportOptions = (input: PivotTablePaginatedReportOptions, context: __SerdeContext): any => {
  return {
    ...(input.OverflowColumnHeaderVisibility != null && {
      OverflowColumnHeaderVisibility: input.OverflowColumnHeaderVisibility,
    }),
    ...(input.VerticalOverflowVisibility != null && { VerticalOverflowVisibility: input.VerticalOverflowVisibility }),
  };
};

/**
 * serializeAws_restJson1PivotTableSortBy
 */
const se_PivotTableSortBy = (input: PivotTableSortBy, context: __SerdeContext): any => {
  return {
    ...(input.Column != null && { Column: se_ColumnSort(input.Column, context) }),
    ...(input.DataPath != null && { DataPath: se_DataPathSort(input.DataPath, context) }),
    ...(input.Field != null && { Field: se_FieldSort(input.Field, context) }),
  };
};

/**
 * serializeAws_restJson1PivotTableSortConfiguration
 */
const se_PivotTableSortConfiguration = (input: PivotTableSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.FieldSortOptions != null && {
      FieldSortOptions: se_PivotFieldSortOptionsList(input.FieldSortOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1PivotTableTotalOptions
 */
const se_PivotTableTotalOptions = (input: PivotTableTotalOptions, context: __SerdeContext): any => {
  return {
    ...(input.ColumnSubtotalOptions != null && {
      ColumnSubtotalOptions: se_SubtotalOptions(input.ColumnSubtotalOptions, context),
    }),
    ...(input.ColumnTotalOptions != null && {
      ColumnTotalOptions: se_PivotTotalOptions(input.ColumnTotalOptions, context),
    }),
    ...(input.RowSubtotalOptions != null && {
      RowSubtotalOptions: se_SubtotalOptions(input.RowSubtotalOptions, context),
    }),
    ...(input.RowTotalOptions != null && { RowTotalOptions: se_PivotTotalOptions(input.RowTotalOptions, context) }),
  };
};

/**
 * serializeAws_restJson1PivotTableVisual
 */
const se_PivotTableVisual = (input: PivotTableVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_PivotTableConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ConditionalFormatting != null && {
      ConditionalFormatting: se_PivotTableConditionalFormatting(input.ConditionalFormatting, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1PivotTotalOptions
 */
const se_PivotTotalOptions = (input: PivotTotalOptions, context: __SerdeContext): any => {
  return {
    ...(input.CustomLabel != null && { CustomLabel: input.CustomLabel }),
    ...(input.MetricHeaderCellStyle != null && {
      MetricHeaderCellStyle: se_TableCellStyle(input.MetricHeaderCellStyle, context),
    }),
    ...(input.Placement != null && { Placement: input.Placement }),
    ...(input.ScrollStatus != null && { ScrollStatus: input.ScrollStatus }),
    ...(input.TotalCellStyle != null && { TotalCellStyle: se_TableCellStyle(input.TotalCellStyle, context) }),
    ...(input.TotalsVisibility != null && { TotalsVisibility: input.TotalsVisibility }),
    ...(input.ValueCellStyle != null && { ValueCellStyle: se_TableCellStyle(input.ValueCellStyle, context) }),
  };
};

/**
 * serializeAws_restJson1PostgreSqlParameters
 */
const se_PostgreSqlParameters = (input: PostgreSqlParameters, context: __SerdeContext): any => {
  return {
    ...(input.Database != null && { Database: input.Database }),
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Port != null && { Port: input.Port }),
  };
};

/**
 * serializeAws_restJson1PredefinedHierarchy
 */
const se_PredefinedHierarchy = (input: PredefinedHierarchy, context: __SerdeContext): any => {
  return {
    ...(input.Columns != null && { Columns: se_PredefinedHierarchyColumnList(input.Columns, context) }),
    ...(input.DrillDownFilters != null && {
      DrillDownFilters: se_DrillDownFilterList(input.DrillDownFilters, context),
    }),
    ...(input.HierarchyId != null && { HierarchyId: input.HierarchyId }),
  };
};

/**
 * serializeAws_restJson1PredefinedHierarchyColumnList
 */
const se_PredefinedHierarchyColumnList = (input: ColumnIdentifier[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ColumnIdentifier(entry, context);
    });
};

/**
 * serializeAws_restJson1PrestoParameters
 */
const se_PrestoParameters = (input: PrestoParameters, context: __SerdeContext): any => {
  return {
    ...(input.Catalog != null && { Catalog: input.Catalog }),
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Port != null && { Port: input.Port }),
  };
};

/**
 * serializeAws_restJson1PrincipalList
 */
const se_PrincipalList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1ProgressBarOptions
 */
const se_ProgressBarOptions = (input: ProgressBarOptions, context: __SerdeContext): any => {
  return {
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1ProjectedColumnList
 */
const se_ProjectedColumnList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1ProjectOperation
 */
const se_ProjectOperation = (input: ProjectOperation, context: __SerdeContext): any => {
  return {
    ...(input.ProjectedColumns != null && {
      ProjectedColumns: se_ProjectedColumnList(input.ProjectedColumns, context),
    }),
  };
};

/**
 * serializeAws_restJson1RadarChartAggregatedFieldWells
 */
const se_RadarChartAggregatedFieldWells = (input: RadarChartAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.Category != null && { Category: se_RadarChartCategoryFieldList(input.Category, context) }),
    ...(input.Color != null && { Color: se_RadarChartColorFieldList(input.Color, context) }),
    ...(input.Values != null && { Values: se_RadarChartValuesFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1RadarChartAreaStyleSettings
 */
const se_RadarChartAreaStyleSettings = (input: RadarChartAreaStyleSettings, context: __SerdeContext): any => {
  return {
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1RadarChartCategoryFieldList
 */
const se_RadarChartCategoryFieldList = (input: DimensionField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DimensionField(entry, context);
    });
};

/**
 * serializeAws_restJson1RadarChartColorFieldList
 */
const se_RadarChartColorFieldList = (input: DimensionField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DimensionField(entry, context);
    });
};

/**
 * serializeAws_restJson1RadarChartConfiguration
 */
const se_RadarChartConfiguration = (input: RadarChartConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.AlternateBandColorsVisibility != null && {
      AlternateBandColorsVisibility: input.AlternateBandColorsVisibility,
    }),
    ...(input.AlternateBandEvenColor != null && { AlternateBandEvenColor: input.AlternateBandEvenColor }),
    ...(input.AlternateBandOddColor != null && { AlternateBandOddColor: input.AlternateBandOddColor }),
    ...(input.BaseSeriesSettings != null && {
      BaseSeriesSettings: se_RadarChartSeriesSettings(input.BaseSeriesSettings, context),
    }),
    ...(input.CategoryAxis != null && { CategoryAxis: se_AxisDisplayOptions(input.CategoryAxis, context) }),
    ...(input.CategoryLabelOptions != null && {
      CategoryLabelOptions: se_ChartAxisLabelOptions(input.CategoryLabelOptions, context),
    }),
    ...(input.ColorAxis != null && { ColorAxis: se_AxisDisplayOptions(input.ColorAxis, context) }),
    ...(input.ColorLabelOptions != null && {
      ColorLabelOptions: se_ChartAxisLabelOptions(input.ColorLabelOptions, context),
    }),
    ...(input.FieldWells != null && { FieldWells: se_RadarChartFieldWells(input.FieldWells, context) }),
    ...(input.Legend != null && { Legend: se_LegendOptions(input.Legend, context) }),
    ...(input.Shape != null && { Shape: input.Shape }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_RadarChartSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.StartAngle != null && { StartAngle: __serializeFloat(input.StartAngle) }),
    ...(input.VisualPalette != null && { VisualPalette: se_VisualPalette(input.VisualPalette, context) }),
  };
};

/**
 * serializeAws_restJson1RadarChartFieldWells
 */
const se_RadarChartFieldWells = (input: RadarChartFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.RadarChartAggregatedFieldWells != null && {
      RadarChartAggregatedFieldWells: se_RadarChartAggregatedFieldWells(input.RadarChartAggregatedFieldWells, context),
    }),
  };
};

/**
 * serializeAws_restJson1RadarChartSeriesSettings
 */
const se_RadarChartSeriesSettings = (input: RadarChartSeriesSettings, context: __SerdeContext): any => {
  return {
    ...(input.AreaStyleSettings != null && {
      AreaStyleSettings: se_RadarChartAreaStyleSettings(input.AreaStyleSettings, context),
    }),
  };
};

/**
 * serializeAws_restJson1RadarChartSortConfiguration
 */
const se_RadarChartSortConfiguration = (input: RadarChartSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryItemsLimit != null && {
      CategoryItemsLimit: se_ItemsLimitConfiguration(input.CategoryItemsLimit, context),
    }),
    ...(input.CategorySort != null && { CategorySort: se_FieldSortOptionsList(input.CategorySort, context) }),
    ...(input.ColorItemsLimit != null && {
      ColorItemsLimit: se_ItemsLimitConfiguration(input.ColorItemsLimit, context),
    }),
    ...(input.ColorSort != null && { ColorSort: se_FieldSortOptionsList(input.ColorSort, context) }),
  };
};

/**
 * serializeAws_restJson1RadarChartValuesFieldList
 */
const se_RadarChartValuesFieldList = (input: MeasureField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_MeasureField(entry, context);
    });
};

/**
 * serializeAws_restJson1RadarChartVisual
 */
const se_RadarChartVisual = (input: RadarChartVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_RadarChartConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1RangeEndsLabelType
 */
const se_RangeEndsLabelType = (input: RangeEndsLabelType, context: __SerdeContext): any => {
  return {
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1RdsParameters
 */
const se_RdsParameters = (input: RdsParameters, context: __SerdeContext): any => {
  return {
    ...(input.Database != null && { Database: input.Database }),
    ...(input.InstanceId != null && { InstanceId: input.InstanceId }),
  };
};

/**
 * serializeAws_restJson1RedshiftParameters
 */
const se_RedshiftParameters = (input: RedshiftParameters, context: __SerdeContext): any => {
  return {
    ...(input.ClusterId != null && { ClusterId: input.ClusterId }),
    ...(input.Database != null && { Database: input.Database }),
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Port != null && { Port: input.Port }),
  };
};

/**
 * serializeAws_restJson1ReferenceLine
 */
const se_ReferenceLine = (input: ReferenceLine, context: __SerdeContext): any => {
  return {
    ...(input.DataConfiguration != null && {
      DataConfiguration: se_ReferenceLineDataConfiguration(input.DataConfiguration, context),
    }),
    ...(input.LabelConfiguration != null && {
      LabelConfiguration: se_ReferenceLineLabelConfiguration(input.LabelConfiguration, context),
    }),
    ...(input.Status != null && { Status: input.Status }),
    ...(input.StyleConfiguration != null && {
      StyleConfiguration: se_ReferenceLineStyleConfiguration(input.StyleConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1ReferenceLineCustomLabelConfiguration
 */
const se_ReferenceLineCustomLabelConfiguration = (
  input: ReferenceLineCustomLabelConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.CustomLabel != null && { CustomLabel: input.CustomLabel }),
  };
};

/**
 * serializeAws_restJson1ReferenceLineDataConfiguration
 */
const se_ReferenceLineDataConfiguration = (input: ReferenceLineDataConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.AxisBinding != null && { AxisBinding: input.AxisBinding }),
    ...(input.DynamicConfiguration != null && {
      DynamicConfiguration: se_ReferenceLineDynamicDataConfiguration(input.DynamicConfiguration, context),
    }),
    ...(input.StaticConfiguration != null && {
      StaticConfiguration: se_ReferenceLineStaticDataConfiguration(input.StaticConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1ReferenceLineDynamicDataConfiguration
 */
const se_ReferenceLineDynamicDataConfiguration = (
  input: ReferenceLineDynamicDataConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.Calculation != null && { Calculation: se_NumericalAggregationFunction(input.Calculation, context) }),
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.MeasureAggregationFunction != null && {
      MeasureAggregationFunction: se_AggregationFunction(input.MeasureAggregationFunction, context),
    }),
  };
};

/**
 * serializeAws_restJson1ReferenceLineLabelConfiguration
 */
const se_ReferenceLineLabelConfiguration = (input: ReferenceLineLabelConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CustomLabelConfiguration != null && {
      CustomLabelConfiguration: se_ReferenceLineCustomLabelConfiguration(input.CustomLabelConfiguration, context),
    }),
    ...(input.FontColor != null && { FontColor: input.FontColor }),
    ...(input.FontConfiguration != null && {
      FontConfiguration: se_FontConfiguration(input.FontConfiguration, context),
    }),
    ...(input.HorizontalPosition != null && { HorizontalPosition: input.HorizontalPosition }),
    ...(input.ValueLabelConfiguration != null && {
      ValueLabelConfiguration: se_ReferenceLineValueLabelConfiguration(input.ValueLabelConfiguration, context),
    }),
    ...(input.VerticalPosition != null && { VerticalPosition: input.VerticalPosition }),
  };
};

/**
 * serializeAws_restJson1ReferenceLineList
 */
const se_ReferenceLineList = (input: ReferenceLine[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ReferenceLine(entry, context);
    });
};

/**
 * serializeAws_restJson1ReferenceLineStaticDataConfiguration
 */
const se_ReferenceLineStaticDataConfiguration = (
  input: ReferenceLineStaticDataConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.Value != null && { Value: __serializeFloat(input.Value) }),
  };
};

/**
 * serializeAws_restJson1ReferenceLineStyleConfiguration
 */
const se_ReferenceLineStyleConfiguration = (input: ReferenceLineStyleConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.Color != null && { Color: input.Color }),
    ...(input.Pattern != null && { Pattern: input.Pattern }),
  };
};

/**
 * serializeAws_restJson1ReferenceLineValueLabelConfiguration
 */
const se_ReferenceLineValueLabelConfiguration = (
  input: ReferenceLineValueLabelConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.FormatConfiguration != null && {
      FormatConfiguration: se_NumericFormatConfiguration(input.FormatConfiguration, context),
    }),
    ...(input.RelativePosition != null && { RelativePosition: input.RelativePosition }),
  };
};

/**
 * serializeAws_restJson1RegisteredUserConsoleFeatureConfigurations
 */
const se_RegisteredUserConsoleFeatureConfigurations = (
  input: RegisteredUserConsoleFeatureConfigurations,
  context: __SerdeContext
): any => {
  return {
    ...(input.StatePersistence != null && {
      StatePersistence: se_StatePersistenceConfigurations(input.StatePersistence, context),
    }),
  };
};

/**
 * serializeAws_restJson1RegisteredUserDashboardEmbeddingConfiguration
 */
const se_RegisteredUserDashboardEmbeddingConfiguration = (
  input: RegisteredUserDashboardEmbeddingConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.FeatureConfigurations != null && {
      FeatureConfigurations: se_RegisteredUserDashboardFeatureConfigurations(input.FeatureConfigurations, context),
    }),
    ...(input.InitialDashboardId != null && { InitialDashboardId: input.InitialDashboardId }),
  };
};

/**
 * serializeAws_restJson1RegisteredUserDashboardFeatureConfigurations
 */
const se_RegisteredUserDashboardFeatureConfigurations = (
  input: RegisteredUserDashboardFeatureConfigurations,
  context: __SerdeContext
): any => {
  return {
    ...(input.StatePersistence != null && {
      StatePersistence: se_StatePersistenceConfigurations(input.StatePersistence, context),
    }),
  };
};

/**
 * serializeAws_restJson1RegisteredUserDashboardVisualEmbeddingConfiguration
 */
const se_RegisteredUserDashboardVisualEmbeddingConfiguration = (
  input: RegisteredUserDashboardVisualEmbeddingConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.InitialDashboardVisualId != null && {
      InitialDashboardVisualId: se_DashboardVisualId(input.InitialDashboardVisualId, context),
    }),
  };
};

/**
 * serializeAws_restJson1RegisteredUserEmbeddingExperienceConfiguration
 */
const se_RegisteredUserEmbeddingExperienceConfiguration = (
  input: RegisteredUserEmbeddingExperienceConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.Dashboard != null && {
      Dashboard: se_RegisteredUserDashboardEmbeddingConfiguration(input.Dashboard, context),
    }),
    ...(input.DashboardVisual != null && {
      DashboardVisual: se_RegisteredUserDashboardVisualEmbeddingConfiguration(input.DashboardVisual, context),
    }),
    ...(input.QSearchBar != null && {
      QSearchBar: se_RegisteredUserQSearchBarEmbeddingConfiguration(input.QSearchBar, context),
    }),
    ...(input.QuickSightConsole != null && {
      QuickSightConsole: se_RegisteredUserQuickSightConsoleEmbeddingConfiguration(input.QuickSightConsole, context),
    }),
  };
};

/**
 * serializeAws_restJson1RegisteredUserQSearchBarEmbeddingConfiguration
 */
const se_RegisteredUserQSearchBarEmbeddingConfiguration = (
  input: RegisteredUserQSearchBarEmbeddingConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.InitialTopicId != null && { InitialTopicId: input.InitialTopicId }),
  };
};

/**
 * serializeAws_restJson1RegisteredUserQuickSightConsoleEmbeddingConfiguration
 */
const se_RegisteredUserQuickSightConsoleEmbeddingConfiguration = (
  input: RegisteredUserQuickSightConsoleEmbeddingConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.FeatureConfigurations != null && {
      FeatureConfigurations: se_RegisteredUserConsoleFeatureConfigurations(input.FeatureConfigurations, context),
    }),
    ...(input.InitialPath != null && { InitialPath: input.InitialPath }),
  };
};

/**
 * serializeAws_restJson1RelationalTable
 */
const se_RelationalTable = (input: RelationalTable, context: __SerdeContext): any => {
  return {
    ...(input.Catalog != null && { Catalog: input.Catalog }),
    ...(input.DataSourceArn != null && { DataSourceArn: input.DataSourceArn }),
    ...(input.InputColumns != null && { InputColumns: se_InputColumnList(input.InputColumns, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Schema != null && { Schema: input.Schema }),
  };
};

/**
 * serializeAws_restJson1RelativeDatesFilter
 */
const se_RelativeDatesFilter = (input: RelativeDatesFilter, context: __SerdeContext): any => {
  return {
    ...(input.AnchorDateConfiguration != null && {
      AnchorDateConfiguration: se_AnchorDateConfiguration(input.AnchorDateConfiguration, context),
    }),
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.ExcludePeriodConfiguration != null && {
      ExcludePeriodConfiguration: se_ExcludePeriodConfiguration(input.ExcludePeriodConfiguration, context),
    }),
    ...(input.FilterId != null && { FilterId: input.FilterId }),
    ...(input.MinimumGranularity != null && { MinimumGranularity: input.MinimumGranularity }),
    ...(input.NullOption != null && { NullOption: input.NullOption }),
    ...(input.ParameterName != null && { ParameterName: input.ParameterName }),
    ...(input.RelativeDateType != null && { RelativeDateType: input.RelativeDateType }),
    ...(input.RelativeDateValue != null && { RelativeDateValue: input.RelativeDateValue }),
    ...(input.TimeGranularity != null && { TimeGranularity: input.TimeGranularity }),
  };
};

/**
 * serializeAws_restJson1RelativeDateTimeControlDisplayOptions
 */
const se_RelativeDateTimeControlDisplayOptions = (
  input: RelativeDateTimeControlDisplayOptions,
  context: __SerdeContext
): any => {
  return {
    ...(input.DateTimeFormat != null && { DateTimeFormat: input.DateTimeFormat }),
    ...(input.TitleOptions != null && { TitleOptions: se_LabelOptions(input.TitleOptions, context) }),
  };
};

/**
 * serializeAws_restJson1RenameColumnOperation
 */
const se_RenameColumnOperation = (input: RenameColumnOperation, context: __SerdeContext): any => {
  return {
    ...(input.ColumnName != null && { ColumnName: input.ColumnName }),
    ...(input.NewColumnName != null && { NewColumnName: input.NewColumnName }),
  };
};

/**
 * serializeAws_restJson1ResourcePermission
 */
const se_ResourcePermission = (input: ResourcePermission, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_ActionList(input.Actions, context) }),
    ...(input.Principal != null && { Principal: input.Principal }),
  };
};

/**
 * serializeAws_restJson1ResourcePermissionList
 */
const se_ResourcePermissionList = (input: ResourcePermission[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ResourcePermission(entry, context);
    });
};

/**
 * serializeAws_restJson1RollingDateConfiguration
 */
const se_RollingDateConfiguration = (input: RollingDateConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DataSetIdentifier != null && { DataSetIdentifier: input.DataSetIdentifier }),
    ...(input.Expression != null && { Expression: input.Expression }),
  };
};

/**
 * serializeAws_restJson1RowAlternateColorList
 */
const se_RowAlternateColorList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1RowAlternateColorOptions
 */
const se_RowAlternateColorOptions = (input: RowAlternateColorOptions, context: __SerdeContext): any => {
  return {
    ...(input.RowAlternateColors != null && {
      RowAlternateColors: se_RowAlternateColorList(input.RowAlternateColors, context),
    }),
    ...(input.Status != null && { Status: input.Status }),
  };
};

/**
 * serializeAws_restJson1RowLevelPermissionDataSet
 */
const se_RowLevelPermissionDataSet = (input: RowLevelPermissionDataSet, context: __SerdeContext): any => {
  return {
    ...(input.Arn != null && { Arn: input.Arn }),
    ...(input.FormatVersion != null && { FormatVersion: input.FormatVersion }),
    ...(input.Namespace != null && { Namespace: input.Namespace }),
    ...(input.PermissionPolicy != null && { PermissionPolicy: input.PermissionPolicy }),
    ...(input.Status != null && { Status: input.Status }),
  };
};

/**
 * serializeAws_restJson1RowLevelPermissionTagConfiguration
 */
const se_RowLevelPermissionTagConfiguration = (
  input: RowLevelPermissionTagConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.Status != null && { Status: input.Status }),
    ...(input.TagRules != null && { TagRules: se_RowLevelPermissionTagRuleList(input.TagRules, context) }),
  };
};

/**
 * serializeAws_restJson1RowLevelPermissionTagRule
 */
const se_RowLevelPermissionTagRule = (input: RowLevelPermissionTagRule, context: __SerdeContext): any => {
  return {
    ...(input.ColumnName != null && { ColumnName: input.ColumnName }),
    ...(input.MatchAllValue != null && { MatchAllValue: input.MatchAllValue }),
    ...(input.TagKey != null && { TagKey: input.TagKey }),
    ...(input.TagMultiValueDelimiter != null && { TagMultiValueDelimiter: input.TagMultiValueDelimiter }),
  };
};

/**
 * serializeAws_restJson1RowLevelPermissionTagRuleList
 */
const se_RowLevelPermissionTagRuleList = (input: RowLevelPermissionTagRule[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_RowLevelPermissionTagRule(entry, context);
    });
};

/**
 * serializeAws_restJson1RowSortList
 */
const se_RowSortList = (input: FieldSortOptions[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_FieldSortOptions(entry, context);
    });
};

/**
 * serializeAws_restJson1S3Parameters
 */
const se_S3Parameters = (input: S3Parameters, context: __SerdeContext): any => {
  return {
    ...(input.ManifestFileLocation != null && {
      ManifestFileLocation: se_ManifestFileLocation(input.ManifestFileLocation, context),
    }),
    ...(input.RoleArn != null && { RoleArn: input.RoleArn }),
  };
};

/**
 * serializeAws_restJson1S3Source
 */
const se_S3Source = (input: S3Source, context: __SerdeContext): any => {
  return {
    ...(input.DataSourceArn != null && { DataSourceArn: input.DataSourceArn }),
    ...(input.InputColumns != null && { InputColumns: se_InputColumnList(input.InputColumns, context) }),
    ...(input.UploadSettings != null && { UploadSettings: se_UploadSettings(input.UploadSettings, context) }),
  };
};

/**
 * serializeAws_restJson1SameSheetTargetVisualConfiguration
 */
const se_SameSheetTargetVisualConfiguration = (
  input: SameSheetTargetVisualConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.TargetVisualOptions != null && { TargetVisualOptions: input.TargetVisualOptions }),
    ...(input.TargetVisuals != null && { TargetVisuals: se_TargetVisualList(input.TargetVisuals, context) }),
  };
};

/**
 * serializeAws_restJson1SankeyDiagramAggregatedFieldWells
 */
const se_SankeyDiagramAggregatedFieldWells = (
  input: SankeyDiagramAggregatedFieldWells,
  context: __SerdeContext
): any => {
  return {
    ...(input.Destination != null && { Destination: se_DimensionFieldList(input.Destination, context) }),
    ...(input.Source != null && { Source: se_DimensionFieldList(input.Source, context) }),
    ...(input.Weight != null && { Weight: se_MeasureFieldList(input.Weight, context) }),
  };
};

/**
 * serializeAws_restJson1SankeyDiagramChartConfiguration
 */
const se_SankeyDiagramChartConfiguration = (input: SankeyDiagramChartConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DataLabels != null && { DataLabels: se_DataLabelOptions(input.DataLabels, context) }),
    ...(input.FieldWells != null && { FieldWells: se_SankeyDiagramFieldWells(input.FieldWells, context) }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_SankeyDiagramSortConfiguration(input.SortConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1SankeyDiagramFieldWells
 */
const se_SankeyDiagramFieldWells = (input: SankeyDiagramFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.SankeyDiagramAggregatedFieldWells != null && {
      SankeyDiagramAggregatedFieldWells: se_SankeyDiagramAggregatedFieldWells(
        input.SankeyDiagramAggregatedFieldWells,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1SankeyDiagramSortConfiguration
 */
const se_SankeyDiagramSortConfiguration = (input: SankeyDiagramSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DestinationItemsLimit != null && {
      DestinationItemsLimit: se_ItemsLimitConfiguration(input.DestinationItemsLimit, context),
    }),
    ...(input.SourceItemsLimit != null && {
      SourceItemsLimit: se_ItemsLimitConfiguration(input.SourceItemsLimit, context),
    }),
    ...(input.WeightSort != null && { WeightSort: se_FieldSortOptionsList(input.WeightSort, context) }),
  };
};

/**
 * serializeAws_restJson1SankeyDiagramVisual
 */
const se_SankeyDiagramVisual = (input: SankeyDiagramVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_SankeyDiagramChartConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1ScatterPlotCategoricallyAggregatedFieldWells
 */
const se_ScatterPlotCategoricallyAggregatedFieldWells = (
  input: ScatterPlotCategoricallyAggregatedFieldWells,
  context: __SerdeContext
): any => {
  return {
    ...(input.Category != null && { Category: se_DimensionFieldList(input.Category, context) }),
    ...(input.Size != null && { Size: se_MeasureFieldList(input.Size, context) }),
    ...(input.XAxis != null && { XAxis: se_MeasureFieldList(input.XAxis, context) }),
    ...(input.YAxis != null && { YAxis: se_MeasureFieldList(input.YAxis, context) }),
  };
};

/**
 * serializeAws_restJson1ScatterPlotConfiguration
 */
const se_ScatterPlotConfiguration = (input: ScatterPlotConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DataLabels != null && { DataLabels: se_DataLabelOptions(input.DataLabels, context) }),
    ...(input.FieldWells != null && { FieldWells: se_ScatterPlotFieldWells(input.FieldWells, context) }),
    ...(input.Legend != null && { Legend: se_LegendOptions(input.Legend, context) }),
    ...(input.Tooltip != null && { Tooltip: se_TooltipOptions(input.Tooltip, context) }),
    ...(input.VisualPalette != null && { VisualPalette: se_VisualPalette(input.VisualPalette, context) }),
    ...(input.XAxisDisplayOptions != null && {
      XAxisDisplayOptions: se_AxisDisplayOptions(input.XAxisDisplayOptions, context),
    }),
    ...(input.XAxisLabelOptions != null && {
      XAxisLabelOptions: se_ChartAxisLabelOptions(input.XAxisLabelOptions, context),
    }),
    ...(input.YAxisDisplayOptions != null && {
      YAxisDisplayOptions: se_AxisDisplayOptions(input.YAxisDisplayOptions, context),
    }),
    ...(input.YAxisLabelOptions != null && {
      YAxisLabelOptions: se_ChartAxisLabelOptions(input.YAxisLabelOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1ScatterPlotFieldWells
 */
const se_ScatterPlotFieldWells = (input: ScatterPlotFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.ScatterPlotCategoricallyAggregatedFieldWells != null && {
      ScatterPlotCategoricallyAggregatedFieldWells: se_ScatterPlotCategoricallyAggregatedFieldWells(
        input.ScatterPlotCategoricallyAggregatedFieldWells,
        context
      ),
    }),
    ...(input.ScatterPlotUnaggregatedFieldWells != null && {
      ScatterPlotUnaggregatedFieldWells: se_ScatterPlotUnaggregatedFieldWells(
        input.ScatterPlotUnaggregatedFieldWells,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1ScatterPlotUnaggregatedFieldWells
 */
const se_ScatterPlotUnaggregatedFieldWells = (
  input: ScatterPlotUnaggregatedFieldWells,
  context: __SerdeContext
): any => {
  return {
    ...(input.Size != null && { Size: se_MeasureFieldList(input.Size, context) }),
    ...(input.XAxis != null && { XAxis: se_DimensionFieldList(input.XAxis, context) }),
    ...(input.YAxis != null && { YAxis: se_DimensionFieldList(input.YAxis, context) }),
  };
};

/**
 * serializeAws_restJson1ScatterPlotVisual
 */
const se_ScatterPlotVisual = (input: ScatterPlotVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_ScatterPlotConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1ScrollBarOptions
 */
const se_ScrollBarOptions = (input: ScrollBarOptions, context: __SerdeContext): any => {
  return {
    ...(input.Visibility != null && { Visibility: input.Visibility }),
    ...(input.VisibleRange != null && { VisibleRange: se_VisibleRangeOptions(input.VisibleRange, context) }),
  };
};

/**
 * serializeAws_restJson1SecondaryValueOptions
 */
const se_SecondaryValueOptions = (input: SecondaryValueOptions, context: __SerdeContext): any => {
  return {
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1SectionAfterPageBreak
 */
const se_SectionAfterPageBreak = (input: SectionAfterPageBreak, context: __SerdeContext): any => {
  return {
    ...(input.Status != null && { Status: input.Status }),
  };
};

/**
 * serializeAws_restJson1SectionBasedLayoutCanvasSizeOptions
 */
const se_SectionBasedLayoutCanvasSizeOptions = (
  input: SectionBasedLayoutCanvasSizeOptions,
  context: __SerdeContext
): any => {
  return {
    ...(input.PaperCanvasSizeOptions != null && {
      PaperCanvasSizeOptions: se_SectionBasedLayoutPaperCanvasSizeOptions(input.PaperCanvasSizeOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1SectionBasedLayoutConfiguration
 */
const se_SectionBasedLayoutConfiguration = (input: SectionBasedLayoutConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.BodySections != null && { BodySections: se_BodySectionConfigurationList(input.BodySections, context) }),
    ...(input.CanvasSizeOptions != null && {
      CanvasSizeOptions: se_SectionBasedLayoutCanvasSizeOptions(input.CanvasSizeOptions, context),
    }),
    ...(input.FooterSections != null && {
      FooterSections: se_HeaderFooterSectionConfigurationList(input.FooterSections, context),
    }),
    ...(input.HeaderSections != null && {
      HeaderSections: se_HeaderFooterSectionConfigurationList(input.HeaderSections, context),
    }),
  };
};

/**
 * serializeAws_restJson1SectionBasedLayoutPaperCanvasSizeOptions
 */
const se_SectionBasedLayoutPaperCanvasSizeOptions = (
  input: SectionBasedLayoutPaperCanvasSizeOptions,
  context: __SerdeContext
): any => {
  return {
    ...(input.PaperMargin != null && { PaperMargin: se_Spacing(input.PaperMargin, context) }),
    ...(input.PaperOrientation != null && { PaperOrientation: input.PaperOrientation }),
    ...(input.PaperSize != null && { PaperSize: input.PaperSize }),
  };
};

/**
 * serializeAws_restJson1SectionLayoutConfiguration
 */
const se_SectionLayoutConfiguration = (input: SectionLayoutConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.FreeFormLayout != null && {
      FreeFormLayout: se_FreeFormSectionLayoutConfiguration(input.FreeFormLayout, context),
    }),
  };
};

/**
 * serializeAws_restJson1SectionPageBreakConfiguration
 */
const se_SectionPageBreakConfiguration = (input: SectionPageBreakConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.After != null && { After: se_SectionAfterPageBreak(input.After, context) }),
  };
};

/**
 * serializeAws_restJson1SectionStyle
 */
const se_SectionStyle = (input: SectionStyle, context: __SerdeContext): any => {
  return {
    ...(input.Height != null && { Height: input.Height }),
    ...(input.Padding != null && { Padding: se_Spacing(input.Padding, context) }),
  };
};

/**
 * serializeAws_restJson1SelectedFieldList
 */
const se_SelectedFieldList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1SelectedSheetsFilterScopeConfiguration
 */
const se_SelectedSheetsFilterScopeConfiguration = (
  input: SelectedSheetsFilterScopeConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.SheetVisualScopingConfigurations != null && {
      SheetVisualScopingConfigurations: se_SheetVisualScopingConfigurations(
        input.SheetVisualScopingConfigurations,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1SensitiveDoubleList
 */
const se_SensitiveDoubleList = (input: number[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return __serializeFloat(entry);
    });
};

/**
 * serializeAws_restJson1SensitiveLongList
 */
const se_SensitiveLongList = (input: number[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1SensitiveStringList
 */
const se_SensitiveStringList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1SensitiveTimestampList
 */
const se_SensitiveTimestampList = (input: Date[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return Math.round(entry.getTime() / 1000);
    });
};

/**
 * serializeAws_restJson1SeriesItem
 */
const se_SeriesItem = (input: SeriesItem, context: __SerdeContext): any => {
  return {
    ...(input.DataFieldSeriesItem != null && {
      DataFieldSeriesItem: se_DataFieldSeriesItem(input.DataFieldSeriesItem, context),
    }),
    ...(input.FieldSeriesItem != null && { FieldSeriesItem: se_FieldSeriesItem(input.FieldSeriesItem, context) }),
  };
};

/**
 * serializeAws_restJson1SeriesItemList
 */
const se_SeriesItemList = (input: SeriesItem[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_SeriesItem(entry, context);
    });
};

/**
 * serializeAws_restJson1ServiceNowParameters
 */
const se_ServiceNowParameters = (input: ServiceNowParameters, context: __SerdeContext): any => {
  return {
    ...(input.SiteBaseUrl != null && { SiteBaseUrl: input.SiteBaseUrl }),
  };
};

/**
 * serializeAws_restJson1SessionTag
 */
const se_SessionTag = (input: SessionTag, context: __SerdeContext): any => {
  return {
    ...(input.Key != null && { Key: input.Key }),
    ...(input.Value != null && { Value: input.Value }),
  };
};

/**
 * serializeAws_restJson1SessionTagList
 */
const se_SessionTagList = (input: SessionTag[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_SessionTag(entry, context);
    });
};

/**
 * serializeAws_restJson1SetParameterValueConfiguration
 */
const se_SetParameterValueConfiguration = (input: SetParameterValueConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DestinationParameterName != null && { DestinationParameterName: input.DestinationParameterName }),
    ...(input.Value != null && { Value: se_DestinationParameterValueConfiguration(input.Value, context) }),
  };
};

/**
 * serializeAws_restJson1SetParameterValueConfigurationList
 */
const se_SetParameterValueConfigurationList = (
  input: SetParameterValueConfiguration[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_SetParameterValueConfiguration(entry, context);
    });
};

/**
 * serializeAws_restJson1ShapeConditionalFormat
 */
const se_ShapeConditionalFormat = (input: ShapeConditionalFormat, context: __SerdeContext): any => {
  return {
    ...(input.BackgroundColor != null && {
      BackgroundColor: se_ConditionalFormattingColor(input.BackgroundColor, context),
    }),
  };
};

/**
 * serializeAws_restJson1SheetControlLayout
 */
const se_SheetControlLayout = (input: SheetControlLayout, context: __SerdeContext): any => {
  return {
    ...(input.Configuration != null && {
      Configuration: se_SheetControlLayoutConfiguration(input.Configuration, context),
    }),
  };
};

/**
 * serializeAws_restJson1SheetControlLayoutConfiguration
 */
const se_SheetControlLayoutConfiguration = (input: SheetControlLayoutConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.GridLayout != null && { GridLayout: se_GridLayoutConfiguration(input.GridLayout, context) }),
  };
};

/**
 * serializeAws_restJson1SheetControlLayoutList
 */
const se_SheetControlLayoutList = (input: SheetControlLayout[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_SheetControlLayout(entry, context);
    });
};

/**
 * serializeAws_restJson1SheetControlsOption
 */
const se_SheetControlsOption = (input: SheetControlsOption, context: __SerdeContext): any => {
  return {
    ...(input.VisibilityState != null && { VisibilityState: input.VisibilityState }),
  };
};

/**
 * serializeAws_restJson1SheetDefinition
 */
const se_SheetDefinition = (input: SheetDefinition, context: __SerdeContext): any => {
  return {
    ...(input.ContentType != null && { ContentType: input.ContentType }),
    ...(input.Description != null && { Description: input.Description }),
    ...(input.FilterControls != null && { FilterControls: se_FilterControlList(input.FilterControls, context) }),
    ...(input.Layouts != null && { Layouts: se_LayoutList(input.Layouts, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.ParameterControls != null && {
      ParameterControls: se_ParameterControlList(input.ParameterControls, context),
    }),
    ...(input.SheetControlLayouts != null && {
      SheetControlLayouts: se_SheetControlLayoutList(input.SheetControlLayouts, context),
    }),
    ...(input.SheetId != null && { SheetId: input.SheetId }),
    ...(input.TextBoxes != null && { TextBoxes: se_SheetTextBoxList(input.TextBoxes, context) }),
    ...(input.Title != null && { Title: input.Title }),
    ...(input.Visuals != null && { Visuals: se_VisualList(input.Visuals, context) }),
  };
};

/**
 * serializeAws_restJson1SheetDefinitionList
 */
const se_SheetDefinitionList = (input: SheetDefinition[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_SheetDefinition(entry, context);
    });
};

/**
 * serializeAws_restJson1SheetElementConfigurationOverrides
 */
const se_SheetElementConfigurationOverrides = (
  input: SheetElementConfigurationOverrides,
  context: __SerdeContext
): any => {
  return {
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1SheetElementRenderingRule
 */
const se_SheetElementRenderingRule = (input: SheetElementRenderingRule, context: __SerdeContext): any => {
  return {
    ...(input.ConfigurationOverrides != null && {
      ConfigurationOverrides: se_SheetElementConfigurationOverrides(input.ConfigurationOverrides, context),
    }),
    ...(input.Expression != null && { Expression: input.Expression }),
  };
};

/**
 * serializeAws_restJson1SheetElementRenderingRuleList
 */
const se_SheetElementRenderingRuleList = (input: SheetElementRenderingRule[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_SheetElementRenderingRule(entry, context);
    });
};

/**
 * serializeAws_restJson1SheetLayoutElementMaximizationOption
 */
const se_SheetLayoutElementMaximizationOption = (
  input: SheetLayoutElementMaximizationOption,
  context: __SerdeContext
): any => {
  return {
    ...(input.AvailabilityStatus != null && { AvailabilityStatus: input.AvailabilityStatus }),
  };
};

/**
 * serializeAws_restJson1SheetStyle
 */
const se_SheetStyle = (input: SheetStyle, context: __SerdeContext): any => {
  return {
    ...(input.Tile != null && { Tile: se_TileStyle(input.Tile, context) }),
    ...(input.TileLayout != null && { TileLayout: se_TileLayoutStyle(input.TileLayout, context) }),
  };
};

/**
 * serializeAws_restJson1SheetTextBox
 */
const se_SheetTextBox = (input: SheetTextBox, context: __SerdeContext): any => {
  return {
    ...(input.Content != null && { Content: input.Content }),
    ...(input.SheetTextBoxId != null && { SheetTextBoxId: input.SheetTextBoxId }),
  };
};

/**
 * serializeAws_restJson1SheetTextBoxList
 */
const se_SheetTextBoxList = (input: SheetTextBox[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_SheetTextBox(entry, context);
    });
};

/**
 * serializeAws_restJson1SheetVisualScopingConfiguration
 */
const se_SheetVisualScopingConfiguration = (input: SheetVisualScopingConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.Scope != null && { Scope: input.Scope }),
    ...(input.SheetId != null && { SheetId: input.SheetId }),
    ...(input.VisualIds != null && { VisualIds: se_FilteredVisualsList(input.VisualIds, context) }),
  };
};

/**
 * serializeAws_restJson1SheetVisualScopingConfigurations
 */
const se_SheetVisualScopingConfigurations = (
  input: SheetVisualScopingConfiguration[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_SheetVisualScopingConfiguration(entry, context);
    });
};

/**
 * serializeAws_restJson1ShortFormatText
 */
const se_ShortFormatText = (input: ShortFormatText, context: __SerdeContext): any => {
  return {
    ...(input.PlainText != null && { PlainText: input.PlainText }),
    ...(input.RichText != null && { RichText: input.RichText }),
  };
};

/**
 * serializeAws_restJson1SimpleClusterMarker
 */
const se_SimpleClusterMarker = (input: SimpleClusterMarker, context: __SerdeContext): any => {
  return {
    ...(input.Color != null && { Color: input.Color }),
  };
};

/**
 * serializeAws_restJson1SliderControlDisplayOptions
 */
const se_SliderControlDisplayOptions = (input: SliderControlDisplayOptions, context: __SerdeContext): any => {
  return {
    ...(input.TitleOptions != null && { TitleOptions: se_LabelOptions(input.TitleOptions, context) }),
  };
};

/**
 * serializeAws_restJson1SmallMultiplesDimensionFieldList
 */
const se_SmallMultiplesDimensionFieldList = (input: DimensionField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DimensionField(entry, context);
    });
};

/**
 * serializeAws_restJson1SmallMultiplesOptions
 */
const se_SmallMultiplesOptions = (input: SmallMultiplesOptions, context: __SerdeContext): any => {
  return {
    ...(input.MaxVisibleColumns != null && { MaxVisibleColumns: input.MaxVisibleColumns }),
    ...(input.MaxVisibleRows != null && { MaxVisibleRows: input.MaxVisibleRows }),
    ...(input.PanelConfiguration != null && {
      PanelConfiguration: se_PanelConfiguration(input.PanelConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1SnowflakeParameters
 */
const se_SnowflakeParameters = (input: SnowflakeParameters, context: __SerdeContext): any => {
  return {
    ...(input.Database != null && { Database: input.Database }),
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Warehouse != null && { Warehouse: input.Warehouse }),
  };
};

/**
 * serializeAws_restJson1Spacing
 */
const se_Spacing = (input: Spacing, context: __SerdeContext): any => {
  return {
    ...(input.Bottom != null && { Bottom: input.Bottom }),
    ...(input.Left != null && { Left: input.Left }),
    ...(input.Right != null && { Right: input.Right }),
    ...(input.Top != null && { Top: input.Top }),
  };
};

/**
 * serializeAws_restJson1SparkParameters
 */
const se_SparkParameters = (input: SparkParameters, context: __SerdeContext): any => {
  return {
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Port != null && { Port: input.Port }),
  };
};

/**
 * serializeAws_restJson1SqlServerParameters
 */
const se_SqlServerParameters = (input: SqlServerParameters, context: __SerdeContext): any => {
  return {
    ...(input.Database != null && { Database: input.Database }),
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Port != null && { Port: input.Port }),
  };
};

/**
 * serializeAws_restJson1SslProperties
 */
const se_SslProperties = (input: SslProperties, context: __SerdeContext): any => {
  return {
    ...(input.DisableSsl != null && { DisableSsl: input.DisableSsl }),
  };
};

/**
 * serializeAws_restJson1StatePersistenceConfigurations
 */
const se_StatePersistenceConfigurations = (input: StatePersistenceConfigurations, context: __SerdeContext): any => {
  return {
    ...(input.Enabled != null && { Enabled: input.Enabled }),
  };
};

/**
 * serializeAws_restJson1StringDefaultValueList
 */
const se_StringDefaultValueList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1StringDefaultValues
 */
const se_StringDefaultValues = (input: StringDefaultValues, context: __SerdeContext): any => {
  return {
    ...(input.DynamicValue != null && { DynamicValue: se_DynamicDefaultValue(input.DynamicValue, context) }),
    ...(input.StaticValues != null && { StaticValues: se_StringDefaultValueList(input.StaticValues, context) }),
  };
};

/**
 * serializeAws_restJson1StringFormatConfiguration
 */
const se_StringFormatConfiguration = (input: StringFormatConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.NullValueFormatConfiguration != null && {
      NullValueFormatConfiguration: se_NullValueFormatConfiguration(input.NullValueFormatConfiguration, context),
    }),
    ...(input.NumericFormatConfiguration != null && {
      NumericFormatConfiguration: se_NumericFormatConfiguration(input.NumericFormatConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1StringList
 */
const se_StringList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1StringParameter
 */
const se_StringParameter = (input: StringParameter, context: __SerdeContext): any => {
  return {
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Values != null && { Values: se_SensitiveStringList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1StringParameterDeclaration
 */
const se_StringParameterDeclaration = (input: StringParameterDeclaration, context: __SerdeContext): any => {
  return {
    ...(input.DefaultValues != null && { DefaultValues: se_StringDefaultValues(input.DefaultValues, context) }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.ParameterValueType != null && { ParameterValueType: input.ParameterValueType }),
    ...(input.ValueWhenUnset != null && {
      ValueWhenUnset: se_StringValueWhenUnsetConfiguration(input.ValueWhenUnset, context),
    }),
  };
};

/**
 * serializeAws_restJson1StringParameterList
 */
const se_StringParameterList = (input: StringParameter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_StringParameter(entry, context);
    });
};

/**
 * serializeAws_restJson1StringValueWhenUnsetConfiguration
 */
const se_StringValueWhenUnsetConfiguration = (
  input: StringValueWhenUnsetConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.CustomValue != null && { CustomValue: input.CustomValue }),
    ...(input.ValueWhenUnsetOption != null && { ValueWhenUnsetOption: input.ValueWhenUnsetOption }),
  };
};

/**
 * serializeAws_restJson1SubtotalOptions
 */
const se_SubtotalOptions = (input: SubtotalOptions, context: __SerdeContext): any => {
  return {
    ...(input.CustomLabel != null && { CustomLabel: input.CustomLabel }),
    ...(input.FieldLevel != null && { FieldLevel: input.FieldLevel }),
    ...(input.FieldLevelOptions != null && {
      FieldLevelOptions: se_PivotTableFieldSubtotalOptionsList(input.FieldLevelOptions, context),
    }),
    ...(input.MetricHeaderCellStyle != null && {
      MetricHeaderCellStyle: se_TableCellStyle(input.MetricHeaderCellStyle, context),
    }),
    ...(input.TotalCellStyle != null && { TotalCellStyle: se_TableCellStyle(input.TotalCellStyle, context) }),
    ...(input.TotalsVisibility != null && { TotalsVisibility: input.TotalsVisibility }),
    ...(input.ValueCellStyle != null && { ValueCellStyle: se_TableCellStyle(input.ValueCellStyle, context) }),
  };
};

/**
 * serializeAws_restJson1TableAggregatedFieldWells
 */
const se_TableAggregatedFieldWells = (input: TableAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.GroupBy != null && { GroupBy: se_DimensionFieldList(input.GroupBy, context) }),
    ...(input.Values != null && { Values: se_MeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1TableBorderOptions
 */
const se_TableBorderOptions = (input: TableBorderOptions, context: __SerdeContext): any => {
  return {
    ...(input.Color != null && { Color: input.Color }),
    ...(input.Style != null && { Style: input.Style }),
    ...(input.Thickness != null && { Thickness: input.Thickness }),
  };
};

/**
 * serializeAws_restJson1TableCellConditionalFormatting
 */
const se_TableCellConditionalFormatting = (input: TableCellConditionalFormatting, context: __SerdeContext): any => {
  return {
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.TextFormat != null && { TextFormat: se_TextConditionalFormat(input.TextFormat, context) }),
  };
};

/**
 * serializeAws_restJson1TableCellImageSizingConfiguration
 */
const se_TableCellImageSizingConfiguration = (
  input: TableCellImageSizingConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.TableCellImageScalingConfiguration != null && {
      TableCellImageScalingConfiguration: input.TableCellImageScalingConfiguration,
    }),
  };
};

/**
 * serializeAws_restJson1TableCellStyle
 */
const se_TableCellStyle = (input: TableCellStyle, context: __SerdeContext): any => {
  return {
    ...(input.BackgroundColor != null && { BackgroundColor: input.BackgroundColor }),
    ...(input.Border != null && { Border: se_GlobalTableBorderOptions(input.Border, context) }),
    ...(input.FontConfiguration != null && {
      FontConfiguration: se_FontConfiguration(input.FontConfiguration, context),
    }),
    ...(input.Height != null && { Height: input.Height }),
    ...(input.HorizontalTextAlignment != null && { HorizontalTextAlignment: input.HorizontalTextAlignment }),
    ...(input.TextWrap != null && { TextWrap: input.TextWrap }),
    ...(input.VerticalTextAlignment != null && { VerticalTextAlignment: input.VerticalTextAlignment }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1TableConditionalFormatting
 */
const se_TableConditionalFormatting = (input: TableConditionalFormatting, context: __SerdeContext): any => {
  return {
    ...(input.ConditionalFormattingOptions != null && {
      ConditionalFormattingOptions: se_TableConditionalFormattingOptionList(
        input.ConditionalFormattingOptions,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1TableConditionalFormattingOption
 */
const se_TableConditionalFormattingOption = (input: TableConditionalFormattingOption, context: __SerdeContext): any => {
  return {
    ...(input.Cell != null && { Cell: se_TableCellConditionalFormatting(input.Cell, context) }),
    ...(input.Row != null && { Row: se_TableRowConditionalFormatting(input.Row, context) }),
  };
};

/**
 * serializeAws_restJson1TableConditionalFormattingOptionList
 */
const se_TableConditionalFormattingOptionList = (
  input: TableConditionalFormattingOption[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_TableConditionalFormattingOption(entry, context);
    });
};

/**
 * serializeAws_restJson1TableConfiguration
 */
const se_TableConfiguration = (input: TableConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.FieldOptions != null && { FieldOptions: se_TableFieldOptions(input.FieldOptions, context) }),
    ...(input.FieldWells != null && { FieldWells: se_TableFieldWells(input.FieldWells, context) }),
    ...(input.PaginatedReportOptions != null && {
      PaginatedReportOptions: se_TablePaginatedReportOptions(input.PaginatedReportOptions, context),
    }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_TableSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.TableInlineVisualizations != null && {
      TableInlineVisualizations: se_TableInlineVisualizationList(input.TableInlineVisualizations, context),
    }),
    ...(input.TableOptions != null && { TableOptions: se_TableOptions(input.TableOptions, context) }),
    ...(input.TotalOptions != null && { TotalOptions: se_TotalOptions(input.TotalOptions, context) }),
  };
};

/**
 * serializeAws_restJson1TableFieldCustomIconContent
 */
const se_TableFieldCustomIconContent = (input: TableFieldCustomIconContent, context: __SerdeContext): any => {
  return {
    ...(input.Icon != null && { Icon: input.Icon }),
  };
};

/**
 * serializeAws_restJson1TableFieldCustomTextContent
 */
const se_TableFieldCustomTextContent = (input: TableFieldCustomTextContent, context: __SerdeContext): any => {
  return {
    ...(input.FontConfiguration != null && {
      FontConfiguration: se_FontConfiguration(input.FontConfiguration, context),
    }),
    ...(input.Value != null && { Value: input.Value }),
  };
};

/**
 * serializeAws_restJson1TableFieldImageConfiguration
 */
const se_TableFieldImageConfiguration = (input: TableFieldImageConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.SizingOptions != null && {
      SizingOptions: se_TableCellImageSizingConfiguration(input.SizingOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1TableFieldLinkConfiguration
 */
const se_TableFieldLinkConfiguration = (input: TableFieldLinkConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.Content != null && { Content: se_TableFieldLinkContentConfiguration(input.Content, context) }),
    ...(input.Target != null && { Target: input.Target }),
  };
};

/**
 * serializeAws_restJson1TableFieldLinkContentConfiguration
 */
const se_TableFieldLinkContentConfiguration = (
  input: TableFieldLinkContentConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.CustomIconContent != null && {
      CustomIconContent: se_TableFieldCustomIconContent(input.CustomIconContent, context),
    }),
    ...(input.CustomTextContent != null && {
      CustomTextContent: se_TableFieldCustomTextContent(input.CustomTextContent, context),
    }),
  };
};

/**
 * serializeAws_restJson1TableFieldOption
 */
const se_TableFieldOption = (input: TableFieldOption, context: __SerdeContext): any => {
  return {
    ...(input.CustomLabel != null && { CustomLabel: input.CustomLabel }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.URLStyling != null && { URLStyling: se_TableFieldURLConfiguration(input.URLStyling, context) }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
    ...(input.Width != null && { Width: input.Width }),
  };
};

/**
 * serializeAws_restJson1TableFieldOptionList
 */
const se_TableFieldOptionList = (input: TableFieldOption[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_TableFieldOption(entry, context);
    });
};

/**
 * serializeAws_restJson1TableFieldOptions
 */
const se_TableFieldOptions = (input: TableFieldOptions, context: __SerdeContext): any => {
  return {
    ...(input.Order != null && { Order: se_FieldOrderList(input.Order, context) }),
    ...(input.SelectedFieldOptions != null && {
      SelectedFieldOptions: se_TableFieldOptionList(input.SelectedFieldOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1TableFieldURLConfiguration
 */
const se_TableFieldURLConfiguration = (input: TableFieldURLConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.ImageConfiguration != null && {
      ImageConfiguration: se_TableFieldImageConfiguration(input.ImageConfiguration, context),
    }),
    ...(input.LinkConfiguration != null && {
      LinkConfiguration: se_TableFieldLinkConfiguration(input.LinkConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1TableFieldWells
 */
const se_TableFieldWells = (input: TableFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.TableAggregatedFieldWells != null && {
      TableAggregatedFieldWells: se_TableAggregatedFieldWells(input.TableAggregatedFieldWells, context),
    }),
    ...(input.TableUnaggregatedFieldWells != null && {
      TableUnaggregatedFieldWells: se_TableUnaggregatedFieldWells(input.TableUnaggregatedFieldWells, context),
    }),
  };
};

/**
 * serializeAws_restJson1TableInlineVisualization
 */
const se_TableInlineVisualization = (input: TableInlineVisualization, context: __SerdeContext): any => {
  return {
    ...(input.DataBars != null && { DataBars: se_DataBarsOptions(input.DataBars, context) }),
  };
};

/**
 * serializeAws_restJson1TableInlineVisualizationList
 */
const se_TableInlineVisualizationList = (input: TableInlineVisualization[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_TableInlineVisualization(entry, context);
    });
};

/**
 * serializeAws_restJson1TableOptions
 */
const se_TableOptions = (input: TableOptions, context: __SerdeContext): any => {
  return {
    ...(input.CellStyle != null && { CellStyle: se_TableCellStyle(input.CellStyle, context) }),
    ...(input.HeaderStyle != null && { HeaderStyle: se_TableCellStyle(input.HeaderStyle, context) }),
    ...(input.Orientation != null && { Orientation: input.Orientation }),
    ...(input.RowAlternateColorOptions != null && {
      RowAlternateColorOptions: se_RowAlternateColorOptions(input.RowAlternateColorOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1TablePaginatedReportOptions
 */
const se_TablePaginatedReportOptions = (input: TablePaginatedReportOptions, context: __SerdeContext): any => {
  return {
    ...(input.OverflowColumnHeaderVisibility != null && {
      OverflowColumnHeaderVisibility: input.OverflowColumnHeaderVisibility,
    }),
    ...(input.VerticalOverflowVisibility != null && { VerticalOverflowVisibility: input.VerticalOverflowVisibility }),
  };
};

/**
 * serializeAws_restJson1TableRowConditionalFormatting
 */
const se_TableRowConditionalFormatting = (input: TableRowConditionalFormatting, context: __SerdeContext): any => {
  return {
    ...(input.BackgroundColor != null && {
      BackgroundColor: se_ConditionalFormattingColor(input.BackgroundColor, context),
    }),
    ...(input.TextColor != null && { TextColor: se_ConditionalFormattingColor(input.TextColor, context) }),
  };
};

/**
 * serializeAws_restJson1TableSideBorderOptions
 */
const se_TableSideBorderOptions = (input: TableSideBorderOptions, context: __SerdeContext): any => {
  return {
    ...(input.Bottom != null && { Bottom: se_TableBorderOptions(input.Bottom, context) }),
    ...(input.InnerHorizontal != null && { InnerHorizontal: se_TableBorderOptions(input.InnerHorizontal, context) }),
    ...(input.InnerVertical != null && { InnerVertical: se_TableBorderOptions(input.InnerVertical, context) }),
    ...(input.Left != null && { Left: se_TableBorderOptions(input.Left, context) }),
    ...(input.Right != null && { Right: se_TableBorderOptions(input.Right, context) }),
    ...(input.Top != null && { Top: se_TableBorderOptions(input.Top, context) }),
  };
};

/**
 * serializeAws_restJson1TableSortConfiguration
 */
const se_TableSortConfiguration = (input: TableSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.PaginationConfiguration != null && {
      PaginationConfiguration: se_PaginationConfiguration(input.PaginationConfiguration, context),
    }),
    ...(input.RowSort != null && { RowSort: se_RowSortList(input.RowSort, context) }),
  };
};

/**
 * serializeAws_restJson1TableUnaggregatedFieldWells
 */
const se_TableUnaggregatedFieldWells = (input: TableUnaggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.Values != null && { Values: se_UnaggregatedFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1TableVisual
 */
const se_TableVisual = (input: TableVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_TableConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ConditionalFormatting != null && {
      ConditionalFormatting: se_TableConditionalFormatting(input.ConditionalFormatting, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1Tag
 */
const se_Tag = (input: Tag, context: __SerdeContext): any => {
  return {
    ...(input.Key != null && { Key: input.Key }),
    ...(input.Value != null && { Value: input.Value }),
  };
};

/**
 * serializeAws_restJson1TagColumnOperation
 */
const se_TagColumnOperation = (input: TagColumnOperation, context: __SerdeContext): any => {
  return {
    ...(input.ColumnName != null && { ColumnName: input.ColumnName }),
    ...(input.Tags != null && { Tags: se_ColumnTagList(input.Tags, context) }),
  };
};

/**
 * serializeAws_restJson1TagList
 */
const se_TagList = (input: Tag[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_Tag(entry, context);
    });
};

/**
 * serializeAws_restJson1TargetVisualList
 */
const se_TargetVisualList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return entry;
    });
};

/**
 * serializeAws_restJson1TemplateSourceAnalysis
 */
const se_TemplateSourceAnalysis = (input: TemplateSourceAnalysis, context: __SerdeContext): any => {
  return {
    ...(input.Arn != null && { Arn: input.Arn }),
    ...(input.DataSetReferences != null && {
      DataSetReferences: se_DataSetReferenceList(input.DataSetReferences, context),
    }),
  };
};

/**
 * serializeAws_restJson1TemplateSourceEntity
 */
const se_TemplateSourceEntity = (input: TemplateSourceEntity, context: __SerdeContext): any => {
  return {
    ...(input.SourceAnalysis != null && { SourceAnalysis: se_TemplateSourceAnalysis(input.SourceAnalysis, context) }),
    ...(input.SourceTemplate != null && { SourceTemplate: se_TemplateSourceTemplate(input.SourceTemplate, context) }),
  };
};

/**
 * serializeAws_restJson1TemplateSourceTemplate
 */
const se_TemplateSourceTemplate = (input: TemplateSourceTemplate, context: __SerdeContext): any => {
  return {
    ...(input.Arn != null && { Arn: input.Arn }),
  };
};

/**
 * serializeAws_restJson1TemplateVersionDefinition
 */
const se_TemplateVersionDefinition = (input: TemplateVersionDefinition, context: __SerdeContext): any => {
  return {
    ...(input.AnalysisDefaults != null && { AnalysisDefaults: se_AnalysisDefaults(input.AnalysisDefaults, context) }),
    ...(input.CalculatedFields != null && { CalculatedFields: se_CalculatedFields(input.CalculatedFields, context) }),
    ...(input.ColumnConfigurations != null && {
      ColumnConfigurations: se_ColumnConfigurationList(input.ColumnConfigurations, context),
    }),
    ...(input.DataSetConfigurations != null && {
      DataSetConfigurations: se_DataSetConfigurationList(input.DataSetConfigurations, context),
    }),
    ...(input.FilterGroups != null && { FilterGroups: se_FilterGroupList(input.FilterGroups, context) }),
    ...(input.ParameterDeclarations != null && {
      ParameterDeclarations: se_ParameterDeclarationList(input.ParameterDeclarations, context),
    }),
    ...(input.Sheets != null && { Sheets: se_SheetDefinitionList(input.Sheets, context) }),
  };
};

/**
 * serializeAws_restJson1TeradataParameters
 */
const se_TeradataParameters = (input: TeradataParameters, context: __SerdeContext): any => {
  return {
    ...(input.Database != null && { Database: input.Database }),
    ...(input.Host != null && { Host: input.Host }),
    ...(input.Port != null && { Port: input.Port }),
  };
};

/**
 * serializeAws_restJson1TextAreaControlDisplayOptions
 */
const se_TextAreaControlDisplayOptions = (input: TextAreaControlDisplayOptions, context: __SerdeContext): any => {
  return {
    ...(input.PlaceholderOptions != null && {
      PlaceholderOptions: se_TextControlPlaceholderOptions(input.PlaceholderOptions, context),
    }),
    ...(input.TitleOptions != null && { TitleOptions: se_LabelOptions(input.TitleOptions, context) }),
  };
};

/**
 * serializeAws_restJson1TextConditionalFormat
 */
const se_TextConditionalFormat = (input: TextConditionalFormat, context: __SerdeContext): any => {
  return {
    ...(input.BackgroundColor != null && {
      BackgroundColor: se_ConditionalFormattingColor(input.BackgroundColor, context),
    }),
    ...(input.Icon != null && { Icon: se_ConditionalFormattingIcon(input.Icon, context) }),
    ...(input.TextColor != null && { TextColor: se_ConditionalFormattingColor(input.TextColor, context) }),
  };
};

/**
 * serializeAws_restJson1TextControlPlaceholderOptions
 */
const se_TextControlPlaceholderOptions = (input: TextControlPlaceholderOptions, context: __SerdeContext): any => {
  return {
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1TextFieldControlDisplayOptions
 */
const se_TextFieldControlDisplayOptions = (input: TextFieldControlDisplayOptions, context: __SerdeContext): any => {
  return {
    ...(input.PlaceholderOptions != null && {
      PlaceholderOptions: se_TextControlPlaceholderOptions(input.PlaceholderOptions, context),
    }),
    ...(input.TitleOptions != null && { TitleOptions: se_LabelOptions(input.TitleOptions, context) }),
  };
};

/**
 * serializeAws_restJson1ThemeConfiguration
 */
const se_ThemeConfiguration = (input: ThemeConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.DataColorPalette != null && { DataColorPalette: se_DataColorPalette(input.DataColorPalette, context) }),
    ...(input.Sheet != null && { Sheet: se_SheetStyle(input.Sheet, context) }),
    ...(input.Typography != null && { Typography: se_Typography(input.Typography, context) }),
    ...(input.UIColorPalette != null && { UIColorPalette: se_UIColorPalette(input.UIColorPalette, context) }),
  };
};

/**
 * serializeAws_restJson1ThousandSeparatorOptions
 */
const se_ThousandSeparatorOptions = (input: ThousandSeparatorOptions, context: __SerdeContext): any => {
  return {
    ...(input.Symbol != null && { Symbol: input.Symbol }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1TileLayoutStyle
 */
const se_TileLayoutStyle = (input: TileLayoutStyle, context: __SerdeContext): any => {
  return {
    ...(input.Gutter != null && { Gutter: se_GutterStyle(input.Gutter, context) }),
    ...(input.Margin != null && { Margin: se_MarginStyle(input.Margin, context) }),
  };
};

/**
 * serializeAws_restJson1TileStyle
 */
const se_TileStyle = (input: TileStyle, context: __SerdeContext): any => {
  return {
    ...(input.Border != null && { Border: se_BorderStyle(input.Border, context) }),
  };
};

/**
 * serializeAws_restJson1TimeBasedForecastProperties
 */
const se_TimeBasedForecastProperties = (input: TimeBasedForecastProperties, context: __SerdeContext): any => {
  return {
    ...(input.LowerBoundary != null && { LowerBoundary: __serializeFloat(input.LowerBoundary) }),
    ...(input.PeriodsBackward != null && { PeriodsBackward: input.PeriodsBackward }),
    ...(input.PeriodsForward != null && { PeriodsForward: input.PeriodsForward }),
    ...(input.PredictionInterval != null && { PredictionInterval: input.PredictionInterval }),
    ...(input.Seasonality != null && { Seasonality: input.Seasonality }),
    ...(input.UpperBoundary != null && { UpperBoundary: __serializeFloat(input.UpperBoundary) }),
  };
};

/**
 * serializeAws_restJson1TimeEqualityFilter
 */
const se_TimeEqualityFilter = (input: TimeEqualityFilter, context: __SerdeContext): any => {
  return {
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.FilterId != null && { FilterId: input.FilterId }),
    ...(input.ParameterName != null && { ParameterName: input.ParameterName }),
    ...(input.TimeGranularity != null && { TimeGranularity: input.TimeGranularity }),
    ...(input.Value != null && { Value: Math.round(input.Value.getTime() / 1000) }),
  };
};

/**
 * serializeAws_restJson1TimeRangeDrillDownFilter
 */
const se_TimeRangeDrillDownFilter = (input: TimeRangeDrillDownFilter, context: __SerdeContext): any => {
  return {
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.RangeMaximum != null && { RangeMaximum: Math.round(input.RangeMaximum.getTime() / 1000) }),
    ...(input.RangeMinimum != null && { RangeMinimum: Math.round(input.RangeMinimum.getTime() / 1000) }),
    ...(input.TimeGranularity != null && { TimeGranularity: input.TimeGranularity }),
  };
};

/**
 * serializeAws_restJson1TimeRangeFilter
 */
const se_TimeRangeFilter = (input: TimeRangeFilter, context: __SerdeContext): any => {
  return {
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.ExcludePeriodConfiguration != null && {
      ExcludePeriodConfiguration: se_ExcludePeriodConfiguration(input.ExcludePeriodConfiguration, context),
    }),
    ...(input.FilterId != null && { FilterId: input.FilterId }),
    ...(input.IncludeMaximum != null && { IncludeMaximum: input.IncludeMaximum }),
    ...(input.IncludeMinimum != null && { IncludeMinimum: input.IncludeMinimum }),
    ...(input.NullOption != null && { NullOption: input.NullOption }),
    ...(input.RangeMaximumValue != null && {
      RangeMaximumValue: se_TimeRangeFilterValue(input.RangeMaximumValue, context),
    }),
    ...(input.RangeMinimumValue != null && {
      RangeMinimumValue: se_TimeRangeFilterValue(input.RangeMinimumValue, context),
    }),
    ...(input.TimeGranularity != null && { TimeGranularity: input.TimeGranularity }),
  };
};

/**
 * serializeAws_restJson1TimeRangeFilterValue
 */
const se_TimeRangeFilterValue = (input: TimeRangeFilterValue, context: __SerdeContext): any => {
  return {
    ...(input.Parameter != null && { Parameter: input.Parameter }),
    ...(input.RollingDate != null && { RollingDate: se_RollingDateConfiguration(input.RollingDate, context) }),
    ...(input.StaticValue != null && { StaticValue: Math.round(input.StaticValue.getTime() / 1000) }),
  };
};

/**
 * serializeAws_restJson1TooltipItem
 */
const se_TooltipItem = (input: TooltipItem, context: __SerdeContext): any => {
  return {
    ...(input.ColumnTooltipItem != null && {
      ColumnTooltipItem: se_ColumnTooltipItem(input.ColumnTooltipItem, context),
    }),
    ...(input.FieldTooltipItem != null && { FieldTooltipItem: se_FieldTooltipItem(input.FieldTooltipItem, context) }),
  };
};

/**
 * serializeAws_restJson1TooltipItemList
 */
const se_TooltipItemList = (input: TooltipItem[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_TooltipItem(entry, context);
    });
};

/**
 * serializeAws_restJson1TooltipOptions
 */
const se_TooltipOptions = (input: TooltipOptions, context: __SerdeContext): any => {
  return {
    ...(input.FieldBasedTooltip != null && {
      FieldBasedTooltip: se_FieldBasedTooltip(input.FieldBasedTooltip, context),
    }),
    ...(input.SelectedTooltipType != null && { SelectedTooltipType: input.SelectedTooltipType }),
    ...(input.TooltipVisibility != null && { TooltipVisibility: input.TooltipVisibility }),
  };
};

/**
 * serializeAws_restJson1TopBottomFilter
 */
const se_TopBottomFilter = (input: TopBottomFilter, context: __SerdeContext): any => {
  return {
    ...(input.AggregationSortConfigurations != null && {
      AggregationSortConfigurations: se_AggregationSortConfigurationList(input.AggregationSortConfigurations, context),
    }),
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.FilterId != null && { FilterId: input.FilterId }),
    ...(input.Limit != null && { Limit: input.Limit }),
    ...(input.ParameterName != null && { ParameterName: input.ParameterName }),
    ...(input.TimeGranularity != null && { TimeGranularity: input.TimeGranularity }),
  };
};

/**
 * serializeAws_restJson1TopBottomMoversComputation
 */
const se_TopBottomMoversComputation = (input: TopBottomMoversComputation, context: __SerdeContext): any => {
  return {
    ...(input.Category != null && { Category: se_DimensionField(input.Category, context) }),
    ...(input.ComputationId != null && { ComputationId: input.ComputationId }),
    ...(input.MoverSize != null && { MoverSize: input.MoverSize }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.SortOrder != null && { SortOrder: input.SortOrder }),
    ...(input.Time != null && { Time: se_DimensionField(input.Time, context) }),
    ...(input.Type != null && { Type: input.Type }),
    ...(input.Value != null && { Value: se_MeasureField(input.Value, context) }),
  };
};

/**
 * serializeAws_restJson1TopBottomRankedComputation
 */
const se_TopBottomRankedComputation = (input: TopBottomRankedComputation, context: __SerdeContext): any => {
  return {
    ...(input.Category != null && { Category: se_DimensionField(input.Category, context) }),
    ...(input.ComputationId != null && { ComputationId: input.ComputationId }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.ResultSize != null && { ResultSize: input.ResultSize }),
    ...(input.Type != null && { Type: input.Type }),
    ...(input.Value != null && { Value: se_MeasureField(input.Value, context) }),
  };
};

/**
 * serializeAws_restJson1TotalAggregationComputation
 */
const se_TotalAggregationComputation = (input: TotalAggregationComputation, context: __SerdeContext): any => {
  return {
    ...(input.ComputationId != null && { ComputationId: input.ComputationId }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Value != null && { Value: se_MeasureField(input.Value, context) }),
  };
};

/**
 * serializeAws_restJson1TotalOptions
 */
const se_TotalOptions = (input: TotalOptions, context: __SerdeContext): any => {
  return {
    ...(input.CustomLabel != null && { CustomLabel: input.CustomLabel }),
    ...(input.Placement != null && { Placement: input.Placement }),
    ...(input.ScrollStatus != null && { ScrollStatus: input.ScrollStatus }),
    ...(input.TotalCellStyle != null && { TotalCellStyle: se_TableCellStyle(input.TotalCellStyle, context) }),
    ...(input.TotalsVisibility != null && { TotalsVisibility: input.TotalsVisibility }),
  };
};

/**
 * serializeAws_restJson1TransformOperation
 */
const se_TransformOperation = (input: TransformOperation, context: __SerdeContext): any => {
  return TransformOperation.visit(input, {
    CastColumnTypeOperation: (value) => ({ CastColumnTypeOperation: se_CastColumnTypeOperation(value, context) }),
    CreateColumnsOperation: (value) => ({ CreateColumnsOperation: se_CreateColumnsOperation(value, context) }),
    FilterOperation: (value) => ({ FilterOperation: se_FilterOperation(value, context) }),
    ProjectOperation: (value) => ({ ProjectOperation: se_ProjectOperation(value, context) }),
    RenameColumnOperation: (value) => ({ RenameColumnOperation: se_RenameColumnOperation(value, context) }),
    TagColumnOperation: (value) => ({ TagColumnOperation: se_TagColumnOperation(value, context) }),
    UntagColumnOperation: (value) => ({ UntagColumnOperation: se_UntagColumnOperation(value, context) }),
    _: (name, value) => ({ name: value } as any),
  });
};

/**
 * serializeAws_restJson1TransformOperationList
 */
const se_TransformOperationList = (input: TransformOperation[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_TransformOperation(entry, context);
    });
};

/**
 * serializeAws_restJson1TreeMapAggregatedFieldWells
 */
const se_TreeMapAggregatedFieldWells = (input: TreeMapAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.Colors != null && { Colors: se_TreeMapMeasureFieldList(input.Colors, context) }),
    ...(input.Groups != null && { Groups: se_TreeMapDimensionFieldList(input.Groups, context) }),
    ...(input.Sizes != null && { Sizes: se_TreeMapMeasureFieldList(input.Sizes, context) }),
  };
};

/**
 * serializeAws_restJson1TreeMapConfiguration
 */
const se_TreeMapConfiguration = (input: TreeMapConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.ColorLabelOptions != null && {
      ColorLabelOptions: se_ChartAxisLabelOptions(input.ColorLabelOptions, context),
    }),
    ...(input.ColorScale != null && { ColorScale: se_ColorScale(input.ColorScale, context) }),
    ...(input.DataLabels != null && { DataLabels: se_DataLabelOptions(input.DataLabels, context) }),
    ...(input.FieldWells != null && { FieldWells: se_TreeMapFieldWells(input.FieldWells, context) }),
    ...(input.GroupLabelOptions != null && {
      GroupLabelOptions: se_ChartAxisLabelOptions(input.GroupLabelOptions, context),
    }),
    ...(input.Legend != null && { Legend: se_LegendOptions(input.Legend, context) }),
    ...(input.SizeLabelOptions != null && {
      SizeLabelOptions: se_ChartAxisLabelOptions(input.SizeLabelOptions, context),
    }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_TreeMapSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.Tooltip != null && { Tooltip: se_TooltipOptions(input.Tooltip, context) }),
  };
};

/**
 * serializeAws_restJson1TreeMapDimensionFieldList
 */
const se_TreeMapDimensionFieldList = (input: DimensionField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DimensionField(entry, context);
    });
};

/**
 * serializeAws_restJson1TreeMapFieldWells
 */
const se_TreeMapFieldWells = (input: TreeMapFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.TreeMapAggregatedFieldWells != null && {
      TreeMapAggregatedFieldWells: se_TreeMapAggregatedFieldWells(input.TreeMapAggregatedFieldWells, context),
    }),
  };
};

/**
 * serializeAws_restJson1TreeMapMeasureFieldList
 */
const se_TreeMapMeasureFieldList = (input: MeasureField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_MeasureField(entry, context);
    });
};

/**
 * serializeAws_restJson1TreeMapSortConfiguration
 */
const se_TreeMapSortConfiguration = (input: TreeMapSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.TreeMapGroupItemsLimitConfiguration != null && {
      TreeMapGroupItemsLimitConfiguration: se_ItemsLimitConfiguration(
        input.TreeMapGroupItemsLimitConfiguration,
        context
      ),
    }),
    ...(input.TreeMapSort != null && { TreeMapSort: se_FieldSortOptionsList(input.TreeMapSort, context) }),
  };
};

/**
 * serializeAws_restJson1TreeMapVisual
 */
const se_TreeMapVisual = (input: TreeMapVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_TreeMapConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1TrendArrowOptions
 */
const se_TrendArrowOptions = (input: TrendArrowOptions, context: __SerdeContext): any => {
  return {
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1TwitterParameters
 */
const se_TwitterParameters = (input: TwitterParameters, context: __SerdeContext): any => {
  return {
    ...(input.MaxRows != null && { MaxRows: input.MaxRows }),
    ...(input.Query != null && { Query: input.Query }),
  };
};

/**
 * serializeAws_restJson1Typography
 */
const se_Typography = (input: Typography, context: __SerdeContext): any => {
  return {
    ...(input.FontFamilies != null && { FontFamilies: se_FontList(input.FontFamilies, context) }),
  };
};

/**
 * serializeAws_restJson1UIColorPalette
 */
const se_UIColorPalette = (input: UIColorPalette, context: __SerdeContext): any => {
  return {
    ...(input.Accent != null && { Accent: input.Accent }),
    ...(input.AccentForeground != null && { AccentForeground: input.AccentForeground }),
    ...(input.Danger != null && { Danger: input.Danger }),
    ...(input.DangerForeground != null && { DangerForeground: input.DangerForeground }),
    ...(input.Dimension != null && { Dimension: input.Dimension }),
    ...(input.DimensionForeground != null && { DimensionForeground: input.DimensionForeground }),
    ...(input.Measure != null && { Measure: input.Measure }),
    ...(input.MeasureForeground != null && { MeasureForeground: input.MeasureForeground }),
    ...(input.PrimaryBackground != null && { PrimaryBackground: input.PrimaryBackground }),
    ...(input.PrimaryForeground != null && { PrimaryForeground: input.PrimaryForeground }),
    ...(input.SecondaryBackground != null && { SecondaryBackground: input.SecondaryBackground }),
    ...(input.SecondaryForeground != null && { SecondaryForeground: input.SecondaryForeground }),
    ...(input.Success != null && { Success: input.Success }),
    ...(input.SuccessForeground != null && { SuccessForeground: input.SuccessForeground }),
    ...(input.Warning != null && { Warning: input.Warning }),
    ...(input.WarningForeground != null && { WarningForeground: input.WarningForeground }),
  };
};

/**
 * serializeAws_restJson1UnaggregatedField
 */
const se_UnaggregatedField = (input: UnaggregatedField, context: __SerdeContext): any => {
  return {
    ...(input.Column != null && { Column: se_ColumnIdentifier(input.Column, context) }),
    ...(input.FieldId != null && { FieldId: input.FieldId }),
    ...(input.FormatConfiguration != null && {
      FormatConfiguration: se_FormatConfiguration(input.FormatConfiguration, context),
    }),
  };
};

/**
 * serializeAws_restJson1UnaggregatedFieldList
 */
const se_UnaggregatedFieldList = (input: UnaggregatedField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_UnaggregatedField(entry, context);
    });
};

/**
 * serializeAws_restJson1UniqueValuesComputation
 */
const se_UniqueValuesComputation = (input: UniqueValuesComputation, context: __SerdeContext): any => {
  return {
    ...(input.Category != null && { Category: se_DimensionField(input.Category, context) }),
    ...(input.ComputationId != null && { ComputationId: input.ComputationId }),
    ...(input.Name != null && { Name: input.Name }),
  };
};

/**
 * serializeAws_restJson1UntagColumnOperation
 */
const se_UntagColumnOperation = (input: UntagColumnOperation, context: __SerdeContext): any => {
  return {
    ...(input.ColumnName != null && { ColumnName: input.ColumnName }),
    ...(input.TagNames != null && { TagNames: se_ColumnTagNames(input.TagNames, context) }),
  };
};

/**
 * serializeAws_restJson1UpdateLinkPermissionList
 */
const se_UpdateLinkPermissionList = (input: ResourcePermission[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ResourcePermission(entry, context);
    });
};

/**
 * serializeAws_restJson1UpdateResourcePermissionList
 */
const se_UpdateResourcePermissionList = (input: ResourcePermission[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_ResourcePermission(entry, context);
    });
};

/**
 * serializeAws_restJson1UploadSettings
 */
const se_UploadSettings = (input: UploadSettings, context: __SerdeContext): any => {
  return {
    ...(input.ContainsHeader != null && { ContainsHeader: input.ContainsHeader }),
    ...(input.Delimiter != null && { Delimiter: input.Delimiter }),
    ...(input.Format != null && { Format: input.Format }),
    ...(input.StartFromRow != null && { StartFromRow: input.StartFromRow }),
    ...(input.TextQualifier != null && { TextQualifier: input.TextQualifier }),
  };
};

/**
 * serializeAws_restJson1VisibleRangeOptions
 */
const se_VisibleRangeOptions = (input: VisibleRangeOptions, context: __SerdeContext): any => {
  return {
    ...(input.PercentRange != null && { PercentRange: se_PercentVisibleRange(input.PercentRange, context) }),
  };
};

/**
 * serializeAws_restJson1Visual
 */
const se_Visual = (input: Visual, context: __SerdeContext): any => {
  return {
    ...(input.BarChartVisual != null && { BarChartVisual: se_BarChartVisual(input.BarChartVisual, context) }),
    ...(input.BoxPlotVisual != null && { BoxPlotVisual: se_BoxPlotVisual(input.BoxPlotVisual, context) }),
    ...(input.ComboChartVisual != null && { ComboChartVisual: se_ComboChartVisual(input.ComboChartVisual, context) }),
    ...(input.CustomContentVisual != null && {
      CustomContentVisual: se_CustomContentVisual(input.CustomContentVisual, context),
    }),
    ...(input.EmptyVisual != null && { EmptyVisual: se_EmptyVisual(input.EmptyVisual, context) }),
    ...(input.FilledMapVisual != null && { FilledMapVisual: se_FilledMapVisual(input.FilledMapVisual, context) }),
    ...(input.FunnelChartVisual != null && {
      FunnelChartVisual: se_FunnelChartVisual(input.FunnelChartVisual, context),
    }),
    ...(input.GaugeChartVisual != null && { GaugeChartVisual: se_GaugeChartVisual(input.GaugeChartVisual, context) }),
    ...(input.GeospatialMapVisual != null && {
      GeospatialMapVisual: se_GeospatialMapVisual(input.GeospatialMapVisual, context),
    }),
    ...(input.HeatMapVisual != null && { HeatMapVisual: se_HeatMapVisual(input.HeatMapVisual, context) }),
    ...(input.HistogramVisual != null && { HistogramVisual: se_HistogramVisual(input.HistogramVisual, context) }),
    ...(input.InsightVisual != null && { InsightVisual: se_InsightVisual(input.InsightVisual, context) }),
    ...(input.KPIVisual != null && { KPIVisual: se_KPIVisual(input.KPIVisual, context) }),
    ...(input.LineChartVisual != null && { LineChartVisual: se_LineChartVisual(input.LineChartVisual, context) }),
    ...(input.PieChartVisual != null && { PieChartVisual: se_PieChartVisual(input.PieChartVisual, context) }),
    ...(input.PivotTableVisual != null && { PivotTableVisual: se_PivotTableVisual(input.PivotTableVisual, context) }),
    ...(input.RadarChartVisual != null && { RadarChartVisual: se_RadarChartVisual(input.RadarChartVisual, context) }),
    ...(input.SankeyDiagramVisual != null && {
      SankeyDiagramVisual: se_SankeyDiagramVisual(input.SankeyDiagramVisual, context),
    }),
    ...(input.ScatterPlotVisual != null && {
      ScatterPlotVisual: se_ScatterPlotVisual(input.ScatterPlotVisual, context),
    }),
    ...(input.TableVisual != null && { TableVisual: se_TableVisual(input.TableVisual, context) }),
    ...(input.TreeMapVisual != null && { TreeMapVisual: se_TreeMapVisual(input.TreeMapVisual, context) }),
    ...(input.WaterfallVisual != null && { WaterfallVisual: se_WaterfallVisual(input.WaterfallVisual, context) }),
    ...(input.WordCloudVisual != null && { WordCloudVisual: se_WordCloudVisual(input.WordCloudVisual, context) }),
  };
};

/**
 * serializeAws_restJson1VisualAxisSortOption
 */
const se_VisualAxisSortOption = (input: VisualAxisSortOption, context: __SerdeContext): any => {
  return {
    ...(input.AvailabilityStatus != null && { AvailabilityStatus: input.AvailabilityStatus }),
  };
};

/**
 * serializeAws_restJson1VisualCustomAction
 */
const se_VisualCustomAction = (input: VisualCustomAction, context: __SerdeContext): any => {
  return {
    ...(input.ActionOperations != null && {
      ActionOperations: se_VisualCustomActionOperationList(input.ActionOperations, context),
    }),
    ...(input.CustomActionId != null && { CustomActionId: input.CustomActionId }),
    ...(input.Name != null && { Name: input.Name }),
    ...(input.Status != null && { Status: input.Status }),
    ...(input.Trigger != null && { Trigger: input.Trigger }),
  };
};

/**
 * serializeAws_restJson1VisualCustomActionList
 */
const se_VisualCustomActionList = (input: VisualCustomAction[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_VisualCustomAction(entry, context);
    });
};

/**
 * serializeAws_restJson1VisualCustomActionOperation
 */
const se_VisualCustomActionOperation = (input: VisualCustomActionOperation, context: __SerdeContext): any => {
  return {
    ...(input.FilterOperation != null && {
      FilterOperation: se_CustomActionFilterOperation(input.FilterOperation, context),
    }),
    ...(input.NavigationOperation != null && {
      NavigationOperation: se_CustomActionNavigationOperation(input.NavigationOperation, context),
    }),
    ...(input.SetParametersOperation != null && {
      SetParametersOperation: se_CustomActionSetParametersOperation(input.SetParametersOperation, context),
    }),
    ...(input.URLOperation != null && { URLOperation: se_CustomActionURLOperation(input.URLOperation, context) }),
  };
};

/**
 * serializeAws_restJson1VisualCustomActionOperationList
 */
const se_VisualCustomActionOperationList = (input: VisualCustomActionOperation[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_VisualCustomActionOperation(entry, context);
    });
};

/**
 * serializeAws_restJson1VisualList
 */
const se_VisualList = (input: Visual[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_Visual(entry, context);
    });
};

/**
 * serializeAws_restJson1VisualMenuOption
 */
const se_VisualMenuOption = (input: VisualMenuOption, context: __SerdeContext): any => {
  return {
    ...(input.AvailabilityStatus != null && { AvailabilityStatus: input.AvailabilityStatus }),
  };
};

/**
 * serializeAws_restJson1VisualPalette
 */
const se_VisualPalette = (input: VisualPalette, context: __SerdeContext): any => {
  return {
    ...(input.ChartColor != null && { ChartColor: input.ChartColor }),
    ...(input.ColorMap != null && { ColorMap: se_DataPathColorList(input.ColorMap, context) }),
  };
};

/**
 * serializeAws_restJson1VisualSubtitleLabelOptions
 */
const se_VisualSubtitleLabelOptions = (input: VisualSubtitleLabelOptions, context: __SerdeContext): any => {
  return {
    ...(input.FormatText != null && { FormatText: se_LongFormatText(input.FormatText, context) }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1VisualTitleLabelOptions
 */
const se_VisualTitleLabelOptions = (input: VisualTitleLabelOptions, context: __SerdeContext): any => {
  return {
    ...(input.FormatText != null && { FormatText: se_ShortFormatText(input.FormatText, context) }),
    ...(input.Visibility != null && { Visibility: input.Visibility }),
  };
};

/**
 * serializeAws_restJson1VpcConnectionProperties
 */
const se_VpcConnectionProperties = (input: VpcConnectionProperties, context: __SerdeContext): any => {
  return {
    ...(input.VpcConnectionArn != null && { VpcConnectionArn: input.VpcConnectionArn }),
  };
};

/**
 * serializeAws_restJson1WaterfallChartAggregatedFieldWells
 */
const se_WaterfallChartAggregatedFieldWells = (
  input: WaterfallChartAggregatedFieldWells,
  context: __SerdeContext
): any => {
  return {
    ...(input.Breakdowns != null && { Breakdowns: se_DimensionFieldList(input.Breakdowns, context) }),
    ...(input.Categories != null && { Categories: se_DimensionFieldList(input.Categories, context) }),
    ...(input.Values != null && { Values: se_MeasureFieldList(input.Values, context) }),
  };
};

/**
 * serializeAws_restJson1WaterfallChartConfiguration
 */
const se_WaterfallChartConfiguration = (input: WaterfallChartConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryAxisDisplayOptions != null && {
      CategoryAxisDisplayOptions: se_AxisDisplayOptions(input.CategoryAxisDisplayOptions, context),
    }),
    ...(input.CategoryAxisLabelOptions != null && {
      CategoryAxisLabelOptions: se_ChartAxisLabelOptions(input.CategoryAxisLabelOptions, context),
    }),
    ...(input.DataLabels != null && { DataLabels: se_DataLabelOptions(input.DataLabels, context) }),
    ...(input.FieldWells != null && { FieldWells: se_WaterfallChartFieldWells(input.FieldWells, context) }),
    ...(input.Legend != null && { Legend: se_LegendOptions(input.Legend, context) }),
    ...(input.PrimaryYAxisDisplayOptions != null && {
      PrimaryYAxisDisplayOptions: se_AxisDisplayOptions(input.PrimaryYAxisDisplayOptions, context),
    }),
    ...(input.PrimaryYAxisLabelOptions != null && {
      PrimaryYAxisLabelOptions: se_ChartAxisLabelOptions(input.PrimaryYAxisLabelOptions, context),
    }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_WaterfallChartSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.VisualPalette != null && { VisualPalette: se_VisualPalette(input.VisualPalette, context) }),
    ...(input.WaterfallChartOptions != null && {
      WaterfallChartOptions: se_WaterfallChartOptions(input.WaterfallChartOptions, context),
    }),
  };
};

/**
 * serializeAws_restJson1WaterfallChartFieldWells
 */
const se_WaterfallChartFieldWells = (input: WaterfallChartFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.WaterfallChartAggregatedFieldWells != null && {
      WaterfallChartAggregatedFieldWells: se_WaterfallChartAggregatedFieldWells(
        input.WaterfallChartAggregatedFieldWells,
        context
      ),
    }),
  };
};

/**
 * serializeAws_restJson1WaterfallChartOptions
 */
const se_WaterfallChartOptions = (input: WaterfallChartOptions, context: __SerdeContext): any => {
  return {
    ...(input.TotalBarLabel != null && { TotalBarLabel: input.TotalBarLabel }),
  };
};

/**
 * serializeAws_restJson1WaterfallChartSortConfiguration
 */
const se_WaterfallChartSortConfiguration = (input: WaterfallChartSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.BreakdownItemsLimit != null && {
      BreakdownItemsLimit: se_ItemsLimitConfiguration(input.BreakdownItemsLimit, context),
    }),
    ...(input.CategorySort != null && { CategorySort: se_FieldSortOptionsList(input.CategorySort, context) }),
  };
};

/**
 * serializeAws_restJson1WaterfallVisual
 */
const se_WaterfallVisual = (input: WaterfallVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_WaterfallChartConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * serializeAws_restJson1WhatIfPointScenario
 */
const se_WhatIfPointScenario = (input: WhatIfPointScenario, context: __SerdeContext): any => {
  return {
    ...(input.Date != null && { Date: Math.round(input.Date.getTime() / 1000) }),
    ...(input.Value != null && { Value: __serializeFloat(input.Value) }),
  };
};

/**
 * serializeAws_restJson1WhatIfRangeScenario
 */
const se_WhatIfRangeScenario = (input: WhatIfRangeScenario, context: __SerdeContext): any => {
  return {
    ...(input.EndDate != null && { EndDate: Math.round(input.EndDate.getTime() / 1000) }),
    ...(input.StartDate != null && { StartDate: Math.round(input.StartDate.getTime() / 1000) }),
    ...(input.Value != null && { Value: __serializeFloat(input.Value) }),
  };
};

/**
 * serializeAws_restJson1WordCloudAggregatedFieldWells
 */
const se_WordCloudAggregatedFieldWells = (input: WordCloudAggregatedFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.GroupBy != null && { GroupBy: se_WordCloudDimensionFieldList(input.GroupBy, context) }),
    ...(input.Size != null && { Size: se_WordCloudMeasureFieldList(input.Size, context) }),
  };
};

/**
 * serializeAws_restJson1WordCloudChartConfiguration
 */
const se_WordCloudChartConfiguration = (input: WordCloudChartConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryLabelOptions != null && {
      CategoryLabelOptions: se_ChartAxisLabelOptions(input.CategoryLabelOptions, context),
    }),
    ...(input.FieldWells != null && { FieldWells: se_WordCloudFieldWells(input.FieldWells, context) }),
    ...(input.SortConfiguration != null && {
      SortConfiguration: se_WordCloudSortConfiguration(input.SortConfiguration, context),
    }),
    ...(input.WordCloudOptions != null && { WordCloudOptions: se_WordCloudOptions(input.WordCloudOptions, context) }),
  };
};

/**
 * serializeAws_restJson1WordCloudDimensionFieldList
 */
const se_WordCloudDimensionFieldList = (input: DimensionField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_DimensionField(entry, context);
    });
};

/**
 * serializeAws_restJson1WordCloudFieldWells
 */
const se_WordCloudFieldWells = (input: WordCloudFieldWells, context: __SerdeContext): any => {
  return {
    ...(input.WordCloudAggregatedFieldWells != null && {
      WordCloudAggregatedFieldWells: se_WordCloudAggregatedFieldWells(input.WordCloudAggregatedFieldWells, context),
    }),
  };
};

/**
 * serializeAws_restJson1WordCloudMeasureFieldList
 */
const se_WordCloudMeasureFieldList = (input: MeasureField[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      return se_MeasureField(entry, context);
    });
};

/**
 * serializeAws_restJson1WordCloudOptions
 */
const se_WordCloudOptions = (input: WordCloudOptions, context: __SerdeContext): any => {
  return {
    ...(input.CloudLayout != null && { CloudLayout: input.CloudLayout }),
    ...(input.MaximumStringLength != null && { MaximumStringLength: input.MaximumStringLength }),
    ...(input.WordCasing != null && { WordCasing: input.WordCasing }),
    ...(input.WordOrientation != null && { WordOrientation: input.WordOrientation }),
    ...(input.WordPadding != null && { WordPadding: input.WordPadding }),
    ...(input.WordScaling != null && { WordScaling: input.WordScaling }),
  };
};

/**
 * serializeAws_restJson1WordCloudSortConfiguration
 */
const se_WordCloudSortConfiguration = (input: WordCloudSortConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CategoryItemsLimit != null && {
      CategoryItemsLimit: se_ItemsLimitConfiguration(input.CategoryItemsLimit, context),
    }),
    ...(input.CategorySort != null && { CategorySort: se_FieldSortOptionsList(input.CategorySort, context) }),
  };
};

/**
 * serializeAws_restJson1WordCloudVisual
 */
const se_WordCloudVisual = (input: WordCloudVisual, context: __SerdeContext): any => {
  return {
    ...(input.Actions != null && { Actions: se_VisualCustomActionList(input.Actions, context) }),
    ...(input.ChartConfiguration != null && {
      ChartConfiguration: se_WordCloudChartConfiguration(input.ChartConfiguration, context),
    }),
    ...(input.ColumnHierarchies != null && {
      ColumnHierarchies: se_ColumnHierarchyList(input.ColumnHierarchies, context),
    }),
    ...(input.Subtitle != null && { Subtitle: se_VisualSubtitleLabelOptions(input.Subtitle, context) }),
    ...(input.Title != null && { Title: se_VisualTitleLabelOptions(input.Title, context) }),
    ...(input.VisualId != null && { VisualId: input.VisualId }),
  };
};

/**
 * deserializeAws_restJson1AccountCustomization
 */
const de_AccountCustomization = (output: any, context: __SerdeContext): AccountCustomization => {
  return {
    DefaultEmailCustomizationTemplate: __expectString(output.DefaultEmailCustomizationTemplate),
    DefaultTheme: __expectString(output.DefaultTheme),
  } as any;
};

/**
 * deserializeAws_restJson1AccountInfo
 */
const de_AccountInfo = (output: any, context: __SerdeContext): AccountInfo => {
  return {
    AccountName: __expectString(output.AccountName),
    AccountSubscriptionStatus: __expectString(output.AccountSubscriptionStatus),
    AuthenticationType: __expectString(output.AuthenticationType),
    Edition: __expectString(output.Edition),
    NotificationEmail: __expectString(output.NotificationEmail),
  } as any;
};

/**
 * deserializeAws_restJson1AccountSettings
 */
const de_AccountSettings = (output: any, context: __SerdeContext): AccountSettings => {
  return {
    AccountName: __expectString(output.AccountName),
    DefaultNamespace: __expectString(output.DefaultNamespace),
    Edition: __expectString(output.Edition),
    NotificationEmail: __expectString(output.NotificationEmail),
    PublicSharingEnabled: __expectBoolean(output.PublicSharingEnabled),
    TerminationProtectionEnabled: __expectBoolean(output.TerminationProtectionEnabled),
  } as any;
};

/**
 * deserializeAws_restJson1ActionList
 */
const de_ActionList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ActiveIAMPolicyAssignment
 */
const de_ActiveIAMPolicyAssignment = (output: any, context: __SerdeContext): ActiveIAMPolicyAssignment => {
  return {
    AssignmentName: __expectString(output.AssignmentName),
    PolicyArn: __expectString(output.PolicyArn),
  } as any;
};

/**
 * deserializeAws_restJson1ActiveIAMPolicyAssignmentList
 */
const de_ActiveIAMPolicyAssignmentList = (output: any, context: __SerdeContext): ActiveIAMPolicyAssignment[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ActiveIAMPolicyAssignment(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1AdHocFilteringOption
 */
const de_AdHocFilteringOption = (output: any, context: __SerdeContext): AdHocFilteringOption => {
  return {
    AvailabilityStatus: __expectString(output.AvailabilityStatus),
  } as any;
};

/**
 * deserializeAws_restJson1AggregationFunction
 */
const de_AggregationFunction = (output: any, context: __SerdeContext): AggregationFunction => {
  return {
    CategoricalAggregationFunction: __expectString(output.CategoricalAggregationFunction),
    DateAggregationFunction: __expectString(output.DateAggregationFunction),
    NumericalAggregationFunction:
      output.NumericalAggregationFunction != null
        ? de_NumericalAggregationFunction(output.NumericalAggregationFunction, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1AggregationSortConfiguration
 */
const de_AggregationSortConfiguration = (output: any, context: __SerdeContext): AggregationSortConfiguration => {
  return {
    AggregationFunction:
      output.AggregationFunction != null ? de_AggregationFunction(output.AggregationFunction, context) : undefined,
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    SortDirection: __expectString(output.SortDirection),
  } as any;
};

/**
 * deserializeAws_restJson1AggregationSortConfigurationList
 */
const de_AggregationSortConfigurationList = (output: any, context: __SerdeContext): AggregationSortConfiguration[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_AggregationSortConfiguration(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1AmazonElasticsearchParameters
 */
const de_AmazonElasticsearchParameters = (output: any, context: __SerdeContext): AmazonElasticsearchParameters => {
  return {
    Domain: __expectString(output.Domain),
  } as any;
};

/**
 * deserializeAws_restJson1AmazonOpenSearchParameters
 */
const de_AmazonOpenSearchParameters = (output: any, context: __SerdeContext): AmazonOpenSearchParameters => {
  return {
    Domain: __expectString(output.Domain),
  } as any;
};

/**
 * deserializeAws_restJson1Analysis
 */
const de_Analysis = (output: any, context: __SerdeContext): Analysis => {
  return {
    AnalysisId: __expectString(output.AnalysisId),
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    DataSetArns: output.DataSetArns != null ? de_DataSetArnsList(output.DataSetArns, context) : undefined,
    Errors: output.Errors != null ? de_AnalysisErrorList(output.Errors, context) : undefined,
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    Name: __expectString(output.Name),
    Sheets: output.Sheets != null ? de_SheetList(output.Sheets, context) : undefined,
    Status: __expectString(output.Status),
    ThemeArn: __expectString(output.ThemeArn),
  } as any;
};

/**
 * deserializeAws_restJson1AnalysisDefaults
 */
const de_AnalysisDefaults = (output: any, context: __SerdeContext): AnalysisDefaults => {
  return {
    DefaultNewSheetConfiguration:
      output.DefaultNewSheetConfiguration != null
        ? de_DefaultNewSheetConfiguration(output.DefaultNewSheetConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1AnalysisDefinition
 */
const de_AnalysisDefinition = (output: any, context: __SerdeContext): AnalysisDefinition => {
  return {
    AnalysisDefaults:
      output.AnalysisDefaults != null ? de_AnalysisDefaults(output.AnalysisDefaults, context) : undefined,
    CalculatedFields:
      output.CalculatedFields != null ? de_CalculatedFields(output.CalculatedFields, context) : undefined,
    ColumnConfigurations:
      output.ColumnConfigurations != null
        ? de_ColumnConfigurationList(output.ColumnConfigurations, context)
        : undefined,
    DataSetIdentifierDeclarations:
      output.DataSetIdentifierDeclarations != null
        ? de_DataSetIdentifierDeclarationList(output.DataSetIdentifierDeclarations, context)
        : undefined,
    FilterGroups: output.FilterGroups != null ? de_FilterGroupList(output.FilterGroups, context) : undefined,
    ParameterDeclarations:
      output.ParameterDeclarations != null
        ? de_ParameterDeclarationList(output.ParameterDeclarations, context)
        : undefined,
    Sheets: output.Sheets != null ? de_SheetDefinitionList(output.Sheets, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1AnalysisError
 */
const de_AnalysisError = (output: any, context: __SerdeContext): AnalysisError => {
  return {
    Message: __expectString(output.Message),
    Type: __expectString(output.Type),
    ViolatedEntities: output.ViolatedEntities != null ? de_EntityList(output.ViolatedEntities, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1AnalysisErrorList
 */
const de_AnalysisErrorList = (output: any, context: __SerdeContext): AnalysisError[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_AnalysisError(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1AnalysisSummary
 */
const de_AnalysisSummary = (output: any, context: __SerdeContext): AnalysisSummary => {
  return {
    AnalysisId: __expectString(output.AnalysisId),
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    Name: __expectString(output.Name),
    Status: __expectString(output.Status),
  } as any;
};

/**
 * deserializeAws_restJson1AnalysisSummaryList
 */
const de_AnalysisSummaryList = (output: any, context: __SerdeContext): AnalysisSummary[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_AnalysisSummary(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1AnchorDateConfiguration
 */
const de_AnchorDateConfiguration = (output: any, context: __SerdeContext): AnchorDateConfiguration => {
  return {
    AnchorOption: __expectString(output.AnchorOption),
    ParameterName: __expectString(output.ParameterName),
  } as any;
};

/**
 * deserializeAws_restJson1ArcAxisConfiguration
 */
const de_ArcAxisConfiguration = (output: any, context: __SerdeContext): ArcAxisConfiguration => {
  return {
    Range: output.Range != null ? de_ArcAxisDisplayRange(output.Range, context) : undefined,
    ReserveRange: __expectInt32(output.ReserveRange),
  } as any;
};

/**
 * deserializeAws_restJson1ArcAxisDisplayRange
 */
const de_ArcAxisDisplayRange = (output: any, context: __SerdeContext): ArcAxisDisplayRange => {
  return {
    Max: __limitedParseDouble(output.Max),
    Min: __limitedParseDouble(output.Min),
  } as any;
};

/**
 * deserializeAws_restJson1ArcConfiguration
 */
const de_ArcConfiguration = (output: any, context: __SerdeContext): ArcConfiguration => {
  return {
    ArcAngle: __limitedParseDouble(output.ArcAngle),
    ArcThickness: __expectString(output.ArcThickness),
  } as any;
};

/**
 * deserializeAws_restJson1ArcOptions
 */
const de_ArcOptions = (output: any, context: __SerdeContext): ArcOptions => {
  return {
    ArcThickness: __expectString(output.ArcThickness),
  } as any;
};

/**
 * deserializeAws_restJson1AthenaParameters
 */
const de_AthenaParameters = (output: any, context: __SerdeContext): AthenaParameters => {
  return {
    RoleArn: __expectString(output.RoleArn),
    WorkGroup: __expectString(output.WorkGroup),
  } as any;
};

/**
 * deserializeAws_restJson1AuroraParameters
 */
const de_AuroraParameters = (output: any, context: __SerdeContext): AuroraParameters => {
  return {
    Database: __expectString(output.Database),
    Host: __expectString(output.Host),
    Port: __expectInt32(output.Port),
  } as any;
};

/**
 * deserializeAws_restJson1AuroraPostgreSqlParameters
 */
const de_AuroraPostgreSqlParameters = (output: any, context: __SerdeContext): AuroraPostgreSqlParameters => {
  return {
    Database: __expectString(output.Database),
    Host: __expectString(output.Host),
    Port: __expectInt32(output.Port),
  } as any;
};

/**
 * deserializeAws_restJson1AwsIotAnalyticsParameters
 */
const de_AwsIotAnalyticsParameters = (output: any, context: __SerdeContext): AwsIotAnalyticsParameters => {
  return {
    DataSetName: __expectString(output.DataSetName),
  } as any;
};

/**
 * deserializeAws_restJson1AxisDataOptions
 */
const de_AxisDataOptions = (output: any, context: __SerdeContext): AxisDataOptions => {
  return {
    DateAxisOptions: output.DateAxisOptions != null ? de_DateAxisOptions(output.DateAxisOptions, context) : undefined,
    NumericAxisOptions:
      output.NumericAxisOptions != null ? de_NumericAxisOptions(output.NumericAxisOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1AxisDisplayDataDrivenRange
 */
const de_AxisDisplayDataDrivenRange = (output: any, context: __SerdeContext): AxisDisplayDataDrivenRange => {
  return {} as any;
};

/**
 * deserializeAws_restJson1AxisDisplayMinMaxRange
 */
const de_AxisDisplayMinMaxRange = (output: any, context: __SerdeContext): AxisDisplayMinMaxRange => {
  return {
    Maximum: __limitedParseDouble(output.Maximum),
    Minimum: __limitedParseDouble(output.Minimum),
  } as any;
};

/**
 * deserializeAws_restJson1AxisDisplayOptions
 */
const de_AxisDisplayOptions = (output: any, context: __SerdeContext): AxisDisplayOptions => {
  return {
    AxisLineVisibility: __expectString(output.AxisLineVisibility),
    AxisOffset: __expectString(output.AxisOffset),
    DataOptions: output.DataOptions != null ? de_AxisDataOptions(output.DataOptions, context) : undefined,
    GridLineVisibility: __expectString(output.GridLineVisibility),
    ScrollbarOptions:
      output.ScrollbarOptions != null ? de_ScrollBarOptions(output.ScrollbarOptions, context) : undefined,
    TickLabelOptions:
      output.TickLabelOptions != null ? de_AxisTickLabelOptions(output.TickLabelOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1AxisDisplayRange
 */
const de_AxisDisplayRange = (output: any, context: __SerdeContext): AxisDisplayRange => {
  return {
    DataDriven: output.DataDriven != null ? de_AxisDisplayDataDrivenRange(output.DataDriven, context) : undefined,
    MinMax: output.MinMax != null ? de_AxisDisplayMinMaxRange(output.MinMax, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1AxisLabelOptions
 */
const de_AxisLabelOptions = (output: any, context: __SerdeContext): AxisLabelOptions => {
  return {
    ApplyTo: output.ApplyTo != null ? de_AxisLabelReferenceOptions(output.ApplyTo, context) : undefined,
    CustomLabel: __expectString(output.CustomLabel),
    FontConfiguration:
      output.FontConfiguration != null ? de_FontConfiguration(output.FontConfiguration, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1AxisLabelOptionsList
 */
const de_AxisLabelOptionsList = (output: any, context: __SerdeContext): AxisLabelOptions[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_AxisLabelOptions(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1AxisLabelReferenceOptions
 */
const de_AxisLabelReferenceOptions = (output: any, context: __SerdeContext): AxisLabelReferenceOptions => {
  return {
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    FieldId: __expectString(output.FieldId),
  } as any;
};

/**
 * deserializeAws_restJson1AxisLinearScale
 */
const de_AxisLinearScale = (output: any, context: __SerdeContext): AxisLinearScale => {
  return {
    StepCount: __expectInt32(output.StepCount),
    StepSize: __limitedParseDouble(output.StepSize),
  } as any;
};

/**
 * deserializeAws_restJson1AxisLogarithmicScale
 */
const de_AxisLogarithmicScale = (output: any, context: __SerdeContext): AxisLogarithmicScale => {
  return {
    Base: __limitedParseDouble(output.Base),
  } as any;
};

/**
 * deserializeAws_restJson1AxisScale
 */
const de_AxisScale = (output: any, context: __SerdeContext): AxisScale => {
  return {
    Linear: output.Linear != null ? de_AxisLinearScale(output.Linear, context) : undefined,
    Logarithmic: output.Logarithmic != null ? de_AxisLogarithmicScale(output.Logarithmic, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1AxisTickLabelOptions
 */
const de_AxisTickLabelOptions = (output: any, context: __SerdeContext): AxisTickLabelOptions => {
  return {
    LabelOptions: output.LabelOptions != null ? de_LabelOptions(output.LabelOptions, context) : undefined,
    RotationAngle: __limitedParseDouble(output.RotationAngle),
  } as any;
};

/**
 * deserializeAws_restJson1BarChartAggregatedFieldWells
 */
const de_BarChartAggregatedFieldWells = (output: any, context: __SerdeContext): BarChartAggregatedFieldWells => {
  return {
    Category: output.Category != null ? de_DimensionFieldList(output.Category, context) : undefined,
    Colors: output.Colors != null ? de_DimensionFieldList(output.Colors, context) : undefined,
    SmallMultiples:
      output.SmallMultiples != null ? de_SmallMultiplesDimensionFieldList(output.SmallMultiples, context) : undefined,
    Values: output.Values != null ? de_MeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1BarChartConfiguration
 */
const de_BarChartConfiguration = (output: any, context: __SerdeContext): BarChartConfiguration => {
  return {
    BarsArrangement: __expectString(output.BarsArrangement),
    CategoryAxis: output.CategoryAxis != null ? de_AxisDisplayOptions(output.CategoryAxis, context) : undefined,
    CategoryLabelOptions:
      output.CategoryLabelOptions != null ? de_ChartAxisLabelOptions(output.CategoryLabelOptions, context) : undefined,
    ColorLabelOptions:
      output.ColorLabelOptions != null ? de_ChartAxisLabelOptions(output.ColorLabelOptions, context) : undefined,
    ContributionAnalysisDefaults:
      output.ContributionAnalysisDefaults != null
        ? de_ContributionAnalysisDefaultList(output.ContributionAnalysisDefaults, context)
        : undefined,
    DataLabels: output.DataLabels != null ? de_DataLabelOptions(output.DataLabels, context) : undefined,
    FieldWells: output.FieldWells != null ? de_BarChartFieldWells(output.FieldWells, context) : undefined,
    Legend: output.Legend != null ? de_LegendOptions(output.Legend, context) : undefined,
    Orientation: __expectString(output.Orientation),
    ReferenceLines: output.ReferenceLines != null ? de_ReferenceLineList(output.ReferenceLines, context) : undefined,
    SmallMultiplesOptions:
      output.SmallMultiplesOptions != null
        ? de_SmallMultiplesOptions(output.SmallMultiplesOptions, context)
        : undefined,
    SortConfiguration:
      output.SortConfiguration != null ? de_BarChartSortConfiguration(output.SortConfiguration, context) : undefined,
    Tooltip: output.Tooltip != null ? de_TooltipOptions(output.Tooltip, context) : undefined,
    ValueAxis: output.ValueAxis != null ? de_AxisDisplayOptions(output.ValueAxis, context) : undefined,
    ValueLabelOptions:
      output.ValueLabelOptions != null ? de_ChartAxisLabelOptions(output.ValueLabelOptions, context) : undefined,
    VisualPalette: output.VisualPalette != null ? de_VisualPalette(output.VisualPalette, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1BarChartFieldWells
 */
const de_BarChartFieldWells = (output: any, context: __SerdeContext): BarChartFieldWells => {
  return {
    BarChartAggregatedFieldWells:
      output.BarChartAggregatedFieldWells != null
        ? de_BarChartAggregatedFieldWells(output.BarChartAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1BarChartSortConfiguration
 */
const de_BarChartSortConfiguration = (output: any, context: __SerdeContext): BarChartSortConfiguration => {
  return {
    CategoryItemsLimit:
      output.CategoryItemsLimit != null ? de_ItemsLimitConfiguration(output.CategoryItemsLimit, context) : undefined,
    CategorySort: output.CategorySort != null ? de_FieldSortOptionsList(output.CategorySort, context) : undefined,
    ColorItemsLimit:
      output.ColorItemsLimit != null ? de_ItemsLimitConfiguration(output.ColorItemsLimit, context) : undefined,
    ColorSort: output.ColorSort != null ? de_FieldSortOptionsList(output.ColorSort, context) : undefined,
    SmallMultiplesLimitConfiguration:
      output.SmallMultiplesLimitConfiguration != null
        ? de_ItemsLimitConfiguration(output.SmallMultiplesLimitConfiguration, context)
        : undefined,
    SmallMultiplesSort:
      output.SmallMultiplesSort != null ? de_FieldSortOptionsList(output.SmallMultiplesSort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1BarChartVisual
 */
const de_BarChartVisual = (output: any, context: __SerdeContext): BarChartVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_BarChartConfiguration(output.ChartConfiguration, context) : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1BinCountOptions
 */
const de_BinCountOptions = (output: any, context: __SerdeContext): BinCountOptions => {
  return {
    Value: __expectInt32(output.Value),
  } as any;
};

/**
 * deserializeAws_restJson1BinWidthOptions
 */
const de_BinWidthOptions = (output: any, context: __SerdeContext): BinWidthOptions => {
  return {
    BinCountLimit: __expectLong(output.BinCountLimit),
    Value: __limitedParseDouble(output.Value),
  } as any;
};

/**
 * deserializeAws_restJson1BodySectionConfiguration
 */
const de_BodySectionConfiguration = (output: any, context: __SerdeContext): BodySectionConfiguration => {
  return {
    Content: output.Content != null ? de_BodySectionContent(output.Content, context) : undefined,
    PageBreakConfiguration:
      output.PageBreakConfiguration != null
        ? de_SectionPageBreakConfiguration(output.PageBreakConfiguration, context)
        : undefined,
    SectionId: __expectString(output.SectionId),
    Style: output.Style != null ? de_SectionStyle(output.Style, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1BodySectionConfigurationList
 */
const de_BodySectionConfigurationList = (output: any, context: __SerdeContext): BodySectionConfiguration[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_BodySectionConfiguration(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1BodySectionContent
 */
const de_BodySectionContent = (output: any, context: __SerdeContext): BodySectionContent => {
  return {
    Layout: output.Layout != null ? de_SectionLayoutConfiguration(output.Layout, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1BorderStyle
 */
const de_BorderStyle = (output: any, context: __SerdeContext): BorderStyle => {
  return {
    Show: __expectBoolean(output.Show),
  } as any;
};

/**
 * deserializeAws_restJson1BoxPlotAggregatedFieldWells
 */
const de_BoxPlotAggregatedFieldWells = (output: any, context: __SerdeContext): BoxPlotAggregatedFieldWells => {
  return {
    GroupBy: output.GroupBy != null ? de_BoxPlotDimensionFieldList(output.GroupBy, context) : undefined,
    Values: output.Values != null ? de_BoxPlotMeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1BoxPlotChartConfiguration
 */
const de_BoxPlotChartConfiguration = (output: any, context: __SerdeContext): BoxPlotChartConfiguration => {
  return {
    BoxPlotOptions: output.BoxPlotOptions != null ? de_BoxPlotOptions(output.BoxPlotOptions, context) : undefined,
    CategoryAxis: output.CategoryAxis != null ? de_AxisDisplayOptions(output.CategoryAxis, context) : undefined,
    CategoryLabelOptions:
      output.CategoryLabelOptions != null ? de_ChartAxisLabelOptions(output.CategoryLabelOptions, context) : undefined,
    FieldWells: output.FieldWells != null ? de_BoxPlotFieldWells(output.FieldWells, context) : undefined,
    Legend: output.Legend != null ? de_LegendOptions(output.Legend, context) : undefined,
    PrimaryYAxisDisplayOptions:
      output.PrimaryYAxisDisplayOptions != null
        ? de_AxisDisplayOptions(output.PrimaryYAxisDisplayOptions, context)
        : undefined,
    PrimaryYAxisLabelOptions:
      output.PrimaryYAxisLabelOptions != null
        ? de_ChartAxisLabelOptions(output.PrimaryYAxisLabelOptions, context)
        : undefined,
    ReferenceLines: output.ReferenceLines != null ? de_ReferenceLineList(output.ReferenceLines, context) : undefined,
    SortConfiguration:
      output.SortConfiguration != null ? de_BoxPlotSortConfiguration(output.SortConfiguration, context) : undefined,
    Tooltip: output.Tooltip != null ? de_TooltipOptions(output.Tooltip, context) : undefined,
    VisualPalette: output.VisualPalette != null ? de_VisualPalette(output.VisualPalette, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1BoxPlotDimensionFieldList
 */
const de_BoxPlotDimensionFieldList = (output: any, context: __SerdeContext): DimensionField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DimensionField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1BoxPlotFieldWells
 */
const de_BoxPlotFieldWells = (output: any, context: __SerdeContext): BoxPlotFieldWells => {
  return {
    BoxPlotAggregatedFieldWells:
      output.BoxPlotAggregatedFieldWells != null
        ? de_BoxPlotAggregatedFieldWells(output.BoxPlotAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1BoxPlotMeasureFieldList
 */
const de_BoxPlotMeasureFieldList = (output: any, context: __SerdeContext): MeasureField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_MeasureField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1BoxPlotOptions
 */
const de_BoxPlotOptions = (output: any, context: __SerdeContext): BoxPlotOptions => {
  return {
    AllDataPointsVisibility: __expectString(output.AllDataPointsVisibility),
    OutlierVisibility: __expectString(output.OutlierVisibility),
    StyleOptions: output.StyleOptions != null ? de_BoxPlotStyleOptions(output.StyleOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1BoxPlotSortConfiguration
 */
const de_BoxPlotSortConfiguration = (output: any, context: __SerdeContext): BoxPlotSortConfiguration => {
  return {
    CategorySort: output.CategorySort != null ? de_FieldSortOptionsList(output.CategorySort, context) : undefined,
    PaginationConfiguration:
      output.PaginationConfiguration != null
        ? de_PaginationConfiguration(output.PaginationConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1BoxPlotStyleOptions
 */
const de_BoxPlotStyleOptions = (output: any, context: __SerdeContext): BoxPlotStyleOptions => {
  return {
    FillStyle: __expectString(output.FillStyle),
  } as any;
};

/**
 * deserializeAws_restJson1BoxPlotVisual
 */
const de_BoxPlotVisual = (output: any, context: __SerdeContext): BoxPlotVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_BoxPlotChartConfiguration(output.ChartConfiguration, context) : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1CalculatedColumn
 */
const de_CalculatedColumn = (output: any, context: __SerdeContext): CalculatedColumn => {
  return {
    ColumnId: __expectString(output.ColumnId),
    ColumnName: __expectString(output.ColumnName),
    Expression: __expectString(output.Expression),
  } as any;
};

/**
 * deserializeAws_restJson1CalculatedColumnList
 */
const de_CalculatedColumnList = (output: any, context: __SerdeContext): CalculatedColumn[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_CalculatedColumn(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1CalculatedField
 */
const de_CalculatedField = (output: any, context: __SerdeContext): CalculatedField => {
  return {
    DataSetIdentifier: __expectString(output.DataSetIdentifier),
    Expression: __expectString(output.Expression),
    Name: __expectString(output.Name),
  } as any;
};

/**
 * deserializeAws_restJson1CalculatedFields
 */
const de_CalculatedFields = (output: any, context: __SerdeContext): CalculatedField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_CalculatedField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1CalculatedMeasureField
 */
const de_CalculatedMeasureField = (output: any, context: __SerdeContext): CalculatedMeasureField => {
  return {
    Expression: __expectString(output.Expression),
    FieldId: __expectString(output.FieldId),
  } as any;
};

/**
 * deserializeAws_restJson1CascadingControlConfiguration
 */
const de_CascadingControlConfiguration = (output: any, context: __SerdeContext): CascadingControlConfiguration => {
  return {
    SourceControls:
      output.SourceControls != null ? de_CascadingControlSourceList(output.SourceControls, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1CascadingControlSource
 */
const de_CascadingControlSource = (output: any, context: __SerdeContext): CascadingControlSource => {
  return {
    ColumnToMatch: output.ColumnToMatch != null ? de_ColumnIdentifier(output.ColumnToMatch, context) : undefined,
    SourceSheetControlId: __expectString(output.SourceSheetControlId),
  } as any;
};

/**
 * deserializeAws_restJson1CascadingControlSourceList
 */
const de_CascadingControlSourceList = (output: any, context: __SerdeContext): CascadingControlSource[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_CascadingControlSource(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1CastColumnTypeOperation
 */
const de_CastColumnTypeOperation = (output: any, context: __SerdeContext): CastColumnTypeOperation => {
  return {
    ColumnName: __expectString(output.ColumnName),
    Format: __expectString(output.Format),
    NewColumnType: __expectString(output.NewColumnType),
  } as any;
};

/**
 * deserializeAws_restJson1CategoricalDimensionField
 */
const de_CategoricalDimensionField = (output: any, context: __SerdeContext): CategoricalDimensionField => {
  return {
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    FieldId: __expectString(output.FieldId),
    FormatConfiguration:
      output.FormatConfiguration != null
        ? de_StringFormatConfiguration(output.FormatConfiguration, context)
        : undefined,
    HierarchyId: __expectString(output.HierarchyId),
  } as any;
};

/**
 * deserializeAws_restJson1CategoricalMeasureField
 */
const de_CategoricalMeasureField = (output: any, context: __SerdeContext): CategoricalMeasureField => {
  return {
    AggregationFunction: __expectString(output.AggregationFunction),
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    FieldId: __expectString(output.FieldId),
    FormatConfiguration:
      output.FormatConfiguration != null
        ? de_StringFormatConfiguration(output.FormatConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1CategoryDrillDownFilter
 */
const de_CategoryDrillDownFilter = (output: any, context: __SerdeContext): CategoryDrillDownFilter => {
  return {
    CategoryValues: output.CategoryValues != null ? de_CategoryValueList(output.CategoryValues, context) : undefined,
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1CategoryFilter
 */
const de_CategoryFilter = (output: any, context: __SerdeContext): CategoryFilter => {
  return {
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    Configuration:
      output.Configuration != null ? de_CategoryFilterConfiguration(output.Configuration, context) : undefined,
    FilterId: __expectString(output.FilterId),
  } as any;
};

/**
 * deserializeAws_restJson1CategoryFilterConfiguration
 */
const de_CategoryFilterConfiguration = (output: any, context: __SerdeContext): CategoryFilterConfiguration => {
  return {
    CustomFilterConfiguration:
      output.CustomFilterConfiguration != null
        ? de_CustomFilterConfiguration(output.CustomFilterConfiguration, context)
        : undefined,
    CustomFilterListConfiguration:
      output.CustomFilterListConfiguration != null
        ? de_CustomFilterListConfiguration(output.CustomFilterListConfiguration, context)
        : undefined,
    FilterListConfiguration:
      output.FilterListConfiguration != null
        ? de_FilterListConfiguration(output.FilterListConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1CategoryValueList
 */
const de_CategoryValueList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ChartAxisLabelOptions
 */
const de_ChartAxisLabelOptions = (output: any, context: __SerdeContext): ChartAxisLabelOptions => {
  return {
    AxisLabelOptions:
      output.AxisLabelOptions != null ? de_AxisLabelOptionsList(output.AxisLabelOptions, context) : undefined,
    SortIconVisibility: __expectString(output.SortIconVisibility),
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1ClusterMarker
 */
const de_ClusterMarker = (output: any, context: __SerdeContext): ClusterMarker => {
  return {
    SimpleClusterMarker:
      output.SimpleClusterMarker != null ? de_SimpleClusterMarker(output.SimpleClusterMarker, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ClusterMarkerConfiguration
 */
const de_ClusterMarkerConfiguration = (output: any, context: __SerdeContext): ClusterMarkerConfiguration => {
  return {
    ClusterMarker: output.ClusterMarker != null ? de_ClusterMarker(output.ClusterMarker, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ColorList
 */
const de_ColorList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ColorScale
 */
const de_ColorScale = (output: any, context: __SerdeContext): ColorScale => {
  return {
    ColorFillType: __expectString(output.ColorFillType),
    Colors: output.Colors != null ? de_ColorScaleColorList(output.Colors, context) : undefined,
    NullValueColor: output.NullValueColor != null ? de_DataColor(output.NullValueColor, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ColorScaleColorList
 */
const de_ColorScaleColorList = (output: any, context: __SerdeContext): DataColor[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DataColor(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ColumnConfiguration
 */
const de_ColumnConfiguration = (output: any, context: __SerdeContext): ColumnConfiguration => {
  return {
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    FormatConfiguration:
      output.FormatConfiguration != null ? de_FormatConfiguration(output.FormatConfiguration, context) : undefined,
    Role: __expectString(output.Role),
  } as any;
};

/**
 * deserializeAws_restJson1ColumnConfigurationList
 */
const de_ColumnConfigurationList = (output: any, context: __SerdeContext): ColumnConfiguration[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ColumnConfiguration(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ColumnDescription
 */
const de_ColumnDescription = (output: any, context: __SerdeContext): ColumnDescription => {
  return {
    Text: __expectString(output.Text),
  } as any;
};

/**
 * deserializeAws_restJson1ColumnGroup
 */
const de_ColumnGroup = (output: any, context: __SerdeContext): ColumnGroup => {
  return {
    GeoSpatialColumnGroup:
      output.GeoSpatialColumnGroup != null
        ? de_GeoSpatialColumnGroup(output.GeoSpatialColumnGroup, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ColumnGroupColumnSchema
 */
const de_ColumnGroupColumnSchema = (output: any, context: __SerdeContext): ColumnGroupColumnSchema => {
  return {
    Name: __expectString(output.Name),
  } as any;
};

/**
 * deserializeAws_restJson1ColumnGroupColumnSchemaList
 */
const de_ColumnGroupColumnSchemaList = (output: any, context: __SerdeContext): ColumnGroupColumnSchema[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ColumnGroupColumnSchema(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ColumnGroupList
 */
const de_ColumnGroupList = (output: any, context: __SerdeContext): ColumnGroup[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ColumnGroup(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ColumnGroupSchema
 */
const de_ColumnGroupSchema = (output: any, context: __SerdeContext): ColumnGroupSchema => {
  return {
    ColumnGroupColumnSchemaList:
      output.ColumnGroupColumnSchemaList != null
        ? de_ColumnGroupColumnSchemaList(output.ColumnGroupColumnSchemaList, context)
        : undefined,
    Name: __expectString(output.Name),
  } as any;
};

/**
 * deserializeAws_restJson1ColumnGroupSchemaList
 */
const de_ColumnGroupSchemaList = (output: any, context: __SerdeContext): ColumnGroupSchema[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ColumnGroupSchema(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ColumnHierarchy
 */
const de_ColumnHierarchy = (output: any, context: __SerdeContext): ColumnHierarchy => {
  return {
    DateTimeHierarchy:
      output.DateTimeHierarchy != null ? de_DateTimeHierarchy(output.DateTimeHierarchy, context) : undefined,
    ExplicitHierarchy:
      output.ExplicitHierarchy != null ? de_ExplicitHierarchy(output.ExplicitHierarchy, context) : undefined,
    PredefinedHierarchy:
      output.PredefinedHierarchy != null ? de_PredefinedHierarchy(output.PredefinedHierarchy, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ColumnHierarchyList
 */
const de_ColumnHierarchyList = (output: any, context: __SerdeContext): ColumnHierarchy[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ColumnHierarchy(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ColumnIdentifier
 */
const de_ColumnIdentifier = (output: any, context: __SerdeContext): ColumnIdentifier => {
  return {
    ColumnName: __expectString(output.ColumnName),
    DataSetIdentifier: __expectString(output.DataSetIdentifier),
  } as any;
};

/**
 * deserializeAws_restJson1ColumnLevelPermissionRule
 */
const de_ColumnLevelPermissionRule = (output: any, context: __SerdeContext): ColumnLevelPermissionRule => {
  return {
    ColumnNames: output.ColumnNames != null ? de_ColumnNameList(output.ColumnNames, context) : undefined,
    Principals: output.Principals != null ? de_PrincipalList(output.Principals, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ColumnLevelPermissionRuleList
 */
const de_ColumnLevelPermissionRuleList = (output: any, context: __SerdeContext): ColumnLevelPermissionRule[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ColumnLevelPermissionRule(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ColumnList
 */
const de_ColumnList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ColumnNameList
 */
const de_ColumnNameList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ColumnSchema
 */
const de_ColumnSchema = (output: any, context: __SerdeContext): ColumnSchema => {
  return {
    DataType: __expectString(output.DataType),
    GeographicRole: __expectString(output.GeographicRole),
    Name: __expectString(output.Name),
  } as any;
};

/**
 * deserializeAws_restJson1ColumnSchemaList
 */
const de_ColumnSchemaList = (output: any, context: __SerdeContext): ColumnSchema[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ColumnSchema(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ColumnSort
 */
const de_ColumnSort = (output: any, context: __SerdeContext): ColumnSort => {
  return {
    AggregationFunction:
      output.AggregationFunction != null ? de_AggregationFunction(output.AggregationFunction, context) : undefined,
    Direction: __expectString(output.Direction),
    SortBy: output.SortBy != null ? de_ColumnIdentifier(output.SortBy, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ColumnTag
 */
const de_ColumnTag = (output: any, context: __SerdeContext): ColumnTag => {
  return {
    ColumnDescription:
      output.ColumnDescription != null ? de_ColumnDescription(output.ColumnDescription, context) : undefined,
    ColumnGeographicRole: __expectString(output.ColumnGeographicRole),
  } as any;
};

/**
 * deserializeAws_restJson1ColumnTagList
 */
const de_ColumnTagList = (output: any, context: __SerdeContext): ColumnTag[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ColumnTag(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ColumnTagNames
 */
const de_ColumnTagNames = (output: any, context: __SerdeContext): (ColumnTagName | string)[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ColumnTooltipItem
 */
const de_ColumnTooltipItem = (output: any, context: __SerdeContext): ColumnTooltipItem => {
  return {
    Aggregation: output.Aggregation != null ? de_AggregationFunction(output.Aggregation, context) : undefined,
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    Label: __expectString(output.Label),
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1ComboChartAggregatedFieldWells
 */
const de_ComboChartAggregatedFieldWells = (output: any, context: __SerdeContext): ComboChartAggregatedFieldWells => {
  return {
    BarValues: output.BarValues != null ? de_MeasureFieldList(output.BarValues, context) : undefined,
    Category: output.Category != null ? de_DimensionFieldList(output.Category, context) : undefined,
    Colors: output.Colors != null ? de_DimensionFieldList(output.Colors, context) : undefined,
    LineValues: output.LineValues != null ? de_MeasureFieldList(output.LineValues, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ComboChartConfiguration
 */
const de_ComboChartConfiguration = (output: any, context: __SerdeContext): ComboChartConfiguration => {
  return {
    BarDataLabels: output.BarDataLabels != null ? de_DataLabelOptions(output.BarDataLabels, context) : undefined,
    BarsArrangement: __expectString(output.BarsArrangement),
    CategoryAxis: output.CategoryAxis != null ? de_AxisDisplayOptions(output.CategoryAxis, context) : undefined,
    CategoryLabelOptions:
      output.CategoryLabelOptions != null ? de_ChartAxisLabelOptions(output.CategoryLabelOptions, context) : undefined,
    ColorLabelOptions:
      output.ColorLabelOptions != null ? de_ChartAxisLabelOptions(output.ColorLabelOptions, context) : undefined,
    FieldWells: output.FieldWells != null ? de_ComboChartFieldWells(output.FieldWells, context) : undefined,
    Legend: output.Legend != null ? de_LegendOptions(output.Legend, context) : undefined,
    LineDataLabels: output.LineDataLabels != null ? de_DataLabelOptions(output.LineDataLabels, context) : undefined,
    PrimaryYAxisDisplayOptions:
      output.PrimaryYAxisDisplayOptions != null
        ? de_AxisDisplayOptions(output.PrimaryYAxisDisplayOptions, context)
        : undefined,
    PrimaryYAxisLabelOptions:
      output.PrimaryYAxisLabelOptions != null
        ? de_ChartAxisLabelOptions(output.PrimaryYAxisLabelOptions, context)
        : undefined,
    ReferenceLines: output.ReferenceLines != null ? de_ReferenceLineList(output.ReferenceLines, context) : undefined,
    SecondaryYAxisDisplayOptions:
      output.SecondaryYAxisDisplayOptions != null
        ? de_AxisDisplayOptions(output.SecondaryYAxisDisplayOptions, context)
        : undefined,
    SecondaryYAxisLabelOptions:
      output.SecondaryYAxisLabelOptions != null
        ? de_ChartAxisLabelOptions(output.SecondaryYAxisLabelOptions, context)
        : undefined,
    SortConfiguration:
      output.SortConfiguration != null ? de_ComboChartSortConfiguration(output.SortConfiguration, context) : undefined,
    Tooltip: output.Tooltip != null ? de_TooltipOptions(output.Tooltip, context) : undefined,
    VisualPalette: output.VisualPalette != null ? de_VisualPalette(output.VisualPalette, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ComboChartFieldWells
 */
const de_ComboChartFieldWells = (output: any, context: __SerdeContext): ComboChartFieldWells => {
  return {
    ComboChartAggregatedFieldWells:
      output.ComboChartAggregatedFieldWells != null
        ? de_ComboChartAggregatedFieldWells(output.ComboChartAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ComboChartSortConfiguration
 */
const de_ComboChartSortConfiguration = (output: any, context: __SerdeContext): ComboChartSortConfiguration => {
  return {
    CategoryItemsLimit:
      output.CategoryItemsLimit != null ? de_ItemsLimitConfiguration(output.CategoryItemsLimit, context) : undefined,
    CategorySort: output.CategorySort != null ? de_FieldSortOptionsList(output.CategorySort, context) : undefined,
    ColorItemsLimit:
      output.ColorItemsLimit != null ? de_ItemsLimitConfiguration(output.ColorItemsLimit, context) : undefined,
    ColorSort: output.ColorSort != null ? de_FieldSortOptionsList(output.ColorSort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ComboChartVisual
 */
const de_ComboChartVisual = (output: any, context: __SerdeContext): ComboChartVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_ComboChartConfiguration(output.ChartConfiguration, context) : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1ComparisonConfiguration
 */
const de_ComparisonConfiguration = (output: any, context: __SerdeContext): ComparisonConfiguration => {
  return {
    ComparisonFormat:
      output.ComparisonFormat != null ? de_ComparisonFormatConfiguration(output.ComparisonFormat, context) : undefined,
    ComparisonMethod: __expectString(output.ComparisonMethod),
  } as any;
};

/**
 * deserializeAws_restJson1ComparisonFormatConfiguration
 */
const de_ComparisonFormatConfiguration = (output: any, context: __SerdeContext): ComparisonFormatConfiguration => {
  return {
    NumberDisplayFormatConfiguration:
      output.NumberDisplayFormatConfiguration != null
        ? de_NumberDisplayFormatConfiguration(output.NumberDisplayFormatConfiguration, context)
        : undefined,
    PercentageDisplayFormatConfiguration:
      output.PercentageDisplayFormatConfiguration != null
        ? de_PercentageDisplayFormatConfiguration(output.PercentageDisplayFormatConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1Computation
 */
const de_Computation = (output: any, context: __SerdeContext): Computation => {
  return {
    Forecast: output.Forecast != null ? de_ForecastComputation(output.Forecast, context) : undefined,
    GrowthRate: output.GrowthRate != null ? de_GrowthRateComputation(output.GrowthRate, context) : undefined,
    MaximumMinimum:
      output.MaximumMinimum != null ? de_MaximumMinimumComputation(output.MaximumMinimum, context) : undefined,
    MetricComparison:
      output.MetricComparison != null ? de_MetricComparisonComputation(output.MetricComparison, context) : undefined,
    PeriodOverPeriod:
      output.PeriodOverPeriod != null ? de_PeriodOverPeriodComputation(output.PeriodOverPeriod, context) : undefined,
    PeriodToDate: output.PeriodToDate != null ? de_PeriodToDateComputation(output.PeriodToDate, context) : undefined,
    TopBottomMovers:
      output.TopBottomMovers != null ? de_TopBottomMoversComputation(output.TopBottomMovers, context) : undefined,
    TopBottomRanked:
      output.TopBottomRanked != null ? de_TopBottomRankedComputation(output.TopBottomRanked, context) : undefined,
    TotalAggregation:
      output.TotalAggregation != null ? de_TotalAggregationComputation(output.TotalAggregation, context) : undefined,
    UniqueValues: output.UniqueValues != null ? de_UniqueValuesComputation(output.UniqueValues, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ComputationList
 */
const de_ComputationList = (output: any, context: __SerdeContext): Computation[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_Computation(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ConditionalFormattingColor
 */
const de_ConditionalFormattingColor = (output: any, context: __SerdeContext): ConditionalFormattingColor => {
  return {
    Gradient: output.Gradient != null ? de_ConditionalFormattingGradientColor(output.Gradient, context) : undefined,
    Solid: output.Solid != null ? de_ConditionalFormattingSolidColor(output.Solid, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ConditionalFormattingCustomIconCondition
 */
const de_ConditionalFormattingCustomIconCondition = (
  output: any,
  context: __SerdeContext
): ConditionalFormattingCustomIconCondition => {
  return {
    Color: __expectString(output.Color),
    DisplayConfiguration:
      output.DisplayConfiguration != null
        ? de_ConditionalFormattingIconDisplayConfiguration(output.DisplayConfiguration, context)
        : undefined,
    Expression: __expectString(output.Expression),
    IconOptions:
      output.IconOptions != null ? de_ConditionalFormattingCustomIconOptions(output.IconOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ConditionalFormattingCustomIconOptions
 */
const de_ConditionalFormattingCustomIconOptions = (
  output: any,
  context: __SerdeContext
): ConditionalFormattingCustomIconOptions => {
  return {
    Icon: __expectString(output.Icon),
    UnicodeIcon: __expectString(output.UnicodeIcon),
  } as any;
};

/**
 * deserializeAws_restJson1ConditionalFormattingGradientColor
 */
const de_ConditionalFormattingGradientColor = (
  output: any,
  context: __SerdeContext
): ConditionalFormattingGradientColor => {
  return {
    Color: output.Color != null ? de_GradientColor(output.Color, context) : undefined,
    Expression: __expectString(output.Expression),
  } as any;
};

/**
 * deserializeAws_restJson1ConditionalFormattingIcon
 */
const de_ConditionalFormattingIcon = (output: any, context: __SerdeContext): ConditionalFormattingIcon => {
  return {
    CustomCondition:
      output.CustomCondition != null
        ? de_ConditionalFormattingCustomIconCondition(output.CustomCondition, context)
        : undefined,
    IconSet: output.IconSet != null ? de_ConditionalFormattingIconSet(output.IconSet, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ConditionalFormattingIconDisplayConfiguration
 */
const de_ConditionalFormattingIconDisplayConfiguration = (
  output: any,
  context: __SerdeContext
): ConditionalFormattingIconDisplayConfiguration => {
  return {
    IconDisplayOption: __expectString(output.IconDisplayOption),
  } as any;
};

/**
 * deserializeAws_restJson1ConditionalFormattingIconSet
 */
const de_ConditionalFormattingIconSet = (output: any, context: __SerdeContext): ConditionalFormattingIconSet => {
  return {
    Expression: __expectString(output.Expression),
    IconSetType: __expectString(output.IconSetType),
  } as any;
};

/**
 * deserializeAws_restJson1ConditionalFormattingSolidColor
 */
const de_ConditionalFormattingSolidColor = (output: any, context: __SerdeContext): ConditionalFormattingSolidColor => {
  return {
    Color: __expectString(output.Color),
    Expression: __expectString(output.Expression),
  } as any;
};

/**
 * deserializeAws_restJson1ContributionAnalysisDefault
 */
const de_ContributionAnalysisDefault = (output: any, context: __SerdeContext): ContributionAnalysisDefault => {
  return {
    ContributorDimensions:
      output.ContributorDimensions != null
        ? de_ContributorDimensionList(output.ContributorDimensions, context)
        : undefined,
    MeasureFieldId: __expectString(output.MeasureFieldId),
  } as any;
};

/**
 * deserializeAws_restJson1ContributionAnalysisDefaultList
 */
const de_ContributionAnalysisDefaultList = (output: any, context: __SerdeContext): ContributionAnalysisDefault[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ContributionAnalysisDefault(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ContributorDimensionList
 */
const de_ContributorDimensionList = (output: any, context: __SerdeContext): ColumnIdentifier[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ColumnIdentifier(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1CreateColumnsOperation
 */
const de_CreateColumnsOperation = (output: any, context: __SerdeContext): CreateColumnsOperation => {
  return {
    Columns: output.Columns != null ? de_CalculatedColumnList(output.Columns, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1CurrencyDisplayFormatConfiguration
 */
const de_CurrencyDisplayFormatConfiguration = (
  output: any,
  context: __SerdeContext
): CurrencyDisplayFormatConfiguration => {
  return {
    DecimalPlacesConfiguration:
      output.DecimalPlacesConfiguration != null
        ? de_DecimalPlacesConfiguration(output.DecimalPlacesConfiguration, context)
        : undefined,
    NegativeValueConfiguration:
      output.NegativeValueConfiguration != null
        ? de_NegativeValueConfiguration(output.NegativeValueConfiguration, context)
        : undefined,
    NullValueFormatConfiguration:
      output.NullValueFormatConfiguration != null
        ? de_NullValueFormatConfiguration(output.NullValueFormatConfiguration, context)
        : undefined,
    NumberScale: __expectString(output.NumberScale),
    Prefix: __expectString(output.Prefix),
    SeparatorConfiguration:
      output.SeparatorConfiguration != null
        ? de_NumericSeparatorConfiguration(output.SeparatorConfiguration, context)
        : undefined,
    Suffix: __expectString(output.Suffix),
    Symbol: __expectString(output.Symbol),
  } as any;
};

/**
 * deserializeAws_restJson1CustomActionFilterOperation
 */
const de_CustomActionFilterOperation = (output: any, context: __SerdeContext): CustomActionFilterOperation => {
  return {
    SelectedFieldsConfiguration:
      output.SelectedFieldsConfiguration != null
        ? de_FilterOperationSelectedFieldsConfiguration(output.SelectedFieldsConfiguration, context)
        : undefined,
    TargetVisualsConfiguration:
      output.TargetVisualsConfiguration != null
        ? de_FilterOperationTargetVisualsConfiguration(output.TargetVisualsConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1CustomActionNavigationOperation
 */
const de_CustomActionNavigationOperation = (output: any, context: __SerdeContext): CustomActionNavigationOperation => {
  return {
    LocalNavigationConfiguration:
      output.LocalNavigationConfiguration != null
        ? de_LocalNavigationConfiguration(output.LocalNavigationConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1CustomActionSetParametersOperation
 */
const de_CustomActionSetParametersOperation = (
  output: any,
  context: __SerdeContext
): CustomActionSetParametersOperation => {
  return {
    ParameterValueConfigurations:
      output.ParameterValueConfigurations != null
        ? de_SetParameterValueConfigurationList(output.ParameterValueConfigurations, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1CustomActionURLOperation
 */
const de_CustomActionURLOperation = (output: any, context: __SerdeContext): CustomActionURLOperation => {
  return {
    URLTarget: __expectString(output.URLTarget),
    URLTemplate: __expectString(output.URLTemplate),
  } as any;
};

/**
 * deserializeAws_restJson1CustomContentConfiguration
 */
const de_CustomContentConfiguration = (output: any, context: __SerdeContext): CustomContentConfiguration => {
  return {
    ContentType: __expectString(output.ContentType),
    ContentUrl: __expectString(output.ContentUrl),
    ImageScaling: __expectString(output.ImageScaling),
  } as any;
};

/**
 * deserializeAws_restJson1CustomContentVisual
 */
const de_CustomContentVisual = (output: any, context: __SerdeContext): CustomContentVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_CustomContentConfiguration(output.ChartConfiguration, context) : undefined,
    DataSetIdentifier: __expectString(output.DataSetIdentifier),
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1CustomFilterConfiguration
 */
const de_CustomFilterConfiguration = (output: any, context: __SerdeContext): CustomFilterConfiguration => {
  return {
    CategoryValue: __expectString(output.CategoryValue),
    MatchOperator: __expectString(output.MatchOperator),
    NullOption: __expectString(output.NullOption),
    ParameterName: __expectString(output.ParameterName),
    SelectAllOptions: __expectString(output.SelectAllOptions),
  } as any;
};

/**
 * deserializeAws_restJson1CustomFilterListConfiguration
 */
const de_CustomFilterListConfiguration = (output: any, context: __SerdeContext): CustomFilterListConfiguration => {
  return {
    CategoryValues: output.CategoryValues != null ? de_CategoryValueList(output.CategoryValues, context) : undefined,
    MatchOperator: __expectString(output.MatchOperator),
    NullOption: __expectString(output.NullOption),
    SelectAllOptions: __expectString(output.SelectAllOptions),
  } as any;
};

/**
 * deserializeAws_restJson1CustomNarrativeOptions
 */
const de_CustomNarrativeOptions = (output: any, context: __SerdeContext): CustomNarrativeOptions => {
  return {
    Narrative: __expectString(output.Narrative),
  } as any;
};

/**
 * deserializeAws_restJson1CustomParameterValues
 */
const de_CustomParameterValues = (output: any, context: __SerdeContext): CustomParameterValues => {
  return {
    DateTimeValues:
      output.DateTimeValues != null ? de_DateTimeDefaultValueList(output.DateTimeValues, context) : undefined,
    DecimalValues: output.DecimalValues != null ? de_DecimalDefaultValueList(output.DecimalValues, context) : undefined,
    IntegerValues: output.IntegerValues != null ? de_IntegerDefaultValueList(output.IntegerValues, context) : undefined,
    StringValues: output.StringValues != null ? de_StringDefaultValueList(output.StringValues, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1CustomSql
 */
const de_CustomSql = (output: any, context: __SerdeContext): CustomSql => {
  return {
    Columns: output.Columns != null ? de_InputColumnList(output.Columns, context) : undefined,
    DataSourceArn: __expectString(output.DataSourceArn),
    Name: __expectString(output.Name),
    SqlQuery: __expectString(output.SqlQuery),
  } as any;
};

/**
 * deserializeAws_restJson1CustomValuesConfiguration
 */
const de_CustomValuesConfiguration = (output: any, context: __SerdeContext): CustomValuesConfiguration => {
  return {
    CustomValues: output.CustomValues != null ? de_CustomParameterValues(output.CustomValues, context) : undefined,
    IncludeNullValue: __expectBoolean(output.IncludeNullValue),
  } as any;
};

/**
 * deserializeAws_restJson1Dashboard
 */
const de_Dashboard = (output: any, context: __SerdeContext): Dashboard => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    DashboardId: __expectString(output.DashboardId),
    LastPublishedTime:
      output.LastPublishedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastPublishedTime)))
        : undefined,
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    Name: __expectString(output.Name),
    Version: output.Version != null ? de_DashboardVersion(output.Version, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DashboardError
 */
const de_DashboardError = (output: any, context: __SerdeContext): DashboardError => {
  return {
    Message: __expectString(output.Message),
    Type: __expectString(output.Type),
    ViolatedEntities: output.ViolatedEntities != null ? de_EntityList(output.ViolatedEntities, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DashboardErrorList
 */
const de_DashboardErrorList = (output: any, context: __SerdeContext): DashboardError[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DashboardError(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DashboardPublishOptions
 */
const de_DashboardPublishOptions = (output: any, context: __SerdeContext): DashboardPublishOptions => {
  return {
    AdHocFilteringOption:
      output.AdHocFilteringOption != null ? de_AdHocFilteringOption(output.AdHocFilteringOption, context) : undefined,
    DataPointDrillUpDownOption:
      output.DataPointDrillUpDownOption != null
        ? de_DataPointDrillUpDownOption(output.DataPointDrillUpDownOption, context)
        : undefined,
    DataPointMenuLabelOption:
      output.DataPointMenuLabelOption != null
        ? de_DataPointMenuLabelOption(output.DataPointMenuLabelOption, context)
        : undefined,
    DataPointTooltipOption:
      output.DataPointTooltipOption != null
        ? de_DataPointTooltipOption(output.DataPointTooltipOption, context)
        : undefined,
    ExportToCSVOption:
      output.ExportToCSVOption != null ? de_ExportToCSVOption(output.ExportToCSVOption, context) : undefined,
    ExportWithHiddenFieldsOption:
      output.ExportWithHiddenFieldsOption != null
        ? de_ExportWithHiddenFieldsOption(output.ExportWithHiddenFieldsOption, context)
        : undefined,
    SheetControlsOption:
      output.SheetControlsOption != null ? de_SheetControlsOption(output.SheetControlsOption, context) : undefined,
    SheetLayoutElementMaximizationOption:
      output.SheetLayoutElementMaximizationOption != null
        ? de_SheetLayoutElementMaximizationOption(output.SheetLayoutElementMaximizationOption, context)
        : undefined,
    VisualAxisSortOption:
      output.VisualAxisSortOption != null ? de_VisualAxisSortOption(output.VisualAxisSortOption, context) : undefined,
    VisualMenuOption:
      output.VisualMenuOption != null ? de_VisualMenuOption(output.VisualMenuOption, context) : undefined,
    VisualPublishOptions:
      output.VisualPublishOptions != null
        ? de_DashboardVisualPublishOptions(output.VisualPublishOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DashboardSummary
 */
const de_DashboardSummary = (output: any, context: __SerdeContext): DashboardSummary => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    DashboardId: __expectString(output.DashboardId),
    LastPublishedTime:
      output.LastPublishedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastPublishedTime)))
        : undefined,
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    Name: __expectString(output.Name),
    PublishedVersionNumber: __expectLong(output.PublishedVersionNumber),
  } as any;
};

/**
 * deserializeAws_restJson1DashboardSummaryList
 */
const de_DashboardSummaryList = (output: any, context: __SerdeContext): DashboardSummary[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DashboardSummary(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DashboardVersion
 */
const de_DashboardVersion = (output: any, context: __SerdeContext): DashboardVersion => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    DataSetArns: output.DataSetArns != null ? de_DataSetArnsList(output.DataSetArns, context) : undefined,
    Description: __expectString(output.Description),
    Errors: output.Errors != null ? de_DashboardErrorList(output.Errors, context) : undefined,
    Sheets: output.Sheets != null ? de_SheetList(output.Sheets, context) : undefined,
    SourceEntityArn: __expectString(output.SourceEntityArn),
    Status: __expectString(output.Status),
    ThemeArn: __expectString(output.ThemeArn),
    VersionNumber: __expectLong(output.VersionNumber),
  } as any;
};

/**
 * deserializeAws_restJson1DashboardVersionDefinition
 */
const de_DashboardVersionDefinition = (output: any, context: __SerdeContext): DashboardVersionDefinition => {
  return {
    AnalysisDefaults:
      output.AnalysisDefaults != null ? de_AnalysisDefaults(output.AnalysisDefaults, context) : undefined,
    CalculatedFields:
      output.CalculatedFields != null ? de_CalculatedFields(output.CalculatedFields, context) : undefined,
    ColumnConfigurations:
      output.ColumnConfigurations != null
        ? de_ColumnConfigurationList(output.ColumnConfigurations, context)
        : undefined,
    DataSetIdentifierDeclarations:
      output.DataSetIdentifierDeclarations != null
        ? de_DataSetIdentifierDeclarationList(output.DataSetIdentifierDeclarations, context)
        : undefined,
    FilterGroups: output.FilterGroups != null ? de_FilterGroupList(output.FilterGroups, context) : undefined,
    ParameterDeclarations:
      output.ParameterDeclarations != null
        ? de_ParameterDeclarationList(output.ParameterDeclarations, context)
        : undefined,
    Sheets: output.Sheets != null ? de_SheetDefinitionList(output.Sheets, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DashboardVersionSummary
 */
const de_DashboardVersionSummary = (output: any, context: __SerdeContext): DashboardVersionSummary => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    Description: __expectString(output.Description),
    SourceEntityArn: __expectString(output.SourceEntityArn),
    Status: __expectString(output.Status),
    VersionNumber: __expectLong(output.VersionNumber),
  } as any;
};

/**
 * deserializeAws_restJson1DashboardVersionSummaryList
 */
const de_DashboardVersionSummaryList = (output: any, context: __SerdeContext): DashboardVersionSummary[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DashboardVersionSummary(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DashboardVisualPublishOptions
 */
const de_DashboardVisualPublishOptions = (output: any, context: __SerdeContext): DashboardVisualPublishOptions => {
  return {
    ExportHiddenFieldsOption:
      output.ExportHiddenFieldsOption != null
        ? de_ExportHiddenFieldsOption(output.ExportHiddenFieldsOption, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DataBarsOptions
 */
const de_DataBarsOptions = (output: any, context: __SerdeContext): DataBarsOptions => {
  return {
    FieldId: __expectString(output.FieldId),
    NegativeColor: __expectString(output.NegativeColor),
    PositiveColor: __expectString(output.PositiveColor),
  } as any;
};

/**
 * deserializeAws_restJson1DatabricksParameters
 */
const de_DatabricksParameters = (output: any, context: __SerdeContext): DatabricksParameters => {
  return {
    Host: __expectString(output.Host),
    Port: __expectInt32(output.Port),
    SqlEndpointPath: __expectString(output.SqlEndpointPath),
  } as any;
};

/**
 * deserializeAws_restJson1DataColor
 */
const de_DataColor = (output: any, context: __SerdeContext): DataColor => {
  return {
    Color: __expectString(output.Color),
    DataValue: __limitedParseDouble(output.DataValue),
  } as any;
};

/**
 * deserializeAws_restJson1DataColorPalette
 */
const de_DataColorPalette = (output: any, context: __SerdeContext): DataColorPalette => {
  return {
    Colors: output.Colors != null ? de_ColorList(output.Colors, context) : undefined,
    EmptyFillColor: __expectString(output.EmptyFillColor),
    MinMaxGradient: output.MinMaxGradient != null ? de_ColorList(output.MinMaxGradient, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DataFieldSeriesItem
 */
const de_DataFieldSeriesItem = (output: any, context: __SerdeContext): DataFieldSeriesItem => {
  return {
    AxisBinding: __expectString(output.AxisBinding),
    FieldId: __expectString(output.FieldId),
    FieldValue: __expectString(output.FieldValue),
    Settings: output.Settings != null ? de_LineChartSeriesSettings(output.Settings, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DataLabelOptions
 */
const de_DataLabelOptions = (output: any, context: __SerdeContext): DataLabelOptions => {
  return {
    CategoryLabelVisibility: __expectString(output.CategoryLabelVisibility),
    DataLabelTypes: output.DataLabelTypes != null ? de_DataLabelTypes(output.DataLabelTypes, context) : undefined,
    LabelColor: __expectString(output.LabelColor),
    LabelContent: __expectString(output.LabelContent),
    LabelFontConfiguration:
      output.LabelFontConfiguration != null ? de_FontConfiguration(output.LabelFontConfiguration, context) : undefined,
    MeasureLabelVisibility: __expectString(output.MeasureLabelVisibility),
    Overlap: __expectString(output.Overlap),
    Position: __expectString(output.Position),
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1DataLabelType
 */
const de_DataLabelType = (output: any, context: __SerdeContext): DataLabelType => {
  return {
    DataPathLabelType:
      output.DataPathLabelType != null ? de_DataPathLabelType(output.DataPathLabelType, context) : undefined,
    FieldLabelType: output.FieldLabelType != null ? de_FieldLabelType(output.FieldLabelType, context) : undefined,
    MaximumLabelType:
      output.MaximumLabelType != null ? de_MaximumLabelType(output.MaximumLabelType, context) : undefined,
    MinimumLabelType:
      output.MinimumLabelType != null ? de_MinimumLabelType(output.MinimumLabelType, context) : undefined,
    RangeEndsLabelType:
      output.RangeEndsLabelType != null ? de_RangeEndsLabelType(output.RangeEndsLabelType, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DataLabelTypes
 */
const de_DataLabelTypes = (output: any, context: __SerdeContext): DataLabelType[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DataLabelType(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DataPathColor
 */
const de_DataPathColor = (output: any, context: __SerdeContext): DataPathColor => {
  return {
    Color: __expectString(output.Color),
    Element: output.Element != null ? de_DataPathValue(output.Element, context) : undefined,
    TimeGranularity: __expectString(output.TimeGranularity),
  } as any;
};

/**
 * deserializeAws_restJson1DataPathColorList
 */
const de_DataPathColorList = (output: any, context: __SerdeContext): DataPathColor[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DataPathColor(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DataPathLabelType
 */
const de_DataPathLabelType = (output: any, context: __SerdeContext): DataPathLabelType => {
  return {
    FieldId: __expectString(output.FieldId),
    FieldValue: __expectString(output.FieldValue),
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1DataPathSort
 */
const de_DataPathSort = (output: any, context: __SerdeContext): DataPathSort => {
  return {
    Direction: __expectString(output.Direction),
    SortPaths: output.SortPaths != null ? de_DataPathValueList(output.SortPaths, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DataPathValue
 */
const de_DataPathValue = (output: any, context: __SerdeContext): DataPathValue => {
  return {
    FieldId: __expectString(output.FieldId),
    FieldValue: __expectString(output.FieldValue),
  } as any;
};

/**
 * deserializeAws_restJson1DataPathValueList
 */
const de_DataPathValueList = (output: any, context: __SerdeContext): DataPathValue[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DataPathValue(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DataPointDrillUpDownOption
 */
const de_DataPointDrillUpDownOption = (output: any, context: __SerdeContext): DataPointDrillUpDownOption => {
  return {
    AvailabilityStatus: __expectString(output.AvailabilityStatus),
  } as any;
};

/**
 * deserializeAws_restJson1DataPointMenuLabelOption
 */
const de_DataPointMenuLabelOption = (output: any, context: __SerdeContext): DataPointMenuLabelOption => {
  return {
    AvailabilityStatus: __expectString(output.AvailabilityStatus),
  } as any;
};

/**
 * deserializeAws_restJson1DataPointTooltipOption
 */
const de_DataPointTooltipOption = (output: any, context: __SerdeContext): DataPointTooltipOption => {
  return {
    AvailabilityStatus: __expectString(output.AvailabilityStatus),
  } as any;
};

/**
 * deserializeAws_restJson1DataSet
 */
const de_DataSet = (output: any, context: __SerdeContext): DataSet => {
  return {
    Arn: __expectString(output.Arn),
    ColumnGroups: output.ColumnGroups != null ? de_ColumnGroupList(output.ColumnGroups, context) : undefined,
    ColumnLevelPermissionRules:
      output.ColumnLevelPermissionRules != null
        ? de_ColumnLevelPermissionRuleList(output.ColumnLevelPermissionRules, context)
        : undefined,
    ConsumedSpiceCapacityInBytes: __expectLong(output.ConsumedSpiceCapacityInBytes),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    DataSetId: __expectString(output.DataSetId),
    DataSetUsageConfiguration:
      output.DataSetUsageConfiguration != null
        ? de_DataSetUsageConfiguration(output.DataSetUsageConfiguration, context)
        : undefined,
    FieldFolders: output.FieldFolders != null ? de_FieldFolderMap(output.FieldFolders, context) : undefined,
    ImportMode: __expectString(output.ImportMode),
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    LogicalTableMap: output.LogicalTableMap != null ? de_LogicalTableMap(output.LogicalTableMap, context) : undefined,
    Name: __expectString(output.Name),
    OutputColumns: output.OutputColumns != null ? de_OutputColumnList(output.OutputColumns, context) : undefined,
    PhysicalTableMap:
      output.PhysicalTableMap != null ? de_PhysicalTableMap(output.PhysicalTableMap, context) : undefined,
    RowLevelPermissionDataSet:
      output.RowLevelPermissionDataSet != null
        ? de_RowLevelPermissionDataSet(output.RowLevelPermissionDataSet, context)
        : undefined,
    RowLevelPermissionTagConfiguration:
      output.RowLevelPermissionTagConfiguration != null
        ? de_RowLevelPermissionTagConfiguration(output.RowLevelPermissionTagConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DataSetArnsList
 */
const de_DataSetArnsList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DataSetConfiguration
 */
const de_DataSetConfiguration = (output: any, context: __SerdeContext): DataSetConfiguration => {
  return {
    ColumnGroupSchemaList:
      output.ColumnGroupSchemaList != null
        ? de_ColumnGroupSchemaList(output.ColumnGroupSchemaList, context)
        : undefined,
    DataSetSchema: output.DataSetSchema != null ? de_DataSetSchema(output.DataSetSchema, context) : undefined,
    Placeholder: __expectString(output.Placeholder),
  } as any;
};

/**
 * deserializeAws_restJson1DataSetConfigurationList
 */
const de_DataSetConfigurationList = (output: any, context: __SerdeContext): DataSetConfiguration[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DataSetConfiguration(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DataSetIdentifierDeclaration
 */
const de_DataSetIdentifierDeclaration = (output: any, context: __SerdeContext): DataSetIdentifierDeclaration => {
  return {
    DataSetArn: __expectString(output.DataSetArn),
    Identifier: __expectString(output.Identifier),
  } as any;
};

/**
 * deserializeAws_restJson1DataSetIdentifierDeclarationList
 */
const de_DataSetIdentifierDeclarationList = (output: any, context: __SerdeContext): DataSetIdentifierDeclaration[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DataSetIdentifierDeclaration(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DataSetSchema
 */
const de_DataSetSchema = (output: any, context: __SerdeContext): DataSetSchema => {
  return {
    ColumnSchemaList:
      output.ColumnSchemaList != null ? de_ColumnSchemaList(output.ColumnSchemaList, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DataSetSummary
 */
const de_DataSetSummary = (output: any, context: __SerdeContext): DataSetSummary => {
  return {
    Arn: __expectString(output.Arn),
    ColumnLevelPermissionRulesApplied: __expectBoolean(output.ColumnLevelPermissionRulesApplied),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    DataSetId: __expectString(output.DataSetId),
    ImportMode: __expectString(output.ImportMode),
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    Name: __expectString(output.Name),
    RowLevelPermissionDataSet:
      output.RowLevelPermissionDataSet != null
        ? de_RowLevelPermissionDataSet(output.RowLevelPermissionDataSet, context)
        : undefined,
    RowLevelPermissionTagConfigurationApplied: __expectBoolean(output.RowLevelPermissionTagConfigurationApplied),
  } as any;
};

/**
 * deserializeAws_restJson1DataSetSummaryList
 */
const de_DataSetSummaryList = (output: any, context: __SerdeContext): DataSetSummary[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DataSetSummary(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DataSetUsageConfiguration
 */
const de_DataSetUsageConfiguration = (output: any, context: __SerdeContext): DataSetUsageConfiguration => {
  return {
    DisableUseAsDirectQuerySource: __expectBoolean(output.DisableUseAsDirectQuerySource),
    DisableUseAsImportedSource: __expectBoolean(output.DisableUseAsImportedSource),
  } as any;
};

/**
 * deserializeAws_restJson1DataSource
 */
const de_DataSource = (output: any, context: __SerdeContext): DataSource => {
  return {
    AlternateDataSourceParameters:
      output.AlternateDataSourceParameters != null
        ? de_DataSourceParametersList(output.AlternateDataSourceParameters, context)
        : undefined,
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    DataSourceId: __expectString(output.DataSourceId),
    DataSourceParameters:
      output.DataSourceParameters != null
        ? de_DataSourceParameters(__expectUnion(output.DataSourceParameters), context)
        : undefined,
    ErrorInfo: output.ErrorInfo != null ? de_DataSourceErrorInfo(output.ErrorInfo, context) : undefined,
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    Name: __expectString(output.Name),
    SecretArn: __expectString(output.SecretArn),
    SslProperties: output.SslProperties != null ? de_SslProperties(output.SslProperties, context) : undefined,
    Status: __expectString(output.Status),
    Type: __expectString(output.Type),
    VpcConnectionProperties:
      output.VpcConnectionProperties != null
        ? de_VpcConnectionProperties(output.VpcConnectionProperties, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DataSourceErrorInfo
 */
const de_DataSourceErrorInfo = (output: any, context: __SerdeContext): DataSourceErrorInfo => {
  return {
    Message: __expectString(output.Message),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1DataSourceList
 */
const de_DataSourceList = (output: any, context: __SerdeContext): DataSource[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DataSource(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DataSourceParameters
 */
const de_DataSourceParameters = (output: any, context: __SerdeContext): DataSourceParameters => {
  if (output.AmazonElasticsearchParameters != null) {
    return {
      AmazonElasticsearchParameters: de_AmazonElasticsearchParameters(output.AmazonElasticsearchParameters, context),
    };
  }
  if (output.AmazonOpenSearchParameters != null) {
    return {
      AmazonOpenSearchParameters: de_AmazonOpenSearchParameters(output.AmazonOpenSearchParameters, context),
    };
  }
  if (output.AthenaParameters != null) {
    return {
      AthenaParameters: de_AthenaParameters(output.AthenaParameters, context),
    };
  }
  if (output.AuroraParameters != null) {
    return {
      AuroraParameters: de_AuroraParameters(output.AuroraParameters, context),
    };
  }
  if (output.AuroraPostgreSqlParameters != null) {
    return {
      AuroraPostgreSqlParameters: de_AuroraPostgreSqlParameters(output.AuroraPostgreSqlParameters, context),
    };
  }
  if (output.AwsIotAnalyticsParameters != null) {
    return {
      AwsIotAnalyticsParameters: de_AwsIotAnalyticsParameters(output.AwsIotAnalyticsParameters, context),
    };
  }
  if (output.DatabricksParameters != null) {
    return {
      DatabricksParameters: de_DatabricksParameters(output.DatabricksParameters, context),
    };
  }
  if (output.ExasolParameters != null) {
    return {
      ExasolParameters: de_ExasolParameters(output.ExasolParameters, context),
    };
  }
  if (output.JiraParameters != null) {
    return {
      JiraParameters: de_JiraParameters(output.JiraParameters, context),
    };
  }
  if (output.MariaDbParameters != null) {
    return {
      MariaDbParameters: de_MariaDbParameters(output.MariaDbParameters, context),
    };
  }
  if (output.MySqlParameters != null) {
    return {
      MySqlParameters: de_MySqlParameters(output.MySqlParameters, context),
    };
  }
  if (output.OracleParameters != null) {
    return {
      OracleParameters: de_OracleParameters(output.OracleParameters, context),
    };
  }
  if (output.PostgreSqlParameters != null) {
    return {
      PostgreSqlParameters: de_PostgreSqlParameters(output.PostgreSqlParameters, context),
    };
  }
  if (output.PrestoParameters != null) {
    return {
      PrestoParameters: de_PrestoParameters(output.PrestoParameters, context),
    };
  }
  if (output.RdsParameters != null) {
    return {
      RdsParameters: de_RdsParameters(output.RdsParameters, context),
    };
  }
  if (output.RedshiftParameters != null) {
    return {
      RedshiftParameters: de_RedshiftParameters(output.RedshiftParameters, context),
    };
  }
  if (output.S3Parameters != null) {
    return {
      S3Parameters: de_S3Parameters(output.S3Parameters, context),
    };
  }
  if (output.ServiceNowParameters != null) {
    return {
      ServiceNowParameters: de_ServiceNowParameters(output.ServiceNowParameters, context),
    };
  }
  if (output.SnowflakeParameters != null) {
    return {
      SnowflakeParameters: de_SnowflakeParameters(output.SnowflakeParameters, context),
    };
  }
  if (output.SparkParameters != null) {
    return {
      SparkParameters: de_SparkParameters(output.SparkParameters, context),
    };
  }
  if (output.SqlServerParameters != null) {
    return {
      SqlServerParameters: de_SqlServerParameters(output.SqlServerParameters, context),
    };
  }
  if (output.TeradataParameters != null) {
    return {
      TeradataParameters: de_TeradataParameters(output.TeradataParameters, context),
    };
  }
  if (output.TwitterParameters != null) {
    return {
      TwitterParameters: de_TwitterParameters(output.TwitterParameters, context),
    };
  }
  return { $unknown: Object.entries(output)[0] };
};

/**
 * deserializeAws_restJson1DataSourceParametersList
 */
const de_DataSourceParametersList = (output: any, context: __SerdeContext): DataSourceParameters[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DataSourceParameters(__expectUnion(entry), context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DataSourceSummary
 */
const de_DataSourceSummary = (output: any, context: __SerdeContext): DataSourceSummary => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    DataSourceId: __expectString(output.DataSourceId),
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    Name: __expectString(output.Name),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1DataSourceSummaryList
 */
const de_DataSourceSummaryList = (output: any, context: __SerdeContext): DataSourceSummary[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DataSourceSummary(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DateAxisOptions
 */
const de_DateAxisOptions = (output: any, context: __SerdeContext): DateAxisOptions => {
  return {
    MissingDateVisibility: __expectString(output.MissingDateVisibility),
  } as any;
};

/**
 * deserializeAws_restJson1DateDimensionField
 */
const de_DateDimensionField = (output: any, context: __SerdeContext): DateDimensionField => {
  return {
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    DateGranularity: __expectString(output.DateGranularity),
    FieldId: __expectString(output.FieldId),
    FormatConfiguration:
      output.FormatConfiguration != null
        ? de_DateTimeFormatConfiguration(output.FormatConfiguration, context)
        : undefined,
    HierarchyId: __expectString(output.HierarchyId),
  } as any;
};

/**
 * deserializeAws_restJson1DateMeasureField
 */
const de_DateMeasureField = (output: any, context: __SerdeContext): DateMeasureField => {
  return {
    AggregationFunction: __expectString(output.AggregationFunction),
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    FieldId: __expectString(output.FieldId),
    FormatConfiguration:
      output.FormatConfiguration != null
        ? de_DateTimeFormatConfiguration(output.FormatConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DateTimeDefaultValueList
 */
const de_DateTimeDefaultValueList = (output: any, context: __SerdeContext): Date[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectNonNull(__parseEpochTimestamp(__expectNumber(entry)));
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DateTimeDefaultValues
 */
const de_DateTimeDefaultValues = (output: any, context: __SerdeContext): DateTimeDefaultValues => {
  return {
    DynamicValue: output.DynamicValue != null ? de_DynamicDefaultValue(output.DynamicValue, context) : undefined,
    RollingDate: output.RollingDate != null ? de_RollingDateConfiguration(output.RollingDate, context) : undefined,
    StaticValues: output.StaticValues != null ? de_DateTimeDefaultValueList(output.StaticValues, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DateTimeFormatConfiguration
 */
const de_DateTimeFormatConfiguration = (output: any, context: __SerdeContext): DateTimeFormatConfiguration => {
  return {
    DateTimeFormat: __expectString(output.DateTimeFormat),
    NullValueFormatConfiguration:
      output.NullValueFormatConfiguration != null
        ? de_NullValueFormatConfiguration(output.NullValueFormatConfiguration, context)
        : undefined,
    NumericFormatConfiguration:
      output.NumericFormatConfiguration != null
        ? de_NumericFormatConfiguration(output.NumericFormatConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DateTimeHierarchy
 */
const de_DateTimeHierarchy = (output: any, context: __SerdeContext): DateTimeHierarchy => {
  return {
    DrillDownFilters:
      output.DrillDownFilters != null ? de_DrillDownFilterList(output.DrillDownFilters, context) : undefined,
    HierarchyId: __expectString(output.HierarchyId),
  } as any;
};

/**
 * deserializeAws_restJson1DateTimeParameterDeclaration
 */
const de_DateTimeParameterDeclaration = (output: any, context: __SerdeContext): DateTimeParameterDeclaration => {
  return {
    DefaultValues: output.DefaultValues != null ? de_DateTimeDefaultValues(output.DefaultValues, context) : undefined,
    Name: __expectString(output.Name),
    TimeGranularity: __expectString(output.TimeGranularity),
    ValueWhenUnset:
      output.ValueWhenUnset != null
        ? de_DateTimeValueWhenUnsetConfiguration(output.ValueWhenUnset, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DateTimePickerControlDisplayOptions
 */
const de_DateTimePickerControlDisplayOptions = (
  output: any,
  context: __SerdeContext
): DateTimePickerControlDisplayOptions => {
  return {
    DateTimeFormat: __expectString(output.DateTimeFormat),
    TitleOptions: output.TitleOptions != null ? de_LabelOptions(output.TitleOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DateTimeValueWhenUnsetConfiguration
 */
const de_DateTimeValueWhenUnsetConfiguration = (
  output: any,
  context: __SerdeContext
): DateTimeValueWhenUnsetConfiguration => {
  return {
    CustomValue:
      output.CustomValue != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CustomValue)))
        : undefined,
    ValueWhenUnsetOption: __expectString(output.ValueWhenUnsetOption),
  } as any;
};

/**
 * deserializeAws_restJson1DecimalDefaultValueList
 */
const de_DecimalDefaultValueList = (output: any, context: __SerdeContext): number[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __limitedParseDouble(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DecimalDefaultValues
 */
const de_DecimalDefaultValues = (output: any, context: __SerdeContext): DecimalDefaultValues => {
  return {
    DynamicValue: output.DynamicValue != null ? de_DynamicDefaultValue(output.DynamicValue, context) : undefined,
    StaticValues: output.StaticValues != null ? de_DecimalDefaultValueList(output.StaticValues, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DecimalParameterDeclaration
 */
const de_DecimalParameterDeclaration = (output: any, context: __SerdeContext): DecimalParameterDeclaration => {
  return {
    DefaultValues: output.DefaultValues != null ? de_DecimalDefaultValues(output.DefaultValues, context) : undefined,
    Name: __expectString(output.Name),
    ParameterValueType: __expectString(output.ParameterValueType),
    ValueWhenUnset:
      output.ValueWhenUnset != null ? de_DecimalValueWhenUnsetConfiguration(output.ValueWhenUnset, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DecimalPlacesConfiguration
 */
const de_DecimalPlacesConfiguration = (output: any, context: __SerdeContext): DecimalPlacesConfiguration => {
  return {
    DecimalPlaces: __expectLong(output.DecimalPlaces),
  } as any;
};

/**
 * deserializeAws_restJson1DecimalValueWhenUnsetConfiguration
 */
const de_DecimalValueWhenUnsetConfiguration = (
  output: any,
  context: __SerdeContext
): DecimalValueWhenUnsetConfiguration => {
  return {
    CustomValue: __limitedParseDouble(output.CustomValue),
    ValueWhenUnsetOption: __expectString(output.ValueWhenUnsetOption),
  } as any;
};

/**
 * deserializeAws_restJson1DefaultFreeFormLayoutConfiguration
 */
const de_DefaultFreeFormLayoutConfiguration = (
  output: any,
  context: __SerdeContext
): DefaultFreeFormLayoutConfiguration => {
  return {
    CanvasSizeOptions:
      output.CanvasSizeOptions != null
        ? de_FreeFormLayoutCanvasSizeOptions(output.CanvasSizeOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DefaultGridLayoutConfiguration
 */
const de_DefaultGridLayoutConfiguration = (output: any, context: __SerdeContext): DefaultGridLayoutConfiguration => {
  return {
    CanvasSizeOptions:
      output.CanvasSizeOptions != null ? de_GridLayoutCanvasSizeOptions(output.CanvasSizeOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DefaultInteractiveLayoutConfiguration
 */
const de_DefaultInteractiveLayoutConfiguration = (
  output: any,
  context: __SerdeContext
): DefaultInteractiveLayoutConfiguration => {
  return {
    FreeForm: output.FreeForm != null ? de_DefaultFreeFormLayoutConfiguration(output.FreeForm, context) : undefined,
    Grid: output.Grid != null ? de_DefaultGridLayoutConfiguration(output.Grid, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DefaultNewSheetConfiguration
 */
const de_DefaultNewSheetConfiguration = (output: any, context: __SerdeContext): DefaultNewSheetConfiguration => {
  return {
    InteractiveLayoutConfiguration:
      output.InteractiveLayoutConfiguration != null
        ? de_DefaultInteractiveLayoutConfiguration(output.InteractiveLayoutConfiguration, context)
        : undefined,
    PaginatedLayoutConfiguration:
      output.PaginatedLayoutConfiguration != null
        ? de_DefaultPaginatedLayoutConfiguration(output.PaginatedLayoutConfiguration, context)
        : undefined,
    SheetContentType: __expectString(output.SheetContentType),
  } as any;
};

/**
 * deserializeAws_restJson1DefaultPaginatedLayoutConfiguration
 */
const de_DefaultPaginatedLayoutConfiguration = (
  output: any,
  context: __SerdeContext
): DefaultPaginatedLayoutConfiguration => {
  return {
    SectionBased:
      output.SectionBased != null ? de_DefaultSectionBasedLayoutConfiguration(output.SectionBased, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DefaultSectionBasedLayoutConfiguration
 */
const de_DefaultSectionBasedLayoutConfiguration = (
  output: any,
  context: __SerdeContext
): DefaultSectionBasedLayoutConfiguration => {
  return {
    CanvasSizeOptions:
      output.CanvasSizeOptions != null
        ? de_SectionBasedLayoutCanvasSizeOptions(output.CanvasSizeOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DestinationParameterValueConfiguration
 */
const de_DestinationParameterValueConfiguration = (
  output: any,
  context: __SerdeContext
): DestinationParameterValueConfiguration => {
  return {
    CustomValuesConfiguration:
      output.CustomValuesConfiguration != null
        ? de_CustomValuesConfiguration(output.CustomValuesConfiguration, context)
        : undefined,
    SelectAllValueOptions: __expectString(output.SelectAllValueOptions),
    SourceField: __expectString(output.SourceField),
    SourceParameterName: __expectString(output.SourceParameterName),
  } as any;
};

/**
 * deserializeAws_restJson1DimensionField
 */
const de_DimensionField = (output: any, context: __SerdeContext): DimensionField => {
  return {
    CategoricalDimensionField:
      output.CategoricalDimensionField != null
        ? de_CategoricalDimensionField(output.CategoricalDimensionField, context)
        : undefined,
    DateDimensionField:
      output.DateDimensionField != null ? de_DateDimensionField(output.DateDimensionField, context) : undefined,
    NumericalDimensionField:
      output.NumericalDimensionField != null
        ? de_NumericalDimensionField(output.NumericalDimensionField, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DimensionFieldList
 */
const de_DimensionFieldList = (output: any, context: __SerdeContext): DimensionField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DimensionField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DonutCenterOptions
 */
const de_DonutCenterOptions = (output: any, context: __SerdeContext): DonutCenterOptions => {
  return {
    LabelVisibility: __expectString(output.LabelVisibility),
  } as any;
};

/**
 * deserializeAws_restJson1DonutOptions
 */
const de_DonutOptions = (output: any, context: __SerdeContext): DonutOptions => {
  return {
    ArcOptions: output.ArcOptions != null ? de_ArcOptions(output.ArcOptions, context) : undefined,
    DonutCenterOptions:
      output.DonutCenterOptions != null ? de_DonutCenterOptions(output.DonutCenterOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DrillDownFilter
 */
const de_DrillDownFilter = (output: any, context: __SerdeContext): DrillDownFilter => {
  return {
    CategoryFilter:
      output.CategoryFilter != null ? de_CategoryDrillDownFilter(output.CategoryFilter, context) : undefined,
    NumericEqualityFilter:
      output.NumericEqualityFilter != null
        ? de_NumericEqualityDrillDownFilter(output.NumericEqualityFilter, context)
        : undefined,
    TimeRangeFilter:
      output.TimeRangeFilter != null ? de_TimeRangeDrillDownFilter(output.TimeRangeFilter, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DrillDownFilterList
 */
const de_DrillDownFilterList = (output: any, context: __SerdeContext): DrillDownFilter[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DrillDownFilter(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1DropDownControlDisplayOptions
 */
const de_DropDownControlDisplayOptions = (output: any, context: __SerdeContext): DropDownControlDisplayOptions => {
  return {
    SelectAllOptions:
      output.SelectAllOptions != null ? de_ListControlSelectAllOptions(output.SelectAllOptions, context) : undefined,
    TitleOptions: output.TitleOptions != null ? de_LabelOptions(output.TitleOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1DynamicDefaultValue
 */
const de_DynamicDefaultValue = (output: any, context: __SerdeContext): DynamicDefaultValue => {
  return {
    DefaultValueColumn:
      output.DefaultValueColumn != null ? de_ColumnIdentifier(output.DefaultValueColumn, context) : undefined,
    GroupNameColumn: output.GroupNameColumn != null ? de_ColumnIdentifier(output.GroupNameColumn, context) : undefined,
    UserNameColumn: output.UserNameColumn != null ? de_ColumnIdentifier(output.UserNameColumn, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1EmptyVisual
 */
const de_EmptyVisual = (output: any, context: __SerdeContext): EmptyVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    DataSetIdentifier: __expectString(output.DataSetIdentifier),
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1Entity
 */
const de_Entity = (output: any, context: __SerdeContext): Entity => {
  return {
    Path: __expectString(output.Path),
  } as any;
};

/**
 * deserializeAws_restJson1EntityList
 */
const de_EntityList = (output: any, context: __SerdeContext): Entity[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_Entity(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ErrorInfo
 */
const de_ErrorInfo = (output: any, context: __SerdeContext): ErrorInfo => {
  return {
    Message: __expectString(output.Message),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1ExasolParameters
 */
const de_ExasolParameters = (output: any, context: __SerdeContext): ExasolParameters => {
  return {
    Host: __expectString(output.Host),
    Port: __expectInt32(output.Port),
  } as any;
};

/**
 * deserializeAws_restJson1ExcludePeriodConfiguration
 */
const de_ExcludePeriodConfiguration = (output: any, context: __SerdeContext): ExcludePeriodConfiguration => {
  return {
    Amount: __expectInt32(output.Amount),
    Granularity: __expectString(output.Granularity),
    Status: __expectString(output.Status),
  } as any;
};

/**
 * deserializeAws_restJson1ExplicitHierarchy
 */
const de_ExplicitHierarchy = (output: any, context: __SerdeContext): ExplicitHierarchy => {
  return {
    Columns: output.Columns != null ? de_ExplicitHierarchyColumnList(output.Columns, context) : undefined,
    DrillDownFilters:
      output.DrillDownFilters != null ? de_DrillDownFilterList(output.DrillDownFilters, context) : undefined,
    HierarchyId: __expectString(output.HierarchyId),
  } as any;
};

/**
 * deserializeAws_restJson1ExplicitHierarchyColumnList
 */
const de_ExplicitHierarchyColumnList = (output: any, context: __SerdeContext): ColumnIdentifier[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ColumnIdentifier(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ExportHiddenFieldsOption
 */
const de_ExportHiddenFieldsOption = (output: any, context: __SerdeContext): ExportHiddenFieldsOption => {
  return {
    AvailabilityStatus: __expectString(output.AvailabilityStatus),
  } as any;
};

/**
 * deserializeAws_restJson1ExportToCSVOption
 */
const de_ExportToCSVOption = (output: any, context: __SerdeContext): ExportToCSVOption => {
  return {
    AvailabilityStatus: __expectString(output.AvailabilityStatus),
  } as any;
};

/**
 * deserializeAws_restJson1ExportWithHiddenFieldsOption
 */
const de_ExportWithHiddenFieldsOption = (output: any, context: __SerdeContext): ExportWithHiddenFieldsOption => {
  return {
    AvailabilityStatus: __expectString(output.AvailabilityStatus),
  } as any;
};

/**
 * deserializeAws_restJson1FieldBasedTooltip
 */
const de_FieldBasedTooltip = (output: any, context: __SerdeContext): FieldBasedTooltip => {
  return {
    AggregationVisibility: __expectString(output.AggregationVisibility),
    TooltipFields: output.TooltipFields != null ? de_TooltipItemList(output.TooltipFields, context) : undefined,
    TooltipTitleType: __expectString(output.TooltipTitleType),
  } as any;
};

/**
 * deserializeAws_restJson1FieldFolder
 */
const de_FieldFolder = (output: any, context: __SerdeContext): FieldFolder => {
  return {
    columns: output.columns != null ? de_FolderColumnList(output.columns, context) : undefined,
    description: __expectString(output.description),
  } as any;
};

/**
 * deserializeAws_restJson1FieldFolderMap
 */
const de_FieldFolderMap = (output: any, context: __SerdeContext): Record<string, FieldFolder> => {
  return Object.entries(output).reduce((acc: Record<string, FieldFolder>, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_FieldFolder(value, context);
    return acc;
  }, {});
};

/**
 * deserializeAws_restJson1FieldLabelType
 */
const de_FieldLabelType = (output: any, context: __SerdeContext): FieldLabelType => {
  return {
    FieldId: __expectString(output.FieldId),
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1FieldOrderList
 */
const de_FieldOrderList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FieldSeriesItem
 */
const de_FieldSeriesItem = (output: any, context: __SerdeContext): FieldSeriesItem => {
  return {
    AxisBinding: __expectString(output.AxisBinding),
    FieldId: __expectString(output.FieldId),
    Settings: output.Settings != null ? de_LineChartSeriesSettings(output.Settings, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FieldSort
 */
const de_FieldSort = (output: any, context: __SerdeContext): FieldSort => {
  return {
    Direction: __expectString(output.Direction),
    FieldId: __expectString(output.FieldId),
  } as any;
};

/**
 * deserializeAws_restJson1FieldSortOptions
 */
const de_FieldSortOptions = (output: any, context: __SerdeContext): FieldSortOptions => {
  return {
    ColumnSort: output.ColumnSort != null ? de_ColumnSort(output.ColumnSort, context) : undefined,
    FieldSort: output.FieldSort != null ? de_FieldSort(output.FieldSort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FieldSortOptionsList
 */
const de_FieldSortOptionsList = (output: any, context: __SerdeContext): FieldSortOptions[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_FieldSortOptions(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FieldTooltipItem
 */
const de_FieldTooltipItem = (output: any, context: __SerdeContext): FieldTooltipItem => {
  return {
    FieldId: __expectString(output.FieldId),
    Label: __expectString(output.Label),
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1FilledMapAggregatedFieldWells
 */
const de_FilledMapAggregatedFieldWells = (output: any, context: __SerdeContext): FilledMapAggregatedFieldWells => {
  return {
    Geospatial: output.Geospatial != null ? de_FilledMapDimensionFieldList(output.Geospatial, context) : undefined,
    Values: output.Values != null ? de_FilledMapMeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FilledMapConditionalFormatting
 */
const de_FilledMapConditionalFormatting = (output: any, context: __SerdeContext): FilledMapConditionalFormatting => {
  return {
    ConditionalFormattingOptions:
      output.ConditionalFormattingOptions != null
        ? de_FilledMapConditionalFormattingOptionList(output.ConditionalFormattingOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FilledMapConditionalFormattingOption
 */
const de_FilledMapConditionalFormattingOption = (
  output: any,
  context: __SerdeContext
): FilledMapConditionalFormattingOption => {
  return {
    Shape: output.Shape != null ? de_FilledMapShapeConditionalFormatting(output.Shape, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FilledMapConditionalFormattingOptionList
 */
const de_FilledMapConditionalFormattingOptionList = (
  output: any,
  context: __SerdeContext
): FilledMapConditionalFormattingOption[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_FilledMapConditionalFormattingOption(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FilledMapConfiguration
 */
const de_FilledMapConfiguration = (output: any, context: __SerdeContext): FilledMapConfiguration => {
  return {
    FieldWells: output.FieldWells != null ? de_FilledMapFieldWells(output.FieldWells, context) : undefined,
    Legend: output.Legend != null ? de_LegendOptions(output.Legend, context) : undefined,
    MapStyleOptions:
      output.MapStyleOptions != null ? de_GeospatialMapStyleOptions(output.MapStyleOptions, context) : undefined,
    SortConfiguration:
      output.SortConfiguration != null ? de_FilledMapSortConfiguration(output.SortConfiguration, context) : undefined,
    Tooltip: output.Tooltip != null ? de_TooltipOptions(output.Tooltip, context) : undefined,
    WindowOptions: output.WindowOptions != null ? de_GeospatialWindowOptions(output.WindowOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FilledMapDimensionFieldList
 */
const de_FilledMapDimensionFieldList = (output: any, context: __SerdeContext): DimensionField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DimensionField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FilledMapFieldWells
 */
const de_FilledMapFieldWells = (output: any, context: __SerdeContext): FilledMapFieldWells => {
  return {
    FilledMapAggregatedFieldWells:
      output.FilledMapAggregatedFieldWells != null
        ? de_FilledMapAggregatedFieldWells(output.FilledMapAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FilledMapMeasureFieldList
 */
const de_FilledMapMeasureFieldList = (output: any, context: __SerdeContext): MeasureField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_MeasureField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FilledMapShapeConditionalFormatting
 */
const de_FilledMapShapeConditionalFormatting = (
  output: any,
  context: __SerdeContext
): FilledMapShapeConditionalFormatting => {
  return {
    FieldId: __expectString(output.FieldId),
    Format: output.Format != null ? de_ShapeConditionalFormat(output.Format, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FilledMapSortConfiguration
 */
const de_FilledMapSortConfiguration = (output: any, context: __SerdeContext): FilledMapSortConfiguration => {
  return {
    CategorySort: output.CategorySort != null ? de_FieldSortOptionsList(output.CategorySort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FilledMapVisual
 */
const de_FilledMapVisual = (output: any, context: __SerdeContext): FilledMapVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_FilledMapConfiguration(output.ChartConfiguration, context) : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    ConditionalFormatting:
      output.ConditionalFormatting != null
        ? de_FilledMapConditionalFormatting(output.ConditionalFormatting, context)
        : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1Filter
 */
const de_Filter = (output: any, context: __SerdeContext): Filter => {
  return {
    CategoryFilter: output.CategoryFilter != null ? de_CategoryFilter(output.CategoryFilter, context) : undefined,
    NumericEqualityFilter:
      output.NumericEqualityFilter != null
        ? de_NumericEqualityFilter(output.NumericEqualityFilter, context)
        : undefined,
    NumericRangeFilter:
      output.NumericRangeFilter != null ? de_NumericRangeFilter(output.NumericRangeFilter, context) : undefined,
    RelativeDatesFilter:
      output.RelativeDatesFilter != null ? de_RelativeDatesFilter(output.RelativeDatesFilter, context) : undefined,
    TimeEqualityFilter:
      output.TimeEqualityFilter != null ? de_TimeEqualityFilter(output.TimeEqualityFilter, context) : undefined,
    TimeRangeFilter: output.TimeRangeFilter != null ? de_TimeRangeFilter(output.TimeRangeFilter, context) : undefined,
    TopBottomFilter: output.TopBottomFilter != null ? de_TopBottomFilter(output.TopBottomFilter, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FilterControl
 */
const de_FilterControl = (output: any, context: __SerdeContext): FilterControl => {
  return {
    DateTimePicker:
      output.DateTimePicker != null ? de_FilterDateTimePickerControl(output.DateTimePicker, context) : undefined,
    Dropdown: output.Dropdown != null ? de_FilterDropDownControl(output.Dropdown, context) : undefined,
    List: output.List != null ? de_FilterListControl(output.List, context) : undefined,
    RelativeDateTime:
      output.RelativeDateTime != null ? de_FilterRelativeDateTimeControl(output.RelativeDateTime, context) : undefined,
    Slider: output.Slider != null ? de_FilterSliderControl(output.Slider, context) : undefined,
    TextArea: output.TextArea != null ? de_FilterTextAreaControl(output.TextArea, context) : undefined,
    TextField: output.TextField != null ? de_FilterTextFieldControl(output.TextField, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FilterControlList
 */
const de_FilterControlList = (output: any, context: __SerdeContext): FilterControl[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_FilterControl(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FilterDateTimePickerControl
 */
const de_FilterDateTimePickerControl = (output: any, context: __SerdeContext): FilterDateTimePickerControl => {
  return {
    DisplayOptions:
      output.DisplayOptions != null
        ? de_DateTimePickerControlDisplayOptions(output.DisplayOptions, context)
        : undefined,
    FilterControlId: __expectString(output.FilterControlId),
    SourceFilterId: __expectString(output.SourceFilterId),
    Title: __expectString(output.Title),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1FilterDropDownControl
 */
const de_FilterDropDownControl = (output: any, context: __SerdeContext): FilterDropDownControl => {
  return {
    CascadingControlConfiguration:
      output.CascadingControlConfiguration != null
        ? de_CascadingControlConfiguration(output.CascadingControlConfiguration, context)
        : undefined,
    DisplayOptions:
      output.DisplayOptions != null ? de_DropDownControlDisplayOptions(output.DisplayOptions, context) : undefined,
    FilterControlId: __expectString(output.FilterControlId),
    SelectableValues:
      output.SelectableValues != null ? de_FilterSelectableValues(output.SelectableValues, context) : undefined,
    SourceFilterId: __expectString(output.SourceFilterId),
    Title: __expectString(output.Title),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1FilteredVisualsList
 */
const de_FilteredVisualsList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FilterGroup
 */
const de_FilterGroup = (output: any, context: __SerdeContext): FilterGroup => {
  return {
    CrossDataset: __expectString(output.CrossDataset),
    FilterGroupId: __expectString(output.FilterGroupId),
    Filters: output.Filters != null ? de_FilterList(output.Filters, context) : undefined,
    ScopeConfiguration:
      output.ScopeConfiguration != null ? de_FilterScopeConfiguration(output.ScopeConfiguration, context) : undefined,
    Status: __expectString(output.Status),
  } as any;
};

/**
 * deserializeAws_restJson1FilterGroupList
 */
const de_FilterGroupList = (output: any, context: __SerdeContext): FilterGroup[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_FilterGroup(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FilterList
 */
const de_FilterList = (output: any, context: __SerdeContext): Filter[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_Filter(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FilterListConfiguration
 */
const de_FilterListConfiguration = (output: any, context: __SerdeContext): FilterListConfiguration => {
  return {
    CategoryValues: output.CategoryValues != null ? de_CategoryValueList(output.CategoryValues, context) : undefined,
    MatchOperator: __expectString(output.MatchOperator),
    SelectAllOptions: __expectString(output.SelectAllOptions),
  } as any;
};

/**
 * deserializeAws_restJson1FilterListControl
 */
const de_FilterListControl = (output: any, context: __SerdeContext): FilterListControl => {
  return {
    CascadingControlConfiguration:
      output.CascadingControlConfiguration != null
        ? de_CascadingControlConfiguration(output.CascadingControlConfiguration, context)
        : undefined,
    DisplayOptions:
      output.DisplayOptions != null ? de_ListControlDisplayOptions(output.DisplayOptions, context) : undefined,
    FilterControlId: __expectString(output.FilterControlId),
    SelectableValues:
      output.SelectableValues != null ? de_FilterSelectableValues(output.SelectableValues, context) : undefined,
    SourceFilterId: __expectString(output.SourceFilterId),
    Title: __expectString(output.Title),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1FilterOperation
 */
const de_FilterOperation = (output: any, context: __SerdeContext): FilterOperation => {
  return {
    ConditionExpression: __expectString(output.ConditionExpression),
  } as any;
};

/**
 * deserializeAws_restJson1FilterOperationSelectedFieldsConfiguration
 */
const de_FilterOperationSelectedFieldsConfiguration = (
  output: any,
  context: __SerdeContext
): FilterOperationSelectedFieldsConfiguration => {
  return {
    SelectedFieldOptions: __expectString(output.SelectedFieldOptions),
    SelectedFields: output.SelectedFields != null ? de_SelectedFieldList(output.SelectedFields, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FilterOperationTargetVisualsConfiguration
 */
const de_FilterOperationTargetVisualsConfiguration = (
  output: any,
  context: __SerdeContext
): FilterOperationTargetVisualsConfiguration => {
  return {
    SameSheetTargetVisualConfiguration:
      output.SameSheetTargetVisualConfiguration != null
        ? de_SameSheetTargetVisualConfiguration(output.SameSheetTargetVisualConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FilterRelativeDateTimeControl
 */
const de_FilterRelativeDateTimeControl = (output: any, context: __SerdeContext): FilterRelativeDateTimeControl => {
  return {
    DisplayOptions:
      output.DisplayOptions != null
        ? de_RelativeDateTimeControlDisplayOptions(output.DisplayOptions, context)
        : undefined,
    FilterControlId: __expectString(output.FilterControlId),
    SourceFilterId: __expectString(output.SourceFilterId),
    Title: __expectString(output.Title),
  } as any;
};

/**
 * deserializeAws_restJson1FilterScopeConfiguration
 */
const de_FilterScopeConfiguration = (output: any, context: __SerdeContext): FilterScopeConfiguration => {
  return {
    SelectedSheets:
      output.SelectedSheets != null
        ? de_SelectedSheetsFilterScopeConfiguration(output.SelectedSheets, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FilterSelectableValues
 */
const de_FilterSelectableValues = (output: any, context: __SerdeContext): FilterSelectableValues => {
  return {
    Values: output.Values != null ? de_ParameterSelectableValueList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FilterSliderControl
 */
const de_FilterSliderControl = (output: any, context: __SerdeContext): FilterSliderControl => {
  return {
    DisplayOptions:
      output.DisplayOptions != null ? de_SliderControlDisplayOptions(output.DisplayOptions, context) : undefined,
    FilterControlId: __expectString(output.FilterControlId),
    MaximumValue: __limitedParseDouble(output.MaximumValue),
    MinimumValue: __limitedParseDouble(output.MinimumValue),
    SourceFilterId: __expectString(output.SourceFilterId),
    StepSize: __limitedParseDouble(output.StepSize),
    Title: __expectString(output.Title),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1FilterTextAreaControl
 */
const de_FilterTextAreaControl = (output: any, context: __SerdeContext): FilterTextAreaControl => {
  return {
    Delimiter: __expectString(output.Delimiter),
    DisplayOptions:
      output.DisplayOptions != null ? de_TextAreaControlDisplayOptions(output.DisplayOptions, context) : undefined,
    FilterControlId: __expectString(output.FilterControlId),
    SourceFilterId: __expectString(output.SourceFilterId),
    Title: __expectString(output.Title),
  } as any;
};

/**
 * deserializeAws_restJson1FilterTextFieldControl
 */
const de_FilterTextFieldControl = (output: any, context: __SerdeContext): FilterTextFieldControl => {
  return {
    DisplayOptions:
      output.DisplayOptions != null ? de_TextFieldControlDisplayOptions(output.DisplayOptions, context) : undefined,
    FilterControlId: __expectString(output.FilterControlId),
    SourceFilterId: __expectString(output.SourceFilterId),
    Title: __expectString(output.Title),
  } as any;
};

/**
 * deserializeAws_restJson1Folder
 */
const de_Folder = (output: any, context: __SerdeContext): Folder => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    FolderId: __expectString(output.FolderId),
    FolderPath: output.FolderPath != null ? de_Path(output.FolderPath, context) : undefined,
    FolderType: __expectString(output.FolderType),
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    Name: __expectString(output.Name),
  } as any;
};

/**
 * deserializeAws_restJson1FolderColumnList
 */
const de_FolderColumnList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FolderMember
 */
const de_FolderMember = (output: any, context: __SerdeContext): FolderMember => {
  return {
    MemberId: __expectString(output.MemberId),
    MemberType: __expectString(output.MemberType),
  } as any;
};

/**
 * deserializeAws_restJson1FolderMemberList
 */
const de_FolderMemberList = (output: any, context: __SerdeContext): MemberIdArnPair[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_MemberIdArnPair(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FolderSummary
 */
const de_FolderSummary = (output: any, context: __SerdeContext): FolderSummary => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    FolderId: __expectString(output.FolderId),
    FolderType: __expectString(output.FolderType),
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    Name: __expectString(output.Name),
  } as any;
};

/**
 * deserializeAws_restJson1FolderSummaryList
 */
const de_FolderSummaryList = (output: any, context: __SerdeContext): FolderSummary[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_FolderSummary(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1Font
 */
const de_Font = (output: any, context: __SerdeContext): Font => {
  return {
    FontFamily: __expectString(output.FontFamily),
  } as any;
};

/**
 * deserializeAws_restJson1FontConfiguration
 */
const de_FontConfiguration = (output: any, context: __SerdeContext): FontConfiguration => {
  return {
    FontColor: __expectString(output.FontColor),
    FontDecoration: __expectString(output.FontDecoration),
    FontSize: output.FontSize != null ? de_FontSize(output.FontSize, context) : undefined,
    FontStyle: __expectString(output.FontStyle),
    FontWeight: output.FontWeight != null ? de_FontWeight(output.FontWeight, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FontList
 */
const de_FontList = (output: any, context: __SerdeContext): Font[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_Font(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FontSize
 */
const de_FontSize = (output: any, context: __SerdeContext): FontSize => {
  return {
    Relative: __expectString(output.Relative),
  } as any;
};

/**
 * deserializeAws_restJson1FontWeight
 */
const de_FontWeight = (output: any, context: __SerdeContext): FontWeight => {
  return {
    Name: __expectString(output.Name),
  } as any;
};

/**
 * deserializeAws_restJson1ForecastComputation
 */
const de_ForecastComputation = (output: any, context: __SerdeContext): ForecastComputation => {
  return {
    ComputationId: __expectString(output.ComputationId),
    CustomSeasonalityValue: __expectInt32(output.CustomSeasonalityValue),
    LowerBoundary: __limitedParseDouble(output.LowerBoundary),
    Name: __expectString(output.Name),
    PeriodsBackward: __expectInt32(output.PeriodsBackward),
    PeriodsForward: __expectInt32(output.PeriodsForward),
    PredictionInterval: __expectInt32(output.PredictionInterval),
    Seasonality: __expectString(output.Seasonality),
    Time: output.Time != null ? de_DimensionField(output.Time, context) : undefined,
    UpperBoundary: __limitedParseDouble(output.UpperBoundary),
    Value: output.Value != null ? de_MeasureField(output.Value, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ForecastConfiguration
 */
const de_ForecastConfiguration = (output: any, context: __SerdeContext): ForecastConfiguration => {
  return {
    ForecastProperties:
      output.ForecastProperties != null
        ? de_TimeBasedForecastProperties(output.ForecastProperties, context)
        : undefined,
    Scenario: output.Scenario != null ? de_ForecastScenario(output.Scenario, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ForecastConfigurationList
 */
const de_ForecastConfigurationList = (output: any, context: __SerdeContext): ForecastConfiguration[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ForecastConfiguration(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ForecastScenario
 */
const de_ForecastScenario = (output: any, context: __SerdeContext): ForecastScenario => {
  return {
    WhatIfPointScenario:
      output.WhatIfPointScenario != null ? de_WhatIfPointScenario(output.WhatIfPointScenario, context) : undefined,
    WhatIfRangeScenario:
      output.WhatIfRangeScenario != null ? de_WhatIfRangeScenario(output.WhatIfRangeScenario, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FormatConfiguration
 */
const de_FormatConfiguration = (output: any, context: __SerdeContext): FormatConfiguration => {
  return {
    DateTimeFormatConfiguration:
      output.DateTimeFormatConfiguration != null
        ? de_DateTimeFormatConfiguration(output.DateTimeFormatConfiguration, context)
        : undefined,
    NumberFormatConfiguration:
      output.NumberFormatConfiguration != null
        ? de_NumberFormatConfiguration(output.NumberFormatConfiguration, context)
        : undefined,
    StringFormatConfiguration:
      output.StringFormatConfiguration != null
        ? de_StringFormatConfiguration(output.StringFormatConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FreeFormLayoutCanvasSizeOptions
 */
const de_FreeFormLayoutCanvasSizeOptions = (output: any, context: __SerdeContext): FreeFormLayoutCanvasSizeOptions => {
  return {
    ScreenCanvasSizeOptions:
      output.ScreenCanvasSizeOptions != null
        ? de_FreeFormLayoutScreenCanvasSizeOptions(output.ScreenCanvasSizeOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FreeFormLayoutConfiguration
 */
const de_FreeFormLayoutConfiguration = (output: any, context: __SerdeContext): FreeFormLayoutConfiguration => {
  return {
    CanvasSizeOptions:
      output.CanvasSizeOptions != null
        ? de_FreeFormLayoutCanvasSizeOptions(output.CanvasSizeOptions, context)
        : undefined,
    Elements: output.Elements != null ? de_FreeFromLayoutElementList(output.Elements, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FreeFormLayoutElement
 */
const de_FreeFormLayoutElement = (output: any, context: __SerdeContext): FreeFormLayoutElement => {
  return {
    BackgroundStyle:
      output.BackgroundStyle != null
        ? de_FreeFormLayoutElementBackgroundStyle(output.BackgroundStyle, context)
        : undefined,
    BorderStyle:
      output.BorderStyle != null ? de_FreeFormLayoutElementBorderStyle(output.BorderStyle, context) : undefined,
    ElementId: __expectString(output.ElementId),
    ElementType: __expectString(output.ElementType),
    Height: __expectString(output.Height),
    LoadingAnimation:
      output.LoadingAnimation != null ? de_LoadingAnimation(output.LoadingAnimation, context) : undefined,
    RenderingRules:
      output.RenderingRules != null ? de_SheetElementRenderingRuleList(output.RenderingRules, context) : undefined,
    SelectedBorderStyle:
      output.SelectedBorderStyle != null
        ? de_FreeFormLayoutElementBorderStyle(output.SelectedBorderStyle, context)
        : undefined,
    Visibility: __expectString(output.Visibility),
    Width: __expectString(output.Width),
    XAxisLocation: __expectString(output.XAxisLocation),
    YAxisLocation: __expectString(output.YAxisLocation),
  } as any;
};

/**
 * deserializeAws_restJson1FreeFormLayoutElementBackgroundStyle
 */
const de_FreeFormLayoutElementBackgroundStyle = (
  output: any,
  context: __SerdeContext
): FreeFormLayoutElementBackgroundStyle => {
  return {
    Color: __expectString(output.Color),
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1FreeFormLayoutElementBorderStyle
 */
const de_FreeFormLayoutElementBorderStyle = (
  output: any,
  context: __SerdeContext
): FreeFormLayoutElementBorderStyle => {
  return {
    Color: __expectString(output.Color),
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1FreeFormLayoutScreenCanvasSizeOptions
 */
const de_FreeFormLayoutScreenCanvasSizeOptions = (
  output: any,
  context: __SerdeContext
): FreeFormLayoutScreenCanvasSizeOptions => {
  return {
    OptimizedViewPortWidth: __expectString(output.OptimizedViewPortWidth),
  } as any;
};

/**
 * deserializeAws_restJson1FreeFormSectionLayoutConfiguration
 */
const de_FreeFormSectionLayoutConfiguration = (
  output: any,
  context: __SerdeContext
): FreeFormSectionLayoutConfiguration => {
  return {
    Elements: output.Elements != null ? de_FreeFromLayoutElementList(output.Elements, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FreeFromLayoutElementList
 */
const de_FreeFromLayoutElementList = (output: any, context: __SerdeContext): FreeFormLayoutElement[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_FreeFormLayoutElement(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FunnelChartAggregatedFieldWells
 */
const de_FunnelChartAggregatedFieldWells = (output: any, context: __SerdeContext): FunnelChartAggregatedFieldWells => {
  return {
    Category: output.Category != null ? de_FunnelChartDimensionFieldList(output.Category, context) : undefined,
    Values: output.Values != null ? de_FunnelChartMeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FunnelChartConfiguration
 */
const de_FunnelChartConfiguration = (output: any, context: __SerdeContext): FunnelChartConfiguration => {
  return {
    CategoryLabelOptions:
      output.CategoryLabelOptions != null ? de_ChartAxisLabelOptions(output.CategoryLabelOptions, context) : undefined,
    DataLabelOptions:
      output.DataLabelOptions != null ? de_FunnelChartDataLabelOptions(output.DataLabelOptions, context) : undefined,
    FieldWells: output.FieldWells != null ? de_FunnelChartFieldWells(output.FieldWells, context) : undefined,
    SortConfiguration:
      output.SortConfiguration != null ? de_FunnelChartSortConfiguration(output.SortConfiguration, context) : undefined,
    Tooltip: output.Tooltip != null ? de_TooltipOptions(output.Tooltip, context) : undefined,
    ValueLabelOptions:
      output.ValueLabelOptions != null ? de_ChartAxisLabelOptions(output.ValueLabelOptions, context) : undefined,
    VisualPalette: output.VisualPalette != null ? de_VisualPalette(output.VisualPalette, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FunnelChartDataLabelOptions
 */
const de_FunnelChartDataLabelOptions = (output: any, context: __SerdeContext): FunnelChartDataLabelOptions => {
  return {
    CategoryLabelVisibility: __expectString(output.CategoryLabelVisibility),
    LabelColor: __expectString(output.LabelColor),
    LabelFontConfiguration:
      output.LabelFontConfiguration != null ? de_FontConfiguration(output.LabelFontConfiguration, context) : undefined,
    MeasureDataLabelStyle: __expectString(output.MeasureDataLabelStyle),
    MeasureLabelVisibility: __expectString(output.MeasureLabelVisibility),
    Position: __expectString(output.Position),
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1FunnelChartDimensionFieldList
 */
const de_FunnelChartDimensionFieldList = (output: any, context: __SerdeContext): DimensionField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DimensionField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FunnelChartFieldWells
 */
const de_FunnelChartFieldWells = (output: any, context: __SerdeContext): FunnelChartFieldWells => {
  return {
    FunnelChartAggregatedFieldWells:
      output.FunnelChartAggregatedFieldWells != null
        ? de_FunnelChartAggregatedFieldWells(output.FunnelChartAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FunnelChartMeasureFieldList
 */
const de_FunnelChartMeasureFieldList = (output: any, context: __SerdeContext): MeasureField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_MeasureField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1FunnelChartSortConfiguration
 */
const de_FunnelChartSortConfiguration = (output: any, context: __SerdeContext): FunnelChartSortConfiguration => {
  return {
    CategoryItemsLimit:
      output.CategoryItemsLimit != null ? de_ItemsLimitConfiguration(output.CategoryItemsLimit, context) : undefined,
    CategorySort: output.CategorySort != null ? de_FieldSortOptionsList(output.CategorySort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1FunnelChartVisual
 */
const de_FunnelChartVisual = (output: any, context: __SerdeContext): FunnelChartVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_FunnelChartConfiguration(output.ChartConfiguration, context) : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1GaugeChartArcConditionalFormatting
 */
const de_GaugeChartArcConditionalFormatting = (
  output: any,
  context: __SerdeContext
): GaugeChartArcConditionalFormatting => {
  return {
    ForegroundColor:
      output.ForegroundColor != null ? de_ConditionalFormattingColor(output.ForegroundColor, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GaugeChartConditionalFormatting
 */
const de_GaugeChartConditionalFormatting = (output: any, context: __SerdeContext): GaugeChartConditionalFormatting => {
  return {
    ConditionalFormattingOptions:
      output.ConditionalFormattingOptions != null
        ? de_GaugeChartConditionalFormattingOptionList(output.ConditionalFormattingOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GaugeChartConditionalFormattingOption
 */
const de_GaugeChartConditionalFormattingOption = (
  output: any,
  context: __SerdeContext
): GaugeChartConditionalFormattingOption => {
  return {
    Arc: output.Arc != null ? de_GaugeChartArcConditionalFormatting(output.Arc, context) : undefined,
    PrimaryValue:
      output.PrimaryValue != null
        ? de_GaugeChartPrimaryValueConditionalFormatting(output.PrimaryValue, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GaugeChartConditionalFormattingOptionList
 */
const de_GaugeChartConditionalFormattingOptionList = (
  output: any,
  context: __SerdeContext
): GaugeChartConditionalFormattingOption[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_GaugeChartConditionalFormattingOption(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1GaugeChartConfiguration
 */
const de_GaugeChartConfiguration = (output: any, context: __SerdeContext): GaugeChartConfiguration => {
  return {
    DataLabels: output.DataLabels != null ? de_DataLabelOptions(output.DataLabels, context) : undefined,
    FieldWells: output.FieldWells != null ? de_GaugeChartFieldWells(output.FieldWells, context) : undefined,
    GaugeChartOptions:
      output.GaugeChartOptions != null ? de_GaugeChartOptions(output.GaugeChartOptions, context) : undefined,
    TooltipOptions: output.TooltipOptions != null ? de_TooltipOptions(output.TooltipOptions, context) : undefined,
    VisualPalette: output.VisualPalette != null ? de_VisualPalette(output.VisualPalette, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GaugeChartFieldWells
 */
const de_GaugeChartFieldWells = (output: any, context: __SerdeContext): GaugeChartFieldWells => {
  return {
    TargetValues: output.TargetValues != null ? de_MeasureFieldList(output.TargetValues, context) : undefined,
    Values: output.Values != null ? de_MeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GaugeChartOptions
 */
const de_GaugeChartOptions = (output: any, context: __SerdeContext): GaugeChartOptions => {
  return {
    Arc: output.Arc != null ? de_ArcConfiguration(output.Arc, context) : undefined,
    ArcAxis: output.ArcAxis != null ? de_ArcAxisConfiguration(output.ArcAxis, context) : undefined,
    Comparison: output.Comparison != null ? de_ComparisonConfiguration(output.Comparison, context) : undefined,
    PrimaryValueDisplayType: __expectString(output.PrimaryValueDisplayType),
    PrimaryValueFontConfiguration:
      output.PrimaryValueFontConfiguration != null
        ? de_FontConfiguration(output.PrimaryValueFontConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GaugeChartPrimaryValueConditionalFormatting
 */
const de_GaugeChartPrimaryValueConditionalFormatting = (
  output: any,
  context: __SerdeContext
): GaugeChartPrimaryValueConditionalFormatting => {
  return {
    Icon: output.Icon != null ? de_ConditionalFormattingIcon(output.Icon, context) : undefined,
    TextColor: output.TextColor != null ? de_ConditionalFormattingColor(output.TextColor, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GaugeChartVisual
 */
const de_GaugeChartVisual = (output: any, context: __SerdeContext): GaugeChartVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_GaugeChartConfiguration(output.ChartConfiguration, context) : undefined,
    ConditionalFormatting:
      output.ConditionalFormatting != null
        ? de_GaugeChartConditionalFormatting(output.ConditionalFormatting, context)
        : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1GeoSpatialColumnGroup
 */
const de_GeoSpatialColumnGroup = (output: any, context: __SerdeContext): GeoSpatialColumnGroup => {
  return {
    Columns: output.Columns != null ? de_ColumnList(output.Columns, context) : undefined,
    CountryCode: __expectString(output.CountryCode),
    Name: __expectString(output.Name),
  } as any;
};

/**
 * deserializeAws_restJson1GeospatialCoordinateBounds
 */
const de_GeospatialCoordinateBounds = (output: any, context: __SerdeContext): GeospatialCoordinateBounds => {
  return {
    East: __limitedParseDouble(output.East),
    North: __limitedParseDouble(output.North),
    South: __limitedParseDouble(output.South),
    West: __limitedParseDouble(output.West),
  } as any;
};

/**
 * deserializeAws_restJson1GeospatialMapAggregatedFieldWells
 */
const de_GeospatialMapAggregatedFieldWells = (
  output: any,
  context: __SerdeContext
): GeospatialMapAggregatedFieldWells => {
  return {
    Colors: output.Colors != null ? de_DimensionFieldList(output.Colors, context) : undefined,
    Geospatial: output.Geospatial != null ? de_DimensionFieldList(output.Geospatial, context) : undefined,
    Values: output.Values != null ? de_MeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GeospatialMapConfiguration
 */
const de_GeospatialMapConfiguration = (output: any, context: __SerdeContext): GeospatialMapConfiguration => {
  return {
    FieldWells: output.FieldWells != null ? de_GeospatialMapFieldWells(output.FieldWells, context) : undefined,
    Legend: output.Legend != null ? de_LegendOptions(output.Legend, context) : undefined,
    MapStyleOptions:
      output.MapStyleOptions != null ? de_GeospatialMapStyleOptions(output.MapStyleOptions, context) : undefined,
    PointStyleOptions:
      output.PointStyleOptions != null ? de_GeospatialPointStyleOptions(output.PointStyleOptions, context) : undefined,
    Tooltip: output.Tooltip != null ? de_TooltipOptions(output.Tooltip, context) : undefined,
    VisualPalette: output.VisualPalette != null ? de_VisualPalette(output.VisualPalette, context) : undefined,
    WindowOptions: output.WindowOptions != null ? de_GeospatialWindowOptions(output.WindowOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GeospatialMapFieldWells
 */
const de_GeospatialMapFieldWells = (output: any, context: __SerdeContext): GeospatialMapFieldWells => {
  return {
    GeospatialMapAggregatedFieldWells:
      output.GeospatialMapAggregatedFieldWells != null
        ? de_GeospatialMapAggregatedFieldWells(output.GeospatialMapAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GeospatialMapStyleOptions
 */
const de_GeospatialMapStyleOptions = (output: any, context: __SerdeContext): GeospatialMapStyleOptions => {
  return {
    BaseMapStyle: __expectString(output.BaseMapStyle),
  } as any;
};

/**
 * deserializeAws_restJson1GeospatialMapVisual
 */
const de_GeospatialMapVisual = (output: any, context: __SerdeContext): GeospatialMapVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_GeospatialMapConfiguration(output.ChartConfiguration, context) : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1GeospatialPointStyleOptions
 */
const de_GeospatialPointStyleOptions = (output: any, context: __SerdeContext): GeospatialPointStyleOptions => {
  return {
    ClusterMarkerConfiguration:
      output.ClusterMarkerConfiguration != null
        ? de_ClusterMarkerConfiguration(output.ClusterMarkerConfiguration, context)
        : undefined,
    SelectedPointStyle: __expectString(output.SelectedPointStyle),
  } as any;
};

/**
 * deserializeAws_restJson1GeospatialWindowOptions
 */
const de_GeospatialWindowOptions = (output: any, context: __SerdeContext): GeospatialWindowOptions => {
  return {
    Bounds: output.Bounds != null ? de_GeospatialCoordinateBounds(output.Bounds, context) : undefined,
    MapZoomMode: __expectString(output.MapZoomMode),
  } as any;
};

/**
 * deserializeAws_restJson1GlobalTableBorderOptions
 */
const de_GlobalTableBorderOptions = (output: any, context: __SerdeContext): GlobalTableBorderOptions => {
  return {
    SideSpecificBorder:
      output.SideSpecificBorder != null ? de_TableSideBorderOptions(output.SideSpecificBorder, context) : undefined,
    UniformBorder: output.UniformBorder != null ? de_TableBorderOptions(output.UniformBorder, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GradientColor
 */
const de_GradientColor = (output: any, context: __SerdeContext): GradientColor => {
  return {
    Stops: output.Stops != null ? de_GradientStopList(output.Stops, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GradientStop
 */
const de_GradientStop = (output: any, context: __SerdeContext): GradientStop => {
  return {
    Color: __expectString(output.Color),
    DataValue: __limitedParseDouble(output.DataValue),
    GradientOffset: __limitedParseDouble(output.GradientOffset),
  } as any;
};

/**
 * deserializeAws_restJson1GradientStopList
 */
const de_GradientStopList = (output: any, context: __SerdeContext): GradientStop[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_GradientStop(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1GridLayoutCanvasSizeOptions
 */
const de_GridLayoutCanvasSizeOptions = (output: any, context: __SerdeContext): GridLayoutCanvasSizeOptions => {
  return {
    ScreenCanvasSizeOptions:
      output.ScreenCanvasSizeOptions != null
        ? de_GridLayoutScreenCanvasSizeOptions(output.ScreenCanvasSizeOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GridLayoutConfiguration
 */
const de_GridLayoutConfiguration = (output: any, context: __SerdeContext): GridLayoutConfiguration => {
  return {
    CanvasSizeOptions:
      output.CanvasSizeOptions != null ? de_GridLayoutCanvasSizeOptions(output.CanvasSizeOptions, context) : undefined,
    Elements: output.Elements != null ? de_GridLayoutElementList(output.Elements, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GridLayoutElement
 */
const de_GridLayoutElement = (output: any, context: __SerdeContext): GridLayoutElement => {
  return {
    ColumnIndex: __expectInt32(output.ColumnIndex),
    ColumnSpan: __expectInt32(output.ColumnSpan),
    ElementId: __expectString(output.ElementId),
    ElementType: __expectString(output.ElementType),
    RowIndex: __expectInt32(output.RowIndex),
    RowSpan: __expectInt32(output.RowSpan),
  } as any;
};

/**
 * deserializeAws_restJson1GridLayoutElementList
 */
const de_GridLayoutElementList = (output: any, context: __SerdeContext): GridLayoutElement[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_GridLayoutElement(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1GridLayoutScreenCanvasSizeOptions
 */
const de_GridLayoutScreenCanvasSizeOptions = (
  output: any,
  context: __SerdeContext
): GridLayoutScreenCanvasSizeOptions => {
  return {
    OptimizedViewPortWidth: __expectString(output.OptimizedViewPortWidth),
    ResizeOption: __expectString(output.ResizeOption),
  } as any;
};

/**
 * deserializeAws_restJson1Group
 */
const de_Group = (output: any, context: __SerdeContext): Group => {
  return {
    Arn: __expectString(output.Arn),
    Description: __expectString(output.Description),
    GroupName: __expectString(output.GroupName),
    PrincipalId: __expectString(output.PrincipalId),
  } as any;
};

/**
 * deserializeAws_restJson1GroupList
 */
const de_GroupList = (output: any, context: __SerdeContext): Group[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_Group(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1GroupMember
 */
const de_GroupMember = (output: any, context: __SerdeContext): GroupMember => {
  return {
    Arn: __expectString(output.Arn),
    MemberName: __expectString(output.MemberName),
  } as any;
};

/**
 * deserializeAws_restJson1GroupMemberList
 */
const de_GroupMemberList = (output: any, context: __SerdeContext): GroupMember[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_GroupMember(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1GrowthRateComputation
 */
const de_GrowthRateComputation = (output: any, context: __SerdeContext): GrowthRateComputation => {
  return {
    ComputationId: __expectString(output.ComputationId),
    Name: __expectString(output.Name),
    PeriodSize: __expectInt32(output.PeriodSize),
    Time: output.Time != null ? de_DimensionField(output.Time, context) : undefined,
    Value: output.Value != null ? de_MeasureField(output.Value, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1GutterStyle
 */
const de_GutterStyle = (output: any, context: __SerdeContext): GutterStyle => {
  return {
    Show: __expectBoolean(output.Show),
  } as any;
};

/**
 * deserializeAws_restJson1HeaderFooterSectionConfiguration
 */
const de_HeaderFooterSectionConfiguration = (
  output: any,
  context: __SerdeContext
): HeaderFooterSectionConfiguration => {
  return {
    Layout: output.Layout != null ? de_SectionLayoutConfiguration(output.Layout, context) : undefined,
    SectionId: __expectString(output.SectionId),
    Style: output.Style != null ? de_SectionStyle(output.Style, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1HeaderFooterSectionConfigurationList
 */
const de_HeaderFooterSectionConfigurationList = (
  output: any,
  context: __SerdeContext
): HeaderFooterSectionConfiguration[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_HeaderFooterSectionConfiguration(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1HeatMapAggregatedFieldWells
 */
const de_HeatMapAggregatedFieldWells = (output: any, context: __SerdeContext): HeatMapAggregatedFieldWells => {
  return {
    Columns: output.Columns != null ? de_HeatMapDimensionFieldList(output.Columns, context) : undefined,
    Rows: output.Rows != null ? de_HeatMapDimensionFieldList(output.Rows, context) : undefined,
    Values: output.Values != null ? de_HeatMapMeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1HeatMapConfiguration
 */
const de_HeatMapConfiguration = (output: any, context: __SerdeContext): HeatMapConfiguration => {
  return {
    ColorScale: output.ColorScale != null ? de_ColorScale(output.ColorScale, context) : undefined,
    ColumnLabelOptions:
      output.ColumnLabelOptions != null ? de_ChartAxisLabelOptions(output.ColumnLabelOptions, context) : undefined,
    DataLabels: output.DataLabels != null ? de_DataLabelOptions(output.DataLabels, context) : undefined,
    FieldWells: output.FieldWells != null ? de_HeatMapFieldWells(output.FieldWells, context) : undefined,
    Legend: output.Legend != null ? de_LegendOptions(output.Legend, context) : undefined,
    RowLabelOptions:
      output.RowLabelOptions != null ? de_ChartAxisLabelOptions(output.RowLabelOptions, context) : undefined,
    SortConfiguration:
      output.SortConfiguration != null ? de_HeatMapSortConfiguration(output.SortConfiguration, context) : undefined,
    Tooltip: output.Tooltip != null ? de_TooltipOptions(output.Tooltip, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1HeatMapDimensionFieldList
 */
const de_HeatMapDimensionFieldList = (output: any, context: __SerdeContext): DimensionField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DimensionField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1HeatMapFieldWells
 */
const de_HeatMapFieldWells = (output: any, context: __SerdeContext): HeatMapFieldWells => {
  return {
    HeatMapAggregatedFieldWells:
      output.HeatMapAggregatedFieldWells != null
        ? de_HeatMapAggregatedFieldWells(output.HeatMapAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1HeatMapMeasureFieldList
 */
const de_HeatMapMeasureFieldList = (output: any, context: __SerdeContext): MeasureField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_MeasureField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1HeatMapSortConfiguration
 */
const de_HeatMapSortConfiguration = (output: any, context: __SerdeContext): HeatMapSortConfiguration => {
  return {
    HeatMapColumnItemsLimitConfiguration:
      output.HeatMapColumnItemsLimitConfiguration != null
        ? de_ItemsLimitConfiguration(output.HeatMapColumnItemsLimitConfiguration, context)
        : undefined,
    HeatMapColumnSort:
      output.HeatMapColumnSort != null ? de_FieldSortOptionsList(output.HeatMapColumnSort, context) : undefined,
    HeatMapRowItemsLimitConfiguration:
      output.HeatMapRowItemsLimitConfiguration != null
        ? de_ItemsLimitConfiguration(output.HeatMapRowItemsLimitConfiguration, context)
        : undefined,
    HeatMapRowSort: output.HeatMapRowSort != null ? de_FieldSortOptionsList(output.HeatMapRowSort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1HeatMapVisual
 */
const de_HeatMapVisual = (output: any, context: __SerdeContext): HeatMapVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_HeatMapConfiguration(output.ChartConfiguration, context) : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1HistogramAggregatedFieldWells
 */
const de_HistogramAggregatedFieldWells = (output: any, context: __SerdeContext): HistogramAggregatedFieldWells => {
  return {
    Values: output.Values != null ? de_HistogramMeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1HistogramBinOptions
 */
const de_HistogramBinOptions = (output: any, context: __SerdeContext): HistogramBinOptions => {
  return {
    BinCount: output.BinCount != null ? de_BinCountOptions(output.BinCount, context) : undefined,
    BinWidth: output.BinWidth != null ? de_BinWidthOptions(output.BinWidth, context) : undefined,
    SelectedBinType: __expectString(output.SelectedBinType),
    StartValue: __limitedParseDouble(output.StartValue),
  } as any;
};

/**
 * deserializeAws_restJson1HistogramConfiguration
 */
const de_HistogramConfiguration = (output: any, context: __SerdeContext): HistogramConfiguration => {
  return {
    BinOptions: output.BinOptions != null ? de_HistogramBinOptions(output.BinOptions, context) : undefined,
    DataLabels: output.DataLabels != null ? de_DataLabelOptions(output.DataLabels, context) : undefined,
    FieldWells: output.FieldWells != null ? de_HistogramFieldWells(output.FieldWells, context) : undefined,
    Tooltip: output.Tooltip != null ? de_TooltipOptions(output.Tooltip, context) : undefined,
    VisualPalette: output.VisualPalette != null ? de_VisualPalette(output.VisualPalette, context) : undefined,
    XAxisDisplayOptions:
      output.XAxisDisplayOptions != null ? de_AxisDisplayOptions(output.XAxisDisplayOptions, context) : undefined,
    XAxisLabelOptions:
      output.XAxisLabelOptions != null ? de_ChartAxisLabelOptions(output.XAxisLabelOptions, context) : undefined,
    YAxisDisplayOptions:
      output.YAxisDisplayOptions != null ? de_AxisDisplayOptions(output.YAxisDisplayOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1HistogramFieldWells
 */
const de_HistogramFieldWells = (output: any, context: __SerdeContext): HistogramFieldWells => {
  return {
    HistogramAggregatedFieldWells:
      output.HistogramAggregatedFieldWells != null
        ? de_HistogramAggregatedFieldWells(output.HistogramAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1HistogramMeasureFieldList
 */
const de_HistogramMeasureFieldList = (output: any, context: __SerdeContext): MeasureField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_MeasureField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1HistogramVisual
 */
const de_HistogramVisual = (output: any, context: __SerdeContext): HistogramVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_HistogramConfiguration(output.ChartConfiguration, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1IAMPolicyAssignment
 */
const de_IAMPolicyAssignment = (output: any, context: __SerdeContext): IAMPolicyAssignment => {
  return {
    AssignmentId: __expectString(output.AssignmentId),
    AssignmentName: __expectString(output.AssignmentName),
    AssignmentStatus: __expectString(output.AssignmentStatus),
    AwsAccountId: __expectString(output.AwsAccountId),
    Identities: output.Identities != null ? de_IdentityMap(output.Identities, context) : undefined,
    PolicyArn: __expectString(output.PolicyArn),
  } as any;
};

/**
 * deserializeAws_restJson1IAMPolicyAssignmentSummary
 */
const de_IAMPolicyAssignmentSummary = (output: any, context: __SerdeContext): IAMPolicyAssignmentSummary => {
  return {
    AssignmentName: __expectString(output.AssignmentName),
    AssignmentStatus: __expectString(output.AssignmentStatus),
  } as any;
};

/**
 * deserializeAws_restJson1IAMPolicyAssignmentSummaryList
 */
const de_IAMPolicyAssignmentSummaryList = (output: any, context: __SerdeContext): IAMPolicyAssignmentSummary[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_IAMPolicyAssignmentSummary(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1IdentityMap
 */
const de_IdentityMap = (output: any, context: __SerdeContext): Record<string, string[]> => {
  return Object.entries(output).reduce((acc: Record<string, string[]>, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_IdentityNameList(value, context);
    return acc;
  }, {});
};

/**
 * deserializeAws_restJson1IdentityNameList
 */
const de_IdentityNameList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1Ingestion
 */
const de_Ingestion = (output: any, context: __SerdeContext): Ingestion => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    ErrorInfo: output.ErrorInfo != null ? de_ErrorInfo(output.ErrorInfo, context) : undefined,
    IngestionId: __expectString(output.IngestionId),
    IngestionSizeInBytes: __expectLong(output.IngestionSizeInBytes),
    IngestionStatus: __expectString(output.IngestionStatus),
    IngestionTimeInSeconds: __expectLong(output.IngestionTimeInSeconds),
    QueueInfo: output.QueueInfo != null ? de_QueueInfo(output.QueueInfo, context) : undefined,
    RequestSource: __expectString(output.RequestSource),
    RequestType: __expectString(output.RequestType),
    RowInfo: output.RowInfo != null ? de_RowInfo(output.RowInfo, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1Ingestions
 */
const de_Ingestions = (output: any, context: __SerdeContext): Ingestion[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_Ingestion(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1InputColumn
 */
const de_InputColumn = (output: any, context: __SerdeContext): InputColumn => {
  return {
    Name: __expectString(output.Name),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1InputColumnList
 */
const de_InputColumnList = (output: any, context: __SerdeContext): InputColumn[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_InputColumn(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1InsightConfiguration
 */
const de_InsightConfiguration = (output: any, context: __SerdeContext): InsightConfiguration => {
  return {
    Computations: output.Computations != null ? de_ComputationList(output.Computations, context) : undefined,
    CustomNarrative:
      output.CustomNarrative != null ? de_CustomNarrativeOptions(output.CustomNarrative, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1InsightVisual
 */
const de_InsightVisual = (output: any, context: __SerdeContext): InsightVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    DataSetIdentifier: __expectString(output.DataSetIdentifier),
    InsightConfiguration:
      output.InsightConfiguration != null ? de_InsightConfiguration(output.InsightConfiguration, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1IntegerDefaultValueList
 */
const de_IntegerDefaultValueList = (output: any, context: __SerdeContext): number[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectLong(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1IntegerDefaultValues
 */
const de_IntegerDefaultValues = (output: any, context: __SerdeContext): IntegerDefaultValues => {
  return {
    DynamicValue: output.DynamicValue != null ? de_DynamicDefaultValue(output.DynamicValue, context) : undefined,
    StaticValues: output.StaticValues != null ? de_IntegerDefaultValueList(output.StaticValues, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1IntegerParameterDeclaration
 */
const de_IntegerParameterDeclaration = (output: any, context: __SerdeContext): IntegerParameterDeclaration => {
  return {
    DefaultValues: output.DefaultValues != null ? de_IntegerDefaultValues(output.DefaultValues, context) : undefined,
    Name: __expectString(output.Name),
    ParameterValueType: __expectString(output.ParameterValueType),
    ValueWhenUnset:
      output.ValueWhenUnset != null ? de_IntegerValueWhenUnsetConfiguration(output.ValueWhenUnset, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1IntegerValueWhenUnsetConfiguration
 */
const de_IntegerValueWhenUnsetConfiguration = (
  output: any,
  context: __SerdeContext
): IntegerValueWhenUnsetConfiguration => {
  return {
    CustomValue: __expectLong(output.CustomValue),
    ValueWhenUnsetOption: __expectString(output.ValueWhenUnsetOption),
  } as any;
};

/**
 * deserializeAws_restJson1IpRestrictionRuleMap
 */
const de_IpRestrictionRuleMap = (output: any, context: __SerdeContext): Record<string, string> => {
  return Object.entries(output).reduce((acc: Record<string, string>, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = __expectString(value) as any;
    return acc;
  }, {});
};

/**
 * deserializeAws_restJson1ItemsLimitConfiguration
 */
const de_ItemsLimitConfiguration = (output: any, context: __SerdeContext): ItemsLimitConfiguration => {
  return {
    ItemsLimit: __expectLong(output.ItemsLimit),
    OtherCategories: __expectString(output.OtherCategories),
  } as any;
};

/**
 * deserializeAws_restJson1JiraParameters
 */
const de_JiraParameters = (output: any, context: __SerdeContext): JiraParameters => {
  return {
    SiteBaseUrl: __expectString(output.SiteBaseUrl),
  } as any;
};

/**
 * deserializeAws_restJson1JoinInstruction
 */
const de_JoinInstruction = (output: any, context: __SerdeContext): JoinInstruction => {
  return {
    LeftJoinKeyProperties:
      output.LeftJoinKeyProperties != null ? de_JoinKeyProperties(output.LeftJoinKeyProperties, context) : undefined,
    LeftOperand: __expectString(output.LeftOperand),
    OnClause: __expectString(output.OnClause),
    RightJoinKeyProperties:
      output.RightJoinKeyProperties != null ? de_JoinKeyProperties(output.RightJoinKeyProperties, context) : undefined,
    RightOperand: __expectString(output.RightOperand),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1JoinKeyProperties
 */
const de_JoinKeyProperties = (output: any, context: __SerdeContext): JoinKeyProperties => {
  return {
    UniqueKey: __expectBoolean(output.UniqueKey),
  } as any;
};

/**
 * deserializeAws_restJson1KPIConditionalFormatting
 */
const de_KPIConditionalFormatting = (output: any, context: __SerdeContext): KPIConditionalFormatting => {
  return {
    ConditionalFormattingOptions:
      output.ConditionalFormattingOptions != null
        ? de_KPIConditionalFormattingOptionList(output.ConditionalFormattingOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1KPIConditionalFormattingOption
 */
const de_KPIConditionalFormattingOption = (output: any, context: __SerdeContext): KPIConditionalFormattingOption => {
  return {
    PrimaryValue:
      output.PrimaryValue != null ? de_KPIPrimaryValueConditionalFormatting(output.PrimaryValue, context) : undefined,
    ProgressBar:
      output.ProgressBar != null ? de_KPIProgressBarConditionalFormatting(output.ProgressBar, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1KPIConditionalFormattingOptionList
 */
const de_KPIConditionalFormattingOptionList = (
  output: any,
  context: __SerdeContext
): KPIConditionalFormattingOption[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_KPIConditionalFormattingOption(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1KPIConfiguration
 */
const de_KPIConfiguration = (output: any, context: __SerdeContext): KPIConfiguration => {
  return {
    FieldWells: output.FieldWells != null ? de_KPIFieldWells(output.FieldWells, context) : undefined,
    KPIOptions: output.KPIOptions != null ? de_KPIOptions(output.KPIOptions, context) : undefined,
    SortConfiguration:
      output.SortConfiguration != null ? de_KPISortConfiguration(output.SortConfiguration, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1KPIFieldWells
 */
const de_KPIFieldWells = (output: any, context: __SerdeContext): KPIFieldWells => {
  return {
    TargetValues: output.TargetValues != null ? de_MeasureFieldList(output.TargetValues, context) : undefined,
    TrendGroups: output.TrendGroups != null ? de_DimensionFieldList(output.TrendGroups, context) : undefined,
    Values: output.Values != null ? de_MeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1KPIOptions
 */
const de_KPIOptions = (output: any, context: __SerdeContext): KPIOptions => {
  return {
    Comparison: output.Comparison != null ? de_ComparisonConfiguration(output.Comparison, context) : undefined,
    PrimaryValueDisplayType: __expectString(output.PrimaryValueDisplayType),
    PrimaryValueFontConfiguration:
      output.PrimaryValueFontConfiguration != null
        ? de_FontConfiguration(output.PrimaryValueFontConfiguration, context)
        : undefined,
    ProgressBar: output.ProgressBar != null ? de_ProgressBarOptions(output.ProgressBar, context) : undefined,
    SecondaryValue:
      output.SecondaryValue != null ? de_SecondaryValueOptions(output.SecondaryValue, context) : undefined,
    SecondaryValueFontConfiguration:
      output.SecondaryValueFontConfiguration != null
        ? de_FontConfiguration(output.SecondaryValueFontConfiguration, context)
        : undefined,
    TrendArrows: output.TrendArrows != null ? de_TrendArrowOptions(output.TrendArrows, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1KPIPrimaryValueConditionalFormatting
 */
const de_KPIPrimaryValueConditionalFormatting = (
  output: any,
  context: __SerdeContext
): KPIPrimaryValueConditionalFormatting => {
  return {
    Icon: output.Icon != null ? de_ConditionalFormattingIcon(output.Icon, context) : undefined,
    TextColor: output.TextColor != null ? de_ConditionalFormattingColor(output.TextColor, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1KPIProgressBarConditionalFormatting
 */
const de_KPIProgressBarConditionalFormatting = (
  output: any,
  context: __SerdeContext
): KPIProgressBarConditionalFormatting => {
  return {
    ForegroundColor:
      output.ForegroundColor != null ? de_ConditionalFormattingColor(output.ForegroundColor, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1KPISortConfiguration
 */
const de_KPISortConfiguration = (output: any, context: __SerdeContext): KPISortConfiguration => {
  return {
    TrendGroupSort: output.TrendGroupSort != null ? de_FieldSortOptionsList(output.TrendGroupSort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1KPIVisual
 */
const de_KPIVisual = (output: any, context: __SerdeContext): KPIVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_KPIConfiguration(output.ChartConfiguration, context) : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    ConditionalFormatting:
      output.ConditionalFormatting != null
        ? de_KPIConditionalFormatting(output.ConditionalFormatting, context)
        : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1LabelOptions
 */
const de_LabelOptions = (output: any, context: __SerdeContext): LabelOptions => {
  return {
    CustomLabel: __expectString(output.CustomLabel),
    FontConfiguration:
      output.FontConfiguration != null ? de_FontConfiguration(output.FontConfiguration, context) : undefined,
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1Layout
 */
const de_Layout = (output: any, context: __SerdeContext): Layout => {
  return {
    Configuration: output.Configuration != null ? de_LayoutConfiguration(output.Configuration, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1LayoutConfiguration
 */
const de_LayoutConfiguration = (output: any, context: __SerdeContext): LayoutConfiguration => {
  return {
    FreeFormLayout:
      output.FreeFormLayout != null ? de_FreeFormLayoutConfiguration(output.FreeFormLayout, context) : undefined,
    GridLayout: output.GridLayout != null ? de_GridLayoutConfiguration(output.GridLayout, context) : undefined,
    SectionBasedLayout:
      output.SectionBasedLayout != null
        ? de_SectionBasedLayoutConfiguration(output.SectionBasedLayout, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1LayoutList
 */
const de_LayoutList = (output: any, context: __SerdeContext): Layout[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_Layout(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1LegendOptions
 */
const de_LegendOptions = (output: any, context: __SerdeContext): LegendOptions => {
  return {
    Height: __expectString(output.Height),
    Position: __expectString(output.Position),
    Title: output.Title != null ? de_LabelOptions(output.Title, context) : undefined,
    Visibility: __expectString(output.Visibility),
    Width: __expectString(output.Width),
  } as any;
};

/**
 * deserializeAws_restJson1LineChartAggregatedFieldWells
 */
const de_LineChartAggregatedFieldWells = (output: any, context: __SerdeContext): LineChartAggregatedFieldWells => {
  return {
    Category: output.Category != null ? de_DimensionFieldList(output.Category, context) : undefined,
    Colors: output.Colors != null ? de_DimensionFieldList(output.Colors, context) : undefined,
    SmallMultiples:
      output.SmallMultiples != null ? de_SmallMultiplesDimensionFieldList(output.SmallMultiples, context) : undefined,
    Values: output.Values != null ? de_MeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1LineChartConfiguration
 */
const de_LineChartConfiguration = (output: any, context: __SerdeContext): LineChartConfiguration => {
  return {
    ContributionAnalysisDefaults:
      output.ContributionAnalysisDefaults != null
        ? de_ContributionAnalysisDefaultList(output.ContributionAnalysisDefaults, context)
        : undefined,
    DataLabels: output.DataLabels != null ? de_DataLabelOptions(output.DataLabels, context) : undefined,
    DefaultSeriesSettings:
      output.DefaultSeriesSettings != null
        ? de_LineChartDefaultSeriesSettings(output.DefaultSeriesSettings, context)
        : undefined,
    FieldWells: output.FieldWells != null ? de_LineChartFieldWells(output.FieldWells, context) : undefined,
    ForecastConfigurations:
      output.ForecastConfigurations != null
        ? de_ForecastConfigurationList(output.ForecastConfigurations, context)
        : undefined,
    Legend: output.Legend != null ? de_LegendOptions(output.Legend, context) : undefined,
    PrimaryYAxisDisplayOptions:
      output.PrimaryYAxisDisplayOptions != null
        ? de_LineSeriesAxisDisplayOptions(output.PrimaryYAxisDisplayOptions, context)
        : undefined,
    PrimaryYAxisLabelOptions:
      output.PrimaryYAxisLabelOptions != null
        ? de_ChartAxisLabelOptions(output.PrimaryYAxisLabelOptions, context)
        : undefined,
    ReferenceLines: output.ReferenceLines != null ? de_ReferenceLineList(output.ReferenceLines, context) : undefined,
    SecondaryYAxisDisplayOptions:
      output.SecondaryYAxisDisplayOptions != null
        ? de_LineSeriesAxisDisplayOptions(output.SecondaryYAxisDisplayOptions, context)
        : undefined,
    SecondaryYAxisLabelOptions:
      output.SecondaryYAxisLabelOptions != null
        ? de_ChartAxisLabelOptions(output.SecondaryYAxisLabelOptions, context)
        : undefined,
    Series: output.Series != null ? de_SeriesItemList(output.Series, context) : undefined,
    SmallMultiplesOptions:
      output.SmallMultiplesOptions != null
        ? de_SmallMultiplesOptions(output.SmallMultiplesOptions, context)
        : undefined,
    SortConfiguration:
      output.SortConfiguration != null ? de_LineChartSortConfiguration(output.SortConfiguration, context) : undefined,
    Tooltip: output.Tooltip != null ? de_TooltipOptions(output.Tooltip, context) : undefined,
    Type: __expectString(output.Type),
    VisualPalette: output.VisualPalette != null ? de_VisualPalette(output.VisualPalette, context) : undefined,
    XAxisDisplayOptions:
      output.XAxisDisplayOptions != null ? de_AxisDisplayOptions(output.XAxisDisplayOptions, context) : undefined,
    XAxisLabelOptions:
      output.XAxisLabelOptions != null ? de_ChartAxisLabelOptions(output.XAxisLabelOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1LineChartDefaultSeriesSettings
 */
const de_LineChartDefaultSeriesSettings = (output: any, context: __SerdeContext): LineChartDefaultSeriesSettings => {
  return {
    AxisBinding: __expectString(output.AxisBinding),
    LineStyleSettings:
      output.LineStyleSettings != null ? de_LineChartLineStyleSettings(output.LineStyleSettings, context) : undefined,
    MarkerStyleSettings:
      output.MarkerStyleSettings != null
        ? de_LineChartMarkerStyleSettings(output.MarkerStyleSettings, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1LineChartFieldWells
 */
const de_LineChartFieldWells = (output: any, context: __SerdeContext): LineChartFieldWells => {
  return {
    LineChartAggregatedFieldWells:
      output.LineChartAggregatedFieldWells != null
        ? de_LineChartAggregatedFieldWells(output.LineChartAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1LineChartLineStyleSettings
 */
const de_LineChartLineStyleSettings = (output: any, context: __SerdeContext): LineChartLineStyleSettings => {
  return {
    LineInterpolation: __expectString(output.LineInterpolation),
    LineStyle: __expectString(output.LineStyle),
    LineVisibility: __expectString(output.LineVisibility),
    LineWidth: __expectString(output.LineWidth),
  } as any;
};

/**
 * deserializeAws_restJson1LineChartMarkerStyleSettings
 */
const de_LineChartMarkerStyleSettings = (output: any, context: __SerdeContext): LineChartMarkerStyleSettings => {
  return {
    MarkerColor: __expectString(output.MarkerColor),
    MarkerShape: __expectString(output.MarkerShape),
    MarkerSize: __expectString(output.MarkerSize),
    MarkerVisibility: __expectString(output.MarkerVisibility),
  } as any;
};

/**
 * deserializeAws_restJson1LineChartSeriesSettings
 */
const de_LineChartSeriesSettings = (output: any, context: __SerdeContext): LineChartSeriesSettings => {
  return {
    LineStyleSettings:
      output.LineStyleSettings != null ? de_LineChartLineStyleSettings(output.LineStyleSettings, context) : undefined,
    MarkerStyleSettings:
      output.MarkerStyleSettings != null
        ? de_LineChartMarkerStyleSettings(output.MarkerStyleSettings, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1LineChartSortConfiguration
 */
const de_LineChartSortConfiguration = (output: any, context: __SerdeContext): LineChartSortConfiguration => {
  return {
    CategoryItemsLimitConfiguration:
      output.CategoryItemsLimitConfiguration != null
        ? de_ItemsLimitConfiguration(output.CategoryItemsLimitConfiguration, context)
        : undefined,
    CategorySort: output.CategorySort != null ? de_FieldSortOptionsList(output.CategorySort, context) : undefined,
    ColorItemsLimitConfiguration:
      output.ColorItemsLimitConfiguration != null
        ? de_ItemsLimitConfiguration(output.ColorItemsLimitConfiguration, context)
        : undefined,
    SmallMultiplesLimitConfiguration:
      output.SmallMultiplesLimitConfiguration != null
        ? de_ItemsLimitConfiguration(output.SmallMultiplesLimitConfiguration, context)
        : undefined,
    SmallMultiplesSort:
      output.SmallMultiplesSort != null ? de_FieldSortOptionsList(output.SmallMultiplesSort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1LineChartVisual
 */
const de_LineChartVisual = (output: any, context: __SerdeContext): LineChartVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_LineChartConfiguration(output.ChartConfiguration, context) : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1LineSeriesAxisDisplayOptions
 */
const de_LineSeriesAxisDisplayOptions = (output: any, context: __SerdeContext): LineSeriesAxisDisplayOptions => {
  return {
    AxisOptions: output.AxisOptions != null ? de_AxisDisplayOptions(output.AxisOptions, context) : undefined,
    MissingDataConfigurations:
      output.MissingDataConfigurations != null
        ? de_MissingDataConfigurationList(output.MissingDataConfigurations, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1LinkSharingConfiguration
 */
const de_LinkSharingConfiguration = (output: any, context: __SerdeContext): LinkSharingConfiguration => {
  return {
    Permissions: output.Permissions != null ? de_ResourcePermissionList(output.Permissions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ListControlDisplayOptions
 */
const de_ListControlDisplayOptions = (output: any, context: __SerdeContext): ListControlDisplayOptions => {
  return {
    SearchOptions:
      output.SearchOptions != null ? de_ListControlSearchOptions(output.SearchOptions, context) : undefined,
    SelectAllOptions:
      output.SelectAllOptions != null ? de_ListControlSelectAllOptions(output.SelectAllOptions, context) : undefined,
    TitleOptions: output.TitleOptions != null ? de_LabelOptions(output.TitleOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ListControlSearchOptions
 */
const de_ListControlSearchOptions = (output: any, context: __SerdeContext): ListControlSearchOptions => {
  return {
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1ListControlSelectAllOptions
 */
const de_ListControlSelectAllOptions = (output: any, context: __SerdeContext): ListControlSelectAllOptions => {
  return {
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1LoadingAnimation
 */
const de_LoadingAnimation = (output: any, context: __SerdeContext): LoadingAnimation => {
  return {
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1LocalNavigationConfiguration
 */
const de_LocalNavigationConfiguration = (output: any, context: __SerdeContext): LocalNavigationConfiguration => {
  return {
    TargetSheetId: __expectString(output.TargetSheetId),
  } as any;
};

/**
 * deserializeAws_restJson1LogicalTable
 */
const de_LogicalTable = (output: any, context: __SerdeContext): LogicalTable => {
  return {
    Alias: __expectString(output.Alias),
    DataTransforms:
      output.DataTransforms != null ? de_TransformOperationList(output.DataTransforms, context) : undefined,
    Source: output.Source != null ? de_LogicalTableSource(output.Source, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1LogicalTableMap
 */
const de_LogicalTableMap = (output: any, context: __SerdeContext): Record<string, LogicalTable> => {
  return Object.entries(output).reduce((acc: Record<string, LogicalTable>, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_LogicalTable(value, context);
    return acc;
  }, {});
};

/**
 * deserializeAws_restJson1LogicalTableSource
 */
const de_LogicalTableSource = (output: any, context: __SerdeContext): LogicalTableSource => {
  return {
    DataSetArn: __expectString(output.DataSetArn),
    JoinInstruction: output.JoinInstruction != null ? de_JoinInstruction(output.JoinInstruction, context) : undefined,
    PhysicalTableId: __expectString(output.PhysicalTableId),
  } as any;
};

/**
 * deserializeAws_restJson1LongFormatText
 */
const de_LongFormatText = (output: any, context: __SerdeContext): LongFormatText => {
  return {
    PlainText: __expectString(output.PlainText),
    RichText: __expectString(output.RichText),
  } as any;
};

/**
 * deserializeAws_restJson1ManifestFileLocation
 */
const de_ManifestFileLocation = (output: any, context: __SerdeContext): ManifestFileLocation => {
  return {
    Bucket: __expectString(output.Bucket),
    Key: __expectString(output.Key),
  } as any;
};

/**
 * deserializeAws_restJson1MarginStyle
 */
const de_MarginStyle = (output: any, context: __SerdeContext): MarginStyle => {
  return {
    Show: __expectBoolean(output.Show),
  } as any;
};

/**
 * deserializeAws_restJson1MariaDbParameters
 */
const de_MariaDbParameters = (output: any, context: __SerdeContext): MariaDbParameters => {
  return {
    Database: __expectString(output.Database),
    Host: __expectString(output.Host),
    Port: __expectInt32(output.Port),
  } as any;
};

/**
 * deserializeAws_restJson1MaximumLabelType
 */
const de_MaximumLabelType = (output: any, context: __SerdeContext): MaximumLabelType => {
  return {
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1MaximumMinimumComputation
 */
const de_MaximumMinimumComputation = (output: any, context: __SerdeContext): MaximumMinimumComputation => {
  return {
    ComputationId: __expectString(output.ComputationId),
    Name: __expectString(output.Name),
    Time: output.Time != null ? de_DimensionField(output.Time, context) : undefined,
    Type: __expectString(output.Type),
    Value: output.Value != null ? de_MeasureField(output.Value, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1MeasureField
 */
const de_MeasureField = (output: any, context: __SerdeContext): MeasureField => {
  return {
    CalculatedMeasureField:
      output.CalculatedMeasureField != null
        ? de_CalculatedMeasureField(output.CalculatedMeasureField, context)
        : undefined,
    CategoricalMeasureField:
      output.CategoricalMeasureField != null
        ? de_CategoricalMeasureField(output.CategoricalMeasureField, context)
        : undefined,
    DateMeasureField:
      output.DateMeasureField != null ? de_DateMeasureField(output.DateMeasureField, context) : undefined,
    NumericalMeasureField:
      output.NumericalMeasureField != null
        ? de_NumericalMeasureField(output.NumericalMeasureField, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1MeasureFieldList
 */
const de_MeasureFieldList = (output: any, context: __SerdeContext): MeasureField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_MeasureField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1MemberIdArnPair
 */
const de_MemberIdArnPair = (output: any, context: __SerdeContext): MemberIdArnPair => {
  return {
    MemberArn: __expectString(output.MemberArn),
    MemberId: __expectString(output.MemberId),
  } as any;
};

/**
 * deserializeAws_restJson1MetricComparisonComputation
 */
const de_MetricComparisonComputation = (output: any, context: __SerdeContext): MetricComparisonComputation => {
  return {
    ComputationId: __expectString(output.ComputationId),
    FromValue: output.FromValue != null ? de_MeasureField(output.FromValue, context) : undefined,
    Name: __expectString(output.Name),
    TargetValue: output.TargetValue != null ? de_MeasureField(output.TargetValue, context) : undefined,
    Time: output.Time != null ? de_DimensionField(output.Time, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1MinimumLabelType
 */
const de_MinimumLabelType = (output: any, context: __SerdeContext): MinimumLabelType => {
  return {
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1MissingDataConfiguration
 */
const de_MissingDataConfiguration = (output: any, context: __SerdeContext): MissingDataConfiguration => {
  return {
    TreatmentOption: __expectString(output.TreatmentOption),
  } as any;
};

/**
 * deserializeAws_restJson1MissingDataConfigurationList
 */
const de_MissingDataConfigurationList = (output: any, context: __SerdeContext): MissingDataConfiguration[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_MissingDataConfiguration(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1MySqlParameters
 */
const de_MySqlParameters = (output: any, context: __SerdeContext): MySqlParameters => {
  return {
    Database: __expectString(output.Database),
    Host: __expectString(output.Host),
    Port: __expectInt32(output.Port),
  } as any;
};

/**
 * deserializeAws_restJson1NamespaceError
 */
const de_NamespaceError = (output: any, context: __SerdeContext): NamespaceError => {
  return {
    Message: __expectString(output.Message),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1NamespaceInfoV2
 */
const de_NamespaceInfoV2 = (output: any, context: __SerdeContext): NamespaceInfoV2 => {
  return {
    Arn: __expectString(output.Arn),
    CapacityRegion: __expectString(output.CapacityRegion),
    CreationStatus: __expectString(output.CreationStatus),
    IdentityStore: __expectString(output.IdentityStore),
    Name: __expectString(output.Name),
    NamespaceError: output.NamespaceError != null ? de_NamespaceError(output.NamespaceError, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1Namespaces
 */
const de_Namespaces = (output: any, context: __SerdeContext): NamespaceInfoV2[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_NamespaceInfoV2(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1NegativeValueConfiguration
 */
const de_NegativeValueConfiguration = (output: any, context: __SerdeContext): NegativeValueConfiguration => {
  return {
    DisplayMode: __expectString(output.DisplayMode),
  } as any;
};

/**
 * deserializeAws_restJson1NullValueFormatConfiguration
 */
const de_NullValueFormatConfiguration = (output: any, context: __SerdeContext): NullValueFormatConfiguration => {
  return {
    NullString: __expectString(output.NullString),
  } as any;
};

/**
 * deserializeAws_restJson1NumberDisplayFormatConfiguration
 */
const de_NumberDisplayFormatConfiguration = (
  output: any,
  context: __SerdeContext
): NumberDisplayFormatConfiguration => {
  return {
    DecimalPlacesConfiguration:
      output.DecimalPlacesConfiguration != null
        ? de_DecimalPlacesConfiguration(output.DecimalPlacesConfiguration, context)
        : undefined,
    NegativeValueConfiguration:
      output.NegativeValueConfiguration != null
        ? de_NegativeValueConfiguration(output.NegativeValueConfiguration, context)
        : undefined,
    NullValueFormatConfiguration:
      output.NullValueFormatConfiguration != null
        ? de_NullValueFormatConfiguration(output.NullValueFormatConfiguration, context)
        : undefined,
    NumberScale: __expectString(output.NumberScale),
    Prefix: __expectString(output.Prefix),
    SeparatorConfiguration:
      output.SeparatorConfiguration != null
        ? de_NumericSeparatorConfiguration(output.SeparatorConfiguration, context)
        : undefined,
    Suffix: __expectString(output.Suffix),
  } as any;
};

/**
 * deserializeAws_restJson1NumberFormatConfiguration
 */
const de_NumberFormatConfiguration = (output: any, context: __SerdeContext): NumberFormatConfiguration => {
  return {
    FormatConfiguration:
      output.FormatConfiguration != null
        ? de_NumericFormatConfiguration(output.FormatConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1NumericalAggregationFunction
 */
const de_NumericalAggregationFunction = (output: any, context: __SerdeContext): NumericalAggregationFunction => {
  return {
    PercentileAggregation:
      output.PercentileAggregation != null
        ? de_PercentileAggregation(output.PercentileAggregation, context)
        : undefined,
    SimpleNumericalAggregation: __expectString(output.SimpleNumericalAggregation),
  } as any;
};

/**
 * deserializeAws_restJson1NumericalDimensionField
 */
const de_NumericalDimensionField = (output: any, context: __SerdeContext): NumericalDimensionField => {
  return {
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    FieldId: __expectString(output.FieldId),
    FormatConfiguration:
      output.FormatConfiguration != null
        ? de_NumberFormatConfiguration(output.FormatConfiguration, context)
        : undefined,
    HierarchyId: __expectString(output.HierarchyId),
  } as any;
};

/**
 * deserializeAws_restJson1NumericalMeasureField
 */
const de_NumericalMeasureField = (output: any, context: __SerdeContext): NumericalMeasureField => {
  return {
    AggregationFunction:
      output.AggregationFunction != null
        ? de_NumericalAggregationFunction(output.AggregationFunction, context)
        : undefined,
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    FieldId: __expectString(output.FieldId),
    FormatConfiguration:
      output.FormatConfiguration != null
        ? de_NumberFormatConfiguration(output.FormatConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1NumericAxisOptions
 */
const de_NumericAxisOptions = (output: any, context: __SerdeContext): NumericAxisOptions => {
  return {
    Range: output.Range != null ? de_AxisDisplayRange(output.Range, context) : undefined,
    Scale: output.Scale != null ? de_AxisScale(output.Scale, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1NumericEqualityDrillDownFilter
 */
const de_NumericEqualityDrillDownFilter = (output: any, context: __SerdeContext): NumericEqualityDrillDownFilter => {
  return {
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    Value: __limitedParseDouble(output.Value),
  } as any;
};

/**
 * deserializeAws_restJson1NumericEqualityFilter
 */
const de_NumericEqualityFilter = (output: any, context: __SerdeContext): NumericEqualityFilter => {
  return {
    AggregationFunction:
      output.AggregationFunction != null ? de_AggregationFunction(output.AggregationFunction, context) : undefined,
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    FilterId: __expectString(output.FilterId),
    MatchOperator: __expectString(output.MatchOperator),
    NullOption: __expectString(output.NullOption),
    ParameterName: __expectString(output.ParameterName),
    SelectAllOptions: __expectString(output.SelectAllOptions),
    Value: __limitedParseDouble(output.Value),
  } as any;
};

/**
 * deserializeAws_restJson1NumericFormatConfiguration
 */
const de_NumericFormatConfiguration = (output: any, context: __SerdeContext): NumericFormatConfiguration => {
  return {
    CurrencyDisplayFormatConfiguration:
      output.CurrencyDisplayFormatConfiguration != null
        ? de_CurrencyDisplayFormatConfiguration(output.CurrencyDisplayFormatConfiguration, context)
        : undefined,
    NumberDisplayFormatConfiguration:
      output.NumberDisplayFormatConfiguration != null
        ? de_NumberDisplayFormatConfiguration(output.NumberDisplayFormatConfiguration, context)
        : undefined,
    PercentageDisplayFormatConfiguration:
      output.PercentageDisplayFormatConfiguration != null
        ? de_PercentageDisplayFormatConfiguration(output.PercentageDisplayFormatConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1NumericRangeFilter
 */
const de_NumericRangeFilter = (output: any, context: __SerdeContext): NumericRangeFilter => {
  return {
    AggregationFunction:
      output.AggregationFunction != null ? de_AggregationFunction(output.AggregationFunction, context) : undefined,
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    FilterId: __expectString(output.FilterId),
    IncludeMaximum: __expectBoolean(output.IncludeMaximum),
    IncludeMinimum: __expectBoolean(output.IncludeMinimum),
    NullOption: __expectString(output.NullOption),
    RangeMaximum: output.RangeMaximum != null ? de_NumericRangeFilterValue(output.RangeMaximum, context) : undefined,
    RangeMinimum: output.RangeMinimum != null ? de_NumericRangeFilterValue(output.RangeMinimum, context) : undefined,
    SelectAllOptions: __expectString(output.SelectAllOptions),
  } as any;
};

/**
 * deserializeAws_restJson1NumericRangeFilterValue
 */
const de_NumericRangeFilterValue = (output: any, context: __SerdeContext): NumericRangeFilterValue => {
  return {
    Parameter: __expectString(output.Parameter),
    StaticValue: __limitedParseDouble(output.StaticValue),
  } as any;
};

/**
 * deserializeAws_restJson1NumericSeparatorConfiguration
 */
const de_NumericSeparatorConfiguration = (output: any, context: __SerdeContext): NumericSeparatorConfiguration => {
  return {
    DecimalSeparator: __expectString(output.DecimalSeparator),
    ThousandsSeparator:
      output.ThousandsSeparator != null ? de_ThousandSeparatorOptions(output.ThousandsSeparator, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1OracleParameters
 */
const de_OracleParameters = (output: any, context: __SerdeContext): OracleParameters => {
  return {
    Database: __expectString(output.Database),
    Host: __expectString(output.Host),
    Port: __expectInt32(output.Port),
  } as any;
};

/**
 * deserializeAws_restJson1OutputColumn
 */
const de_OutputColumn = (output: any, context: __SerdeContext): OutputColumn => {
  return {
    Description: __expectString(output.Description),
    Name: __expectString(output.Name),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1OutputColumnList
 */
const de_OutputColumnList = (output: any, context: __SerdeContext): OutputColumn[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_OutputColumn(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1PaginationConfiguration
 */
const de_PaginationConfiguration = (output: any, context: __SerdeContext): PaginationConfiguration => {
  return {
    PageNumber: __expectLong(output.PageNumber),
    PageSize: __expectLong(output.PageSize),
  } as any;
};

/**
 * deserializeAws_restJson1PanelConfiguration
 */
const de_PanelConfiguration = (output: any, context: __SerdeContext): PanelConfiguration => {
  return {
    BackgroundColor: __expectString(output.BackgroundColor),
    BackgroundVisibility: __expectString(output.BackgroundVisibility),
    BorderColor: __expectString(output.BorderColor),
    BorderStyle: __expectString(output.BorderStyle),
    BorderThickness: __expectString(output.BorderThickness),
    BorderVisibility: __expectString(output.BorderVisibility),
    GutterSpacing: __expectString(output.GutterSpacing),
    GutterVisibility: __expectString(output.GutterVisibility),
    Title: output.Title != null ? de_PanelTitleOptions(output.Title, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PanelTitleOptions
 */
const de_PanelTitleOptions = (output: any, context: __SerdeContext): PanelTitleOptions => {
  return {
    FontConfiguration:
      output.FontConfiguration != null ? de_FontConfiguration(output.FontConfiguration, context) : undefined,
    HorizontalTextAlignment: __expectString(output.HorizontalTextAlignment),
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1ParameterControl
 */
const de_ParameterControl = (output: any, context: __SerdeContext): ParameterControl => {
  return {
    DateTimePicker:
      output.DateTimePicker != null ? de_ParameterDateTimePickerControl(output.DateTimePicker, context) : undefined,
    Dropdown: output.Dropdown != null ? de_ParameterDropDownControl(output.Dropdown, context) : undefined,
    List: output.List != null ? de_ParameterListControl(output.List, context) : undefined,
    Slider: output.Slider != null ? de_ParameterSliderControl(output.Slider, context) : undefined,
    TextArea: output.TextArea != null ? de_ParameterTextAreaControl(output.TextArea, context) : undefined,
    TextField: output.TextField != null ? de_ParameterTextFieldControl(output.TextField, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ParameterControlList
 */
const de_ParameterControlList = (output: any, context: __SerdeContext): ParameterControl[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ParameterControl(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ParameterDateTimePickerControl
 */
const de_ParameterDateTimePickerControl = (output: any, context: __SerdeContext): ParameterDateTimePickerControl => {
  return {
    DisplayOptions:
      output.DisplayOptions != null
        ? de_DateTimePickerControlDisplayOptions(output.DisplayOptions, context)
        : undefined,
    ParameterControlId: __expectString(output.ParameterControlId),
    SourceParameterName: __expectString(output.SourceParameterName),
    Title: __expectString(output.Title),
  } as any;
};

/**
 * deserializeAws_restJson1ParameterDeclaration
 */
const de_ParameterDeclaration = (output: any, context: __SerdeContext): ParameterDeclaration => {
  return {
    DateTimeParameterDeclaration:
      output.DateTimeParameterDeclaration != null
        ? de_DateTimeParameterDeclaration(output.DateTimeParameterDeclaration, context)
        : undefined,
    DecimalParameterDeclaration:
      output.DecimalParameterDeclaration != null
        ? de_DecimalParameterDeclaration(output.DecimalParameterDeclaration, context)
        : undefined,
    IntegerParameterDeclaration:
      output.IntegerParameterDeclaration != null
        ? de_IntegerParameterDeclaration(output.IntegerParameterDeclaration, context)
        : undefined,
    StringParameterDeclaration:
      output.StringParameterDeclaration != null
        ? de_StringParameterDeclaration(output.StringParameterDeclaration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ParameterDeclarationList
 */
const de_ParameterDeclarationList = (output: any, context: __SerdeContext): ParameterDeclaration[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ParameterDeclaration(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ParameterDropDownControl
 */
const de_ParameterDropDownControl = (output: any, context: __SerdeContext): ParameterDropDownControl => {
  return {
    CascadingControlConfiguration:
      output.CascadingControlConfiguration != null
        ? de_CascadingControlConfiguration(output.CascadingControlConfiguration, context)
        : undefined,
    DisplayOptions:
      output.DisplayOptions != null ? de_DropDownControlDisplayOptions(output.DisplayOptions, context) : undefined,
    ParameterControlId: __expectString(output.ParameterControlId),
    SelectableValues:
      output.SelectableValues != null ? de_ParameterSelectableValues(output.SelectableValues, context) : undefined,
    SourceParameterName: __expectString(output.SourceParameterName),
    Title: __expectString(output.Title),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1ParameterListControl
 */
const de_ParameterListControl = (output: any, context: __SerdeContext): ParameterListControl => {
  return {
    CascadingControlConfiguration:
      output.CascadingControlConfiguration != null
        ? de_CascadingControlConfiguration(output.CascadingControlConfiguration, context)
        : undefined,
    DisplayOptions:
      output.DisplayOptions != null ? de_ListControlDisplayOptions(output.DisplayOptions, context) : undefined,
    ParameterControlId: __expectString(output.ParameterControlId),
    SelectableValues:
      output.SelectableValues != null ? de_ParameterSelectableValues(output.SelectableValues, context) : undefined,
    SourceParameterName: __expectString(output.SourceParameterName),
    Title: __expectString(output.Title),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1ParameterSelectableValueList
 */
const de_ParameterSelectableValueList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ParameterSelectableValues
 */
const de_ParameterSelectableValues = (output: any, context: __SerdeContext): ParameterSelectableValues => {
  return {
    LinkToDataSetColumn:
      output.LinkToDataSetColumn != null ? de_ColumnIdentifier(output.LinkToDataSetColumn, context) : undefined,
    Values: output.Values != null ? de_ParameterSelectableValueList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ParameterSliderControl
 */
const de_ParameterSliderControl = (output: any, context: __SerdeContext): ParameterSliderControl => {
  return {
    DisplayOptions:
      output.DisplayOptions != null ? de_SliderControlDisplayOptions(output.DisplayOptions, context) : undefined,
    MaximumValue: __limitedParseDouble(output.MaximumValue),
    MinimumValue: __limitedParseDouble(output.MinimumValue),
    ParameterControlId: __expectString(output.ParameterControlId),
    SourceParameterName: __expectString(output.SourceParameterName),
    StepSize: __limitedParseDouble(output.StepSize),
    Title: __expectString(output.Title),
  } as any;
};

/**
 * deserializeAws_restJson1ParameterTextAreaControl
 */
const de_ParameterTextAreaControl = (output: any, context: __SerdeContext): ParameterTextAreaControl => {
  return {
    Delimiter: __expectString(output.Delimiter),
    DisplayOptions:
      output.DisplayOptions != null ? de_TextAreaControlDisplayOptions(output.DisplayOptions, context) : undefined,
    ParameterControlId: __expectString(output.ParameterControlId),
    SourceParameterName: __expectString(output.SourceParameterName),
    Title: __expectString(output.Title),
  } as any;
};

/**
 * deserializeAws_restJson1ParameterTextFieldControl
 */
const de_ParameterTextFieldControl = (output: any, context: __SerdeContext): ParameterTextFieldControl => {
  return {
    DisplayOptions:
      output.DisplayOptions != null ? de_TextFieldControlDisplayOptions(output.DisplayOptions, context) : undefined,
    ParameterControlId: __expectString(output.ParameterControlId),
    SourceParameterName: __expectString(output.SourceParameterName),
    Title: __expectString(output.Title),
  } as any;
};

/**
 * deserializeAws_restJson1Path
 */
const de_Path = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1PercentageDisplayFormatConfiguration
 */
const de_PercentageDisplayFormatConfiguration = (
  output: any,
  context: __SerdeContext
): PercentageDisplayFormatConfiguration => {
  return {
    DecimalPlacesConfiguration:
      output.DecimalPlacesConfiguration != null
        ? de_DecimalPlacesConfiguration(output.DecimalPlacesConfiguration, context)
        : undefined,
    NegativeValueConfiguration:
      output.NegativeValueConfiguration != null
        ? de_NegativeValueConfiguration(output.NegativeValueConfiguration, context)
        : undefined,
    NullValueFormatConfiguration:
      output.NullValueFormatConfiguration != null
        ? de_NullValueFormatConfiguration(output.NullValueFormatConfiguration, context)
        : undefined,
    Prefix: __expectString(output.Prefix),
    SeparatorConfiguration:
      output.SeparatorConfiguration != null
        ? de_NumericSeparatorConfiguration(output.SeparatorConfiguration, context)
        : undefined,
    Suffix: __expectString(output.Suffix),
  } as any;
};

/**
 * deserializeAws_restJson1PercentileAggregation
 */
const de_PercentileAggregation = (output: any, context: __SerdeContext): PercentileAggregation => {
  return {
    PercentileValue: __limitedParseDouble(output.PercentileValue),
  } as any;
};

/**
 * deserializeAws_restJson1PercentVisibleRange
 */
const de_PercentVisibleRange = (output: any, context: __SerdeContext): PercentVisibleRange => {
  return {
    From: __limitedParseDouble(output.From),
    To: __limitedParseDouble(output.To),
  } as any;
};

/**
 * deserializeAws_restJson1PeriodOverPeriodComputation
 */
const de_PeriodOverPeriodComputation = (output: any, context: __SerdeContext): PeriodOverPeriodComputation => {
  return {
    ComputationId: __expectString(output.ComputationId),
    Name: __expectString(output.Name),
    Time: output.Time != null ? de_DimensionField(output.Time, context) : undefined,
    Value: output.Value != null ? de_MeasureField(output.Value, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PeriodToDateComputation
 */
const de_PeriodToDateComputation = (output: any, context: __SerdeContext): PeriodToDateComputation => {
  return {
    ComputationId: __expectString(output.ComputationId),
    Name: __expectString(output.Name),
    PeriodTimeGranularity: __expectString(output.PeriodTimeGranularity),
    Time: output.Time != null ? de_DimensionField(output.Time, context) : undefined,
    Value: output.Value != null ? de_MeasureField(output.Value, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PhysicalTable
 */
const de_PhysicalTable = (output: any, context: __SerdeContext): PhysicalTable => {
  if (output.CustomSql != null) {
    return {
      CustomSql: de_CustomSql(output.CustomSql, context),
    };
  }
  if (output.RelationalTable != null) {
    return {
      RelationalTable: de_RelationalTable(output.RelationalTable, context),
    };
  }
  if (output.S3Source != null) {
    return {
      S3Source: de_S3Source(output.S3Source, context),
    };
  }
  return { $unknown: Object.entries(output)[0] };
};

/**
 * deserializeAws_restJson1PhysicalTableMap
 */
const de_PhysicalTableMap = (output: any, context: __SerdeContext): Record<string, PhysicalTable> => {
  return Object.entries(output).reduce((acc: Record<string, PhysicalTable>, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_PhysicalTable(__expectUnion(value), context);
    return acc;
  }, {});
};

/**
 * deserializeAws_restJson1PieChartAggregatedFieldWells
 */
const de_PieChartAggregatedFieldWells = (output: any, context: __SerdeContext): PieChartAggregatedFieldWells => {
  return {
    Category: output.Category != null ? de_DimensionFieldList(output.Category, context) : undefined,
    SmallMultiples:
      output.SmallMultiples != null ? de_SmallMultiplesDimensionFieldList(output.SmallMultiples, context) : undefined,
    Values: output.Values != null ? de_MeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PieChartConfiguration
 */
const de_PieChartConfiguration = (output: any, context: __SerdeContext): PieChartConfiguration => {
  return {
    CategoryLabelOptions:
      output.CategoryLabelOptions != null ? de_ChartAxisLabelOptions(output.CategoryLabelOptions, context) : undefined,
    ContributionAnalysisDefaults:
      output.ContributionAnalysisDefaults != null
        ? de_ContributionAnalysisDefaultList(output.ContributionAnalysisDefaults, context)
        : undefined,
    DataLabels: output.DataLabels != null ? de_DataLabelOptions(output.DataLabels, context) : undefined,
    DonutOptions: output.DonutOptions != null ? de_DonutOptions(output.DonutOptions, context) : undefined,
    FieldWells: output.FieldWells != null ? de_PieChartFieldWells(output.FieldWells, context) : undefined,
    Legend: output.Legend != null ? de_LegendOptions(output.Legend, context) : undefined,
    SmallMultiplesOptions:
      output.SmallMultiplesOptions != null
        ? de_SmallMultiplesOptions(output.SmallMultiplesOptions, context)
        : undefined,
    SortConfiguration:
      output.SortConfiguration != null ? de_PieChartSortConfiguration(output.SortConfiguration, context) : undefined,
    Tooltip: output.Tooltip != null ? de_TooltipOptions(output.Tooltip, context) : undefined,
    ValueLabelOptions:
      output.ValueLabelOptions != null ? de_ChartAxisLabelOptions(output.ValueLabelOptions, context) : undefined,
    VisualPalette: output.VisualPalette != null ? de_VisualPalette(output.VisualPalette, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PieChartFieldWells
 */
const de_PieChartFieldWells = (output: any, context: __SerdeContext): PieChartFieldWells => {
  return {
    PieChartAggregatedFieldWells:
      output.PieChartAggregatedFieldWells != null
        ? de_PieChartAggregatedFieldWells(output.PieChartAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PieChartSortConfiguration
 */
const de_PieChartSortConfiguration = (output: any, context: __SerdeContext): PieChartSortConfiguration => {
  return {
    CategoryItemsLimit:
      output.CategoryItemsLimit != null ? de_ItemsLimitConfiguration(output.CategoryItemsLimit, context) : undefined,
    CategorySort: output.CategorySort != null ? de_FieldSortOptionsList(output.CategorySort, context) : undefined,
    SmallMultiplesLimitConfiguration:
      output.SmallMultiplesLimitConfiguration != null
        ? de_ItemsLimitConfiguration(output.SmallMultiplesLimitConfiguration, context)
        : undefined,
    SmallMultiplesSort:
      output.SmallMultiplesSort != null ? de_FieldSortOptionsList(output.SmallMultiplesSort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PieChartVisual
 */
const de_PieChartVisual = (output: any, context: __SerdeContext): PieChartVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_PieChartConfiguration(output.ChartConfiguration, context) : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1PivotFieldSortOptions
 */
const de_PivotFieldSortOptions = (output: any, context: __SerdeContext): PivotFieldSortOptions => {
  return {
    FieldId: __expectString(output.FieldId),
    SortBy: output.SortBy != null ? de_PivotTableSortBy(output.SortBy, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PivotFieldSortOptionsList
 */
const de_PivotFieldSortOptionsList = (output: any, context: __SerdeContext): PivotFieldSortOptions[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_PivotFieldSortOptions(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1PivotMeasureFieldList
 */
const de_PivotMeasureFieldList = (output: any, context: __SerdeContext): MeasureField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_MeasureField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1PivotTableAggregatedFieldWells
 */
const de_PivotTableAggregatedFieldWells = (output: any, context: __SerdeContext): PivotTableAggregatedFieldWells => {
  return {
    Columns: output.Columns != null ? de_PivotTableDimensionList(output.Columns, context) : undefined,
    Rows: output.Rows != null ? de_PivotTableDimensionList(output.Rows, context) : undefined,
    Values: output.Values != null ? de_PivotMeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableCellConditionalFormatting
 */
const de_PivotTableCellConditionalFormatting = (
  output: any,
  context: __SerdeContext
): PivotTableCellConditionalFormatting => {
  return {
    FieldId: __expectString(output.FieldId),
    Scope: output.Scope != null ? de_PivotTableConditionalFormattingScope(output.Scope, context) : undefined,
    TextFormat: output.TextFormat != null ? de_TextConditionalFormat(output.TextFormat, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableConditionalFormatting
 */
const de_PivotTableConditionalFormatting = (output: any, context: __SerdeContext): PivotTableConditionalFormatting => {
  return {
    ConditionalFormattingOptions:
      output.ConditionalFormattingOptions != null
        ? de_PivotTableConditionalFormattingOptionList(output.ConditionalFormattingOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableConditionalFormattingOption
 */
const de_PivotTableConditionalFormattingOption = (
  output: any,
  context: __SerdeContext
): PivotTableConditionalFormattingOption => {
  return {
    Cell: output.Cell != null ? de_PivotTableCellConditionalFormatting(output.Cell, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableConditionalFormattingOptionList
 */
const de_PivotTableConditionalFormattingOptionList = (
  output: any,
  context: __SerdeContext
): PivotTableConditionalFormattingOption[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_PivotTableConditionalFormattingOption(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1PivotTableConditionalFormattingScope
 */
const de_PivotTableConditionalFormattingScope = (
  output: any,
  context: __SerdeContext
): PivotTableConditionalFormattingScope => {
  return {
    Role: __expectString(output.Role),
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableConfiguration
 */
const de_PivotTableConfiguration = (output: any, context: __SerdeContext): PivotTableConfiguration => {
  return {
    FieldOptions: output.FieldOptions != null ? de_PivotTableFieldOptions(output.FieldOptions, context) : undefined,
    FieldWells: output.FieldWells != null ? de_PivotTableFieldWells(output.FieldWells, context) : undefined,
    PaginatedReportOptions:
      output.PaginatedReportOptions != null
        ? de_PivotTablePaginatedReportOptions(output.PaginatedReportOptions, context)
        : undefined,
    SortConfiguration:
      output.SortConfiguration != null ? de_PivotTableSortConfiguration(output.SortConfiguration, context) : undefined,
    TableOptions: output.TableOptions != null ? de_PivotTableOptions(output.TableOptions, context) : undefined,
    TotalOptions: output.TotalOptions != null ? de_PivotTableTotalOptions(output.TotalOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableDataPathOption
 */
const de_PivotTableDataPathOption = (output: any, context: __SerdeContext): PivotTableDataPathOption => {
  return {
    DataPathList: output.DataPathList != null ? de_DataPathValueList(output.DataPathList, context) : undefined,
    Width: __expectString(output.Width),
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableDataPathOptionList
 */
const de_PivotTableDataPathOptionList = (output: any, context: __SerdeContext): PivotTableDataPathOption[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_PivotTableDataPathOption(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1PivotTableDimensionList
 */
const de_PivotTableDimensionList = (output: any, context: __SerdeContext): DimensionField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DimensionField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1PivotTableFieldOption
 */
const de_PivotTableFieldOption = (output: any, context: __SerdeContext): PivotTableFieldOption => {
  return {
    CustomLabel: __expectString(output.CustomLabel),
    FieldId: __expectString(output.FieldId),
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableFieldOptionList
 */
const de_PivotTableFieldOptionList = (output: any, context: __SerdeContext): PivotTableFieldOption[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_PivotTableFieldOption(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1PivotTableFieldOptions
 */
const de_PivotTableFieldOptions = (output: any, context: __SerdeContext): PivotTableFieldOptions => {
  return {
    DataPathOptions:
      output.DataPathOptions != null ? de_PivotTableDataPathOptionList(output.DataPathOptions, context) : undefined,
    SelectedFieldOptions:
      output.SelectedFieldOptions != null
        ? de_PivotTableFieldOptionList(output.SelectedFieldOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableFieldSubtotalOptions
 */
const de_PivotTableFieldSubtotalOptions = (output: any, context: __SerdeContext): PivotTableFieldSubtotalOptions => {
  return {
    FieldId: __expectString(output.FieldId),
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableFieldSubtotalOptionsList
 */
const de_PivotTableFieldSubtotalOptionsList = (
  output: any,
  context: __SerdeContext
): PivotTableFieldSubtotalOptions[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_PivotTableFieldSubtotalOptions(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1PivotTableFieldWells
 */
const de_PivotTableFieldWells = (output: any, context: __SerdeContext): PivotTableFieldWells => {
  return {
    PivotTableAggregatedFieldWells:
      output.PivotTableAggregatedFieldWells != null
        ? de_PivotTableAggregatedFieldWells(output.PivotTableAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableOptions
 */
const de_PivotTableOptions = (output: any, context: __SerdeContext): PivotTableOptions => {
  return {
    CellStyle: output.CellStyle != null ? de_TableCellStyle(output.CellStyle, context) : undefined,
    CollapsedRowDimensionsVisibility: __expectString(output.CollapsedRowDimensionsVisibility),
    ColumnHeaderStyle:
      output.ColumnHeaderStyle != null ? de_TableCellStyle(output.ColumnHeaderStyle, context) : undefined,
    ColumnNamesVisibility: __expectString(output.ColumnNamesVisibility),
    MetricPlacement: __expectString(output.MetricPlacement),
    RowAlternateColorOptions:
      output.RowAlternateColorOptions != null
        ? de_RowAlternateColorOptions(output.RowAlternateColorOptions, context)
        : undefined,
    RowFieldNamesStyle:
      output.RowFieldNamesStyle != null ? de_TableCellStyle(output.RowFieldNamesStyle, context) : undefined,
    RowHeaderStyle: output.RowHeaderStyle != null ? de_TableCellStyle(output.RowHeaderStyle, context) : undefined,
    SingleMetricVisibility: __expectString(output.SingleMetricVisibility),
    ToggleButtonsVisibility: __expectString(output.ToggleButtonsVisibility),
  } as any;
};

/**
 * deserializeAws_restJson1PivotTablePaginatedReportOptions
 */
const de_PivotTablePaginatedReportOptions = (
  output: any,
  context: __SerdeContext
): PivotTablePaginatedReportOptions => {
  return {
    OverflowColumnHeaderVisibility: __expectString(output.OverflowColumnHeaderVisibility),
    VerticalOverflowVisibility: __expectString(output.VerticalOverflowVisibility),
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableSortBy
 */
const de_PivotTableSortBy = (output: any, context: __SerdeContext): PivotTableSortBy => {
  return {
    Column: output.Column != null ? de_ColumnSort(output.Column, context) : undefined,
    DataPath: output.DataPath != null ? de_DataPathSort(output.DataPath, context) : undefined,
    Field: output.Field != null ? de_FieldSort(output.Field, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableSortConfiguration
 */
const de_PivotTableSortConfiguration = (output: any, context: __SerdeContext): PivotTableSortConfiguration => {
  return {
    FieldSortOptions:
      output.FieldSortOptions != null ? de_PivotFieldSortOptionsList(output.FieldSortOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableTotalOptions
 */
const de_PivotTableTotalOptions = (output: any, context: __SerdeContext): PivotTableTotalOptions => {
  return {
    ColumnSubtotalOptions:
      output.ColumnSubtotalOptions != null ? de_SubtotalOptions(output.ColumnSubtotalOptions, context) : undefined,
    ColumnTotalOptions:
      output.ColumnTotalOptions != null ? de_PivotTotalOptions(output.ColumnTotalOptions, context) : undefined,
    RowSubtotalOptions:
      output.RowSubtotalOptions != null ? de_SubtotalOptions(output.RowSubtotalOptions, context) : undefined,
    RowTotalOptions: output.RowTotalOptions != null ? de_PivotTotalOptions(output.RowTotalOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PivotTableVisual
 */
const de_PivotTableVisual = (output: any, context: __SerdeContext): PivotTableVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_PivotTableConfiguration(output.ChartConfiguration, context) : undefined,
    ConditionalFormatting:
      output.ConditionalFormatting != null
        ? de_PivotTableConditionalFormatting(output.ConditionalFormatting, context)
        : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1PivotTotalOptions
 */
const de_PivotTotalOptions = (output: any, context: __SerdeContext): PivotTotalOptions => {
  return {
    CustomLabel: __expectString(output.CustomLabel),
    MetricHeaderCellStyle:
      output.MetricHeaderCellStyle != null ? de_TableCellStyle(output.MetricHeaderCellStyle, context) : undefined,
    Placement: __expectString(output.Placement),
    ScrollStatus: __expectString(output.ScrollStatus),
    TotalCellStyle: output.TotalCellStyle != null ? de_TableCellStyle(output.TotalCellStyle, context) : undefined,
    TotalsVisibility: __expectString(output.TotalsVisibility),
    ValueCellStyle: output.ValueCellStyle != null ? de_TableCellStyle(output.ValueCellStyle, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1PostgreSqlParameters
 */
const de_PostgreSqlParameters = (output: any, context: __SerdeContext): PostgreSqlParameters => {
  return {
    Database: __expectString(output.Database),
    Host: __expectString(output.Host),
    Port: __expectInt32(output.Port),
  } as any;
};

/**
 * deserializeAws_restJson1PredefinedHierarchy
 */
const de_PredefinedHierarchy = (output: any, context: __SerdeContext): PredefinedHierarchy => {
  return {
    Columns: output.Columns != null ? de_PredefinedHierarchyColumnList(output.Columns, context) : undefined,
    DrillDownFilters:
      output.DrillDownFilters != null ? de_DrillDownFilterList(output.DrillDownFilters, context) : undefined,
    HierarchyId: __expectString(output.HierarchyId),
  } as any;
};

/**
 * deserializeAws_restJson1PredefinedHierarchyColumnList
 */
const de_PredefinedHierarchyColumnList = (output: any, context: __SerdeContext): ColumnIdentifier[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ColumnIdentifier(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1PrestoParameters
 */
const de_PrestoParameters = (output: any, context: __SerdeContext): PrestoParameters => {
  return {
    Catalog: __expectString(output.Catalog),
    Host: __expectString(output.Host),
    Port: __expectInt32(output.Port),
  } as any;
};

/**
 * deserializeAws_restJson1PrincipalList
 */
const de_PrincipalList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ProgressBarOptions
 */
const de_ProgressBarOptions = (output: any, context: __SerdeContext): ProgressBarOptions => {
  return {
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1ProjectedColumnList
 */
const de_ProjectedColumnList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ProjectOperation
 */
const de_ProjectOperation = (output: any, context: __SerdeContext): ProjectOperation => {
  return {
    ProjectedColumns:
      output.ProjectedColumns != null ? de_ProjectedColumnList(output.ProjectedColumns, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1QueueInfo
 */
const de_QueueInfo = (output: any, context: __SerdeContext): QueueInfo => {
  return {
    QueuedIngestion: __expectString(output.QueuedIngestion),
    WaitingOnIngestion: __expectString(output.WaitingOnIngestion),
  } as any;
};

/**
 * deserializeAws_restJson1RadarChartAggregatedFieldWells
 */
const de_RadarChartAggregatedFieldWells = (output: any, context: __SerdeContext): RadarChartAggregatedFieldWells => {
  return {
    Category: output.Category != null ? de_RadarChartCategoryFieldList(output.Category, context) : undefined,
    Color: output.Color != null ? de_RadarChartColorFieldList(output.Color, context) : undefined,
    Values: output.Values != null ? de_RadarChartValuesFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1RadarChartAreaStyleSettings
 */
const de_RadarChartAreaStyleSettings = (output: any, context: __SerdeContext): RadarChartAreaStyleSettings => {
  return {
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1RadarChartCategoryFieldList
 */
const de_RadarChartCategoryFieldList = (output: any, context: __SerdeContext): DimensionField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DimensionField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1RadarChartColorFieldList
 */
const de_RadarChartColorFieldList = (output: any, context: __SerdeContext): DimensionField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DimensionField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1RadarChartConfiguration
 */
const de_RadarChartConfiguration = (output: any, context: __SerdeContext): RadarChartConfiguration => {
  return {
    AlternateBandColorsVisibility: __expectString(output.AlternateBandColorsVisibility),
    AlternateBandEvenColor: __expectString(output.AlternateBandEvenColor),
    AlternateBandOddColor: __expectString(output.AlternateBandOddColor),
    BaseSeriesSettings:
      output.BaseSeriesSettings != null ? de_RadarChartSeriesSettings(output.BaseSeriesSettings, context) : undefined,
    CategoryAxis: output.CategoryAxis != null ? de_AxisDisplayOptions(output.CategoryAxis, context) : undefined,
    CategoryLabelOptions:
      output.CategoryLabelOptions != null ? de_ChartAxisLabelOptions(output.CategoryLabelOptions, context) : undefined,
    ColorAxis: output.ColorAxis != null ? de_AxisDisplayOptions(output.ColorAxis, context) : undefined,
    ColorLabelOptions:
      output.ColorLabelOptions != null ? de_ChartAxisLabelOptions(output.ColorLabelOptions, context) : undefined,
    FieldWells: output.FieldWells != null ? de_RadarChartFieldWells(output.FieldWells, context) : undefined,
    Legend: output.Legend != null ? de_LegendOptions(output.Legend, context) : undefined,
    Shape: __expectString(output.Shape),
    SortConfiguration:
      output.SortConfiguration != null ? de_RadarChartSortConfiguration(output.SortConfiguration, context) : undefined,
    StartAngle: __limitedParseDouble(output.StartAngle),
    VisualPalette: output.VisualPalette != null ? de_VisualPalette(output.VisualPalette, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1RadarChartFieldWells
 */
const de_RadarChartFieldWells = (output: any, context: __SerdeContext): RadarChartFieldWells => {
  return {
    RadarChartAggregatedFieldWells:
      output.RadarChartAggregatedFieldWells != null
        ? de_RadarChartAggregatedFieldWells(output.RadarChartAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1RadarChartSeriesSettings
 */
const de_RadarChartSeriesSettings = (output: any, context: __SerdeContext): RadarChartSeriesSettings => {
  return {
    AreaStyleSettings:
      output.AreaStyleSettings != null ? de_RadarChartAreaStyleSettings(output.AreaStyleSettings, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1RadarChartSortConfiguration
 */
const de_RadarChartSortConfiguration = (output: any, context: __SerdeContext): RadarChartSortConfiguration => {
  return {
    CategoryItemsLimit:
      output.CategoryItemsLimit != null ? de_ItemsLimitConfiguration(output.CategoryItemsLimit, context) : undefined,
    CategorySort: output.CategorySort != null ? de_FieldSortOptionsList(output.CategorySort, context) : undefined,
    ColorItemsLimit:
      output.ColorItemsLimit != null ? de_ItemsLimitConfiguration(output.ColorItemsLimit, context) : undefined,
    ColorSort: output.ColorSort != null ? de_FieldSortOptionsList(output.ColorSort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1RadarChartValuesFieldList
 */
const de_RadarChartValuesFieldList = (output: any, context: __SerdeContext): MeasureField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_MeasureField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1RadarChartVisual
 */
const de_RadarChartVisual = (output: any, context: __SerdeContext): RadarChartVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_RadarChartConfiguration(output.ChartConfiguration, context) : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1RangeEndsLabelType
 */
const de_RangeEndsLabelType = (output: any, context: __SerdeContext): RangeEndsLabelType => {
  return {
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1RdsParameters
 */
const de_RdsParameters = (output: any, context: __SerdeContext): RdsParameters => {
  return {
    Database: __expectString(output.Database),
    InstanceId: __expectString(output.InstanceId),
  } as any;
};

/**
 * deserializeAws_restJson1RedshiftParameters
 */
const de_RedshiftParameters = (output: any, context: __SerdeContext): RedshiftParameters => {
  return {
    ClusterId: __expectString(output.ClusterId),
    Database: __expectString(output.Database),
    Host: __expectString(output.Host),
    Port: __expectInt32(output.Port),
  } as any;
};

/**
 * deserializeAws_restJson1ReferenceLine
 */
const de_ReferenceLine = (output: any, context: __SerdeContext): ReferenceLine => {
  return {
    DataConfiguration:
      output.DataConfiguration != null
        ? de_ReferenceLineDataConfiguration(output.DataConfiguration, context)
        : undefined,
    LabelConfiguration:
      output.LabelConfiguration != null
        ? de_ReferenceLineLabelConfiguration(output.LabelConfiguration, context)
        : undefined,
    Status: __expectString(output.Status),
    StyleConfiguration:
      output.StyleConfiguration != null
        ? de_ReferenceLineStyleConfiguration(output.StyleConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ReferenceLineCustomLabelConfiguration
 */
const de_ReferenceLineCustomLabelConfiguration = (
  output: any,
  context: __SerdeContext
): ReferenceLineCustomLabelConfiguration => {
  return {
    CustomLabel: __expectString(output.CustomLabel),
  } as any;
};

/**
 * deserializeAws_restJson1ReferenceLineDataConfiguration
 */
const de_ReferenceLineDataConfiguration = (output: any, context: __SerdeContext): ReferenceLineDataConfiguration => {
  return {
    AxisBinding: __expectString(output.AxisBinding),
    DynamicConfiguration:
      output.DynamicConfiguration != null
        ? de_ReferenceLineDynamicDataConfiguration(output.DynamicConfiguration, context)
        : undefined,
    StaticConfiguration:
      output.StaticConfiguration != null
        ? de_ReferenceLineStaticDataConfiguration(output.StaticConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ReferenceLineDynamicDataConfiguration
 */
const de_ReferenceLineDynamicDataConfiguration = (
  output: any,
  context: __SerdeContext
): ReferenceLineDynamicDataConfiguration => {
  return {
    Calculation: output.Calculation != null ? de_NumericalAggregationFunction(output.Calculation, context) : undefined,
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    MeasureAggregationFunction:
      output.MeasureAggregationFunction != null
        ? de_AggregationFunction(output.MeasureAggregationFunction, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ReferenceLineLabelConfiguration
 */
const de_ReferenceLineLabelConfiguration = (output: any, context: __SerdeContext): ReferenceLineLabelConfiguration => {
  return {
    CustomLabelConfiguration:
      output.CustomLabelConfiguration != null
        ? de_ReferenceLineCustomLabelConfiguration(output.CustomLabelConfiguration, context)
        : undefined,
    FontColor: __expectString(output.FontColor),
    FontConfiguration:
      output.FontConfiguration != null ? de_FontConfiguration(output.FontConfiguration, context) : undefined,
    HorizontalPosition: __expectString(output.HorizontalPosition),
    ValueLabelConfiguration:
      output.ValueLabelConfiguration != null
        ? de_ReferenceLineValueLabelConfiguration(output.ValueLabelConfiguration, context)
        : undefined,
    VerticalPosition: __expectString(output.VerticalPosition),
  } as any;
};

/**
 * deserializeAws_restJson1ReferenceLineList
 */
const de_ReferenceLineList = (output: any, context: __SerdeContext): ReferenceLine[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ReferenceLine(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ReferenceLineStaticDataConfiguration
 */
const de_ReferenceLineStaticDataConfiguration = (
  output: any,
  context: __SerdeContext
): ReferenceLineStaticDataConfiguration => {
  return {
    Value: __limitedParseDouble(output.Value),
  } as any;
};

/**
 * deserializeAws_restJson1ReferenceLineStyleConfiguration
 */
const de_ReferenceLineStyleConfiguration = (output: any, context: __SerdeContext): ReferenceLineStyleConfiguration => {
  return {
    Color: __expectString(output.Color),
    Pattern: __expectString(output.Pattern),
  } as any;
};

/**
 * deserializeAws_restJson1ReferenceLineValueLabelConfiguration
 */
const de_ReferenceLineValueLabelConfiguration = (
  output: any,
  context: __SerdeContext
): ReferenceLineValueLabelConfiguration => {
  return {
    FormatConfiguration:
      output.FormatConfiguration != null
        ? de_NumericFormatConfiguration(output.FormatConfiguration, context)
        : undefined,
    RelativePosition: __expectString(output.RelativePosition),
  } as any;
};

/**
 * deserializeAws_restJson1RelationalTable
 */
const de_RelationalTable = (output: any, context: __SerdeContext): RelationalTable => {
  return {
    Catalog: __expectString(output.Catalog),
    DataSourceArn: __expectString(output.DataSourceArn),
    InputColumns: output.InputColumns != null ? de_InputColumnList(output.InputColumns, context) : undefined,
    Name: __expectString(output.Name),
    Schema: __expectString(output.Schema),
  } as any;
};

/**
 * deserializeAws_restJson1RelativeDatesFilter
 */
const de_RelativeDatesFilter = (output: any, context: __SerdeContext): RelativeDatesFilter => {
  return {
    AnchorDateConfiguration:
      output.AnchorDateConfiguration != null
        ? de_AnchorDateConfiguration(output.AnchorDateConfiguration, context)
        : undefined,
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    ExcludePeriodConfiguration:
      output.ExcludePeriodConfiguration != null
        ? de_ExcludePeriodConfiguration(output.ExcludePeriodConfiguration, context)
        : undefined,
    FilterId: __expectString(output.FilterId),
    MinimumGranularity: __expectString(output.MinimumGranularity),
    NullOption: __expectString(output.NullOption),
    ParameterName: __expectString(output.ParameterName),
    RelativeDateType: __expectString(output.RelativeDateType),
    RelativeDateValue: __expectInt32(output.RelativeDateValue),
    TimeGranularity: __expectString(output.TimeGranularity),
  } as any;
};

/**
 * deserializeAws_restJson1RelativeDateTimeControlDisplayOptions
 */
const de_RelativeDateTimeControlDisplayOptions = (
  output: any,
  context: __SerdeContext
): RelativeDateTimeControlDisplayOptions => {
  return {
    DateTimeFormat: __expectString(output.DateTimeFormat),
    TitleOptions: output.TitleOptions != null ? de_LabelOptions(output.TitleOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1RenameColumnOperation
 */
const de_RenameColumnOperation = (output: any, context: __SerdeContext): RenameColumnOperation => {
  return {
    ColumnName: __expectString(output.ColumnName),
    NewColumnName: __expectString(output.NewColumnName),
  } as any;
};

/**
 * deserializeAws_restJson1ResourcePermission
 */
const de_ResourcePermission = (output: any, context: __SerdeContext): ResourcePermission => {
  return {
    Actions: output.Actions != null ? de_ActionList(output.Actions, context) : undefined,
    Principal: __expectString(output.Principal),
  } as any;
};

/**
 * deserializeAws_restJson1ResourcePermissionList
 */
const de_ResourcePermissionList = (output: any, context: __SerdeContext): ResourcePermission[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ResourcePermission(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1RollingDateConfiguration
 */
const de_RollingDateConfiguration = (output: any, context: __SerdeContext): RollingDateConfiguration => {
  return {
    DataSetIdentifier: __expectString(output.DataSetIdentifier),
    Expression: __expectString(output.Expression),
  } as any;
};

/**
 * deserializeAws_restJson1RowAlternateColorList
 */
const de_RowAlternateColorList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1RowAlternateColorOptions
 */
const de_RowAlternateColorOptions = (output: any, context: __SerdeContext): RowAlternateColorOptions => {
  return {
    RowAlternateColors:
      output.RowAlternateColors != null ? de_RowAlternateColorList(output.RowAlternateColors, context) : undefined,
    Status: __expectString(output.Status),
  } as any;
};

/**
 * deserializeAws_restJson1RowInfo
 */
const de_RowInfo = (output: any, context: __SerdeContext): RowInfo => {
  return {
    RowsDropped: __expectLong(output.RowsDropped),
    RowsIngested: __expectLong(output.RowsIngested),
    TotalRowsInDataset: __expectLong(output.TotalRowsInDataset),
  } as any;
};

/**
 * deserializeAws_restJson1RowLevelPermissionDataSet
 */
const de_RowLevelPermissionDataSet = (output: any, context: __SerdeContext): RowLevelPermissionDataSet => {
  return {
    Arn: __expectString(output.Arn),
    FormatVersion: __expectString(output.FormatVersion),
    Namespace: __expectString(output.Namespace),
    PermissionPolicy: __expectString(output.PermissionPolicy),
    Status: __expectString(output.Status),
  } as any;
};

/**
 * deserializeAws_restJson1RowLevelPermissionTagConfiguration
 */
const de_RowLevelPermissionTagConfiguration = (
  output: any,
  context: __SerdeContext
): RowLevelPermissionTagConfiguration => {
  return {
    Status: __expectString(output.Status),
    TagRules: output.TagRules != null ? de_RowLevelPermissionTagRuleList(output.TagRules, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1RowLevelPermissionTagRule
 */
const de_RowLevelPermissionTagRule = (output: any, context: __SerdeContext): RowLevelPermissionTagRule => {
  return {
    ColumnName: __expectString(output.ColumnName),
    MatchAllValue: __expectString(output.MatchAllValue),
    TagKey: __expectString(output.TagKey),
    TagMultiValueDelimiter: __expectString(output.TagMultiValueDelimiter),
  } as any;
};

/**
 * deserializeAws_restJson1RowLevelPermissionTagRuleList
 */
const de_RowLevelPermissionTagRuleList = (output: any, context: __SerdeContext): RowLevelPermissionTagRule[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_RowLevelPermissionTagRule(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1RowSortList
 */
const de_RowSortList = (output: any, context: __SerdeContext): FieldSortOptions[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_FieldSortOptions(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1S3Parameters
 */
const de_S3Parameters = (output: any, context: __SerdeContext): S3Parameters => {
  return {
    ManifestFileLocation:
      output.ManifestFileLocation != null ? de_ManifestFileLocation(output.ManifestFileLocation, context) : undefined,
    RoleArn: __expectString(output.RoleArn),
  } as any;
};

/**
 * deserializeAws_restJson1S3Source
 */
const de_S3Source = (output: any, context: __SerdeContext): S3Source => {
  return {
    DataSourceArn: __expectString(output.DataSourceArn),
    InputColumns: output.InputColumns != null ? de_InputColumnList(output.InputColumns, context) : undefined,
    UploadSettings: output.UploadSettings != null ? de_UploadSettings(output.UploadSettings, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SameSheetTargetVisualConfiguration
 */
const de_SameSheetTargetVisualConfiguration = (
  output: any,
  context: __SerdeContext
): SameSheetTargetVisualConfiguration => {
  return {
    TargetVisualOptions: __expectString(output.TargetVisualOptions),
    TargetVisuals: output.TargetVisuals != null ? de_TargetVisualList(output.TargetVisuals, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SankeyDiagramAggregatedFieldWells
 */
const de_SankeyDiagramAggregatedFieldWells = (
  output: any,
  context: __SerdeContext
): SankeyDiagramAggregatedFieldWells => {
  return {
    Destination: output.Destination != null ? de_DimensionFieldList(output.Destination, context) : undefined,
    Source: output.Source != null ? de_DimensionFieldList(output.Source, context) : undefined,
    Weight: output.Weight != null ? de_MeasureFieldList(output.Weight, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SankeyDiagramChartConfiguration
 */
const de_SankeyDiagramChartConfiguration = (output: any, context: __SerdeContext): SankeyDiagramChartConfiguration => {
  return {
    DataLabels: output.DataLabels != null ? de_DataLabelOptions(output.DataLabels, context) : undefined,
    FieldWells: output.FieldWells != null ? de_SankeyDiagramFieldWells(output.FieldWells, context) : undefined,
    SortConfiguration:
      output.SortConfiguration != null
        ? de_SankeyDiagramSortConfiguration(output.SortConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SankeyDiagramFieldWells
 */
const de_SankeyDiagramFieldWells = (output: any, context: __SerdeContext): SankeyDiagramFieldWells => {
  return {
    SankeyDiagramAggregatedFieldWells:
      output.SankeyDiagramAggregatedFieldWells != null
        ? de_SankeyDiagramAggregatedFieldWells(output.SankeyDiagramAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SankeyDiagramSortConfiguration
 */
const de_SankeyDiagramSortConfiguration = (output: any, context: __SerdeContext): SankeyDiagramSortConfiguration => {
  return {
    DestinationItemsLimit:
      output.DestinationItemsLimit != null
        ? de_ItemsLimitConfiguration(output.DestinationItemsLimit, context)
        : undefined,
    SourceItemsLimit:
      output.SourceItemsLimit != null ? de_ItemsLimitConfiguration(output.SourceItemsLimit, context) : undefined,
    WeightSort: output.WeightSort != null ? de_FieldSortOptionsList(output.WeightSort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SankeyDiagramVisual
 */
const de_SankeyDiagramVisual = (output: any, context: __SerdeContext): SankeyDiagramVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null
        ? de_SankeyDiagramChartConfiguration(output.ChartConfiguration, context)
        : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1ScatterPlotCategoricallyAggregatedFieldWells
 */
const de_ScatterPlotCategoricallyAggregatedFieldWells = (
  output: any,
  context: __SerdeContext
): ScatterPlotCategoricallyAggregatedFieldWells => {
  return {
    Category: output.Category != null ? de_DimensionFieldList(output.Category, context) : undefined,
    Size: output.Size != null ? de_MeasureFieldList(output.Size, context) : undefined,
    XAxis: output.XAxis != null ? de_MeasureFieldList(output.XAxis, context) : undefined,
    YAxis: output.YAxis != null ? de_MeasureFieldList(output.YAxis, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ScatterPlotConfiguration
 */
const de_ScatterPlotConfiguration = (output: any, context: __SerdeContext): ScatterPlotConfiguration => {
  return {
    DataLabels: output.DataLabels != null ? de_DataLabelOptions(output.DataLabels, context) : undefined,
    FieldWells: output.FieldWells != null ? de_ScatterPlotFieldWells(output.FieldWells, context) : undefined,
    Legend: output.Legend != null ? de_LegendOptions(output.Legend, context) : undefined,
    Tooltip: output.Tooltip != null ? de_TooltipOptions(output.Tooltip, context) : undefined,
    VisualPalette: output.VisualPalette != null ? de_VisualPalette(output.VisualPalette, context) : undefined,
    XAxisDisplayOptions:
      output.XAxisDisplayOptions != null ? de_AxisDisplayOptions(output.XAxisDisplayOptions, context) : undefined,
    XAxisLabelOptions:
      output.XAxisLabelOptions != null ? de_ChartAxisLabelOptions(output.XAxisLabelOptions, context) : undefined,
    YAxisDisplayOptions:
      output.YAxisDisplayOptions != null ? de_AxisDisplayOptions(output.YAxisDisplayOptions, context) : undefined,
    YAxisLabelOptions:
      output.YAxisLabelOptions != null ? de_ChartAxisLabelOptions(output.YAxisLabelOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ScatterPlotFieldWells
 */
const de_ScatterPlotFieldWells = (output: any, context: __SerdeContext): ScatterPlotFieldWells => {
  return {
    ScatterPlotCategoricallyAggregatedFieldWells:
      output.ScatterPlotCategoricallyAggregatedFieldWells != null
        ? de_ScatterPlotCategoricallyAggregatedFieldWells(output.ScatterPlotCategoricallyAggregatedFieldWells, context)
        : undefined,
    ScatterPlotUnaggregatedFieldWells:
      output.ScatterPlotUnaggregatedFieldWells != null
        ? de_ScatterPlotUnaggregatedFieldWells(output.ScatterPlotUnaggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ScatterPlotUnaggregatedFieldWells
 */
const de_ScatterPlotUnaggregatedFieldWells = (
  output: any,
  context: __SerdeContext
): ScatterPlotUnaggregatedFieldWells => {
  return {
    Size: output.Size != null ? de_MeasureFieldList(output.Size, context) : undefined,
    XAxis: output.XAxis != null ? de_DimensionFieldList(output.XAxis, context) : undefined,
    YAxis: output.YAxis != null ? de_DimensionFieldList(output.YAxis, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ScatterPlotVisual
 */
const de_ScatterPlotVisual = (output: any, context: __SerdeContext): ScatterPlotVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_ScatterPlotConfiguration(output.ChartConfiguration, context) : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1ScrollBarOptions
 */
const de_ScrollBarOptions = (output: any, context: __SerdeContext): ScrollBarOptions => {
  return {
    Visibility: __expectString(output.Visibility),
    VisibleRange: output.VisibleRange != null ? de_VisibleRangeOptions(output.VisibleRange, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SecondaryValueOptions
 */
const de_SecondaryValueOptions = (output: any, context: __SerdeContext): SecondaryValueOptions => {
  return {
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1SectionAfterPageBreak
 */
const de_SectionAfterPageBreak = (output: any, context: __SerdeContext): SectionAfterPageBreak => {
  return {
    Status: __expectString(output.Status),
  } as any;
};

/**
 * deserializeAws_restJson1SectionBasedLayoutCanvasSizeOptions
 */
const de_SectionBasedLayoutCanvasSizeOptions = (
  output: any,
  context: __SerdeContext
): SectionBasedLayoutCanvasSizeOptions => {
  return {
    PaperCanvasSizeOptions:
      output.PaperCanvasSizeOptions != null
        ? de_SectionBasedLayoutPaperCanvasSizeOptions(output.PaperCanvasSizeOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SectionBasedLayoutConfiguration
 */
const de_SectionBasedLayoutConfiguration = (output: any, context: __SerdeContext): SectionBasedLayoutConfiguration => {
  return {
    BodySections:
      output.BodySections != null ? de_BodySectionConfigurationList(output.BodySections, context) : undefined,
    CanvasSizeOptions:
      output.CanvasSizeOptions != null
        ? de_SectionBasedLayoutCanvasSizeOptions(output.CanvasSizeOptions, context)
        : undefined,
    FooterSections:
      output.FooterSections != null
        ? de_HeaderFooterSectionConfigurationList(output.FooterSections, context)
        : undefined,
    HeaderSections:
      output.HeaderSections != null
        ? de_HeaderFooterSectionConfigurationList(output.HeaderSections, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SectionBasedLayoutPaperCanvasSizeOptions
 */
const de_SectionBasedLayoutPaperCanvasSizeOptions = (
  output: any,
  context: __SerdeContext
): SectionBasedLayoutPaperCanvasSizeOptions => {
  return {
    PaperMargin: output.PaperMargin != null ? de_Spacing(output.PaperMargin, context) : undefined,
    PaperOrientation: __expectString(output.PaperOrientation),
    PaperSize: __expectString(output.PaperSize),
  } as any;
};

/**
 * deserializeAws_restJson1SectionLayoutConfiguration
 */
const de_SectionLayoutConfiguration = (output: any, context: __SerdeContext): SectionLayoutConfiguration => {
  return {
    FreeFormLayout:
      output.FreeFormLayout != null ? de_FreeFormSectionLayoutConfiguration(output.FreeFormLayout, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SectionPageBreakConfiguration
 */
const de_SectionPageBreakConfiguration = (output: any, context: __SerdeContext): SectionPageBreakConfiguration => {
  return {
    After: output.After != null ? de_SectionAfterPageBreak(output.After, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SectionStyle
 */
const de_SectionStyle = (output: any, context: __SerdeContext): SectionStyle => {
  return {
    Height: __expectString(output.Height),
    Padding: output.Padding != null ? de_Spacing(output.Padding, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SelectedFieldList
 */
const de_SelectedFieldList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1SelectedSheetsFilterScopeConfiguration
 */
const de_SelectedSheetsFilterScopeConfiguration = (
  output: any,
  context: __SerdeContext
): SelectedSheetsFilterScopeConfiguration => {
  return {
    SheetVisualScopingConfigurations:
      output.SheetVisualScopingConfigurations != null
        ? de_SheetVisualScopingConfigurations(output.SheetVisualScopingConfigurations, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SeriesItem
 */
const de_SeriesItem = (output: any, context: __SerdeContext): SeriesItem => {
  return {
    DataFieldSeriesItem:
      output.DataFieldSeriesItem != null ? de_DataFieldSeriesItem(output.DataFieldSeriesItem, context) : undefined,
    FieldSeriesItem: output.FieldSeriesItem != null ? de_FieldSeriesItem(output.FieldSeriesItem, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SeriesItemList
 */
const de_SeriesItemList = (output: any, context: __SerdeContext): SeriesItem[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_SeriesItem(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ServiceNowParameters
 */
const de_ServiceNowParameters = (output: any, context: __SerdeContext): ServiceNowParameters => {
  return {
    SiteBaseUrl: __expectString(output.SiteBaseUrl),
  } as any;
};

/**
 * deserializeAws_restJson1SetParameterValueConfiguration
 */
const de_SetParameterValueConfiguration = (output: any, context: __SerdeContext): SetParameterValueConfiguration => {
  return {
    DestinationParameterName: __expectString(output.DestinationParameterName),
    Value: output.Value != null ? de_DestinationParameterValueConfiguration(output.Value, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SetParameterValueConfigurationList
 */
const de_SetParameterValueConfigurationList = (
  output: any,
  context: __SerdeContext
): SetParameterValueConfiguration[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_SetParameterValueConfiguration(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ShapeConditionalFormat
 */
const de_ShapeConditionalFormat = (output: any, context: __SerdeContext): ShapeConditionalFormat => {
  return {
    BackgroundColor:
      output.BackgroundColor != null ? de_ConditionalFormattingColor(output.BackgroundColor, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1Sheet
 */
const de_Sheet = (output: any, context: __SerdeContext): Sheet => {
  return {
    Name: __expectString(output.Name),
    SheetId: __expectString(output.SheetId),
  } as any;
};

/**
 * deserializeAws_restJson1SheetControlLayout
 */
const de_SheetControlLayout = (output: any, context: __SerdeContext): SheetControlLayout => {
  return {
    Configuration:
      output.Configuration != null ? de_SheetControlLayoutConfiguration(output.Configuration, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SheetControlLayoutConfiguration
 */
const de_SheetControlLayoutConfiguration = (output: any, context: __SerdeContext): SheetControlLayoutConfiguration => {
  return {
    GridLayout: output.GridLayout != null ? de_GridLayoutConfiguration(output.GridLayout, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SheetControlLayoutList
 */
const de_SheetControlLayoutList = (output: any, context: __SerdeContext): SheetControlLayout[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_SheetControlLayout(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1SheetControlsOption
 */
const de_SheetControlsOption = (output: any, context: __SerdeContext): SheetControlsOption => {
  return {
    VisibilityState: __expectString(output.VisibilityState),
  } as any;
};

/**
 * deserializeAws_restJson1SheetDefinition
 */
const de_SheetDefinition = (output: any, context: __SerdeContext): SheetDefinition => {
  return {
    ContentType: __expectString(output.ContentType),
    Description: __expectString(output.Description),
    FilterControls: output.FilterControls != null ? de_FilterControlList(output.FilterControls, context) : undefined,
    Layouts: output.Layouts != null ? de_LayoutList(output.Layouts, context) : undefined,
    Name: __expectString(output.Name),
    ParameterControls:
      output.ParameterControls != null ? de_ParameterControlList(output.ParameterControls, context) : undefined,
    SheetControlLayouts:
      output.SheetControlLayouts != null ? de_SheetControlLayoutList(output.SheetControlLayouts, context) : undefined,
    SheetId: __expectString(output.SheetId),
    TextBoxes: output.TextBoxes != null ? de_SheetTextBoxList(output.TextBoxes, context) : undefined,
    Title: __expectString(output.Title),
    Visuals: output.Visuals != null ? de_VisualList(output.Visuals, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SheetDefinitionList
 */
const de_SheetDefinitionList = (output: any, context: __SerdeContext): SheetDefinition[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_SheetDefinition(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1SheetElementConfigurationOverrides
 */
const de_SheetElementConfigurationOverrides = (
  output: any,
  context: __SerdeContext
): SheetElementConfigurationOverrides => {
  return {
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1SheetElementRenderingRule
 */
const de_SheetElementRenderingRule = (output: any, context: __SerdeContext): SheetElementRenderingRule => {
  return {
    ConfigurationOverrides:
      output.ConfigurationOverrides != null
        ? de_SheetElementConfigurationOverrides(output.ConfigurationOverrides, context)
        : undefined,
    Expression: __expectString(output.Expression),
  } as any;
};

/**
 * deserializeAws_restJson1SheetElementRenderingRuleList
 */
const de_SheetElementRenderingRuleList = (output: any, context: __SerdeContext): SheetElementRenderingRule[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_SheetElementRenderingRule(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1SheetLayoutElementMaximizationOption
 */
const de_SheetLayoutElementMaximizationOption = (
  output: any,
  context: __SerdeContext
): SheetLayoutElementMaximizationOption => {
  return {
    AvailabilityStatus: __expectString(output.AvailabilityStatus),
  } as any;
};

/**
 * deserializeAws_restJson1SheetList
 */
const de_SheetList = (output: any, context: __SerdeContext): Sheet[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_Sheet(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1SheetStyle
 */
const de_SheetStyle = (output: any, context: __SerdeContext): SheetStyle => {
  return {
    Tile: output.Tile != null ? de_TileStyle(output.Tile, context) : undefined,
    TileLayout: output.TileLayout != null ? de_TileLayoutStyle(output.TileLayout, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SheetTextBox
 */
const de_SheetTextBox = (output: any, context: __SerdeContext): SheetTextBox => {
  return {
    Content: __expectString(output.Content),
    SheetTextBoxId: __expectString(output.SheetTextBoxId),
  } as any;
};

/**
 * deserializeAws_restJson1SheetTextBoxList
 */
const de_SheetTextBoxList = (output: any, context: __SerdeContext): SheetTextBox[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_SheetTextBox(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1SheetVisualScopingConfiguration
 */
const de_SheetVisualScopingConfiguration = (output: any, context: __SerdeContext): SheetVisualScopingConfiguration => {
  return {
    Scope: __expectString(output.Scope),
    SheetId: __expectString(output.SheetId),
    VisualIds: output.VisualIds != null ? de_FilteredVisualsList(output.VisualIds, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SheetVisualScopingConfigurations
 */
const de_SheetVisualScopingConfigurations = (
  output: any,
  context: __SerdeContext
): SheetVisualScopingConfiguration[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_SheetVisualScopingConfiguration(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ShortFormatText
 */
const de_ShortFormatText = (output: any, context: __SerdeContext): ShortFormatText => {
  return {
    PlainText: __expectString(output.PlainText),
    RichText: __expectString(output.RichText),
  } as any;
};

/**
 * deserializeAws_restJson1SignupResponse
 */
const de_SignupResponse = (output: any, context: __SerdeContext): SignupResponse => {
  return {
    IAMUser: __expectBoolean(output.IAMUser),
    accountName: __expectString(output.accountName),
    directoryType: __expectString(output.directoryType),
    userLoginName: __expectString(output.userLoginName),
  } as any;
};

/**
 * deserializeAws_restJson1SimpleClusterMarker
 */
const de_SimpleClusterMarker = (output: any, context: __SerdeContext): SimpleClusterMarker => {
  return {
    Color: __expectString(output.Color),
  } as any;
};

/**
 * deserializeAws_restJson1SliderControlDisplayOptions
 */
const de_SliderControlDisplayOptions = (output: any, context: __SerdeContext): SliderControlDisplayOptions => {
  return {
    TitleOptions: output.TitleOptions != null ? de_LabelOptions(output.TitleOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SmallMultiplesDimensionFieldList
 */
const de_SmallMultiplesDimensionFieldList = (output: any, context: __SerdeContext): DimensionField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DimensionField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1SmallMultiplesOptions
 */
const de_SmallMultiplesOptions = (output: any, context: __SerdeContext): SmallMultiplesOptions => {
  return {
    MaxVisibleColumns: __expectLong(output.MaxVisibleColumns),
    MaxVisibleRows: __expectLong(output.MaxVisibleRows),
    PanelConfiguration:
      output.PanelConfiguration != null ? de_PanelConfiguration(output.PanelConfiguration, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1SnowflakeParameters
 */
const de_SnowflakeParameters = (output: any, context: __SerdeContext): SnowflakeParameters => {
  return {
    Database: __expectString(output.Database),
    Host: __expectString(output.Host),
    Warehouse: __expectString(output.Warehouse),
  } as any;
};

/**
 * deserializeAws_restJson1Spacing
 */
const de_Spacing = (output: any, context: __SerdeContext): Spacing => {
  return {
    Bottom: __expectString(output.Bottom),
    Left: __expectString(output.Left),
    Right: __expectString(output.Right),
    Top: __expectString(output.Top),
  } as any;
};

/**
 * deserializeAws_restJson1SparkParameters
 */
const de_SparkParameters = (output: any, context: __SerdeContext): SparkParameters => {
  return {
    Host: __expectString(output.Host),
    Port: __expectInt32(output.Port),
  } as any;
};

/**
 * deserializeAws_restJson1SqlServerParameters
 */
const de_SqlServerParameters = (output: any, context: __SerdeContext): SqlServerParameters => {
  return {
    Database: __expectString(output.Database),
    Host: __expectString(output.Host),
    Port: __expectInt32(output.Port),
  } as any;
};

/**
 * deserializeAws_restJson1SslProperties
 */
const de_SslProperties = (output: any, context: __SerdeContext): SslProperties => {
  return {
    DisableSsl: __expectBoolean(output.DisableSsl),
  } as any;
};

/**
 * deserializeAws_restJson1StringDefaultValueList
 */
const de_StringDefaultValueList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1StringDefaultValues
 */
const de_StringDefaultValues = (output: any, context: __SerdeContext): StringDefaultValues => {
  return {
    DynamicValue: output.DynamicValue != null ? de_DynamicDefaultValue(output.DynamicValue, context) : undefined,
    StaticValues: output.StaticValues != null ? de_StringDefaultValueList(output.StaticValues, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1StringFormatConfiguration
 */
const de_StringFormatConfiguration = (output: any, context: __SerdeContext): StringFormatConfiguration => {
  return {
    NullValueFormatConfiguration:
      output.NullValueFormatConfiguration != null
        ? de_NullValueFormatConfiguration(output.NullValueFormatConfiguration, context)
        : undefined,
    NumericFormatConfiguration:
      output.NumericFormatConfiguration != null
        ? de_NumericFormatConfiguration(output.NumericFormatConfiguration, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1StringParameterDeclaration
 */
const de_StringParameterDeclaration = (output: any, context: __SerdeContext): StringParameterDeclaration => {
  return {
    DefaultValues: output.DefaultValues != null ? de_StringDefaultValues(output.DefaultValues, context) : undefined,
    Name: __expectString(output.Name),
    ParameterValueType: __expectString(output.ParameterValueType),
    ValueWhenUnset:
      output.ValueWhenUnset != null ? de_StringValueWhenUnsetConfiguration(output.ValueWhenUnset, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1StringValueWhenUnsetConfiguration
 */
const de_StringValueWhenUnsetConfiguration = (
  output: any,
  context: __SerdeContext
): StringValueWhenUnsetConfiguration => {
  return {
    CustomValue: __expectString(output.CustomValue),
    ValueWhenUnsetOption: __expectString(output.ValueWhenUnsetOption),
  } as any;
};

/**
 * deserializeAws_restJson1SubtotalOptions
 */
const de_SubtotalOptions = (output: any, context: __SerdeContext): SubtotalOptions => {
  return {
    CustomLabel: __expectString(output.CustomLabel),
    FieldLevel: __expectString(output.FieldLevel),
    FieldLevelOptions:
      output.FieldLevelOptions != null
        ? de_PivotTableFieldSubtotalOptionsList(output.FieldLevelOptions, context)
        : undefined,
    MetricHeaderCellStyle:
      output.MetricHeaderCellStyle != null ? de_TableCellStyle(output.MetricHeaderCellStyle, context) : undefined,
    TotalCellStyle: output.TotalCellStyle != null ? de_TableCellStyle(output.TotalCellStyle, context) : undefined,
    TotalsVisibility: __expectString(output.TotalsVisibility),
    ValueCellStyle: output.ValueCellStyle != null ? de_TableCellStyle(output.ValueCellStyle, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableAggregatedFieldWells
 */
const de_TableAggregatedFieldWells = (output: any, context: __SerdeContext): TableAggregatedFieldWells => {
  return {
    GroupBy: output.GroupBy != null ? de_DimensionFieldList(output.GroupBy, context) : undefined,
    Values: output.Values != null ? de_MeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableBorderOptions
 */
const de_TableBorderOptions = (output: any, context: __SerdeContext): TableBorderOptions => {
  return {
    Color: __expectString(output.Color),
    Style: __expectString(output.Style),
    Thickness: __expectInt32(output.Thickness),
  } as any;
};

/**
 * deserializeAws_restJson1TableCellConditionalFormatting
 */
const de_TableCellConditionalFormatting = (output: any, context: __SerdeContext): TableCellConditionalFormatting => {
  return {
    FieldId: __expectString(output.FieldId),
    TextFormat: output.TextFormat != null ? de_TextConditionalFormat(output.TextFormat, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableCellImageSizingConfiguration
 */
const de_TableCellImageSizingConfiguration = (
  output: any,
  context: __SerdeContext
): TableCellImageSizingConfiguration => {
  return {
    TableCellImageScalingConfiguration: __expectString(output.TableCellImageScalingConfiguration),
  } as any;
};

/**
 * deserializeAws_restJson1TableCellStyle
 */
const de_TableCellStyle = (output: any, context: __SerdeContext): TableCellStyle => {
  return {
    BackgroundColor: __expectString(output.BackgroundColor),
    Border: output.Border != null ? de_GlobalTableBorderOptions(output.Border, context) : undefined,
    FontConfiguration:
      output.FontConfiguration != null ? de_FontConfiguration(output.FontConfiguration, context) : undefined,
    Height: __expectInt32(output.Height),
    HorizontalTextAlignment: __expectString(output.HorizontalTextAlignment),
    TextWrap: __expectString(output.TextWrap),
    VerticalTextAlignment: __expectString(output.VerticalTextAlignment),
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1TableConditionalFormatting
 */
const de_TableConditionalFormatting = (output: any, context: __SerdeContext): TableConditionalFormatting => {
  return {
    ConditionalFormattingOptions:
      output.ConditionalFormattingOptions != null
        ? de_TableConditionalFormattingOptionList(output.ConditionalFormattingOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableConditionalFormattingOption
 */
const de_TableConditionalFormattingOption = (
  output: any,
  context: __SerdeContext
): TableConditionalFormattingOption => {
  return {
    Cell: output.Cell != null ? de_TableCellConditionalFormatting(output.Cell, context) : undefined,
    Row: output.Row != null ? de_TableRowConditionalFormatting(output.Row, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableConditionalFormattingOptionList
 */
const de_TableConditionalFormattingOptionList = (
  output: any,
  context: __SerdeContext
): TableConditionalFormattingOption[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_TableConditionalFormattingOption(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1TableConfiguration
 */
const de_TableConfiguration = (output: any, context: __SerdeContext): TableConfiguration => {
  return {
    FieldOptions: output.FieldOptions != null ? de_TableFieldOptions(output.FieldOptions, context) : undefined,
    FieldWells: output.FieldWells != null ? de_TableFieldWells(output.FieldWells, context) : undefined,
    PaginatedReportOptions:
      output.PaginatedReportOptions != null
        ? de_TablePaginatedReportOptions(output.PaginatedReportOptions, context)
        : undefined,
    SortConfiguration:
      output.SortConfiguration != null ? de_TableSortConfiguration(output.SortConfiguration, context) : undefined,
    TableInlineVisualizations:
      output.TableInlineVisualizations != null
        ? de_TableInlineVisualizationList(output.TableInlineVisualizations, context)
        : undefined,
    TableOptions: output.TableOptions != null ? de_TableOptions(output.TableOptions, context) : undefined,
    TotalOptions: output.TotalOptions != null ? de_TotalOptions(output.TotalOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableFieldCustomIconContent
 */
const de_TableFieldCustomIconContent = (output: any, context: __SerdeContext): TableFieldCustomIconContent => {
  return {
    Icon: __expectString(output.Icon),
  } as any;
};

/**
 * deserializeAws_restJson1TableFieldCustomTextContent
 */
const de_TableFieldCustomTextContent = (output: any, context: __SerdeContext): TableFieldCustomTextContent => {
  return {
    FontConfiguration:
      output.FontConfiguration != null ? de_FontConfiguration(output.FontConfiguration, context) : undefined,
    Value: __expectString(output.Value),
  } as any;
};

/**
 * deserializeAws_restJson1TableFieldImageConfiguration
 */
const de_TableFieldImageConfiguration = (output: any, context: __SerdeContext): TableFieldImageConfiguration => {
  return {
    SizingOptions:
      output.SizingOptions != null ? de_TableCellImageSizingConfiguration(output.SizingOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableFieldLinkConfiguration
 */
const de_TableFieldLinkConfiguration = (output: any, context: __SerdeContext): TableFieldLinkConfiguration => {
  return {
    Content: output.Content != null ? de_TableFieldLinkContentConfiguration(output.Content, context) : undefined,
    Target: __expectString(output.Target),
  } as any;
};

/**
 * deserializeAws_restJson1TableFieldLinkContentConfiguration
 */
const de_TableFieldLinkContentConfiguration = (
  output: any,
  context: __SerdeContext
): TableFieldLinkContentConfiguration => {
  return {
    CustomIconContent:
      output.CustomIconContent != null ? de_TableFieldCustomIconContent(output.CustomIconContent, context) : undefined,
    CustomTextContent:
      output.CustomTextContent != null ? de_TableFieldCustomTextContent(output.CustomTextContent, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableFieldOption
 */
const de_TableFieldOption = (output: any, context: __SerdeContext): TableFieldOption => {
  return {
    CustomLabel: __expectString(output.CustomLabel),
    FieldId: __expectString(output.FieldId),
    URLStyling: output.URLStyling != null ? de_TableFieldURLConfiguration(output.URLStyling, context) : undefined,
    Visibility: __expectString(output.Visibility),
    Width: __expectString(output.Width),
  } as any;
};

/**
 * deserializeAws_restJson1TableFieldOptionList
 */
const de_TableFieldOptionList = (output: any, context: __SerdeContext): TableFieldOption[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_TableFieldOption(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1TableFieldOptions
 */
const de_TableFieldOptions = (output: any, context: __SerdeContext): TableFieldOptions => {
  return {
    Order: output.Order != null ? de_FieldOrderList(output.Order, context) : undefined,
    SelectedFieldOptions:
      output.SelectedFieldOptions != null ? de_TableFieldOptionList(output.SelectedFieldOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableFieldURLConfiguration
 */
const de_TableFieldURLConfiguration = (output: any, context: __SerdeContext): TableFieldURLConfiguration => {
  return {
    ImageConfiguration:
      output.ImageConfiguration != null
        ? de_TableFieldImageConfiguration(output.ImageConfiguration, context)
        : undefined,
    LinkConfiguration:
      output.LinkConfiguration != null ? de_TableFieldLinkConfiguration(output.LinkConfiguration, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableFieldWells
 */
const de_TableFieldWells = (output: any, context: __SerdeContext): TableFieldWells => {
  return {
    TableAggregatedFieldWells:
      output.TableAggregatedFieldWells != null
        ? de_TableAggregatedFieldWells(output.TableAggregatedFieldWells, context)
        : undefined,
    TableUnaggregatedFieldWells:
      output.TableUnaggregatedFieldWells != null
        ? de_TableUnaggregatedFieldWells(output.TableUnaggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableInlineVisualization
 */
const de_TableInlineVisualization = (output: any, context: __SerdeContext): TableInlineVisualization => {
  return {
    DataBars: output.DataBars != null ? de_DataBarsOptions(output.DataBars, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableInlineVisualizationList
 */
const de_TableInlineVisualizationList = (output: any, context: __SerdeContext): TableInlineVisualization[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_TableInlineVisualization(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1TableOptions
 */
const de_TableOptions = (output: any, context: __SerdeContext): TableOptions => {
  return {
    CellStyle: output.CellStyle != null ? de_TableCellStyle(output.CellStyle, context) : undefined,
    HeaderStyle: output.HeaderStyle != null ? de_TableCellStyle(output.HeaderStyle, context) : undefined,
    Orientation: __expectString(output.Orientation),
    RowAlternateColorOptions:
      output.RowAlternateColorOptions != null
        ? de_RowAlternateColorOptions(output.RowAlternateColorOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TablePaginatedReportOptions
 */
const de_TablePaginatedReportOptions = (output: any, context: __SerdeContext): TablePaginatedReportOptions => {
  return {
    OverflowColumnHeaderVisibility: __expectString(output.OverflowColumnHeaderVisibility),
    VerticalOverflowVisibility: __expectString(output.VerticalOverflowVisibility),
  } as any;
};

/**
 * deserializeAws_restJson1TableRowConditionalFormatting
 */
const de_TableRowConditionalFormatting = (output: any, context: __SerdeContext): TableRowConditionalFormatting => {
  return {
    BackgroundColor:
      output.BackgroundColor != null ? de_ConditionalFormattingColor(output.BackgroundColor, context) : undefined,
    TextColor: output.TextColor != null ? de_ConditionalFormattingColor(output.TextColor, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableSideBorderOptions
 */
const de_TableSideBorderOptions = (output: any, context: __SerdeContext): TableSideBorderOptions => {
  return {
    Bottom: output.Bottom != null ? de_TableBorderOptions(output.Bottom, context) : undefined,
    InnerHorizontal:
      output.InnerHorizontal != null ? de_TableBorderOptions(output.InnerHorizontal, context) : undefined,
    InnerVertical: output.InnerVertical != null ? de_TableBorderOptions(output.InnerVertical, context) : undefined,
    Left: output.Left != null ? de_TableBorderOptions(output.Left, context) : undefined,
    Right: output.Right != null ? de_TableBorderOptions(output.Right, context) : undefined,
    Top: output.Top != null ? de_TableBorderOptions(output.Top, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableSortConfiguration
 */
const de_TableSortConfiguration = (output: any, context: __SerdeContext): TableSortConfiguration => {
  return {
    PaginationConfiguration:
      output.PaginationConfiguration != null
        ? de_PaginationConfiguration(output.PaginationConfiguration, context)
        : undefined,
    RowSort: output.RowSort != null ? de_RowSortList(output.RowSort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableUnaggregatedFieldWells
 */
const de_TableUnaggregatedFieldWells = (output: any, context: __SerdeContext): TableUnaggregatedFieldWells => {
  return {
    Values: output.Values != null ? de_UnaggregatedFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TableVisual
 */
const de_TableVisual = (output: any, context: __SerdeContext): TableVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_TableConfiguration(output.ChartConfiguration, context) : undefined,
    ConditionalFormatting:
      output.ConditionalFormatting != null
        ? de_TableConditionalFormatting(output.ConditionalFormatting, context)
        : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1Tag
 */
const de_Tag = (output: any, context: __SerdeContext): Tag => {
  return {
    Key: __expectString(output.Key),
    Value: __expectString(output.Value),
  } as any;
};

/**
 * deserializeAws_restJson1TagColumnOperation
 */
const de_TagColumnOperation = (output: any, context: __SerdeContext): TagColumnOperation => {
  return {
    ColumnName: __expectString(output.ColumnName),
    Tags: output.Tags != null ? de_ColumnTagList(output.Tags, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TagList
 */
const de_TagList = (output: any, context: __SerdeContext): Tag[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_Tag(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1TargetVisualList
 */
const de_TargetVisualList = (output: any, context: __SerdeContext): string[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return __expectString(entry) as any;
    });
  return retVal;
};

/**
 * deserializeAws_restJson1Template
 */
const de_Template = (output: any, context: __SerdeContext): Template => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    Name: __expectString(output.Name),
    TemplateId: __expectString(output.TemplateId),
    Version: output.Version != null ? de_TemplateVersion(output.Version, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TemplateAlias
 */
const de_TemplateAlias = (output: any, context: __SerdeContext): TemplateAlias => {
  return {
    AliasName: __expectString(output.AliasName),
    Arn: __expectString(output.Arn),
    TemplateVersionNumber: __expectLong(output.TemplateVersionNumber),
  } as any;
};

/**
 * deserializeAws_restJson1TemplateAliasList
 */
const de_TemplateAliasList = (output: any, context: __SerdeContext): TemplateAlias[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_TemplateAlias(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1TemplateError
 */
const de_TemplateError = (output: any, context: __SerdeContext): TemplateError => {
  return {
    Message: __expectString(output.Message),
    Type: __expectString(output.Type),
    ViolatedEntities: output.ViolatedEntities != null ? de_EntityList(output.ViolatedEntities, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TemplateErrorList
 */
const de_TemplateErrorList = (output: any, context: __SerdeContext): TemplateError[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_TemplateError(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1TemplateSummary
 */
const de_TemplateSummary = (output: any, context: __SerdeContext): TemplateSummary => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    LatestVersionNumber: __expectLong(output.LatestVersionNumber),
    Name: __expectString(output.Name),
    TemplateId: __expectString(output.TemplateId),
  } as any;
};

/**
 * deserializeAws_restJson1TemplateSummaryList
 */
const de_TemplateSummaryList = (output: any, context: __SerdeContext): TemplateSummary[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_TemplateSummary(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1TemplateVersion
 */
const de_TemplateVersion = (output: any, context: __SerdeContext): TemplateVersion => {
  return {
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    DataSetConfigurations:
      output.DataSetConfigurations != null
        ? de_DataSetConfigurationList(output.DataSetConfigurations, context)
        : undefined,
    Description: __expectString(output.Description),
    Errors: output.Errors != null ? de_TemplateErrorList(output.Errors, context) : undefined,
    Sheets: output.Sheets != null ? de_SheetList(output.Sheets, context) : undefined,
    SourceEntityArn: __expectString(output.SourceEntityArn),
    Status: __expectString(output.Status),
    ThemeArn: __expectString(output.ThemeArn),
    VersionNumber: __expectLong(output.VersionNumber),
  } as any;
};

/**
 * deserializeAws_restJson1TemplateVersionDefinition
 */
const de_TemplateVersionDefinition = (output: any, context: __SerdeContext): TemplateVersionDefinition => {
  return {
    AnalysisDefaults:
      output.AnalysisDefaults != null ? de_AnalysisDefaults(output.AnalysisDefaults, context) : undefined,
    CalculatedFields:
      output.CalculatedFields != null ? de_CalculatedFields(output.CalculatedFields, context) : undefined,
    ColumnConfigurations:
      output.ColumnConfigurations != null
        ? de_ColumnConfigurationList(output.ColumnConfigurations, context)
        : undefined,
    DataSetConfigurations:
      output.DataSetConfigurations != null
        ? de_DataSetConfigurationList(output.DataSetConfigurations, context)
        : undefined,
    FilterGroups: output.FilterGroups != null ? de_FilterGroupList(output.FilterGroups, context) : undefined,
    ParameterDeclarations:
      output.ParameterDeclarations != null
        ? de_ParameterDeclarationList(output.ParameterDeclarations, context)
        : undefined,
    Sheets: output.Sheets != null ? de_SheetDefinitionList(output.Sheets, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TemplateVersionSummary
 */
const de_TemplateVersionSummary = (output: any, context: __SerdeContext): TemplateVersionSummary => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    Description: __expectString(output.Description),
    Status: __expectString(output.Status),
    VersionNumber: __expectLong(output.VersionNumber),
  } as any;
};

/**
 * deserializeAws_restJson1TemplateVersionSummaryList
 */
const de_TemplateVersionSummaryList = (output: any, context: __SerdeContext): TemplateVersionSummary[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_TemplateVersionSummary(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1TeradataParameters
 */
const de_TeradataParameters = (output: any, context: __SerdeContext): TeradataParameters => {
  return {
    Database: __expectString(output.Database),
    Host: __expectString(output.Host),
    Port: __expectInt32(output.Port),
  } as any;
};

/**
 * deserializeAws_restJson1TextAreaControlDisplayOptions
 */
const de_TextAreaControlDisplayOptions = (output: any, context: __SerdeContext): TextAreaControlDisplayOptions => {
  return {
    PlaceholderOptions:
      output.PlaceholderOptions != null
        ? de_TextControlPlaceholderOptions(output.PlaceholderOptions, context)
        : undefined,
    TitleOptions: output.TitleOptions != null ? de_LabelOptions(output.TitleOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TextConditionalFormat
 */
const de_TextConditionalFormat = (output: any, context: __SerdeContext): TextConditionalFormat => {
  return {
    BackgroundColor:
      output.BackgroundColor != null ? de_ConditionalFormattingColor(output.BackgroundColor, context) : undefined,
    Icon: output.Icon != null ? de_ConditionalFormattingIcon(output.Icon, context) : undefined,
    TextColor: output.TextColor != null ? de_ConditionalFormattingColor(output.TextColor, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TextControlPlaceholderOptions
 */
const de_TextControlPlaceholderOptions = (output: any, context: __SerdeContext): TextControlPlaceholderOptions => {
  return {
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1TextFieldControlDisplayOptions
 */
const de_TextFieldControlDisplayOptions = (output: any, context: __SerdeContext): TextFieldControlDisplayOptions => {
  return {
    PlaceholderOptions:
      output.PlaceholderOptions != null
        ? de_TextControlPlaceholderOptions(output.PlaceholderOptions, context)
        : undefined,
    TitleOptions: output.TitleOptions != null ? de_LabelOptions(output.TitleOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1Theme
 */
const de_Theme = (output: any, context: __SerdeContext): Theme => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    Name: __expectString(output.Name),
    ThemeId: __expectString(output.ThemeId),
    Type: __expectString(output.Type),
    Version: output.Version != null ? de_ThemeVersion(output.Version, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ThemeAlias
 */
const de_ThemeAlias = (output: any, context: __SerdeContext): ThemeAlias => {
  return {
    AliasName: __expectString(output.AliasName),
    Arn: __expectString(output.Arn),
    ThemeVersionNumber: __expectLong(output.ThemeVersionNumber),
  } as any;
};

/**
 * deserializeAws_restJson1ThemeAliasList
 */
const de_ThemeAliasList = (output: any, context: __SerdeContext): ThemeAlias[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ThemeAlias(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ThemeConfiguration
 */
const de_ThemeConfiguration = (output: any, context: __SerdeContext): ThemeConfiguration => {
  return {
    DataColorPalette:
      output.DataColorPalette != null ? de_DataColorPalette(output.DataColorPalette, context) : undefined,
    Sheet: output.Sheet != null ? de_SheetStyle(output.Sheet, context) : undefined,
    Typography: output.Typography != null ? de_Typography(output.Typography, context) : undefined,
    UIColorPalette: output.UIColorPalette != null ? de_UIColorPalette(output.UIColorPalette, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1ThemeError
 */
const de_ThemeError = (output: any, context: __SerdeContext): ThemeError => {
  return {
    Message: __expectString(output.Message),
    Type: __expectString(output.Type),
  } as any;
};

/**
 * deserializeAws_restJson1ThemeErrorList
 */
const de_ThemeErrorList = (output: any, context: __SerdeContext): ThemeError[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ThemeError(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ThemeSummary
 */
const de_ThemeSummary = (output: any, context: __SerdeContext): ThemeSummary => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    LastUpdatedTime:
      output.LastUpdatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.LastUpdatedTime)))
        : undefined,
    LatestVersionNumber: __expectLong(output.LatestVersionNumber),
    Name: __expectString(output.Name),
    ThemeId: __expectString(output.ThemeId),
  } as any;
};

/**
 * deserializeAws_restJson1ThemeSummaryList
 */
const de_ThemeSummaryList = (output: any, context: __SerdeContext): ThemeSummary[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ThemeSummary(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ThemeVersion
 */
const de_ThemeVersion = (output: any, context: __SerdeContext): ThemeVersion => {
  return {
    Arn: __expectString(output.Arn),
    BaseThemeId: __expectString(output.BaseThemeId),
    Configuration: output.Configuration != null ? de_ThemeConfiguration(output.Configuration, context) : undefined,
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    Description: __expectString(output.Description),
    Errors: output.Errors != null ? de_ThemeErrorList(output.Errors, context) : undefined,
    Status: __expectString(output.Status),
    VersionNumber: __expectLong(output.VersionNumber),
  } as any;
};

/**
 * deserializeAws_restJson1ThemeVersionSummary
 */
const de_ThemeVersionSummary = (output: any, context: __SerdeContext): ThemeVersionSummary => {
  return {
    Arn: __expectString(output.Arn),
    CreatedTime:
      output.CreatedTime != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.CreatedTime)))
        : undefined,
    Description: __expectString(output.Description),
    Status: __expectString(output.Status),
    VersionNumber: __expectLong(output.VersionNumber),
  } as any;
};

/**
 * deserializeAws_restJson1ThemeVersionSummaryList
 */
const de_ThemeVersionSummaryList = (output: any, context: __SerdeContext): ThemeVersionSummary[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_ThemeVersionSummary(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1ThousandSeparatorOptions
 */
const de_ThousandSeparatorOptions = (output: any, context: __SerdeContext): ThousandSeparatorOptions => {
  return {
    Symbol: __expectString(output.Symbol),
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1TileLayoutStyle
 */
const de_TileLayoutStyle = (output: any, context: __SerdeContext): TileLayoutStyle => {
  return {
    Gutter: output.Gutter != null ? de_GutterStyle(output.Gutter, context) : undefined,
    Margin: output.Margin != null ? de_MarginStyle(output.Margin, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TileStyle
 */
const de_TileStyle = (output: any, context: __SerdeContext): TileStyle => {
  return {
    Border: output.Border != null ? de_BorderStyle(output.Border, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TimeBasedForecastProperties
 */
const de_TimeBasedForecastProperties = (output: any, context: __SerdeContext): TimeBasedForecastProperties => {
  return {
    LowerBoundary: __limitedParseDouble(output.LowerBoundary),
    PeriodsBackward: __expectInt32(output.PeriodsBackward),
    PeriodsForward: __expectInt32(output.PeriodsForward),
    PredictionInterval: __expectInt32(output.PredictionInterval),
    Seasonality: __expectInt32(output.Seasonality),
    UpperBoundary: __limitedParseDouble(output.UpperBoundary),
  } as any;
};

/**
 * deserializeAws_restJson1TimeEqualityFilter
 */
const de_TimeEqualityFilter = (output: any, context: __SerdeContext): TimeEqualityFilter => {
  return {
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    FilterId: __expectString(output.FilterId),
    ParameterName: __expectString(output.ParameterName),
    TimeGranularity: __expectString(output.TimeGranularity),
    Value: output.Value != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.Value))) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TimeRangeDrillDownFilter
 */
const de_TimeRangeDrillDownFilter = (output: any, context: __SerdeContext): TimeRangeDrillDownFilter => {
  return {
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    RangeMaximum:
      output.RangeMaximum != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.RangeMaximum)))
        : undefined,
    RangeMinimum:
      output.RangeMinimum != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.RangeMinimum)))
        : undefined,
    TimeGranularity: __expectString(output.TimeGranularity),
  } as any;
};

/**
 * deserializeAws_restJson1TimeRangeFilter
 */
const de_TimeRangeFilter = (output: any, context: __SerdeContext): TimeRangeFilter => {
  return {
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    ExcludePeriodConfiguration:
      output.ExcludePeriodConfiguration != null
        ? de_ExcludePeriodConfiguration(output.ExcludePeriodConfiguration, context)
        : undefined,
    FilterId: __expectString(output.FilterId),
    IncludeMaximum: __expectBoolean(output.IncludeMaximum),
    IncludeMinimum: __expectBoolean(output.IncludeMinimum),
    NullOption: __expectString(output.NullOption),
    RangeMaximumValue:
      output.RangeMaximumValue != null ? de_TimeRangeFilterValue(output.RangeMaximumValue, context) : undefined,
    RangeMinimumValue:
      output.RangeMinimumValue != null ? de_TimeRangeFilterValue(output.RangeMinimumValue, context) : undefined,
    TimeGranularity: __expectString(output.TimeGranularity),
  } as any;
};

/**
 * deserializeAws_restJson1TimeRangeFilterValue
 */
const de_TimeRangeFilterValue = (output: any, context: __SerdeContext): TimeRangeFilterValue => {
  return {
    Parameter: __expectString(output.Parameter),
    RollingDate: output.RollingDate != null ? de_RollingDateConfiguration(output.RollingDate, context) : undefined,
    StaticValue:
      output.StaticValue != null
        ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StaticValue)))
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TooltipItem
 */
const de_TooltipItem = (output: any, context: __SerdeContext): TooltipItem => {
  return {
    ColumnTooltipItem:
      output.ColumnTooltipItem != null ? de_ColumnTooltipItem(output.ColumnTooltipItem, context) : undefined,
    FieldTooltipItem:
      output.FieldTooltipItem != null ? de_FieldTooltipItem(output.FieldTooltipItem, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TooltipItemList
 */
const de_TooltipItemList = (output: any, context: __SerdeContext): TooltipItem[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_TooltipItem(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1TooltipOptions
 */
const de_TooltipOptions = (output: any, context: __SerdeContext): TooltipOptions => {
  return {
    FieldBasedTooltip:
      output.FieldBasedTooltip != null ? de_FieldBasedTooltip(output.FieldBasedTooltip, context) : undefined,
    SelectedTooltipType: __expectString(output.SelectedTooltipType),
    TooltipVisibility: __expectString(output.TooltipVisibility),
  } as any;
};

/**
 * deserializeAws_restJson1TopBottomFilter
 */
const de_TopBottomFilter = (output: any, context: __SerdeContext): TopBottomFilter => {
  return {
    AggregationSortConfigurations:
      output.AggregationSortConfigurations != null
        ? de_AggregationSortConfigurationList(output.AggregationSortConfigurations, context)
        : undefined,
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    FilterId: __expectString(output.FilterId),
    Limit: __expectInt32(output.Limit),
    ParameterName: __expectString(output.ParameterName),
    TimeGranularity: __expectString(output.TimeGranularity),
  } as any;
};

/**
 * deserializeAws_restJson1TopBottomMoversComputation
 */
const de_TopBottomMoversComputation = (output: any, context: __SerdeContext): TopBottomMoversComputation => {
  return {
    Category: output.Category != null ? de_DimensionField(output.Category, context) : undefined,
    ComputationId: __expectString(output.ComputationId),
    MoverSize: __expectInt32(output.MoverSize),
    Name: __expectString(output.Name),
    SortOrder: __expectString(output.SortOrder),
    Time: output.Time != null ? de_DimensionField(output.Time, context) : undefined,
    Type: __expectString(output.Type),
    Value: output.Value != null ? de_MeasureField(output.Value, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TopBottomRankedComputation
 */
const de_TopBottomRankedComputation = (output: any, context: __SerdeContext): TopBottomRankedComputation => {
  return {
    Category: output.Category != null ? de_DimensionField(output.Category, context) : undefined,
    ComputationId: __expectString(output.ComputationId),
    Name: __expectString(output.Name),
    ResultSize: __expectInt32(output.ResultSize),
    Type: __expectString(output.Type),
    Value: output.Value != null ? de_MeasureField(output.Value, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TotalAggregationComputation
 */
const de_TotalAggregationComputation = (output: any, context: __SerdeContext): TotalAggregationComputation => {
  return {
    ComputationId: __expectString(output.ComputationId),
    Name: __expectString(output.Name),
    Value: output.Value != null ? de_MeasureField(output.Value, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TotalOptions
 */
const de_TotalOptions = (output: any, context: __SerdeContext): TotalOptions => {
  return {
    CustomLabel: __expectString(output.CustomLabel),
    Placement: __expectString(output.Placement),
    ScrollStatus: __expectString(output.ScrollStatus),
    TotalCellStyle: output.TotalCellStyle != null ? de_TableCellStyle(output.TotalCellStyle, context) : undefined,
    TotalsVisibility: __expectString(output.TotalsVisibility),
  } as any;
};

/**
 * deserializeAws_restJson1TransformOperation
 */
const de_TransformOperation = (output: any, context: __SerdeContext): TransformOperation => {
  if (output.CastColumnTypeOperation != null) {
    return {
      CastColumnTypeOperation: de_CastColumnTypeOperation(output.CastColumnTypeOperation, context),
    };
  }
  if (output.CreateColumnsOperation != null) {
    return {
      CreateColumnsOperation: de_CreateColumnsOperation(output.CreateColumnsOperation, context),
    };
  }
  if (output.FilterOperation != null) {
    return {
      FilterOperation: de_FilterOperation(output.FilterOperation, context),
    };
  }
  if (output.ProjectOperation != null) {
    return {
      ProjectOperation: de_ProjectOperation(output.ProjectOperation, context),
    };
  }
  if (output.RenameColumnOperation != null) {
    return {
      RenameColumnOperation: de_RenameColumnOperation(output.RenameColumnOperation, context),
    };
  }
  if (output.TagColumnOperation != null) {
    return {
      TagColumnOperation: de_TagColumnOperation(output.TagColumnOperation, context),
    };
  }
  if (output.UntagColumnOperation != null) {
    return {
      UntagColumnOperation: de_UntagColumnOperation(output.UntagColumnOperation, context),
    };
  }
  return { $unknown: Object.entries(output)[0] };
};

/**
 * deserializeAws_restJson1TransformOperationList
 */
const de_TransformOperationList = (output: any, context: __SerdeContext): TransformOperation[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_TransformOperation(__expectUnion(entry), context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1TreeMapAggregatedFieldWells
 */
const de_TreeMapAggregatedFieldWells = (output: any, context: __SerdeContext): TreeMapAggregatedFieldWells => {
  return {
    Colors: output.Colors != null ? de_TreeMapMeasureFieldList(output.Colors, context) : undefined,
    Groups: output.Groups != null ? de_TreeMapDimensionFieldList(output.Groups, context) : undefined,
    Sizes: output.Sizes != null ? de_TreeMapMeasureFieldList(output.Sizes, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TreeMapConfiguration
 */
const de_TreeMapConfiguration = (output: any, context: __SerdeContext): TreeMapConfiguration => {
  return {
    ColorLabelOptions:
      output.ColorLabelOptions != null ? de_ChartAxisLabelOptions(output.ColorLabelOptions, context) : undefined,
    ColorScale: output.ColorScale != null ? de_ColorScale(output.ColorScale, context) : undefined,
    DataLabels: output.DataLabels != null ? de_DataLabelOptions(output.DataLabels, context) : undefined,
    FieldWells: output.FieldWells != null ? de_TreeMapFieldWells(output.FieldWells, context) : undefined,
    GroupLabelOptions:
      output.GroupLabelOptions != null ? de_ChartAxisLabelOptions(output.GroupLabelOptions, context) : undefined,
    Legend: output.Legend != null ? de_LegendOptions(output.Legend, context) : undefined,
    SizeLabelOptions:
      output.SizeLabelOptions != null ? de_ChartAxisLabelOptions(output.SizeLabelOptions, context) : undefined,
    SortConfiguration:
      output.SortConfiguration != null ? de_TreeMapSortConfiguration(output.SortConfiguration, context) : undefined,
    Tooltip: output.Tooltip != null ? de_TooltipOptions(output.Tooltip, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TreeMapDimensionFieldList
 */
const de_TreeMapDimensionFieldList = (output: any, context: __SerdeContext): DimensionField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DimensionField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1TreeMapFieldWells
 */
const de_TreeMapFieldWells = (output: any, context: __SerdeContext): TreeMapFieldWells => {
  return {
    TreeMapAggregatedFieldWells:
      output.TreeMapAggregatedFieldWells != null
        ? de_TreeMapAggregatedFieldWells(output.TreeMapAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TreeMapMeasureFieldList
 */
const de_TreeMapMeasureFieldList = (output: any, context: __SerdeContext): MeasureField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_MeasureField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1TreeMapSortConfiguration
 */
const de_TreeMapSortConfiguration = (output: any, context: __SerdeContext): TreeMapSortConfiguration => {
  return {
    TreeMapGroupItemsLimitConfiguration:
      output.TreeMapGroupItemsLimitConfiguration != null
        ? de_ItemsLimitConfiguration(output.TreeMapGroupItemsLimitConfiguration, context)
        : undefined,
    TreeMapSort: output.TreeMapSort != null ? de_FieldSortOptionsList(output.TreeMapSort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1TreeMapVisual
 */
const de_TreeMapVisual = (output: any, context: __SerdeContext): TreeMapVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null ? de_TreeMapConfiguration(output.ChartConfiguration, context) : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1TrendArrowOptions
 */
const de_TrendArrowOptions = (output: any, context: __SerdeContext): TrendArrowOptions => {
  return {
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1TwitterParameters
 */
const de_TwitterParameters = (output: any, context: __SerdeContext): TwitterParameters => {
  return {
    MaxRows: __expectInt32(output.MaxRows),
    Query: __expectString(output.Query),
  } as any;
};

/**
 * deserializeAws_restJson1Typography
 */
const de_Typography = (output: any, context: __SerdeContext): Typography => {
  return {
    FontFamilies: output.FontFamilies != null ? de_FontList(output.FontFamilies, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1UIColorPalette
 */
const de_UIColorPalette = (output: any, context: __SerdeContext): UIColorPalette => {
  return {
    Accent: __expectString(output.Accent),
    AccentForeground: __expectString(output.AccentForeground),
    Danger: __expectString(output.Danger),
    DangerForeground: __expectString(output.DangerForeground),
    Dimension: __expectString(output.Dimension),
    DimensionForeground: __expectString(output.DimensionForeground),
    Measure: __expectString(output.Measure),
    MeasureForeground: __expectString(output.MeasureForeground),
    PrimaryBackground: __expectString(output.PrimaryBackground),
    PrimaryForeground: __expectString(output.PrimaryForeground),
    SecondaryBackground: __expectString(output.SecondaryBackground),
    SecondaryForeground: __expectString(output.SecondaryForeground),
    Success: __expectString(output.Success),
    SuccessForeground: __expectString(output.SuccessForeground),
    Warning: __expectString(output.Warning),
    WarningForeground: __expectString(output.WarningForeground),
  } as any;
};

/**
 * deserializeAws_restJson1UnaggregatedField
 */
const de_UnaggregatedField = (output: any, context: __SerdeContext): UnaggregatedField => {
  return {
    Column: output.Column != null ? de_ColumnIdentifier(output.Column, context) : undefined,
    FieldId: __expectString(output.FieldId),
    FormatConfiguration:
      output.FormatConfiguration != null ? de_FormatConfiguration(output.FormatConfiguration, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1UnaggregatedFieldList
 */
const de_UnaggregatedFieldList = (output: any, context: __SerdeContext): UnaggregatedField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_UnaggregatedField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1UniqueValuesComputation
 */
const de_UniqueValuesComputation = (output: any, context: __SerdeContext): UniqueValuesComputation => {
  return {
    Category: output.Category != null ? de_DimensionField(output.Category, context) : undefined,
    ComputationId: __expectString(output.ComputationId),
    Name: __expectString(output.Name),
  } as any;
};

/**
 * deserializeAws_restJson1UntagColumnOperation
 */
const de_UntagColumnOperation = (output: any, context: __SerdeContext): UntagColumnOperation => {
  return {
    ColumnName: __expectString(output.ColumnName),
    TagNames: output.TagNames != null ? de_ColumnTagNames(output.TagNames, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1UploadSettings
 */
const de_UploadSettings = (output: any, context: __SerdeContext): UploadSettings => {
  return {
    ContainsHeader: __expectBoolean(output.ContainsHeader),
    Delimiter: __expectString(output.Delimiter),
    Format: __expectString(output.Format),
    StartFromRow: __expectInt32(output.StartFromRow),
    TextQualifier: __expectString(output.TextQualifier),
  } as any;
};

/**
 * deserializeAws_restJson1User
 */
const de_User = (output: any, context: __SerdeContext): User => {
  return {
    Active: __expectBoolean(output.Active),
    Arn: __expectString(output.Arn),
    CustomPermissionsName: __expectString(output.CustomPermissionsName),
    Email: __expectString(output.Email),
    ExternalLoginFederationProviderType: __expectString(output.ExternalLoginFederationProviderType),
    ExternalLoginFederationProviderUrl: __expectString(output.ExternalLoginFederationProviderUrl),
    ExternalLoginId: __expectString(output.ExternalLoginId),
    IdentityType: __expectString(output.IdentityType),
    PrincipalId: __expectString(output.PrincipalId),
    Role: __expectString(output.Role),
    UserName: __expectString(output.UserName),
  } as any;
};

/**
 * deserializeAws_restJson1UserList
 */
const de_UserList = (output: any, context: __SerdeContext): User[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_User(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1VisibleRangeOptions
 */
const de_VisibleRangeOptions = (output: any, context: __SerdeContext): VisibleRangeOptions => {
  return {
    PercentRange: output.PercentRange != null ? de_PercentVisibleRange(output.PercentRange, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1Visual
 */
const de_Visual = (output: any, context: __SerdeContext): Visual => {
  return {
    BarChartVisual: output.BarChartVisual != null ? de_BarChartVisual(output.BarChartVisual, context) : undefined,
    BoxPlotVisual: output.BoxPlotVisual != null ? de_BoxPlotVisual(output.BoxPlotVisual, context) : undefined,
    ComboChartVisual:
      output.ComboChartVisual != null ? de_ComboChartVisual(output.ComboChartVisual, context) : undefined,
    CustomContentVisual:
      output.CustomContentVisual != null ? de_CustomContentVisual(output.CustomContentVisual, context) : undefined,
    EmptyVisual: output.EmptyVisual != null ? de_EmptyVisual(output.EmptyVisual, context) : undefined,
    FilledMapVisual: output.FilledMapVisual != null ? de_FilledMapVisual(output.FilledMapVisual, context) : undefined,
    FunnelChartVisual:
      output.FunnelChartVisual != null ? de_FunnelChartVisual(output.FunnelChartVisual, context) : undefined,
    GaugeChartVisual:
      output.GaugeChartVisual != null ? de_GaugeChartVisual(output.GaugeChartVisual, context) : undefined,
    GeospatialMapVisual:
      output.GeospatialMapVisual != null ? de_GeospatialMapVisual(output.GeospatialMapVisual, context) : undefined,
    HeatMapVisual: output.HeatMapVisual != null ? de_HeatMapVisual(output.HeatMapVisual, context) : undefined,
    HistogramVisual: output.HistogramVisual != null ? de_HistogramVisual(output.HistogramVisual, context) : undefined,
    InsightVisual: output.InsightVisual != null ? de_InsightVisual(output.InsightVisual, context) : undefined,
    KPIVisual: output.KPIVisual != null ? de_KPIVisual(output.KPIVisual, context) : undefined,
    LineChartVisual: output.LineChartVisual != null ? de_LineChartVisual(output.LineChartVisual, context) : undefined,
    PieChartVisual: output.PieChartVisual != null ? de_PieChartVisual(output.PieChartVisual, context) : undefined,
    PivotTableVisual:
      output.PivotTableVisual != null ? de_PivotTableVisual(output.PivotTableVisual, context) : undefined,
    RadarChartVisual:
      output.RadarChartVisual != null ? de_RadarChartVisual(output.RadarChartVisual, context) : undefined,
    SankeyDiagramVisual:
      output.SankeyDiagramVisual != null ? de_SankeyDiagramVisual(output.SankeyDiagramVisual, context) : undefined,
    ScatterPlotVisual:
      output.ScatterPlotVisual != null ? de_ScatterPlotVisual(output.ScatterPlotVisual, context) : undefined,
    TableVisual: output.TableVisual != null ? de_TableVisual(output.TableVisual, context) : undefined,
    TreeMapVisual: output.TreeMapVisual != null ? de_TreeMapVisual(output.TreeMapVisual, context) : undefined,
    WaterfallVisual: output.WaterfallVisual != null ? de_WaterfallVisual(output.WaterfallVisual, context) : undefined,
    WordCloudVisual: output.WordCloudVisual != null ? de_WordCloudVisual(output.WordCloudVisual, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1VisualAxisSortOption
 */
const de_VisualAxisSortOption = (output: any, context: __SerdeContext): VisualAxisSortOption => {
  return {
    AvailabilityStatus: __expectString(output.AvailabilityStatus),
  } as any;
};

/**
 * deserializeAws_restJson1VisualCustomAction
 */
const de_VisualCustomAction = (output: any, context: __SerdeContext): VisualCustomAction => {
  return {
    ActionOperations:
      output.ActionOperations != null
        ? de_VisualCustomActionOperationList(output.ActionOperations, context)
        : undefined,
    CustomActionId: __expectString(output.CustomActionId),
    Name: __expectString(output.Name),
    Status: __expectString(output.Status),
    Trigger: __expectString(output.Trigger),
  } as any;
};

/**
 * deserializeAws_restJson1VisualCustomActionList
 */
const de_VisualCustomActionList = (output: any, context: __SerdeContext): VisualCustomAction[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_VisualCustomAction(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1VisualCustomActionOperation
 */
const de_VisualCustomActionOperation = (output: any, context: __SerdeContext): VisualCustomActionOperation => {
  return {
    FilterOperation:
      output.FilterOperation != null ? de_CustomActionFilterOperation(output.FilterOperation, context) : undefined,
    NavigationOperation:
      output.NavigationOperation != null
        ? de_CustomActionNavigationOperation(output.NavigationOperation, context)
        : undefined,
    SetParametersOperation:
      output.SetParametersOperation != null
        ? de_CustomActionSetParametersOperation(output.SetParametersOperation, context)
        : undefined,
    URLOperation: output.URLOperation != null ? de_CustomActionURLOperation(output.URLOperation, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1VisualCustomActionOperationList
 */
const de_VisualCustomActionOperationList = (output: any, context: __SerdeContext): VisualCustomActionOperation[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_VisualCustomActionOperation(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1VisualList
 */
const de_VisualList = (output: any, context: __SerdeContext): Visual[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_Visual(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1VisualMenuOption
 */
const de_VisualMenuOption = (output: any, context: __SerdeContext): VisualMenuOption => {
  return {
    AvailabilityStatus: __expectString(output.AvailabilityStatus),
  } as any;
};

/**
 * deserializeAws_restJson1VisualPalette
 */
const de_VisualPalette = (output: any, context: __SerdeContext): VisualPalette => {
  return {
    ChartColor: __expectString(output.ChartColor),
    ColorMap: output.ColorMap != null ? de_DataPathColorList(output.ColorMap, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1VisualSubtitleLabelOptions
 */
const de_VisualSubtitleLabelOptions = (output: any, context: __SerdeContext): VisualSubtitleLabelOptions => {
  return {
    FormatText: output.FormatText != null ? de_LongFormatText(output.FormatText, context) : undefined,
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1VisualTitleLabelOptions
 */
const de_VisualTitleLabelOptions = (output: any, context: __SerdeContext): VisualTitleLabelOptions => {
  return {
    FormatText: output.FormatText != null ? de_ShortFormatText(output.FormatText, context) : undefined,
    Visibility: __expectString(output.Visibility),
  } as any;
};

/**
 * deserializeAws_restJson1VpcConnectionProperties
 */
const de_VpcConnectionProperties = (output: any, context: __SerdeContext): VpcConnectionProperties => {
  return {
    VpcConnectionArn: __expectString(output.VpcConnectionArn),
  } as any;
};

/**
 * deserializeAws_restJson1WaterfallChartAggregatedFieldWells
 */
const de_WaterfallChartAggregatedFieldWells = (
  output: any,
  context: __SerdeContext
): WaterfallChartAggregatedFieldWells => {
  return {
    Breakdowns: output.Breakdowns != null ? de_DimensionFieldList(output.Breakdowns, context) : undefined,
    Categories: output.Categories != null ? de_DimensionFieldList(output.Categories, context) : undefined,
    Values: output.Values != null ? de_MeasureFieldList(output.Values, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1WaterfallChartConfiguration
 */
const de_WaterfallChartConfiguration = (output: any, context: __SerdeContext): WaterfallChartConfiguration => {
  return {
    CategoryAxisDisplayOptions:
      output.CategoryAxisDisplayOptions != null
        ? de_AxisDisplayOptions(output.CategoryAxisDisplayOptions, context)
        : undefined,
    CategoryAxisLabelOptions:
      output.CategoryAxisLabelOptions != null
        ? de_ChartAxisLabelOptions(output.CategoryAxisLabelOptions, context)
        : undefined,
    DataLabels: output.DataLabels != null ? de_DataLabelOptions(output.DataLabels, context) : undefined,
    FieldWells: output.FieldWells != null ? de_WaterfallChartFieldWells(output.FieldWells, context) : undefined,
    Legend: output.Legend != null ? de_LegendOptions(output.Legend, context) : undefined,
    PrimaryYAxisDisplayOptions:
      output.PrimaryYAxisDisplayOptions != null
        ? de_AxisDisplayOptions(output.PrimaryYAxisDisplayOptions, context)
        : undefined,
    PrimaryYAxisLabelOptions:
      output.PrimaryYAxisLabelOptions != null
        ? de_ChartAxisLabelOptions(output.PrimaryYAxisLabelOptions, context)
        : undefined,
    SortConfiguration:
      output.SortConfiguration != null
        ? de_WaterfallChartSortConfiguration(output.SortConfiguration, context)
        : undefined,
    VisualPalette: output.VisualPalette != null ? de_VisualPalette(output.VisualPalette, context) : undefined,
    WaterfallChartOptions:
      output.WaterfallChartOptions != null
        ? de_WaterfallChartOptions(output.WaterfallChartOptions, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1WaterfallChartFieldWells
 */
const de_WaterfallChartFieldWells = (output: any, context: __SerdeContext): WaterfallChartFieldWells => {
  return {
    WaterfallChartAggregatedFieldWells:
      output.WaterfallChartAggregatedFieldWells != null
        ? de_WaterfallChartAggregatedFieldWells(output.WaterfallChartAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1WaterfallChartOptions
 */
const de_WaterfallChartOptions = (output: any, context: __SerdeContext): WaterfallChartOptions => {
  return {
    TotalBarLabel: __expectString(output.TotalBarLabel),
  } as any;
};

/**
 * deserializeAws_restJson1WaterfallChartSortConfiguration
 */
const de_WaterfallChartSortConfiguration = (output: any, context: __SerdeContext): WaterfallChartSortConfiguration => {
  return {
    BreakdownItemsLimit:
      output.BreakdownItemsLimit != null ? de_ItemsLimitConfiguration(output.BreakdownItemsLimit, context) : undefined,
    CategorySort: output.CategorySort != null ? de_FieldSortOptionsList(output.CategorySort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1WaterfallVisual
 */
const de_WaterfallVisual = (output: any, context: __SerdeContext): WaterfallVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null
        ? de_WaterfallChartConfiguration(output.ChartConfiguration, context)
        : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

/**
 * deserializeAws_restJson1WhatIfPointScenario
 */
const de_WhatIfPointScenario = (output: any, context: __SerdeContext): WhatIfPointScenario => {
  return {
    Date: output.Date != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.Date))) : undefined,
    Value: __limitedParseDouble(output.Value),
  } as any;
};

/**
 * deserializeAws_restJson1WhatIfRangeScenario
 */
const de_WhatIfRangeScenario = (output: any, context: __SerdeContext): WhatIfRangeScenario => {
  return {
    EndDate:
      output.EndDate != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.EndDate))) : undefined,
    StartDate:
      output.StartDate != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.StartDate))) : undefined,
    Value: __limitedParseDouble(output.Value),
  } as any;
};

/**
 * deserializeAws_restJson1WordCloudAggregatedFieldWells
 */
const de_WordCloudAggregatedFieldWells = (output: any, context: __SerdeContext): WordCloudAggregatedFieldWells => {
  return {
    GroupBy: output.GroupBy != null ? de_WordCloudDimensionFieldList(output.GroupBy, context) : undefined,
    Size: output.Size != null ? de_WordCloudMeasureFieldList(output.Size, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1WordCloudChartConfiguration
 */
const de_WordCloudChartConfiguration = (output: any, context: __SerdeContext): WordCloudChartConfiguration => {
  return {
    CategoryLabelOptions:
      output.CategoryLabelOptions != null ? de_ChartAxisLabelOptions(output.CategoryLabelOptions, context) : undefined,
    FieldWells: output.FieldWells != null ? de_WordCloudFieldWells(output.FieldWells, context) : undefined,
    SortConfiguration:
      output.SortConfiguration != null ? de_WordCloudSortConfiguration(output.SortConfiguration, context) : undefined,
    WordCloudOptions:
      output.WordCloudOptions != null ? de_WordCloudOptions(output.WordCloudOptions, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1WordCloudDimensionFieldList
 */
const de_WordCloudDimensionFieldList = (output: any, context: __SerdeContext): DimensionField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_DimensionField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1WordCloudFieldWells
 */
const de_WordCloudFieldWells = (output: any, context: __SerdeContext): WordCloudFieldWells => {
  return {
    WordCloudAggregatedFieldWells:
      output.WordCloudAggregatedFieldWells != null
        ? de_WordCloudAggregatedFieldWells(output.WordCloudAggregatedFieldWells, context)
        : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1WordCloudMeasureFieldList
 */
const de_WordCloudMeasureFieldList = (output: any, context: __SerdeContext): MeasureField[] => {
  const retVal = (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return de_MeasureField(entry, context);
    });
  return retVal;
};

/**
 * deserializeAws_restJson1WordCloudOptions
 */
const de_WordCloudOptions = (output: any, context: __SerdeContext): WordCloudOptions => {
  return {
    CloudLayout: __expectString(output.CloudLayout),
    MaximumStringLength: __expectInt32(output.MaximumStringLength),
    WordCasing: __expectString(output.WordCasing),
    WordOrientation: __expectString(output.WordOrientation),
    WordPadding: __expectString(output.WordPadding),
    WordScaling: __expectString(output.WordScaling),
  } as any;
};

/**
 * deserializeAws_restJson1WordCloudSortConfiguration
 */
const de_WordCloudSortConfiguration = (output: any, context: __SerdeContext): WordCloudSortConfiguration => {
  return {
    CategoryItemsLimit:
      output.CategoryItemsLimit != null ? de_ItemsLimitConfiguration(output.CategoryItemsLimit, context) : undefined,
    CategorySort: output.CategorySort != null ? de_FieldSortOptionsList(output.CategorySort, context) : undefined,
  } as any;
};

/**
 * deserializeAws_restJson1WordCloudVisual
 */
const de_WordCloudVisual = (output: any, context: __SerdeContext): WordCloudVisual => {
  return {
    Actions: output.Actions != null ? de_VisualCustomActionList(output.Actions, context) : undefined,
    ChartConfiguration:
      output.ChartConfiguration != null
        ? de_WordCloudChartConfiguration(output.ChartConfiguration, context)
        : undefined,
    ColumnHierarchies:
      output.ColumnHierarchies != null ? de_ColumnHierarchyList(output.ColumnHierarchies, context) : undefined,
    Subtitle: output.Subtitle != null ? de_VisualSubtitleLabelOptions(output.Subtitle, context) : undefined,
    Title: output.Title != null ? de_VisualTitleLabelOptions(output.Title, context) : undefined,
    VisualId: __expectString(output.VisualId),
  } as any;
};

const deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({
  httpStatusCode: output.statusCode,
  requestId:
    output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"],
});

// Collect low-level response body stream to Uint8Array.
const collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};

// Encode Uint8Array data into string with utf-8.
const collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>
  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));

const isSerializableHeaderValue = (value: any): boolean =>
  value !== undefined &&
  value !== null &&
  value !== "" &&
  (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
  (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);

const parseBody = (streamBody: any, context: __SerdeContext): any =>
  collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });

const parseErrorBody = async (errorBody: any, context: __SerdeContext) => {
  const value = await parseBody(errorBody, context);
  value.message = value.message ?? value.Message;
  return value;
};

/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */
const loadRestJsonErrorCode = (output: __HttpResponse, data: any): string | undefined => {
  const findKey = (object: any, key: string) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());

  const sanitizeErrorCode = (rawValue: string | number): string => {
    let cleanValue = rawValue;
    if (typeof cleanValue === "number") {
      cleanValue = cleanValue.toString();
    }
    if (cleanValue.indexOf(",") >= 0) {
      cleanValue = cleanValue.split(",")[0];
    }
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };

  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== undefined) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }

  if (data.code !== undefined) {
    return sanitizeErrorCode(data.code);
  }

  if (data["__type"] !== undefined) {
    return sanitizeErrorCode(data["__type"]);
  }
};
