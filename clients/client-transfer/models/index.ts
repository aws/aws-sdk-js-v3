import { SENSITIVE_STRING, SmithyException as __SmithyException, isa as __isa } from "@aws-sdk/smithy-client";
import { MetadataBearer as $MetadataBearer } from "@aws-sdk/types";

/**
 * <p>This exception is thrown when the <code>UpdatServer</code> is called for a server that has
 *       VPC as the endpoint type and the server's <code>VpcEndpointID</code> is not in the available
 *       state.</p>
 */
export interface ConflictException extends __SmithyException, $MetadataBearer {
  name: "ConflictException";
  $fault: "client";
  Message: string | undefined;
}

export namespace ConflictException {
  export const filterSensitiveLog = (obj: ConflictException): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ConflictException => __isa(o, "ConflictException");
}

export interface CreateServerRequest {
  __type?: "CreateServerRequest";
  /**
   * <p>The virtual private cloud (VPC) endpoint settings that are configured for your SFTP server. With a VPC endpoint,
   *       you can restrict access to your SFTP server to resources only within your VPC.
   *       To control incoming internet traffic, you will need to invoke the <code>UpdateServer</code> API and attach an Elastic IP to your server's endpoint. </p>
   */
  EndpointDetails?: EndpointDetails;

  /**
   * <p>The type of VPC endpoint that you want your SFTP server to connect to.
   *       You can choose to connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint,
   *       you can restrict access to your SFTP server and resources only within your VPC.</p>
   */
  EndpointType?: EndpointType | string;

  /**
   * <p>The RSA private key as generated by the <code>ssh-keygen -N "" -f my-new-server-key</code> command.</p>
   *          <important>
   *             <p>If you aren't planning to migrate existing users from an existing SFTP server to a new
   *         AWS SFTP server, don't update the host key. Accidentally changing a server's host
   *         key can be disruptive.</p>
   *          </important>
   *
   *          <p> For more information, see
   *       "https://alpha-docs-aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key" in the <i>AWS
   *         SFTP User Guide.</i>
   *          </p>
   */
  HostKey?: string;

  /**
   * <p>This parameter is required when the <code>IdentityProviderType</code>
   *       is set to <code>API_GATEWAY</code>. Accepts an array containing all of the information required to call a customer-supplied
   *       authentication API, including the API Gateway URL. This property is not required when the <code>IdentityProviderType</code>
   *       is set to <code>SERVICE_MANAGED</code>.</p>
   */
  IdentityProviderDetails?: IdentityProviderDetails;

  /**
   * <p>Specifies the mode of authentication for the SFTP server. The default value is
   *         <code>SERVICE_MANAGED</code>, which allows you to store and access SFTP user credentials
   *       within the AWS Transfer for SFTP service. Use the <code>API_GATEWAY</code> value to integrate with an
   *       identity provider of your choosing. The <code>API_GATEWAY</code> setting requires you to
   *       provide an API Gateway endpoint URL to call for authentication using the
   *         <code>IdentityProviderDetails</code> parameter.</p>
   */
  IdentityProviderType?: IdentityProviderType | string;

  /**
   * <p>A value that allows the service to write your SFTP users' activity to your Amazon
   *       CloudWatch logs for monitoring and auditing purposes.</p>
   */
  LoggingRole?: string;

  /**
   * <p>Key-value pairs that can be used to group and search for servers.</p>
   */
  Tags?: Tag[];
}

export namespace CreateServerRequest {
  export const filterSensitiveLog = (obj: CreateServerRequest): any => ({
    ...obj,
    ...(obj.HostKey && { HostKey: SENSITIVE_STRING }),
  });
  export const isa = (o: any): o is CreateServerRequest => __isa(o, "CreateServerRequest");
}

export interface CreateServerResponse {
  __type?: "CreateServerResponse";
  /**
   * <p>The service-assigned ID of the SFTP server that is created.</p>
   */
  ServerId: string | undefined;
}

export namespace CreateServerResponse {
  export const filterSensitiveLog = (obj: CreateServerResponse): any => ({
    ...obj,
  });
  export const isa = (o: any): o is CreateServerResponse => __isa(o, "CreateServerResponse");
}

export interface CreateUserRequest {
  __type?: "CreateUserRequest";
  /**
   * <p>The landing directory (folder) for a user when they log in to the server using their SFTP
   *       client. </p>
   *          <p>An example is <<code>your-Amazon-S3-bucket-name>/home/username</code>.</p>
   */
  HomeDirectory?: string;

  /**
   * <p>Logical directory mappings that specify what S3 paths and keys should be visible to your
   *       user and how you want to make them visible. You will need to specify the "<code>Entry</code>"
   *       and "<code>Target</code>" pair, where <code>Entry</code> shows how the path is made visible
   *       and <code>Target</code> is the actual S3 path. If you only specify a target, it will be
   *       displayed as is. You will need to also make sure that your AWS IAM Role provides access to
   *       paths in <code>Target</code>. The following is an example.</p>
   *          <p>
   *             <code>'[ "/bucket2/documentation", { "Entry": "your-personal-report.pdf", "Target":
   *         "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]'</code>
   *          </p>
   *          <p>In most cases, you can use this value instead of the scope down policy to lock your user
   *       down to the designated home directory ("chroot"). To do this, you can set <code>Entry</code>
   *       to '/' and set <code>Target</code> to the HomeDirectory parameter value. </p>
   *          <note>
   *             <p>If the target of a logical directory entry does not exist in S3, the entry will be ignored. As
   *         a workaround, you can use the S3 api to create 0 byte objects as place holders for your
   *         directory. If using the CLI, use the s3api call instead of s3 so you can use the put-object
   *         operation. For example, you use the following: <code>aws s3api put-object --bucket
   *           bucketname --key path/to/folder/</code>.  Make sure that the end of the key name ends in a
   *         / for it to be considered a folder. </p>
   *
   *          </note>
   */
  HomeDirectoryMappings?: HomeDirectoryMapEntry[];

  /**
   * <p>The type of landing directory (folder) you want your users' home directory to be when they
   *       log into the SFTP server. If you set it to <code>PATH</code>, the user will see the absolute
   *       Amazon S3 bucket paths as is in their SFTP clients. If you set it <code>LOGICAL</code>, you
   *       will need to provide mappings in the <code>HomeDirectoryMappings</code> for how you want to make
   *       S3 paths visible to your user.</p>
   */
  HomeDirectoryType?: HomeDirectoryType | string;

  /**
   * <p>A scope-down policy for your user so you can use the same IAM role across multiple users.
   *       This policy scopes down user access to portions of their Amazon S3 bucket. Variables that you
   *       can use inside this policy include <code>${Transfer:UserName}</code>,
   *         <code>${Transfer:HomeDirectory}</code>, and <code>${Transfer:HomeBucket}</code>.</p>
   *          <note>
   *             <p>For scope-down policies, AWS Transfer for SFTP stores the policy as a JSON blob, instead
   *         of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass
   *         it in the
   *           <code>Policy</code>
   *         argument.</p>
   *
   *             <p>For an example of a scope-down policy, see
   *         "https://docs.aws.amazon.com/transfer/latest/userguide/users.html#users-policies-scope-down">Creating
   *         a Scope-Down Policy.</p>
   *
   *
   *             <p>For more information, see
   *         "https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html" in the
   *           <i>AWS Security Token Service API Reference</i>.</p>
   *
   *          </note>
   */
  Policy?: string;

  /**
   * <p>The IAM role that controls your user's access to your Amazon S3 bucket. The policies
   *       attached to this role will determine the level of access you want to provide your users when
   *       transferring files into and out of your Amazon S3 bucket or buckets. The IAM role should also
   *       contain a trust relationship that allows the SFTP server to access your resources when
   *       servicing your SFTP user's transfer requests.</p>
   */
  Role: string | undefined;

  /**
   * <p>A system-assigned unique identifier for an SFTP server instance. This is the specific SFTP
   *       server that you added your user to.</p>
   */
  ServerId: string | undefined;

  /**
   * <p>The public portion of the Secure Shell (SSH) key used to authenticate the user to the SFTP
   *       server.</p>
   */
  SshPublicKeyBody?: string;

  /**
   * <p>Key-value pairs that can be used to group and search for users. Tags are metadata attached
   *       to users for any purpose.</p>
   */
  Tags?: Tag[];

  /**
   * <p>A unique string that identifies a user and is associated with a server as specified by the
   *         <code>ServerId</code>. This user name must be a minimum of 3 and a maximum of 32 characters
   *       long. The following are valid characters: a-z, A-Z, 0-9, underscore, and hyphen. The user name
   *       can't start with a hyphen.</p>
   */
  UserName: string | undefined;
}

export namespace CreateUserRequest {
  export const filterSensitiveLog = (obj: CreateUserRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is CreateUserRequest => __isa(o, "CreateUserRequest");
}

export interface CreateUserResponse {
  __type?: "CreateUserResponse";
  /**
   * <p>The ID of the SFTP server that the user is attached to.</p>
   */
  ServerId: string | undefined;

  /**
   * <p>A unique string that identifies a user account associated with an SFTP server.</p>
   */
  UserName: string | undefined;
}

export namespace CreateUserResponse {
  export const filterSensitiveLog = (obj: CreateUserResponse): any => ({
    ...obj,
  });
  export const isa = (o: any): o is CreateUserResponse => __isa(o, "CreateUserResponse");
}

export interface DeleteServerRequest {
  __type?: "DeleteServerRequest";
  /**
   * <p>A unique system-assigned identifier for an SFTP server instance.</p>
   */
  ServerId: string | undefined;
}

export namespace DeleteServerRequest {
  export const filterSensitiveLog = (obj: DeleteServerRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is DeleteServerRequest => __isa(o, "DeleteServerRequest");
}

export interface DeleteSshPublicKeyRequest {
  __type?: "DeleteSshPublicKeyRequest";
  /**
   * <p>A system-assigned unique identifier for a Secure File Transfer Protocol (SFTP) server
   *       instance that has the user assigned to it.</p>
   */
  ServerId: string | undefined;

  /**
   * <p>A unique identifier used to reference your user's specific SSH key.</p>
   */
  SshPublicKeyId: string | undefined;

  /**
   * <p>A unique string that identifies a user whose public key is being deleted.</p>
   */
  UserName: string | undefined;
}

export namespace DeleteSshPublicKeyRequest {
  export const filterSensitiveLog = (obj: DeleteSshPublicKeyRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is DeleteSshPublicKeyRequest => __isa(o, "DeleteSshPublicKeyRequest");
}

export interface DeleteUserRequest {
  __type?: "DeleteUserRequest";
  /**
   * <p>A system-assigned unique identifier for an SFTP server instance that has the user assigned
   *       to it.</p>
   */
  ServerId: string | undefined;

  /**
   * <p>A unique string that identifies a user that is being deleted from the server.</p>
   */
  UserName: string | undefined;
}

export namespace DeleteUserRequest {
  export const filterSensitiveLog = (obj: DeleteUserRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is DeleteUserRequest => __isa(o, "DeleteUserRequest");
}

/**
 * <p>Describes the properties of the server that was specified. Information returned includes
 *       the following: the server Amazon Resource Name (ARN), the authentication configuration and
 *       type, the logging role, the server ID and state, and assigned tags or metadata. </p>
 */
export interface DescribedServer {
  __type?: "DescribedServer";
  /**
   * <p>Specifies the unique Amazon Resource Name (ARN) for the server to be described.</p>
   */
  Arn: string | undefined;

  /**
   * <p>The virtual private cloud (VPC) endpoint settings that you configured for your SFTP server.</p>
   */
  EndpointDetails?: EndpointDetails;

  /**
   * <p>The type of endpoint that your SFTP server is connected to. If your SFTP server is
   *       connected to a VPC endpoint, your server isn't accessible over the public internet.</p>
   */
  EndpointType?: EndpointType | string;

  /**
   * <p>This value contains the message-digest algorithm (MD5) hash of the server's host key. This
   *       value is equivalent to the output of the <code>ssh-keygen -l -E md5 -f
   *         my-new-server-key</code> command.</p>
   */
  HostKeyFingerprint?: string;

  /**
   * <p>Specifies information to call a customer-supplied authentication API. This field is not
   *       populated when the <code>IdentityProviderType</code> of the server is
   *         <code>SERVICE_MANAGED</code>>.</p>
   */
  IdentityProviderDetails?: IdentityProviderDetails;

  /**
   * <p>This property defines the mode of authentication method enabled for this service. A value
   *       of <code>SERVICE_MANAGED</code> means that you are using this server to store and access SFTP
   *       user credentials within the service. A value of <code>API_GATEWAY</code> indicates that you
   *       have integrated an API Gateway endpoint that will be invoked for authenticating your user into
   *       the service.</p>
   */
  IdentityProviderType?: IdentityProviderType | string;

  /**
   * <p>This property is an AWS Identity and Access Management (IAM) entity that allows the server
   *       to turn on Amazon CloudWatch logging for Amazon S3 events. When set, user activity can be
   *       viewed in your CloudWatch logs.</p>
   */
  LoggingRole?: string;

  /**
   * <p>This property is a unique system-assigned identifier for the SFTP server that you
   *       instantiate.</p>
   */
  ServerId?: string;

  /**
   * <p>The condition of the SFTP server for the server that was described. A value of
   *         <code>ONLINE</code> indicates that the server can accept jobs and transfer files. A
   *         <code>State</code> value of <code>OFFLINE</code> means that the server cannot perform file
   *       transfer operations.</p>
   *
   *          <p>The states of <code>STARTING</code> and <code>STOPPING</code> indicate that the server is
   *       in an intermediate state, either not fully able to respond, or not fully offline. The values
   *       of <code>START_FAILED</code> or <code>STOP_FAILED</code> can indicate an error
   *       condition.</p>
   */
  State?: State | string;

  /**
   * <p>This property contains the key-value pairs that you can use to search for and group
   *       servers that were assigned to the server that was described.</p>
   */
  Tags?: Tag[];

  /**
   * <p>The number of users that are assigned to the SFTP server you specified with the
   *         <code>ServerId</code>.</p>
   */
  UserCount?: number;
}

export namespace DescribedServer {
  export const filterSensitiveLog = (obj: DescribedServer): any => ({
    ...obj,
  });
  export const isa = (o: any): o is DescribedServer => __isa(o, "DescribedServer");
}

/**
 * <p>Returns properties of the user that you want to describe.</p>
 */
export interface DescribedUser {
  __type?: "DescribedUser";
  /**
   * <p>This property contains the unique Amazon Resource Name (ARN) for the user that was
   *       requested to be described.</p>
   */
  Arn: string | undefined;

  /**
   * <p>This property specifies the landing directory (or
   *       folder),
   *       which is the location that files are written to or read from in an Amazon S3 bucket for the
   *       described user. An example is <code>/<i>your s3 bucket
   *           name</i>/home/<i>username</i>
   *             </code>.</p>
   */
  HomeDirectory?: string;

  /**
   * <p>Logical directory mappings that you specified for what S3 paths and keys should be visible
   *       to your user and how you want to make them visible. You will need to specify the
   *         "<code>Entry</code>" and "<code>Target</code>" pair, where <code>Entry</code> shows how the
   *       path is made visible and <code>Target</code> is the actual S3 path. If you only specify a
   *       target, it will be displayed as is. You will need to also make sure that your AWS IAM Role
   *       provides access to paths in <code>Target</code>.</p>
   *          <p>In most cases, you can use this value instead of the scope down policy to lock your user
   *       down to the designated home directory ("chroot"). To do this, you can set <code>Entry</code>
   *       to '/' and set <code>Target</code> to the HomeDirectory parameter value. </p>
   *          <p>In most cases, you can use this value instead of the scope down policy to lock your user
   *       down to the designated home directory ("chroot"). To do this, you can set <code>Entry</code>
   *       to '/' and set <code>Target</code> to the HomeDirectory parameter value.</p>
   */
  HomeDirectoryMappings?: HomeDirectoryMapEntry[];

  /**
   * <p>The type of landing directory (folder) you mapped for your users' to see when they log
   *       into the SFTP server. If you set it to <code>PATH</code>, the user will see the absolute
   *       Amazon S3 bucket paths as is in their SFTP clients. If you set it <code>LOGICAL</code>, you
   *       will need to provide mappings in the <code>HomeDirectoryMappings</code> for how you want to make
   *       S3 paths visible to your user.</p>
   */
  HomeDirectoryType?: HomeDirectoryType | string;

  /**
   * <p>Specifies the name of the policy in use for the described user.</p>
   */
  Policy?: string;

  /**
   * <p>This property specifies the IAM role that controls your user's access to your Amazon S3
   *       bucket. The policies attached to this role will determine the level of access you want to
   *       provide your users when transferring files into and out of your Amazon S3 bucket or buckets.
   *       The IAM role should also contain a trust relationship that allows the SFTP server to access
   *       your resources when servicing your SFTP user's transfer requests.</p>
   */
  Role?: string;

  /**
   * <p>This property contains the public key portion of the Secure Shell (SSH) keys stored for
   *       the described user.</p>
   */
  SshPublicKeys?: SshPublicKey[];

  /**
   * <p>This property contains the key-value pairs for the user requested. Tag can be used to
   *       search for and group users for a variety of purposes.</p>
   */
  Tags?: Tag[];

  /**
   * <p>This property is the name of the user that was requested to be described. User names are
   *       used for authentication purposes. This is the string that will be used by your user when they
   *       log in to your SFTP server.</p>
   */
  UserName?: string;
}

export namespace DescribedUser {
  export const filterSensitiveLog = (obj: DescribedUser): any => ({
    ...obj,
  });
  export const isa = (o: any): o is DescribedUser => __isa(o, "DescribedUser");
}

export interface DescribeServerRequest {
  __type?: "DescribeServerRequest";
  /**
   * <p>A system-assigned unique identifier for an SFTP server.</p>
   */
  ServerId: string | undefined;
}

export namespace DescribeServerRequest {
  export const filterSensitiveLog = (obj: DescribeServerRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is DescribeServerRequest => __isa(o, "DescribeServerRequest");
}

export interface DescribeServerResponse {
  __type?: "DescribeServerResponse";
  /**
   * <p>An array containing the properties of the server with the <code>ServerID</code> you
   *       specified.</p>
   */
  Server: DescribedServer | undefined;
}

export namespace DescribeServerResponse {
  export const filterSensitiveLog = (obj: DescribeServerResponse): any => ({
    ...obj,
  });
  export const isa = (o: any): o is DescribeServerResponse => __isa(o, "DescribeServerResponse");
}

export interface DescribeUserRequest {
  __type?: "DescribeUserRequest";
  /**
   * <p>A system-assigned unique identifier for an SFTP server that has this user assigned.</p>
   */
  ServerId: string | undefined;

  /**
   * <p>The name of the user assigned to one or more servers. User names are part of the sign-in
   *       credentials to use the AWS Transfer for SFTP service and perform file transfer tasks.</p>
   */
  UserName: string | undefined;
}

export namespace DescribeUserRequest {
  export const filterSensitiveLog = (obj: DescribeUserRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is DescribeUserRequest => __isa(o, "DescribeUserRequest");
}

export interface DescribeUserResponse {
  __type?: "DescribeUserResponse";
  /**
   * <p>A system-assigned unique identifier for an SFTP server that has this user assigned.</p>
   */
  ServerId: string | undefined;

  /**
   * <p>An array containing the properties of the user account for the <code>ServerID</code> value
   *       that you specified.</p>
   */
  User: DescribedUser | undefined;
}

export namespace DescribeUserResponse {
  export const filterSensitiveLog = (obj: DescribeUserResponse): any => ({
    ...obj,
  });
  export const isa = (o: any): o is DescribeUserResponse => __isa(o, "DescribeUserResponse");
}

/**
 * <p>The virtual private cloud (VPC) endpoint settings that are configured for your SFTP server.
 *       With a VPC endpoint, you can restrict access to your SFTP server and resources only within your VPC.
 *       To control incoming internet traffic, invoke the <code>UpdateServer</code> API and attach an Elastic IP to your server's endpoint. </p>
 */
export interface EndpointDetails {
  __type?: "EndpointDetails";
  /**
   * <p>A list of address allocation IDs that are required to attach an Elastic IP address to your
   *       SFTP server's endpoint. This is only valid in the <code>UpdateServer</code> API.</p>
   *          <note>
   *             <p>This property can only be use when <code>EndpointType</code> is set to
   *         <code>VPC</code>.</p>
   *          </note>
   */
  AddressAllocationIds?: string[];

  /**
   * <p>A list of subnet IDs that are required to host your SFTP server endpoint in your
   *       VPC.</p>
   */
  SubnetIds?: string[];

  /**
   * <p>The ID of the VPC endpoint.</p>
   */
  VpcEndpointId?: string;

  /**
   * <p>The VPC ID of the virtual private cloud in which the SFTP server's endpoint will be hosted.</p>
   */
  VpcId?: string;
}

export namespace EndpointDetails {
  export const filterSensitiveLog = (obj: EndpointDetails): any => ({
    ...obj,
  });
  export const isa = (o: any): o is EndpointDetails => __isa(o, "EndpointDetails");
}

export enum EndpointType {
  PUBLIC = "PUBLIC",
  VPC = "VPC",
  VPC_ENDPOINT = "VPC_ENDPOINT",
}

/**
 * <p>Represents an object that contains entries and a targets for
 *         <code>HomeDirectoryMappings</code>.</p>
 */
export interface HomeDirectoryMapEntry {
  __type?: "HomeDirectoryMapEntry";
  /**
   * <p>Represents an entry and a target for <code>HomeDirectoryMappings</code>.</p>
   */
  Entry: string | undefined;

  /**
   * <p>Represents the map target that is used in a <code>HomeDirectorymapEntry</code>.</p>
   */
  Target: string | undefined;
}

export namespace HomeDirectoryMapEntry {
  export const filterSensitiveLog = (obj: HomeDirectoryMapEntry): any => ({
    ...obj,
  });
  export const isa = (o: any): o is HomeDirectoryMapEntry => __isa(o, "HomeDirectoryMapEntry");
}

export enum HomeDirectoryType {
  LOGICAL = "LOGICAL",
  PATH = "PATH",
}

/**
 * <p>Returns information related to the type of user authentication that is in use for a
 *       server's users. A server can have only one method of authentication.</p>
 */
export interface IdentityProviderDetails {
  __type?: "IdentityProviderDetails";
  /**
   * <p>The <code>InvocationRole</code> parameter provides the type of <code>InvocationRole</code> used to
   *       authenticate the user account.</p>
   */
  InvocationRole?: string;

  /**
   * <p>The <code>Url</code> parameter provides contains the location of the service
   *       endpoint used to authenticate users.</p>
   */
  Url?: string;
}

export namespace IdentityProviderDetails {
  export const filterSensitiveLog = (obj: IdentityProviderDetails): any => ({
    ...obj,
  });
  export const isa = (o: any): o is IdentityProviderDetails => __isa(o, "IdentityProviderDetails");
}

export enum IdentityProviderType {
  API_GATEWAY = "API_GATEWAY",
  SERVICE_MANAGED = "SERVICE_MANAGED",
}

export interface ImportSshPublicKeyRequest {
  __type?: "ImportSshPublicKeyRequest";
  /**
   * <p>A system-assigned unique identifier for an SFTP server.</p>
   */
  ServerId: string | undefined;

  /**
   * <p>The public key portion of an SSH key pair.</p>
   */
  SshPublicKeyBody: string | undefined;

  /**
   * <p>The name of the user account that is assigned to one or more servers.</p>
   */
  UserName: string | undefined;
}

export namespace ImportSshPublicKeyRequest {
  export const filterSensitiveLog = (obj: ImportSshPublicKeyRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ImportSshPublicKeyRequest => __isa(o, "ImportSshPublicKeyRequest");
}

/**
 * <p>This response identifies the user, the server they belong to, and the identifier of the
 *       SSH public key associated with that user. A user can have more than one key on each server
 *       that they are associated with.</p>
 */
export interface ImportSshPublicKeyResponse {
  __type?: "ImportSshPublicKeyResponse";
  /**
   * <p>A system-assigned unique identifier for an SFTP server.</p>
   */
  ServerId: string | undefined;

  /**
   * <p>This identifier is the name given to a public key by the system that was imported.</p>
   */
  SshPublicKeyId: string | undefined;

  /**
   * <p>A user name assigned to the <code>ServerID</code> value that you specified.</p>
   */
  UserName: string | undefined;
}

export namespace ImportSshPublicKeyResponse {
  export const filterSensitiveLog = (obj: ImportSshPublicKeyResponse): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ImportSshPublicKeyResponse => __isa(o, "ImportSshPublicKeyResponse");
}

/**
 * <p>This exception is thrown when an error occurs in the AWS Transfer for SFTP service.</p>
 */
export interface InternalServiceError extends __SmithyException, $MetadataBearer {
  name: "InternalServiceError";
  $fault: "server";
  Message: string | undefined;
}

export namespace InternalServiceError {
  export const filterSensitiveLog = (obj: InternalServiceError): any => ({
    ...obj,
  });
  export const isa = (o: any): o is InternalServiceError => __isa(o, "InternalServiceError");
}

/**
 * <p>The <code>NextToken</code> parameter that was passed is invalid.</p>
 */
export interface InvalidNextTokenException extends __SmithyException, $MetadataBearer {
  name: "InvalidNextTokenException";
  $fault: "client";
  Message: string | undefined;
}

export namespace InvalidNextTokenException {
  export const filterSensitiveLog = (obj: InvalidNextTokenException): any => ({
    ...obj,
  });
  export const isa = (o: any): o is InvalidNextTokenException => __isa(o, "InvalidNextTokenException");
}

/**
 * <p>This exception is thrown when the client submits a malformed request.</p>
 */
export interface InvalidRequestException extends __SmithyException, $MetadataBearer {
  name: "InvalidRequestException";
  $fault: "client";
  Message: string | undefined;
}

export namespace InvalidRequestException {
  export const filterSensitiveLog = (obj: InvalidRequestException): any => ({
    ...obj,
  });
  export const isa = (o: any): o is InvalidRequestException => __isa(o, "InvalidRequestException");
}

/**
 * <p>Returns properties of the server that was specified.</p>
 */
export interface ListedServer {
  __type?: "ListedServer";
  /**
   * <p>The unique Amazon Resource Name (ARN) for the server to be listed.</p>
   */
  Arn: string | undefined;

  /**
   * <p>The type of VPC endpoint that your SFTP server is connected to. If your SFTP server is
   *       connected to a VPC endpoint, your server isn't accessible over the public internet.</p>
   */
  EndpointType?: EndpointType | string;

  /**
   * <p>The authentication method used to validate a user for the server that was specified. This
   *       can include Secure Shell (SSH), user name and password combinations, or your own custom
   *       authentication method. Valid values include <code>SERVICE_MANAGED</code> or
   *         <code>API_GATEWAY</code>.</p>
   */
  IdentityProviderType?: IdentityProviderType | string;

  /**
   * <p>The AWS Identity and Access Management entity that allows the server to turn on Amazon
   *       CloudWatch logging.</p>
   */
  LoggingRole?: string;

  /**
   * <p>This value is the unique system assigned identifier for the SFTP servers that were
   *       listed.</p>
   */
  ServerId?: string;

  /**
   * <p>This property describes the condition of the SFTP server for the server that was
   *       described. A value of <code>ONLINE</code>> indicates that the server can accept jobs and
   *       transfer files. A <code>State</code> value of <code>OFFLINE</code> means that the server
   *       cannot perform file transfer operations.</p>
   *
   *          <p>The states of <code>STARTING</code> and <code>STOPPING</code> indicate that the server is
   *       in an intermediate state, either not fully able to respond, or not fully offline. The values
   *       of <code>START_FAILED</code> or <code>STOP_FAILED</code> can indicate an error
   *       condition.</p>
   */
  State?: State | string;

  /**
   * <p>This property is a numeric value that indicates the number of users that are assigned to
   *       the SFTP server you specified with the <code>ServerId</code>.</p>
   */
  UserCount?: number;
}

export namespace ListedServer {
  export const filterSensitiveLog = (obj: ListedServer): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ListedServer => __isa(o, "ListedServer");
}

/**
 * <p>Returns properties of the user that you specify.</p>
 */
export interface ListedUser {
  __type?: "ListedUser";
  /**
   * <p>This property is the unique Amazon Resource Name (ARN) for the user that you want to learn
   *       about.</p>
   */
  Arn: string | undefined;

  /**
   * <p>This value specifies the location that files are written to or read from an Amazon S3
   *       bucket for the user you specify by their ARN.</p>
   */
  HomeDirectory?: string;

  /**
   * <p>The type of landing directory (folder) you mapped for your users' home directory. If you
   *       set it to <code>PATH</code>, the user will see the absolute Amazon S3 bucket paths as is in
   *       their SFTP clients. If you set it <code>LOGICAL</code>, you will need to provide mappings in
   *       the <code>HomeDirectoryMappings</code> for how you want to make S3 paths visible to your
   *       user.</p>
   */
  HomeDirectoryType?: HomeDirectoryType | string;

  /**
   * <p>The role in use by this user. A <i>role</i> is an AWS Identity and Access
   *       Management (IAM) entity
   *       that,
   *       in this
   *       case,
   *       allows the SFTP server to act on a user's behalf. It allows the server to inherit the trust
   *       relationship that enables that user to perform file operations to their Amazon S3
   *       bucket.</p>
   */
  Role?: string;

  /**
   * <p>This value is the number of SSH public keys stored for the user you specified.</p>
   */
  SshPublicKeyCount?: number;

  /**
   * <p>The name of the user whose ARN was specified. User names are used for authentication
   *       purposes.</p>
   */
  UserName?: string;
}

export namespace ListedUser {
  export const filterSensitiveLog = (obj: ListedUser): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ListedUser => __isa(o, "ListedUser");
}

export interface ListServersRequest {
  __type?: "ListServersRequest";
  /**
   * <p>Specifies the number of servers to return as a response to the <code>ListServers</code>
   *       query.</p>
   */
  MaxResults?: number;

  /**
   * <p>When additional results are obtained from the
   *         <code>ListServers</code>
   *       command, a <code>NextToken</code> parameter is returned in the output. You can then pass the
   *         <code>NextToken</code> parameter in a subsequent command to continue listing additional
   *       servers.</p>
   */
  NextToken?: string;
}

export namespace ListServersRequest {
  export const filterSensitiveLog = (obj: ListServersRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ListServersRequest => __isa(o, "ListServersRequest");
}

export interface ListServersResponse {
  __type?: "ListServersResponse";
  /**
   * <p>When you can get additional results from the <code>ListServers</code> operation, a
   *         <code>NextToken</code> parameter is returned in the output. In a following command, you can
   *       pass in the <code>NextToken</code> parameter to continue listing additional servers.</p>
   */
  NextToken?: string;

  /**
   * <p>An array of servers that were listed.</p>
   */
  Servers: ListedServer[] | undefined;
}

export namespace ListServersResponse {
  export const filterSensitiveLog = (obj: ListServersResponse): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ListServersResponse => __isa(o, "ListServersResponse");
}

export interface ListTagsForResourceRequest {
  __type?: "ListTagsForResourceRequest";
  /**
   * <p>Requests the tags associated with a particular Amazon Resource Name (ARN). An ARN is an
   *       identifier for a specific AWS resource, such as a server, user, or role.</p>
   */
  Arn: string | undefined;

  /**
   * <p>Specifies the number of tags to return as a response to the
   *         <code>ListTagsForResource</code> request.</p>
   */
  MaxResults?: number;

  /**
   * <p>When you request additional results from the <code>ListTagsForResource</code> operation, a
   *         <code>NextToken</code> parameter is returned in the input. You can then pass in a subsequent
   *       command to the <code>NextToken</code> parameter to continue listing additional tags.</p>
   */
  NextToken?: string;
}

export namespace ListTagsForResourceRequest {
  export const filterSensitiveLog = (obj: ListTagsForResourceRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ListTagsForResourceRequest => __isa(o, "ListTagsForResourceRequest");
}

export interface ListTagsForResourceResponse {
  __type?: "ListTagsForResourceResponse";
  /**
   * <p>This value is the ARN you specified to list the tags of.</p>
   */
  Arn?: string;

  /**
   * <p>When you can get additional results from the <code>ListTagsForResource</code> call, a
   *         <code>NextToken</code> parameter is returned in the output. You can then pass in a
   *       subsequent command to the <code>NextToken</code> parameter to continue listing additional
   *       tags.</p>
   */
  NextToken?: string;

  /**
   * <p>Key-value pairs that are assigned to a resource, usually for the purpose of grouping and
   *       searching for items. Tags are metadata that you define.</p>
   */
  Tags?: Tag[];
}

export namespace ListTagsForResourceResponse {
  export const filterSensitiveLog = (obj: ListTagsForResourceResponse): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ListTagsForResourceResponse => __isa(o, "ListTagsForResourceResponse");
}

export interface ListUsersRequest {
  __type?: "ListUsersRequest";
  /**
   * <p>Specifies the number of users to return as a response to the <code>ListUsers</code>
   *       request.</p>
   */
  MaxResults?: number;

  /**
   * <p>When you can get additional results from the <code>ListUsers</code> call, a
   *         <code>NextToken</code> parameter is returned in the output. You can then pass in a
   *       subsequent command to the <code>NextToken</code> parameter to continue listing additional
   *       users.</p>
   */
  NextToken?: string;

  /**
   * <p>A system-assigned unique identifier for a Secure File Transfer Protocol (SFTP) server that
   *       has users assigned to it.</p>
   */
  ServerId: string | undefined;
}

export namespace ListUsersRequest {
  export const filterSensitiveLog = (obj: ListUsersRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ListUsersRequest => __isa(o, "ListUsersRequest");
}

export interface ListUsersResponse {
  __type?: "ListUsersResponse";
  /**
   * <p>When you can get additional results from the <code>ListUsers</code> call, a
   *         <code>NextToken</code> parameter is returned in the output. You can then pass in a
   *       subsequent command to the <code>NextToken</code> parameter to continue listing additional
   *       users.</p>
   */
  NextToken?: string;

  /**
   * <p>A system-assigned unique identifier for an SFTP server that the users are assigned
   *       to.</p>
   */
  ServerId: string | undefined;

  /**
   * <p>Returns the user accounts and their properties for the <code>ServerId</code> value that
   *       you specify.</p>
   */
  Users: ListedUser[] | undefined;
}

export namespace ListUsersResponse {
  export const filterSensitiveLog = (obj: ListUsersResponse): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ListUsersResponse => __isa(o, "ListUsersResponse");
}

/**
 * <p>The requested resource does not exist.</p>
 */
export interface ResourceExistsException extends __SmithyException, $MetadataBearer {
  name: "ResourceExistsException";
  $fault: "client";
  Message: string | undefined;
  Resource: string | undefined;
  ResourceType: string | undefined;
}

export namespace ResourceExistsException {
  export const filterSensitiveLog = (obj: ResourceExistsException): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ResourceExistsException => __isa(o, "ResourceExistsException");
}

/**
 * <p>This exception is thrown when a resource is not found by the AWS Transfer for SFTP
 *       service.</p>
 */
export interface ResourceNotFoundException extends __SmithyException, $MetadataBearer {
  name: "ResourceNotFoundException";
  $fault: "client";
  Message: string | undefined;
  Resource: string | undefined;
  ResourceType: string | undefined;
}

export namespace ResourceNotFoundException {
  export const filterSensitiveLog = (obj: ResourceNotFoundException): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ResourceNotFoundException => __isa(o, "ResourceNotFoundException");
}

/**
 * <p>The request has failed because the AWS Transfer for SFTP service is not available.</p>
 */
export interface ServiceUnavailableException extends __SmithyException, $MetadataBearer {
  name: "ServiceUnavailableException";
  $fault: "server";
  Message?: string;
}

export namespace ServiceUnavailableException {
  export const filterSensitiveLog = (obj: ServiceUnavailableException): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ServiceUnavailableException => __isa(o, "ServiceUnavailableException");
}

/**
 * <p>Provides information about the public Secure Shell (SSH) key that is associated with a
 *       user account for a specific server (as identified by <code>ServerId</code>). The information
 *       returned includes the date the key was imported, the public key contents, and the public key
 *       ID. A user can store more than one SSH public key associated with their user name on a
 *       specific SFTP server.</p>
 */
export interface SshPublicKey {
  __type?: "SshPublicKey";
  /**
   * <p>The date that the public key was added to the user account.</p>
   */
  DateImported: Date | undefined;

  /**
   * <p>The content of the SSH public key as specified by the <code>PublicKeyId</code>.</p>
   */
  SshPublicKeyBody: string | undefined;

  /**
   * <p>The <code>SshPublicKeyId</code> parameter contains the identifier of the public
   *       key.</p>
   */
  SshPublicKeyId: string | undefined;
}

export namespace SshPublicKey {
  export const filterSensitiveLog = (obj: SshPublicKey): any => ({
    ...obj,
  });
  export const isa = (o: any): o is SshPublicKey => __isa(o, "SshPublicKey");
}

export interface StartServerRequest {
  __type?: "StartServerRequest";
  /**
   * <p>A system-assigned unique identifier for an SFTP server that you start.</p>
   */
  ServerId: string | undefined;
}

export namespace StartServerRequest {
  export const filterSensitiveLog = (obj: StartServerRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is StartServerRequest => __isa(o, "StartServerRequest");
}

export enum State {
  OFFLINE = "OFFLINE",
  ONLINE = "ONLINE",
  STARTING = "STARTING",
  START_FAILED = "START_FAILED",
  STOPPING = "STOPPING",
  STOP_FAILED = "STOP_FAILED",
}

export interface StopServerRequest {
  __type?: "StopServerRequest";
  /**
   * <p>A system-assigned unique identifier for an SFTP server that you stopped.</p>
   */
  ServerId: string | undefined;
}

export namespace StopServerRequest {
  export const filterSensitiveLog = (obj: StopServerRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is StopServerRequest => __isa(o, "StopServerRequest");
}

/**
 * <p>Creates a key-value pair for a specific resource. Tags are metadata that you can use to
 *       search for and group a resource for various purposes. You can apply tags to servers, users,
 *       and roles. A tag key can take more than one value. For example, to group servers for
 *       accounting purposes, you might create a tag called <code>Group</code> and assign the values
 *         <code>Research</code> and <code>Accounting</code> to that group.</p>
 */
export interface Tag {
  __type?: "Tag";
  /**
   * <p>The name assigned to the tag that you create.</p>
   */
  Key: string | undefined;

  /**
   * <p>This property contains one or more values that you assigned to the key name you
   *       create.</p>
   */
  Value: string | undefined;
}

export namespace Tag {
  export const filterSensitiveLog = (obj: Tag): any => ({
    ...obj,
  });
  export const isa = (o: any): o is Tag => __isa(o, "Tag");
}

export interface TagResourceRequest {
  __type?: "TagResourceRequest";
  /**
   * <p>An Amazon Resource Name (ARN) for a specific AWS resource, such as a server, user, or
   *       role.</p>
   */
  Arn: string | undefined;

  /**
   * <p>Key-value pairs assigned to ARNs that you can use to group and search for resources by
   *       type. You can attach this metadata to user accounts for any purpose.</p>
   */
  Tags: Tag[] | undefined;
}

export namespace TagResourceRequest {
  export const filterSensitiveLog = (obj: TagResourceRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is TagResourceRequest => __isa(o, "TagResourceRequest");
}

export interface TestIdentityProviderRequest {
  __type?: "TestIdentityProviderRequest";
  /**
   * <p>A system-assigned identifier for a specific server. That server's user authentication
   *       method is tested with a user name and password.</p>
   */
  ServerId: string | undefined;

  /**
   * <p>This request parameter is the name of the user account to be tested.</p>
   */
  UserName: string | undefined;

  /**
   * <p>The password of the user account to be tested.</p>
   */
  UserPassword?: string;
}

export namespace TestIdentityProviderRequest {
  export const filterSensitiveLog = (obj: TestIdentityProviderRequest): any => ({
    ...obj,
    ...(obj.UserPassword && { UserPassword: SENSITIVE_STRING }),
  });
  export const isa = (o: any): o is TestIdentityProviderRequest => __isa(o, "TestIdentityProviderRequest");
}

export interface TestIdentityProviderResponse {
  __type?: "TestIdentityProviderResponse";
  /**
   * <p>A message that indicates whether the test was successful or not. </p>
   */
  Message?: string;

  /**
   * <p>The response that is returned from your API Gateway.</p>
   */
  Response?: string;

  /**
   * <p>The HTTP status code that is the response from your API Gateway.</p>
   */
  StatusCode: number | undefined;

  /**
   * <p>The endpoint of the service used to authenticate a user.</p>
   */
  Url: string | undefined;
}

export namespace TestIdentityProviderResponse {
  export const filterSensitiveLog = (obj: TestIdentityProviderResponse): any => ({
    ...obj,
  });
  export const isa = (o: any): o is TestIdentityProviderResponse => __isa(o, "TestIdentityProviderResponse");
}

/**
 * <p>The request was denied due to request throttling.</p>
 *          <p> HTTP Status Code: 400</p>
 */
export interface ThrottlingException extends __SmithyException, $MetadataBearer {
  name: "ThrottlingException";
  $fault: "client";
  RetryAfterSeconds?: string;
}

export namespace ThrottlingException {
  export const filterSensitiveLog = (obj: ThrottlingException): any => ({
    ...obj,
  });
  export const isa = (o: any): o is ThrottlingException => __isa(o, "ThrottlingException");
}

export interface UntagResourceRequest {
  __type?: "UntagResourceRequest";
  /**
   * <p>This is the value of the resource that will have the tag removed. An Amazon Resource Name
   *       (ARN) is an identifier for a specific AWS resource, such as a server, user, or role.</p>
   */
  Arn: string | undefined;

  /**
   * <p>TagKeys are key-value pairs assigned to ARNs that can be used to group and search for
   *       resources by type. This metadata can be attached to resources for any purpose.</p>
   */
  TagKeys: string[] | undefined;
}

export namespace UntagResourceRequest {
  export const filterSensitiveLog = (obj: UntagResourceRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is UntagResourceRequest => __isa(o, "UntagResourceRequest");
}

export interface UpdateServerRequest {
  __type?: "UpdateServerRequest";
  /**
   * <p>The virtual private cloud (VPC) endpoint settings that are configured for your SFTP server.
   *       With a VPC endpoint, you can restrict access to your SFTP server to resources only within your VPC.
   *       To control incoming internet traffic, you will need to associate one or more Elastic IP addresses with  your server's endpoint. </p>
   */
  EndpointDetails?: EndpointDetails;

  /**
   * <p>The type of endpoint that you want your SFTP server to connect to. You can choose to
   *       connect to the public internet or a virtual private cloud (VPC) endpoint. With a VPC endpoint,
   *       your SFTP server isn't accessible over the public internet. </p>
   */
  EndpointType?: EndpointType | string;

  /**
   * <p>The RSA private key as generated by <code>ssh-keygen -N "" -f my-new-server-key</code>.</p>
   *
   *          <important>
   *             <p>If you aren't planning to migrate existing users from an existing SFTP server to a new
   *       AWS SFTP server, don't update the host key. Accidentally changing a server's host
   *       key can be disruptive.</p>
   *          </important>
   *
   *          <p> For more information, see "https://docs.aws.amazon.com/transfer/latest/userguide/configuring-servers.html#change-host-key" in the <i>AWS SFTP User Guide.</i>
   *          </p>
   */
  HostKey?: string;

  /**
   * <p>This response parameter is an array containing all of the information required to call a
   *       customer's authentication API method.</p>
   */
  IdentityProviderDetails?: IdentityProviderDetails;

  /**
   * <p>A value that changes the AWS Identity and Access Management (IAM) role that allows Amazon S3 events to
   *       be logged in Amazon CloudWatch, turning logging on or off.</p>
   */
  LoggingRole?: string;

  /**
   * <p>A system-assigned unique identifier for an SFTP server instance that the user account is
   *       assigned to.</p>
   */
  ServerId: string | undefined;
}

export namespace UpdateServerRequest {
  export const filterSensitiveLog = (obj: UpdateServerRequest): any => ({
    ...obj,
    ...(obj.HostKey && { HostKey: SENSITIVE_STRING }),
  });
  export const isa = (o: any): o is UpdateServerRequest => __isa(o, "UpdateServerRequest");
}

export interface UpdateServerResponse {
  __type?: "UpdateServerResponse";
  /**
   * <p>A system-assigned unique identifier for an SFTP server that the user account is assigned
   *       to.</p>
   */
  ServerId: string | undefined;
}

export namespace UpdateServerResponse {
  export const filterSensitiveLog = (obj: UpdateServerResponse): any => ({
    ...obj,
  });
  export const isa = (o: any): o is UpdateServerResponse => __isa(o, "UpdateServerResponse");
}

export interface UpdateUserRequest {
  __type?: "UpdateUserRequest";
  /**
   * <p>A parameter that specifies the landing directory (folder) for a user when they log in to
   *       the server using their client. </p>
   *          <p>An example is <code><your-Amazon-S3-bucket-name>/home/username</code>.</p>
   */
  HomeDirectory?: string;

  /**
   * <p>Logical directory mappings that specify what S3 paths and keys should be visible to your
   *       user and how you want to make them visible. You will need to specify the "<code>Entry</code>"
   *       and "<code>Target</code>" pair, where <code>Entry</code> shows how the path is made visible
   *       and <code>Target</code> is the actual S3 path. If you only specify a target, it will be
   *       displayed as is. You will need to also make sure that your AWS IAM Role provides access to
   *       paths in <code>Target</code>. The following is an example.</p>
   *          <p>
   *             <code>'[ "/bucket2/documentation", { "Entry": "your-personal-report.pdf", "Target":
   *         "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]'</code>
   *          </p>
   *          <p>In most cases, you can use this value instead of the scope down policy to lock your user
   *       down to the designated home directory ("chroot"). To do this, you can set <code>Entry</code>
   *       to '/' and set <code>Target</code> to the HomeDirectory parameter value. </p>
   *          <note>
   *             <p>If the target of a logical directory entry does not exist in S3, the entry will be ignored. As
   *       a workaround, you can use the S3 api to create 0 byte objects as place holders for your
   *       directory. If using the CLI, use the s3api call instead of s3 so you can use the put-object
   *       operation. For example, you use the following: <code>aws s3api put-object --bucket
   *         bucketname --key path/to/folder/</code>.  Make sure that the end of the key name ends in a
   *       / for it to be considered a folder. </p>
   *
   *          </note>
   */
  HomeDirectoryMappings?: HomeDirectoryMapEntry[];

  /**
   * <p>The type of landing directory (folder) you want your users' home directory to be when they
   *       log into the SFTP serve. If you set it to <code>PATH</code>, the user will see the absolute
   *       Amazon S3 bucket paths as is in their SFTP clients. If you set it <code>LOGICAL</code>, you
   *       will need to provide mappings in the <code>HomeDirectoryMappings</code> for how you want to make
   *       S3 paths visible to your user.</p>
   */
  HomeDirectoryType?: HomeDirectoryType | string;

  /**
   * <p>Allows you to supply a scope-down policy for your user so you can use the same AWS
   *       Identity and Access Management (IAM) role across multiple users. The policy scopes down user
   *       access to portions of your Amazon S3 bucket. Variables you can use inside this policy include
   *         <code>${Transfer:UserName}</code>, <code>${Transfer:HomeDirectory}</code>, and
   *         <code>${Transfer:HomeBucket}</code>.</p>
   *          <note>
   *             <p>For scope-down policies, AWS Transfer for SFTP stores the policy as a JSON blob, instead
   *         of the Amazon Resource Name (ARN) of the policy. You save the policy as a JSON blob and pass
   *         it in the <code>Policy</code> argument.</p>
   *
   *             <p>For an example of a scope-down policy, see "https://docs.aws.amazon.com/transfer/latest/userguide/users.html#users-policies-scope-down">Creating a Scope-Down Policy.</p>
   *
   *
   *             <p>For more information, see
   *         "https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html" in the
   *         <i>AWS Security Token Service API Reference</i>.</p>
   *          </note>
   */
  Policy?: string;

  /**
   * <p>The IAM role that controls your user's access to your Amazon S3 bucket. The policies
   *       attached to this role will determine the level of access you want to provide your users when
   *       transferring files into and out of your Amazon S3 bucket or buckets. The IAM role should also
   *       contain a trust relationship that allows the Secure File Transfer Protocol (SFTP) server to
   *       access your resources when servicing your SFTP user's transfer requests.</p>
   */
  Role?: string;

  /**
   * <p>A system-assigned unique identifier for an SFTP server instance that the user account is
   *       assigned to.</p>
   */
  ServerId: string | undefined;

  /**
   * <p>A unique string that identifies a user and is associated with a server as specified by the
   *         <code>ServerId</code>. This is the string that will be used by your user when they log in to
   *       your SFTP server. This user name is a minimum of 3 and a maximum of 32 characters long. The
   *       following are valid characters: a-z, A-Z, 0-9, underscore, and hyphen. The user name can't
   *       start with a hyphen.</p>
   */
  UserName: string | undefined;
}

export namespace UpdateUserRequest {
  export const filterSensitiveLog = (obj: UpdateUserRequest): any => ({
    ...obj,
  });
  export const isa = (o: any): o is UpdateUserRequest => __isa(o, "UpdateUserRequest");
}

/**
 * <p>
 *             <code>UpdateUserResponse</code> returns the user name and server identifier for the
 *       request to update a user's properties.</p>
 */
export interface UpdateUserResponse {
  __type?: "UpdateUserResponse";
  /**
   * <p>A system-assigned unique identifier for an SFTP server instance that the user account is
   *       assigned to.</p>
   */
  ServerId: string | undefined;

  /**
   * <p>The unique identifier for a user that is assigned to the SFTP server instance that was
   *       specified in the request.</p>
   */
  UserName: string | undefined;
}

export namespace UpdateUserResponse {
  export const filterSensitiveLog = (obj: UpdateUserResponse): any => ({
    ...obj,
  });
  export const isa = (o: any): o is UpdateUserResponse => __isa(o, "UpdateUserResponse");
}
