// smithy-typescript generated code
import { EndpointParameterInstructions, getEndpointPlugin } from "@aws-sdk/middleware-endpoint";
import { getSerdePlugin } from "@aws-sdk/middleware-serde";
import { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from "@aws-sdk/protocol-http";
import { Command as $Command } from "@aws-sdk/smithy-client";
import {
  FinalizeHandlerArguments,
  Handler,
  HandlerExecutionContext,
  HttpHandlerOptions as __HttpHandlerOptions,
  MetadataBearer as __MetadataBearer,
  MiddlewareStack,
  SerdeContext as __SerdeContext,
} from "@aws-sdk/types";

import { ConfigServiceClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../ConfigServiceClient";
import { PutConfigRuleRequest, PutConfigRuleRequestFilterSensitiveLog } from "../models/models_1";
import {
  deserializeAws_json1_1PutConfigRuleCommand,
  serializeAws_json1_1PutConfigRuleCommand,
} from "../protocols/Aws_json1_1";

export interface PutConfigRuleCommandInput extends PutConfigRuleRequest {}
export interface PutConfigRuleCommandOutput extends __MetadataBearer {}

/**
 * <p>Adds or updates an Config rule to evaluate if your
 * 			Amazon Web Services resources comply with your desired configurations. For information on how many Config rules you can have per account,
 * 			see <a href="https://docs.aws.amazon.com/config/latest/developerguide/configlimits.html">
 *                <b>Service Limits</b>
 *             </a> in the <i>Config Developer Guide</i>.</p>
 *
 * 		       <p>There are two types of rules: Config Custom Rules and Config Managed Rules.
 * 			You can use <code>PutConfigRule</code> to create both Config custom rules and Config managed rules.</p>
 *
 * 		       <p>Custom rules are rules that you can create using either Guard or Lambda functions.
 * 			Guard (<a href="https://github.com/aws-cloudformation/cloudformation-guard">Guard GitHub
 * 				Repository</a>) is a policy-as-code language that allows you to write policies that
 * 			are enforced by Config Custom Policy rules. Lambda uses custom code that you upload to
 * 			evaluate a custom rule. If you are adding a new Custom Lambda rule,
 * 			you first need to create an Lambda function that the rule invokes to evaluate
 * 			your resources. When you use <code>PutConfigRule</code> to add a Custom Lambda rule to Config, you must specify the Amazon Resource
 * 			Name (ARN) that Lambda assigns to the function. You specify the ARN
 * 			in the <code>SourceIdentifier</code> key. This key is part of the
 * 			<code>Source</code> object, which is part of the
 * 			<code>ConfigRule</code> object. </p>
 *
 * 		       <p>Managed rules are predefined,
 * 			customizable rules created by Config. For a list of managed rules, see
 * 			<a href="https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html">List of Config
 * 				Managed Rules</a>. If you are adding an Config managed rule, you must specify the
 * 			rule's identifier for the <code>SourceIdentifier</code> key.</p>
 *
 * 		       <p>For any new rule that you add, specify the
 * 				<code>ConfigRuleName</code> in the <code>ConfigRule</code>
 * 			object. Do not specify the <code>ConfigRuleArn</code> or the
 * 			<code>ConfigRuleId</code>. These values are generated by Config for new rules.</p>
 * 		       <p>If you are updating a rule that you added previously, you can
 * 			specify the rule by <code>ConfigRuleName</code>,
 * 				<code>ConfigRuleId</code>, or <code>ConfigRuleArn</code> in the
 * 				<code>ConfigRule</code> data type that you use in this
 * 			request.</p>
 *
 * 		       <p>For more information about developing and using Config
 * 			rules, see <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config.html">Evaluating Amazon Web Services resource Configurations with Config</a>
 * 			in the <i>Config Developer Guide</i>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { ConfigServiceClient, PutConfigRuleCommand } from "@aws-sdk/client-config-service"; // ES Modules import
 * // const { ConfigServiceClient, PutConfigRuleCommand } = require("@aws-sdk/client-config-service"); // CommonJS import
 * const client = new ConfigServiceClient(config);
 * const command = new PutConfigRuleCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link PutConfigRuleCommandInput} for command's `input` shape.
 * @see {@link PutConfigRuleCommandOutput} for command's `response` shape.
 * @see {@link ConfigServiceClientResolvedConfig | config} for ConfigServiceClient's `config` shape.
 *
 */
export class PutConfigRuleCommand extends $Command<
  PutConfigRuleCommandInput,
  PutConfigRuleCommandOutput,
  ConfigServiceClientResolvedConfig
> {
  // Start section: command_properties
  // End section: command_properties

  public static getEndpointParameterInstructions(): EndpointParameterInstructions {
    return {
      UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
      Endpoint: { type: "builtInParams", name: "endpoint" },
      Region: { type: "builtInParams", name: "region" },
      UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
    };
  }

  constructor(readonly input: PutConfigRuleCommandInput) {
    // Start section: command_constructor
    super();
    // End section: command_constructor
  }

  /**
   * @internal
   */
  resolveMiddleware(
    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,
    configuration: ConfigServiceClientResolvedConfig,
    options?: __HttpHandlerOptions
  ): Handler<PutConfigRuleCommandInput, PutConfigRuleCommandOutput> {
    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
    this.middlewareStack.use(getEndpointPlugin(configuration, PutConfigRuleCommand.getEndpointParameterInstructions()));

    const stack = clientStack.concat(this.middlewareStack);

    const { logger } = configuration;
    const clientName = "ConfigServiceClient";
    const commandName = "PutConfigRuleCommand";
    const handlerExecutionContext: HandlerExecutionContext = {
      logger,
      clientName,
      commandName,
      inputFilterSensitiveLog: PutConfigRuleRequestFilterSensitiveLog,
      outputFilterSensitiveLog: (output: any) => output,
    };
    const { requestHandler } = configuration;
    return stack.resolve(
      (request: FinalizeHandlerArguments<any>) =>
        requestHandler.handle(request.request as __HttpRequest, options || {}),
      handlerExecutionContext
    );
  }

  private serialize(input: PutConfigRuleCommandInput, context: __SerdeContext): Promise<__HttpRequest> {
    return serializeAws_json1_1PutConfigRuleCommand(input, context);
  }

  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PutConfigRuleCommandOutput> {
    return deserializeAws_json1_1PutConfigRuleCommand(output, context);
  }

  // Start section: command_body_extra
  // End section: command_body_extra
}
