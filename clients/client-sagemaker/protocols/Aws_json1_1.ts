import { AddAssociationCommandInput, AddAssociationCommandOutput } from "../commands/AddAssociationCommand";
import { AddTagsCommandInput, AddTagsCommandOutput } from "../commands/AddTagsCommand";
import {
  AssociateTrialComponentCommandInput,
  AssociateTrialComponentCommandOutput,
} from "../commands/AssociateTrialComponentCommand";
import { CreateActionCommandInput, CreateActionCommandOutput } from "../commands/CreateActionCommand";
import { CreateAlgorithmCommandInput, CreateAlgorithmCommandOutput } from "../commands/CreateAlgorithmCommand";
import { CreateAppCommandInput, CreateAppCommandOutput } from "../commands/CreateAppCommand";
import {
  CreateAppImageConfigCommandInput,
  CreateAppImageConfigCommandOutput,
} from "../commands/CreateAppImageConfigCommand";
import { CreateArtifactCommandInput, CreateArtifactCommandOutput } from "../commands/CreateArtifactCommand";
import { CreateAutoMLJobCommandInput, CreateAutoMLJobCommandOutput } from "../commands/CreateAutoMLJobCommand";
import {
  CreateCodeRepositoryCommandInput,
  CreateCodeRepositoryCommandOutput,
} from "../commands/CreateCodeRepositoryCommand";
import {
  CreateCompilationJobCommandInput,
  CreateCompilationJobCommandOutput,
} from "../commands/CreateCompilationJobCommand";
import { CreateContextCommandInput, CreateContextCommandOutput } from "../commands/CreateContextCommand";
import {
  CreateDataQualityJobDefinitionCommandInput,
  CreateDataQualityJobDefinitionCommandOutput,
} from "../commands/CreateDataQualityJobDefinitionCommand";
import { CreateDeviceFleetCommandInput, CreateDeviceFleetCommandOutput } from "../commands/CreateDeviceFleetCommand";
import { CreateDomainCommandInput, CreateDomainCommandOutput } from "../commands/CreateDomainCommand";
import {
  CreateEdgePackagingJobCommandInput,
  CreateEdgePackagingJobCommandOutput,
} from "../commands/CreateEdgePackagingJobCommand";
import { CreateEndpointCommandInput, CreateEndpointCommandOutput } from "../commands/CreateEndpointCommand";
import {
  CreateEndpointConfigCommandInput,
  CreateEndpointConfigCommandOutput,
} from "../commands/CreateEndpointConfigCommand";
import { CreateExperimentCommandInput, CreateExperimentCommandOutput } from "../commands/CreateExperimentCommand";
import { CreateFeatureGroupCommandInput, CreateFeatureGroupCommandOutput } from "../commands/CreateFeatureGroupCommand";
import {
  CreateFlowDefinitionCommandInput,
  CreateFlowDefinitionCommandOutput,
} from "../commands/CreateFlowDefinitionCommand";
import { CreateHumanTaskUiCommandInput, CreateHumanTaskUiCommandOutput } from "../commands/CreateHumanTaskUiCommand";
import {
  CreateHyperParameterTuningJobCommandInput,
  CreateHyperParameterTuningJobCommandOutput,
} from "../commands/CreateHyperParameterTuningJobCommand";
import { CreateImageCommandInput, CreateImageCommandOutput } from "../commands/CreateImageCommand";
import { CreateImageVersionCommandInput, CreateImageVersionCommandOutput } from "../commands/CreateImageVersionCommand";
import { CreateLabelingJobCommandInput, CreateLabelingJobCommandOutput } from "../commands/CreateLabelingJobCommand";
import {
  CreateModelBiasJobDefinitionCommandInput,
  CreateModelBiasJobDefinitionCommandOutput,
} from "../commands/CreateModelBiasJobDefinitionCommand";
import { CreateModelCommandInput, CreateModelCommandOutput } from "../commands/CreateModelCommand";
import {
  CreateModelExplainabilityJobDefinitionCommandInput,
  CreateModelExplainabilityJobDefinitionCommandOutput,
} from "../commands/CreateModelExplainabilityJobDefinitionCommand";
import { CreateModelPackageCommandInput, CreateModelPackageCommandOutput } from "../commands/CreateModelPackageCommand";
import {
  CreateModelPackageGroupCommandInput,
  CreateModelPackageGroupCommandOutput,
} from "../commands/CreateModelPackageGroupCommand";
import {
  CreateModelQualityJobDefinitionCommandInput,
  CreateModelQualityJobDefinitionCommandOutput,
} from "../commands/CreateModelQualityJobDefinitionCommand";
import {
  CreateMonitoringScheduleCommandInput,
  CreateMonitoringScheduleCommandOutput,
} from "../commands/CreateMonitoringScheduleCommand";
import {
  CreateNotebookInstanceCommandInput,
  CreateNotebookInstanceCommandOutput,
} from "../commands/CreateNotebookInstanceCommand";
import {
  CreateNotebookInstanceLifecycleConfigCommandInput,
  CreateNotebookInstanceLifecycleConfigCommandOutput,
} from "../commands/CreateNotebookInstanceLifecycleConfigCommand";
import { CreatePipelineCommandInput, CreatePipelineCommandOutput } from "../commands/CreatePipelineCommand";
import {
  CreatePresignedDomainUrlCommandInput,
  CreatePresignedDomainUrlCommandOutput,
} from "../commands/CreatePresignedDomainUrlCommand";
import {
  CreatePresignedNotebookInstanceUrlCommandInput,
  CreatePresignedNotebookInstanceUrlCommandOutput,
} from "../commands/CreatePresignedNotebookInstanceUrlCommand";
import {
  CreateProcessingJobCommandInput,
  CreateProcessingJobCommandOutput,
} from "../commands/CreateProcessingJobCommand";
import { CreateProjectCommandInput, CreateProjectCommandOutput } from "../commands/CreateProjectCommand";
import { CreateTrainingJobCommandInput, CreateTrainingJobCommandOutput } from "../commands/CreateTrainingJobCommand";
import { CreateTransformJobCommandInput, CreateTransformJobCommandOutput } from "../commands/CreateTransformJobCommand";
import { CreateTrialCommandInput, CreateTrialCommandOutput } from "../commands/CreateTrialCommand";
import {
  CreateTrialComponentCommandInput,
  CreateTrialComponentCommandOutput,
} from "../commands/CreateTrialComponentCommand";
import { CreateUserProfileCommandInput, CreateUserProfileCommandOutput } from "../commands/CreateUserProfileCommand";
import { CreateWorkforceCommandInput, CreateWorkforceCommandOutput } from "../commands/CreateWorkforceCommand";
import { CreateWorkteamCommandInput, CreateWorkteamCommandOutput } from "../commands/CreateWorkteamCommand";
import { DeleteActionCommandInput, DeleteActionCommandOutput } from "../commands/DeleteActionCommand";
import { DeleteAlgorithmCommandInput, DeleteAlgorithmCommandOutput } from "../commands/DeleteAlgorithmCommand";
import { DeleteAppCommandInput, DeleteAppCommandOutput } from "../commands/DeleteAppCommand";
import {
  DeleteAppImageConfigCommandInput,
  DeleteAppImageConfigCommandOutput,
} from "../commands/DeleteAppImageConfigCommand";
import { DeleteArtifactCommandInput, DeleteArtifactCommandOutput } from "../commands/DeleteArtifactCommand";
import { DeleteAssociationCommandInput, DeleteAssociationCommandOutput } from "../commands/DeleteAssociationCommand";
import {
  DeleteCodeRepositoryCommandInput,
  DeleteCodeRepositoryCommandOutput,
} from "../commands/DeleteCodeRepositoryCommand";
import { DeleteContextCommandInput, DeleteContextCommandOutput } from "../commands/DeleteContextCommand";
import {
  DeleteDataQualityJobDefinitionCommandInput,
  DeleteDataQualityJobDefinitionCommandOutput,
} from "../commands/DeleteDataQualityJobDefinitionCommand";
import { DeleteDeviceFleetCommandInput, DeleteDeviceFleetCommandOutput } from "../commands/DeleteDeviceFleetCommand";
import { DeleteDomainCommandInput, DeleteDomainCommandOutput } from "../commands/DeleteDomainCommand";
import { DeleteEndpointCommandInput, DeleteEndpointCommandOutput } from "../commands/DeleteEndpointCommand";
import {
  DeleteEndpointConfigCommandInput,
  DeleteEndpointConfigCommandOutput,
} from "../commands/DeleteEndpointConfigCommand";
import { DeleteExperimentCommandInput, DeleteExperimentCommandOutput } from "../commands/DeleteExperimentCommand";
import { DeleteFeatureGroupCommandInput, DeleteFeatureGroupCommandOutput } from "../commands/DeleteFeatureGroupCommand";
import {
  DeleteFlowDefinitionCommandInput,
  DeleteFlowDefinitionCommandOutput,
} from "../commands/DeleteFlowDefinitionCommand";
import { DeleteHumanTaskUiCommandInput, DeleteHumanTaskUiCommandOutput } from "../commands/DeleteHumanTaskUiCommand";
import { DeleteImageCommandInput, DeleteImageCommandOutput } from "../commands/DeleteImageCommand";
import { DeleteImageVersionCommandInput, DeleteImageVersionCommandOutput } from "../commands/DeleteImageVersionCommand";
import {
  DeleteModelBiasJobDefinitionCommandInput,
  DeleteModelBiasJobDefinitionCommandOutput,
} from "../commands/DeleteModelBiasJobDefinitionCommand";
import { DeleteModelCommandInput, DeleteModelCommandOutput } from "../commands/DeleteModelCommand";
import {
  DeleteModelExplainabilityJobDefinitionCommandInput,
  DeleteModelExplainabilityJobDefinitionCommandOutput,
} from "../commands/DeleteModelExplainabilityJobDefinitionCommand";
import { DeleteModelPackageCommandInput, DeleteModelPackageCommandOutput } from "../commands/DeleteModelPackageCommand";
import {
  DeleteModelPackageGroupCommandInput,
  DeleteModelPackageGroupCommandOutput,
} from "../commands/DeleteModelPackageGroupCommand";
import {
  DeleteModelPackageGroupPolicyCommandInput,
  DeleteModelPackageGroupPolicyCommandOutput,
} from "../commands/DeleteModelPackageGroupPolicyCommand";
import {
  DeleteModelQualityJobDefinitionCommandInput,
  DeleteModelQualityJobDefinitionCommandOutput,
} from "../commands/DeleteModelQualityJobDefinitionCommand";
import {
  DeleteMonitoringScheduleCommandInput,
  DeleteMonitoringScheduleCommandOutput,
} from "../commands/DeleteMonitoringScheduleCommand";
import {
  DeleteNotebookInstanceCommandInput,
  DeleteNotebookInstanceCommandOutput,
} from "../commands/DeleteNotebookInstanceCommand";
import {
  DeleteNotebookInstanceLifecycleConfigCommandInput,
  DeleteNotebookInstanceLifecycleConfigCommandOutput,
} from "../commands/DeleteNotebookInstanceLifecycleConfigCommand";
import { DeletePipelineCommandInput, DeletePipelineCommandOutput } from "../commands/DeletePipelineCommand";
import { DeleteProjectCommandInput, DeleteProjectCommandOutput } from "../commands/DeleteProjectCommand";
import { DeleteTagsCommandInput, DeleteTagsCommandOutput } from "../commands/DeleteTagsCommand";
import { DeleteTrialCommandInput, DeleteTrialCommandOutput } from "../commands/DeleteTrialCommand";
import {
  DeleteTrialComponentCommandInput,
  DeleteTrialComponentCommandOutput,
} from "../commands/DeleteTrialComponentCommand";
import { DeleteUserProfileCommandInput, DeleteUserProfileCommandOutput } from "../commands/DeleteUserProfileCommand";
import { DeleteWorkforceCommandInput, DeleteWorkforceCommandOutput } from "../commands/DeleteWorkforceCommand";
import { DeleteWorkteamCommandInput, DeleteWorkteamCommandOutput } from "../commands/DeleteWorkteamCommand";
import { DeregisterDevicesCommandInput, DeregisterDevicesCommandOutput } from "../commands/DeregisterDevicesCommand";
import { DescribeActionCommandInput, DescribeActionCommandOutput } from "../commands/DescribeActionCommand";
import { DescribeAlgorithmCommandInput, DescribeAlgorithmCommandOutput } from "../commands/DescribeAlgorithmCommand";
import { DescribeAppCommandInput, DescribeAppCommandOutput } from "../commands/DescribeAppCommand";
import {
  DescribeAppImageConfigCommandInput,
  DescribeAppImageConfigCommandOutput,
} from "../commands/DescribeAppImageConfigCommand";
import { DescribeArtifactCommandInput, DescribeArtifactCommandOutput } from "../commands/DescribeArtifactCommand";
import { DescribeAutoMLJobCommandInput, DescribeAutoMLJobCommandOutput } from "../commands/DescribeAutoMLJobCommand";
import {
  DescribeCodeRepositoryCommandInput,
  DescribeCodeRepositoryCommandOutput,
} from "../commands/DescribeCodeRepositoryCommand";
import {
  DescribeCompilationJobCommandInput,
  DescribeCompilationJobCommandOutput,
} from "../commands/DescribeCompilationJobCommand";
import { DescribeContextCommandInput, DescribeContextCommandOutput } from "../commands/DescribeContextCommand";
import {
  DescribeDataQualityJobDefinitionCommandInput,
  DescribeDataQualityJobDefinitionCommandOutput,
} from "../commands/DescribeDataQualityJobDefinitionCommand";
import { DescribeDeviceCommandInput, DescribeDeviceCommandOutput } from "../commands/DescribeDeviceCommand";
import {
  DescribeDeviceFleetCommandInput,
  DescribeDeviceFleetCommandOutput,
} from "../commands/DescribeDeviceFleetCommand";
import { DescribeDomainCommandInput, DescribeDomainCommandOutput } from "../commands/DescribeDomainCommand";
import {
  DescribeEdgePackagingJobCommandInput,
  DescribeEdgePackagingJobCommandOutput,
} from "../commands/DescribeEdgePackagingJobCommand";
import { DescribeEndpointCommandInput, DescribeEndpointCommandOutput } from "../commands/DescribeEndpointCommand";
import {
  DescribeEndpointConfigCommandInput,
  DescribeEndpointConfigCommandOutput,
} from "../commands/DescribeEndpointConfigCommand";
import { DescribeExperimentCommandInput, DescribeExperimentCommandOutput } from "../commands/DescribeExperimentCommand";
import {
  DescribeFeatureGroupCommandInput,
  DescribeFeatureGroupCommandOutput,
} from "../commands/DescribeFeatureGroupCommand";
import {
  DescribeFlowDefinitionCommandInput,
  DescribeFlowDefinitionCommandOutput,
} from "../commands/DescribeFlowDefinitionCommand";
import {
  DescribeHumanTaskUiCommandInput,
  DescribeHumanTaskUiCommandOutput,
} from "../commands/DescribeHumanTaskUiCommand";
import {
  DescribeHyperParameterTuningJobCommandInput,
  DescribeHyperParameterTuningJobCommandOutput,
} from "../commands/DescribeHyperParameterTuningJobCommand";
import { DescribeImageCommandInput, DescribeImageCommandOutput } from "../commands/DescribeImageCommand";
import {
  DescribeImageVersionCommandInput,
  DescribeImageVersionCommandOutput,
} from "../commands/DescribeImageVersionCommand";
import {
  DescribeLabelingJobCommandInput,
  DescribeLabelingJobCommandOutput,
} from "../commands/DescribeLabelingJobCommand";
import {
  DescribeModelBiasJobDefinitionCommandInput,
  DescribeModelBiasJobDefinitionCommandOutput,
} from "../commands/DescribeModelBiasJobDefinitionCommand";
import { DescribeModelCommandInput, DescribeModelCommandOutput } from "../commands/DescribeModelCommand";
import {
  DescribeModelExplainabilityJobDefinitionCommandInput,
  DescribeModelExplainabilityJobDefinitionCommandOutput,
} from "../commands/DescribeModelExplainabilityJobDefinitionCommand";
import {
  DescribeModelPackageCommandInput,
  DescribeModelPackageCommandOutput,
} from "../commands/DescribeModelPackageCommand";
import {
  DescribeModelPackageGroupCommandInput,
  DescribeModelPackageGroupCommandOutput,
} from "../commands/DescribeModelPackageGroupCommand";
import {
  DescribeModelQualityJobDefinitionCommandInput,
  DescribeModelQualityJobDefinitionCommandOutput,
} from "../commands/DescribeModelQualityJobDefinitionCommand";
import {
  DescribeMonitoringScheduleCommandInput,
  DescribeMonitoringScheduleCommandOutput,
} from "../commands/DescribeMonitoringScheduleCommand";
import {
  DescribeNotebookInstanceCommandInput,
  DescribeNotebookInstanceCommandOutput,
} from "../commands/DescribeNotebookInstanceCommand";
import {
  DescribeNotebookInstanceLifecycleConfigCommandInput,
  DescribeNotebookInstanceLifecycleConfigCommandOutput,
} from "../commands/DescribeNotebookInstanceLifecycleConfigCommand";
import { DescribePipelineCommandInput, DescribePipelineCommandOutput } from "../commands/DescribePipelineCommand";
import {
  DescribePipelineDefinitionForExecutionCommandInput,
  DescribePipelineDefinitionForExecutionCommandOutput,
} from "../commands/DescribePipelineDefinitionForExecutionCommand";
import {
  DescribePipelineExecutionCommandInput,
  DescribePipelineExecutionCommandOutput,
} from "../commands/DescribePipelineExecutionCommand";
import {
  DescribeProcessingJobCommandInput,
  DescribeProcessingJobCommandOutput,
} from "../commands/DescribeProcessingJobCommand";
import { DescribeProjectCommandInput, DescribeProjectCommandOutput } from "../commands/DescribeProjectCommand";
import {
  DescribeSubscribedWorkteamCommandInput,
  DescribeSubscribedWorkteamCommandOutput,
} from "../commands/DescribeSubscribedWorkteamCommand";
import {
  DescribeTrainingJobCommandInput,
  DescribeTrainingJobCommandOutput,
} from "../commands/DescribeTrainingJobCommand";
import {
  DescribeTransformJobCommandInput,
  DescribeTransformJobCommandOutput,
} from "../commands/DescribeTransformJobCommand";
import { DescribeTrialCommandInput, DescribeTrialCommandOutput } from "../commands/DescribeTrialCommand";
import {
  DescribeTrialComponentCommandInput,
  DescribeTrialComponentCommandOutput,
} from "../commands/DescribeTrialComponentCommand";
import {
  DescribeUserProfileCommandInput,
  DescribeUserProfileCommandOutput,
} from "../commands/DescribeUserProfileCommand";
import { DescribeWorkforceCommandInput, DescribeWorkforceCommandOutput } from "../commands/DescribeWorkforceCommand";
import { DescribeWorkteamCommandInput, DescribeWorkteamCommandOutput } from "../commands/DescribeWorkteamCommand";
import {
  DisableSagemakerServicecatalogPortfolioCommandInput,
  DisableSagemakerServicecatalogPortfolioCommandOutput,
} from "../commands/DisableSagemakerServicecatalogPortfolioCommand";
import {
  DisassociateTrialComponentCommandInput,
  DisassociateTrialComponentCommandOutput,
} from "../commands/DisassociateTrialComponentCommand";
import {
  EnableSagemakerServicecatalogPortfolioCommandInput,
  EnableSagemakerServicecatalogPortfolioCommandOutput,
} from "../commands/EnableSagemakerServicecatalogPortfolioCommand";
import {
  GetDeviceFleetReportCommandInput,
  GetDeviceFleetReportCommandOutput,
} from "../commands/GetDeviceFleetReportCommand";
import {
  GetModelPackageGroupPolicyCommandInput,
  GetModelPackageGroupPolicyCommandOutput,
} from "../commands/GetModelPackageGroupPolicyCommand";
import {
  GetSagemakerServicecatalogPortfolioStatusCommandInput,
  GetSagemakerServicecatalogPortfolioStatusCommandOutput,
} from "../commands/GetSagemakerServicecatalogPortfolioStatusCommand";
import {
  GetSearchSuggestionsCommandInput,
  GetSearchSuggestionsCommandOutput,
} from "../commands/GetSearchSuggestionsCommand";
import { ListActionsCommandInput, ListActionsCommandOutput } from "../commands/ListActionsCommand";
import { ListAlgorithmsCommandInput, ListAlgorithmsCommandOutput } from "../commands/ListAlgorithmsCommand";
import {
  ListAppImageConfigsCommandInput,
  ListAppImageConfigsCommandOutput,
} from "../commands/ListAppImageConfigsCommand";
import { ListAppsCommandInput, ListAppsCommandOutput } from "../commands/ListAppsCommand";
import { ListArtifactsCommandInput, ListArtifactsCommandOutput } from "../commands/ListArtifactsCommand";
import { ListAssociationsCommandInput, ListAssociationsCommandOutput } from "../commands/ListAssociationsCommand";
import { ListAutoMLJobsCommandInput, ListAutoMLJobsCommandOutput } from "../commands/ListAutoMLJobsCommand";
import {
  ListCandidatesForAutoMLJobCommandInput,
  ListCandidatesForAutoMLJobCommandOutput,
} from "../commands/ListCandidatesForAutoMLJobCommand";
import {
  ListCodeRepositoriesCommandInput,
  ListCodeRepositoriesCommandOutput,
} from "../commands/ListCodeRepositoriesCommand";
import {
  ListCompilationJobsCommandInput,
  ListCompilationJobsCommandOutput,
} from "../commands/ListCompilationJobsCommand";
import { ListContextsCommandInput, ListContextsCommandOutput } from "../commands/ListContextsCommand";
import {
  ListDataQualityJobDefinitionsCommandInput,
  ListDataQualityJobDefinitionsCommandOutput,
} from "../commands/ListDataQualityJobDefinitionsCommand";
import { ListDeviceFleetsCommandInput, ListDeviceFleetsCommandOutput } from "../commands/ListDeviceFleetsCommand";
import { ListDevicesCommandInput, ListDevicesCommandOutput } from "../commands/ListDevicesCommand";
import { ListDomainsCommandInput, ListDomainsCommandOutput } from "../commands/ListDomainsCommand";
import {
  ListEdgePackagingJobsCommandInput,
  ListEdgePackagingJobsCommandOutput,
} from "../commands/ListEdgePackagingJobsCommand";
import {
  ListEndpointConfigsCommandInput,
  ListEndpointConfigsCommandOutput,
} from "../commands/ListEndpointConfigsCommand";
import { ListEndpointsCommandInput, ListEndpointsCommandOutput } from "../commands/ListEndpointsCommand";
import { ListExperimentsCommandInput, ListExperimentsCommandOutput } from "../commands/ListExperimentsCommand";
import { ListFeatureGroupsCommandInput, ListFeatureGroupsCommandOutput } from "../commands/ListFeatureGroupsCommand";
import {
  ListFlowDefinitionsCommandInput,
  ListFlowDefinitionsCommandOutput,
} from "../commands/ListFlowDefinitionsCommand";
import { ListHumanTaskUisCommandInput, ListHumanTaskUisCommandOutput } from "../commands/ListHumanTaskUisCommand";
import {
  ListHyperParameterTuningJobsCommandInput,
  ListHyperParameterTuningJobsCommandOutput,
} from "../commands/ListHyperParameterTuningJobsCommand";
import { ListImageVersionsCommandInput, ListImageVersionsCommandOutput } from "../commands/ListImageVersionsCommand";
import { ListImagesCommandInput, ListImagesCommandOutput } from "../commands/ListImagesCommand";
import { ListLabelingJobsCommandInput, ListLabelingJobsCommandOutput } from "../commands/ListLabelingJobsCommand";
import {
  ListLabelingJobsForWorkteamCommandInput,
  ListLabelingJobsForWorkteamCommandOutput,
} from "../commands/ListLabelingJobsForWorkteamCommand";
import {
  ListModelBiasJobDefinitionsCommandInput,
  ListModelBiasJobDefinitionsCommandOutput,
} from "../commands/ListModelBiasJobDefinitionsCommand";
import {
  ListModelExplainabilityJobDefinitionsCommandInput,
  ListModelExplainabilityJobDefinitionsCommandOutput,
} from "../commands/ListModelExplainabilityJobDefinitionsCommand";
import {
  ListModelPackageGroupsCommandInput,
  ListModelPackageGroupsCommandOutput,
} from "../commands/ListModelPackageGroupsCommand";
import { ListModelPackagesCommandInput, ListModelPackagesCommandOutput } from "../commands/ListModelPackagesCommand";
import {
  ListModelQualityJobDefinitionsCommandInput,
  ListModelQualityJobDefinitionsCommandOutput,
} from "../commands/ListModelQualityJobDefinitionsCommand";
import { ListModelsCommandInput, ListModelsCommandOutput } from "../commands/ListModelsCommand";
import {
  ListMonitoringExecutionsCommandInput,
  ListMonitoringExecutionsCommandOutput,
} from "../commands/ListMonitoringExecutionsCommand";
import {
  ListMonitoringSchedulesCommandInput,
  ListMonitoringSchedulesCommandOutput,
} from "../commands/ListMonitoringSchedulesCommand";
import {
  ListNotebookInstanceLifecycleConfigsCommandInput,
  ListNotebookInstanceLifecycleConfigsCommandOutput,
} from "../commands/ListNotebookInstanceLifecycleConfigsCommand";
import {
  ListNotebookInstancesCommandInput,
  ListNotebookInstancesCommandOutput,
} from "../commands/ListNotebookInstancesCommand";
import {
  ListPipelineExecutionStepsCommandInput,
  ListPipelineExecutionStepsCommandOutput,
} from "../commands/ListPipelineExecutionStepsCommand";
import {
  ListPipelineExecutionsCommandInput,
  ListPipelineExecutionsCommandOutput,
} from "../commands/ListPipelineExecutionsCommand";
import {
  ListPipelineParametersForExecutionCommandInput,
  ListPipelineParametersForExecutionCommandOutput,
} from "../commands/ListPipelineParametersForExecutionCommand";
import { ListPipelinesCommandInput, ListPipelinesCommandOutput } from "../commands/ListPipelinesCommand";
import { ListProcessingJobsCommandInput, ListProcessingJobsCommandOutput } from "../commands/ListProcessingJobsCommand";
import { ListProjectsCommandInput, ListProjectsCommandOutput } from "../commands/ListProjectsCommand";
import {
  ListSubscribedWorkteamsCommandInput,
  ListSubscribedWorkteamsCommandOutput,
} from "../commands/ListSubscribedWorkteamsCommand";
import { ListTagsCommandInput, ListTagsCommandOutput } from "../commands/ListTagsCommand";
import { ListTrainingJobsCommandInput, ListTrainingJobsCommandOutput } from "../commands/ListTrainingJobsCommand";
import {
  ListTrainingJobsForHyperParameterTuningJobCommandInput,
  ListTrainingJobsForHyperParameterTuningJobCommandOutput,
} from "../commands/ListTrainingJobsForHyperParameterTuningJobCommand";
import { ListTransformJobsCommandInput, ListTransformJobsCommandOutput } from "../commands/ListTransformJobsCommand";
import {
  ListTrialComponentsCommandInput,
  ListTrialComponentsCommandOutput,
} from "../commands/ListTrialComponentsCommand";
import { ListTrialsCommandInput, ListTrialsCommandOutput } from "../commands/ListTrialsCommand";
import { ListUserProfilesCommandInput, ListUserProfilesCommandOutput } from "../commands/ListUserProfilesCommand";
import { ListWorkforcesCommandInput, ListWorkforcesCommandOutput } from "../commands/ListWorkforcesCommand";
import { ListWorkteamsCommandInput, ListWorkteamsCommandOutput } from "../commands/ListWorkteamsCommand";
import {
  PutModelPackageGroupPolicyCommandInput,
  PutModelPackageGroupPolicyCommandOutput,
} from "../commands/PutModelPackageGroupPolicyCommand";
import { RegisterDevicesCommandInput, RegisterDevicesCommandOutput } from "../commands/RegisterDevicesCommand";
import { RenderUiTemplateCommandInput, RenderUiTemplateCommandOutput } from "../commands/RenderUiTemplateCommand";
import { SearchCommandInput, SearchCommandOutput } from "../commands/SearchCommand";
import {
  StartMonitoringScheduleCommandInput,
  StartMonitoringScheduleCommandOutput,
} from "../commands/StartMonitoringScheduleCommand";
import {
  StartNotebookInstanceCommandInput,
  StartNotebookInstanceCommandOutput,
} from "../commands/StartNotebookInstanceCommand";
import {
  StartPipelineExecutionCommandInput,
  StartPipelineExecutionCommandOutput,
} from "../commands/StartPipelineExecutionCommand";
import { StopAutoMLJobCommandInput, StopAutoMLJobCommandOutput } from "../commands/StopAutoMLJobCommand";
import { StopCompilationJobCommandInput, StopCompilationJobCommandOutput } from "../commands/StopCompilationJobCommand";
import {
  StopEdgePackagingJobCommandInput,
  StopEdgePackagingJobCommandOutput,
} from "../commands/StopEdgePackagingJobCommand";
import {
  StopHyperParameterTuningJobCommandInput,
  StopHyperParameterTuningJobCommandOutput,
} from "../commands/StopHyperParameterTuningJobCommand";
import { StopLabelingJobCommandInput, StopLabelingJobCommandOutput } from "../commands/StopLabelingJobCommand";
import {
  StopMonitoringScheduleCommandInput,
  StopMonitoringScheduleCommandOutput,
} from "../commands/StopMonitoringScheduleCommand";
import {
  StopNotebookInstanceCommandInput,
  StopNotebookInstanceCommandOutput,
} from "../commands/StopNotebookInstanceCommand";
import {
  StopPipelineExecutionCommandInput,
  StopPipelineExecutionCommandOutput,
} from "../commands/StopPipelineExecutionCommand";
import { StopProcessingJobCommandInput, StopProcessingJobCommandOutput } from "../commands/StopProcessingJobCommand";
import { StopTrainingJobCommandInput, StopTrainingJobCommandOutput } from "../commands/StopTrainingJobCommand";
import { StopTransformJobCommandInput, StopTransformJobCommandOutput } from "../commands/StopTransformJobCommand";
import { UpdateActionCommandInput, UpdateActionCommandOutput } from "../commands/UpdateActionCommand";
import {
  UpdateAppImageConfigCommandInput,
  UpdateAppImageConfigCommandOutput,
} from "../commands/UpdateAppImageConfigCommand";
import { UpdateArtifactCommandInput, UpdateArtifactCommandOutput } from "../commands/UpdateArtifactCommand";
import {
  UpdateCodeRepositoryCommandInput,
  UpdateCodeRepositoryCommandOutput,
} from "../commands/UpdateCodeRepositoryCommand";
import { UpdateContextCommandInput, UpdateContextCommandOutput } from "../commands/UpdateContextCommand";
import { UpdateDeviceFleetCommandInput, UpdateDeviceFleetCommandOutput } from "../commands/UpdateDeviceFleetCommand";
import { UpdateDevicesCommandInput, UpdateDevicesCommandOutput } from "../commands/UpdateDevicesCommand";
import { UpdateDomainCommandInput, UpdateDomainCommandOutput } from "../commands/UpdateDomainCommand";
import { UpdateEndpointCommandInput, UpdateEndpointCommandOutput } from "../commands/UpdateEndpointCommand";
import {
  UpdateEndpointWeightsAndCapacitiesCommandInput,
  UpdateEndpointWeightsAndCapacitiesCommandOutput,
} from "../commands/UpdateEndpointWeightsAndCapacitiesCommand";
import { UpdateExperimentCommandInput, UpdateExperimentCommandOutput } from "../commands/UpdateExperimentCommand";
import { UpdateImageCommandInput, UpdateImageCommandOutput } from "../commands/UpdateImageCommand";
import { UpdateModelPackageCommandInput, UpdateModelPackageCommandOutput } from "../commands/UpdateModelPackageCommand";
import {
  UpdateMonitoringScheduleCommandInput,
  UpdateMonitoringScheduleCommandOutput,
} from "../commands/UpdateMonitoringScheduleCommand";
import {
  UpdateNotebookInstanceCommandInput,
  UpdateNotebookInstanceCommandOutput,
} from "../commands/UpdateNotebookInstanceCommand";
import {
  UpdateNotebookInstanceLifecycleConfigCommandInput,
  UpdateNotebookInstanceLifecycleConfigCommandOutput,
} from "../commands/UpdateNotebookInstanceLifecycleConfigCommand";
import { UpdatePipelineCommandInput, UpdatePipelineCommandOutput } from "../commands/UpdatePipelineCommand";
import {
  UpdatePipelineExecutionCommandInput,
  UpdatePipelineExecutionCommandOutput,
} from "../commands/UpdatePipelineExecutionCommand";
import { UpdateTrainingJobCommandInput, UpdateTrainingJobCommandOutput } from "../commands/UpdateTrainingJobCommand";
import { UpdateTrialCommandInput, UpdateTrialCommandOutput } from "../commands/UpdateTrialCommand";
import {
  UpdateTrialComponentCommandInput,
  UpdateTrialComponentCommandOutput,
} from "../commands/UpdateTrialComponentCommand";
import { UpdateUserProfileCommandInput, UpdateUserProfileCommandOutput } from "../commands/UpdateUserProfileCommand";
import { UpdateWorkforceCommandInput, UpdateWorkforceCommandOutput } from "../commands/UpdateWorkforceCommand";
import { UpdateWorkteamCommandInput, UpdateWorkteamCommandOutput } from "../commands/UpdateWorkteamCommand";
import {
  ActionSource,
  ActionSummary,
  AddAssociationRequest,
  AddAssociationResponse,
  AddTagsInput,
  AddTagsOutput,
  AgentVersion,
  Alarm,
  AlgorithmSpecification,
  AlgorithmStatusDetails,
  AlgorithmStatusItem,
  AlgorithmSummary,
  AlgorithmValidationProfile,
  AlgorithmValidationSpecification,
  AnnotationConsolidationConfig,
  AppDetails,
  AppImageConfigDetails,
  AppSpecification,
  ArtifactSource,
  ArtifactSourceType,
  ArtifactSummary,
  AssociateTrialComponentRequest,
  AssociateTrialComponentResponse,
  AssociationSummary,
  AthenaDatasetDefinition,
  AutoMLCandidate,
  AutoMLCandidateStep,
  AutoMLChannel,
  AutoMLContainerDefinition,
  AutoMLDataSource,
  AutoMLJobArtifacts,
  AutoMLJobCompletionCriteria,
  AutoMLJobConfig,
  AutoMLJobObjective,
  AutoMLJobSummary,
  AutoMLOutputDataConfig,
  AutoMLPartialFailureReason,
  AutoMLS3DataSource,
  AutoMLSecurityConfig,
  AutoRollbackConfig,
  Bias,
  BlueGreenUpdatePolicy,
  CacheHitResult,
  CandidateArtifactLocations,
  CandidateProperties,
  CapacitySize,
  CaptureContentTypeHeader,
  CaptureOption,
  CategoricalParameterRange,
  CategoricalParameterRangeSpecification,
  Channel,
  ChannelSpecification,
  CheckpointConfig,
  CodeRepositorySummary,
  CognitoConfig,
  CognitoMemberDefinition,
  CollectionConfiguration,
  CompilationJobSummary,
  CompressionType,
  ConditionStepMetadata,
  ConflictException,
  ContainerDefinition,
  ContentClassifier,
  ContextSource,
  ContextSummary,
  ContinuousParameterRange,
  ContinuousParameterRangeSpecification,
  CreateActionRequest,
  CreateActionResponse,
  CreateAlgorithmInput,
  CreateAlgorithmOutput,
  CreateAppImageConfigRequest,
  CreateAppImageConfigResponse,
  CreateAppRequest,
  CreateAppResponse,
  CreateArtifactRequest,
  CreateArtifactResponse,
  CreateAutoMLJobRequest,
  CreateAutoMLJobResponse,
  CreateCodeRepositoryInput,
  CreateCodeRepositoryOutput,
  CreateCompilationJobRequest,
  CreateCompilationJobResponse,
  CreateContextRequest,
  CreateContextResponse,
  CreateDataQualityJobDefinitionRequest,
  CreateDataQualityJobDefinitionResponse,
  CreateDeviceFleetRequest,
  CreateDomainRequest,
  CreateDomainResponse,
  CreateEdgePackagingJobRequest,
  CreateEndpointConfigInput,
  CreateEndpointConfigOutput,
  CreateEndpointInput,
  CreateEndpointOutput,
  CreateExperimentRequest,
  CreateExperimentResponse,
  CreateFeatureGroupRequest,
  CreateFeatureGroupResponse,
  CreateFlowDefinitionRequest,
  CreateFlowDefinitionResponse,
  CreateHumanTaskUiRequest,
  CreateHumanTaskUiResponse,
  CreateHyperParameterTuningJobRequest,
  CreateHyperParameterTuningJobResponse,
  CreateImageRequest,
  CreateImageResponse,
  CreateImageVersionRequest,
  CreateImageVersionResponse,
  CreateLabelingJobRequest,
  CreateLabelingJobResponse,
  CreateModelBiasJobDefinitionRequest,
  CreateModelBiasJobDefinitionResponse,
  CreateModelExplainabilityJobDefinitionRequest,
  CreateModelExplainabilityJobDefinitionResponse,
  CreateModelInput,
  CreateModelOutput,
  CustomImage,
  DataCaptureConfig,
  DataCatalogConfig,
  DataQualityAppSpecification,
  DataQualityBaselineConfig,
  DataQualityJobInput,
  DataSource,
  EdgeOutputConfig,
  EndpointInput,
  Explainability,
  FeatureDefinition,
  FileSystemConfig,
  FileSystemDataSource,
  FinalAutoMLJobObjectiveMetric,
  FlowDefinitionOutputConfig,
  GitConfig,
  HumanLoopActivationConditionsConfig,
  HumanLoopActivationConfig,
  HumanLoopConfig,
  HumanLoopRequestSource,
  HumanTaskConfig,
  HyperParameterAlgorithmSpecification,
  HyperParameterSpecification,
  HyperParameterTrainingJobDefinition,
  HyperParameterTuningJobConfig,
  HyperParameterTuningJobObjective,
  HyperParameterTuningJobWarmStartConfig,
  ImageConfig,
  InferenceExecutionConfig,
  InferenceSpecification,
  InputConfig,
  IntegerParameterRange,
  IntegerParameterRangeSpecification,
  JupyterServerAppSettings,
  KernelGatewayAppSettings,
  KernelGatewayImageConfig,
  KernelSpec,
  LabelingJobAlgorithmsConfig,
  LabelingJobDataAttributes,
  LabelingJobDataSource,
  LabelingJobInputConfig,
  LabelingJobOutputConfig,
  LabelingJobResourceConfig,
  LabelingJobS3DataSource,
  LabelingJobSnsDataSource,
  LabelingJobStoppingConditions,
  MetadataProperties,
  MetricDefinition,
  MetricsSource,
  ModelBiasAppSpecification,
  ModelBiasBaselineConfig,
  ModelBiasJobInput,
  ModelDeployConfig,
  ModelExplainabilityAppSpecification,
  ModelExplainabilityBaselineConfig,
  ModelExplainabilityJobInput,
  ModelPackageContainerDefinition,
  MonitoringClusterConfig,
  MonitoringConstraintsResource,
  MonitoringGroundTruthS3Input,
  MonitoringNetworkConfig,
  MonitoringOutput,
  MonitoringOutputConfig,
  MonitoringResources,
  MonitoringS3Output,
  MonitoringStatisticsResource,
  MonitoringStoppingCondition,
  MultiModelConfig,
  OfflineStoreConfig,
  OnlineStoreConfig,
  OnlineStoreSecurityConfig,
  OutputConfig,
  OutputDataConfig,
  ParameterRange,
  ParameterRanges,
  ParentHyperParameterTuningJob,
  ProductionVariant,
  ProductionVariantCoreDumpConfig,
  ProductionVariantInstanceType,
  PublicWorkforceTaskPrice,
  RepositoryAuthConfig,
  ResourceConfig,
  ResourceInUse,
  ResourceLimitExceeded,
  ResourceLimits,
  ResourceNotFound,
  ResourceSpec,
  RetryStrategy,
  S3DataSource,
  S3StorageConfig,
  SharingSettings,
  ShuffleConfig,
  StoppingCondition,
  Tag,
  TargetPlatform,
  TensorBoardAppSettings,
  TrafficRoutingConfig,
  TrainingInputMode,
  TrainingInstanceType,
  TrainingJobDefinition,
  TrainingSpecification,
  TransformDataSource,
  TransformInput,
  TransformInstanceType,
  TransformJobDefinition,
  TransformOutput,
  TransformResources,
  TransformS3DataSource,
  TuningJobCompletionCriteria,
  USD,
  UiConfig,
  UiTemplate,
  UserContext,
  UserSettings,
  VpcConfig,
} from "../models/models_0";
import {
  CreateModelPackageGroupInput,
  CreateModelPackageGroupOutput,
  CreateModelPackageInput,
  CreateModelPackageOutput,
  CreateModelQualityJobDefinitionRequest,
  CreateModelQualityJobDefinitionResponse,
  CreateMonitoringScheduleRequest,
  CreateMonitoringScheduleResponse,
  CreateNotebookInstanceInput,
  CreateNotebookInstanceLifecycleConfigInput,
  CreateNotebookInstanceLifecycleConfigOutput,
  CreateNotebookInstanceOutput,
  CreatePipelineRequest,
  CreatePipelineResponse,
  CreatePresignedDomainUrlRequest,
  CreatePresignedDomainUrlResponse,
  CreatePresignedNotebookInstanceUrlInput,
  CreatePresignedNotebookInstanceUrlOutput,
  CreateProcessingJobRequest,
  CreateProcessingJobResponse,
  CreateProjectInput,
  CreateProjectOutput,
  CreateTrainingJobRequest,
  CreateTrainingJobResponse,
  CreateTransformJobRequest,
  CreateTransformJobResponse,
  CreateTrialComponentRequest,
  CreateTrialComponentResponse,
  CreateTrialRequest,
  CreateTrialResponse,
  CreateUserProfileRequest,
  CreateUserProfileResponse,
  CreateWorkforceRequest,
  CreateWorkforceResponse,
  CreateWorkteamRequest,
  CreateWorkteamResponse,
  DataCaptureConfigSummary,
  DataProcessing,
  DatasetDefinition,
  DebugHookConfig,
  DebugRuleConfiguration,
  DebugRuleEvaluationStatus,
  DeleteActionRequest,
  DeleteActionResponse,
  DeleteAlgorithmInput,
  DeleteAppImageConfigRequest,
  DeleteAppRequest,
  DeleteArtifactRequest,
  DeleteArtifactResponse,
  DeleteAssociationRequest,
  DeleteAssociationResponse,
  DeleteCodeRepositoryInput,
  DeleteContextRequest,
  DeleteContextResponse,
  DeleteDataQualityJobDefinitionRequest,
  DeleteDeviceFleetRequest,
  DeleteDomainRequest,
  DeleteEndpointConfigInput,
  DeleteEndpointInput,
  DeleteExperimentRequest,
  DeleteExperimentResponse,
  DeleteFeatureGroupRequest,
  DeleteFlowDefinitionRequest,
  DeleteFlowDefinitionResponse,
  DeleteHumanTaskUiRequest,
  DeleteHumanTaskUiResponse,
  DeleteImageRequest,
  DeleteImageResponse,
  DeleteImageVersionRequest,
  DeleteImageVersionResponse,
  DeleteModelBiasJobDefinitionRequest,
  DeleteModelExplainabilityJobDefinitionRequest,
  DeleteModelInput,
  DeleteModelPackageGroupInput,
  DeleteModelPackageGroupPolicyInput,
  DeleteModelPackageInput,
  DeleteModelQualityJobDefinitionRequest,
  DeleteMonitoringScheduleRequest,
  DeleteNotebookInstanceInput,
  DeleteNotebookInstanceLifecycleConfigInput,
  DeletePipelineRequest,
  DeletePipelineResponse,
  DeleteProjectInput,
  DeleteTagsInput,
  DeleteTagsOutput,
  DeleteTrialComponentRequest,
  DeleteTrialComponentResponse,
  DeleteTrialRequest,
  DeleteTrialResponse,
  DeleteUserProfileRequest,
  DeleteWorkforceRequest,
  DeleteWorkforceResponse,
  DeleteWorkteamRequest,
  DeleteWorkteamResponse,
  DeployedImage,
  DeploymentConfig,
  DeregisterDevicesRequest,
  DescribeActionRequest,
  DescribeActionResponse,
  DescribeAlgorithmInput,
  DescribeAlgorithmOutput,
  DescribeAppImageConfigRequest,
  DescribeAppImageConfigResponse,
  DescribeAppRequest,
  DescribeAppResponse,
  DescribeArtifactRequest,
  DescribeArtifactResponse,
  DescribeAutoMLJobRequest,
  DescribeAutoMLJobResponse,
  DescribeCodeRepositoryInput,
  DescribeCodeRepositoryOutput,
  DescribeCompilationJobRequest,
  DescribeCompilationJobResponse,
  DescribeContextRequest,
  DescribeContextResponse,
  DescribeDataQualityJobDefinitionRequest,
  DescribeDataQualityJobDefinitionResponse,
  DescribeDeviceFleetRequest,
  DescribeDeviceFleetResponse,
  DescribeDeviceRequest,
  DescribeDeviceResponse,
  DescribeDomainRequest,
  DescribeDomainResponse,
  DescribeEdgePackagingJobRequest,
  DescribeEdgePackagingJobResponse,
  DescribeEndpointConfigInput,
  DescribeEndpointConfigOutput,
  DescribeEndpointInput,
  DescribeEndpointOutput,
  DescribeExperimentRequest,
  DescribeExperimentResponse,
  DescribeFeatureGroupRequest,
  DescribeFeatureGroupResponse,
  DescribeFlowDefinitionRequest,
  DescribeFlowDefinitionResponse,
  DescribeHumanTaskUiRequest,
  DescribeHumanTaskUiResponse,
  DescribeHyperParameterTuningJobRequest,
  DescribeHyperParameterTuningJobResponse,
  DescribeImageRequest,
  DescribeImageResponse,
  DescribeImageVersionRequest,
  DescribeImageVersionResponse,
  DescribeLabelingJobRequest,
  DescribeLabelingJobResponse,
  DescribeModelBiasJobDefinitionRequest,
  DescribeModelBiasJobDefinitionResponse,
  DescribeModelExplainabilityJobDefinitionRequest,
  DescribeModelExplainabilityJobDefinitionResponse,
  DescribeModelInput,
  DescribeModelOutput,
  DescribeModelPackageGroupInput,
  DescribeModelPackageGroupOutput,
  DescribeModelPackageInput,
  DescribeModelPackageOutput,
  DescribeModelQualityJobDefinitionRequest,
  DescribeModelQualityJobDefinitionResponse,
  DescribeMonitoringScheduleRequest,
  DescribeMonitoringScheduleResponse,
  DescribeNotebookInstanceInput,
  DescribeNotebookInstanceLifecycleConfigInput,
  DescribeNotebookInstanceLifecycleConfigOutput,
  DescribeNotebookInstanceOutput,
  DescribePipelineDefinitionForExecutionRequest,
  DescribePipelineDefinitionForExecutionResponse,
  DescribePipelineExecutionRequest,
  DescribePipelineExecutionResponse,
  DescribePipelineRequest,
  DescribePipelineResponse,
  DescribeProcessingJobRequest,
  DescribeProcessingJobResponse,
  DescribeProjectInput,
  DescribeProjectOutput,
  DescribeSubscribedWorkteamRequest,
  DescribeSubscribedWorkteamResponse,
  DescribeTrainingJobRequest,
  DescribeTrainingJobResponse,
  DescribeTransformJobRequest,
  DescribeTransformJobResponse,
  DescribeTrialComponentRequest,
  DescribeTrialComponentResponse,
  DescribeTrialRequest,
  DescribeTrialResponse,
  DescribeUserProfileRequest,
  DescribeUserProfileResponse,
  DescribeWorkforceRequest,
  EdgeModel,
  ExperimentConfig,
  ExperimentSource,
  FinalHyperParameterTuningJobObjectiveMetric,
  HyperParameterTrainingJobSummary,
  LabelCounters,
  LabelingJobOutput,
  MemberDefinition,
  MetricData,
  ModelArtifacts,
  ModelClientConfig,
  ModelDataQuality,
  ModelDeployResult,
  ModelDigests,
  ModelMetrics,
  ModelPackageStatusDetails,
  ModelPackageStatusItem,
  ModelPackageValidationProfile,
  ModelPackageValidationSpecification,
  ModelQuality,
  ModelQualityAppSpecification,
  ModelQualityBaselineConfig,
  ModelQualityJobInput,
  MonitoringAppSpecification,
  MonitoringBaselineConfig,
  MonitoringExecutionSummary,
  MonitoringInput,
  MonitoringJobDefinition,
  MonitoringScheduleConfig,
  NetworkConfig,
  NotebookInstanceAcceleratorType,
  NotebookInstanceLifecycleHook,
  NotificationConfiguration,
  ObjectiveStatusCounters,
  OfflineStoreStatus,
  OidcConfig,
  OidcConfigForResponse,
  OidcMemberDefinition,
  ProcessingClusterConfig,
  ProcessingFeatureStoreOutput,
  ProcessingInput,
  ProcessingOutput,
  ProcessingOutputConfig,
  ProcessingResources,
  ProcessingS3Input,
  ProcessingS3Output,
  ProcessingStoppingCondition,
  ProductionVariantSummary,
  ProfilerConfig,
  ProfilerRuleConfiguration,
  ProfilerRuleEvaluationStatus,
  ProvisioningParameter,
  RedshiftDatasetDefinition,
  ResolvedAttributes,
  RetentionPolicy,
  ScheduleConfig,
  SecondaryStatusTransition,
  ServiceCatalogProvisionedProductDetails,
  ServiceCatalogProvisioningDetails,
  SourceAlgorithm,
  SourceAlgorithmSpecification,
  SourceIpConfig,
  SubscribedWorkteam,
  TensorBoardOutputConfig,
  TrainingJobStatusCounters,
  TrialComponentArtifact,
  TrialComponentMetricSummary,
  TrialComponentParameterValue,
  TrialComponentSource,
  TrialComponentStatus,
  TrialSource,
  UiTemplateInfo,
  Workforce,
} from "../models/models_1";
import {
  DescribeWorkforceResponse,
  DescribeWorkteamRequest,
  DescribeWorkteamResponse,
  DesiredWeightAndCapacity,
  Device,
  DeviceFleetSummary,
  DeviceStats,
  DeviceSummary,
  DisableSagemakerServicecatalogPortfolioInput,
  DisableSagemakerServicecatalogPortfolioOutput,
  DisassociateTrialComponentRequest,
  DisassociateTrialComponentResponse,
  DomainDetails,
  EdgeModelStat,
  EdgeModelSummary,
  EdgePackagingJobSummary,
  EnableSagemakerServicecatalogPortfolioInput,
  EnableSagemakerServicecatalogPortfolioOutput,
  Endpoint,
  EndpointConfigSummary,
  EndpointSummary,
  Experiment,
  ExperimentSummary,
  FeatureGroup,
  FeatureGroupSummary,
  Filter,
  FlowDefinitionSummary,
  GetDeviceFleetReportRequest,
  GetDeviceFleetReportResponse,
  GetModelPackageGroupPolicyInput,
  GetModelPackageGroupPolicyOutput,
  GetSagemakerServicecatalogPortfolioStatusInput,
  GetSagemakerServicecatalogPortfolioStatusOutput,
  GetSearchSuggestionsRequest,
  GetSearchSuggestionsResponse,
  GitConfigForUpdate,
  HumanTaskUiSummary,
  HyperParameterTuningJobSummary,
  Image,
  ImageVersion,
  LabelCountersForWorkteam,
  LabelingJobForWorkteamSummary,
  LabelingJobSummary,
  ListActionsRequest,
  ListActionsResponse,
  ListAlgorithmsInput,
  ListAlgorithmsOutput,
  ListAppImageConfigsRequest,
  ListAppImageConfigsResponse,
  ListAppsRequest,
  ListAppsResponse,
  ListArtifactsRequest,
  ListArtifactsResponse,
  ListAssociationsRequest,
  ListAssociationsResponse,
  ListAutoMLJobsRequest,
  ListAutoMLJobsResponse,
  ListCandidatesForAutoMLJobRequest,
  ListCandidatesForAutoMLJobResponse,
  ListCodeRepositoriesInput,
  ListCodeRepositoriesOutput,
  ListCompilationJobsRequest,
  ListCompilationJobsResponse,
  ListContextsRequest,
  ListContextsResponse,
  ListDataQualityJobDefinitionsRequest,
  ListDataQualityJobDefinitionsResponse,
  ListDeviceFleetsRequest,
  ListDeviceFleetsResponse,
  ListDevicesRequest,
  ListDevicesResponse,
  ListDomainsRequest,
  ListDomainsResponse,
  ListEdgePackagingJobsRequest,
  ListEdgePackagingJobsResponse,
  ListEndpointConfigsInput,
  ListEndpointConfigsOutput,
  ListEndpointsInput,
  ListEndpointsOutput,
  ListExperimentsRequest,
  ListExperimentsResponse,
  ListFeatureGroupsRequest,
  ListFeatureGroupsResponse,
  ListFlowDefinitionsRequest,
  ListFlowDefinitionsResponse,
  ListHumanTaskUisRequest,
  ListHumanTaskUisResponse,
  ListHyperParameterTuningJobsRequest,
  ListHyperParameterTuningJobsResponse,
  ListImageVersionsRequest,
  ListImageVersionsResponse,
  ListImagesRequest,
  ListImagesResponse,
  ListLabelingJobsForWorkteamRequest,
  ListLabelingJobsForWorkteamResponse,
  ListLabelingJobsRequest,
  ListLabelingJobsResponse,
  ListModelBiasJobDefinitionsRequest,
  ListModelBiasJobDefinitionsResponse,
  ListModelExplainabilityJobDefinitionsRequest,
  ListModelExplainabilityJobDefinitionsResponse,
  ListModelPackageGroupsInput,
  ListModelPackageGroupsOutput,
  ListModelPackagesInput,
  ListModelPackagesOutput,
  ListModelQualityJobDefinitionsRequest,
  ListModelQualityJobDefinitionsResponse,
  ListModelsInput,
  ListModelsOutput,
  ListMonitoringExecutionsRequest,
  ListMonitoringExecutionsResponse,
  ListMonitoringSchedulesRequest,
  ListMonitoringSchedulesResponse,
  ListNotebookInstanceLifecycleConfigsInput,
  ListNotebookInstanceLifecycleConfigsOutput,
  ListNotebookInstancesInput,
  ListNotebookInstancesOutput,
  ListPipelineExecutionStepsRequest,
  ListPipelineExecutionStepsResponse,
  ListPipelineExecutionsRequest,
  ListPipelineExecutionsResponse,
  ListPipelineParametersForExecutionRequest,
  ListPipelineParametersForExecutionResponse,
  ListPipelinesRequest,
  ListPipelinesResponse,
  ListProcessingJobsRequest,
  ListProcessingJobsResponse,
  ListProjectsInput,
  ListProjectsOutput,
  ListSubscribedWorkteamsRequest,
  ListSubscribedWorkteamsResponse,
  ListTagsInput,
  ListTagsOutput,
  ListTrainingJobsForHyperParameterTuningJobRequest,
  ListTrainingJobsForHyperParameterTuningJobResponse,
  ListTrainingJobsRequest,
  ListTrainingJobsResponse,
  ListTransformJobsRequest,
  ListTransformJobsResponse,
  ListTrialComponentsRequest,
  ListTrialComponentsResponse,
  ListTrialsRequest,
  ListTrialsResponse,
  ListUserProfilesRequest,
  ListUserProfilesResponse,
  ListWorkforcesRequest,
  ListWorkforcesResponse,
  ListWorkteamsRequest,
  ListWorkteamsResponse,
  ModelPackage,
  ModelPackageGroup,
  ModelPackageGroupSummary,
  ModelPackageSummary,
  ModelStepMetadata,
  ModelSummary,
  MonitoringJobDefinitionSummary,
  MonitoringSchedule,
  MonitoringScheduleSummary,
  NestedFilters,
  NotebookInstanceLifecycleConfigSummary,
  NotebookInstanceSummary,
  Parameter,
  Parent,
  Pipeline,
  PipelineExecution,
  PipelineExecutionStep,
  PipelineExecutionStepMetadata,
  PipelineExecutionSummary,
  PipelineSummary,
  ProcessingJob,
  ProcessingJobStepMetadata,
  ProcessingJobSummary,
  ProfilerConfigForUpdate,
  ProjectSummary,
  PropertyNameQuery,
  PropertyNameSuggestion,
  PutModelPackageGroupPolicyInput,
  PutModelPackageGroupPolicyOutput,
  RegisterDevicesRequest,
  RegisterModelStepMetadata,
  RenderUiTemplateRequest,
  RenderUiTemplateResponse,
  RenderableTask,
  RenderingError,
  SearchRecord,
  SearchResponse,
  StartMonitoringScheduleRequest,
  StartNotebookInstanceInput,
  StartPipelineExecutionRequest,
  StartPipelineExecutionResponse,
  StopAutoMLJobRequest,
  StopCompilationJobRequest,
  StopEdgePackagingJobRequest,
  StopHyperParameterTuningJobRequest,
  StopLabelingJobRequest,
  StopMonitoringScheduleRequest,
  StopNotebookInstanceInput,
  StopPipelineExecutionRequest,
  StopPipelineExecutionResponse,
  StopProcessingJobRequest,
  StopTrainingJobRequest,
  StopTransformJobRequest,
  SuggestionQuery,
  TrainingJob,
  TrainingJobStepMetadata,
  TrainingJobSummary,
  TransformJob,
  TransformJobStepMetadata,
  TransformJobSummary,
  Trial,
  TrialComponent,
  TrialComponentSimpleSummary,
  TrialComponentSourceDetail,
  TrialComponentSummary,
  TrialSummary,
  UpdateActionRequest,
  UpdateActionResponse,
  UpdateAppImageConfigRequest,
  UpdateAppImageConfigResponse,
  UpdateArtifactRequest,
  UpdateArtifactResponse,
  UpdateCodeRepositoryInput,
  UpdateCodeRepositoryOutput,
  UpdateContextRequest,
  UpdateContextResponse,
  UpdateDeviceFleetRequest,
  UpdateDevicesRequest,
  UpdateDomainRequest,
  UpdateDomainResponse,
  UpdateEndpointInput,
  UpdateEndpointOutput,
  UpdateEndpointWeightsAndCapacitiesInput,
  UpdateEndpointWeightsAndCapacitiesOutput,
  UpdateExperimentRequest,
  UpdateExperimentResponse,
  UpdateImageRequest,
  UpdateImageResponse,
  UpdateModelPackageInput,
  UpdateModelPackageOutput,
  UpdateMonitoringScheduleRequest,
  UpdateMonitoringScheduleResponse,
  UpdateNotebookInstanceInput,
  UpdateNotebookInstanceLifecycleConfigInput,
  UpdateNotebookInstanceLifecycleConfigOutput,
  UpdateNotebookInstanceOutput,
  UpdatePipelineExecutionRequest,
  UpdatePipelineExecutionResponse,
  UpdatePipelineRequest,
  UpdatePipelineResponse,
  UserProfileDetails,
  VariantProperty,
  Workteam,
} from "../models/models_2";
import {
  SearchExpression,
  SearchRequest,
  UpdateTrainingJobRequest,
  UpdateTrainingJobResponse,
  UpdateTrialComponentRequest,
  UpdateTrialComponentResponse,
  UpdateTrialRequest,
  UpdateTrialResponse,
  UpdateUserProfileRequest,
  UpdateUserProfileResponse,
  UpdateWorkforceRequest,
  UpdateWorkforceResponse,
  UpdateWorkteamRequest,
  UpdateWorkteamResponse,
} from "../models/models_3";
import { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from "@aws-sdk/protocol-http";
import { LazyJsonString as __LazyJsonString, SmithyException as __SmithyException } from "@aws-sdk/smithy-client";
import {
  Endpoint as __Endpoint,
  HeaderBag as __HeaderBag,
  MetadataBearer as __MetadataBearer,
  ResponseMetadata as __ResponseMetadata,
  SerdeContext as __SerdeContext,
} from "@aws-sdk/types";
import { v4 as generateIdempotencyToken } from "uuid";

export const serializeAws_json1_1AddAssociationCommand = async (
  input: AddAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.AddAssociation",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1AddAssociationRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1AddTagsCommand = async (
  input: AddTagsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.AddTags",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1AddTagsInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1AssociateTrialComponentCommand = async (
  input: AssociateTrialComponentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.AssociateTrialComponent",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1AssociateTrialComponentRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateActionCommand = async (
  input: CreateActionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateAction",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateActionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateAlgorithmCommand = async (
  input: CreateAlgorithmCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateAlgorithm",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateAlgorithmInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateAppCommand = async (
  input: CreateAppCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateApp",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateAppRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateAppImageConfigCommand = async (
  input: CreateAppImageConfigCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateAppImageConfig",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateAppImageConfigRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateArtifactCommand = async (
  input: CreateArtifactCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateArtifact",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateArtifactRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateAutoMLJobCommand = async (
  input: CreateAutoMLJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateAutoMLJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateAutoMLJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateCodeRepositoryCommand = async (
  input: CreateCodeRepositoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateCodeRepository",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateCodeRepositoryInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateCompilationJobCommand = async (
  input: CreateCompilationJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateCompilationJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateCompilationJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateContextCommand = async (
  input: CreateContextCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateContext",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateContextRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateDataQualityJobDefinitionCommand = async (
  input: CreateDataQualityJobDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateDataQualityJobDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateDataQualityJobDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateDeviceFleetCommand = async (
  input: CreateDeviceFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateDeviceFleet",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateDeviceFleetRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateDomainCommand = async (
  input: CreateDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateDomain",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateDomainRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateEdgePackagingJobCommand = async (
  input: CreateEdgePackagingJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateEdgePackagingJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateEdgePackagingJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateEndpointCommand = async (
  input: CreateEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateEndpoint",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateEndpointInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateEndpointConfigCommand = async (
  input: CreateEndpointConfigCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateEndpointConfig",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateEndpointConfigInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateExperimentCommand = async (
  input: CreateExperimentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateExperiment",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateExperimentRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateFeatureGroupCommand = async (
  input: CreateFeatureGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateFeatureGroup",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateFeatureGroupRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateFlowDefinitionCommand = async (
  input: CreateFlowDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateFlowDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateFlowDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateHumanTaskUiCommand = async (
  input: CreateHumanTaskUiCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateHumanTaskUi",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateHumanTaskUiRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateHyperParameterTuningJobCommand = async (
  input: CreateHyperParameterTuningJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateHyperParameterTuningJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateHyperParameterTuningJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateImageCommand = async (
  input: CreateImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateImage",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateImageRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateImageVersionCommand = async (
  input: CreateImageVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateImageVersion",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateImageVersionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateLabelingJobCommand = async (
  input: CreateLabelingJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateLabelingJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateLabelingJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateModelCommand = async (
  input: CreateModelCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateModel",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateModelInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateModelBiasJobDefinitionCommand = async (
  input: CreateModelBiasJobDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateModelBiasJobDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateModelBiasJobDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateModelExplainabilityJobDefinitionCommand = async (
  input: CreateModelExplainabilityJobDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateModelExplainabilityJobDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateModelExplainabilityJobDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateModelPackageCommand = async (
  input: CreateModelPackageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateModelPackage",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateModelPackageInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateModelPackageGroupCommand = async (
  input: CreateModelPackageGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateModelPackageGroup",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateModelPackageGroupInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateModelQualityJobDefinitionCommand = async (
  input: CreateModelQualityJobDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateModelQualityJobDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateModelQualityJobDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateMonitoringScheduleCommand = async (
  input: CreateMonitoringScheduleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateMonitoringSchedule",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateMonitoringScheduleRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateNotebookInstanceCommand = async (
  input: CreateNotebookInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateNotebookInstance",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateNotebookInstanceInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommand = async (
  input: CreateNotebookInstanceLifecycleConfigCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateNotebookInstanceLifecycleConfig",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateNotebookInstanceLifecycleConfigInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreatePipelineCommand = async (
  input: CreatePipelineCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreatePipeline",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreatePipelineRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreatePresignedDomainUrlCommand = async (
  input: CreatePresignedDomainUrlCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreatePresignedDomainUrl",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreatePresignedDomainUrlRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreatePresignedNotebookInstanceUrlCommand = async (
  input: CreatePresignedNotebookInstanceUrlCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreatePresignedNotebookInstanceUrl",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreatePresignedNotebookInstanceUrlInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateProcessingJobCommand = async (
  input: CreateProcessingJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateProcessingJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateProcessingJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateProjectCommand = async (
  input: CreateProjectCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateProject",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateProjectInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateTrainingJobCommand = async (
  input: CreateTrainingJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateTrainingJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateTrainingJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateTransformJobCommand = async (
  input: CreateTransformJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateTransformJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateTransformJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateTrialCommand = async (
  input: CreateTrialCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateTrial",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateTrialRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateTrialComponentCommand = async (
  input: CreateTrialComponentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateTrialComponent",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateTrialComponentRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateUserProfileCommand = async (
  input: CreateUserProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateUserProfile",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateUserProfileRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateWorkforceCommand = async (
  input: CreateWorkforceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateWorkforce",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateWorkforceRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1CreateWorkteamCommand = async (
  input: CreateWorkteamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.CreateWorkteam",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1CreateWorkteamRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteActionCommand = async (
  input: DeleteActionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteAction",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteActionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteAlgorithmCommand = async (
  input: DeleteAlgorithmCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteAlgorithm",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteAlgorithmInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteAppCommand = async (
  input: DeleteAppCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteApp",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteAppRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteAppImageConfigCommand = async (
  input: DeleteAppImageConfigCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteAppImageConfig",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteAppImageConfigRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteArtifactCommand = async (
  input: DeleteArtifactCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteArtifact",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteArtifactRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteAssociationCommand = async (
  input: DeleteAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteAssociation",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteAssociationRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteCodeRepositoryCommand = async (
  input: DeleteCodeRepositoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteCodeRepository",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteCodeRepositoryInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteContextCommand = async (
  input: DeleteContextCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteContext",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteContextRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteDataQualityJobDefinitionCommand = async (
  input: DeleteDataQualityJobDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteDataQualityJobDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteDataQualityJobDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteDeviceFleetCommand = async (
  input: DeleteDeviceFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteDeviceFleet",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteDeviceFleetRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteDomainCommand = async (
  input: DeleteDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteDomain",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteDomainRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteEndpointCommand = async (
  input: DeleteEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteEndpoint",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteEndpointInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteEndpointConfigCommand = async (
  input: DeleteEndpointConfigCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteEndpointConfig",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteEndpointConfigInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteExperimentCommand = async (
  input: DeleteExperimentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteExperiment",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteExperimentRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteFeatureGroupCommand = async (
  input: DeleteFeatureGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteFeatureGroup",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteFeatureGroupRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteFlowDefinitionCommand = async (
  input: DeleteFlowDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteFlowDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteFlowDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteHumanTaskUiCommand = async (
  input: DeleteHumanTaskUiCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteHumanTaskUi",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteHumanTaskUiRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteImageCommand = async (
  input: DeleteImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteImage",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteImageRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteImageVersionCommand = async (
  input: DeleteImageVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteImageVersion",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteImageVersionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteModelCommand = async (
  input: DeleteModelCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteModel",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteModelInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteModelBiasJobDefinitionCommand = async (
  input: DeleteModelBiasJobDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteModelBiasJobDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteModelBiasJobDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommand = async (
  input: DeleteModelExplainabilityJobDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteModelExplainabilityJobDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteModelExplainabilityJobDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteModelPackageCommand = async (
  input: DeleteModelPackageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteModelPackage",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteModelPackageInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteModelPackageGroupCommand = async (
  input: DeleteModelPackageGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteModelPackageGroup",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteModelPackageGroupInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteModelPackageGroupPolicyCommand = async (
  input: DeleteModelPackageGroupPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteModelPackageGroupPolicy",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteModelPackageGroupPolicyInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteModelQualityJobDefinitionCommand = async (
  input: DeleteModelQualityJobDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteModelQualityJobDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteModelQualityJobDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteMonitoringScheduleCommand = async (
  input: DeleteMonitoringScheduleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteMonitoringSchedule",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteMonitoringScheduleRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteNotebookInstanceCommand = async (
  input: DeleteNotebookInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteNotebookInstance",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteNotebookInstanceInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommand = async (
  input: DeleteNotebookInstanceLifecycleConfigCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteNotebookInstanceLifecycleConfig",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteNotebookInstanceLifecycleConfigInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeletePipelineCommand = async (
  input: DeletePipelineCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeletePipeline",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeletePipelineRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteProjectCommand = async (
  input: DeleteProjectCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteProject",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteProjectInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteTagsCommand = async (
  input: DeleteTagsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteTags",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteTagsInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteTrialCommand = async (
  input: DeleteTrialCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteTrial",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteTrialRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteTrialComponentCommand = async (
  input: DeleteTrialComponentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteTrialComponent",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteTrialComponentRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteUserProfileCommand = async (
  input: DeleteUserProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteUserProfile",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteUserProfileRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteWorkforceCommand = async (
  input: DeleteWorkforceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteWorkforce",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteWorkforceRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeleteWorkteamCommand = async (
  input: DeleteWorkteamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeleteWorkteam",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeleteWorkteamRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DeregisterDevicesCommand = async (
  input: DeregisterDevicesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DeregisterDevices",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DeregisterDevicesRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeActionCommand = async (
  input: DescribeActionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeAction",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeActionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeAlgorithmCommand = async (
  input: DescribeAlgorithmCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeAlgorithm",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeAlgorithmInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeAppCommand = async (
  input: DescribeAppCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeApp",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeAppRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeAppImageConfigCommand = async (
  input: DescribeAppImageConfigCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeAppImageConfig",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeAppImageConfigRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeArtifactCommand = async (
  input: DescribeArtifactCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeArtifact",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeArtifactRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeAutoMLJobCommand = async (
  input: DescribeAutoMLJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeAutoMLJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeAutoMLJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeCodeRepositoryCommand = async (
  input: DescribeCodeRepositoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeCodeRepository",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeCodeRepositoryInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeCompilationJobCommand = async (
  input: DescribeCompilationJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeCompilationJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeCompilationJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeContextCommand = async (
  input: DescribeContextCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeContext",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeContextRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeDataQualityJobDefinitionCommand = async (
  input: DescribeDataQualityJobDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeDataQualityJobDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeDataQualityJobDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeDeviceCommand = async (
  input: DescribeDeviceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeDevice",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeDeviceRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeDeviceFleetCommand = async (
  input: DescribeDeviceFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeDeviceFleet",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeDeviceFleetRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeDomainCommand = async (
  input: DescribeDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeDomain",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeDomainRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeEdgePackagingJobCommand = async (
  input: DescribeEdgePackagingJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeEdgePackagingJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeEdgePackagingJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeEndpointCommand = async (
  input: DescribeEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeEndpoint",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeEndpointInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeEndpointConfigCommand = async (
  input: DescribeEndpointConfigCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeEndpointConfig",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeEndpointConfigInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeExperimentCommand = async (
  input: DescribeExperimentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeExperiment",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeExperimentRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeFeatureGroupCommand = async (
  input: DescribeFeatureGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeFeatureGroup",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeFeatureGroupRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeFlowDefinitionCommand = async (
  input: DescribeFlowDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeFlowDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeFlowDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeHumanTaskUiCommand = async (
  input: DescribeHumanTaskUiCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeHumanTaskUi",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeHumanTaskUiRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeHyperParameterTuningJobCommand = async (
  input: DescribeHyperParameterTuningJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeHyperParameterTuningJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeHyperParameterTuningJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeImageCommand = async (
  input: DescribeImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeImage",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeImageRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeImageVersionCommand = async (
  input: DescribeImageVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeImageVersion",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeImageVersionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeLabelingJobCommand = async (
  input: DescribeLabelingJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeLabelingJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeLabelingJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeModelCommand = async (
  input: DescribeModelCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeModel",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeModelInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeModelBiasJobDefinitionCommand = async (
  input: DescribeModelBiasJobDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeModelBiasJobDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeModelBiasJobDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommand = async (
  input: DescribeModelExplainabilityJobDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeModelExplainabilityJobDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeModelExplainabilityJobDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeModelPackageCommand = async (
  input: DescribeModelPackageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeModelPackage",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeModelPackageInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeModelPackageGroupCommand = async (
  input: DescribeModelPackageGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeModelPackageGroup",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeModelPackageGroupInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeModelQualityJobDefinitionCommand = async (
  input: DescribeModelQualityJobDefinitionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeModelQualityJobDefinition",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeModelQualityJobDefinitionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeMonitoringScheduleCommand = async (
  input: DescribeMonitoringScheduleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeMonitoringSchedule",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeMonitoringScheduleRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeNotebookInstanceCommand = async (
  input: DescribeNotebookInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeNotebookInstance",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeNotebookInstanceInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommand = async (
  input: DescribeNotebookInstanceLifecycleConfigCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeNotebookInstanceLifecycleConfig",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeNotebookInstanceLifecycleConfigInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribePipelineCommand = async (
  input: DescribePipelineCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribePipeline",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribePipelineRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribePipelineDefinitionForExecutionCommand = async (
  input: DescribePipelineDefinitionForExecutionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribePipelineDefinitionForExecution",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribePipelineDefinitionForExecutionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribePipelineExecutionCommand = async (
  input: DescribePipelineExecutionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribePipelineExecution",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribePipelineExecutionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeProcessingJobCommand = async (
  input: DescribeProcessingJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeProcessingJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeProcessingJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeProjectCommand = async (
  input: DescribeProjectCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeProject",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeProjectInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeSubscribedWorkteamCommand = async (
  input: DescribeSubscribedWorkteamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeSubscribedWorkteam",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeSubscribedWorkteamRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeTrainingJobCommand = async (
  input: DescribeTrainingJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeTrainingJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeTrainingJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeTransformJobCommand = async (
  input: DescribeTransformJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeTransformJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeTransformJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeTrialCommand = async (
  input: DescribeTrialCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeTrial",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeTrialRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeTrialComponentCommand = async (
  input: DescribeTrialComponentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeTrialComponent",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeTrialComponentRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeUserProfileCommand = async (
  input: DescribeUserProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeUserProfile",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeUserProfileRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeWorkforceCommand = async (
  input: DescribeWorkforceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeWorkforce",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeWorkforceRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DescribeWorkteamCommand = async (
  input: DescribeWorkteamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DescribeWorkteam",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DescribeWorkteamRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommand = async (
  input: DisableSagemakerServicecatalogPortfolioCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DisableSagemakerServicecatalogPortfolio",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DisableSagemakerServicecatalogPortfolioInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1DisassociateTrialComponentCommand = async (
  input: DisassociateTrialComponentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.DisassociateTrialComponent",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1DisassociateTrialComponentRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommand = async (
  input: EnableSagemakerServicecatalogPortfolioCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.EnableSagemakerServicecatalogPortfolio",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1EnableSagemakerServicecatalogPortfolioInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1GetDeviceFleetReportCommand = async (
  input: GetDeviceFleetReportCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.GetDeviceFleetReport",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1GetDeviceFleetReportRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1GetModelPackageGroupPolicyCommand = async (
  input: GetModelPackageGroupPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.GetModelPackageGroupPolicy",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1GetModelPackageGroupPolicyInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommand = async (
  input: GetSagemakerServicecatalogPortfolioStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.GetSagemakerServicecatalogPortfolioStatus",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1GetSearchSuggestionsCommand = async (
  input: GetSearchSuggestionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.GetSearchSuggestions",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1GetSearchSuggestionsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListActionsCommand = async (
  input: ListActionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListActions",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListActionsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListAlgorithmsCommand = async (
  input: ListAlgorithmsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListAlgorithms",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListAlgorithmsInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListAppImageConfigsCommand = async (
  input: ListAppImageConfigsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListAppImageConfigs",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListAppImageConfigsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListAppsCommand = async (
  input: ListAppsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListApps",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListAppsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListArtifactsCommand = async (
  input: ListArtifactsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListArtifacts",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListArtifactsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListAssociationsCommand = async (
  input: ListAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListAssociations",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListAssociationsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListAutoMLJobsCommand = async (
  input: ListAutoMLJobsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListAutoMLJobs",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListAutoMLJobsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListCandidatesForAutoMLJobCommand = async (
  input: ListCandidatesForAutoMLJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListCandidatesForAutoMLJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListCandidatesForAutoMLJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListCodeRepositoriesCommand = async (
  input: ListCodeRepositoriesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListCodeRepositories",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListCodeRepositoriesInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListCompilationJobsCommand = async (
  input: ListCompilationJobsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListCompilationJobs",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListCompilationJobsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListContextsCommand = async (
  input: ListContextsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListContexts",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListContextsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListDataQualityJobDefinitionsCommand = async (
  input: ListDataQualityJobDefinitionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListDataQualityJobDefinitions",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListDataQualityJobDefinitionsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListDeviceFleetsCommand = async (
  input: ListDeviceFleetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListDeviceFleets",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListDeviceFleetsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListDevicesCommand = async (
  input: ListDevicesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListDevices",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListDevicesRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListDomainsCommand = async (
  input: ListDomainsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListDomains",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListDomainsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListEdgePackagingJobsCommand = async (
  input: ListEdgePackagingJobsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListEdgePackagingJobs",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListEdgePackagingJobsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListEndpointConfigsCommand = async (
  input: ListEndpointConfigsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListEndpointConfigs",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListEndpointConfigsInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListEndpointsCommand = async (
  input: ListEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListEndpoints",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListEndpointsInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListExperimentsCommand = async (
  input: ListExperimentsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListExperiments",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListExperimentsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListFeatureGroupsCommand = async (
  input: ListFeatureGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListFeatureGroups",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListFeatureGroupsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListFlowDefinitionsCommand = async (
  input: ListFlowDefinitionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListFlowDefinitions",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListFlowDefinitionsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListHumanTaskUisCommand = async (
  input: ListHumanTaskUisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListHumanTaskUis",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListHumanTaskUisRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListHyperParameterTuningJobsCommand = async (
  input: ListHyperParameterTuningJobsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListHyperParameterTuningJobs",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListHyperParameterTuningJobsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListImagesCommand = async (
  input: ListImagesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListImages",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListImagesRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListImageVersionsCommand = async (
  input: ListImageVersionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListImageVersions",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListImageVersionsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListLabelingJobsCommand = async (
  input: ListLabelingJobsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListLabelingJobs",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListLabelingJobsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListLabelingJobsForWorkteamCommand = async (
  input: ListLabelingJobsForWorkteamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListLabelingJobsForWorkteam",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListLabelingJobsForWorkteamRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListModelBiasJobDefinitionsCommand = async (
  input: ListModelBiasJobDefinitionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListModelBiasJobDefinitions",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListModelBiasJobDefinitionsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListModelExplainabilityJobDefinitionsCommand = async (
  input: ListModelExplainabilityJobDefinitionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListModelExplainabilityJobDefinitions",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListModelExplainabilityJobDefinitionsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListModelPackageGroupsCommand = async (
  input: ListModelPackageGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListModelPackageGroups",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListModelPackageGroupsInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListModelPackagesCommand = async (
  input: ListModelPackagesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListModelPackages",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListModelPackagesInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListModelQualityJobDefinitionsCommand = async (
  input: ListModelQualityJobDefinitionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListModelQualityJobDefinitions",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListModelQualityJobDefinitionsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListModelsCommand = async (
  input: ListModelsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListModels",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListModelsInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListMonitoringExecutionsCommand = async (
  input: ListMonitoringExecutionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListMonitoringExecutions",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListMonitoringExecutionsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListMonitoringSchedulesCommand = async (
  input: ListMonitoringSchedulesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListMonitoringSchedules",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListMonitoringSchedulesRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommand = async (
  input: ListNotebookInstanceLifecycleConfigsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListNotebookInstanceLifecycleConfigs",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListNotebookInstanceLifecycleConfigsInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListNotebookInstancesCommand = async (
  input: ListNotebookInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListNotebookInstances",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListNotebookInstancesInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListPipelineExecutionsCommand = async (
  input: ListPipelineExecutionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListPipelineExecutions",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListPipelineExecutionsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListPipelineExecutionStepsCommand = async (
  input: ListPipelineExecutionStepsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListPipelineExecutionSteps",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListPipelineExecutionStepsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListPipelineParametersForExecutionCommand = async (
  input: ListPipelineParametersForExecutionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListPipelineParametersForExecution",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListPipelineParametersForExecutionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListPipelinesCommand = async (
  input: ListPipelinesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListPipelines",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListPipelinesRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListProcessingJobsCommand = async (
  input: ListProcessingJobsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListProcessingJobs",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListProcessingJobsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListProjectsCommand = async (
  input: ListProjectsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListProjects",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListProjectsInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListSubscribedWorkteamsCommand = async (
  input: ListSubscribedWorkteamsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListSubscribedWorkteams",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListSubscribedWorkteamsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListTagsCommand = async (
  input: ListTagsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListTags",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListTagsInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListTrainingJobsCommand = async (
  input: ListTrainingJobsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListTrainingJobs",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListTrainingJobsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommand = async (
  input: ListTrainingJobsForHyperParameterTuningJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListTrainingJobsForHyperParameterTuningJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListTransformJobsCommand = async (
  input: ListTransformJobsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListTransformJobs",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListTransformJobsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListTrialComponentsCommand = async (
  input: ListTrialComponentsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListTrialComponents",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListTrialComponentsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListTrialsCommand = async (
  input: ListTrialsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListTrials",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListTrialsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListUserProfilesCommand = async (
  input: ListUserProfilesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListUserProfiles",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListUserProfilesRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListWorkforcesCommand = async (
  input: ListWorkforcesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListWorkforces",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListWorkforcesRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1ListWorkteamsCommand = async (
  input: ListWorkteamsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.ListWorkteams",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1ListWorkteamsRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1PutModelPackageGroupPolicyCommand = async (
  input: PutModelPackageGroupPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.PutModelPackageGroupPolicy",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1PutModelPackageGroupPolicyInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1RegisterDevicesCommand = async (
  input: RegisterDevicesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.RegisterDevices",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1RegisterDevicesRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1RenderUiTemplateCommand = async (
  input: RenderUiTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.RenderUiTemplate",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1RenderUiTemplateRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1SearchCommand = async (
  input: SearchCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.Search",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1SearchRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StartMonitoringScheduleCommand = async (
  input: StartMonitoringScheduleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StartMonitoringSchedule",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StartMonitoringScheduleRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StartNotebookInstanceCommand = async (
  input: StartNotebookInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StartNotebookInstance",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StartNotebookInstanceInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StartPipelineExecutionCommand = async (
  input: StartPipelineExecutionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StartPipelineExecution",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StartPipelineExecutionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StopAutoMLJobCommand = async (
  input: StopAutoMLJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StopAutoMLJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StopAutoMLJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StopCompilationJobCommand = async (
  input: StopCompilationJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StopCompilationJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StopCompilationJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StopEdgePackagingJobCommand = async (
  input: StopEdgePackagingJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StopEdgePackagingJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StopEdgePackagingJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StopHyperParameterTuningJobCommand = async (
  input: StopHyperParameterTuningJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StopHyperParameterTuningJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StopHyperParameterTuningJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StopLabelingJobCommand = async (
  input: StopLabelingJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StopLabelingJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StopLabelingJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StopMonitoringScheduleCommand = async (
  input: StopMonitoringScheduleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StopMonitoringSchedule",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StopMonitoringScheduleRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StopNotebookInstanceCommand = async (
  input: StopNotebookInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StopNotebookInstance",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StopNotebookInstanceInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StopPipelineExecutionCommand = async (
  input: StopPipelineExecutionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StopPipelineExecution",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StopPipelineExecutionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StopProcessingJobCommand = async (
  input: StopProcessingJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StopProcessingJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StopProcessingJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StopTrainingJobCommand = async (
  input: StopTrainingJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StopTrainingJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StopTrainingJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1StopTransformJobCommand = async (
  input: StopTransformJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.StopTransformJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1StopTransformJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateActionCommand = async (
  input: UpdateActionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateAction",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateActionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateAppImageConfigCommand = async (
  input: UpdateAppImageConfigCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateAppImageConfig",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateAppImageConfigRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateArtifactCommand = async (
  input: UpdateArtifactCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateArtifact",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateArtifactRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateCodeRepositoryCommand = async (
  input: UpdateCodeRepositoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateCodeRepository",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateCodeRepositoryInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateContextCommand = async (
  input: UpdateContextCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateContext",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateContextRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateDeviceFleetCommand = async (
  input: UpdateDeviceFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateDeviceFleet",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateDeviceFleetRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateDevicesCommand = async (
  input: UpdateDevicesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateDevices",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateDevicesRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateDomainCommand = async (
  input: UpdateDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateDomain",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateDomainRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateEndpointCommand = async (
  input: UpdateEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateEndpoint",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateEndpointInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommand = async (
  input: UpdateEndpointWeightsAndCapacitiesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateEndpointWeightsAndCapacities",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateEndpointWeightsAndCapacitiesInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateExperimentCommand = async (
  input: UpdateExperimentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateExperiment",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateExperimentRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateImageCommand = async (
  input: UpdateImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateImage",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateImageRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateModelPackageCommand = async (
  input: UpdateModelPackageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateModelPackage",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateModelPackageInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateMonitoringScheduleCommand = async (
  input: UpdateMonitoringScheduleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateMonitoringSchedule",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateMonitoringScheduleRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateNotebookInstanceCommand = async (
  input: UpdateNotebookInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateNotebookInstance",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateNotebookInstanceInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommand = async (
  input: UpdateNotebookInstanceLifecycleConfigCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateNotebookInstanceLifecycleConfig",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateNotebookInstanceLifecycleConfigInput(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdatePipelineCommand = async (
  input: UpdatePipelineCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdatePipeline",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdatePipelineRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdatePipelineExecutionCommand = async (
  input: UpdatePipelineExecutionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdatePipelineExecution",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdatePipelineExecutionRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateTrainingJobCommand = async (
  input: UpdateTrainingJobCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateTrainingJob",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateTrainingJobRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateTrialCommand = async (
  input: UpdateTrialCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateTrial",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateTrialRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateTrialComponentCommand = async (
  input: UpdateTrialComponentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateTrialComponent",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateTrialComponentRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateUserProfileCommand = async (
  input: UpdateUserProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateUserProfile",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateUserProfileRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateWorkforceCommand = async (
  input: UpdateWorkforceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateWorkforce",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateWorkforceRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const serializeAws_json1_1UpdateWorkteamCommand = async (
  input: UpdateWorkteamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = {
    "content-type": "application/x-amz-json-1.1",
    "x-amz-target": "SageMaker.UpdateWorkteam",
  };
  let body: any;
  body = JSON.stringify(serializeAws_json1_1UpdateWorkteamRequest(input, context));
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

export const deserializeAws_json1_1AddAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AddAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1AddAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1AddAssociationResponse(data, context);
  const response: AddAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1AddAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AddAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1AddTagsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AddTagsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1AddTagsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1AddTagsOutput(data, context);
  const response: AddTagsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1AddTagsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AddTagsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1AssociateTrialComponentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTrialComponentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1AssociateTrialComponentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1AssociateTrialComponentResponse(data, context);
  const response: AssociateTrialComponentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1AssociateTrialComponentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTrialComponentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateActionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateActionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateActionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateActionResponse(data, context);
  const response: CreateActionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateActionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateActionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateAlgorithmCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAlgorithmCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateAlgorithmCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateAlgorithmOutput(data, context);
  const response: CreateAlgorithmCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateAlgorithmCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAlgorithmCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateAppCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAppCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateAppCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateAppResponse(data, context);
  const response: CreateAppCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateAppCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAppCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateAppImageConfigCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAppImageConfigCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateAppImageConfigCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateAppImageConfigResponse(data, context);
  const response: CreateAppImageConfigCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateAppImageConfigCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAppImageConfigCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateArtifactCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateArtifactCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateArtifactCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateArtifactResponse(data, context);
  const response: CreateArtifactCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateArtifactCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateArtifactCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateAutoMLJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAutoMLJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateAutoMLJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateAutoMLJobResponse(data, context);
  const response: CreateAutoMLJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateAutoMLJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateAutoMLJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateCodeRepositoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCodeRepositoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateCodeRepositoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateCodeRepositoryOutput(data, context);
  const response: CreateCodeRepositoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateCodeRepositoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCodeRepositoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateCompilationJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCompilationJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateCompilationJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateCompilationJobResponse(data, context);
  const response: CreateCompilationJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateCompilationJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCompilationJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateContextCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateContextCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateContextCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateContextResponse(data, context);
  const response: CreateContextCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateContextCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateContextCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateDataQualityJobDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDataQualityJobDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateDataQualityJobDefinitionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateDataQualityJobDefinitionResponse(data, context);
  const response: CreateDataQualityJobDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateDataQualityJobDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDataQualityJobDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateDeviceFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDeviceFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateDeviceFleetCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CreateDeviceFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateDeviceFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDeviceFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateDomainResponse(data, context);
  const response: CreateDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateEdgePackagingJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateEdgePackagingJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateEdgePackagingJobCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CreateEdgePackagingJobCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateEdgePackagingJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateEdgePackagingJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateEndpointOutput(data, context);
  const response: CreateEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateEndpointConfigCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateEndpointConfigCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateEndpointConfigCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateEndpointConfigOutput(data, context);
  const response: CreateEndpointConfigCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateEndpointConfigCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateEndpointConfigCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateExperimentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateExperimentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateExperimentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateExperimentResponse(data, context);
  const response: CreateExperimentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateExperimentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateExperimentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateFeatureGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFeatureGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateFeatureGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateFeatureGroupResponse(data, context);
  const response: CreateFeatureGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateFeatureGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFeatureGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateFlowDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFlowDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateFlowDefinitionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateFlowDefinitionResponse(data, context);
  const response: CreateFlowDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateFlowDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFlowDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateHumanTaskUiCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateHumanTaskUiCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateHumanTaskUiCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateHumanTaskUiResponse(data, context);
  const response: CreateHumanTaskUiCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateHumanTaskUiCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateHumanTaskUiCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateHyperParameterTuningJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateHyperParameterTuningJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateHyperParameterTuningJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateHyperParameterTuningJobResponse(data, context);
  const response: CreateHyperParameterTuningJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateHyperParameterTuningJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateHyperParameterTuningJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateImageResponse(data, context);
  const response: CreateImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateImageVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateImageVersionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateImageVersionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateImageVersionResponse(data, context);
  const response: CreateImageVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateImageVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateImageVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateLabelingJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLabelingJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateLabelingJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateLabelingJobResponse(data, context);
  const response: CreateLabelingJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateLabelingJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLabelingJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateModelCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateModelCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateModelCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateModelOutput(data, context);
  const response: CreateModelCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateModelCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateModelCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateModelBiasJobDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateModelBiasJobDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateModelBiasJobDefinitionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateModelBiasJobDefinitionResponse(data, context);
  const response: CreateModelBiasJobDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateModelBiasJobDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateModelBiasJobDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateModelExplainabilityJobDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateModelExplainabilityJobDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateModelExplainabilityJobDefinitionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateModelExplainabilityJobDefinitionResponse(data, context);
  const response: CreateModelExplainabilityJobDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateModelExplainabilityJobDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateModelExplainabilityJobDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateModelPackageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateModelPackageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateModelPackageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateModelPackageOutput(data, context);
  const response: CreateModelPackageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateModelPackageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateModelPackageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.sagemaker#ConflictException":
      response = {
        ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateModelPackageGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateModelPackageGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateModelPackageGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateModelPackageGroupOutput(data, context);
  const response: CreateModelPackageGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateModelPackageGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateModelPackageGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateModelQualityJobDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateModelQualityJobDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateModelQualityJobDefinitionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateModelQualityJobDefinitionResponse(data, context);
  const response: CreateModelQualityJobDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateModelQualityJobDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateModelQualityJobDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateMonitoringScheduleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateMonitoringScheduleCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateMonitoringScheduleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateMonitoringScheduleResponse(data, context);
  const response: CreateMonitoringScheduleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateMonitoringScheduleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateMonitoringScheduleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateNotebookInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNotebookInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateNotebookInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateNotebookInstanceOutput(data, context);
  const response: CreateNotebookInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateNotebookInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNotebookInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNotebookInstanceLifecycleConfigCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateNotebookInstanceLifecycleConfigOutput(data, context);
  const response: CreateNotebookInstanceLifecycleConfigCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateNotebookInstanceLifecycleConfigCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNotebookInstanceLifecycleConfigCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreatePipelineCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePipelineCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreatePipelineCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreatePipelineResponse(data, context);
  const response: CreatePipelineCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreatePipelineCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePipelineCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreatePresignedDomainUrlCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePresignedDomainUrlCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreatePresignedDomainUrlCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreatePresignedDomainUrlResponse(data, context);
  const response: CreatePresignedDomainUrlCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreatePresignedDomainUrlCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePresignedDomainUrlCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreatePresignedNotebookInstanceUrlCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePresignedNotebookInstanceUrlCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreatePresignedNotebookInstanceUrlCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreatePresignedNotebookInstanceUrlOutput(data, context);
  const response: CreatePresignedNotebookInstanceUrlCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreatePresignedNotebookInstanceUrlCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePresignedNotebookInstanceUrlCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateProcessingJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateProcessingJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateProcessingJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateProcessingJobResponse(data, context);
  const response: CreateProcessingJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateProcessingJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateProcessingJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateProjectCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateProjectCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateProjectCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateProjectOutput(data, context);
  const response: CreateProjectCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateProjectCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateProjectCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateTrainingJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrainingJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateTrainingJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateTrainingJobResponse(data, context);
  const response: CreateTrainingJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateTrainingJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrainingJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateTransformJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransformJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateTransformJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateTransformJobResponse(data, context);
  const response: CreateTransformJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateTransformJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransformJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateTrialCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrialCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateTrialCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateTrialResponse(data, context);
  const response: CreateTrialCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateTrialCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrialCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateTrialComponentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrialComponentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateTrialComponentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateTrialComponentResponse(data, context);
  const response: CreateTrialComponentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateTrialComponentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrialComponentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateUserProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateUserProfileCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateUserProfileCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateUserProfileResponse(data, context);
  const response: CreateUserProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateUserProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateUserProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateWorkforceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateWorkforceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateWorkforceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateWorkforceResponse(data, context);
  const response: CreateWorkforceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateWorkforceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateWorkforceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1CreateWorkteamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateWorkteamCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1CreateWorkteamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1CreateWorkteamResponse(data, context);
  const response: CreateWorkteamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1CreateWorkteamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateWorkteamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteActionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteActionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteActionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteActionResponse(data, context);
  const response: DeleteActionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteActionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteActionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteAlgorithmCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAlgorithmCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteAlgorithmCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteAlgorithmCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteAlgorithmCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAlgorithmCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteAppCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAppCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteAppCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteAppCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteAppCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAppCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteAppImageConfigCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAppImageConfigCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteAppImageConfigCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteAppImageConfigCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteAppImageConfigCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAppImageConfigCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteArtifactCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteArtifactCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteArtifactCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteArtifactResponse(data, context);
  const response: DeleteArtifactCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteArtifactCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteArtifactCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteAssociationResponse(data, context);
  const response: DeleteAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteCodeRepositoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCodeRepositoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteCodeRepositoryCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteCodeRepositoryCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteCodeRepositoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCodeRepositoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteContextCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteContextCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteContextCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteContextResponse(data, context);
  const response: DeleteContextCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteContextCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteContextCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteDataQualityJobDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDataQualityJobDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteDataQualityJobDefinitionCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteDataQualityJobDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteDataQualityJobDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDataQualityJobDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteDeviceFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDeviceFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteDeviceFleetCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteDeviceFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteDeviceFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDeviceFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteDomainCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteEndpointCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteEndpointConfigCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteEndpointConfigCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteEndpointConfigCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteEndpointConfigCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteEndpointConfigCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteEndpointConfigCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteExperimentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteExperimentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteExperimentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteExperimentResponse(data, context);
  const response: DeleteExperimentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteExperimentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteExperimentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteFeatureGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFeatureGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteFeatureGroupCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteFeatureGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteFeatureGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFeatureGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteFlowDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFlowDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteFlowDefinitionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteFlowDefinitionResponse(data, context);
  const response: DeleteFlowDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteFlowDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFlowDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteHumanTaskUiCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteHumanTaskUiCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteHumanTaskUiCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteHumanTaskUiResponse(data, context);
  const response: DeleteHumanTaskUiCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteHumanTaskUiCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteHumanTaskUiCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteImageResponse(data, context);
  const response: DeleteImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteImageVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteImageVersionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteImageVersionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteImageVersionResponse(data, context);
  const response: DeleteImageVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteImageVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteImageVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteModelCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteModelCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteModelCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteModelCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteModelBiasJobDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelBiasJobDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteModelBiasJobDefinitionCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteModelBiasJobDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteModelBiasJobDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelBiasJobDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelExplainabilityJobDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteModelExplainabilityJobDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteModelExplainabilityJobDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelExplainabilityJobDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteModelPackageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelPackageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteModelPackageCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteModelPackageCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteModelPackageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelPackageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.sagemaker#ConflictException":
      response = {
        ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteModelPackageGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelPackageGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteModelPackageGroupCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteModelPackageGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteModelPackageGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelPackageGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteModelPackageGroupPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelPackageGroupPolicyCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteModelPackageGroupPolicyCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteModelPackageGroupPolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteModelPackageGroupPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelPackageGroupPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteModelQualityJobDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelQualityJobDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteModelQualityJobDefinitionCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteModelQualityJobDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteModelQualityJobDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteModelQualityJobDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteMonitoringScheduleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteMonitoringScheduleCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteMonitoringScheduleCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteMonitoringScheduleCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteMonitoringScheduleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteMonitoringScheduleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteNotebookInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNotebookInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteNotebookInstanceCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteNotebookInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteNotebookInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNotebookInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNotebookInstanceLifecycleConfigCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteNotebookInstanceLifecycleConfigCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteNotebookInstanceLifecycleConfigCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNotebookInstanceLifecycleConfigCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeletePipelineCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePipelineCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeletePipelineCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeletePipelineResponse(data, context);
  const response: DeletePipelineCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeletePipelineCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePipelineCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteProjectCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteProjectCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteProjectCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteProjectCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteProjectCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteProjectCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteTagsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTagsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteTagsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteTagsOutput(data, context);
  const response: DeleteTagsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteTagsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTagsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteTrialCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrialCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteTrialCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteTrialResponse(data, context);
  const response: DeleteTrialCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteTrialCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrialCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteTrialComponentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrialComponentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteTrialComponentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteTrialComponentResponse(data, context);
  const response: DeleteTrialComponentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteTrialComponentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrialComponentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteUserProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteUserProfileCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteUserProfileCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteUserProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteUserProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteUserProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteWorkforceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteWorkforceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteWorkforceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteWorkforceResponse(data, context);
  const response: DeleteWorkforceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteWorkforceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteWorkforceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeleteWorkteamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteWorkteamCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeleteWorkteamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DeleteWorkteamResponse(data, context);
  const response: DeleteWorkteamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeleteWorkteamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteWorkteamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DeregisterDevicesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterDevicesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DeregisterDevicesCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeregisterDevicesCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DeregisterDevicesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterDevicesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeActionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeActionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeActionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeActionResponse(data, context);
  const response: DescribeActionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeActionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeActionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeAlgorithmCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAlgorithmCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeAlgorithmCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeAlgorithmOutput(data, context);
  const response: DescribeAlgorithmCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeAlgorithmCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAlgorithmCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeAppCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAppCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeAppCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeAppResponse(data, context);
  const response: DescribeAppCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeAppCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAppCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeAppImageConfigCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAppImageConfigCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeAppImageConfigCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeAppImageConfigResponse(data, context);
  const response: DescribeAppImageConfigCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeAppImageConfigCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAppImageConfigCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeArtifactCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeArtifactCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeArtifactCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeArtifactResponse(data, context);
  const response: DescribeArtifactCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeArtifactCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeArtifactCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeAutoMLJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAutoMLJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeAutoMLJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeAutoMLJobResponse(data, context);
  const response: DescribeAutoMLJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeAutoMLJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAutoMLJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeCodeRepositoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCodeRepositoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeCodeRepositoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeCodeRepositoryOutput(data, context);
  const response: DescribeCodeRepositoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeCodeRepositoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCodeRepositoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeCompilationJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCompilationJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeCompilationJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeCompilationJobResponse(data, context);
  const response: DescribeCompilationJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeCompilationJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCompilationJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeContextCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeContextCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeContextCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeContextResponse(data, context);
  const response: DescribeContextCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeContextCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeContextCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeDataQualityJobDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDataQualityJobDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeDataQualityJobDefinitionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeDataQualityJobDefinitionResponse(data, context);
  const response: DescribeDataQualityJobDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeDataQualityJobDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDataQualityJobDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeDeviceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDeviceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeDeviceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeDeviceResponse(data, context);
  const response: DescribeDeviceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeDeviceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDeviceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeDeviceFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDeviceFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeDeviceFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeDeviceFleetResponse(data, context);
  const response: DescribeDeviceFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeDeviceFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDeviceFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeDomainResponse(data, context);
  const response: DescribeDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeEdgePackagingJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEdgePackagingJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeEdgePackagingJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeEdgePackagingJobResponse(data, context);
  const response: DescribeEdgePackagingJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeEdgePackagingJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEdgePackagingJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeEndpointOutput(data, context);
  const response: DescribeEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeEndpointConfigCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEndpointConfigCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeEndpointConfigCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeEndpointConfigOutput(data, context);
  const response: DescribeEndpointConfigCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeEndpointConfigCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEndpointConfigCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeExperimentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExperimentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeExperimentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeExperimentResponse(data, context);
  const response: DescribeExperimentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeExperimentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExperimentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeFeatureGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFeatureGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeFeatureGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeFeatureGroupResponse(data, context);
  const response: DescribeFeatureGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeFeatureGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFeatureGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeFlowDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFlowDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeFlowDefinitionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeFlowDefinitionResponse(data, context);
  const response: DescribeFlowDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeFlowDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFlowDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeHumanTaskUiCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHumanTaskUiCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeHumanTaskUiCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeHumanTaskUiResponse(data, context);
  const response: DescribeHumanTaskUiCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeHumanTaskUiCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHumanTaskUiCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeHyperParameterTuningJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHyperParameterTuningJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeHyperParameterTuningJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeHyperParameterTuningJobResponse(data, context);
  const response: DescribeHyperParameterTuningJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeHyperParameterTuningJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHyperParameterTuningJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeImageResponse(data, context);
  const response: DescribeImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeImageVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImageVersionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeImageVersionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeImageVersionResponse(data, context);
  const response: DescribeImageVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeImageVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImageVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeLabelingJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLabelingJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeLabelingJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeLabelingJobResponse(data, context);
  const response: DescribeLabelingJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeLabelingJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLabelingJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeModelCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeModelCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeModelCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeModelOutput(data, context);
  const response: DescribeModelCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeModelCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeModelCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeModelBiasJobDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeModelBiasJobDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeModelBiasJobDefinitionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeModelBiasJobDefinitionResponse(data, context);
  const response: DescribeModelBiasJobDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeModelBiasJobDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeModelBiasJobDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeModelExplainabilityJobDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeModelExplainabilityJobDefinitionResponse(data, context);
  const response: DescribeModelExplainabilityJobDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeModelExplainabilityJobDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeModelExplainabilityJobDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeModelPackageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeModelPackageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeModelPackageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeModelPackageOutput(data, context);
  const response: DescribeModelPackageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeModelPackageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeModelPackageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeModelPackageGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeModelPackageGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeModelPackageGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeModelPackageGroupOutput(data, context);
  const response: DescribeModelPackageGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeModelPackageGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeModelPackageGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeModelQualityJobDefinitionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeModelQualityJobDefinitionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeModelQualityJobDefinitionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeModelQualityJobDefinitionResponse(data, context);
  const response: DescribeModelQualityJobDefinitionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeModelQualityJobDefinitionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeModelQualityJobDefinitionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeMonitoringScheduleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeMonitoringScheduleCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeMonitoringScheduleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeMonitoringScheduleResponse(data, context);
  const response: DescribeMonitoringScheduleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeMonitoringScheduleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeMonitoringScheduleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeNotebookInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNotebookInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeNotebookInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeNotebookInstanceOutput(data, context);
  const response: DescribeNotebookInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeNotebookInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNotebookInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNotebookInstanceLifecycleConfigCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeNotebookInstanceLifecycleConfigOutput(data, context);
  const response: DescribeNotebookInstanceLifecycleConfigCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeNotebookInstanceLifecycleConfigCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNotebookInstanceLifecycleConfigCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribePipelineCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePipelineCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribePipelineCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribePipelineResponse(data, context);
  const response: DescribePipelineCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribePipelineCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePipelineCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribePipelineDefinitionForExecutionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePipelineDefinitionForExecutionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribePipelineDefinitionForExecutionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribePipelineDefinitionForExecutionResponse(data, context);
  const response: DescribePipelineDefinitionForExecutionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribePipelineDefinitionForExecutionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePipelineDefinitionForExecutionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribePipelineExecutionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePipelineExecutionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribePipelineExecutionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribePipelineExecutionResponse(data, context);
  const response: DescribePipelineExecutionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribePipelineExecutionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePipelineExecutionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeProcessingJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeProcessingJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeProcessingJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeProcessingJobResponse(data, context);
  const response: DescribeProcessingJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeProcessingJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeProcessingJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeProjectCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeProjectCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeProjectCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeProjectOutput(data, context);
  const response: DescribeProjectCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeProjectCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeProjectCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeSubscribedWorkteamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSubscribedWorkteamCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeSubscribedWorkteamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeSubscribedWorkteamResponse(data, context);
  const response: DescribeSubscribedWorkteamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeSubscribedWorkteamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSubscribedWorkteamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeTrainingJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrainingJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeTrainingJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeTrainingJobResponse(data, context);
  const response: DescribeTrainingJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeTrainingJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrainingJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeTransformJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransformJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeTransformJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeTransformJobResponse(data, context);
  const response: DescribeTransformJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeTransformJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransformJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeTrialCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrialCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeTrialCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeTrialResponse(data, context);
  const response: DescribeTrialCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeTrialCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrialCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeTrialComponentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrialComponentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeTrialComponentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeTrialComponentResponse(data, context);
  const response: DescribeTrialComponentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeTrialComponentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrialComponentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeUserProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeUserProfileCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeUserProfileCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeUserProfileResponse(data, context);
  const response: DescribeUserProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeUserProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeUserProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeWorkforceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeWorkforceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeWorkforceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeWorkforceResponse(data, context);
  const response: DescribeWorkforceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeWorkforceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeWorkforceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DescribeWorkteamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeWorkteamCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DescribeWorkteamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DescribeWorkteamResponse(data, context);
  const response: DescribeWorkteamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DescribeWorkteamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeWorkteamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableSagemakerServicecatalogPortfolioCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DisableSagemakerServicecatalogPortfolioOutput(data, context);
  const response: DisableSagemakerServicecatalogPortfolioCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DisableSagemakerServicecatalogPortfolioCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableSagemakerServicecatalogPortfolioCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1DisassociateTrialComponentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTrialComponentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1DisassociateTrialComponentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1DisassociateTrialComponentResponse(data, context);
  const response: DisassociateTrialComponentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1DisassociateTrialComponentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTrialComponentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableSagemakerServicecatalogPortfolioCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1EnableSagemakerServicecatalogPortfolioOutput(data, context);
  const response: EnableSagemakerServicecatalogPortfolioCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1EnableSagemakerServicecatalogPortfolioCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableSagemakerServicecatalogPortfolioCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1GetDeviceFleetReportCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetDeviceFleetReportCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1GetDeviceFleetReportCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1GetDeviceFleetReportResponse(data, context);
  const response: GetDeviceFleetReportCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1GetDeviceFleetReportCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetDeviceFleetReportCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1GetModelPackageGroupPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetModelPackageGroupPolicyCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1GetModelPackageGroupPolicyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1GetModelPackageGroupPolicyOutput(data, context);
  const response: GetModelPackageGroupPolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1GetModelPackageGroupPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetModelPackageGroupPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSagemakerServicecatalogPortfolioStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusOutput(data, context);
  const response: GetSagemakerServicecatalogPortfolioStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSagemakerServicecatalogPortfolioStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1GetSearchSuggestionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSearchSuggestionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1GetSearchSuggestionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1GetSearchSuggestionsResponse(data, context);
  const response: GetSearchSuggestionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1GetSearchSuggestionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSearchSuggestionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListActionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListActionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListActionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListActionsResponse(data, context);
  const response: ListActionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListActionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListActionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListAlgorithmsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAlgorithmsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListAlgorithmsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListAlgorithmsOutput(data, context);
  const response: ListAlgorithmsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListAlgorithmsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAlgorithmsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListAppImageConfigsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAppImageConfigsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListAppImageConfigsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListAppImageConfigsResponse(data, context);
  const response: ListAppImageConfigsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListAppImageConfigsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAppImageConfigsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListAppsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAppsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListAppsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListAppsResponse(data, context);
  const response: ListAppsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListAppsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAppsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListArtifactsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListArtifactsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListArtifactsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListArtifactsResponse(data, context);
  const response: ListArtifactsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListArtifactsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListArtifactsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListAssociationsResponse(data, context);
  const response: ListAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListAutoMLJobsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAutoMLJobsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListAutoMLJobsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListAutoMLJobsResponse(data, context);
  const response: ListAutoMLJobsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListAutoMLJobsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListAutoMLJobsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListCandidatesForAutoMLJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListCandidatesForAutoMLJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListCandidatesForAutoMLJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListCandidatesForAutoMLJobResponse(data, context);
  const response: ListCandidatesForAutoMLJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListCandidatesForAutoMLJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListCandidatesForAutoMLJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListCodeRepositoriesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListCodeRepositoriesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListCodeRepositoriesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListCodeRepositoriesOutput(data, context);
  const response: ListCodeRepositoriesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListCodeRepositoriesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListCodeRepositoriesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListCompilationJobsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListCompilationJobsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListCompilationJobsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListCompilationJobsResponse(data, context);
  const response: ListCompilationJobsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListCompilationJobsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListCompilationJobsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListContextsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListContextsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListContextsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListContextsResponse(data, context);
  const response: ListContextsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListContextsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListContextsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListDataQualityJobDefinitionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDataQualityJobDefinitionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListDataQualityJobDefinitionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListDataQualityJobDefinitionsResponse(data, context);
  const response: ListDataQualityJobDefinitionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListDataQualityJobDefinitionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDataQualityJobDefinitionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListDeviceFleetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDeviceFleetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListDeviceFleetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListDeviceFleetsResponse(data, context);
  const response: ListDeviceFleetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListDeviceFleetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDeviceFleetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListDevicesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDevicesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListDevicesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListDevicesResponse(data, context);
  const response: ListDevicesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListDevicesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDevicesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListDomainsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDomainsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListDomainsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListDomainsResponse(data, context);
  const response: ListDomainsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListDomainsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListDomainsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListEdgePackagingJobsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListEdgePackagingJobsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListEdgePackagingJobsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListEdgePackagingJobsResponse(data, context);
  const response: ListEdgePackagingJobsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListEdgePackagingJobsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListEdgePackagingJobsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListEndpointConfigsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListEndpointConfigsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListEndpointConfigsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListEndpointConfigsOutput(data, context);
  const response: ListEndpointConfigsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListEndpointConfigsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListEndpointConfigsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListEndpointsOutput(data, context);
  const response: ListEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListExperimentsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListExperimentsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListExperimentsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListExperimentsResponse(data, context);
  const response: ListExperimentsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListExperimentsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListExperimentsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListFeatureGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListFeatureGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListFeatureGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListFeatureGroupsResponse(data, context);
  const response: ListFeatureGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListFeatureGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListFeatureGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListFlowDefinitionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListFlowDefinitionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListFlowDefinitionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListFlowDefinitionsResponse(data, context);
  const response: ListFlowDefinitionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListFlowDefinitionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListFlowDefinitionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListHumanTaskUisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListHumanTaskUisCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListHumanTaskUisCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListHumanTaskUisResponse(data, context);
  const response: ListHumanTaskUisCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListHumanTaskUisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListHumanTaskUisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListHyperParameterTuningJobsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListHyperParameterTuningJobsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListHyperParameterTuningJobsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListHyperParameterTuningJobsResponse(data, context);
  const response: ListHyperParameterTuningJobsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListHyperParameterTuningJobsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListHyperParameterTuningJobsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListImagesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListImagesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListImagesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListImagesResponse(data, context);
  const response: ListImagesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListImagesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListImagesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListImageVersionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListImageVersionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListImageVersionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListImageVersionsResponse(data, context);
  const response: ListImageVersionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListImageVersionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListImageVersionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListLabelingJobsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListLabelingJobsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListLabelingJobsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListLabelingJobsResponse(data, context);
  const response: ListLabelingJobsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListLabelingJobsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListLabelingJobsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListLabelingJobsForWorkteamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListLabelingJobsForWorkteamCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListLabelingJobsForWorkteamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListLabelingJobsForWorkteamResponse(data, context);
  const response: ListLabelingJobsForWorkteamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListLabelingJobsForWorkteamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListLabelingJobsForWorkteamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListModelBiasJobDefinitionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListModelBiasJobDefinitionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListModelBiasJobDefinitionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListModelBiasJobDefinitionsResponse(data, context);
  const response: ListModelBiasJobDefinitionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListModelBiasJobDefinitionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListModelBiasJobDefinitionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListModelExplainabilityJobDefinitionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListModelExplainabilityJobDefinitionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListModelExplainabilityJobDefinitionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListModelExplainabilityJobDefinitionsResponse(data, context);
  const response: ListModelExplainabilityJobDefinitionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListModelExplainabilityJobDefinitionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListModelExplainabilityJobDefinitionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListModelPackageGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListModelPackageGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListModelPackageGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListModelPackageGroupsOutput(data, context);
  const response: ListModelPackageGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListModelPackageGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListModelPackageGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListModelPackagesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListModelPackagesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListModelPackagesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListModelPackagesOutput(data, context);
  const response: ListModelPackagesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListModelPackagesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListModelPackagesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListModelQualityJobDefinitionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListModelQualityJobDefinitionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListModelQualityJobDefinitionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListModelQualityJobDefinitionsResponse(data, context);
  const response: ListModelQualityJobDefinitionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListModelQualityJobDefinitionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListModelQualityJobDefinitionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListModelsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListModelsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListModelsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListModelsOutput(data, context);
  const response: ListModelsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListModelsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListModelsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListMonitoringExecutionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListMonitoringExecutionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListMonitoringExecutionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListMonitoringExecutionsResponse(data, context);
  const response: ListMonitoringExecutionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListMonitoringExecutionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListMonitoringExecutionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListMonitoringSchedulesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListMonitoringSchedulesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListMonitoringSchedulesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListMonitoringSchedulesResponse(data, context);
  const response: ListMonitoringSchedulesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListMonitoringSchedulesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListMonitoringSchedulesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListNotebookInstanceLifecycleConfigsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListNotebookInstanceLifecycleConfigsOutput(data, context);
  const response: ListNotebookInstanceLifecycleConfigsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListNotebookInstanceLifecycleConfigsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListNotebookInstanceLifecycleConfigsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListNotebookInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListNotebookInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListNotebookInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListNotebookInstancesOutput(data, context);
  const response: ListNotebookInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListNotebookInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListNotebookInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListPipelineExecutionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPipelineExecutionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListPipelineExecutionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListPipelineExecutionsResponse(data, context);
  const response: ListPipelineExecutionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListPipelineExecutionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPipelineExecutionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListPipelineExecutionStepsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPipelineExecutionStepsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListPipelineExecutionStepsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListPipelineExecutionStepsResponse(data, context);
  const response: ListPipelineExecutionStepsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListPipelineExecutionStepsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPipelineExecutionStepsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListPipelineParametersForExecutionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPipelineParametersForExecutionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListPipelineParametersForExecutionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListPipelineParametersForExecutionResponse(data, context);
  const response: ListPipelineParametersForExecutionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListPipelineParametersForExecutionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPipelineParametersForExecutionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListPipelinesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPipelinesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListPipelinesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListPipelinesResponse(data, context);
  const response: ListPipelinesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListPipelinesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListPipelinesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListProcessingJobsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListProcessingJobsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListProcessingJobsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListProcessingJobsResponse(data, context);
  const response: ListProcessingJobsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListProcessingJobsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListProcessingJobsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListProjectsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListProjectsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListProjectsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListProjectsOutput(data, context);
  const response: ListProjectsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListProjectsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListProjectsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListSubscribedWorkteamsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListSubscribedWorkteamsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListSubscribedWorkteamsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListSubscribedWorkteamsResponse(data, context);
  const response: ListSubscribedWorkteamsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListSubscribedWorkteamsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListSubscribedWorkteamsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListTagsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTagsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListTagsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListTagsOutput(data, context);
  const response: ListTagsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListTagsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTagsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListTrainingJobsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTrainingJobsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListTrainingJobsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListTrainingJobsResponse(data, context);
  const response: ListTrainingJobsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListTrainingJobsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTrainingJobsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTrainingJobsForHyperParameterTuningJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobResponse(data, context);
  const response: ListTrainingJobsForHyperParameterTuningJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTrainingJobsForHyperParameterTuningJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListTransformJobsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTransformJobsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListTransformJobsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListTransformJobsResponse(data, context);
  const response: ListTransformJobsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListTransformJobsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTransformJobsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListTrialComponentsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTrialComponentsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListTrialComponentsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListTrialComponentsResponse(data, context);
  const response: ListTrialComponentsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListTrialComponentsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTrialComponentsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListTrialsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTrialsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListTrialsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListTrialsResponse(data, context);
  const response: ListTrialsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListTrialsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListTrialsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListUserProfilesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListUserProfilesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListUserProfilesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListUserProfilesResponse(data, context);
  const response: ListUserProfilesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListUserProfilesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListUserProfilesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListWorkforcesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListWorkforcesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListWorkforcesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListWorkforcesResponse(data, context);
  const response: ListWorkforcesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListWorkforcesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListWorkforcesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1ListWorkteamsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListWorkteamsCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1ListWorkteamsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1ListWorkteamsResponse(data, context);
  const response: ListWorkteamsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1ListWorkteamsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListWorkteamsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1PutModelPackageGroupPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PutModelPackageGroupPolicyCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1PutModelPackageGroupPolicyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1PutModelPackageGroupPolicyOutput(data, context);
  const response: PutModelPackageGroupPolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1PutModelPackageGroupPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PutModelPackageGroupPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1RegisterDevicesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterDevicesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1RegisterDevicesCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: RegisterDevicesCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1RegisterDevicesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterDevicesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1RenderUiTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RenderUiTemplateCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1RenderUiTemplateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1RenderUiTemplateResponse(data, context);
  const response: RenderUiTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1RenderUiTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RenderUiTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1SearchCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1SearchCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1SearchResponse(data, context);
  const response: SearchCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1SearchCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StartMonitoringScheduleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartMonitoringScheduleCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StartMonitoringScheduleCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: StartMonitoringScheduleCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StartMonitoringScheduleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartMonitoringScheduleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StartNotebookInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartNotebookInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StartNotebookInstanceCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: StartNotebookInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StartNotebookInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartNotebookInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StartPipelineExecutionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartPipelineExecutionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StartPipelineExecutionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1StartPipelineExecutionResponse(data, context);
  const response: StartPipelineExecutionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StartPipelineExecutionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartPipelineExecutionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StopAutoMLJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopAutoMLJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StopAutoMLJobCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: StopAutoMLJobCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StopAutoMLJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopAutoMLJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StopCompilationJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopCompilationJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StopCompilationJobCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: StopCompilationJobCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StopCompilationJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopCompilationJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StopEdgePackagingJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopEdgePackagingJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StopEdgePackagingJobCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: StopEdgePackagingJobCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StopEdgePackagingJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopEdgePackagingJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StopHyperParameterTuningJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopHyperParameterTuningJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StopHyperParameterTuningJobCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: StopHyperParameterTuningJobCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StopHyperParameterTuningJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopHyperParameterTuningJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StopLabelingJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopLabelingJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StopLabelingJobCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: StopLabelingJobCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StopLabelingJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopLabelingJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StopMonitoringScheduleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopMonitoringScheduleCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StopMonitoringScheduleCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: StopMonitoringScheduleCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StopMonitoringScheduleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopMonitoringScheduleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StopNotebookInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopNotebookInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StopNotebookInstanceCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: StopNotebookInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StopNotebookInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopNotebookInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StopPipelineExecutionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopPipelineExecutionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StopPipelineExecutionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1StopPipelineExecutionResponse(data, context);
  const response: StopPipelineExecutionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StopPipelineExecutionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopPipelineExecutionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StopProcessingJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopProcessingJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StopProcessingJobCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: StopProcessingJobCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StopProcessingJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopProcessingJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StopTrainingJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopTrainingJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StopTrainingJobCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: StopTrainingJobCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StopTrainingJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopTrainingJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1StopTransformJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopTransformJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1StopTransformJobCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: StopTransformJobCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1StopTransformJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopTransformJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateActionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateActionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateActionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateActionResponse(data, context);
  const response: UpdateActionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateActionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateActionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.sagemaker#ConflictException":
      response = {
        ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateAppImageConfigCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAppImageConfigCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateAppImageConfigCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateAppImageConfigResponse(data, context);
  const response: UpdateAppImageConfigCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateAppImageConfigCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateAppImageConfigCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateArtifactCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateArtifactCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateArtifactCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateArtifactResponse(data, context);
  const response: UpdateArtifactCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateArtifactCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateArtifactCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.sagemaker#ConflictException":
      response = {
        ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateCodeRepositoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateCodeRepositoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateCodeRepositoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateCodeRepositoryOutput(data, context);
  const response: UpdateCodeRepositoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateCodeRepositoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateCodeRepositoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateContextCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateContextCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateContextCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateContextResponse(data, context);
  const response: UpdateContextCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateContextCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateContextCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.sagemaker#ConflictException":
      response = {
        ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateDeviceFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDeviceFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateDeviceFleetCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: UpdateDeviceFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateDeviceFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDeviceFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateDevicesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDevicesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateDevicesCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: UpdateDevicesCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateDevicesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDevicesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateDomainResponse(data, context);
  const response: UpdateDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateEndpointOutput(data, context);
  const response: UpdateEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateEndpointWeightsAndCapacitiesCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateEndpointWeightsAndCapacitiesOutput(data, context);
  const response: UpdateEndpointWeightsAndCapacitiesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateEndpointWeightsAndCapacitiesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateEndpointWeightsAndCapacitiesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateExperimentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateExperimentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateExperimentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateExperimentResponse(data, context);
  const response: UpdateExperimentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateExperimentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateExperimentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.sagemaker#ConflictException":
      response = {
        ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateImageResponse(data, context);
  const response: UpdateImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateModelPackageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateModelPackageCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateModelPackageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateModelPackageOutput(data, context);
  const response: UpdateModelPackageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateModelPackageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateModelPackageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateMonitoringScheduleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateMonitoringScheduleCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateMonitoringScheduleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateMonitoringScheduleResponse(data, context);
  const response: UpdateMonitoringScheduleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateMonitoringScheduleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateMonitoringScheduleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateNotebookInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateNotebookInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateNotebookInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateNotebookInstanceOutput(data, context);
  const response: UpdateNotebookInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateNotebookInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateNotebookInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateNotebookInstanceLifecycleConfigCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateNotebookInstanceLifecycleConfigOutput(data, context);
  const response: UpdateNotebookInstanceLifecycleConfigCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateNotebookInstanceLifecycleConfigCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateNotebookInstanceLifecycleConfigCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdatePipelineCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdatePipelineCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdatePipelineCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdatePipelineResponse(data, context);
  const response: UpdatePipelineCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdatePipelineCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdatePipelineCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdatePipelineExecutionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdatePipelineExecutionCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdatePipelineExecutionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdatePipelineExecutionResponse(data, context);
  const response: UpdatePipelineExecutionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdatePipelineExecutionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdatePipelineExecutionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateTrainingJobCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTrainingJobCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateTrainingJobCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateTrainingJobResponse(data, context);
  const response: UpdateTrainingJobCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateTrainingJobCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTrainingJobCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateTrialCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTrialCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateTrialCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateTrialResponse(data, context);
  const response: UpdateTrialCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateTrialCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTrialCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.sagemaker#ConflictException":
      response = {
        ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateTrialComponentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTrialComponentCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateTrialComponentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateTrialComponentResponse(data, context);
  const response: UpdateTrialComponentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateTrialComponentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateTrialComponentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictException":
    case "com.amazonaws.sagemaker#ConflictException":
      response = {
        ...(await deserializeAws_json1_1ConflictExceptionResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateUserProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateUserProfileCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateUserProfileCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateUserProfileResponse(data, context);
  const response: UpdateUserProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateUserProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateUserProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceInUse":
    case "com.amazonaws.sagemaker#ResourceInUse":
      response = {
        ...(await deserializeAws_json1_1ResourceInUseResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    case "ResourceNotFound":
    case "com.amazonaws.sagemaker#ResourceNotFound":
      response = {
        ...(await deserializeAws_json1_1ResourceNotFoundResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateWorkforceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateWorkforceCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateWorkforceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateWorkforceResponse(data, context);
  const response: UpdateWorkforceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateWorkforceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateWorkforceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

export const deserializeAws_json1_1UpdateWorkteamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateWorkteamCommandOutput> => {
  if (output.statusCode >= 300) {
    return deserializeAws_json1_1UpdateWorkteamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = deserializeAws_json1_1UpdateWorkteamResponse(data, context);
  const response: UpdateWorkteamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return Promise.resolve(response);
};

const deserializeAws_json1_1UpdateWorkteamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateWorkteamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseBody(output.body, context),
  };
  let response: __SmithyException & __MetadataBearer & { [key: string]: any };
  let errorCode: string = "UnknownError";
  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
  switch (errorCode) {
    case "ResourceLimitExceeded":
    case "com.amazonaws.sagemaker#ResourceLimitExceeded":
      response = {
        ...(await deserializeAws_json1_1ResourceLimitExceededResponse(parsedOutput, context)),
        name: errorCode,
        $metadata: deserializeMetadata(output),
      };
      break;
    default:
      const parsedBody = parsedOutput.body;
      errorCode = parsedBody.code || parsedBody.Code || errorCode;
      response = {
        ...parsedBody,
        name: `${errorCode}`,
        message: parsedBody.message || parsedBody.Message || errorCode,
        $fault: "client",
        $metadata: deserializeMetadata(output),
      } as any;
  }
  const message = response.message || response.Message || errorCode;
  response.message = message;
  delete response.Message;
  return Promise.reject(Object.assign(new Error(message), response));
};

const deserializeAws_json1_1ConflictExceptionResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ConflictException> => {
  const body = parsedOutput.body;
  const deserialized: any = deserializeAws_json1_1ConflictException(body, context);
  const contents: ConflictException = {
    name: "ConflictException",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized,
  };
  return contents;
};

const deserializeAws_json1_1ResourceInUseResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ResourceInUse> => {
  const body = parsedOutput.body;
  const deserialized: any = deserializeAws_json1_1ResourceInUse(body, context);
  const contents: ResourceInUse = {
    name: "ResourceInUse",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized,
  };
  return contents;
};

const deserializeAws_json1_1ResourceLimitExceededResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ResourceLimitExceeded> => {
  const body = parsedOutput.body;
  const deserialized: any = deserializeAws_json1_1ResourceLimitExceeded(body, context);
  const contents: ResourceLimitExceeded = {
    name: "ResourceLimitExceeded",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized,
  };
  return contents;
};

const deserializeAws_json1_1ResourceNotFoundResponse = async (
  parsedOutput: any,
  context: __SerdeContext
): Promise<ResourceNotFound> => {
  const body = parsedOutput.body;
  const deserialized: any = deserializeAws_json1_1ResourceNotFound(body, context);
  const contents: ResourceNotFound = {
    name: "ResourceNotFound",
    $fault: "client",
    $metadata: deserializeMetadata(parsedOutput),
    ...deserialized,
  };
  return contents;
};

const serializeAws_json1_1ActionSource = (input: ActionSource, context: __SerdeContext): any => {
  return {
    ...(input.SourceId !== undefined && input.SourceId !== null && { SourceId: input.SourceId }),
    ...(input.SourceType !== undefined && input.SourceType !== null && { SourceType: input.SourceType }),
    ...(input.SourceUri !== undefined && input.SourceUri !== null && { SourceUri: input.SourceUri }),
  };
};

const serializeAws_json1_1AddAssociationRequest = (input: AddAssociationRequest, context: __SerdeContext): any => {
  return {
    ...(input.AssociationType !== undefined &&
      input.AssociationType !== null && { AssociationType: input.AssociationType }),
    ...(input.DestinationArn !== undefined &&
      input.DestinationArn !== null && { DestinationArn: input.DestinationArn }),
    ...(input.SourceArn !== undefined && input.SourceArn !== null && { SourceArn: input.SourceArn }),
  };
};

const serializeAws_json1_1AdditionalCodeRepositoryNamesOrUrls = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1AddTagsInput = (input: AddTagsInput, context: __SerdeContext): any => {
  return {
    ...(input.ResourceArn !== undefined && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1Alarm = (input: Alarm, context: __SerdeContext): any => {
  return {
    ...(input.AlarmName !== undefined && input.AlarmName !== null && { AlarmName: input.AlarmName }),
  };
};

const serializeAws_json1_1AlarmList = (input: Alarm[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1Alarm(entry, context);
    });
};

const serializeAws_json1_1AlgorithmSpecification = (input: AlgorithmSpecification, context: __SerdeContext): any => {
  return {
    ...(input.AlgorithmName !== undefined && input.AlgorithmName !== null && { AlgorithmName: input.AlgorithmName }),
    ...(input.EnableSageMakerMetricsTimeSeries !== undefined &&
      input.EnableSageMakerMetricsTimeSeries !== null && {
        EnableSageMakerMetricsTimeSeries: input.EnableSageMakerMetricsTimeSeries,
      }),
    ...(input.MetricDefinitions !== undefined &&
      input.MetricDefinitions !== null && {
        MetricDefinitions: serializeAws_json1_1MetricDefinitionList(input.MetricDefinitions, context),
      }),
    ...(input.TrainingImage !== undefined && input.TrainingImage !== null && { TrainingImage: input.TrainingImage }),
    ...(input.TrainingInputMode !== undefined &&
      input.TrainingInputMode !== null && { TrainingInputMode: input.TrainingInputMode }),
  };
};

const serializeAws_json1_1AlgorithmValidationProfile = (
  input: AlgorithmValidationProfile,
  context: __SerdeContext
): any => {
  return {
    ...(input.ProfileName !== undefined && input.ProfileName !== null && { ProfileName: input.ProfileName }),
    ...(input.TrainingJobDefinition !== undefined &&
      input.TrainingJobDefinition !== null && {
        TrainingJobDefinition: serializeAws_json1_1TrainingJobDefinition(input.TrainingJobDefinition, context),
      }),
    ...(input.TransformJobDefinition !== undefined &&
      input.TransformJobDefinition !== null && {
        TransformJobDefinition: serializeAws_json1_1TransformJobDefinition(input.TransformJobDefinition, context),
      }),
  };
};

const serializeAws_json1_1AlgorithmValidationProfiles = (
  input: AlgorithmValidationProfile[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1AlgorithmValidationProfile(entry, context);
    });
};

const serializeAws_json1_1AlgorithmValidationSpecification = (
  input: AlgorithmValidationSpecification,
  context: __SerdeContext
): any => {
  return {
    ...(input.ValidationProfiles !== undefined &&
      input.ValidationProfiles !== null && {
        ValidationProfiles: serializeAws_json1_1AlgorithmValidationProfiles(input.ValidationProfiles, context),
      }),
    ...(input.ValidationRole !== undefined &&
      input.ValidationRole !== null && { ValidationRole: input.ValidationRole }),
  };
};

const serializeAws_json1_1AnnotationConsolidationConfig = (
  input: AnnotationConsolidationConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.AnnotationConsolidationLambdaArn !== undefined &&
      input.AnnotationConsolidationLambdaArn !== null && {
        AnnotationConsolidationLambdaArn: input.AnnotationConsolidationLambdaArn,
      }),
  };
};

const serializeAws_json1_1AppSpecification = (input: AppSpecification, context: __SerdeContext): any => {
  return {
    ...(input.ContainerArguments !== undefined &&
      input.ContainerArguments !== null && {
        ContainerArguments: serializeAws_json1_1ContainerArguments(input.ContainerArguments, context),
      }),
    ...(input.ContainerEntrypoint !== undefined &&
      input.ContainerEntrypoint !== null && {
        ContainerEntrypoint: serializeAws_json1_1ContainerEntrypoint(input.ContainerEntrypoint, context),
      }),
    ...(input.ImageUri !== undefined && input.ImageUri !== null && { ImageUri: input.ImageUri }),
  };
};

const serializeAws_json1_1ArtifactSource = (input: ArtifactSource, context: __SerdeContext): any => {
  return {
    ...(input.SourceTypes !== undefined &&
      input.SourceTypes !== null && {
        SourceTypes: serializeAws_json1_1ArtifactSourceTypes(input.SourceTypes, context),
      }),
    ...(input.SourceUri !== undefined && input.SourceUri !== null && { SourceUri: input.SourceUri }),
  };
};

const serializeAws_json1_1ArtifactSourceType = (input: ArtifactSourceType, context: __SerdeContext): any => {
  return {
    ...(input.SourceIdType !== undefined && input.SourceIdType !== null && { SourceIdType: input.SourceIdType }),
    ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
  };
};

const serializeAws_json1_1ArtifactSourceTypes = (input: ArtifactSourceType[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1ArtifactSourceType(entry, context);
    });
};

const serializeAws_json1_1AssociateTrialComponentRequest = (
  input: AssociateTrialComponentRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.TrialComponentName !== undefined &&
      input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
    ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
  };
};

const serializeAws_json1_1AthenaDatasetDefinition = (input: AthenaDatasetDefinition, context: __SerdeContext): any => {
  return {
    ...(input.Catalog !== undefined && input.Catalog !== null && { Catalog: input.Catalog }),
    ...(input.Database !== undefined && input.Database !== null && { Database: input.Database }),
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.OutputCompression !== undefined &&
      input.OutputCompression !== null && { OutputCompression: input.OutputCompression }),
    ...(input.OutputFormat !== undefined && input.OutputFormat !== null && { OutputFormat: input.OutputFormat }),
    ...(input.OutputS3Uri !== undefined && input.OutputS3Uri !== null && { OutputS3Uri: input.OutputS3Uri }),
    ...(input.QueryString !== undefined && input.QueryString !== null && { QueryString: input.QueryString }),
    ...(input.WorkGroup !== undefined && input.WorkGroup !== null && { WorkGroup: input.WorkGroup }),
  };
};

const serializeAws_json1_1AttributeNames = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1AutoMLChannel = (input: AutoMLChannel, context: __SerdeContext): any => {
  return {
    ...(input.CompressionType !== undefined &&
      input.CompressionType !== null && { CompressionType: input.CompressionType }),
    ...(input.DataSource !== undefined &&
      input.DataSource !== null && { DataSource: serializeAws_json1_1AutoMLDataSource(input.DataSource, context) }),
    ...(input.TargetAttributeName !== undefined &&
      input.TargetAttributeName !== null && { TargetAttributeName: input.TargetAttributeName }),
  };
};

const serializeAws_json1_1AutoMLDataSource = (input: AutoMLDataSource, context: __SerdeContext): any => {
  return {
    ...(input.S3DataSource !== undefined &&
      input.S3DataSource !== null && {
        S3DataSource: serializeAws_json1_1AutoMLS3DataSource(input.S3DataSource, context),
      }),
  };
};

const serializeAws_json1_1AutoMLInputDataConfig = (input: AutoMLChannel[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1AutoMLChannel(entry, context);
    });
};

const serializeAws_json1_1AutoMLJobCompletionCriteria = (
  input: AutoMLJobCompletionCriteria,
  context: __SerdeContext
): any => {
  return {
    ...(input.MaxAutoMLJobRuntimeInSeconds !== undefined &&
      input.MaxAutoMLJobRuntimeInSeconds !== null && {
        MaxAutoMLJobRuntimeInSeconds: input.MaxAutoMLJobRuntimeInSeconds,
      }),
    ...(input.MaxCandidates !== undefined && input.MaxCandidates !== null && { MaxCandidates: input.MaxCandidates }),
    ...(input.MaxRuntimePerTrainingJobInSeconds !== undefined &&
      input.MaxRuntimePerTrainingJobInSeconds !== null && {
        MaxRuntimePerTrainingJobInSeconds: input.MaxRuntimePerTrainingJobInSeconds,
      }),
  };
};

const serializeAws_json1_1AutoMLJobConfig = (input: AutoMLJobConfig, context: __SerdeContext): any => {
  return {
    ...(input.CompletionCriteria !== undefined &&
      input.CompletionCriteria !== null && {
        CompletionCriteria: serializeAws_json1_1AutoMLJobCompletionCriteria(input.CompletionCriteria, context),
      }),
    ...(input.SecurityConfig !== undefined &&
      input.SecurityConfig !== null && {
        SecurityConfig: serializeAws_json1_1AutoMLSecurityConfig(input.SecurityConfig, context),
      }),
  };
};

const serializeAws_json1_1AutoMLJobObjective = (input: AutoMLJobObjective, context: __SerdeContext): any => {
  return {
    ...(input.MetricName !== undefined && input.MetricName !== null && { MetricName: input.MetricName }),
  };
};

const serializeAws_json1_1AutoMLOutputDataConfig = (input: AutoMLOutputDataConfig, context: __SerdeContext): any => {
  return {
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
  };
};

const serializeAws_json1_1AutoMLS3DataSource = (input: AutoMLS3DataSource, context: __SerdeContext): any => {
  return {
    ...(input.S3DataType !== undefined && input.S3DataType !== null && { S3DataType: input.S3DataType }),
    ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
  };
};

const serializeAws_json1_1AutoMLSecurityConfig = (input: AutoMLSecurityConfig, context: __SerdeContext): any => {
  return {
    ...(input.EnableInterContainerTrafficEncryption !== undefined &&
      input.EnableInterContainerTrafficEncryption !== null && {
        EnableInterContainerTrafficEncryption: input.EnableInterContainerTrafficEncryption,
      }),
    ...(input.VolumeKmsKeyId !== undefined &&
      input.VolumeKmsKeyId !== null && { VolumeKmsKeyId: input.VolumeKmsKeyId }),
    ...(input.VpcConfig !== undefined &&
      input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
  };
};

const serializeAws_json1_1AutoRollbackConfig = (input: AutoRollbackConfig, context: __SerdeContext): any => {
  return {
    ...(input.Alarms !== undefined &&
      input.Alarms !== null && { Alarms: serializeAws_json1_1AlarmList(input.Alarms, context) }),
  };
};

const serializeAws_json1_1Bias = (input: Bias, context: __SerdeContext): any => {
  return {
    ...(input.Report !== undefined &&
      input.Report !== null && { Report: serializeAws_json1_1MetricsSource(input.Report, context) }),
  };
};

const serializeAws_json1_1BlueGreenUpdatePolicy = (input: BlueGreenUpdatePolicy, context: __SerdeContext): any => {
  return {
    ...(input.MaximumExecutionTimeoutInSeconds !== undefined &&
      input.MaximumExecutionTimeoutInSeconds !== null && {
        MaximumExecutionTimeoutInSeconds: input.MaximumExecutionTimeoutInSeconds,
      }),
    ...(input.TerminationWaitInSeconds !== undefined &&
      input.TerminationWaitInSeconds !== null && { TerminationWaitInSeconds: input.TerminationWaitInSeconds }),
    ...(input.TrafficRoutingConfiguration !== undefined &&
      input.TrafficRoutingConfiguration !== null && {
        TrafficRoutingConfiguration: serializeAws_json1_1TrafficRoutingConfig(
          input.TrafficRoutingConfiguration,
          context
        ),
      }),
  };
};

const serializeAws_json1_1CapacitySize = (input: CapacitySize, context: __SerdeContext): any => {
  return {
    ...(input.Type !== undefined && input.Type !== null && { Type: input.Type }),
    ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
  };
};

const serializeAws_json1_1CaptureContentTypeHeader = (
  input: CaptureContentTypeHeader,
  context: __SerdeContext
): any => {
  return {
    ...(input.CsvContentTypes !== undefined &&
      input.CsvContentTypes !== null && {
        CsvContentTypes: serializeAws_json1_1CsvContentTypes(input.CsvContentTypes, context),
      }),
    ...(input.JsonContentTypes !== undefined &&
      input.JsonContentTypes !== null && {
        JsonContentTypes: serializeAws_json1_1JsonContentTypes(input.JsonContentTypes, context),
      }),
  };
};

const serializeAws_json1_1CaptureOption = (input: CaptureOption, context: __SerdeContext): any => {
  return {
    ...(input.CaptureMode !== undefined && input.CaptureMode !== null && { CaptureMode: input.CaptureMode }),
  };
};

const serializeAws_json1_1CaptureOptionList = (input: CaptureOption[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1CaptureOption(entry, context);
    });
};

const serializeAws_json1_1CategoricalParameterRange = (
  input: CategoricalParameterRange,
  context: __SerdeContext
): any => {
  return {
    ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    ...(input.Values !== undefined &&
      input.Values !== null && { Values: serializeAws_json1_1ParameterValues(input.Values, context) }),
  };
};

const serializeAws_json1_1CategoricalParameterRanges = (
  input: CategoricalParameterRange[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1CategoricalParameterRange(entry, context);
    });
};

const serializeAws_json1_1CategoricalParameterRangeSpecification = (
  input: CategoricalParameterRangeSpecification,
  context: __SerdeContext
): any => {
  return {
    ...(input.Values !== undefined &&
      input.Values !== null && { Values: serializeAws_json1_1ParameterValues(input.Values, context) }),
  };
};

const serializeAws_json1_1Channel = (input: Channel, context: __SerdeContext): any => {
  return {
    ...(input.ChannelName !== undefined && input.ChannelName !== null && { ChannelName: input.ChannelName }),
    ...(input.CompressionType !== undefined &&
      input.CompressionType !== null && { CompressionType: input.CompressionType }),
    ...(input.ContentType !== undefined && input.ContentType !== null && { ContentType: input.ContentType }),
    ...(input.DataSource !== undefined &&
      input.DataSource !== null && { DataSource: serializeAws_json1_1DataSource(input.DataSource, context) }),
    ...(input.InputMode !== undefined && input.InputMode !== null && { InputMode: input.InputMode }),
    ...(input.RecordWrapperType !== undefined &&
      input.RecordWrapperType !== null && { RecordWrapperType: input.RecordWrapperType }),
    ...(input.ShuffleConfig !== undefined &&
      input.ShuffleConfig !== null && {
        ShuffleConfig: serializeAws_json1_1ShuffleConfig(input.ShuffleConfig, context),
      }),
  };
};

const serializeAws_json1_1ChannelSpecification = (input: ChannelSpecification, context: __SerdeContext): any => {
  return {
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.IsRequired !== undefined && input.IsRequired !== null && { IsRequired: input.IsRequired }),
    ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    ...(input.SupportedCompressionTypes !== undefined &&
      input.SupportedCompressionTypes !== null && {
        SupportedCompressionTypes: serializeAws_json1_1CompressionTypes(input.SupportedCompressionTypes, context),
      }),
    ...(input.SupportedContentTypes !== undefined &&
      input.SupportedContentTypes !== null && {
        SupportedContentTypes: serializeAws_json1_1ContentTypes(input.SupportedContentTypes, context),
      }),
    ...(input.SupportedInputModes !== undefined &&
      input.SupportedInputModes !== null && {
        SupportedInputModes: serializeAws_json1_1InputModes(input.SupportedInputModes, context),
      }),
  };
};

const serializeAws_json1_1ChannelSpecifications = (input: ChannelSpecification[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1ChannelSpecification(entry, context);
    });
};

const serializeAws_json1_1CheckpointConfig = (input: CheckpointConfig, context: __SerdeContext): any => {
  return {
    ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
    ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
  };
};

const serializeAws_json1_1Cidrs = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1CognitoConfig = (input: CognitoConfig, context: __SerdeContext): any => {
  return {
    ...(input.ClientId !== undefined && input.ClientId !== null && { ClientId: input.ClientId }),
    ...(input.UserPool !== undefined && input.UserPool !== null && { UserPool: input.UserPool }),
  };
};

const serializeAws_json1_1CognitoMemberDefinition = (input: CognitoMemberDefinition, context: __SerdeContext): any => {
  return {
    ...(input.ClientId !== undefined && input.ClientId !== null && { ClientId: input.ClientId }),
    ...(input.UserGroup !== undefined && input.UserGroup !== null && { UserGroup: input.UserGroup }),
    ...(input.UserPool !== undefined && input.UserPool !== null && { UserPool: input.UserPool }),
  };
};

const serializeAws_json1_1CollectionConfiguration = (input: CollectionConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.CollectionName !== undefined &&
      input.CollectionName !== null && { CollectionName: input.CollectionName }),
    ...(input.CollectionParameters !== undefined &&
      input.CollectionParameters !== null && {
        CollectionParameters: serializeAws_json1_1CollectionParameters(input.CollectionParameters, context),
      }),
  };
};

const serializeAws_json1_1CollectionConfigurations = (
  input: CollectionConfiguration[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1CollectionConfiguration(entry, context);
    });
};

const serializeAws_json1_1CollectionParameters = (input: { [key: string]: string }, context: __SerdeContext): any => {
  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const serializeAws_json1_1CompressionTypes = (input: (CompressionType | string)[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1ContainerArguments = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1ContainerDefinition = (input: ContainerDefinition, context: __SerdeContext): any => {
  return {
    ...(input.ContainerHostname !== undefined &&
      input.ContainerHostname !== null && { ContainerHostname: input.ContainerHostname }),
    ...(input.Environment !== undefined &&
      input.Environment !== null && { Environment: serializeAws_json1_1EnvironmentMap(input.Environment, context) }),
    ...(input.Image !== undefined && input.Image !== null && { Image: input.Image }),
    ...(input.ImageConfig !== undefined &&
      input.ImageConfig !== null && { ImageConfig: serializeAws_json1_1ImageConfig(input.ImageConfig, context) }),
    ...(input.Mode !== undefined && input.Mode !== null && { Mode: input.Mode }),
    ...(input.ModelDataUrl !== undefined && input.ModelDataUrl !== null && { ModelDataUrl: input.ModelDataUrl }),
    ...(input.ModelPackageName !== undefined &&
      input.ModelPackageName !== null && { ModelPackageName: input.ModelPackageName }),
    ...(input.MultiModelConfig !== undefined &&
      input.MultiModelConfig !== null && {
        MultiModelConfig: serializeAws_json1_1MultiModelConfig(input.MultiModelConfig, context),
      }),
  };
};

const serializeAws_json1_1ContainerDefinitionList = (input: ContainerDefinition[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1ContainerDefinition(entry, context);
    });
};

const serializeAws_json1_1ContainerEntrypoint = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1ContentClassifiers = (
  input: (ContentClassifier | string)[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1ContentTypes = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1ContextSource = (input: ContextSource, context: __SerdeContext): any => {
  return {
    ...(input.SourceId !== undefined && input.SourceId !== null && { SourceId: input.SourceId }),
    ...(input.SourceType !== undefined && input.SourceType !== null && { SourceType: input.SourceType }),
    ...(input.SourceUri !== undefined && input.SourceUri !== null && { SourceUri: input.SourceUri }),
  };
};

const serializeAws_json1_1ContinuousParameterRange = (
  input: ContinuousParameterRange,
  context: __SerdeContext
): any => {
  return {
    ...(input.MaxValue !== undefined && input.MaxValue !== null && { MaxValue: input.MaxValue }),
    ...(input.MinValue !== undefined && input.MinValue !== null && { MinValue: input.MinValue }),
    ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    ...(input.ScalingType !== undefined && input.ScalingType !== null && { ScalingType: input.ScalingType }),
  };
};

const serializeAws_json1_1ContinuousParameterRanges = (
  input: ContinuousParameterRange[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1ContinuousParameterRange(entry, context);
    });
};

const serializeAws_json1_1ContinuousParameterRangeSpecification = (
  input: ContinuousParameterRangeSpecification,
  context: __SerdeContext
): any => {
  return {
    ...(input.MaxValue !== undefined && input.MaxValue !== null && { MaxValue: input.MaxValue }),
    ...(input.MinValue !== undefined && input.MinValue !== null && { MinValue: input.MinValue }),
  };
};

const serializeAws_json1_1CreateActionRequest = (input: CreateActionRequest, context: __SerdeContext): any => {
  return {
    ...(input.ActionName !== undefined && input.ActionName !== null && { ActionName: input.ActionName }),
    ...(input.ActionType !== undefined && input.ActionType !== null && { ActionType: input.ActionType }),
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.MetadataProperties !== undefined &&
      input.MetadataProperties !== null && {
        MetadataProperties: serializeAws_json1_1MetadataProperties(input.MetadataProperties, context),
      }),
    ...(input.Properties !== undefined &&
      input.Properties !== null && {
        Properties: serializeAws_json1_1LineageEntityParameters(input.Properties, context),
      }),
    ...(input.Source !== undefined &&
      input.Source !== null && { Source: serializeAws_json1_1ActionSource(input.Source, context) }),
    ...(input.Status !== undefined && input.Status !== null && { Status: input.Status }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateAlgorithmInput = (input: CreateAlgorithmInput, context: __SerdeContext): any => {
  return {
    ...(input.AlgorithmDescription !== undefined &&
      input.AlgorithmDescription !== null && { AlgorithmDescription: input.AlgorithmDescription }),
    ...(input.AlgorithmName !== undefined && input.AlgorithmName !== null && { AlgorithmName: input.AlgorithmName }),
    ...(input.CertifyForMarketplace !== undefined &&
      input.CertifyForMarketplace !== null && { CertifyForMarketplace: input.CertifyForMarketplace }),
    ...(input.InferenceSpecification !== undefined &&
      input.InferenceSpecification !== null && {
        InferenceSpecification: serializeAws_json1_1InferenceSpecification(input.InferenceSpecification, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.TrainingSpecification !== undefined &&
      input.TrainingSpecification !== null && {
        TrainingSpecification: serializeAws_json1_1TrainingSpecification(input.TrainingSpecification, context),
      }),
    ...(input.ValidationSpecification !== undefined &&
      input.ValidationSpecification !== null && {
        ValidationSpecification: serializeAws_json1_1AlgorithmValidationSpecification(
          input.ValidationSpecification,
          context
        ),
      }),
  };
};

const serializeAws_json1_1CreateAppImageConfigRequest = (
  input: CreateAppImageConfigRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.AppImageConfigName !== undefined &&
      input.AppImageConfigName !== null && { AppImageConfigName: input.AppImageConfigName }),
    ...(input.KernelGatewayImageConfig !== undefined &&
      input.KernelGatewayImageConfig !== null && {
        KernelGatewayImageConfig: serializeAws_json1_1KernelGatewayImageConfig(input.KernelGatewayImageConfig, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateAppRequest = (input: CreateAppRequest, context: __SerdeContext): any => {
  return {
    ...(input.AppName !== undefined && input.AppName !== null && { AppName: input.AppName }),
    ...(input.AppType !== undefined && input.AppType !== null && { AppType: input.AppType }),
    ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
    ...(input.ResourceSpec !== undefined &&
      input.ResourceSpec !== null && { ResourceSpec: serializeAws_json1_1ResourceSpec(input.ResourceSpec, context) }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.UserProfileName !== undefined &&
      input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
  };
};

const serializeAws_json1_1CreateArtifactRequest = (input: CreateArtifactRequest, context: __SerdeContext): any => {
  return {
    ...(input.ArtifactName !== undefined && input.ArtifactName !== null && { ArtifactName: input.ArtifactName }),
    ...(input.ArtifactType !== undefined && input.ArtifactType !== null && { ArtifactType: input.ArtifactType }),
    ...(input.MetadataProperties !== undefined &&
      input.MetadataProperties !== null && {
        MetadataProperties: serializeAws_json1_1MetadataProperties(input.MetadataProperties, context),
      }),
    ...(input.Properties !== undefined &&
      input.Properties !== null && {
        Properties: serializeAws_json1_1LineageEntityParameters(input.Properties, context),
      }),
    ...(input.Source !== undefined &&
      input.Source !== null && { Source: serializeAws_json1_1ArtifactSource(input.Source, context) }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateAutoMLJobRequest = (input: CreateAutoMLJobRequest, context: __SerdeContext): any => {
  return {
    ...(input.AutoMLJobConfig !== undefined &&
      input.AutoMLJobConfig !== null && {
        AutoMLJobConfig: serializeAws_json1_1AutoMLJobConfig(input.AutoMLJobConfig, context),
      }),
    ...(input.AutoMLJobName !== undefined && input.AutoMLJobName !== null && { AutoMLJobName: input.AutoMLJobName }),
    ...(input.AutoMLJobObjective !== undefined &&
      input.AutoMLJobObjective !== null && {
        AutoMLJobObjective: serializeAws_json1_1AutoMLJobObjective(input.AutoMLJobObjective, context),
      }),
    ...(input.GenerateCandidateDefinitionsOnly !== undefined &&
      input.GenerateCandidateDefinitionsOnly !== null && {
        GenerateCandidateDefinitionsOnly: input.GenerateCandidateDefinitionsOnly,
      }),
    ...(input.InputDataConfig !== undefined &&
      input.InputDataConfig !== null && {
        InputDataConfig: serializeAws_json1_1AutoMLInputDataConfig(input.InputDataConfig, context),
      }),
    ...(input.ModelDeployConfig !== undefined &&
      input.ModelDeployConfig !== null && {
        ModelDeployConfig: serializeAws_json1_1ModelDeployConfig(input.ModelDeployConfig, context),
      }),
    ...(input.OutputDataConfig !== undefined &&
      input.OutputDataConfig !== null && {
        OutputDataConfig: serializeAws_json1_1AutoMLOutputDataConfig(input.OutputDataConfig, context),
      }),
    ...(input.ProblemType !== undefined && input.ProblemType !== null && { ProblemType: input.ProblemType }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateCodeRepositoryInput = (
  input: CreateCodeRepositoryInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.CodeRepositoryName !== undefined &&
      input.CodeRepositoryName !== null && { CodeRepositoryName: input.CodeRepositoryName }),
    ...(input.GitConfig !== undefined &&
      input.GitConfig !== null && { GitConfig: serializeAws_json1_1GitConfig(input.GitConfig, context) }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateCompilationJobRequest = (
  input: CreateCompilationJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CompilationJobName !== undefined &&
      input.CompilationJobName !== null && { CompilationJobName: input.CompilationJobName }),
    ...(input.InputConfig !== undefined &&
      input.InputConfig !== null && { InputConfig: serializeAws_json1_1InputConfig(input.InputConfig, context) }),
    ...(input.OutputConfig !== undefined &&
      input.OutputConfig !== null && { OutputConfig: serializeAws_json1_1OutputConfig(input.OutputConfig, context) }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.StoppingCondition !== undefined &&
      input.StoppingCondition !== null && {
        StoppingCondition: serializeAws_json1_1StoppingCondition(input.StoppingCondition, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateContextRequest = (input: CreateContextRequest, context: __SerdeContext): any => {
  return {
    ...(input.ContextName !== undefined && input.ContextName !== null && { ContextName: input.ContextName }),
    ...(input.ContextType !== undefined && input.ContextType !== null && { ContextType: input.ContextType }),
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.Properties !== undefined &&
      input.Properties !== null && {
        Properties: serializeAws_json1_1LineageEntityParameters(input.Properties, context),
      }),
    ...(input.Source !== undefined &&
      input.Source !== null && { Source: serializeAws_json1_1ContextSource(input.Source, context) }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateDataQualityJobDefinitionRequest = (
  input: CreateDataQualityJobDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.DataQualityAppSpecification !== undefined &&
      input.DataQualityAppSpecification !== null && {
        DataQualityAppSpecification: serializeAws_json1_1DataQualityAppSpecification(
          input.DataQualityAppSpecification,
          context
        ),
      }),
    ...(input.DataQualityBaselineConfig !== undefined &&
      input.DataQualityBaselineConfig !== null && {
        DataQualityBaselineConfig: serializeAws_json1_1DataQualityBaselineConfig(
          input.DataQualityBaselineConfig,
          context
        ),
      }),
    ...(input.DataQualityJobInput !== undefined &&
      input.DataQualityJobInput !== null && {
        DataQualityJobInput: serializeAws_json1_1DataQualityJobInput(input.DataQualityJobInput, context),
      }),
    ...(input.DataQualityJobOutputConfig !== undefined &&
      input.DataQualityJobOutputConfig !== null && {
        DataQualityJobOutputConfig: serializeAws_json1_1MonitoringOutputConfig(
          input.DataQualityJobOutputConfig,
          context
        ),
      }),
    ...(input.JobDefinitionName !== undefined &&
      input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
    ...(input.JobResources !== undefined &&
      input.JobResources !== null && {
        JobResources: serializeAws_json1_1MonitoringResources(input.JobResources, context),
      }),
    ...(input.NetworkConfig !== undefined &&
      input.NetworkConfig !== null && {
        NetworkConfig: serializeAws_json1_1MonitoringNetworkConfig(input.NetworkConfig, context),
      }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.StoppingCondition !== undefined &&
      input.StoppingCondition !== null && {
        StoppingCondition: serializeAws_json1_1MonitoringStoppingCondition(input.StoppingCondition, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateDeviceFleetRequest = (
  input: CreateDeviceFleetRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.DeviceFleetName !== undefined &&
      input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
    ...(input.OutputConfig !== undefined &&
      input.OutputConfig !== null && {
        OutputConfig: serializeAws_json1_1EdgeOutputConfig(input.OutputConfig, context),
      }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateDomainRequest = (input: CreateDomainRequest, context: __SerdeContext): any => {
  return {
    ...(input.AppNetworkAccessType !== undefined &&
      input.AppNetworkAccessType !== null && { AppNetworkAccessType: input.AppNetworkAccessType }),
    ...(input.AuthMode !== undefined && input.AuthMode !== null && { AuthMode: input.AuthMode }),
    ...(input.DefaultUserSettings !== undefined &&
      input.DefaultUserSettings !== null && {
        DefaultUserSettings: serializeAws_json1_1UserSettings(input.DefaultUserSettings, context),
      }),
    ...(input.DomainName !== undefined && input.DomainName !== null && { DomainName: input.DomainName }),
    ...(input.HomeEfsFileSystemKmsKeyId !== undefined &&
      input.HomeEfsFileSystemKmsKeyId !== null && { HomeEfsFileSystemKmsKeyId: input.HomeEfsFileSystemKmsKeyId }),
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.SubnetIds !== undefined &&
      input.SubnetIds !== null && { SubnetIds: serializeAws_json1_1Subnets(input.SubnetIds, context) }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.VpcId !== undefined && input.VpcId !== null && { VpcId: input.VpcId }),
  };
};

const serializeAws_json1_1CreateEdgePackagingJobRequest = (
  input: CreateEdgePackagingJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CompilationJobName !== undefined &&
      input.CompilationJobName !== null && { CompilationJobName: input.CompilationJobName }),
    ...(input.EdgePackagingJobName !== undefined &&
      input.EdgePackagingJobName !== null && { EdgePackagingJobName: input.EdgePackagingJobName }),
    ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
    ...(input.ModelVersion !== undefined && input.ModelVersion !== null && { ModelVersion: input.ModelVersion }),
    ...(input.OutputConfig !== undefined &&
      input.OutputConfig !== null && {
        OutputConfig: serializeAws_json1_1EdgeOutputConfig(input.OutputConfig, context),
      }),
    ...(input.ResourceKey !== undefined && input.ResourceKey !== null && { ResourceKey: input.ResourceKey }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateEndpointConfigInput = (
  input: CreateEndpointConfigInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.DataCaptureConfig !== undefined &&
      input.DataCaptureConfig !== null && {
        DataCaptureConfig: serializeAws_json1_1DataCaptureConfig(input.DataCaptureConfig, context),
      }),
    ...(input.EndpointConfigName !== undefined &&
      input.EndpointConfigName !== null && { EndpointConfigName: input.EndpointConfigName }),
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.ProductionVariants !== undefined &&
      input.ProductionVariants !== null && {
        ProductionVariants: serializeAws_json1_1ProductionVariantList(input.ProductionVariants, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateEndpointInput = (input: CreateEndpointInput, context: __SerdeContext): any => {
  return {
    ...(input.EndpointConfigName !== undefined &&
      input.EndpointConfigName !== null && { EndpointConfigName: input.EndpointConfigName }),
    ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateExperimentRequest = (input: CreateExperimentRequest, context: __SerdeContext): any => {
  return {
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
    ...(input.ExperimentName !== undefined &&
      input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateFeatureGroupRequest = (
  input: CreateFeatureGroupRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.EventTimeFeatureName !== undefined &&
      input.EventTimeFeatureName !== null && { EventTimeFeatureName: input.EventTimeFeatureName }),
    ...(input.FeatureDefinitions !== undefined &&
      input.FeatureDefinitions !== null && {
        FeatureDefinitions: serializeAws_json1_1FeatureDefinitions(input.FeatureDefinitions, context),
      }),
    ...(input.FeatureGroupName !== undefined &&
      input.FeatureGroupName !== null && { FeatureGroupName: input.FeatureGroupName }),
    ...(input.OfflineStoreConfig !== undefined &&
      input.OfflineStoreConfig !== null && {
        OfflineStoreConfig: serializeAws_json1_1OfflineStoreConfig(input.OfflineStoreConfig, context),
      }),
    ...(input.OnlineStoreConfig !== undefined &&
      input.OnlineStoreConfig !== null && {
        OnlineStoreConfig: serializeAws_json1_1OnlineStoreConfig(input.OnlineStoreConfig, context),
      }),
    ...(input.RecordIdentifierFeatureName !== undefined &&
      input.RecordIdentifierFeatureName !== null && { RecordIdentifierFeatureName: input.RecordIdentifierFeatureName }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateFlowDefinitionRequest = (
  input: CreateFlowDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.FlowDefinitionName !== undefined &&
      input.FlowDefinitionName !== null && { FlowDefinitionName: input.FlowDefinitionName }),
    ...(input.HumanLoopActivationConfig !== undefined &&
      input.HumanLoopActivationConfig !== null && {
        HumanLoopActivationConfig: serializeAws_json1_1HumanLoopActivationConfig(
          input.HumanLoopActivationConfig,
          context
        ),
      }),
    ...(input.HumanLoopConfig !== undefined &&
      input.HumanLoopConfig !== null && {
        HumanLoopConfig: serializeAws_json1_1HumanLoopConfig(input.HumanLoopConfig, context),
      }),
    ...(input.HumanLoopRequestSource !== undefined &&
      input.HumanLoopRequestSource !== null && {
        HumanLoopRequestSource: serializeAws_json1_1HumanLoopRequestSource(input.HumanLoopRequestSource, context),
      }),
    ...(input.OutputConfig !== undefined &&
      input.OutputConfig !== null && {
        OutputConfig: serializeAws_json1_1FlowDefinitionOutputConfig(input.OutputConfig, context),
      }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateHumanTaskUiRequest = (
  input: CreateHumanTaskUiRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.HumanTaskUiName !== undefined &&
      input.HumanTaskUiName !== null && { HumanTaskUiName: input.HumanTaskUiName }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.UiTemplate !== undefined &&
      input.UiTemplate !== null && { UiTemplate: serializeAws_json1_1UiTemplate(input.UiTemplate, context) }),
  };
};

const serializeAws_json1_1CreateHyperParameterTuningJobRequest = (
  input: CreateHyperParameterTuningJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.HyperParameterTuningJobConfig !== undefined &&
      input.HyperParameterTuningJobConfig !== null && {
        HyperParameterTuningJobConfig: serializeAws_json1_1HyperParameterTuningJobConfig(
          input.HyperParameterTuningJobConfig,
          context
        ),
      }),
    ...(input.HyperParameterTuningJobName !== undefined &&
      input.HyperParameterTuningJobName !== null && { HyperParameterTuningJobName: input.HyperParameterTuningJobName }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.TrainingJobDefinition !== undefined &&
      input.TrainingJobDefinition !== null && {
        TrainingJobDefinition: serializeAws_json1_1HyperParameterTrainingJobDefinition(
          input.TrainingJobDefinition,
          context
        ),
      }),
    ...(input.TrainingJobDefinitions !== undefined &&
      input.TrainingJobDefinitions !== null && {
        TrainingJobDefinitions: serializeAws_json1_1HyperParameterTrainingJobDefinitions(
          input.TrainingJobDefinitions,
          context
        ),
      }),
    ...(input.WarmStartConfig !== undefined &&
      input.WarmStartConfig !== null && {
        WarmStartConfig: serializeAws_json1_1HyperParameterTuningJobWarmStartConfig(input.WarmStartConfig, context),
      }),
  };
};

const serializeAws_json1_1CreateImageRequest = (input: CreateImageRequest, context: __SerdeContext): any => {
  return {
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
    ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateImageVersionRequest = (
  input: CreateImageVersionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.BaseImage !== undefined && input.BaseImage !== null && { BaseImage: input.BaseImage }),
    ClientToken: input.ClientToken ?? generateIdempotencyToken(),
    ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
  };
};

const serializeAws_json1_1CreateLabelingJobRequest = (
  input: CreateLabelingJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.HumanTaskConfig !== undefined &&
      input.HumanTaskConfig !== null && {
        HumanTaskConfig: serializeAws_json1_1HumanTaskConfig(input.HumanTaskConfig, context),
      }),
    ...(input.InputConfig !== undefined &&
      input.InputConfig !== null && {
        InputConfig: serializeAws_json1_1LabelingJobInputConfig(input.InputConfig, context),
      }),
    ...(input.LabelAttributeName !== undefined &&
      input.LabelAttributeName !== null && { LabelAttributeName: input.LabelAttributeName }),
    ...(input.LabelCategoryConfigS3Uri !== undefined &&
      input.LabelCategoryConfigS3Uri !== null && { LabelCategoryConfigS3Uri: input.LabelCategoryConfigS3Uri }),
    ...(input.LabelingJobAlgorithmsConfig !== undefined &&
      input.LabelingJobAlgorithmsConfig !== null && {
        LabelingJobAlgorithmsConfig: serializeAws_json1_1LabelingJobAlgorithmsConfig(
          input.LabelingJobAlgorithmsConfig,
          context
        ),
      }),
    ...(input.LabelingJobName !== undefined &&
      input.LabelingJobName !== null && { LabelingJobName: input.LabelingJobName }),
    ...(input.OutputConfig !== undefined &&
      input.OutputConfig !== null && {
        OutputConfig: serializeAws_json1_1LabelingJobOutputConfig(input.OutputConfig, context),
      }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.StoppingConditions !== undefined &&
      input.StoppingConditions !== null && {
        StoppingConditions: serializeAws_json1_1LabelingJobStoppingConditions(input.StoppingConditions, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateModelBiasJobDefinitionRequest = (
  input: CreateModelBiasJobDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.JobDefinitionName !== undefined &&
      input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
    ...(input.JobResources !== undefined &&
      input.JobResources !== null && {
        JobResources: serializeAws_json1_1MonitoringResources(input.JobResources, context),
      }),
    ...(input.ModelBiasAppSpecification !== undefined &&
      input.ModelBiasAppSpecification !== null && {
        ModelBiasAppSpecification: serializeAws_json1_1ModelBiasAppSpecification(
          input.ModelBiasAppSpecification,
          context
        ),
      }),
    ...(input.ModelBiasBaselineConfig !== undefined &&
      input.ModelBiasBaselineConfig !== null && {
        ModelBiasBaselineConfig: serializeAws_json1_1ModelBiasBaselineConfig(input.ModelBiasBaselineConfig, context),
      }),
    ...(input.ModelBiasJobInput !== undefined &&
      input.ModelBiasJobInput !== null && {
        ModelBiasJobInput: serializeAws_json1_1ModelBiasJobInput(input.ModelBiasJobInput, context),
      }),
    ...(input.ModelBiasJobOutputConfig !== undefined &&
      input.ModelBiasJobOutputConfig !== null && {
        ModelBiasJobOutputConfig: serializeAws_json1_1MonitoringOutputConfig(input.ModelBiasJobOutputConfig, context),
      }),
    ...(input.NetworkConfig !== undefined &&
      input.NetworkConfig !== null && {
        NetworkConfig: serializeAws_json1_1MonitoringNetworkConfig(input.NetworkConfig, context),
      }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.StoppingCondition !== undefined &&
      input.StoppingCondition !== null && {
        StoppingCondition: serializeAws_json1_1MonitoringStoppingCondition(input.StoppingCondition, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateModelExplainabilityJobDefinitionRequest = (
  input: CreateModelExplainabilityJobDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.JobDefinitionName !== undefined &&
      input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
    ...(input.JobResources !== undefined &&
      input.JobResources !== null && {
        JobResources: serializeAws_json1_1MonitoringResources(input.JobResources, context),
      }),
    ...(input.ModelExplainabilityAppSpecification !== undefined &&
      input.ModelExplainabilityAppSpecification !== null && {
        ModelExplainabilityAppSpecification: serializeAws_json1_1ModelExplainabilityAppSpecification(
          input.ModelExplainabilityAppSpecification,
          context
        ),
      }),
    ...(input.ModelExplainabilityBaselineConfig !== undefined &&
      input.ModelExplainabilityBaselineConfig !== null && {
        ModelExplainabilityBaselineConfig: serializeAws_json1_1ModelExplainabilityBaselineConfig(
          input.ModelExplainabilityBaselineConfig,
          context
        ),
      }),
    ...(input.ModelExplainabilityJobInput !== undefined &&
      input.ModelExplainabilityJobInput !== null && {
        ModelExplainabilityJobInput: serializeAws_json1_1ModelExplainabilityJobInput(
          input.ModelExplainabilityJobInput,
          context
        ),
      }),
    ...(input.ModelExplainabilityJobOutputConfig !== undefined &&
      input.ModelExplainabilityJobOutputConfig !== null && {
        ModelExplainabilityJobOutputConfig: serializeAws_json1_1MonitoringOutputConfig(
          input.ModelExplainabilityJobOutputConfig,
          context
        ),
      }),
    ...(input.NetworkConfig !== undefined &&
      input.NetworkConfig !== null && {
        NetworkConfig: serializeAws_json1_1MonitoringNetworkConfig(input.NetworkConfig, context),
      }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.StoppingCondition !== undefined &&
      input.StoppingCondition !== null && {
        StoppingCondition: serializeAws_json1_1MonitoringStoppingCondition(input.StoppingCondition, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateModelInput = (input: CreateModelInput, context: __SerdeContext): any => {
  return {
    ...(input.Containers !== undefined &&
      input.Containers !== null && {
        Containers: serializeAws_json1_1ContainerDefinitionList(input.Containers, context),
      }),
    ...(input.EnableNetworkIsolation !== undefined &&
      input.EnableNetworkIsolation !== null && { EnableNetworkIsolation: input.EnableNetworkIsolation }),
    ...(input.ExecutionRoleArn !== undefined &&
      input.ExecutionRoleArn !== null && { ExecutionRoleArn: input.ExecutionRoleArn }),
    ...(input.InferenceExecutionConfig !== undefined &&
      input.InferenceExecutionConfig !== null && {
        InferenceExecutionConfig: serializeAws_json1_1InferenceExecutionConfig(input.InferenceExecutionConfig, context),
      }),
    ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
    ...(input.PrimaryContainer !== undefined &&
      input.PrimaryContainer !== null && {
        PrimaryContainer: serializeAws_json1_1ContainerDefinition(input.PrimaryContainer, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.VpcConfig !== undefined &&
      input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
  };
};

const serializeAws_json1_1CreateModelPackageGroupInput = (
  input: CreateModelPackageGroupInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.ModelPackageGroupDescription !== undefined &&
      input.ModelPackageGroupDescription !== null && {
        ModelPackageGroupDescription: input.ModelPackageGroupDescription,
      }),
    ...(input.ModelPackageGroupName !== undefined &&
      input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateModelPackageInput = (input: CreateModelPackageInput, context: __SerdeContext): any => {
  return {
    ...(input.CertifyForMarketplace !== undefined &&
      input.CertifyForMarketplace !== null && { CertifyForMarketplace: input.CertifyForMarketplace }),
    ClientToken: input.ClientToken ?? generateIdempotencyToken(),
    ...(input.InferenceSpecification !== undefined &&
      input.InferenceSpecification !== null && {
        InferenceSpecification: serializeAws_json1_1InferenceSpecification(input.InferenceSpecification, context),
      }),
    ...(input.MetadataProperties !== undefined &&
      input.MetadataProperties !== null && {
        MetadataProperties: serializeAws_json1_1MetadataProperties(input.MetadataProperties, context),
      }),
    ...(input.ModelApprovalStatus !== undefined &&
      input.ModelApprovalStatus !== null && { ModelApprovalStatus: input.ModelApprovalStatus }),
    ...(input.ModelMetrics !== undefined &&
      input.ModelMetrics !== null && { ModelMetrics: serializeAws_json1_1ModelMetrics(input.ModelMetrics, context) }),
    ...(input.ModelPackageDescription !== undefined &&
      input.ModelPackageDescription !== null && { ModelPackageDescription: input.ModelPackageDescription }),
    ...(input.ModelPackageGroupName !== undefined &&
      input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
    ...(input.ModelPackageName !== undefined &&
      input.ModelPackageName !== null && { ModelPackageName: input.ModelPackageName }),
    ...(input.SourceAlgorithmSpecification !== undefined &&
      input.SourceAlgorithmSpecification !== null && {
        SourceAlgorithmSpecification: serializeAws_json1_1SourceAlgorithmSpecification(
          input.SourceAlgorithmSpecification,
          context
        ),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.ValidationSpecification !== undefined &&
      input.ValidationSpecification !== null && {
        ValidationSpecification: serializeAws_json1_1ModelPackageValidationSpecification(
          input.ValidationSpecification,
          context
        ),
      }),
  };
};

const serializeAws_json1_1CreateModelQualityJobDefinitionRequest = (
  input: CreateModelQualityJobDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.JobDefinitionName !== undefined &&
      input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
    ...(input.JobResources !== undefined &&
      input.JobResources !== null && {
        JobResources: serializeAws_json1_1MonitoringResources(input.JobResources, context),
      }),
    ...(input.ModelQualityAppSpecification !== undefined &&
      input.ModelQualityAppSpecification !== null && {
        ModelQualityAppSpecification: serializeAws_json1_1ModelQualityAppSpecification(
          input.ModelQualityAppSpecification,
          context
        ),
      }),
    ...(input.ModelQualityBaselineConfig !== undefined &&
      input.ModelQualityBaselineConfig !== null && {
        ModelQualityBaselineConfig: serializeAws_json1_1ModelQualityBaselineConfig(
          input.ModelQualityBaselineConfig,
          context
        ),
      }),
    ...(input.ModelQualityJobInput !== undefined &&
      input.ModelQualityJobInput !== null && {
        ModelQualityJobInput: serializeAws_json1_1ModelQualityJobInput(input.ModelQualityJobInput, context),
      }),
    ...(input.ModelQualityJobOutputConfig !== undefined &&
      input.ModelQualityJobOutputConfig !== null && {
        ModelQualityJobOutputConfig: serializeAws_json1_1MonitoringOutputConfig(
          input.ModelQualityJobOutputConfig,
          context
        ),
      }),
    ...(input.NetworkConfig !== undefined &&
      input.NetworkConfig !== null && {
        NetworkConfig: serializeAws_json1_1MonitoringNetworkConfig(input.NetworkConfig, context),
      }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.StoppingCondition !== undefined &&
      input.StoppingCondition !== null && {
        StoppingCondition: serializeAws_json1_1MonitoringStoppingCondition(input.StoppingCondition, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateMonitoringScheduleRequest = (
  input: CreateMonitoringScheduleRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.MonitoringScheduleConfig !== undefined &&
      input.MonitoringScheduleConfig !== null && {
        MonitoringScheduleConfig: serializeAws_json1_1MonitoringScheduleConfig(input.MonitoringScheduleConfig, context),
      }),
    ...(input.MonitoringScheduleName !== undefined &&
      input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateNotebookInstanceInput = (
  input: CreateNotebookInstanceInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.AcceleratorTypes !== undefined &&
      input.AcceleratorTypes !== null && {
        AcceleratorTypes: serializeAws_json1_1NotebookInstanceAcceleratorTypes(input.AcceleratorTypes, context),
      }),
    ...(input.AdditionalCodeRepositories !== undefined &&
      input.AdditionalCodeRepositories !== null && {
        AdditionalCodeRepositories: serializeAws_json1_1AdditionalCodeRepositoryNamesOrUrls(
          input.AdditionalCodeRepositories,
          context
        ),
      }),
    ...(input.DefaultCodeRepository !== undefined &&
      input.DefaultCodeRepository !== null && { DefaultCodeRepository: input.DefaultCodeRepository }),
    ...(input.DirectInternetAccess !== undefined &&
      input.DirectInternetAccess !== null && { DirectInternetAccess: input.DirectInternetAccess }),
    ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.LifecycleConfigName !== undefined &&
      input.LifecycleConfigName !== null && { LifecycleConfigName: input.LifecycleConfigName }),
    ...(input.NotebookInstanceName !== undefined &&
      input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.RootAccess !== undefined && input.RootAccess !== null && { RootAccess: input.RootAccess }),
    ...(input.SecurityGroupIds !== undefined &&
      input.SecurityGroupIds !== null && {
        SecurityGroupIds: serializeAws_json1_1SecurityGroupIds(input.SecurityGroupIds, context),
      }),
    ...(input.SubnetId !== undefined && input.SubnetId !== null && { SubnetId: input.SubnetId }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.VolumeSizeInGB !== undefined &&
      input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
  };
};

const serializeAws_json1_1CreateNotebookInstanceLifecycleConfigInput = (
  input: CreateNotebookInstanceLifecycleConfigInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.NotebookInstanceLifecycleConfigName !== undefined &&
      input.NotebookInstanceLifecycleConfigName !== null && {
        NotebookInstanceLifecycleConfigName: input.NotebookInstanceLifecycleConfigName,
      }),
    ...(input.OnCreate !== undefined &&
      input.OnCreate !== null && {
        OnCreate: serializeAws_json1_1NotebookInstanceLifecycleConfigList(input.OnCreate, context),
      }),
    ...(input.OnStart !== undefined &&
      input.OnStart !== null && {
        OnStart: serializeAws_json1_1NotebookInstanceLifecycleConfigList(input.OnStart, context),
      }),
  };
};

const serializeAws_json1_1CreatePipelineRequest = (input: CreatePipelineRequest, context: __SerdeContext): any => {
  return {
    ClientRequestToken: input.ClientRequestToken ?? generateIdempotencyToken(),
    ...(input.PipelineDefinition !== undefined &&
      input.PipelineDefinition !== null && { PipelineDefinition: input.PipelineDefinition }),
    ...(input.PipelineDescription !== undefined &&
      input.PipelineDescription !== null && { PipelineDescription: input.PipelineDescription }),
    ...(input.PipelineDisplayName !== undefined &&
      input.PipelineDisplayName !== null && { PipelineDisplayName: input.PipelineDisplayName }),
    ...(input.PipelineName !== undefined && input.PipelineName !== null && { PipelineName: input.PipelineName }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreatePresignedDomainUrlRequest = (
  input: CreatePresignedDomainUrlRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
    ...(input.ExpiresInSeconds !== undefined &&
      input.ExpiresInSeconds !== null && { ExpiresInSeconds: input.ExpiresInSeconds }),
    ...(input.SessionExpirationDurationInSeconds !== undefined &&
      input.SessionExpirationDurationInSeconds !== null && {
        SessionExpirationDurationInSeconds: input.SessionExpirationDurationInSeconds,
      }),
    ...(input.UserProfileName !== undefined &&
      input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
  };
};

const serializeAws_json1_1CreatePresignedNotebookInstanceUrlInput = (
  input: CreatePresignedNotebookInstanceUrlInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.NotebookInstanceName !== undefined &&
      input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
    ...(input.SessionExpirationDurationInSeconds !== undefined &&
      input.SessionExpirationDurationInSeconds !== null && {
        SessionExpirationDurationInSeconds: input.SessionExpirationDurationInSeconds,
      }),
  };
};

const serializeAws_json1_1CreateProcessingJobRequest = (
  input: CreateProcessingJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.AppSpecification !== undefined &&
      input.AppSpecification !== null && {
        AppSpecification: serializeAws_json1_1AppSpecification(input.AppSpecification, context),
      }),
    ...(input.Environment !== undefined &&
      input.Environment !== null && {
        Environment: serializeAws_json1_1ProcessingEnvironmentMap(input.Environment, context),
      }),
    ...(input.ExperimentConfig !== undefined &&
      input.ExperimentConfig !== null && {
        ExperimentConfig: serializeAws_json1_1ExperimentConfig(input.ExperimentConfig, context),
      }),
    ...(input.NetworkConfig !== undefined &&
      input.NetworkConfig !== null && {
        NetworkConfig: serializeAws_json1_1NetworkConfig(input.NetworkConfig, context),
      }),
    ...(input.ProcessingInputs !== undefined &&
      input.ProcessingInputs !== null && {
        ProcessingInputs: serializeAws_json1_1ProcessingInputs(input.ProcessingInputs, context),
      }),
    ...(input.ProcessingJobName !== undefined &&
      input.ProcessingJobName !== null && { ProcessingJobName: input.ProcessingJobName }),
    ...(input.ProcessingOutputConfig !== undefined &&
      input.ProcessingOutputConfig !== null && {
        ProcessingOutputConfig: serializeAws_json1_1ProcessingOutputConfig(input.ProcessingOutputConfig, context),
      }),
    ...(input.ProcessingResources !== undefined &&
      input.ProcessingResources !== null && {
        ProcessingResources: serializeAws_json1_1ProcessingResources(input.ProcessingResources, context),
      }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.StoppingCondition !== undefined &&
      input.StoppingCondition !== null && {
        StoppingCondition: serializeAws_json1_1ProcessingStoppingCondition(input.StoppingCondition, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateProjectInput = (input: CreateProjectInput, context: __SerdeContext): any => {
  return {
    ...(input.ProjectDescription !== undefined &&
      input.ProjectDescription !== null && { ProjectDescription: input.ProjectDescription }),
    ...(input.ProjectName !== undefined && input.ProjectName !== null && { ProjectName: input.ProjectName }),
    ...(input.ServiceCatalogProvisioningDetails !== undefined &&
      input.ServiceCatalogProvisioningDetails !== null && {
        ServiceCatalogProvisioningDetails: serializeAws_json1_1ServiceCatalogProvisioningDetails(
          input.ServiceCatalogProvisioningDetails,
          context
        ),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1CreateTrainingJobRequest = (
  input: CreateTrainingJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.AlgorithmSpecification !== undefined &&
      input.AlgorithmSpecification !== null && {
        AlgorithmSpecification: serializeAws_json1_1AlgorithmSpecification(input.AlgorithmSpecification, context),
      }),
    ...(input.CheckpointConfig !== undefined &&
      input.CheckpointConfig !== null && {
        CheckpointConfig: serializeAws_json1_1CheckpointConfig(input.CheckpointConfig, context),
      }),
    ...(input.DebugHookConfig !== undefined &&
      input.DebugHookConfig !== null && {
        DebugHookConfig: serializeAws_json1_1DebugHookConfig(input.DebugHookConfig, context),
      }),
    ...(input.DebugRuleConfigurations !== undefined &&
      input.DebugRuleConfigurations !== null && {
        DebugRuleConfigurations: serializeAws_json1_1DebugRuleConfigurations(input.DebugRuleConfigurations, context),
      }),
    ...(input.EnableInterContainerTrafficEncryption !== undefined &&
      input.EnableInterContainerTrafficEncryption !== null && {
        EnableInterContainerTrafficEncryption: input.EnableInterContainerTrafficEncryption,
      }),
    ...(input.EnableManagedSpotTraining !== undefined &&
      input.EnableManagedSpotTraining !== null && { EnableManagedSpotTraining: input.EnableManagedSpotTraining }),
    ...(input.EnableNetworkIsolation !== undefined &&
      input.EnableNetworkIsolation !== null && { EnableNetworkIsolation: input.EnableNetworkIsolation }),
    ...(input.Environment !== undefined &&
      input.Environment !== null && {
        Environment: serializeAws_json1_1TrainingEnvironmentMap(input.Environment, context),
      }),
    ...(input.ExperimentConfig !== undefined &&
      input.ExperimentConfig !== null && {
        ExperimentConfig: serializeAws_json1_1ExperimentConfig(input.ExperimentConfig, context),
      }),
    ...(input.HyperParameters !== undefined &&
      input.HyperParameters !== null && {
        HyperParameters: serializeAws_json1_1HyperParameters(input.HyperParameters, context),
      }),
    ...(input.InputDataConfig !== undefined &&
      input.InputDataConfig !== null && {
        InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
      }),
    ...(input.OutputDataConfig !== undefined &&
      input.OutputDataConfig !== null && {
        OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
      }),
    ...(input.ProfilerConfig !== undefined &&
      input.ProfilerConfig !== null && {
        ProfilerConfig: serializeAws_json1_1ProfilerConfig(input.ProfilerConfig, context),
      }),
    ...(input.ProfilerRuleConfigurations !== undefined &&
      input.ProfilerRuleConfigurations !== null && {
        ProfilerRuleConfigurations: serializeAws_json1_1ProfilerRuleConfigurations(
          input.ProfilerRuleConfigurations,
          context
        ),
      }),
    ...(input.ResourceConfig !== undefined &&
      input.ResourceConfig !== null && {
        ResourceConfig: serializeAws_json1_1ResourceConfig(input.ResourceConfig, context),
      }),
    ...(input.RetryStrategy !== undefined &&
      input.RetryStrategy !== null && {
        RetryStrategy: serializeAws_json1_1RetryStrategy(input.RetryStrategy, context),
      }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.StoppingCondition !== undefined &&
      input.StoppingCondition !== null && {
        StoppingCondition: serializeAws_json1_1StoppingCondition(input.StoppingCondition, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.TensorBoardOutputConfig !== undefined &&
      input.TensorBoardOutputConfig !== null && {
        TensorBoardOutputConfig: serializeAws_json1_1TensorBoardOutputConfig(input.TensorBoardOutputConfig, context),
      }),
    ...(input.TrainingJobName !== undefined &&
      input.TrainingJobName !== null && { TrainingJobName: input.TrainingJobName }),
    ...(input.VpcConfig !== undefined &&
      input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
  };
};

const serializeAws_json1_1CreateTransformJobRequest = (
  input: CreateTransformJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.BatchStrategy !== undefined && input.BatchStrategy !== null && { BatchStrategy: input.BatchStrategy }),
    ...(input.DataProcessing !== undefined &&
      input.DataProcessing !== null && {
        DataProcessing: serializeAws_json1_1DataProcessing(input.DataProcessing, context),
      }),
    ...(input.Environment !== undefined &&
      input.Environment !== null && {
        Environment: serializeAws_json1_1TransformEnvironmentMap(input.Environment, context),
      }),
    ...(input.ExperimentConfig !== undefined &&
      input.ExperimentConfig !== null && {
        ExperimentConfig: serializeAws_json1_1ExperimentConfig(input.ExperimentConfig, context),
      }),
    ...(input.MaxConcurrentTransforms !== undefined &&
      input.MaxConcurrentTransforms !== null && { MaxConcurrentTransforms: input.MaxConcurrentTransforms }),
    ...(input.MaxPayloadInMB !== undefined &&
      input.MaxPayloadInMB !== null && { MaxPayloadInMB: input.MaxPayloadInMB }),
    ...(input.ModelClientConfig !== undefined &&
      input.ModelClientConfig !== null && {
        ModelClientConfig: serializeAws_json1_1ModelClientConfig(input.ModelClientConfig, context),
      }),
    ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.TransformInput !== undefined &&
      input.TransformInput !== null && {
        TransformInput: serializeAws_json1_1TransformInput(input.TransformInput, context),
      }),
    ...(input.TransformJobName !== undefined &&
      input.TransformJobName !== null && { TransformJobName: input.TransformJobName }),
    ...(input.TransformOutput !== undefined &&
      input.TransformOutput !== null && {
        TransformOutput: serializeAws_json1_1TransformOutput(input.TransformOutput, context),
      }),
    ...(input.TransformResources !== undefined &&
      input.TransformResources !== null && {
        TransformResources: serializeAws_json1_1TransformResources(input.TransformResources, context),
      }),
  };
};

const serializeAws_json1_1CreateTrialComponentRequest = (
  input: CreateTrialComponentRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
    ...(input.EndTime !== undefined &&
      input.EndTime !== null && { EndTime: Math.round(input.EndTime.getTime() / 1000) }),
    ...(input.InputArtifacts !== undefined &&
      input.InputArtifacts !== null && {
        InputArtifacts: serializeAws_json1_1TrialComponentArtifacts(input.InputArtifacts, context),
      }),
    ...(input.MetadataProperties !== undefined &&
      input.MetadataProperties !== null && {
        MetadataProperties: serializeAws_json1_1MetadataProperties(input.MetadataProperties, context),
      }),
    ...(input.OutputArtifacts !== undefined &&
      input.OutputArtifacts !== null && {
        OutputArtifacts: serializeAws_json1_1TrialComponentArtifacts(input.OutputArtifacts, context),
      }),
    ...(input.Parameters !== undefined &&
      input.Parameters !== null && {
        Parameters: serializeAws_json1_1TrialComponentParameters(input.Parameters, context),
      }),
    ...(input.StartTime !== undefined &&
      input.StartTime !== null && { StartTime: Math.round(input.StartTime.getTime() / 1000) }),
    ...(input.Status !== undefined &&
      input.Status !== null && { Status: serializeAws_json1_1TrialComponentStatus(input.Status, context) }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.TrialComponentName !== undefined &&
      input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
  };
};

const serializeAws_json1_1CreateTrialRequest = (input: CreateTrialRequest, context: __SerdeContext): any => {
  return {
    ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
    ...(input.ExperimentName !== undefined &&
      input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
    ...(input.MetadataProperties !== undefined &&
      input.MetadataProperties !== null && {
        MetadataProperties: serializeAws_json1_1MetadataProperties(input.MetadataProperties, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
  };
};

const serializeAws_json1_1CreateUserProfileRequest = (
  input: CreateUserProfileRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
    ...(input.SingleSignOnUserIdentifier !== undefined &&
      input.SingleSignOnUserIdentifier !== null && { SingleSignOnUserIdentifier: input.SingleSignOnUserIdentifier }),
    ...(input.SingleSignOnUserValue !== undefined &&
      input.SingleSignOnUserValue !== null && { SingleSignOnUserValue: input.SingleSignOnUserValue }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.UserProfileName !== undefined &&
      input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
    ...(input.UserSettings !== undefined &&
      input.UserSettings !== null && { UserSettings: serializeAws_json1_1UserSettings(input.UserSettings, context) }),
  };
};

const serializeAws_json1_1CreateWorkforceRequest = (input: CreateWorkforceRequest, context: __SerdeContext): any => {
  return {
    ...(input.CognitoConfig !== undefined &&
      input.CognitoConfig !== null && {
        CognitoConfig: serializeAws_json1_1CognitoConfig(input.CognitoConfig, context),
      }),
    ...(input.OidcConfig !== undefined &&
      input.OidcConfig !== null && { OidcConfig: serializeAws_json1_1OidcConfig(input.OidcConfig, context) }),
    ...(input.SourceIpConfig !== undefined &&
      input.SourceIpConfig !== null && {
        SourceIpConfig: serializeAws_json1_1SourceIpConfig(input.SourceIpConfig, context),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.WorkforceName !== undefined && input.WorkforceName !== null && { WorkforceName: input.WorkforceName }),
  };
};

const serializeAws_json1_1CreateWorkteamRequest = (input: CreateWorkteamRequest, context: __SerdeContext): any => {
  return {
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.MemberDefinitions !== undefined &&
      input.MemberDefinitions !== null && {
        MemberDefinitions: serializeAws_json1_1MemberDefinitions(input.MemberDefinitions, context),
      }),
    ...(input.NotificationConfiguration !== undefined &&
      input.NotificationConfiguration !== null && {
        NotificationConfiguration: serializeAws_json1_1NotificationConfiguration(
          input.NotificationConfiguration,
          context
        ),
      }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
    ...(input.WorkforceName !== undefined && input.WorkforceName !== null && { WorkforceName: input.WorkforceName }),
    ...(input.WorkteamName !== undefined && input.WorkteamName !== null && { WorkteamName: input.WorkteamName }),
  };
};

const serializeAws_json1_1CsvContentTypes = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1CustomImage = (input: CustomImage, context: __SerdeContext): any => {
  return {
    ...(input.AppImageConfigName !== undefined &&
      input.AppImageConfigName !== null && { AppImageConfigName: input.AppImageConfigName }),
    ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
    ...(input.ImageVersionNumber !== undefined &&
      input.ImageVersionNumber !== null && { ImageVersionNumber: input.ImageVersionNumber }),
  };
};

const serializeAws_json1_1CustomImages = (input: CustomImage[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1CustomImage(entry, context);
    });
};

const serializeAws_json1_1DataCaptureConfig = (input: DataCaptureConfig, context: __SerdeContext): any => {
  return {
    ...(input.CaptureContentTypeHeader !== undefined &&
      input.CaptureContentTypeHeader !== null && {
        CaptureContentTypeHeader: serializeAws_json1_1CaptureContentTypeHeader(input.CaptureContentTypeHeader, context),
      }),
    ...(input.CaptureOptions !== undefined &&
      input.CaptureOptions !== null && {
        CaptureOptions: serializeAws_json1_1CaptureOptionList(input.CaptureOptions, context),
      }),
    ...(input.DestinationS3Uri !== undefined &&
      input.DestinationS3Uri !== null && { DestinationS3Uri: input.DestinationS3Uri }),
    ...(input.EnableCapture !== undefined && input.EnableCapture !== null && { EnableCapture: input.EnableCapture }),
    ...(input.InitialSamplingPercentage !== undefined &&
      input.InitialSamplingPercentage !== null && { InitialSamplingPercentage: input.InitialSamplingPercentage }),
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
  };
};

const serializeAws_json1_1DataCatalogConfig = (input: DataCatalogConfig, context: __SerdeContext): any => {
  return {
    ...(input.Catalog !== undefined && input.Catalog !== null && { Catalog: input.Catalog }),
    ...(input.Database !== undefined && input.Database !== null && { Database: input.Database }),
    ...(input.TableName !== undefined && input.TableName !== null && { TableName: input.TableName }),
  };
};

const serializeAws_json1_1DataProcessing = (input: DataProcessing, context: __SerdeContext): any => {
  return {
    ...(input.InputFilter !== undefined && input.InputFilter !== null && { InputFilter: input.InputFilter }),
    ...(input.JoinSource !== undefined && input.JoinSource !== null && { JoinSource: input.JoinSource }),
    ...(input.OutputFilter !== undefined && input.OutputFilter !== null && { OutputFilter: input.OutputFilter }),
  };
};

const serializeAws_json1_1DataQualityAppSpecification = (
  input: DataQualityAppSpecification,
  context: __SerdeContext
): any => {
  return {
    ...(input.ContainerArguments !== undefined &&
      input.ContainerArguments !== null && {
        ContainerArguments: serializeAws_json1_1MonitoringContainerArguments(input.ContainerArguments, context),
      }),
    ...(input.ContainerEntrypoint !== undefined &&
      input.ContainerEntrypoint !== null && {
        ContainerEntrypoint: serializeAws_json1_1ContainerEntrypoint(input.ContainerEntrypoint, context),
      }),
    ...(input.Environment !== undefined &&
      input.Environment !== null && {
        Environment: serializeAws_json1_1MonitoringEnvironmentMap(input.Environment, context),
      }),
    ...(input.ImageUri !== undefined && input.ImageUri !== null && { ImageUri: input.ImageUri }),
    ...(input.PostAnalyticsProcessorSourceUri !== undefined &&
      input.PostAnalyticsProcessorSourceUri !== null && {
        PostAnalyticsProcessorSourceUri: input.PostAnalyticsProcessorSourceUri,
      }),
    ...(input.RecordPreprocessorSourceUri !== undefined &&
      input.RecordPreprocessorSourceUri !== null && { RecordPreprocessorSourceUri: input.RecordPreprocessorSourceUri }),
  };
};

const serializeAws_json1_1DataQualityBaselineConfig = (
  input: DataQualityBaselineConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.BaseliningJobName !== undefined &&
      input.BaseliningJobName !== null && { BaseliningJobName: input.BaseliningJobName }),
    ...(input.ConstraintsResource !== undefined &&
      input.ConstraintsResource !== null && {
        ConstraintsResource: serializeAws_json1_1MonitoringConstraintsResource(input.ConstraintsResource, context),
      }),
    ...(input.StatisticsResource !== undefined &&
      input.StatisticsResource !== null && {
        StatisticsResource: serializeAws_json1_1MonitoringStatisticsResource(input.StatisticsResource, context),
      }),
  };
};

const serializeAws_json1_1DataQualityJobInput = (input: DataQualityJobInput, context: __SerdeContext): any => {
  return {
    ...(input.EndpointInput !== undefined &&
      input.EndpointInput !== null && {
        EndpointInput: serializeAws_json1_1EndpointInput(input.EndpointInput, context),
      }),
  };
};

const serializeAws_json1_1DatasetDefinition = (input: DatasetDefinition, context: __SerdeContext): any => {
  return {
    ...(input.AthenaDatasetDefinition !== undefined &&
      input.AthenaDatasetDefinition !== null && {
        AthenaDatasetDefinition: serializeAws_json1_1AthenaDatasetDefinition(input.AthenaDatasetDefinition, context),
      }),
    ...(input.DataDistributionType !== undefined &&
      input.DataDistributionType !== null && { DataDistributionType: input.DataDistributionType }),
    ...(input.InputMode !== undefined && input.InputMode !== null && { InputMode: input.InputMode }),
    ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
    ...(input.RedshiftDatasetDefinition !== undefined &&
      input.RedshiftDatasetDefinition !== null && {
        RedshiftDatasetDefinition: serializeAws_json1_1RedshiftDatasetDefinition(
          input.RedshiftDatasetDefinition,
          context
        ),
      }),
  };
};

const serializeAws_json1_1DataSource = (input: DataSource, context: __SerdeContext): any => {
  return {
    ...(input.FileSystemDataSource !== undefined &&
      input.FileSystemDataSource !== null && {
        FileSystemDataSource: serializeAws_json1_1FileSystemDataSource(input.FileSystemDataSource, context),
      }),
    ...(input.S3DataSource !== undefined &&
      input.S3DataSource !== null && { S3DataSource: serializeAws_json1_1S3DataSource(input.S3DataSource, context) }),
  };
};

const serializeAws_json1_1DebugHookConfig = (input: DebugHookConfig, context: __SerdeContext): any => {
  return {
    ...(input.CollectionConfigurations !== undefined &&
      input.CollectionConfigurations !== null && {
        CollectionConfigurations: serializeAws_json1_1CollectionConfigurations(input.CollectionConfigurations, context),
      }),
    ...(input.HookParameters !== undefined &&
      input.HookParameters !== null && {
        HookParameters: serializeAws_json1_1HookParameters(input.HookParameters, context),
      }),
    ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
    ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
  };
};

const serializeAws_json1_1DebugRuleConfiguration = (input: DebugRuleConfiguration, context: __SerdeContext): any => {
  return {
    ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
    ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
    ...(input.RuleConfigurationName !== undefined &&
      input.RuleConfigurationName !== null && { RuleConfigurationName: input.RuleConfigurationName }),
    ...(input.RuleEvaluatorImage !== undefined &&
      input.RuleEvaluatorImage !== null && { RuleEvaluatorImage: input.RuleEvaluatorImage }),
    ...(input.RuleParameters !== undefined &&
      input.RuleParameters !== null && {
        RuleParameters: serializeAws_json1_1RuleParameters(input.RuleParameters, context),
      }),
    ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
    ...(input.VolumeSizeInGB !== undefined &&
      input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
  };
};

const serializeAws_json1_1DebugRuleConfigurations = (input: DebugRuleConfiguration[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1DebugRuleConfiguration(entry, context);
    });
};

const serializeAws_json1_1DeleteActionRequest = (input: DeleteActionRequest, context: __SerdeContext): any => {
  return {
    ...(input.ActionName !== undefined && input.ActionName !== null && { ActionName: input.ActionName }),
  };
};

const serializeAws_json1_1DeleteAlgorithmInput = (input: DeleteAlgorithmInput, context: __SerdeContext): any => {
  return {
    ...(input.AlgorithmName !== undefined && input.AlgorithmName !== null && { AlgorithmName: input.AlgorithmName }),
  };
};

const serializeAws_json1_1DeleteAppImageConfigRequest = (
  input: DeleteAppImageConfigRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.AppImageConfigName !== undefined &&
      input.AppImageConfigName !== null && { AppImageConfigName: input.AppImageConfigName }),
  };
};

const serializeAws_json1_1DeleteAppRequest = (input: DeleteAppRequest, context: __SerdeContext): any => {
  return {
    ...(input.AppName !== undefined && input.AppName !== null && { AppName: input.AppName }),
    ...(input.AppType !== undefined && input.AppType !== null && { AppType: input.AppType }),
    ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
    ...(input.UserProfileName !== undefined &&
      input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
  };
};

const serializeAws_json1_1DeleteArtifactRequest = (input: DeleteArtifactRequest, context: __SerdeContext): any => {
  return {
    ...(input.ArtifactArn !== undefined && input.ArtifactArn !== null && { ArtifactArn: input.ArtifactArn }),
    ...(input.Source !== undefined &&
      input.Source !== null && { Source: serializeAws_json1_1ArtifactSource(input.Source, context) }),
  };
};

const serializeAws_json1_1DeleteAssociationRequest = (
  input: DeleteAssociationRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.DestinationArn !== undefined &&
      input.DestinationArn !== null && { DestinationArn: input.DestinationArn }),
    ...(input.SourceArn !== undefined && input.SourceArn !== null && { SourceArn: input.SourceArn }),
  };
};

const serializeAws_json1_1DeleteCodeRepositoryInput = (
  input: DeleteCodeRepositoryInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.CodeRepositoryName !== undefined &&
      input.CodeRepositoryName !== null && { CodeRepositoryName: input.CodeRepositoryName }),
  };
};

const serializeAws_json1_1DeleteContextRequest = (input: DeleteContextRequest, context: __SerdeContext): any => {
  return {
    ...(input.ContextName !== undefined && input.ContextName !== null && { ContextName: input.ContextName }),
  };
};

const serializeAws_json1_1DeleteDataQualityJobDefinitionRequest = (
  input: DeleteDataQualityJobDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.JobDefinitionName !== undefined &&
      input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
  };
};

const serializeAws_json1_1DeleteDeviceFleetRequest = (
  input: DeleteDeviceFleetRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.DeviceFleetName !== undefined &&
      input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
  };
};

const serializeAws_json1_1DeleteDomainRequest = (input: DeleteDomainRequest, context: __SerdeContext): any => {
  return {
    ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
    ...(input.RetentionPolicy !== undefined &&
      input.RetentionPolicy !== null && {
        RetentionPolicy: serializeAws_json1_1RetentionPolicy(input.RetentionPolicy, context),
      }),
  };
};

const serializeAws_json1_1DeleteEndpointConfigInput = (
  input: DeleteEndpointConfigInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.EndpointConfigName !== undefined &&
      input.EndpointConfigName !== null && { EndpointConfigName: input.EndpointConfigName }),
  };
};

const serializeAws_json1_1DeleteEndpointInput = (input: DeleteEndpointInput, context: __SerdeContext): any => {
  return {
    ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
  };
};

const serializeAws_json1_1DeleteExperimentRequest = (input: DeleteExperimentRequest, context: __SerdeContext): any => {
  return {
    ...(input.ExperimentName !== undefined &&
      input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
  };
};

const serializeAws_json1_1DeleteFeatureGroupRequest = (
  input: DeleteFeatureGroupRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.FeatureGroupName !== undefined &&
      input.FeatureGroupName !== null && { FeatureGroupName: input.FeatureGroupName }),
  };
};

const serializeAws_json1_1DeleteFlowDefinitionRequest = (
  input: DeleteFlowDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.FlowDefinitionName !== undefined &&
      input.FlowDefinitionName !== null && { FlowDefinitionName: input.FlowDefinitionName }),
  };
};

const serializeAws_json1_1DeleteHumanTaskUiRequest = (
  input: DeleteHumanTaskUiRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.HumanTaskUiName !== undefined &&
      input.HumanTaskUiName !== null && { HumanTaskUiName: input.HumanTaskUiName }),
  };
};

const serializeAws_json1_1DeleteImageRequest = (input: DeleteImageRequest, context: __SerdeContext): any => {
  return {
    ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
  };
};

const serializeAws_json1_1DeleteImageVersionRequest = (
  input: DeleteImageVersionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
    ...(input.Version !== undefined && input.Version !== null && { Version: input.Version }),
  };
};

const serializeAws_json1_1DeleteModelBiasJobDefinitionRequest = (
  input: DeleteModelBiasJobDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.JobDefinitionName !== undefined &&
      input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
  };
};

const serializeAws_json1_1DeleteModelExplainabilityJobDefinitionRequest = (
  input: DeleteModelExplainabilityJobDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.JobDefinitionName !== undefined &&
      input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
  };
};

const serializeAws_json1_1DeleteModelInput = (input: DeleteModelInput, context: __SerdeContext): any => {
  return {
    ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
  };
};

const serializeAws_json1_1DeleteModelPackageGroupInput = (
  input: DeleteModelPackageGroupInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.ModelPackageGroupName !== undefined &&
      input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
  };
};

const serializeAws_json1_1DeleteModelPackageGroupPolicyInput = (
  input: DeleteModelPackageGroupPolicyInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.ModelPackageGroupName !== undefined &&
      input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
  };
};

const serializeAws_json1_1DeleteModelPackageInput = (input: DeleteModelPackageInput, context: __SerdeContext): any => {
  return {
    ...(input.ModelPackageName !== undefined &&
      input.ModelPackageName !== null && { ModelPackageName: input.ModelPackageName }),
  };
};

const serializeAws_json1_1DeleteModelQualityJobDefinitionRequest = (
  input: DeleteModelQualityJobDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.JobDefinitionName !== undefined &&
      input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
  };
};

const serializeAws_json1_1DeleteMonitoringScheduleRequest = (
  input: DeleteMonitoringScheduleRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.MonitoringScheduleName !== undefined &&
      input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
  };
};

const serializeAws_json1_1DeleteNotebookInstanceInput = (
  input: DeleteNotebookInstanceInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.NotebookInstanceName !== undefined &&
      input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
  };
};

const serializeAws_json1_1DeleteNotebookInstanceLifecycleConfigInput = (
  input: DeleteNotebookInstanceLifecycleConfigInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.NotebookInstanceLifecycleConfigName !== undefined &&
      input.NotebookInstanceLifecycleConfigName !== null && {
        NotebookInstanceLifecycleConfigName: input.NotebookInstanceLifecycleConfigName,
      }),
  };
};

const serializeAws_json1_1DeletePipelineRequest = (input: DeletePipelineRequest, context: __SerdeContext): any => {
  return {
    ClientRequestToken: input.ClientRequestToken ?? generateIdempotencyToken(),
    ...(input.PipelineName !== undefined && input.PipelineName !== null && { PipelineName: input.PipelineName }),
  };
};

const serializeAws_json1_1DeleteProjectInput = (input: DeleteProjectInput, context: __SerdeContext): any => {
  return {
    ...(input.ProjectName !== undefined && input.ProjectName !== null && { ProjectName: input.ProjectName }),
  };
};

const serializeAws_json1_1DeleteTagsInput = (input: DeleteTagsInput, context: __SerdeContext): any => {
  return {
    ...(input.ResourceArn !== undefined && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }),
    ...(input.TagKeys !== undefined &&
      input.TagKeys !== null && { TagKeys: serializeAws_json1_1TagKeyList(input.TagKeys, context) }),
  };
};

const serializeAws_json1_1DeleteTrialComponentRequest = (
  input: DeleteTrialComponentRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.TrialComponentName !== undefined &&
      input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
  };
};

const serializeAws_json1_1DeleteTrialRequest = (input: DeleteTrialRequest, context: __SerdeContext): any => {
  return {
    ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
  };
};

const serializeAws_json1_1DeleteUserProfileRequest = (
  input: DeleteUserProfileRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
    ...(input.UserProfileName !== undefined &&
      input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
  };
};

const serializeAws_json1_1DeleteWorkforceRequest = (input: DeleteWorkforceRequest, context: __SerdeContext): any => {
  return {
    ...(input.WorkforceName !== undefined && input.WorkforceName !== null && { WorkforceName: input.WorkforceName }),
  };
};

const serializeAws_json1_1DeleteWorkteamRequest = (input: DeleteWorkteamRequest, context: __SerdeContext): any => {
  return {
    ...(input.WorkteamName !== undefined && input.WorkteamName !== null && { WorkteamName: input.WorkteamName }),
  };
};

const serializeAws_json1_1DeploymentConfig = (input: DeploymentConfig, context: __SerdeContext): any => {
  return {
    ...(input.AutoRollbackConfiguration !== undefined &&
      input.AutoRollbackConfiguration !== null && {
        AutoRollbackConfiguration: serializeAws_json1_1AutoRollbackConfig(input.AutoRollbackConfiguration, context),
      }),
    ...(input.BlueGreenUpdatePolicy !== undefined &&
      input.BlueGreenUpdatePolicy !== null && {
        BlueGreenUpdatePolicy: serializeAws_json1_1BlueGreenUpdatePolicy(input.BlueGreenUpdatePolicy, context),
      }),
  };
};

const serializeAws_json1_1DeregisterDevicesRequest = (
  input: DeregisterDevicesRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.DeviceFleetName !== undefined &&
      input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
    ...(input.DeviceNames !== undefined &&
      input.DeviceNames !== null && { DeviceNames: serializeAws_json1_1DeviceNames(input.DeviceNames, context) }),
  };
};

const serializeAws_json1_1DescribeActionRequest = (input: DescribeActionRequest, context: __SerdeContext): any => {
  return {
    ...(input.ActionName !== undefined && input.ActionName !== null && { ActionName: input.ActionName }),
  };
};

const serializeAws_json1_1DescribeAlgorithmInput = (input: DescribeAlgorithmInput, context: __SerdeContext): any => {
  return {
    ...(input.AlgorithmName !== undefined && input.AlgorithmName !== null && { AlgorithmName: input.AlgorithmName }),
  };
};

const serializeAws_json1_1DescribeAppImageConfigRequest = (
  input: DescribeAppImageConfigRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.AppImageConfigName !== undefined &&
      input.AppImageConfigName !== null && { AppImageConfigName: input.AppImageConfigName }),
  };
};

const serializeAws_json1_1DescribeAppRequest = (input: DescribeAppRequest, context: __SerdeContext): any => {
  return {
    ...(input.AppName !== undefined && input.AppName !== null && { AppName: input.AppName }),
    ...(input.AppType !== undefined && input.AppType !== null && { AppType: input.AppType }),
    ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
    ...(input.UserProfileName !== undefined &&
      input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
  };
};

const serializeAws_json1_1DescribeArtifactRequest = (input: DescribeArtifactRequest, context: __SerdeContext): any => {
  return {
    ...(input.ArtifactArn !== undefined && input.ArtifactArn !== null && { ArtifactArn: input.ArtifactArn }),
  };
};

const serializeAws_json1_1DescribeAutoMLJobRequest = (
  input: DescribeAutoMLJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.AutoMLJobName !== undefined && input.AutoMLJobName !== null && { AutoMLJobName: input.AutoMLJobName }),
  };
};

const serializeAws_json1_1DescribeCodeRepositoryInput = (
  input: DescribeCodeRepositoryInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.CodeRepositoryName !== undefined &&
      input.CodeRepositoryName !== null && { CodeRepositoryName: input.CodeRepositoryName }),
  };
};

const serializeAws_json1_1DescribeCompilationJobRequest = (
  input: DescribeCompilationJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CompilationJobName !== undefined &&
      input.CompilationJobName !== null && { CompilationJobName: input.CompilationJobName }),
  };
};

const serializeAws_json1_1DescribeContextRequest = (input: DescribeContextRequest, context: __SerdeContext): any => {
  return {
    ...(input.ContextName !== undefined && input.ContextName !== null && { ContextName: input.ContextName }),
  };
};

const serializeAws_json1_1DescribeDataQualityJobDefinitionRequest = (
  input: DescribeDataQualityJobDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.JobDefinitionName !== undefined &&
      input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
  };
};

const serializeAws_json1_1DescribeDeviceFleetRequest = (
  input: DescribeDeviceFleetRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.DeviceFleetName !== undefined &&
      input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
  };
};

const serializeAws_json1_1DescribeDeviceRequest = (input: DescribeDeviceRequest, context: __SerdeContext): any => {
  return {
    ...(input.DeviceFleetName !== undefined &&
      input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
    ...(input.DeviceName !== undefined && input.DeviceName !== null && { DeviceName: input.DeviceName }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
  };
};

const serializeAws_json1_1DescribeDomainRequest = (input: DescribeDomainRequest, context: __SerdeContext): any => {
  return {
    ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
  };
};

const serializeAws_json1_1DescribeEdgePackagingJobRequest = (
  input: DescribeEdgePackagingJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.EdgePackagingJobName !== undefined &&
      input.EdgePackagingJobName !== null && { EdgePackagingJobName: input.EdgePackagingJobName }),
  };
};

const serializeAws_json1_1DescribeEndpointConfigInput = (
  input: DescribeEndpointConfigInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.EndpointConfigName !== undefined &&
      input.EndpointConfigName !== null && { EndpointConfigName: input.EndpointConfigName }),
  };
};

const serializeAws_json1_1DescribeEndpointInput = (input: DescribeEndpointInput, context: __SerdeContext): any => {
  return {
    ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
  };
};

const serializeAws_json1_1DescribeExperimentRequest = (
  input: DescribeExperimentRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.ExperimentName !== undefined &&
      input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
  };
};

const serializeAws_json1_1DescribeFeatureGroupRequest = (
  input: DescribeFeatureGroupRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.FeatureGroupName !== undefined &&
      input.FeatureGroupName !== null && { FeatureGroupName: input.FeatureGroupName }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
  };
};

const serializeAws_json1_1DescribeFlowDefinitionRequest = (
  input: DescribeFlowDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.FlowDefinitionName !== undefined &&
      input.FlowDefinitionName !== null && { FlowDefinitionName: input.FlowDefinitionName }),
  };
};

const serializeAws_json1_1DescribeHumanTaskUiRequest = (
  input: DescribeHumanTaskUiRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.HumanTaskUiName !== undefined &&
      input.HumanTaskUiName !== null && { HumanTaskUiName: input.HumanTaskUiName }),
  };
};

const serializeAws_json1_1DescribeHyperParameterTuningJobRequest = (
  input: DescribeHyperParameterTuningJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.HyperParameterTuningJobName !== undefined &&
      input.HyperParameterTuningJobName !== null && { HyperParameterTuningJobName: input.HyperParameterTuningJobName }),
  };
};

const serializeAws_json1_1DescribeImageRequest = (input: DescribeImageRequest, context: __SerdeContext): any => {
  return {
    ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
  };
};

const serializeAws_json1_1DescribeImageVersionRequest = (
  input: DescribeImageVersionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
    ...(input.Version !== undefined && input.Version !== null && { Version: input.Version }),
  };
};

const serializeAws_json1_1DescribeLabelingJobRequest = (
  input: DescribeLabelingJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.LabelingJobName !== undefined &&
      input.LabelingJobName !== null && { LabelingJobName: input.LabelingJobName }),
  };
};

const serializeAws_json1_1DescribeModelBiasJobDefinitionRequest = (
  input: DescribeModelBiasJobDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.JobDefinitionName !== undefined &&
      input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
  };
};

const serializeAws_json1_1DescribeModelExplainabilityJobDefinitionRequest = (
  input: DescribeModelExplainabilityJobDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.JobDefinitionName !== undefined &&
      input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
  };
};

const serializeAws_json1_1DescribeModelInput = (input: DescribeModelInput, context: __SerdeContext): any => {
  return {
    ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
  };
};

const serializeAws_json1_1DescribeModelPackageGroupInput = (
  input: DescribeModelPackageGroupInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.ModelPackageGroupName !== undefined &&
      input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
  };
};

const serializeAws_json1_1DescribeModelPackageInput = (
  input: DescribeModelPackageInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.ModelPackageName !== undefined &&
      input.ModelPackageName !== null && { ModelPackageName: input.ModelPackageName }),
  };
};

const serializeAws_json1_1DescribeModelQualityJobDefinitionRequest = (
  input: DescribeModelQualityJobDefinitionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.JobDefinitionName !== undefined &&
      input.JobDefinitionName !== null && { JobDefinitionName: input.JobDefinitionName }),
  };
};

const serializeAws_json1_1DescribeMonitoringScheduleRequest = (
  input: DescribeMonitoringScheduleRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.MonitoringScheduleName !== undefined &&
      input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
  };
};

const serializeAws_json1_1DescribeNotebookInstanceInput = (
  input: DescribeNotebookInstanceInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.NotebookInstanceName !== undefined &&
      input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
  };
};

const serializeAws_json1_1DescribeNotebookInstanceLifecycleConfigInput = (
  input: DescribeNotebookInstanceLifecycleConfigInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.NotebookInstanceLifecycleConfigName !== undefined &&
      input.NotebookInstanceLifecycleConfigName !== null && {
        NotebookInstanceLifecycleConfigName: input.NotebookInstanceLifecycleConfigName,
      }),
  };
};

const serializeAws_json1_1DescribePipelineDefinitionForExecutionRequest = (
  input: DescribePipelineDefinitionForExecutionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.PipelineExecutionArn !== undefined &&
      input.PipelineExecutionArn !== null && { PipelineExecutionArn: input.PipelineExecutionArn }),
  };
};

const serializeAws_json1_1DescribePipelineExecutionRequest = (
  input: DescribePipelineExecutionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.PipelineExecutionArn !== undefined &&
      input.PipelineExecutionArn !== null && { PipelineExecutionArn: input.PipelineExecutionArn }),
  };
};

const serializeAws_json1_1DescribePipelineRequest = (input: DescribePipelineRequest, context: __SerdeContext): any => {
  return {
    ...(input.PipelineName !== undefined && input.PipelineName !== null && { PipelineName: input.PipelineName }),
  };
};

const serializeAws_json1_1DescribeProcessingJobRequest = (
  input: DescribeProcessingJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.ProcessingJobName !== undefined &&
      input.ProcessingJobName !== null && { ProcessingJobName: input.ProcessingJobName }),
  };
};

const serializeAws_json1_1DescribeProjectInput = (input: DescribeProjectInput, context: __SerdeContext): any => {
  return {
    ...(input.ProjectName !== undefined && input.ProjectName !== null && { ProjectName: input.ProjectName }),
  };
};

const serializeAws_json1_1DescribeSubscribedWorkteamRequest = (
  input: DescribeSubscribedWorkteamRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.WorkteamArn !== undefined && input.WorkteamArn !== null && { WorkteamArn: input.WorkteamArn }),
  };
};

const serializeAws_json1_1DescribeTrainingJobRequest = (
  input: DescribeTrainingJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.TrainingJobName !== undefined &&
      input.TrainingJobName !== null && { TrainingJobName: input.TrainingJobName }),
  };
};

const serializeAws_json1_1DescribeTransformJobRequest = (
  input: DescribeTransformJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.TransformJobName !== undefined &&
      input.TransformJobName !== null && { TransformJobName: input.TransformJobName }),
  };
};

const serializeAws_json1_1DescribeTrialComponentRequest = (
  input: DescribeTrialComponentRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.TrialComponentName !== undefined &&
      input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
  };
};

const serializeAws_json1_1DescribeTrialRequest = (input: DescribeTrialRequest, context: __SerdeContext): any => {
  return {
    ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
  };
};

const serializeAws_json1_1DescribeUserProfileRequest = (
  input: DescribeUserProfileRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
    ...(input.UserProfileName !== undefined &&
      input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
  };
};

const serializeAws_json1_1DescribeWorkforceRequest = (
  input: DescribeWorkforceRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.WorkforceName !== undefined && input.WorkforceName !== null && { WorkforceName: input.WorkforceName }),
  };
};

const serializeAws_json1_1DescribeWorkteamRequest = (input: DescribeWorkteamRequest, context: __SerdeContext): any => {
  return {
    ...(input.WorkteamName !== undefined && input.WorkteamName !== null && { WorkteamName: input.WorkteamName }),
  };
};

const serializeAws_json1_1DesiredWeightAndCapacity = (
  input: DesiredWeightAndCapacity,
  context: __SerdeContext
): any => {
  return {
    ...(input.DesiredInstanceCount !== undefined &&
      input.DesiredInstanceCount !== null && { DesiredInstanceCount: input.DesiredInstanceCount }),
    ...(input.DesiredWeight !== undefined && input.DesiredWeight !== null && { DesiredWeight: input.DesiredWeight }),
    ...(input.VariantName !== undefined && input.VariantName !== null && { VariantName: input.VariantName }),
  };
};

const serializeAws_json1_1DesiredWeightAndCapacityList = (
  input: DesiredWeightAndCapacity[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1DesiredWeightAndCapacity(entry, context);
    });
};

const serializeAws_json1_1Device = (input: Device, context: __SerdeContext): any => {
  return {
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.DeviceName !== undefined && input.DeviceName !== null && { DeviceName: input.DeviceName }),
    ...(input.IotThingName !== undefined && input.IotThingName !== null && { IotThingName: input.IotThingName }),
  };
};

const serializeAws_json1_1DeviceNames = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1Devices = (input: Device[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1Device(entry, context);
    });
};

const serializeAws_json1_1DisableSagemakerServicecatalogPortfolioInput = (
  input: DisableSagemakerServicecatalogPortfolioInput,
  context: __SerdeContext
): any => {
  return {};
};

const serializeAws_json1_1DisassociateTrialComponentRequest = (
  input: DisassociateTrialComponentRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.TrialComponentName !== undefined &&
      input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
    ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
  };
};

const serializeAws_json1_1EdgeOutputConfig = (input: EdgeOutputConfig, context: __SerdeContext): any => {
  return {
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.S3OutputLocation !== undefined &&
      input.S3OutputLocation !== null && { S3OutputLocation: input.S3OutputLocation }),
  };
};

const serializeAws_json1_1EnableSagemakerServicecatalogPortfolioInput = (
  input: EnableSagemakerServicecatalogPortfolioInput,
  context: __SerdeContext
): any => {
  return {};
};

const serializeAws_json1_1EndpointInput = (input: EndpointInput, context: __SerdeContext): any => {
  return {
    ...(input.EndTimeOffset !== undefined && input.EndTimeOffset !== null && { EndTimeOffset: input.EndTimeOffset }),
    ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
    ...(input.FeaturesAttribute !== undefined &&
      input.FeaturesAttribute !== null && { FeaturesAttribute: input.FeaturesAttribute }),
    ...(input.InferenceAttribute !== undefined &&
      input.InferenceAttribute !== null && { InferenceAttribute: input.InferenceAttribute }),
    ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
    ...(input.ProbabilityAttribute !== undefined &&
      input.ProbabilityAttribute !== null && { ProbabilityAttribute: input.ProbabilityAttribute }),
    ...(input.ProbabilityThresholdAttribute !== undefined &&
      input.ProbabilityThresholdAttribute !== null && {
        ProbabilityThresholdAttribute: input.ProbabilityThresholdAttribute,
      }),
    ...(input.S3DataDistributionType !== undefined &&
      input.S3DataDistributionType !== null && { S3DataDistributionType: input.S3DataDistributionType }),
    ...(input.S3InputMode !== undefined && input.S3InputMode !== null && { S3InputMode: input.S3InputMode }),
    ...(input.StartTimeOffset !== undefined &&
      input.StartTimeOffset !== null && { StartTimeOffset: input.StartTimeOffset }),
  };
};

const serializeAws_json1_1EnvironmentMap = (input: { [key: string]: string }, context: __SerdeContext): any => {
  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const serializeAws_json1_1ExperimentConfig = (input: ExperimentConfig, context: __SerdeContext): any => {
  return {
    ...(input.ExperimentName !== undefined &&
      input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
    ...(input.TrialComponentDisplayName !== undefined &&
      input.TrialComponentDisplayName !== null && { TrialComponentDisplayName: input.TrialComponentDisplayName }),
    ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
  };
};

const serializeAws_json1_1Explainability = (input: Explainability, context: __SerdeContext): any => {
  return {
    ...(input.Report !== undefined &&
      input.Report !== null && { Report: serializeAws_json1_1MetricsSource(input.Report, context) }),
  };
};

const serializeAws_json1_1FeatureDefinition = (input: FeatureDefinition, context: __SerdeContext): any => {
  return {
    ...(input.FeatureName !== undefined && input.FeatureName !== null && { FeatureName: input.FeatureName }),
    ...(input.FeatureType !== undefined && input.FeatureType !== null && { FeatureType: input.FeatureType }),
  };
};

const serializeAws_json1_1FeatureDefinitions = (input: FeatureDefinition[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1FeatureDefinition(entry, context);
    });
};

const serializeAws_json1_1FileSystemConfig = (input: FileSystemConfig, context: __SerdeContext): any => {
  return {
    ...(input.DefaultGid !== undefined && input.DefaultGid !== null && { DefaultGid: input.DefaultGid }),
    ...(input.DefaultUid !== undefined && input.DefaultUid !== null && { DefaultUid: input.DefaultUid }),
    ...(input.MountPath !== undefined && input.MountPath !== null && { MountPath: input.MountPath }),
  };
};

const serializeAws_json1_1FileSystemDataSource = (input: FileSystemDataSource, context: __SerdeContext): any => {
  return {
    ...(input.DirectoryPath !== undefined && input.DirectoryPath !== null && { DirectoryPath: input.DirectoryPath }),
    ...(input.FileSystemAccessMode !== undefined &&
      input.FileSystemAccessMode !== null && { FileSystemAccessMode: input.FileSystemAccessMode }),
    ...(input.FileSystemId !== undefined && input.FileSystemId !== null && { FileSystemId: input.FileSystemId }),
    ...(input.FileSystemType !== undefined &&
      input.FileSystemType !== null && { FileSystemType: input.FileSystemType }),
  };
};

const serializeAws_json1_1Filter = (input: Filter, context: __SerdeContext): any => {
  return {
    ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    ...(input.Operator !== undefined && input.Operator !== null && { Operator: input.Operator }),
    ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
  };
};

const serializeAws_json1_1FilterList = (input: Filter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1Filter(entry, context);
    });
};

const serializeAws_json1_1FlowDefinitionOutputConfig = (
  input: FlowDefinitionOutputConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
  };
};

const serializeAws_json1_1FlowDefinitionTaskKeywords = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1GetDeviceFleetReportRequest = (
  input: GetDeviceFleetReportRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.DeviceFleetName !== undefined &&
      input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
  };
};

const serializeAws_json1_1GetModelPackageGroupPolicyInput = (
  input: GetModelPackageGroupPolicyInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.ModelPackageGroupName !== undefined &&
      input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
  };
};

const serializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusInput = (
  input: GetSagemakerServicecatalogPortfolioStatusInput,
  context: __SerdeContext
): any => {
  return {};
};

const serializeAws_json1_1GetSearchSuggestionsRequest = (
  input: GetSearchSuggestionsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.Resource !== undefined && input.Resource !== null && { Resource: input.Resource }),
    ...(input.SuggestionQuery !== undefined &&
      input.SuggestionQuery !== null && {
        SuggestionQuery: serializeAws_json1_1SuggestionQuery(input.SuggestionQuery, context),
      }),
  };
};

const serializeAws_json1_1GitConfig = (input: GitConfig, context: __SerdeContext): any => {
  return {
    ...(input.Branch !== undefined && input.Branch !== null && { Branch: input.Branch }),
    ...(input.RepositoryUrl !== undefined && input.RepositoryUrl !== null && { RepositoryUrl: input.RepositoryUrl }),
    ...(input.SecretArn !== undefined && input.SecretArn !== null && { SecretArn: input.SecretArn }),
  };
};

const serializeAws_json1_1GitConfigForUpdate = (input: GitConfigForUpdate, context: __SerdeContext): any => {
  return {
    ...(input.SecretArn !== undefined && input.SecretArn !== null && { SecretArn: input.SecretArn }),
  };
};

const serializeAws_json1_1Groups = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1HookParameters = (input: { [key: string]: string }, context: __SerdeContext): any => {
  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const serializeAws_json1_1HumanLoopActivationConditionsConfig = (
  input: HumanLoopActivationConditionsConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.HumanLoopActivationConditions !== undefined &&
      input.HumanLoopActivationConditions !== null && {
        HumanLoopActivationConditions: __LazyJsonString.fromObject(input.HumanLoopActivationConditions),
      }),
  };
};

const serializeAws_json1_1HumanLoopActivationConfig = (
  input: HumanLoopActivationConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.HumanLoopActivationConditionsConfig !== undefined &&
      input.HumanLoopActivationConditionsConfig !== null && {
        HumanLoopActivationConditionsConfig: serializeAws_json1_1HumanLoopActivationConditionsConfig(
          input.HumanLoopActivationConditionsConfig,
          context
        ),
      }),
  };
};

const serializeAws_json1_1HumanLoopConfig = (input: HumanLoopConfig, context: __SerdeContext): any => {
  return {
    ...(input.HumanTaskUiArn !== undefined &&
      input.HumanTaskUiArn !== null && { HumanTaskUiArn: input.HumanTaskUiArn }),
    ...(input.PublicWorkforceTaskPrice !== undefined &&
      input.PublicWorkforceTaskPrice !== null && {
        PublicWorkforceTaskPrice: serializeAws_json1_1PublicWorkforceTaskPrice(input.PublicWorkforceTaskPrice, context),
      }),
    ...(input.TaskAvailabilityLifetimeInSeconds !== undefined &&
      input.TaskAvailabilityLifetimeInSeconds !== null && {
        TaskAvailabilityLifetimeInSeconds: input.TaskAvailabilityLifetimeInSeconds,
      }),
    ...(input.TaskCount !== undefined && input.TaskCount !== null && { TaskCount: input.TaskCount }),
    ...(input.TaskDescription !== undefined &&
      input.TaskDescription !== null && { TaskDescription: input.TaskDescription }),
    ...(input.TaskKeywords !== undefined &&
      input.TaskKeywords !== null && {
        TaskKeywords: serializeAws_json1_1FlowDefinitionTaskKeywords(input.TaskKeywords, context),
      }),
    ...(input.TaskTimeLimitInSeconds !== undefined &&
      input.TaskTimeLimitInSeconds !== null && { TaskTimeLimitInSeconds: input.TaskTimeLimitInSeconds }),
    ...(input.TaskTitle !== undefined && input.TaskTitle !== null && { TaskTitle: input.TaskTitle }),
    ...(input.WorkteamArn !== undefined && input.WorkteamArn !== null && { WorkteamArn: input.WorkteamArn }),
  };
};

const serializeAws_json1_1HumanLoopRequestSource = (input: HumanLoopRequestSource, context: __SerdeContext): any => {
  return {
    ...(input.AwsManagedHumanLoopRequestSource !== undefined &&
      input.AwsManagedHumanLoopRequestSource !== null && {
        AwsManagedHumanLoopRequestSource: input.AwsManagedHumanLoopRequestSource,
      }),
  };
};

const serializeAws_json1_1HumanTaskConfig = (input: HumanTaskConfig, context: __SerdeContext): any => {
  return {
    ...(input.AnnotationConsolidationConfig !== undefined &&
      input.AnnotationConsolidationConfig !== null && {
        AnnotationConsolidationConfig: serializeAws_json1_1AnnotationConsolidationConfig(
          input.AnnotationConsolidationConfig,
          context
        ),
      }),
    ...(input.MaxConcurrentTaskCount !== undefined &&
      input.MaxConcurrentTaskCount !== null && { MaxConcurrentTaskCount: input.MaxConcurrentTaskCount }),
    ...(input.NumberOfHumanWorkersPerDataObject !== undefined &&
      input.NumberOfHumanWorkersPerDataObject !== null && {
        NumberOfHumanWorkersPerDataObject: input.NumberOfHumanWorkersPerDataObject,
      }),
    ...(input.PreHumanTaskLambdaArn !== undefined &&
      input.PreHumanTaskLambdaArn !== null && { PreHumanTaskLambdaArn: input.PreHumanTaskLambdaArn }),
    ...(input.PublicWorkforceTaskPrice !== undefined &&
      input.PublicWorkforceTaskPrice !== null && {
        PublicWorkforceTaskPrice: serializeAws_json1_1PublicWorkforceTaskPrice(input.PublicWorkforceTaskPrice, context),
      }),
    ...(input.TaskAvailabilityLifetimeInSeconds !== undefined &&
      input.TaskAvailabilityLifetimeInSeconds !== null && {
        TaskAvailabilityLifetimeInSeconds: input.TaskAvailabilityLifetimeInSeconds,
      }),
    ...(input.TaskDescription !== undefined &&
      input.TaskDescription !== null && { TaskDescription: input.TaskDescription }),
    ...(input.TaskKeywords !== undefined &&
      input.TaskKeywords !== null && { TaskKeywords: serializeAws_json1_1TaskKeywords(input.TaskKeywords, context) }),
    ...(input.TaskTimeLimitInSeconds !== undefined &&
      input.TaskTimeLimitInSeconds !== null && { TaskTimeLimitInSeconds: input.TaskTimeLimitInSeconds }),
    ...(input.TaskTitle !== undefined && input.TaskTitle !== null && { TaskTitle: input.TaskTitle }),
    ...(input.UiConfig !== undefined &&
      input.UiConfig !== null && { UiConfig: serializeAws_json1_1UiConfig(input.UiConfig, context) }),
    ...(input.WorkteamArn !== undefined && input.WorkteamArn !== null && { WorkteamArn: input.WorkteamArn }),
  };
};

const serializeAws_json1_1HyperParameterAlgorithmSpecification = (
  input: HyperParameterAlgorithmSpecification,
  context: __SerdeContext
): any => {
  return {
    ...(input.AlgorithmName !== undefined && input.AlgorithmName !== null && { AlgorithmName: input.AlgorithmName }),
    ...(input.MetricDefinitions !== undefined &&
      input.MetricDefinitions !== null && {
        MetricDefinitions: serializeAws_json1_1MetricDefinitionList(input.MetricDefinitions, context),
      }),
    ...(input.TrainingImage !== undefined && input.TrainingImage !== null && { TrainingImage: input.TrainingImage }),
    ...(input.TrainingInputMode !== undefined &&
      input.TrainingInputMode !== null && { TrainingInputMode: input.TrainingInputMode }),
  };
};

const serializeAws_json1_1HyperParameters = (input: { [key: string]: string }, context: __SerdeContext): any => {
  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const serializeAws_json1_1HyperParameterSpecification = (
  input: HyperParameterSpecification,
  context: __SerdeContext
): any => {
  return {
    ...(input.DefaultValue !== undefined && input.DefaultValue !== null && { DefaultValue: input.DefaultValue }),
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.IsRequired !== undefined && input.IsRequired !== null && { IsRequired: input.IsRequired }),
    ...(input.IsTunable !== undefined && input.IsTunable !== null && { IsTunable: input.IsTunable }),
    ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    ...(input.Range !== undefined &&
      input.Range !== null && { Range: serializeAws_json1_1ParameterRange(input.Range, context) }),
    ...(input.Type !== undefined && input.Type !== null && { Type: input.Type }),
  };
};

const serializeAws_json1_1HyperParameterSpecifications = (
  input: HyperParameterSpecification[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1HyperParameterSpecification(entry, context);
    });
};

const serializeAws_json1_1HyperParameterTrainingJobDefinition = (
  input: HyperParameterTrainingJobDefinition,
  context: __SerdeContext
): any => {
  return {
    ...(input.AlgorithmSpecification !== undefined &&
      input.AlgorithmSpecification !== null && {
        AlgorithmSpecification: serializeAws_json1_1HyperParameterAlgorithmSpecification(
          input.AlgorithmSpecification,
          context
        ),
      }),
    ...(input.CheckpointConfig !== undefined &&
      input.CheckpointConfig !== null && {
        CheckpointConfig: serializeAws_json1_1CheckpointConfig(input.CheckpointConfig, context),
      }),
    ...(input.DefinitionName !== undefined &&
      input.DefinitionName !== null && { DefinitionName: input.DefinitionName }),
    ...(input.EnableInterContainerTrafficEncryption !== undefined &&
      input.EnableInterContainerTrafficEncryption !== null && {
        EnableInterContainerTrafficEncryption: input.EnableInterContainerTrafficEncryption,
      }),
    ...(input.EnableManagedSpotTraining !== undefined &&
      input.EnableManagedSpotTraining !== null && { EnableManagedSpotTraining: input.EnableManagedSpotTraining }),
    ...(input.EnableNetworkIsolation !== undefined &&
      input.EnableNetworkIsolation !== null && { EnableNetworkIsolation: input.EnableNetworkIsolation }),
    ...(input.HyperParameterRanges !== undefined &&
      input.HyperParameterRanges !== null && {
        HyperParameterRanges: serializeAws_json1_1ParameterRanges(input.HyperParameterRanges, context),
      }),
    ...(input.InputDataConfig !== undefined &&
      input.InputDataConfig !== null && {
        InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
      }),
    ...(input.OutputDataConfig !== undefined &&
      input.OutputDataConfig !== null && {
        OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
      }),
    ...(input.ResourceConfig !== undefined &&
      input.ResourceConfig !== null && {
        ResourceConfig: serializeAws_json1_1ResourceConfig(input.ResourceConfig, context),
      }),
    ...(input.RetryStrategy !== undefined &&
      input.RetryStrategy !== null && {
        RetryStrategy: serializeAws_json1_1RetryStrategy(input.RetryStrategy, context),
      }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.StaticHyperParameters !== undefined &&
      input.StaticHyperParameters !== null && {
        StaticHyperParameters: serializeAws_json1_1HyperParameters(input.StaticHyperParameters, context),
      }),
    ...(input.StoppingCondition !== undefined &&
      input.StoppingCondition !== null && {
        StoppingCondition: serializeAws_json1_1StoppingCondition(input.StoppingCondition, context),
      }),
    ...(input.TuningObjective !== undefined &&
      input.TuningObjective !== null && {
        TuningObjective: serializeAws_json1_1HyperParameterTuningJobObjective(input.TuningObjective, context),
      }),
    ...(input.VpcConfig !== undefined &&
      input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
  };
};

const serializeAws_json1_1HyperParameterTrainingJobDefinitions = (
  input: HyperParameterTrainingJobDefinition[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1HyperParameterTrainingJobDefinition(entry, context);
    });
};

const serializeAws_json1_1HyperParameterTuningJobConfig = (
  input: HyperParameterTuningJobConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.HyperParameterTuningJobObjective !== undefined &&
      input.HyperParameterTuningJobObjective !== null && {
        HyperParameterTuningJobObjective: serializeAws_json1_1HyperParameterTuningJobObjective(
          input.HyperParameterTuningJobObjective,
          context
        ),
      }),
    ...(input.ParameterRanges !== undefined &&
      input.ParameterRanges !== null && {
        ParameterRanges: serializeAws_json1_1ParameterRanges(input.ParameterRanges, context),
      }),
    ...(input.ResourceLimits !== undefined &&
      input.ResourceLimits !== null && {
        ResourceLimits: serializeAws_json1_1ResourceLimits(input.ResourceLimits, context),
      }),
    ...(input.Strategy !== undefined && input.Strategy !== null && { Strategy: input.Strategy }),
    ...(input.TrainingJobEarlyStoppingType !== undefined &&
      input.TrainingJobEarlyStoppingType !== null && {
        TrainingJobEarlyStoppingType: input.TrainingJobEarlyStoppingType,
      }),
    ...(input.TuningJobCompletionCriteria !== undefined &&
      input.TuningJobCompletionCriteria !== null && {
        TuningJobCompletionCriteria: serializeAws_json1_1TuningJobCompletionCriteria(
          input.TuningJobCompletionCriteria,
          context
        ),
      }),
  };
};

const serializeAws_json1_1HyperParameterTuningJobObjective = (
  input: HyperParameterTuningJobObjective,
  context: __SerdeContext
): any => {
  return {
    ...(input.MetricName !== undefined && input.MetricName !== null && { MetricName: input.MetricName }),
    ...(input.Type !== undefined && input.Type !== null && { Type: input.Type }),
  };
};

const serializeAws_json1_1HyperParameterTuningJobObjectives = (
  input: HyperParameterTuningJobObjective[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1HyperParameterTuningJobObjective(entry, context);
    });
};

const serializeAws_json1_1HyperParameterTuningJobWarmStartConfig = (
  input: HyperParameterTuningJobWarmStartConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.ParentHyperParameterTuningJobs !== undefined &&
      input.ParentHyperParameterTuningJobs !== null && {
        ParentHyperParameterTuningJobs: serializeAws_json1_1ParentHyperParameterTuningJobs(
          input.ParentHyperParameterTuningJobs,
          context
        ),
      }),
    ...(input.WarmStartType !== undefined && input.WarmStartType !== null && { WarmStartType: input.WarmStartType }),
  };
};

const serializeAws_json1_1ImageConfig = (input: ImageConfig, context: __SerdeContext): any => {
  return {
    ...(input.RepositoryAccessMode !== undefined &&
      input.RepositoryAccessMode !== null && { RepositoryAccessMode: input.RepositoryAccessMode }),
    ...(input.RepositoryAuthConfig !== undefined &&
      input.RepositoryAuthConfig !== null && {
        RepositoryAuthConfig: serializeAws_json1_1RepositoryAuthConfig(input.RepositoryAuthConfig, context),
      }),
  };
};

const serializeAws_json1_1ImageDeletePropertyList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1InferenceExecutionConfig = (
  input: InferenceExecutionConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.Mode !== undefined && input.Mode !== null && { Mode: input.Mode }),
  };
};

const serializeAws_json1_1InferenceSpecification = (input: InferenceSpecification, context: __SerdeContext): any => {
  return {
    ...(input.Containers !== undefined &&
      input.Containers !== null && {
        Containers: serializeAws_json1_1ModelPackageContainerDefinitionList(input.Containers, context),
      }),
    ...(input.SupportedContentTypes !== undefined &&
      input.SupportedContentTypes !== null && {
        SupportedContentTypes: serializeAws_json1_1ContentTypes(input.SupportedContentTypes, context),
      }),
    ...(input.SupportedRealtimeInferenceInstanceTypes !== undefined &&
      input.SupportedRealtimeInferenceInstanceTypes !== null && {
        SupportedRealtimeInferenceInstanceTypes: serializeAws_json1_1RealtimeInferenceInstanceTypes(
          input.SupportedRealtimeInferenceInstanceTypes,
          context
        ),
      }),
    ...(input.SupportedResponseMIMETypes !== undefined &&
      input.SupportedResponseMIMETypes !== null && {
        SupportedResponseMIMETypes: serializeAws_json1_1ResponseMIMETypes(input.SupportedResponseMIMETypes, context),
      }),
    ...(input.SupportedTransformInstanceTypes !== undefined &&
      input.SupportedTransformInstanceTypes !== null && {
        SupportedTransformInstanceTypes: serializeAws_json1_1TransformInstanceTypes(
          input.SupportedTransformInstanceTypes,
          context
        ),
      }),
  };
};

const serializeAws_json1_1InputConfig = (input: InputConfig, context: __SerdeContext): any => {
  return {
    ...(input.DataInputConfig !== undefined &&
      input.DataInputConfig !== null && { DataInputConfig: input.DataInputConfig }),
    ...(input.Framework !== undefined && input.Framework !== null && { Framework: input.Framework }),
    ...(input.FrameworkVersion !== undefined &&
      input.FrameworkVersion !== null && { FrameworkVersion: input.FrameworkVersion }),
    ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
  };
};

const serializeAws_json1_1InputDataConfig = (input: Channel[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1Channel(entry, context);
    });
};

const serializeAws_json1_1InputModes = (input: (TrainingInputMode | string)[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1IntegerParameterRange = (input: IntegerParameterRange, context: __SerdeContext): any => {
  return {
    ...(input.MaxValue !== undefined && input.MaxValue !== null && { MaxValue: input.MaxValue }),
    ...(input.MinValue !== undefined && input.MinValue !== null && { MinValue: input.MinValue }),
    ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    ...(input.ScalingType !== undefined && input.ScalingType !== null && { ScalingType: input.ScalingType }),
  };
};

const serializeAws_json1_1IntegerParameterRanges = (input: IntegerParameterRange[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1IntegerParameterRange(entry, context);
    });
};

const serializeAws_json1_1IntegerParameterRangeSpecification = (
  input: IntegerParameterRangeSpecification,
  context: __SerdeContext
): any => {
  return {
    ...(input.MaxValue !== undefined && input.MaxValue !== null && { MaxValue: input.MaxValue }),
    ...(input.MinValue !== undefined && input.MinValue !== null && { MinValue: input.MinValue }),
  };
};

const serializeAws_json1_1JsonContentTypes = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1JupyterServerAppSettings = (
  input: JupyterServerAppSettings,
  context: __SerdeContext
): any => {
  return {
    ...(input.DefaultResourceSpec !== undefined &&
      input.DefaultResourceSpec !== null && {
        DefaultResourceSpec: serializeAws_json1_1ResourceSpec(input.DefaultResourceSpec, context),
      }),
  };
};

const serializeAws_json1_1KernelGatewayAppSettings = (
  input: KernelGatewayAppSettings,
  context: __SerdeContext
): any => {
  return {
    ...(input.CustomImages !== undefined &&
      input.CustomImages !== null && { CustomImages: serializeAws_json1_1CustomImages(input.CustomImages, context) }),
    ...(input.DefaultResourceSpec !== undefined &&
      input.DefaultResourceSpec !== null && {
        DefaultResourceSpec: serializeAws_json1_1ResourceSpec(input.DefaultResourceSpec, context),
      }),
  };
};

const serializeAws_json1_1KernelGatewayImageConfig = (
  input: KernelGatewayImageConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.FileSystemConfig !== undefined &&
      input.FileSystemConfig !== null && {
        FileSystemConfig: serializeAws_json1_1FileSystemConfig(input.FileSystemConfig, context),
      }),
    ...(input.KernelSpecs !== undefined &&
      input.KernelSpecs !== null && { KernelSpecs: serializeAws_json1_1KernelSpecs(input.KernelSpecs, context) }),
  };
};

const serializeAws_json1_1KernelSpec = (input: KernelSpec, context: __SerdeContext): any => {
  return {
    ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
    ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
  };
};

const serializeAws_json1_1KernelSpecs = (input: KernelSpec[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1KernelSpec(entry, context);
    });
};

const serializeAws_json1_1LabelingJobAlgorithmsConfig = (
  input: LabelingJobAlgorithmsConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.InitialActiveLearningModelArn !== undefined &&
      input.InitialActiveLearningModelArn !== null && {
        InitialActiveLearningModelArn: input.InitialActiveLearningModelArn,
      }),
    ...(input.LabelingJobAlgorithmSpecificationArn !== undefined &&
      input.LabelingJobAlgorithmSpecificationArn !== null && {
        LabelingJobAlgorithmSpecificationArn: input.LabelingJobAlgorithmSpecificationArn,
      }),
    ...(input.LabelingJobResourceConfig !== undefined &&
      input.LabelingJobResourceConfig !== null && {
        LabelingJobResourceConfig: serializeAws_json1_1LabelingJobResourceConfig(
          input.LabelingJobResourceConfig,
          context
        ),
      }),
  };
};

const serializeAws_json1_1LabelingJobDataAttributes = (
  input: LabelingJobDataAttributes,
  context: __SerdeContext
): any => {
  return {
    ...(input.ContentClassifiers !== undefined &&
      input.ContentClassifiers !== null && {
        ContentClassifiers: serializeAws_json1_1ContentClassifiers(input.ContentClassifiers, context),
      }),
  };
};

const serializeAws_json1_1LabelingJobDataSource = (input: LabelingJobDataSource, context: __SerdeContext): any => {
  return {
    ...(input.S3DataSource !== undefined &&
      input.S3DataSource !== null && {
        S3DataSource: serializeAws_json1_1LabelingJobS3DataSource(input.S3DataSource, context),
      }),
    ...(input.SnsDataSource !== undefined &&
      input.SnsDataSource !== null && {
        SnsDataSource: serializeAws_json1_1LabelingJobSnsDataSource(input.SnsDataSource, context),
      }),
  };
};

const serializeAws_json1_1LabelingJobInputConfig = (input: LabelingJobInputConfig, context: __SerdeContext): any => {
  return {
    ...(input.DataAttributes !== undefined &&
      input.DataAttributes !== null && {
        DataAttributes: serializeAws_json1_1LabelingJobDataAttributes(input.DataAttributes, context),
      }),
    ...(input.DataSource !== undefined &&
      input.DataSource !== null && {
        DataSource: serializeAws_json1_1LabelingJobDataSource(input.DataSource, context),
      }),
  };
};

const serializeAws_json1_1LabelingJobOutputConfig = (input: LabelingJobOutputConfig, context: __SerdeContext): any => {
  return {
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
    ...(input.SnsTopicArn !== undefined && input.SnsTopicArn !== null && { SnsTopicArn: input.SnsTopicArn }),
  };
};

const serializeAws_json1_1LabelingJobResourceConfig = (
  input: LabelingJobResourceConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.VolumeKmsKeyId !== undefined &&
      input.VolumeKmsKeyId !== null && { VolumeKmsKeyId: input.VolumeKmsKeyId }),
  };
};

const serializeAws_json1_1LabelingJobS3DataSource = (input: LabelingJobS3DataSource, context: __SerdeContext): any => {
  return {
    ...(input.ManifestS3Uri !== undefined && input.ManifestS3Uri !== null && { ManifestS3Uri: input.ManifestS3Uri }),
  };
};

const serializeAws_json1_1LabelingJobSnsDataSource = (
  input: LabelingJobSnsDataSource,
  context: __SerdeContext
): any => {
  return {
    ...(input.SnsTopicArn !== undefined && input.SnsTopicArn !== null && { SnsTopicArn: input.SnsTopicArn }),
  };
};

const serializeAws_json1_1LabelingJobStoppingConditions = (
  input: LabelingJobStoppingConditions,
  context: __SerdeContext
): any => {
  return {
    ...(input.MaxHumanLabeledObjectCount !== undefined &&
      input.MaxHumanLabeledObjectCount !== null && { MaxHumanLabeledObjectCount: input.MaxHumanLabeledObjectCount }),
    ...(input.MaxPercentageOfInputDatasetLabeled !== undefined &&
      input.MaxPercentageOfInputDatasetLabeled !== null && {
        MaxPercentageOfInputDatasetLabeled: input.MaxPercentageOfInputDatasetLabeled,
      }),
  };
};

const serializeAws_json1_1LineageEntityParameters = (
  input: { [key: string]: string },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const serializeAws_json1_1ListActionsRequest = (input: ListActionsRequest, context: __SerdeContext): any => {
  return {
    ...(input.ActionType !== undefined && input.ActionType !== null && { ActionType: input.ActionType }),
    ...(input.CreatedAfter !== undefined &&
      input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
    ...(input.CreatedBefore !== undefined &&
      input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.SourceUri !== undefined && input.SourceUri !== null && { SourceUri: input.SourceUri }),
  };
};

const serializeAws_json1_1ListAlgorithmsInput = (input: ListAlgorithmsInput, context: __SerdeContext): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListAppImageConfigsRequest = (
  input: ListAppImageConfigsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.ModifiedTimeAfter !== undefined &&
      input.ModifiedTimeAfter !== null && { ModifiedTimeAfter: Math.round(input.ModifiedTimeAfter.getTime() / 1000) }),
    ...(input.ModifiedTimeBefore !== undefined &&
      input.ModifiedTimeBefore !== null && {
        ModifiedTimeBefore: Math.round(input.ModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListAppsRequest = (input: ListAppsRequest, context: __SerdeContext): any => {
  return {
    ...(input.DomainIdEquals !== undefined &&
      input.DomainIdEquals !== null && { DomainIdEquals: input.DomainIdEquals }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.UserProfileNameEquals !== undefined &&
      input.UserProfileNameEquals !== null && { UserProfileNameEquals: input.UserProfileNameEquals }),
  };
};

const serializeAws_json1_1ListArtifactsRequest = (input: ListArtifactsRequest, context: __SerdeContext): any => {
  return {
    ...(input.ArtifactType !== undefined && input.ArtifactType !== null && { ArtifactType: input.ArtifactType }),
    ...(input.CreatedAfter !== undefined &&
      input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
    ...(input.CreatedBefore !== undefined &&
      input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.SourceUri !== undefined && input.SourceUri !== null && { SourceUri: input.SourceUri }),
  };
};

const serializeAws_json1_1ListAssociationsRequest = (input: ListAssociationsRequest, context: __SerdeContext): any => {
  return {
    ...(input.AssociationType !== undefined &&
      input.AssociationType !== null && { AssociationType: input.AssociationType }),
    ...(input.CreatedAfter !== undefined &&
      input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
    ...(input.CreatedBefore !== undefined &&
      input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
    ...(input.DestinationArn !== undefined &&
      input.DestinationArn !== null && { DestinationArn: input.DestinationArn }),
    ...(input.DestinationType !== undefined &&
      input.DestinationType !== null && { DestinationType: input.DestinationType }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.SourceArn !== undefined && input.SourceArn !== null && { SourceArn: input.SourceArn }),
    ...(input.SourceType !== undefined && input.SourceType !== null && { SourceType: input.SourceType }),
  };
};

const serializeAws_json1_1ListAutoMLJobsRequest = (input: ListAutoMLJobsRequest, context: __SerdeContext): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListCandidatesForAutoMLJobRequest = (
  input: ListCandidatesForAutoMLJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.AutoMLJobName !== undefined && input.AutoMLJobName !== null && { AutoMLJobName: input.AutoMLJobName }),
    ...(input.CandidateNameEquals !== undefined &&
      input.CandidateNameEquals !== null && { CandidateNameEquals: input.CandidateNameEquals }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListCodeRepositoriesInput = (
  input: ListCodeRepositoriesInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListCompilationJobsRequest = (
  input: ListCompilationJobsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListContextsRequest = (input: ListContextsRequest, context: __SerdeContext): any => {
  return {
    ...(input.ContextType !== undefined && input.ContextType !== null && { ContextType: input.ContextType }),
    ...(input.CreatedAfter !== undefined &&
      input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
    ...(input.CreatedBefore !== undefined &&
      input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.SourceUri !== undefined && input.SourceUri !== null && { SourceUri: input.SourceUri }),
  };
};

const serializeAws_json1_1ListDataQualityJobDefinitionsRequest = (
  input: ListDataQualityJobDefinitionsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListDeviceFleetsRequest = (input: ListDeviceFleetsRequest, context: __SerdeContext): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListDevicesRequest = (input: ListDevicesRequest, context: __SerdeContext): any => {
  return {
    ...(input.DeviceFleetName !== undefined &&
      input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
    ...(input.LatestHeartbeatAfter !== undefined &&
      input.LatestHeartbeatAfter !== null && {
        LatestHeartbeatAfter: Math.round(input.LatestHeartbeatAfter.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
  };
};

const serializeAws_json1_1ListDomainsRequest = (input: ListDomainsRequest, context: __SerdeContext): any => {
  return {
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
  };
};

const serializeAws_json1_1ListEdgePackagingJobsRequest = (
  input: ListEdgePackagingJobsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.ModelNameContains !== undefined &&
      input.ModelNameContains !== null && { ModelNameContains: input.ModelNameContains }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListEndpointConfigsInput = (
  input: ListEndpointConfigsInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListEndpointsInput = (input: ListEndpointsInput, context: __SerdeContext): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListExperimentsRequest = (input: ListExperimentsRequest, context: __SerdeContext): any => {
  return {
    ...(input.CreatedAfter !== undefined &&
      input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
    ...(input.CreatedBefore !== undefined &&
      input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListFeatureGroupsRequest = (
  input: ListFeatureGroupsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.FeatureGroupStatusEquals !== undefined &&
      input.FeatureGroupStatusEquals !== null && { FeatureGroupStatusEquals: input.FeatureGroupStatusEquals }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.OfflineStoreStatusEquals !== undefined &&
      input.OfflineStoreStatusEquals !== null && { OfflineStoreStatusEquals: input.OfflineStoreStatusEquals }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListFlowDefinitionsRequest = (
  input: ListFlowDefinitionsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListHumanTaskUisRequest = (input: ListHumanTaskUisRequest, context: __SerdeContext): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListHyperParameterTuningJobsRequest = (
  input: ListHyperParameterTuningJobsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListImagesRequest = (input: ListImagesRequest, context: __SerdeContext): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListImageVersionsRequest = (
  input: ListImageVersionsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListLabelingJobsForWorkteamRequest = (
  input: ListLabelingJobsForWorkteamRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.JobReferenceCodeContains !== undefined &&
      input.JobReferenceCodeContains !== null && { JobReferenceCodeContains: input.JobReferenceCodeContains }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.WorkteamArn !== undefined && input.WorkteamArn !== null && { WorkteamArn: input.WorkteamArn }),
  };
};

const serializeAws_json1_1ListLabelingJobsRequest = (input: ListLabelingJobsRequest, context: __SerdeContext): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListLineageEntityParameterKey = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1ListModelBiasJobDefinitionsRequest = (
  input: ListModelBiasJobDefinitionsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListModelExplainabilityJobDefinitionsRequest = (
  input: ListModelExplainabilityJobDefinitionsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListModelPackageGroupsInput = (
  input: ListModelPackageGroupsInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListModelPackagesInput = (input: ListModelPackagesInput, context: __SerdeContext): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.ModelApprovalStatus !== undefined &&
      input.ModelApprovalStatus !== null && { ModelApprovalStatus: input.ModelApprovalStatus }),
    ...(input.ModelPackageGroupName !== undefined &&
      input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
    ...(input.ModelPackageType !== undefined &&
      input.ModelPackageType !== null && { ModelPackageType: input.ModelPackageType }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListModelQualityJobDefinitionsRequest = (
  input: ListModelQualityJobDefinitionsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListModelsInput = (input: ListModelsInput, context: __SerdeContext): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListMonitoringExecutionsRequest = (
  input: ListMonitoringExecutionsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.MonitoringJobDefinitionName !== undefined &&
      input.MonitoringJobDefinitionName !== null && { MonitoringJobDefinitionName: input.MonitoringJobDefinitionName }),
    ...(input.MonitoringScheduleName !== undefined &&
      input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
    ...(input.MonitoringTypeEquals !== undefined &&
      input.MonitoringTypeEquals !== null && { MonitoringTypeEquals: input.MonitoringTypeEquals }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.ScheduledTimeAfter !== undefined &&
      input.ScheduledTimeAfter !== null && {
        ScheduledTimeAfter: Math.round(input.ScheduledTimeAfter.getTime() / 1000),
      }),
    ...(input.ScheduledTimeBefore !== undefined &&
      input.ScheduledTimeBefore !== null && {
        ScheduledTimeBefore: Math.round(input.ScheduledTimeBefore.getTime() / 1000),
      }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListMonitoringSchedulesRequest = (
  input: ListMonitoringSchedulesRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.MonitoringJobDefinitionName !== undefined &&
      input.MonitoringJobDefinitionName !== null && { MonitoringJobDefinitionName: input.MonitoringJobDefinitionName }),
    ...(input.MonitoringTypeEquals !== undefined &&
      input.MonitoringTypeEquals !== null && { MonitoringTypeEquals: input.MonitoringTypeEquals }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListNotebookInstanceLifecycleConfigsInput = (
  input: ListNotebookInstanceLifecycleConfigsInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListNotebookInstancesInput = (
  input: ListNotebookInstancesInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.AdditionalCodeRepositoryEquals !== undefined &&
      input.AdditionalCodeRepositoryEquals !== null && {
        AdditionalCodeRepositoryEquals: input.AdditionalCodeRepositoryEquals,
      }),
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.DefaultCodeRepositoryContains !== undefined &&
      input.DefaultCodeRepositoryContains !== null && {
        DefaultCodeRepositoryContains: input.DefaultCodeRepositoryContains,
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.NotebookInstanceLifecycleConfigNameContains !== undefined &&
      input.NotebookInstanceLifecycleConfigNameContains !== null && {
        NotebookInstanceLifecycleConfigNameContains: input.NotebookInstanceLifecycleConfigNameContains,
      }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListPipelineExecutionsRequest = (
  input: ListPipelineExecutionsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreatedAfter !== undefined &&
      input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
    ...(input.CreatedBefore !== undefined &&
      input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.PipelineName !== undefined && input.PipelineName !== null && { PipelineName: input.PipelineName }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListPipelineExecutionStepsRequest = (
  input: ListPipelineExecutionStepsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.PipelineExecutionArn !== undefined &&
      input.PipelineExecutionArn !== null && { PipelineExecutionArn: input.PipelineExecutionArn }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListPipelineParametersForExecutionRequest = (
  input: ListPipelineParametersForExecutionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.PipelineExecutionArn !== undefined &&
      input.PipelineExecutionArn !== null && { PipelineExecutionArn: input.PipelineExecutionArn }),
  };
};

const serializeAws_json1_1ListPipelinesRequest = (input: ListPipelinesRequest, context: __SerdeContext): any => {
  return {
    ...(input.CreatedAfter !== undefined &&
      input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
    ...(input.CreatedBefore !== undefined &&
      input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.PipelineNamePrefix !== undefined &&
      input.PipelineNamePrefix !== null && { PipelineNamePrefix: input.PipelineNamePrefix }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListProcessingJobsRequest = (
  input: ListProcessingJobsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListProjectsInput = (input: ListProjectsInput, context: __SerdeContext): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListSubscribedWorkteamsRequest = (
  input: ListSubscribedWorkteamsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
  };
};

const serializeAws_json1_1ListTagsInput = (input: ListTagsInput, context: __SerdeContext): any => {
  return {
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.ResourceArn !== undefined && input.ResourceArn !== null && { ResourceArn: input.ResourceArn }),
  };
};

const serializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobRequest = (
  input: ListTrainingJobsForHyperParameterTuningJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.HyperParameterTuningJobName !== undefined &&
      input.HyperParameterTuningJobName !== null && { HyperParameterTuningJobName: input.HyperParameterTuningJobName }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListTrainingJobsRequest = (input: ListTrainingJobsRequest, context: __SerdeContext): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListTransformJobsRequest = (
  input: ListTransformJobsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreationTimeAfter !== undefined &&
      input.CreationTimeAfter !== null && { CreationTimeAfter: Math.round(input.CreationTimeAfter.getTime() / 1000) }),
    ...(input.CreationTimeBefore !== undefined &&
      input.CreationTimeBefore !== null && {
        CreationTimeBefore: Math.round(input.CreationTimeBefore.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeAfter !== undefined &&
      input.LastModifiedTimeAfter !== null && {
        LastModifiedTimeAfter: Math.round(input.LastModifiedTimeAfter.getTime() / 1000),
      }),
    ...(input.LastModifiedTimeBefore !== undefined &&
      input.LastModifiedTimeBefore !== null && {
        LastModifiedTimeBefore: Math.round(input.LastModifiedTimeBefore.getTime() / 1000),
      }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.StatusEquals !== undefined && input.StatusEquals !== null && { StatusEquals: input.StatusEquals }),
  };
};

const serializeAws_json1_1ListTrialComponentKey256 = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1ListTrialComponentsRequest = (
  input: ListTrialComponentsRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CreatedAfter !== undefined &&
      input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
    ...(input.CreatedBefore !== undefined &&
      input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
    ...(input.ExperimentName !== undefined &&
      input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.SourceArn !== undefined && input.SourceArn !== null && { SourceArn: input.SourceArn }),
    ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
  };
};

const serializeAws_json1_1ListTrialsRequest = (input: ListTrialsRequest, context: __SerdeContext): any => {
  return {
    ...(input.CreatedAfter !== undefined &&
      input.CreatedAfter !== null && { CreatedAfter: Math.round(input.CreatedAfter.getTime() / 1000) }),
    ...(input.CreatedBefore !== undefined &&
      input.CreatedBefore !== null && { CreatedBefore: Math.round(input.CreatedBefore.getTime() / 1000) }),
    ...(input.ExperimentName !== undefined &&
      input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.TrialComponentName !== undefined &&
      input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
  };
};

const serializeAws_json1_1ListUserProfilesRequest = (input: ListUserProfilesRequest, context: __SerdeContext): any => {
  return {
    ...(input.DomainIdEquals !== undefined &&
      input.DomainIdEquals !== null && { DomainIdEquals: input.DomainIdEquals }),
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
    ...(input.UserProfileNameContains !== undefined &&
      input.UserProfileNameContains !== null && { UserProfileNameContains: input.UserProfileNameContains }),
  };
};

const serializeAws_json1_1ListWorkforcesRequest = (input: ListWorkforcesRequest, context: __SerdeContext): any => {
  return {
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1ListWorkteamsRequest = (input: ListWorkteamsRequest, context: __SerdeContext): any => {
  return {
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NameContains !== undefined && input.NameContains !== null && { NameContains: input.NameContains }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1MemberDefinition = (input: MemberDefinition, context: __SerdeContext): any => {
  return {
    ...(input.CognitoMemberDefinition !== undefined &&
      input.CognitoMemberDefinition !== null && {
        CognitoMemberDefinition: serializeAws_json1_1CognitoMemberDefinition(input.CognitoMemberDefinition, context),
      }),
    ...(input.OidcMemberDefinition !== undefined &&
      input.OidcMemberDefinition !== null && {
        OidcMemberDefinition: serializeAws_json1_1OidcMemberDefinition(input.OidcMemberDefinition, context),
      }),
  };
};

const serializeAws_json1_1MemberDefinitions = (input: MemberDefinition[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1MemberDefinition(entry, context);
    });
};

const serializeAws_json1_1MetadataProperties = (input: MetadataProperties, context: __SerdeContext): any => {
  return {
    ...(input.CommitId !== undefined && input.CommitId !== null && { CommitId: input.CommitId }),
    ...(input.GeneratedBy !== undefined && input.GeneratedBy !== null && { GeneratedBy: input.GeneratedBy }),
    ...(input.ProjectId !== undefined && input.ProjectId !== null && { ProjectId: input.ProjectId }),
    ...(input.Repository !== undefined && input.Repository !== null && { Repository: input.Repository }),
  };
};

const serializeAws_json1_1MetricDefinition = (input: MetricDefinition, context: __SerdeContext): any => {
  return {
    ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    ...(input.Regex !== undefined && input.Regex !== null && { Regex: input.Regex }),
  };
};

const serializeAws_json1_1MetricDefinitionList = (input: MetricDefinition[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1MetricDefinition(entry, context);
    });
};

const serializeAws_json1_1MetricsSource = (input: MetricsSource, context: __SerdeContext): any => {
  return {
    ...(input.ContentDigest !== undefined && input.ContentDigest !== null && { ContentDigest: input.ContentDigest }),
    ...(input.ContentType !== undefined && input.ContentType !== null && { ContentType: input.ContentType }),
    ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
  };
};

const serializeAws_json1_1ModelBiasAppSpecification = (
  input: ModelBiasAppSpecification,
  context: __SerdeContext
): any => {
  return {
    ...(input.ConfigUri !== undefined && input.ConfigUri !== null && { ConfigUri: input.ConfigUri }),
    ...(input.Environment !== undefined &&
      input.Environment !== null && {
        Environment: serializeAws_json1_1MonitoringEnvironmentMap(input.Environment, context),
      }),
    ...(input.ImageUri !== undefined && input.ImageUri !== null && { ImageUri: input.ImageUri }),
  };
};

const serializeAws_json1_1ModelBiasBaselineConfig = (input: ModelBiasBaselineConfig, context: __SerdeContext): any => {
  return {
    ...(input.BaseliningJobName !== undefined &&
      input.BaseliningJobName !== null && { BaseliningJobName: input.BaseliningJobName }),
    ...(input.ConstraintsResource !== undefined &&
      input.ConstraintsResource !== null && {
        ConstraintsResource: serializeAws_json1_1MonitoringConstraintsResource(input.ConstraintsResource, context),
      }),
  };
};

const serializeAws_json1_1ModelBiasJobInput = (input: ModelBiasJobInput, context: __SerdeContext): any => {
  return {
    ...(input.EndpointInput !== undefined &&
      input.EndpointInput !== null && {
        EndpointInput: serializeAws_json1_1EndpointInput(input.EndpointInput, context),
      }),
    ...(input.GroundTruthS3Input !== undefined &&
      input.GroundTruthS3Input !== null && {
        GroundTruthS3Input: serializeAws_json1_1MonitoringGroundTruthS3Input(input.GroundTruthS3Input, context),
      }),
  };
};

const serializeAws_json1_1ModelClientConfig = (input: ModelClientConfig, context: __SerdeContext): any => {
  return {
    ...(input.InvocationsMaxRetries !== undefined &&
      input.InvocationsMaxRetries !== null && { InvocationsMaxRetries: input.InvocationsMaxRetries }),
    ...(input.InvocationsTimeoutInSeconds !== undefined &&
      input.InvocationsTimeoutInSeconds !== null && { InvocationsTimeoutInSeconds: input.InvocationsTimeoutInSeconds }),
  };
};

const serializeAws_json1_1ModelDataQuality = (input: ModelDataQuality, context: __SerdeContext): any => {
  return {
    ...(input.Constraints !== undefined &&
      input.Constraints !== null && { Constraints: serializeAws_json1_1MetricsSource(input.Constraints, context) }),
    ...(input.Statistics !== undefined &&
      input.Statistics !== null && { Statistics: serializeAws_json1_1MetricsSource(input.Statistics, context) }),
  };
};

const serializeAws_json1_1ModelDeployConfig = (input: ModelDeployConfig, context: __SerdeContext): any => {
  return {
    ...(input.AutoGenerateEndpointName !== undefined &&
      input.AutoGenerateEndpointName !== null && { AutoGenerateEndpointName: input.AutoGenerateEndpointName }),
    ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
  };
};

const serializeAws_json1_1ModelExplainabilityAppSpecification = (
  input: ModelExplainabilityAppSpecification,
  context: __SerdeContext
): any => {
  return {
    ...(input.ConfigUri !== undefined && input.ConfigUri !== null && { ConfigUri: input.ConfigUri }),
    ...(input.Environment !== undefined &&
      input.Environment !== null && {
        Environment: serializeAws_json1_1MonitoringEnvironmentMap(input.Environment, context),
      }),
    ...(input.ImageUri !== undefined && input.ImageUri !== null && { ImageUri: input.ImageUri }),
  };
};

const serializeAws_json1_1ModelExplainabilityBaselineConfig = (
  input: ModelExplainabilityBaselineConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.BaseliningJobName !== undefined &&
      input.BaseliningJobName !== null && { BaseliningJobName: input.BaseliningJobName }),
    ...(input.ConstraintsResource !== undefined &&
      input.ConstraintsResource !== null && {
        ConstraintsResource: serializeAws_json1_1MonitoringConstraintsResource(input.ConstraintsResource, context),
      }),
  };
};

const serializeAws_json1_1ModelExplainabilityJobInput = (
  input: ModelExplainabilityJobInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.EndpointInput !== undefined &&
      input.EndpointInput !== null && {
        EndpointInput: serializeAws_json1_1EndpointInput(input.EndpointInput, context),
      }),
  };
};

const serializeAws_json1_1ModelMetrics = (input: ModelMetrics, context: __SerdeContext): any => {
  return {
    ...(input.Bias !== undefined && input.Bias !== null && { Bias: serializeAws_json1_1Bias(input.Bias, context) }),
    ...(input.Explainability !== undefined &&
      input.Explainability !== null && {
        Explainability: serializeAws_json1_1Explainability(input.Explainability, context),
      }),
    ...(input.ModelDataQuality !== undefined &&
      input.ModelDataQuality !== null && {
        ModelDataQuality: serializeAws_json1_1ModelDataQuality(input.ModelDataQuality, context),
      }),
    ...(input.ModelQuality !== undefined &&
      input.ModelQuality !== null && { ModelQuality: serializeAws_json1_1ModelQuality(input.ModelQuality, context) }),
  };
};

const serializeAws_json1_1ModelPackageContainerDefinition = (
  input: ModelPackageContainerDefinition,
  context: __SerdeContext
): any => {
  return {
    ...(input.ContainerHostname !== undefined &&
      input.ContainerHostname !== null && { ContainerHostname: input.ContainerHostname }),
    ...(input.Image !== undefined && input.Image !== null && { Image: input.Image }),
    ...(input.ImageDigest !== undefined && input.ImageDigest !== null && { ImageDigest: input.ImageDigest }),
    ...(input.ModelDataUrl !== undefined && input.ModelDataUrl !== null && { ModelDataUrl: input.ModelDataUrl }),
    ...(input.ProductId !== undefined && input.ProductId !== null && { ProductId: input.ProductId }),
  };
};

const serializeAws_json1_1ModelPackageContainerDefinitionList = (
  input: ModelPackageContainerDefinition[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1ModelPackageContainerDefinition(entry, context);
    });
};

const serializeAws_json1_1ModelPackageValidationProfile = (
  input: ModelPackageValidationProfile,
  context: __SerdeContext
): any => {
  return {
    ...(input.ProfileName !== undefined && input.ProfileName !== null && { ProfileName: input.ProfileName }),
    ...(input.TransformJobDefinition !== undefined &&
      input.TransformJobDefinition !== null && {
        TransformJobDefinition: serializeAws_json1_1TransformJobDefinition(input.TransformJobDefinition, context),
      }),
  };
};

const serializeAws_json1_1ModelPackageValidationProfiles = (
  input: ModelPackageValidationProfile[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1ModelPackageValidationProfile(entry, context);
    });
};

const serializeAws_json1_1ModelPackageValidationSpecification = (
  input: ModelPackageValidationSpecification,
  context: __SerdeContext
): any => {
  return {
    ...(input.ValidationProfiles !== undefined &&
      input.ValidationProfiles !== null && {
        ValidationProfiles: serializeAws_json1_1ModelPackageValidationProfiles(input.ValidationProfiles, context),
      }),
    ...(input.ValidationRole !== undefined &&
      input.ValidationRole !== null && { ValidationRole: input.ValidationRole }),
  };
};

const serializeAws_json1_1ModelQuality = (input: ModelQuality, context: __SerdeContext): any => {
  return {
    ...(input.Constraints !== undefined &&
      input.Constraints !== null && { Constraints: serializeAws_json1_1MetricsSource(input.Constraints, context) }),
    ...(input.Statistics !== undefined &&
      input.Statistics !== null && { Statistics: serializeAws_json1_1MetricsSource(input.Statistics, context) }),
  };
};

const serializeAws_json1_1ModelQualityAppSpecification = (
  input: ModelQualityAppSpecification,
  context: __SerdeContext
): any => {
  return {
    ...(input.ContainerArguments !== undefined &&
      input.ContainerArguments !== null && {
        ContainerArguments: serializeAws_json1_1MonitoringContainerArguments(input.ContainerArguments, context),
      }),
    ...(input.ContainerEntrypoint !== undefined &&
      input.ContainerEntrypoint !== null && {
        ContainerEntrypoint: serializeAws_json1_1ContainerEntrypoint(input.ContainerEntrypoint, context),
      }),
    ...(input.Environment !== undefined &&
      input.Environment !== null && {
        Environment: serializeAws_json1_1MonitoringEnvironmentMap(input.Environment, context),
      }),
    ...(input.ImageUri !== undefined && input.ImageUri !== null && { ImageUri: input.ImageUri }),
    ...(input.PostAnalyticsProcessorSourceUri !== undefined &&
      input.PostAnalyticsProcessorSourceUri !== null && {
        PostAnalyticsProcessorSourceUri: input.PostAnalyticsProcessorSourceUri,
      }),
    ...(input.ProblemType !== undefined && input.ProblemType !== null && { ProblemType: input.ProblemType }),
    ...(input.RecordPreprocessorSourceUri !== undefined &&
      input.RecordPreprocessorSourceUri !== null && { RecordPreprocessorSourceUri: input.RecordPreprocessorSourceUri }),
  };
};

const serializeAws_json1_1ModelQualityBaselineConfig = (
  input: ModelQualityBaselineConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.BaseliningJobName !== undefined &&
      input.BaseliningJobName !== null && { BaseliningJobName: input.BaseliningJobName }),
    ...(input.ConstraintsResource !== undefined &&
      input.ConstraintsResource !== null && {
        ConstraintsResource: serializeAws_json1_1MonitoringConstraintsResource(input.ConstraintsResource, context),
      }),
  };
};

const serializeAws_json1_1ModelQualityJobInput = (input: ModelQualityJobInput, context: __SerdeContext): any => {
  return {
    ...(input.EndpointInput !== undefined &&
      input.EndpointInput !== null && {
        EndpointInput: serializeAws_json1_1EndpointInput(input.EndpointInput, context),
      }),
    ...(input.GroundTruthS3Input !== undefined &&
      input.GroundTruthS3Input !== null && {
        GroundTruthS3Input: serializeAws_json1_1MonitoringGroundTruthS3Input(input.GroundTruthS3Input, context),
      }),
  };
};

const serializeAws_json1_1MonitoringAppSpecification = (
  input: MonitoringAppSpecification,
  context: __SerdeContext
): any => {
  return {
    ...(input.ContainerArguments !== undefined &&
      input.ContainerArguments !== null && {
        ContainerArguments: serializeAws_json1_1MonitoringContainerArguments(input.ContainerArguments, context),
      }),
    ...(input.ContainerEntrypoint !== undefined &&
      input.ContainerEntrypoint !== null && {
        ContainerEntrypoint: serializeAws_json1_1ContainerEntrypoint(input.ContainerEntrypoint, context),
      }),
    ...(input.ImageUri !== undefined && input.ImageUri !== null && { ImageUri: input.ImageUri }),
    ...(input.PostAnalyticsProcessorSourceUri !== undefined &&
      input.PostAnalyticsProcessorSourceUri !== null && {
        PostAnalyticsProcessorSourceUri: input.PostAnalyticsProcessorSourceUri,
      }),
    ...(input.RecordPreprocessorSourceUri !== undefined &&
      input.RecordPreprocessorSourceUri !== null && { RecordPreprocessorSourceUri: input.RecordPreprocessorSourceUri }),
  };
};

const serializeAws_json1_1MonitoringBaselineConfig = (
  input: MonitoringBaselineConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.BaseliningJobName !== undefined &&
      input.BaseliningJobName !== null && { BaseliningJobName: input.BaseliningJobName }),
    ...(input.ConstraintsResource !== undefined &&
      input.ConstraintsResource !== null && {
        ConstraintsResource: serializeAws_json1_1MonitoringConstraintsResource(input.ConstraintsResource, context),
      }),
    ...(input.StatisticsResource !== undefined &&
      input.StatisticsResource !== null && {
        StatisticsResource: serializeAws_json1_1MonitoringStatisticsResource(input.StatisticsResource, context),
      }),
  };
};

const serializeAws_json1_1MonitoringClusterConfig = (input: MonitoringClusterConfig, context: __SerdeContext): any => {
  return {
    ...(input.InstanceCount !== undefined && input.InstanceCount !== null && { InstanceCount: input.InstanceCount }),
    ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
    ...(input.VolumeKmsKeyId !== undefined &&
      input.VolumeKmsKeyId !== null && { VolumeKmsKeyId: input.VolumeKmsKeyId }),
    ...(input.VolumeSizeInGB !== undefined &&
      input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
  };
};

const serializeAws_json1_1MonitoringConstraintsResource = (
  input: MonitoringConstraintsResource,
  context: __SerdeContext
): any => {
  return {
    ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
  };
};

const serializeAws_json1_1MonitoringContainerArguments = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1MonitoringEnvironmentMap = (
  input: { [key: string]: string },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const serializeAws_json1_1MonitoringGroundTruthS3Input = (
  input: MonitoringGroundTruthS3Input,
  context: __SerdeContext
): any => {
  return {
    ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
  };
};

const serializeAws_json1_1MonitoringInput = (input: MonitoringInput, context: __SerdeContext): any => {
  return {
    ...(input.EndpointInput !== undefined &&
      input.EndpointInput !== null && {
        EndpointInput: serializeAws_json1_1EndpointInput(input.EndpointInput, context),
      }),
  };
};

const serializeAws_json1_1MonitoringInputs = (input: MonitoringInput[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1MonitoringInput(entry, context);
    });
};

const serializeAws_json1_1MonitoringJobDefinition = (input: MonitoringJobDefinition, context: __SerdeContext): any => {
  return {
    ...(input.BaselineConfig !== undefined &&
      input.BaselineConfig !== null && {
        BaselineConfig: serializeAws_json1_1MonitoringBaselineConfig(input.BaselineConfig, context),
      }),
    ...(input.Environment !== undefined &&
      input.Environment !== null && {
        Environment: serializeAws_json1_1MonitoringEnvironmentMap(input.Environment, context),
      }),
    ...(input.MonitoringAppSpecification !== undefined &&
      input.MonitoringAppSpecification !== null && {
        MonitoringAppSpecification: serializeAws_json1_1MonitoringAppSpecification(
          input.MonitoringAppSpecification,
          context
        ),
      }),
    ...(input.MonitoringInputs !== undefined &&
      input.MonitoringInputs !== null && {
        MonitoringInputs: serializeAws_json1_1MonitoringInputs(input.MonitoringInputs, context),
      }),
    ...(input.MonitoringOutputConfig !== undefined &&
      input.MonitoringOutputConfig !== null && {
        MonitoringOutputConfig: serializeAws_json1_1MonitoringOutputConfig(input.MonitoringOutputConfig, context),
      }),
    ...(input.MonitoringResources !== undefined &&
      input.MonitoringResources !== null && {
        MonitoringResources: serializeAws_json1_1MonitoringResources(input.MonitoringResources, context),
      }),
    ...(input.NetworkConfig !== undefined &&
      input.NetworkConfig !== null && {
        NetworkConfig: serializeAws_json1_1NetworkConfig(input.NetworkConfig, context),
      }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.StoppingCondition !== undefined &&
      input.StoppingCondition !== null && {
        StoppingCondition: serializeAws_json1_1MonitoringStoppingCondition(input.StoppingCondition, context),
      }),
  };
};

const serializeAws_json1_1MonitoringNetworkConfig = (input: MonitoringNetworkConfig, context: __SerdeContext): any => {
  return {
    ...(input.EnableInterContainerTrafficEncryption !== undefined &&
      input.EnableInterContainerTrafficEncryption !== null && {
        EnableInterContainerTrafficEncryption: input.EnableInterContainerTrafficEncryption,
      }),
    ...(input.EnableNetworkIsolation !== undefined &&
      input.EnableNetworkIsolation !== null && { EnableNetworkIsolation: input.EnableNetworkIsolation }),
    ...(input.VpcConfig !== undefined &&
      input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
  };
};

const serializeAws_json1_1MonitoringOutput = (input: MonitoringOutput, context: __SerdeContext): any => {
  return {
    ...(input.S3Output !== undefined &&
      input.S3Output !== null && { S3Output: serializeAws_json1_1MonitoringS3Output(input.S3Output, context) }),
  };
};

const serializeAws_json1_1MonitoringOutputConfig = (input: MonitoringOutputConfig, context: __SerdeContext): any => {
  return {
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.MonitoringOutputs !== undefined &&
      input.MonitoringOutputs !== null && {
        MonitoringOutputs: serializeAws_json1_1MonitoringOutputs(input.MonitoringOutputs, context),
      }),
  };
};

const serializeAws_json1_1MonitoringOutputs = (input: MonitoringOutput[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1MonitoringOutput(entry, context);
    });
};

const serializeAws_json1_1MonitoringResources = (input: MonitoringResources, context: __SerdeContext): any => {
  return {
    ...(input.ClusterConfig !== undefined &&
      input.ClusterConfig !== null && {
        ClusterConfig: serializeAws_json1_1MonitoringClusterConfig(input.ClusterConfig, context),
      }),
  };
};

const serializeAws_json1_1MonitoringS3Output = (input: MonitoringS3Output, context: __SerdeContext): any => {
  return {
    ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
    ...(input.S3UploadMode !== undefined && input.S3UploadMode !== null && { S3UploadMode: input.S3UploadMode }),
    ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
  };
};

const serializeAws_json1_1MonitoringScheduleConfig = (
  input: MonitoringScheduleConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.MonitoringJobDefinition !== undefined &&
      input.MonitoringJobDefinition !== null && {
        MonitoringJobDefinition: serializeAws_json1_1MonitoringJobDefinition(input.MonitoringJobDefinition, context),
      }),
    ...(input.MonitoringJobDefinitionName !== undefined &&
      input.MonitoringJobDefinitionName !== null && { MonitoringJobDefinitionName: input.MonitoringJobDefinitionName }),
    ...(input.MonitoringType !== undefined &&
      input.MonitoringType !== null && { MonitoringType: input.MonitoringType }),
    ...(input.ScheduleConfig !== undefined &&
      input.ScheduleConfig !== null && {
        ScheduleConfig: serializeAws_json1_1ScheduleConfig(input.ScheduleConfig, context),
      }),
  };
};

const serializeAws_json1_1MonitoringStatisticsResource = (
  input: MonitoringStatisticsResource,
  context: __SerdeContext
): any => {
  return {
    ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
  };
};

const serializeAws_json1_1MonitoringStoppingCondition = (
  input: MonitoringStoppingCondition,
  context: __SerdeContext
): any => {
  return {
    ...(input.MaxRuntimeInSeconds !== undefined &&
      input.MaxRuntimeInSeconds !== null && { MaxRuntimeInSeconds: input.MaxRuntimeInSeconds }),
  };
};

const serializeAws_json1_1MultiModelConfig = (input: MultiModelConfig, context: __SerdeContext): any => {
  return {
    ...(input.ModelCacheSetting !== undefined &&
      input.ModelCacheSetting !== null && { ModelCacheSetting: input.ModelCacheSetting }),
  };
};

const serializeAws_json1_1NestedFilters = (input: NestedFilters, context: __SerdeContext): any => {
  return {
    ...(input.Filters !== undefined &&
      input.Filters !== null && { Filters: serializeAws_json1_1FilterList(input.Filters, context) }),
    ...(input.NestedPropertyName !== undefined &&
      input.NestedPropertyName !== null && { NestedPropertyName: input.NestedPropertyName }),
  };
};

const serializeAws_json1_1NestedFiltersList = (input: NestedFilters[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1NestedFilters(entry, context);
    });
};

const serializeAws_json1_1NetworkConfig = (input: NetworkConfig, context: __SerdeContext): any => {
  return {
    ...(input.EnableInterContainerTrafficEncryption !== undefined &&
      input.EnableInterContainerTrafficEncryption !== null && {
        EnableInterContainerTrafficEncryption: input.EnableInterContainerTrafficEncryption,
      }),
    ...(input.EnableNetworkIsolation !== undefined &&
      input.EnableNetworkIsolation !== null && { EnableNetworkIsolation: input.EnableNetworkIsolation }),
    ...(input.VpcConfig !== undefined &&
      input.VpcConfig !== null && { VpcConfig: serializeAws_json1_1VpcConfig(input.VpcConfig, context) }),
  };
};

const serializeAws_json1_1NotebookInstanceAcceleratorTypes = (
  input: (NotebookInstanceAcceleratorType | string)[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1NotebookInstanceLifecycleConfigList = (
  input: NotebookInstanceLifecycleHook[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1NotebookInstanceLifecycleHook(entry, context);
    });
};

const serializeAws_json1_1NotebookInstanceLifecycleHook = (
  input: NotebookInstanceLifecycleHook,
  context: __SerdeContext
): any => {
  return {
    ...(input.Content !== undefined && input.Content !== null && { Content: input.Content }),
  };
};

const serializeAws_json1_1NotificationConfiguration = (
  input: NotificationConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.NotificationTopicArn !== undefined &&
      input.NotificationTopicArn !== null && { NotificationTopicArn: input.NotificationTopicArn }),
  };
};

const serializeAws_json1_1OfflineStoreConfig = (input: OfflineStoreConfig, context: __SerdeContext): any => {
  return {
    ...(input.DataCatalogConfig !== undefined &&
      input.DataCatalogConfig !== null && {
        DataCatalogConfig: serializeAws_json1_1DataCatalogConfig(input.DataCatalogConfig, context),
      }),
    ...(input.DisableGlueTableCreation !== undefined &&
      input.DisableGlueTableCreation !== null && { DisableGlueTableCreation: input.DisableGlueTableCreation }),
    ...(input.S3StorageConfig !== undefined &&
      input.S3StorageConfig !== null && {
        S3StorageConfig: serializeAws_json1_1S3StorageConfig(input.S3StorageConfig, context),
      }),
  };
};

const serializeAws_json1_1OidcConfig = (input: OidcConfig, context: __SerdeContext): any => {
  return {
    ...(input.AuthorizationEndpoint !== undefined &&
      input.AuthorizationEndpoint !== null && { AuthorizationEndpoint: input.AuthorizationEndpoint }),
    ...(input.ClientId !== undefined && input.ClientId !== null && { ClientId: input.ClientId }),
    ...(input.ClientSecret !== undefined && input.ClientSecret !== null && { ClientSecret: input.ClientSecret }),
    ...(input.Issuer !== undefined && input.Issuer !== null && { Issuer: input.Issuer }),
    ...(input.JwksUri !== undefined && input.JwksUri !== null && { JwksUri: input.JwksUri }),
    ...(input.LogoutEndpoint !== undefined &&
      input.LogoutEndpoint !== null && { LogoutEndpoint: input.LogoutEndpoint }),
    ...(input.TokenEndpoint !== undefined && input.TokenEndpoint !== null && { TokenEndpoint: input.TokenEndpoint }),
    ...(input.UserInfoEndpoint !== undefined &&
      input.UserInfoEndpoint !== null && { UserInfoEndpoint: input.UserInfoEndpoint }),
  };
};

const serializeAws_json1_1OidcMemberDefinition = (input: OidcMemberDefinition, context: __SerdeContext): any => {
  return {
    ...(input.Groups !== undefined &&
      input.Groups !== null && { Groups: serializeAws_json1_1Groups(input.Groups, context) }),
  };
};

const serializeAws_json1_1OnlineStoreConfig = (input: OnlineStoreConfig, context: __SerdeContext): any => {
  return {
    ...(input.EnableOnlineStore !== undefined &&
      input.EnableOnlineStore !== null && { EnableOnlineStore: input.EnableOnlineStore }),
    ...(input.SecurityConfig !== undefined &&
      input.SecurityConfig !== null && {
        SecurityConfig: serializeAws_json1_1OnlineStoreSecurityConfig(input.SecurityConfig, context),
      }),
  };
};

const serializeAws_json1_1OnlineStoreSecurityConfig = (
  input: OnlineStoreSecurityConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
  };
};

const serializeAws_json1_1OutputConfig = (input: OutputConfig, context: __SerdeContext): any => {
  return {
    ...(input.CompilerOptions !== undefined &&
      input.CompilerOptions !== null && { CompilerOptions: input.CompilerOptions }),
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.S3OutputLocation !== undefined &&
      input.S3OutputLocation !== null && { S3OutputLocation: input.S3OutputLocation }),
    ...(input.TargetDevice !== undefined && input.TargetDevice !== null && { TargetDevice: input.TargetDevice }),
    ...(input.TargetPlatform !== undefined &&
      input.TargetPlatform !== null && {
        TargetPlatform: serializeAws_json1_1TargetPlatform(input.TargetPlatform, context),
      }),
  };
};

const serializeAws_json1_1OutputDataConfig = (input: OutputDataConfig, context: __SerdeContext): any => {
  return {
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
  };
};

const serializeAws_json1_1Parameter = (input: Parameter, context: __SerdeContext): any => {
  return {
    ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
  };
};

const serializeAws_json1_1ParameterList = (input: Parameter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1Parameter(entry, context);
    });
};

const serializeAws_json1_1ParameterRange = (input: ParameterRange, context: __SerdeContext): any => {
  return {
    ...(input.CategoricalParameterRangeSpecification !== undefined &&
      input.CategoricalParameterRangeSpecification !== null && {
        CategoricalParameterRangeSpecification: serializeAws_json1_1CategoricalParameterRangeSpecification(
          input.CategoricalParameterRangeSpecification,
          context
        ),
      }),
    ...(input.ContinuousParameterRangeSpecification !== undefined &&
      input.ContinuousParameterRangeSpecification !== null && {
        ContinuousParameterRangeSpecification: serializeAws_json1_1ContinuousParameterRangeSpecification(
          input.ContinuousParameterRangeSpecification,
          context
        ),
      }),
    ...(input.IntegerParameterRangeSpecification !== undefined &&
      input.IntegerParameterRangeSpecification !== null && {
        IntegerParameterRangeSpecification: serializeAws_json1_1IntegerParameterRangeSpecification(
          input.IntegerParameterRangeSpecification,
          context
        ),
      }),
  };
};

const serializeAws_json1_1ParameterRanges = (input: ParameterRanges, context: __SerdeContext): any => {
  return {
    ...(input.CategoricalParameterRanges !== undefined &&
      input.CategoricalParameterRanges !== null && {
        CategoricalParameterRanges: serializeAws_json1_1CategoricalParameterRanges(
          input.CategoricalParameterRanges,
          context
        ),
      }),
    ...(input.ContinuousParameterRanges !== undefined &&
      input.ContinuousParameterRanges !== null && {
        ContinuousParameterRanges: serializeAws_json1_1ContinuousParameterRanges(
          input.ContinuousParameterRanges,
          context
        ),
      }),
    ...(input.IntegerParameterRanges !== undefined &&
      input.IntegerParameterRanges !== null && {
        IntegerParameterRanges: serializeAws_json1_1IntegerParameterRanges(input.IntegerParameterRanges, context),
      }),
  };
};

const serializeAws_json1_1ParameterValues = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1ParentHyperParameterTuningJob = (
  input: ParentHyperParameterTuningJob,
  context: __SerdeContext
): any => {
  return {
    ...(input.HyperParameterTuningJobName !== undefined &&
      input.HyperParameterTuningJobName !== null && { HyperParameterTuningJobName: input.HyperParameterTuningJobName }),
  };
};

const serializeAws_json1_1ParentHyperParameterTuningJobs = (
  input: ParentHyperParameterTuningJob[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1ParentHyperParameterTuningJob(entry, context);
    });
};

const serializeAws_json1_1ProcessingClusterConfig = (input: ProcessingClusterConfig, context: __SerdeContext): any => {
  return {
    ...(input.InstanceCount !== undefined && input.InstanceCount !== null && { InstanceCount: input.InstanceCount }),
    ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
    ...(input.VolumeKmsKeyId !== undefined &&
      input.VolumeKmsKeyId !== null && { VolumeKmsKeyId: input.VolumeKmsKeyId }),
    ...(input.VolumeSizeInGB !== undefined &&
      input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
  };
};

const serializeAws_json1_1ProcessingEnvironmentMap = (
  input: { [key: string]: string },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const serializeAws_json1_1ProcessingFeatureStoreOutput = (
  input: ProcessingFeatureStoreOutput,
  context: __SerdeContext
): any => {
  return {
    ...(input.FeatureGroupName !== undefined &&
      input.FeatureGroupName !== null && { FeatureGroupName: input.FeatureGroupName }),
  };
};

const serializeAws_json1_1ProcessingInput = (input: ProcessingInput, context: __SerdeContext): any => {
  return {
    ...(input.AppManaged !== undefined && input.AppManaged !== null && { AppManaged: input.AppManaged }),
    ...(input.DatasetDefinition !== undefined &&
      input.DatasetDefinition !== null && {
        DatasetDefinition: serializeAws_json1_1DatasetDefinition(input.DatasetDefinition, context),
      }),
    ...(input.InputName !== undefined && input.InputName !== null && { InputName: input.InputName }),
    ...(input.S3Input !== undefined &&
      input.S3Input !== null && { S3Input: serializeAws_json1_1ProcessingS3Input(input.S3Input, context) }),
  };
};

const serializeAws_json1_1ProcessingInputs = (input: ProcessingInput[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1ProcessingInput(entry, context);
    });
};

const serializeAws_json1_1ProcessingOutput = (input: ProcessingOutput, context: __SerdeContext): any => {
  return {
    ...(input.AppManaged !== undefined && input.AppManaged !== null && { AppManaged: input.AppManaged }),
    ...(input.FeatureStoreOutput !== undefined &&
      input.FeatureStoreOutput !== null && {
        FeatureStoreOutput: serializeAws_json1_1ProcessingFeatureStoreOutput(input.FeatureStoreOutput, context),
      }),
    ...(input.OutputName !== undefined && input.OutputName !== null && { OutputName: input.OutputName }),
    ...(input.S3Output !== undefined &&
      input.S3Output !== null && { S3Output: serializeAws_json1_1ProcessingS3Output(input.S3Output, context) }),
  };
};

const serializeAws_json1_1ProcessingOutputConfig = (input: ProcessingOutputConfig, context: __SerdeContext): any => {
  return {
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.Outputs !== undefined &&
      input.Outputs !== null && { Outputs: serializeAws_json1_1ProcessingOutputs(input.Outputs, context) }),
  };
};

const serializeAws_json1_1ProcessingOutputs = (input: ProcessingOutput[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1ProcessingOutput(entry, context);
    });
};

const serializeAws_json1_1ProcessingResources = (input: ProcessingResources, context: __SerdeContext): any => {
  return {
    ...(input.ClusterConfig !== undefined &&
      input.ClusterConfig !== null && {
        ClusterConfig: serializeAws_json1_1ProcessingClusterConfig(input.ClusterConfig, context),
      }),
  };
};

const serializeAws_json1_1ProcessingS3Input = (input: ProcessingS3Input, context: __SerdeContext): any => {
  return {
    ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
    ...(input.S3CompressionType !== undefined &&
      input.S3CompressionType !== null && { S3CompressionType: input.S3CompressionType }),
    ...(input.S3DataDistributionType !== undefined &&
      input.S3DataDistributionType !== null && { S3DataDistributionType: input.S3DataDistributionType }),
    ...(input.S3DataType !== undefined && input.S3DataType !== null && { S3DataType: input.S3DataType }),
    ...(input.S3InputMode !== undefined && input.S3InputMode !== null && { S3InputMode: input.S3InputMode }),
    ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
  };
};

const serializeAws_json1_1ProcessingS3Output = (input: ProcessingS3Output, context: __SerdeContext): any => {
  return {
    ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
    ...(input.S3UploadMode !== undefined && input.S3UploadMode !== null && { S3UploadMode: input.S3UploadMode }),
    ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
  };
};

const serializeAws_json1_1ProcessingStoppingCondition = (
  input: ProcessingStoppingCondition,
  context: __SerdeContext
): any => {
  return {
    ...(input.MaxRuntimeInSeconds !== undefined &&
      input.MaxRuntimeInSeconds !== null && { MaxRuntimeInSeconds: input.MaxRuntimeInSeconds }),
  };
};

const serializeAws_json1_1ProductionVariant = (input: ProductionVariant, context: __SerdeContext): any => {
  return {
    ...(input.AcceleratorType !== undefined &&
      input.AcceleratorType !== null && { AcceleratorType: input.AcceleratorType }),
    ...(input.CoreDumpConfig !== undefined &&
      input.CoreDumpConfig !== null && {
        CoreDumpConfig: serializeAws_json1_1ProductionVariantCoreDumpConfig(input.CoreDumpConfig, context),
      }),
    ...(input.InitialInstanceCount !== undefined &&
      input.InitialInstanceCount !== null && { InitialInstanceCount: input.InitialInstanceCount }),
    ...(input.InitialVariantWeight !== undefined &&
      input.InitialVariantWeight !== null && { InitialVariantWeight: input.InitialVariantWeight }),
    ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
    ...(input.ModelName !== undefined && input.ModelName !== null && { ModelName: input.ModelName }),
    ...(input.VariantName !== undefined && input.VariantName !== null && { VariantName: input.VariantName }),
  };
};

const serializeAws_json1_1ProductionVariantCoreDumpConfig = (
  input: ProductionVariantCoreDumpConfig,
  context: __SerdeContext
): any => {
  return {
    ...(input.DestinationS3Uri !== undefined &&
      input.DestinationS3Uri !== null && { DestinationS3Uri: input.DestinationS3Uri }),
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
  };
};

const serializeAws_json1_1ProductionVariantList = (input: ProductionVariant[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1ProductionVariant(entry, context);
    });
};

const serializeAws_json1_1ProfilerConfig = (input: ProfilerConfig, context: __SerdeContext): any => {
  return {
    ...(input.ProfilingIntervalInMilliseconds !== undefined &&
      input.ProfilingIntervalInMilliseconds !== null && {
        ProfilingIntervalInMilliseconds: input.ProfilingIntervalInMilliseconds,
      }),
    ...(input.ProfilingParameters !== undefined &&
      input.ProfilingParameters !== null && {
        ProfilingParameters: serializeAws_json1_1ProfilingParameters(input.ProfilingParameters, context),
      }),
    ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
  };
};

const serializeAws_json1_1ProfilerConfigForUpdate = (input: ProfilerConfigForUpdate, context: __SerdeContext): any => {
  return {
    ...(input.DisableProfiler !== undefined &&
      input.DisableProfiler !== null && { DisableProfiler: input.DisableProfiler }),
    ...(input.ProfilingIntervalInMilliseconds !== undefined &&
      input.ProfilingIntervalInMilliseconds !== null && {
        ProfilingIntervalInMilliseconds: input.ProfilingIntervalInMilliseconds,
      }),
    ...(input.ProfilingParameters !== undefined &&
      input.ProfilingParameters !== null && {
        ProfilingParameters: serializeAws_json1_1ProfilingParameters(input.ProfilingParameters, context),
      }),
    ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
  };
};

const serializeAws_json1_1ProfilerRuleConfiguration = (
  input: ProfilerRuleConfiguration,
  context: __SerdeContext
): any => {
  return {
    ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
    ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
    ...(input.RuleConfigurationName !== undefined &&
      input.RuleConfigurationName !== null && { RuleConfigurationName: input.RuleConfigurationName }),
    ...(input.RuleEvaluatorImage !== undefined &&
      input.RuleEvaluatorImage !== null && { RuleEvaluatorImage: input.RuleEvaluatorImage }),
    ...(input.RuleParameters !== undefined &&
      input.RuleParameters !== null && {
        RuleParameters: serializeAws_json1_1RuleParameters(input.RuleParameters, context),
      }),
    ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
    ...(input.VolumeSizeInGB !== undefined &&
      input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
  };
};

const serializeAws_json1_1ProfilerRuleConfigurations = (
  input: ProfilerRuleConfiguration[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1ProfilerRuleConfiguration(entry, context);
    });
};

const serializeAws_json1_1ProfilingParameters = (input: { [key: string]: string }, context: __SerdeContext): any => {
  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const serializeAws_json1_1PropertyNameQuery = (input: PropertyNameQuery, context: __SerdeContext): any => {
  return {
    ...(input.PropertyNameHint !== undefined &&
      input.PropertyNameHint !== null && { PropertyNameHint: input.PropertyNameHint }),
  };
};

const serializeAws_json1_1ProvisioningParameter = (input: ProvisioningParameter, context: __SerdeContext): any => {
  return {
    ...(input.Key !== undefined && input.Key !== null && { Key: input.Key }),
    ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
  };
};

const serializeAws_json1_1ProvisioningParameters = (input: ProvisioningParameter[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1ProvisioningParameter(entry, context);
    });
};

const serializeAws_json1_1PublicWorkforceTaskPrice = (
  input: PublicWorkforceTaskPrice,
  context: __SerdeContext
): any => {
  return {
    ...(input.AmountInUsd !== undefined &&
      input.AmountInUsd !== null && { AmountInUsd: serializeAws_json1_1USD(input.AmountInUsd, context) }),
  };
};

const serializeAws_json1_1PutModelPackageGroupPolicyInput = (
  input: PutModelPackageGroupPolicyInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.ModelPackageGroupName !== undefined &&
      input.ModelPackageGroupName !== null && { ModelPackageGroupName: input.ModelPackageGroupName }),
    ...(input.ResourcePolicy !== undefined &&
      input.ResourcePolicy !== null && { ResourcePolicy: input.ResourcePolicy }),
  };
};

const serializeAws_json1_1RealtimeInferenceInstanceTypes = (
  input: (ProductionVariantInstanceType | string)[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1RedshiftDatasetDefinition = (
  input: RedshiftDatasetDefinition,
  context: __SerdeContext
): any => {
  return {
    ...(input.ClusterId !== undefined && input.ClusterId !== null && { ClusterId: input.ClusterId }),
    ...(input.ClusterRoleArn !== undefined &&
      input.ClusterRoleArn !== null && { ClusterRoleArn: input.ClusterRoleArn }),
    ...(input.Database !== undefined && input.Database !== null && { Database: input.Database }),
    ...(input.DbUser !== undefined && input.DbUser !== null && { DbUser: input.DbUser }),
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.OutputCompression !== undefined &&
      input.OutputCompression !== null && { OutputCompression: input.OutputCompression }),
    ...(input.OutputFormat !== undefined && input.OutputFormat !== null && { OutputFormat: input.OutputFormat }),
    ...(input.OutputS3Uri !== undefined && input.OutputS3Uri !== null && { OutputS3Uri: input.OutputS3Uri }),
    ...(input.QueryString !== undefined && input.QueryString !== null && { QueryString: input.QueryString }),
  };
};

const serializeAws_json1_1RegisterDevicesRequest = (input: RegisterDevicesRequest, context: __SerdeContext): any => {
  return {
    ...(input.DeviceFleetName !== undefined &&
      input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
    ...(input.Devices !== undefined &&
      input.Devices !== null && { Devices: serializeAws_json1_1Devices(input.Devices, context) }),
    ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_json1_1TagList(input.Tags, context) }),
  };
};

const serializeAws_json1_1RenderableTask = (input: RenderableTask, context: __SerdeContext): any => {
  return {
    ...(input.Input !== undefined && input.Input !== null && { Input: input.Input }),
  };
};

const serializeAws_json1_1RenderUiTemplateRequest = (input: RenderUiTemplateRequest, context: __SerdeContext): any => {
  return {
    ...(input.HumanTaskUiArn !== undefined &&
      input.HumanTaskUiArn !== null && { HumanTaskUiArn: input.HumanTaskUiArn }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.Task !== undefined &&
      input.Task !== null && { Task: serializeAws_json1_1RenderableTask(input.Task, context) }),
    ...(input.UiTemplate !== undefined &&
      input.UiTemplate !== null && { UiTemplate: serializeAws_json1_1UiTemplate(input.UiTemplate, context) }),
  };
};

const serializeAws_json1_1RepositoryAuthConfig = (input: RepositoryAuthConfig, context: __SerdeContext): any => {
  return {
    ...(input.RepositoryCredentialsProviderArn !== undefined &&
      input.RepositoryCredentialsProviderArn !== null && {
        RepositoryCredentialsProviderArn: input.RepositoryCredentialsProviderArn,
      }),
  };
};

const serializeAws_json1_1ResourceConfig = (input: ResourceConfig, context: __SerdeContext): any => {
  return {
    ...(input.InstanceCount !== undefined && input.InstanceCount !== null && { InstanceCount: input.InstanceCount }),
    ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
    ...(input.VolumeKmsKeyId !== undefined &&
      input.VolumeKmsKeyId !== null && { VolumeKmsKeyId: input.VolumeKmsKeyId }),
    ...(input.VolumeSizeInGB !== undefined &&
      input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
  };
};

const serializeAws_json1_1ResourceLimits = (input: ResourceLimits, context: __SerdeContext): any => {
  return {
    ...(input.MaxNumberOfTrainingJobs !== undefined &&
      input.MaxNumberOfTrainingJobs !== null && { MaxNumberOfTrainingJobs: input.MaxNumberOfTrainingJobs }),
    ...(input.MaxParallelTrainingJobs !== undefined &&
      input.MaxParallelTrainingJobs !== null && { MaxParallelTrainingJobs: input.MaxParallelTrainingJobs }),
  };
};

const serializeAws_json1_1ResourceSpec = (input: ResourceSpec, context: __SerdeContext): any => {
  return {
    ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
    ...(input.SageMakerImageArn !== undefined &&
      input.SageMakerImageArn !== null && { SageMakerImageArn: input.SageMakerImageArn }),
    ...(input.SageMakerImageVersionArn !== undefined &&
      input.SageMakerImageVersionArn !== null && { SageMakerImageVersionArn: input.SageMakerImageVersionArn }),
  };
};

const serializeAws_json1_1ResponseMIMETypes = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1RetentionPolicy = (input: RetentionPolicy, context: __SerdeContext): any => {
  return {
    ...(input.HomeEfsFileSystem !== undefined &&
      input.HomeEfsFileSystem !== null && { HomeEfsFileSystem: input.HomeEfsFileSystem }),
  };
};

const serializeAws_json1_1RetryStrategy = (input: RetryStrategy, context: __SerdeContext): any => {
  return {
    ...(input.MaximumRetryAttempts !== undefined &&
      input.MaximumRetryAttempts !== null && { MaximumRetryAttempts: input.MaximumRetryAttempts }),
  };
};

const serializeAws_json1_1RuleParameters = (input: { [key: string]: string }, context: __SerdeContext): any => {
  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const serializeAws_json1_1S3DataSource = (input: S3DataSource, context: __SerdeContext): any => {
  return {
    ...(input.AttributeNames !== undefined &&
      input.AttributeNames !== null && {
        AttributeNames: serializeAws_json1_1AttributeNames(input.AttributeNames, context),
      }),
    ...(input.S3DataDistributionType !== undefined &&
      input.S3DataDistributionType !== null && { S3DataDistributionType: input.S3DataDistributionType }),
    ...(input.S3DataType !== undefined && input.S3DataType !== null && { S3DataType: input.S3DataType }),
    ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
  };
};

const serializeAws_json1_1S3StorageConfig = (input: S3StorageConfig, context: __SerdeContext): any => {
  return {
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.ResolvedOutputS3Uri !== undefined &&
      input.ResolvedOutputS3Uri !== null && { ResolvedOutputS3Uri: input.ResolvedOutputS3Uri }),
    ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
  };
};

const serializeAws_json1_1ScheduleConfig = (input: ScheduleConfig, context: __SerdeContext): any => {
  return {
    ...(input.ScheduleExpression !== undefined &&
      input.ScheduleExpression !== null && { ScheduleExpression: input.ScheduleExpression }),
  };
};

const serializeAws_json1_1SearchExpression = (input: SearchExpression, context: __SerdeContext): any => {
  return {
    ...(input.Filters !== undefined &&
      input.Filters !== null && { Filters: serializeAws_json1_1FilterList(input.Filters, context) }),
    ...(input.NestedFilters !== undefined &&
      input.NestedFilters !== null && {
        NestedFilters: serializeAws_json1_1NestedFiltersList(input.NestedFilters, context),
      }),
    ...(input.Operator !== undefined && input.Operator !== null && { Operator: input.Operator }),
    ...(input.SubExpressions !== undefined &&
      input.SubExpressions !== null && {
        SubExpressions: serializeAws_json1_1SearchExpressionList(input.SubExpressions, context),
      }),
  };
};

const serializeAws_json1_1SearchExpressionList = (input: SearchExpression[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1SearchExpression(entry, context);
    });
};

const serializeAws_json1_1SearchRequest = (input: SearchRequest, context: __SerdeContext): any => {
  return {
    ...(input.MaxResults !== undefined && input.MaxResults !== null && { MaxResults: input.MaxResults }),
    ...(input.NextToken !== undefined && input.NextToken !== null && { NextToken: input.NextToken }),
    ...(input.Resource !== undefined && input.Resource !== null && { Resource: input.Resource }),
    ...(input.SearchExpression !== undefined &&
      input.SearchExpression !== null && {
        SearchExpression: serializeAws_json1_1SearchExpression(input.SearchExpression, context),
      }),
    ...(input.SortBy !== undefined && input.SortBy !== null && { SortBy: input.SortBy }),
    ...(input.SortOrder !== undefined && input.SortOrder !== null && { SortOrder: input.SortOrder }),
  };
};

const serializeAws_json1_1SecurityGroupIds = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1ServiceCatalogProvisioningDetails = (
  input: ServiceCatalogProvisioningDetails,
  context: __SerdeContext
): any => {
  return {
    ...(input.PathId !== undefined && input.PathId !== null && { PathId: input.PathId }),
    ...(input.ProductId !== undefined && input.ProductId !== null && { ProductId: input.ProductId }),
    ...(input.ProvisioningArtifactId !== undefined &&
      input.ProvisioningArtifactId !== null && { ProvisioningArtifactId: input.ProvisioningArtifactId }),
    ...(input.ProvisioningParameters !== undefined &&
      input.ProvisioningParameters !== null && {
        ProvisioningParameters: serializeAws_json1_1ProvisioningParameters(input.ProvisioningParameters, context),
      }),
  };
};

const serializeAws_json1_1SharingSettings = (input: SharingSettings, context: __SerdeContext): any => {
  return {
    ...(input.NotebookOutputOption !== undefined &&
      input.NotebookOutputOption !== null && { NotebookOutputOption: input.NotebookOutputOption }),
    ...(input.S3KmsKeyId !== undefined && input.S3KmsKeyId !== null && { S3KmsKeyId: input.S3KmsKeyId }),
    ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
  };
};

const serializeAws_json1_1ShuffleConfig = (input: ShuffleConfig, context: __SerdeContext): any => {
  return {
    ...(input.Seed !== undefined && input.Seed !== null && { Seed: input.Seed }),
  };
};

const serializeAws_json1_1SourceAlgorithm = (input: SourceAlgorithm, context: __SerdeContext): any => {
  return {
    ...(input.AlgorithmName !== undefined && input.AlgorithmName !== null && { AlgorithmName: input.AlgorithmName }),
    ...(input.ModelDataUrl !== undefined && input.ModelDataUrl !== null && { ModelDataUrl: input.ModelDataUrl }),
  };
};

const serializeAws_json1_1SourceAlgorithmList = (input: SourceAlgorithm[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1SourceAlgorithm(entry, context);
    });
};

const serializeAws_json1_1SourceAlgorithmSpecification = (
  input: SourceAlgorithmSpecification,
  context: __SerdeContext
): any => {
  return {
    ...(input.SourceAlgorithms !== undefined &&
      input.SourceAlgorithms !== null && {
        SourceAlgorithms: serializeAws_json1_1SourceAlgorithmList(input.SourceAlgorithms, context),
      }),
  };
};

const serializeAws_json1_1SourceIpConfig = (input: SourceIpConfig, context: __SerdeContext): any => {
  return {
    ...(input.Cidrs !== undefined &&
      input.Cidrs !== null && { Cidrs: serializeAws_json1_1Cidrs(input.Cidrs, context) }),
  };
};

const serializeAws_json1_1StartMonitoringScheduleRequest = (
  input: StartMonitoringScheduleRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.MonitoringScheduleName !== undefined &&
      input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
  };
};

const serializeAws_json1_1StartNotebookInstanceInput = (
  input: StartNotebookInstanceInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.NotebookInstanceName !== undefined &&
      input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
  };
};

const serializeAws_json1_1StartPipelineExecutionRequest = (
  input: StartPipelineExecutionRequest,
  context: __SerdeContext
): any => {
  return {
    ClientRequestToken: input.ClientRequestToken ?? generateIdempotencyToken(),
    ...(input.PipelineExecutionDescription !== undefined &&
      input.PipelineExecutionDescription !== null && {
        PipelineExecutionDescription: input.PipelineExecutionDescription,
      }),
    ...(input.PipelineExecutionDisplayName !== undefined &&
      input.PipelineExecutionDisplayName !== null && {
        PipelineExecutionDisplayName: input.PipelineExecutionDisplayName,
      }),
    ...(input.PipelineName !== undefined && input.PipelineName !== null && { PipelineName: input.PipelineName }),
    ...(input.PipelineParameters !== undefined &&
      input.PipelineParameters !== null && {
        PipelineParameters: serializeAws_json1_1ParameterList(input.PipelineParameters, context),
      }),
  };
};

const serializeAws_json1_1StopAutoMLJobRequest = (input: StopAutoMLJobRequest, context: __SerdeContext): any => {
  return {
    ...(input.AutoMLJobName !== undefined && input.AutoMLJobName !== null && { AutoMLJobName: input.AutoMLJobName }),
  };
};

const serializeAws_json1_1StopCompilationJobRequest = (
  input: StopCompilationJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.CompilationJobName !== undefined &&
      input.CompilationJobName !== null && { CompilationJobName: input.CompilationJobName }),
  };
};

const serializeAws_json1_1StopEdgePackagingJobRequest = (
  input: StopEdgePackagingJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.EdgePackagingJobName !== undefined &&
      input.EdgePackagingJobName !== null && { EdgePackagingJobName: input.EdgePackagingJobName }),
  };
};

const serializeAws_json1_1StopHyperParameterTuningJobRequest = (
  input: StopHyperParameterTuningJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.HyperParameterTuningJobName !== undefined &&
      input.HyperParameterTuningJobName !== null && { HyperParameterTuningJobName: input.HyperParameterTuningJobName }),
  };
};

const serializeAws_json1_1StopLabelingJobRequest = (input: StopLabelingJobRequest, context: __SerdeContext): any => {
  return {
    ...(input.LabelingJobName !== undefined &&
      input.LabelingJobName !== null && { LabelingJobName: input.LabelingJobName }),
  };
};

const serializeAws_json1_1StopMonitoringScheduleRequest = (
  input: StopMonitoringScheduleRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.MonitoringScheduleName !== undefined &&
      input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
  };
};

const serializeAws_json1_1StopNotebookInstanceInput = (
  input: StopNotebookInstanceInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.NotebookInstanceName !== undefined &&
      input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
  };
};

const serializeAws_json1_1StoppingCondition = (input: StoppingCondition, context: __SerdeContext): any => {
  return {
    ...(input.MaxRuntimeInSeconds !== undefined &&
      input.MaxRuntimeInSeconds !== null && { MaxRuntimeInSeconds: input.MaxRuntimeInSeconds }),
    ...(input.MaxWaitTimeInSeconds !== undefined &&
      input.MaxWaitTimeInSeconds !== null && { MaxWaitTimeInSeconds: input.MaxWaitTimeInSeconds }),
  };
};

const serializeAws_json1_1StopPipelineExecutionRequest = (
  input: StopPipelineExecutionRequest,
  context: __SerdeContext
): any => {
  return {
    ClientRequestToken: input.ClientRequestToken ?? generateIdempotencyToken(),
    ...(input.PipelineExecutionArn !== undefined &&
      input.PipelineExecutionArn !== null && { PipelineExecutionArn: input.PipelineExecutionArn }),
  };
};

const serializeAws_json1_1StopProcessingJobRequest = (
  input: StopProcessingJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.ProcessingJobName !== undefined &&
      input.ProcessingJobName !== null && { ProcessingJobName: input.ProcessingJobName }),
  };
};

const serializeAws_json1_1StopTrainingJobRequest = (input: StopTrainingJobRequest, context: __SerdeContext): any => {
  return {
    ...(input.TrainingJobName !== undefined &&
      input.TrainingJobName !== null && { TrainingJobName: input.TrainingJobName }),
  };
};

const serializeAws_json1_1StopTransformJobRequest = (input: StopTransformJobRequest, context: __SerdeContext): any => {
  return {
    ...(input.TransformJobName !== undefined &&
      input.TransformJobName !== null && { TransformJobName: input.TransformJobName }),
  };
};

const serializeAws_json1_1Subnets = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1SuggestionQuery = (input: SuggestionQuery, context: __SerdeContext): any => {
  return {
    ...(input.PropertyNameQuery !== undefined &&
      input.PropertyNameQuery !== null && {
        PropertyNameQuery: serializeAws_json1_1PropertyNameQuery(input.PropertyNameQuery, context),
      }),
  };
};

const serializeAws_json1_1Tag = (input: Tag, context: __SerdeContext): any => {
  return {
    ...(input.Key !== undefined && input.Key !== null && { Key: input.Key }),
    ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
  };
};

const serializeAws_json1_1TagKeyList = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1TagList = (input: Tag[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1Tag(entry, context);
    });
};

const serializeAws_json1_1TargetPlatform = (input: TargetPlatform, context: __SerdeContext): any => {
  return {
    ...(input.Accelerator !== undefined && input.Accelerator !== null && { Accelerator: input.Accelerator }),
    ...(input.Arch !== undefined && input.Arch !== null && { Arch: input.Arch }),
    ...(input.Os !== undefined && input.Os !== null && { Os: input.Os }),
  };
};

const serializeAws_json1_1TaskKeywords = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1TensorBoardAppSettings = (input: TensorBoardAppSettings, context: __SerdeContext): any => {
  return {
    ...(input.DefaultResourceSpec !== undefined &&
      input.DefaultResourceSpec !== null && {
        DefaultResourceSpec: serializeAws_json1_1ResourceSpec(input.DefaultResourceSpec, context),
      }),
  };
};

const serializeAws_json1_1TensorBoardOutputConfig = (input: TensorBoardOutputConfig, context: __SerdeContext): any => {
  return {
    ...(input.LocalPath !== undefined && input.LocalPath !== null && { LocalPath: input.LocalPath }),
    ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
  };
};

const serializeAws_json1_1TrafficRoutingConfig = (input: TrafficRoutingConfig, context: __SerdeContext): any => {
  return {
    ...(input.CanarySize !== undefined &&
      input.CanarySize !== null && { CanarySize: serializeAws_json1_1CapacitySize(input.CanarySize, context) }),
    ...(input.Type !== undefined && input.Type !== null && { Type: input.Type }),
    ...(input.WaitIntervalInSeconds !== undefined &&
      input.WaitIntervalInSeconds !== null && { WaitIntervalInSeconds: input.WaitIntervalInSeconds }),
  };
};

const serializeAws_json1_1TrainingEnvironmentMap = (input: { [key: string]: string }, context: __SerdeContext): any => {
  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const serializeAws_json1_1TrainingInstanceTypes = (
  input: (TrainingInstanceType | string)[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1TrainingJobDefinition = (input: TrainingJobDefinition, context: __SerdeContext): any => {
  return {
    ...(input.HyperParameters !== undefined &&
      input.HyperParameters !== null && {
        HyperParameters: serializeAws_json1_1HyperParameters(input.HyperParameters, context),
      }),
    ...(input.InputDataConfig !== undefined &&
      input.InputDataConfig !== null && {
        InputDataConfig: serializeAws_json1_1InputDataConfig(input.InputDataConfig, context),
      }),
    ...(input.OutputDataConfig !== undefined &&
      input.OutputDataConfig !== null && {
        OutputDataConfig: serializeAws_json1_1OutputDataConfig(input.OutputDataConfig, context),
      }),
    ...(input.ResourceConfig !== undefined &&
      input.ResourceConfig !== null && {
        ResourceConfig: serializeAws_json1_1ResourceConfig(input.ResourceConfig, context),
      }),
    ...(input.StoppingCondition !== undefined &&
      input.StoppingCondition !== null && {
        StoppingCondition: serializeAws_json1_1StoppingCondition(input.StoppingCondition, context),
      }),
    ...(input.TrainingInputMode !== undefined &&
      input.TrainingInputMode !== null && { TrainingInputMode: input.TrainingInputMode }),
  };
};

const serializeAws_json1_1TrainingSpecification = (input: TrainingSpecification, context: __SerdeContext): any => {
  return {
    ...(input.MetricDefinitions !== undefined &&
      input.MetricDefinitions !== null && {
        MetricDefinitions: serializeAws_json1_1MetricDefinitionList(input.MetricDefinitions, context),
      }),
    ...(input.SupportedHyperParameters !== undefined &&
      input.SupportedHyperParameters !== null && {
        SupportedHyperParameters: serializeAws_json1_1HyperParameterSpecifications(
          input.SupportedHyperParameters,
          context
        ),
      }),
    ...(input.SupportedTrainingInstanceTypes !== undefined &&
      input.SupportedTrainingInstanceTypes !== null && {
        SupportedTrainingInstanceTypes: serializeAws_json1_1TrainingInstanceTypes(
          input.SupportedTrainingInstanceTypes,
          context
        ),
      }),
    ...(input.SupportedTuningJobObjectiveMetrics !== undefined &&
      input.SupportedTuningJobObjectiveMetrics !== null && {
        SupportedTuningJobObjectiveMetrics: serializeAws_json1_1HyperParameterTuningJobObjectives(
          input.SupportedTuningJobObjectiveMetrics,
          context
        ),
      }),
    ...(input.SupportsDistributedTraining !== undefined &&
      input.SupportsDistributedTraining !== null && { SupportsDistributedTraining: input.SupportsDistributedTraining }),
    ...(input.TrainingChannels !== undefined &&
      input.TrainingChannels !== null && {
        TrainingChannels: serializeAws_json1_1ChannelSpecifications(input.TrainingChannels, context),
      }),
    ...(input.TrainingImage !== undefined && input.TrainingImage !== null && { TrainingImage: input.TrainingImage }),
    ...(input.TrainingImageDigest !== undefined &&
      input.TrainingImageDigest !== null && { TrainingImageDigest: input.TrainingImageDigest }),
  };
};

const serializeAws_json1_1TransformDataSource = (input: TransformDataSource, context: __SerdeContext): any => {
  return {
    ...(input.S3DataSource !== undefined &&
      input.S3DataSource !== null && {
        S3DataSource: serializeAws_json1_1TransformS3DataSource(input.S3DataSource, context),
      }),
  };
};

const serializeAws_json1_1TransformEnvironmentMap = (
  input: { [key: string]: string },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const serializeAws_json1_1TransformInput = (input: TransformInput, context: __SerdeContext): any => {
  return {
    ...(input.CompressionType !== undefined &&
      input.CompressionType !== null && { CompressionType: input.CompressionType }),
    ...(input.ContentType !== undefined && input.ContentType !== null && { ContentType: input.ContentType }),
    ...(input.DataSource !== undefined &&
      input.DataSource !== null && { DataSource: serializeAws_json1_1TransformDataSource(input.DataSource, context) }),
    ...(input.SplitType !== undefined && input.SplitType !== null && { SplitType: input.SplitType }),
  };
};

const serializeAws_json1_1TransformInstanceTypes = (
  input: (TransformInstanceType | string)[],
  context: __SerdeContext
): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const serializeAws_json1_1TransformJobDefinition = (input: TransformJobDefinition, context: __SerdeContext): any => {
  return {
    ...(input.BatchStrategy !== undefined && input.BatchStrategy !== null && { BatchStrategy: input.BatchStrategy }),
    ...(input.Environment !== undefined &&
      input.Environment !== null && {
        Environment: serializeAws_json1_1TransformEnvironmentMap(input.Environment, context),
      }),
    ...(input.MaxConcurrentTransforms !== undefined &&
      input.MaxConcurrentTransforms !== null && { MaxConcurrentTransforms: input.MaxConcurrentTransforms }),
    ...(input.MaxPayloadInMB !== undefined &&
      input.MaxPayloadInMB !== null && { MaxPayloadInMB: input.MaxPayloadInMB }),
    ...(input.TransformInput !== undefined &&
      input.TransformInput !== null && {
        TransformInput: serializeAws_json1_1TransformInput(input.TransformInput, context),
      }),
    ...(input.TransformOutput !== undefined &&
      input.TransformOutput !== null && {
        TransformOutput: serializeAws_json1_1TransformOutput(input.TransformOutput, context),
      }),
    ...(input.TransformResources !== undefined &&
      input.TransformResources !== null && {
        TransformResources: serializeAws_json1_1TransformResources(input.TransformResources, context),
      }),
  };
};

const serializeAws_json1_1TransformOutput = (input: TransformOutput, context: __SerdeContext): any => {
  return {
    ...(input.Accept !== undefined && input.Accept !== null && { Accept: input.Accept }),
    ...(input.AssembleWith !== undefined && input.AssembleWith !== null && { AssembleWith: input.AssembleWith }),
    ...(input.KmsKeyId !== undefined && input.KmsKeyId !== null && { KmsKeyId: input.KmsKeyId }),
    ...(input.S3OutputPath !== undefined && input.S3OutputPath !== null && { S3OutputPath: input.S3OutputPath }),
  };
};

const serializeAws_json1_1TransformResources = (input: TransformResources, context: __SerdeContext): any => {
  return {
    ...(input.InstanceCount !== undefined && input.InstanceCount !== null && { InstanceCount: input.InstanceCount }),
    ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
    ...(input.VolumeKmsKeyId !== undefined &&
      input.VolumeKmsKeyId !== null && { VolumeKmsKeyId: input.VolumeKmsKeyId }),
  };
};

const serializeAws_json1_1TransformS3DataSource = (input: TransformS3DataSource, context: __SerdeContext): any => {
  return {
    ...(input.S3DataType !== undefined && input.S3DataType !== null && { S3DataType: input.S3DataType }),
    ...(input.S3Uri !== undefined && input.S3Uri !== null && { S3Uri: input.S3Uri }),
  };
};

const serializeAws_json1_1TrialComponentArtifact = (input: TrialComponentArtifact, context: __SerdeContext): any => {
  return {
    ...(input.MediaType !== undefined && input.MediaType !== null && { MediaType: input.MediaType }),
    ...(input.Value !== undefined && input.Value !== null && { Value: input.Value }),
  };
};

const serializeAws_json1_1TrialComponentArtifacts = (
  input: { [key: string]: TrialComponentArtifact },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce((acc: { [key: string]: TrialComponentArtifact }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: serializeAws_json1_1TrialComponentArtifact(value, context),
    };
  }, {});
};

const serializeAws_json1_1TrialComponentParameters = (
  input: { [key: string]: TrialComponentParameterValue },
  context: __SerdeContext
): any => {
  return Object.entries(input).reduce(
    (acc: { [key: string]: TrialComponentParameterValue }, [key, value]: [string, any]) => {
      if (value === null) {
        return acc;
      }
      return {
        ...acc,
        [key]: serializeAws_json1_1TrialComponentParameterValue(value, context),
      };
    },
    {}
  );
};

const serializeAws_json1_1TrialComponentParameterValue = (
  input: TrialComponentParameterValue,
  context: __SerdeContext
): any => {
  return TrialComponentParameterValue.visit(input, {
    NumberValue: (value) => ({ NumberValue: value }),
    StringValue: (value) => ({ StringValue: value }),
    _: (name, value) => ({ name: value } as any),
  });
};

const serializeAws_json1_1TrialComponentStatus = (input: TrialComponentStatus, context: __SerdeContext): any => {
  return {
    ...(input.Message !== undefined && input.Message !== null && { Message: input.Message }),
    ...(input.PrimaryStatus !== undefined && input.PrimaryStatus !== null && { PrimaryStatus: input.PrimaryStatus }),
  };
};

const serializeAws_json1_1TuningJobCompletionCriteria = (
  input: TuningJobCompletionCriteria,
  context: __SerdeContext
): any => {
  return {
    ...(input.TargetObjectiveMetricValue !== undefined &&
      input.TargetObjectiveMetricValue !== null && { TargetObjectiveMetricValue: input.TargetObjectiveMetricValue }),
  };
};

const serializeAws_json1_1UiConfig = (input: UiConfig, context: __SerdeContext): any => {
  return {
    ...(input.HumanTaskUiArn !== undefined &&
      input.HumanTaskUiArn !== null && { HumanTaskUiArn: input.HumanTaskUiArn }),
    ...(input.UiTemplateS3Uri !== undefined &&
      input.UiTemplateS3Uri !== null && { UiTemplateS3Uri: input.UiTemplateS3Uri }),
  };
};

const serializeAws_json1_1UiTemplate = (input: UiTemplate, context: __SerdeContext): any => {
  return {
    ...(input.Content !== undefined && input.Content !== null && { Content: input.Content }),
  };
};

const serializeAws_json1_1UpdateActionRequest = (input: UpdateActionRequest, context: __SerdeContext): any => {
  return {
    ...(input.ActionName !== undefined && input.ActionName !== null && { ActionName: input.ActionName }),
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.Properties !== undefined &&
      input.Properties !== null && {
        Properties: serializeAws_json1_1LineageEntityParameters(input.Properties, context),
      }),
    ...(input.PropertiesToRemove !== undefined &&
      input.PropertiesToRemove !== null && {
        PropertiesToRemove: serializeAws_json1_1ListLineageEntityParameterKey(input.PropertiesToRemove, context),
      }),
    ...(input.Status !== undefined && input.Status !== null && { Status: input.Status }),
  };
};

const serializeAws_json1_1UpdateAppImageConfigRequest = (
  input: UpdateAppImageConfigRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.AppImageConfigName !== undefined &&
      input.AppImageConfigName !== null && { AppImageConfigName: input.AppImageConfigName }),
    ...(input.KernelGatewayImageConfig !== undefined &&
      input.KernelGatewayImageConfig !== null && {
        KernelGatewayImageConfig: serializeAws_json1_1KernelGatewayImageConfig(input.KernelGatewayImageConfig, context),
      }),
  };
};

const serializeAws_json1_1UpdateArtifactRequest = (input: UpdateArtifactRequest, context: __SerdeContext): any => {
  return {
    ...(input.ArtifactArn !== undefined && input.ArtifactArn !== null && { ArtifactArn: input.ArtifactArn }),
    ...(input.ArtifactName !== undefined && input.ArtifactName !== null && { ArtifactName: input.ArtifactName }),
    ...(input.Properties !== undefined &&
      input.Properties !== null && {
        Properties: serializeAws_json1_1LineageEntityParameters(input.Properties, context),
      }),
    ...(input.PropertiesToRemove !== undefined &&
      input.PropertiesToRemove !== null && {
        PropertiesToRemove: serializeAws_json1_1ListLineageEntityParameterKey(input.PropertiesToRemove, context),
      }),
  };
};

const serializeAws_json1_1UpdateCodeRepositoryInput = (
  input: UpdateCodeRepositoryInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.CodeRepositoryName !== undefined &&
      input.CodeRepositoryName !== null && { CodeRepositoryName: input.CodeRepositoryName }),
    ...(input.GitConfig !== undefined &&
      input.GitConfig !== null && { GitConfig: serializeAws_json1_1GitConfigForUpdate(input.GitConfig, context) }),
  };
};

const serializeAws_json1_1UpdateContextRequest = (input: UpdateContextRequest, context: __SerdeContext): any => {
  return {
    ...(input.ContextName !== undefined && input.ContextName !== null && { ContextName: input.ContextName }),
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.Properties !== undefined &&
      input.Properties !== null && {
        Properties: serializeAws_json1_1LineageEntityParameters(input.Properties, context),
      }),
    ...(input.PropertiesToRemove !== undefined &&
      input.PropertiesToRemove !== null && {
        PropertiesToRemove: serializeAws_json1_1ListLineageEntityParameterKey(input.PropertiesToRemove, context),
      }),
  };
};

const serializeAws_json1_1UpdateDeviceFleetRequest = (
  input: UpdateDeviceFleetRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.DeviceFleetName !== undefined &&
      input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
    ...(input.OutputConfig !== undefined &&
      input.OutputConfig !== null && {
        OutputConfig: serializeAws_json1_1EdgeOutputConfig(input.OutputConfig, context),
      }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
  };
};

const serializeAws_json1_1UpdateDevicesRequest = (input: UpdateDevicesRequest, context: __SerdeContext): any => {
  return {
    ...(input.DeviceFleetName !== undefined &&
      input.DeviceFleetName !== null && { DeviceFleetName: input.DeviceFleetName }),
    ...(input.Devices !== undefined &&
      input.Devices !== null && { Devices: serializeAws_json1_1Devices(input.Devices, context) }),
  };
};

const serializeAws_json1_1UpdateDomainRequest = (input: UpdateDomainRequest, context: __SerdeContext): any => {
  return {
    ...(input.DefaultUserSettings !== undefined &&
      input.DefaultUserSettings !== null && {
        DefaultUserSettings: serializeAws_json1_1UserSettings(input.DefaultUserSettings, context),
      }),
    ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
  };
};

const serializeAws_json1_1UpdateEndpointInput = (input: UpdateEndpointInput, context: __SerdeContext): any => {
  return {
    ...(input.DeploymentConfig !== undefined &&
      input.DeploymentConfig !== null && {
        DeploymentConfig: serializeAws_json1_1DeploymentConfig(input.DeploymentConfig, context),
      }),
    ...(input.EndpointConfigName !== undefined &&
      input.EndpointConfigName !== null && { EndpointConfigName: input.EndpointConfigName }),
    ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
    ...(input.ExcludeRetainedVariantProperties !== undefined &&
      input.ExcludeRetainedVariantProperties !== null && {
        ExcludeRetainedVariantProperties: serializeAws_json1_1VariantPropertyList(
          input.ExcludeRetainedVariantProperties,
          context
        ),
      }),
    ...(input.RetainAllVariantProperties !== undefined &&
      input.RetainAllVariantProperties !== null && { RetainAllVariantProperties: input.RetainAllVariantProperties }),
  };
};

const serializeAws_json1_1UpdateEndpointWeightsAndCapacitiesInput = (
  input: UpdateEndpointWeightsAndCapacitiesInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.DesiredWeightsAndCapacities !== undefined &&
      input.DesiredWeightsAndCapacities !== null && {
        DesiredWeightsAndCapacities: serializeAws_json1_1DesiredWeightAndCapacityList(
          input.DesiredWeightsAndCapacities,
          context
        ),
      }),
    ...(input.EndpointName !== undefined && input.EndpointName !== null && { EndpointName: input.EndpointName }),
  };
};

const serializeAws_json1_1UpdateExperimentRequest = (input: UpdateExperimentRequest, context: __SerdeContext): any => {
  return {
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
    ...(input.ExperimentName !== undefined &&
      input.ExperimentName !== null && { ExperimentName: input.ExperimentName }),
  };
};

const serializeAws_json1_1UpdateImageRequest = (input: UpdateImageRequest, context: __SerdeContext): any => {
  return {
    ...(input.DeleteProperties !== undefined &&
      input.DeleteProperties !== null && {
        DeleteProperties: serializeAws_json1_1ImageDeletePropertyList(input.DeleteProperties, context),
      }),
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
    ...(input.ImageName !== undefined && input.ImageName !== null && { ImageName: input.ImageName }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
  };
};

const serializeAws_json1_1UpdateModelPackageInput = (input: UpdateModelPackageInput, context: __SerdeContext): any => {
  return {
    ...(input.ApprovalDescription !== undefined &&
      input.ApprovalDescription !== null && { ApprovalDescription: input.ApprovalDescription }),
    ...(input.ModelApprovalStatus !== undefined &&
      input.ModelApprovalStatus !== null && { ModelApprovalStatus: input.ModelApprovalStatus }),
    ...(input.ModelPackageArn !== undefined &&
      input.ModelPackageArn !== null && { ModelPackageArn: input.ModelPackageArn }),
  };
};

const serializeAws_json1_1UpdateMonitoringScheduleRequest = (
  input: UpdateMonitoringScheduleRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.MonitoringScheduleConfig !== undefined &&
      input.MonitoringScheduleConfig !== null && {
        MonitoringScheduleConfig: serializeAws_json1_1MonitoringScheduleConfig(input.MonitoringScheduleConfig, context),
      }),
    ...(input.MonitoringScheduleName !== undefined &&
      input.MonitoringScheduleName !== null && { MonitoringScheduleName: input.MonitoringScheduleName }),
  };
};

const serializeAws_json1_1UpdateNotebookInstanceInput = (
  input: UpdateNotebookInstanceInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.AcceleratorTypes !== undefined &&
      input.AcceleratorTypes !== null && {
        AcceleratorTypes: serializeAws_json1_1NotebookInstanceAcceleratorTypes(input.AcceleratorTypes, context),
      }),
    ...(input.AdditionalCodeRepositories !== undefined &&
      input.AdditionalCodeRepositories !== null && {
        AdditionalCodeRepositories: serializeAws_json1_1AdditionalCodeRepositoryNamesOrUrls(
          input.AdditionalCodeRepositories,
          context
        ),
      }),
    ...(input.DefaultCodeRepository !== undefined &&
      input.DefaultCodeRepository !== null && { DefaultCodeRepository: input.DefaultCodeRepository }),
    ...(input.DisassociateAcceleratorTypes !== undefined &&
      input.DisassociateAcceleratorTypes !== null && {
        DisassociateAcceleratorTypes: input.DisassociateAcceleratorTypes,
      }),
    ...(input.DisassociateAdditionalCodeRepositories !== undefined &&
      input.DisassociateAdditionalCodeRepositories !== null && {
        DisassociateAdditionalCodeRepositories: input.DisassociateAdditionalCodeRepositories,
      }),
    ...(input.DisassociateDefaultCodeRepository !== undefined &&
      input.DisassociateDefaultCodeRepository !== null && {
        DisassociateDefaultCodeRepository: input.DisassociateDefaultCodeRepository,
      }),
    ...(input.DisassociateLifecycleConfig !== undefined &&
      input.DisassociateLifecycleConfig !== null && { DisassociateLifecycleConfig: input.DisassociateLifecycleConfig }),
    ...(input.InstanceType !== undefined && input.InstanceType !== null && { InstanceType: input.InstanceType }),
    ...(input.LifecycleConfigName !== undefined &&
      input.LifecycleConfigName !== null && { LifecycleConfigName: input.LifecycleConfigName }),
    ...(input.NotebookInstanceName !== undefined &&
      input.NotebookInstanceName !== null && { NotebookInstanceName: input.NotebookInstanceName }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
    ...(input.RootAccess !== undefined && input.RootAccess !== null && { RootAccess: input.RootAccess }),
    ...(input.VolumeSizeInGB !== undefined &&
      input.VolumeSizeInGB !== null && { VolumeSizeInGB: input.VolumeSizeInGB }),
  };
};

const serializeAws_json1_1UpdateNotebookInstanceLifecycleConfigInput = (
  input: UpdateNotebookInstanceLifecycleConfigInput,
  context: __SerdeContext
): any => {
  return {
    ...(input.NotebookInstanceLifecycleConfigName !== undefined &&
      input.NotebookInstanceLifecycleConfigName !== null && {
        NotebookInstanceLifecycleConfigName: input.NotebookInstanceLifecycleConfigName,
      }),
    ...(input.OnCreate !== undefined &&
      input.OnCreate !== null && {
        OnCreate: serializeAws_json1_1NotebookInstanceLifecycleConfigList(input.OnCreate, context),
      }),
    ...(input.OnStart !== undefined &&
      input.OnStart !== null && {
        OnStart: serializeAws_json1_1NotebookInstanceLifecycleConfigList(input.OnStart, context),
      }),
  };
};

const serializeAws_json1_1UpdatePipelineExecutionRequest = (
  input: UpdatePipelineExecutionRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.PipelineExecutionArn !== undefined &&
      input.PipelineExecutionArn !== null && { PipelineExecutionArn: input.PipelineExecutionArn }),
    ...(input.PipelineExecutionDescription !== undefined &&
      input.PipelineExecutionDescription !== null && {
        PipelineExecutionDescription: input.PipelineExecutionDescription,
      }),
    ...(input.PipelineExecutionDisplayName !== undefined &&
      input.PipelineExecutionDisplayName !== null && {
        PipelineExecutionDisplayName: input.PipelineExecutionDisplayName,
      }),
  };
};

const serializeAws_json1_1UpdatePipelineRequest = (input: UpdatePipelineRequest, context: __SerdeContext): any => {
  return {
    ...(input.PipelineDefinition !== undefined &&
      input.PipelineDefinition !== null && { PipelineDefinition: input.PipelineDefinition }),
    ...(input.PipelineDescription !== undefined &&
      input.PipelineDescription !== null && { PipelineDescription: input.PipelineDescription }),
    ...(input.PipelineDisplayName !== undefined &&
      input.PipelineDisplayName !== null && { PipelineDisplayName: input.PipelineDisplayName }),
    ...(input.PipelineName !== undefined && input.PipelineName !== null && { PipelineName: input.PipelineName }),
    ...(input.RoleArn !== undefined && input.RoleArn !== null && { RoleArn: input.RoleArn }),
  };
};

const serializeAws_json1_1UpdateTrainingJobRequest = (
  input: UpdateTrainingJobRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.ProfilerConfig !== undefined &&
      input.ProfilerConfig !== null && {
        ProfilerConfig: serializeAws_json1_1ProfilerConfigForUpdate(input.ProfilerConfig, context),
      }),
    ...(input.ProfilerRuleConfigurations !== undefined &&
      input.ProfilerRuleConfigurations !== null && {
        ProfilerRuleConfigurations: serializeAws_json1_1ProfilerRuleConfigurations(
          input.ProfilerRuleConfigurations,
          context
        ),
      }),
    ...(input.TrainingJobName !== undefined &&
      input.TrainingJobName !== null && { TrainingJobName: input.TrainingJobName }),
  };
};

const serializeAws_json1_1UpdateTrialComponentRequest = (
  input: UpdateTrialComponentRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
    ...(input.EndTime !== undefined &&
      input.EndTime !== null && { EndTime: Math.round(input.EndTime.getTime() / 1000) }),
    ...(input.InputArtifacts !== undefined &&
      input.InputArtifacts !== null && {
        InputArtifacts: serializeAws_json1_1TrialComponentArtifacts(input.InputArtifacts, context),
      }),
    ...(input.InputArtifactsToRemove !== undefined &&
      input.InputArtifactsToRemove !== null && {
        InputArtifactsToRemove: serializeAws_json1_1ListTrialComponentKey256(input.InputArtifactsToRemove, context),
      }),
    ...(input.OutputArtifacts !== undefined &&
      input.OutputArtifacts !== null && {
        OutputArtifacts: serializeAws_json1_1TrialComponentArtifacts(input.OutputArtifacts, context),
      }),
    ...(input.OutputArtifactsToRemove !== undefined &&
      input.OutputArtifactsToRemove !== null && {
        OutputArtifactsToRemove: serializeAws_json1_1ListTrialComponentKey256(input.OutputArtifactsToRemove, context),
      }),
    ...(input.Parameters !== undefined &&
      input.Parameters !== null && {
        Parameters: serializeAws_json1_1TrialComponentParameters(input.Parameters, context),
      }),
    ...(input.ParametersToRemove !== undefined &&
      input.ParametersToRemove !== null && {
        ParametersToRemove: serializeAws_json1_1ListTrialComponentKey256(input.ParametersToRemove, context),
      }),
    ...(input.StartTime !== undefined &&
      input.StartTime !== null && { StartTime: Math.round(input.StartTime.getTime() / 1000) }),
    ...(input.Status !== undefined &&
      input.Status !== null && { Status: serializeAws_json1_1TrialComponentStatus(input.Status, context) }),
    ...(input.TrialComponentName !== undefined &&
      input.TrialComponentName !== null && { TrialComponentName: input.TrialComponentName }),
  };
};

const serializeAws_json1_1UpdateTrialRequest = (input: UpdateTrialRequest, context: __SerdeContext): any => {
  return {
    ...(input.DisplayName !== undefined && input.DisplayName !== null && { DisplayName: input.DisplayName }),
    ...(input.TrialName !== undefined && input.TrialName !== null && { TrialName: input.TrialName }),
  };
};

const serializeAws_json1_1UpdateUserProfileRequest = (
  input: UpdateUserProfileRequest,
  context: __SerdeContext
): any => {
  return {
    ...(input.DomainId !== undefined && input.DomainId !== null && { DomainId: input.DomainId }),
    ...(input.UserProfileName !== undefined &&
      input.UserProfileName !== null && { UserProfileName: input.UserProfileName }),
    ...(input.UserSettings !== undefined &&
      input.UserSettings !== null && { UserSettings: serializeAws_json1_1UserSettings(input.UserSettings, context) }),
  };
};

const serializeAws_json1_1UpdateWorkforceRequest = (input: UpdateWorkforceRequest, context: __SerdeContext): any => {
  return {
    ...(input.OidcConfig !== undefined &&
      input.OidcConfig !== null && { OidcConfig: serializeAws_json1_1OidcConfig(input.OidcConfig, context) }),
    ...(input.SourceIpConfig !== undefined &&
      input.SourceIpConfig !== null && {
        SourceIpConfig: serializeAws_json1_1SourceIpConfig(input.SourceIpConfig, context),
      }),
    ...(input.WorkforceName !== undefined && input.WorkforceName !== null && { WorkforceName: input.WorkforceName }),
  };
};

const serializeAws_json1_1UpdateWorkteamRequest = (input: UpdateWorkteamRequest, context: __SerdeContext): any => {
  return {
    ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
    ...(input.MemberDefinitions !== undefined &&
      input.MemberDefinitions !== null && {
        MemberDefinitions: serializeAws_json1_1MemberDefinitions(input.MemberDefinitions, context),
      }),
    ...(input.NotificationConfiguration !== undefined &&
      input.NotificationConfiguration !== null && {
        NotificationConfiguration: serializeAws_json1_1NotificationConfiguration(
          input.NotificationConfiguration,
          context
        ),
      }),
    ...(input.WorkteamName !== undefined && input.WorkteamName !== null && { WorkteamName: input.WorkteamName }),
  };
};

const serializeAws_json1_1USD = (input: USD, context: __SerdeContext): any => {
  return {
    ...(input.Cents !== undefined && input.Cents !== null && { Cents: input.Cents }),
    ...(input.Dollars !== undefined && input.Dollars !== null && { Dollars: input.Dollars }),
    ...(input.TenthFractionsOfACent !== undefined &&
      input.TenthFractionsOfACent !== null && { TenthFractionsOfACent: input.TenthFractionsOfACent }),
  };
};

const serializeAws_json1_1UserSettings = (input: UserSettings, context: __SerdeContext): any => {
  return {
    ...(input.ExecutionRole !== undefined && input.ExecutionRole !== null && { ExecutionRole: input.ExecutionRole }),
    ...(input.JupyterServerAppSettings !== undefined &&
      input.JupyterServerAppSettings !== null && {
        JupyterServerAppSettings: serializeAws_json1_1JupyterServerAppSettings(input.JupyterServerAppSettings, context),
      }),
    ...(input.KernelGatewayAppSettings !== undefined &&
      input.KernelGatewayAppSettings !== null && {
        KernelGatewayAppSettings: serializeAws_json1_1KernelGatewayAppSettings(input.KernelGatewayAppSettings, context),
      }),
    ...(input.SecurityGroups !== undefined &&
      input.SecurityGroups !== null && {
        SecurityGroups: serializeAws_json1_1SecurityGroupIds(input.SecurityGroups, context),
      }),
    ...(input.SharingSettings !== undefined &&
      input.SharingSettings !== null && {
        SharingSettings: serializeAws_json1_1SharingSettings(input.SharingSettings, context),
      }),
    ...(input.TensorBoardAppSettings !== undefined &&
      input.TensorBoardAppSettings !== null && {
        TensorBoardAppSettings: serializeAws_json1_1TensorBoardAppSettings(input.TensorBoardAppSettings, context),
      }),
  };
};

const serializeAws_json1_1VariantProperty = (input: VariantProperty, context: __SerdeContext): any => {
  return {
    ...(input.VariantPropertyType !== undefined &&
      input.VariantPropertyType !== null && { VariantPropertyType: input.VariantPropertyType }),
  };
};

const serializeAws_json1_1VariantPropertyList = (input: VariantProperty[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return serializeAws_json1_1VariantProperty(entry, context);
    });
};

const serializeAws_json1_1VpcConfig = (input: VpcConfig, context: __SerdeContext): any => {
  return {
    ...(input.SecurityGroupIds !== undefined &&
      input.SecurityGroupIds !== null && {
        SecurityGroupIds: serializeAws_json1_1VpcSecurityGroupIds(input.SecurityGroupIds, context),
      }),
    ...(input.Subnets !== undefined &&
      input.Subnets !== null && { Subnets: serializeAws_json1_1Subnets(input.Subnets, context) }),
  };
};

const serializeAws_json1_1VpcSecurityGroupIds = (input: string[], context: __SerdeContext): any => {
  return input
    .filter((e: any) => e != null)
    .map((entry) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1ActionSource = (output: any, context: __SerdeContext): ActionSource => {
  return {
    SourceId: output.SourceId !== undefined && output.SourceId !== null ? output.SourceId : undefined,
    SourceType: output.SourceType !== undefined && output.SourceType !== null ? output.SourceType : undefined,
    SourceUri: output.SourceUri !== undefined && output.SourceUri !== null ? output.SourceUri : undefined,
  } as any;
};

const deserializeAws_json1_1ActionSummaries = (output: any, context: __SerdeContext): ActionSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ActionSummary(entry, context);
    });
};

const deserializeAws_json1_1ActionSummary = (output: any, context: __SerdeContext): ActionSummary => {
  return {
    ActionArn: output.ActionArn !== undefined && output.ActionArn !== null ? output.ActionArn : undefined,
    ActionName: output.ActionName !== undefined && output.ActionName !== null ? output.ActionName : undefined,
    ActionType: output.ActionType !== undefined && output.ActionType !== null ? output.ActionType : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    Source:
      output.Source !== undefined && output.Source !== null
        ? deserializeAws_json1_1ActionSource(output.Source, context)
        : undefined,
    Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
  } as any;
};

const deserializeAws_json1_1AddAssociationResponse = (output: any, context: __SerdeContext): AddAssociationResponse => {
  return {
    DestinationArn:
      output.DestinationArn !== undefined && output.DestinationArn !== null ? output.DestinationArn : undefined,
    SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
  } as any;
};

const deserializeAws_json1_1AdditionalCodeRepositoryNamesOrUrls = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1AddTagsOutput = (output: any, context: __SerdeContext): AddTagsOutput => {
  return {
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1AgentVersion = (output: any, context: __SerdeContext): AgentVersion => {
  return {
    AgentCount: output.AgentCount !== undefined && output.AgentCount !== null ? output.AgentCount : undefined,
    Version: output.Version !== undefined && output.Version !== null ? output.Version : undefined,
  } as any;
};

const deserializeAws_json1_1AgentVersions = (output: any, context: __SerdeContext): AgentVersion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1AgentVersion(entry, context);
    });
};

const deserializeAws_json1_1Alarm = (output: any, context: __SerdeContext): Alarm => {
  return {
    AlarmName: output.AlarmName !== undefined && output.AlarmName !== null ? output.AlarmName : undefined,
  } as any;
};

const deserializeAws_json1_1AlarmList = (output: any, context: __SerdeContext): Alarm[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1Alarm(entry, context);
    });
};

const deserializeAws_json1_1AlgorithmSpecification = (output: any, context: __SerdeContext): AlgorithmSpecification => {
  return {
    AlgorithmName:
      output.AlgorithmName !== undefined && output.AlgorithmName !== null ? output.AlgorithmName : undefined,
    EnableSageMakerMetricsTimeSeries:
      output.EnableSageMakerMetricsTimeSeries !== undefined && output.EnableSageMakerMetricsTimeSeries !== null
        ? output.EnableSageMakerMetricsTimeSeries
        : undefined,
    MetricDefinitions:
      output.MetricDefinitions !== undefined && output.MetricDefinitions !== null
        ? deserializeAws_json1_1MetricDefinitionList(output.MetricDefinitions, context)
        : undefined,
    TrainingImage:
      output.TrainingImage !== undefined && output.TrainingImage !== null ? output.TrainingImage : undefined,
    TrainingInputMode:
      output.TrainingInputMode !== undefined && output.TrainingInputMode !== null
        ? output.TrainingInputMode
        : undefined,
  } as any;
};

const deserializeAws_json1_1AlgorithmStatusDetails = (output: any, context: __SerdeContext): AlgorithmStatusDetails => {
  return {
    ImageScanStatuses:
      output.ImageScanStatuses !== undefined && output.ImageScanStatuses !== null
        ? deserializeAws_json1_1AlgorithmStatusItemList(output.ImageScanStatuses, context)
        : undefined,
    ValidationStatuses:
      output.ValidationStatuses !== undefined && output.ValidationStatuses !== null
        ? deserializeAws_json1_1AlgorithmStatusItemList(output.ValidationStatuses, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1AlgorithmStatusItem = (output: any, context: __SerdeContext): AlgorithmStatusItem => {
  return {
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
    Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
  } as any;
};

const deserializeAws_json1_1AlgorithmStatusItemList = (output: any, context: __SerdeContext): AlgorithmStatusItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1AlgorithmStatusItem(entry, context);
    });
};

const deserializeAws_json1_1AlgorithmSummary = (output: any, context: __SerdeContext): AlgorithmSummary => {
  return {
    AlgorithmArn: output.AlgorithmArn !== undefined && output.AlgorithmArn !== null ? output.AlgorithmArn : undefined,
    AlgorithmDescription:
      output.AlgorithmDescription !== undefined && output.AlgorithmDescription !== null
        ? output.AlgorithmDescription
        : undefined,
    AlgorithmName:
      output.AlgorithmName !== undefined && output.AlgorithmName !== null ? output.AlgorithmName : undefined,
    AlgorithmStatus:
      output.AlgorithmStatus !== undefined && output.AlgorithmStatus !== null ? output.AlgorithmStatus : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1AlgorithmSummaryList = (output: any, context: __SerdeContext): AlgorithmSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1AlgorithmSummary(entry, context);
    });
};

const deserializeAws_json1_1AlgorithmValidationProfile = (
  output: any,
  context: __SerdeContext
): AlgorithmValidationProfile => {
  return {
    ProfileName: output.ProfileName !== undefined && output.ProfileName !== null ? output.ProfileName : undefined,
    TrainingJobDefinition:
      output.TrainingJobDefinition !== undefined && output.TrainingJobDefinition !== null
        ? deserializeAws_json1_1TrainingJobDefinition(output.TrainingJobDefinition, context)
        : undefined,
    TransformJobDefinition:
      output.TransformJobDefinition !== undefined && output.TransformJobDefinition !== null
        ? deserializeAws_json1_1TransformJobDefinition(output.TransformJobDefinition, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1AlgorithmValidationProfiles = (
  output: any,
  context: __SerdeContext
): AlgorithmValidationProfile[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1AlgorithmValidationProfile(entry, context);
    });
};

const deserializeAws_json1_1AlgorithmValidationSpecification = (
  output: any,
  context: __SerdeContext
): AlgorithmValidationSpecification => {
  return {
    ValidationProfiles:
      output.ValidationProfiles !== undefined && output.ValidationProfiles !== null
        ? deserializeAws_json1_1AlgorithmValidationProfiles(output.ValidationProfiles, context)
        : undefined,
    ValidationRole:
      output.ValidationRole !== undefined && output.ValidationRole !== null ? output.ValidationRole : undefined,
  } as any;
};

const deserializeAws_json1_1AnnotationConsolidationConfig = (
  output: any,
  context: __SerdeContext
): AnnotationConsolidationConfig => {
  return {
    AnnotationConsolidationLambdaArn:
      output.AnnotationConsolidationLambdaArn !== undefined && output.AnnotationConsolidationLambdaArn !== null
        ? output.AnnotationConsolidationLambdaArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1AppDetails = (output: any, context: __SerdeContext): AppDetails => {
  return {
    AppName: output.AppName !== undefined && output.AppName !== null ? output.AppName : undefined,
    AppType: output.AppType !== undefined && output.AppType !== null ? output.AppType : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
    Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
    UserProfileName:
      output.UserProfileName !== undefined && output.UserProfileName !== null ? output.UserProfileName : undefined,
  } as any;
};

const deserializeAws_json1_1AppImageConfigDetails = (output: any, context: __SerdeContext): AppImageConfigDetails => {
  return {
    AppImageConfigArn:
      output.AppImageConfigArn !== undefined && output.AppImageConfigArn !== null
        ? output.AppImageConfigArn
        : undefined,
    AppImageConfigName:
      output.AppImageConfigName !== undefined && output.AppImageConfigName !== null
        ? output.AppImageConfigName
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    KernelGatewayImageConfig:
      output.KernelGatewayImageConfig !== undefined && output.KernelGatewayImageConfig !== null
        ? deserializeAws_json1_1KernelGatewayImageConfig(output.KernelGatewayImageConfig, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1AppImageConfigList = (output: any, context: __SerdeContext): AppImageConfigDetails[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1AppImageConfigDetails(entry, context);
    });
};

const deserializeAws_json1_1AppList = (output: any, context: __SerdeContext): AppDetails[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1AppDetails(entry, context);
    });
};

const deserializeAws_json1_1AppSpecification = (output: any, context: __SerdeContext): AppSpecification => {
  return {
    ContainerArguments:
      output.ContainerArguments !== undefined && output.ContainerArguments !== null
        ? deserializeAws_json1_1ContainerArguments(output.ContainerArguments, context)
        : undefined,
    ContainerEntrypoint:
      output.ContainerEntrypoint !== undefined && output.ContainerEntrypoint !== null
        ? deserializeAws_json1_1ContainerEntrypoint(output.ContainerEntrypoint, context)
        : undefined,
    ImageUri: output.ImageUri !== undefined && output.ImageUri !== null ? output.ImageUri : undefined,
  } as any;
};

const deserializeAws_json1_1ArtifactSource = (output: any, context: __SerdeContext): ArtifactSource => {
  return {
    SourceTypes:
      output.SourceTypes !== undefined && output.SourceTypes !== null
        ? deserializeAws_json1_1ArtifactSourceTypes(output.SourceTypes, context)
        : undefined,
    SourceUri: output.SourceUri !== undefined && output.SourceUri !== null ? output.SourceUri : undefined,
  } as any;
};

const deserializeAws_json1_1ArtifactSourceType = (output: any, context: __SerdeContext): ArtifactSourceType => {
  return {
    SourceIdType: output.SourceIdType !== undefined && output.SourceIdType !== null ? output.SourceIdType : undefined,
    Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
  } as any;
};

const deserializeAws_json1_1ArtifactSourceTypes = (output: any, context: __SerdeContext): ArtifactSourceType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ArtifactSourceType(entry, context);
    });
};

const deserializeAws_json1_1ArtifactSummaries = (output: any, context: __SerdeContext): ArtifactSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ArtifactSummary(entry, context);
    });
};

const deserializeAws_json1_1ArtifactSummary = (output: any, context: __SerdeContext): ArtifactSummary => {
  return {
    ArtifactArn: output.ArtifactArn !== undefined && output.ArtifactArn !== null ? output.ArtifactArn : undefined,
    ArtifactName: output.ArtifactName !== undefined && output.ArtifactName !== null ? output.ArtifactName : undefined,
    ArtifactType: output.ArtifactType !== undefined && output.ArtifactType !== null ? output.ArtifactType : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    Source:
      output.Source !== undefined && output.Source !== null
        ? deserializeAws_json1_1ArtifactSource(output.Source, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1AssociateTrialComponentResponse = (
  output: any,
  context: __SerdeContext
): AssociateTrialComponentResponse => {
  return {
    TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
    TrialComponentArn:
      output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
        ? output.TrialComponentArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1AssociationSummaries = (output: any, context: __SerdeContext): AssociationSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1AssociationSummary(entry, context);
    });
};

const deserializeAws_json1_1AssociationSummary = (output: any, context: __SerdeContext): AssociationSummary => {
  return {
    AssociationType:
      output.AssociationType !== undefined && output.AssociationType !== null ? output.AssociationType : undefined,
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DestinationArn:
      output.DestinationArn !== undefined && output.DestinationArn !== null ? output.DestinationArn : undefined,
    DestinationName:
      output.DestinationName !== undefined && output.DestinationName !== null ? output.DestinationName : undefined,
    DestinationType:
      output.DestinationType !== undefined && output.DestinationType !== null ? output.DestinationType : undefined,
    SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
    SourceName: output.SourceName !== undefined && output.SourceName !== null ? output.SourceName : undefined,
    SourceType: output.SourceType !== undefined && output.SourceType !== null ? output.SourceType : undefined,
  } as any;
};

const deserializeAws_json1_1AthenaDatasetDefinition = (
  output: any,
  context: __SerdeContext
): AthenaDatasetDefinition => {
  return {
    Catalog: output.Catalog !== undefined && output.Catalog !== null ? output.Catalog : undefined,
    Database: output.Database !== undefined && output.Database !== null ? output.Database : undefined,
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    OutputCompression:
      output.OutputCompression !== undefined && output.OutputCompression !== null
        ? output.OutputCompression
        : undefined,
    OutputFormat: output.OutputFormat !== undefined && output.OutputFormat !== null ? output.OutputFormat : undefined,
    OutputS3Uri: output.OutputS3Uri !== undefined && output.OutputS3Uri !== null ? output.OutputS3Uri : undefined,
    QueryString: output.QueryString !== undefined && output.QueryString !== null ? output.QueryString : undefined,
    WorkGroup: output.WorkGroup !== undefined && output.WorkGroup !== null ? output.WorkGroup : undefined,
  } as any;
};

const deserializeAws_json1_1AttributeNames = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1AutoMLCandidate = (output: any, context: __SerdeContext): AutoMLCandidate => {
  return {
    CandidateName:
      output.CandidateName !== undefined && output.CandidateName !== null ? output.CandidateName : undefined,
    CandidateProperties:
      output.CandidateProperties !== undefined && output.CandidateProperties !== null
        ? deserializeAws_json1_1CandidateProperties(output.CandidateProperties, context)
        : undefined,
    CandidateStatus:
      output.CandidateStatus !== undefined && output.CandidateStatus !== null ? output.CandidateStatus : undefined,
    CandidateSteps:
      output.CandidateSteps !== undefined && output.CandidateSteps !== null
        ? deserializeAws_json1_1CandidateSteps(output.CandidateSteps, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    EndTime:
      output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    FinalAutoMLJobObjectiveMetric:
      output.FinalAutoMLJobObjectiveMetric !== undefined && output.FinalAutoMLJobObjectiveMetric !== null
        ? deserializeAws_json1_1FinalAutoMLJobObjectiveMetric(output.FinalAutoMLJobObjectiveMetric, context)
        : undefined,
    InferenceContainers:
      output.InferenceContainers !== undefined && output.InferenceContainers !== null
        ? deserializeAws_json1_1AutoMLContainerDefinitions(output.InferenceContainers, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    ObjectiveStatus:
      output.ObjectiveStatus !== undefined && output.ObjectiveStatus !== null ? output.ObjectiveStatus : undefined,
  } as any;
};

const deserializeAws_json1_1AutoMLCandidates = (output: any, context: __SerdeContext): AutoMLCandidate[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1AutoMLCandidate(entry, context);
    });
};

const deserializeAws_json1_1AutoMLCandidateStep = (output: any, context: __SerdeContext): AutoMLCandidateStep => {
  return {
    CandidateStepArn:
      output.CandidateStepArn !== undefined && output.CandidateStepArn !== null ? output.CandidateStepArn : undefined,
    CandidateStepName:
      output.CandidateStepName !== undefined && output.CandidateStepName !== null
        ? output.CandidateStepName
        : undefined,
    CandidateStepType:
      output.CandidateStepType !== undefined && output.CandidateStepType !== null
        ? output.CandidateStepType
        : undefined,
  } as any;
};

const deserializeAws_json1_1AutoMLChannel = (output: any, context: __SerdeContext): AutoMLChannel => {
  return {
    CompressionType:
      output.CompressionType !== undefined && output.CompressionType !== null ? output.CompressionType : undefined,
    DataSource:
      output.DataSource !== undefined && output.DataSource !== null
        ? deserializeAws_json1_1AutoMLDataSource(output.DataSource, context)
        : undefined,
    TargetAttributeName:
      output.TargetAttributeName !== undefined && output.TargetAttributeName !== null
        ? output.TargetAttributeName
        : undefined,
  } as any;
};

const deserializeAws_json1_1AutoMLContainerDefinition = (
  output: any,
  context: __SerdeContext
): AutoMLContainerDefinition => {
  return {
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1EnvironmentMap(output.Environment, context)
        : undefined,
    Image: output.Image !== undefined && output.Image !== null ? output.Image : undefined,
    ModelDataUrl: output.ModelDataUrl !== undefined && output.ModelDataUrl !== null ? output.ModelDataUrl : undefined,
  } as any;
};

const deserializeAws_json1_1AutoMLContainerDefinitions = (
  output: any,
  context: __SerdeContext
): AutoMLContainerDefinition[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1AutoMLContainerDefinition(entry, context);
    });
};

const deserializeAws_json1_1AutoMLDataSource = (output: any, context: __SerdeContext): AutoMLDataSource => {
  return {
    S3DataSource:
      output.S3DataSource !== undefined && output.S3DataSource !== null
        ? deserializeAws_json1_1AutoMLS3DataSource(output.S3DataSource, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1AutoMLInputDataConfig = (output: any, context: __SerdeContext): AutoMLChannel[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1AutoMLChannel(entry, context);
    });
};

const deserializeAws_json1_1AutoMLJobArtifacts = (output: any, context: __SerdeContext): AutoMLJobArtifacts => {
  return {
    CandidateDefinitionNotebookLocation:
      output.CandidateDefinitionNotebookLocation !== undefined && output.CandidateDefinitionNotebookLocation !== null
        ? output.CandidateDefinitionNotebookLocation
        : undefined,
    DataExplorationNotebookLocation:
      output.DataExplorationNotebookLocation !== undefined && output.DataExplorationNotebookLocation !== null
        ? output.DataExplorationNotebookLocation
        : undefined,
  } as any;
};

const deserializeAws_json1_1AutoMLJobCompletionCriteria = (
  output: any,
  context: __SerdeContext
): AutoMLJobCompletionCriteria => {
  return {
    MaxAutoMLJobRuntimeInSeconds:
      output.MaxAutoMLJobRuntimeInSeconds !== undefined && output.MaxAutoMLJobRuntimeInSeconds !== null
        ? output.MaxAutoMLJobRuntimeInSeconds
        : undefined,
    MaxCandidates:
      output.MaxCandidates !== undefined && output.MaxCandidates !== null ? output.MaxCandidates : undefined,
    MaxRuntimePerTrainingJobInSeconds:
      output.MaxRuntimePerTrainingJobInSeconds !== undefined && output.MaxRuntimePerTrainingJobInSeconds !== null
        ? output.MaxRuntimePerTrainingJobInSeconds
        : undefined,
  } as any;
};

const deserializeAws_json1_1AutoMLJobConfig = (output: any, context: __SerdeContext): AutoMLJobConfig => {
  return {
    CompletionCriteria:
      output.CompletionCriteria !== undefined && output.CompletionCriteria !== null
        ? deserializeAws_json1_1AutoMLJobCompletionCriteria(output.CompletionCriteria, context)
        : undefined,
    SecurityConfig:
      output.SecurityConfig !== undefined && output.SecurityConfig !== null
        ? deserializeAws_json1_1AutoMLSecurityConfig(output.SecurityConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1AutoMLJobObjective = (output: any, context: __SerdeContext): AutoMLJobObjective => {
  return {
    MetricName: output.MetricName !== undefined && output.MetricName !== null ? output.MetricName : undefined,
  } as any;
};

const deserializeAws_json1_1AutoMLJobSummaries = (output: any, context: __SerdeContext): AutoMLJobSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1AutoMLJobSummary(entry, context);
    });
};

const deserializeAws_json1_1AutoMLJobSummary = (output: any, context: __SerdeContext): AutoMLJobSummary => {
  return {
    AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
    AutoMLJobName:
      output.AutoMLJobName !== undefined && output.AutoMLJobName !== null ? output.AutoMLJobName : undefined,
    AutoMLJobSecondaryStatus:
      output.AutoMLJobSecondaryStatus !== undefined && output.AutoMLJobSecondaryStatus !== null
        ? output.AutoMLJobSecondaryStatus
        : undefined,
    AutoMLJobStatus:
      output.AutoMLJobStatus !== undefined && output.AutoMLJobStatus !== null ? output.AutoMLJobStatus : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    EndTime:
      output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    PartialFailureReasons:
      output.PartialFailureReasons !== undefined && output.PartialFailureReasons !== null
        ? deserializeAws_json1_1AutoMLPartialFailureReasons(output.PartialFailureReasons, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1AutoMLOutputDataConfig = (output: any, context: __SerdeContext): AutoMLOutputDataConfig => {
  return {
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
  } as any;
};

const deserializeAws_json1_1AutoMLPartialFailureReason = (
  output: any,
  context: __SerdeContext
): AutoMLPartialFailureReason => {
  return {
    PartialFailureMessage:
      output.PartialFailureMessage !== undefined && output.PartialFailureMessage !== null
        ? output.PartialFailureMessage
        : undefined,
  } as any;
};

const deserializeAws_json1_1AutoMLPartialFailureReasons = (
  output: any,
  context: __SerdeContext
): AutoMLPartialFailureReason[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1AutoMLPartialFailureReason(entry, context);
    });
};

const deserializeAws_json1_1AutoMLS3DataSource = (output: any, context: __SerdeContext): AutoMLS3DataSource => {
  return {
    S3DataType: output.S3DataType !== undefined && output.S3DataType !== null ? output.S3DataType : undefined,
    S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1AutoMLSecurityConfig = (output: any, context: __SerdeContext): AutoMLSecurityConfig => {
  return {
    EnableInterContainerTrafficEncryption:
      output.EnableInterContainerTrafficEncryption !== undefined &&
      output.EnableInterContainerTrafficEncryption !== null
        ? output.EnableInterContainerTrafficEncryption
        : undefined,
    VolumeKmsKeyId:
      output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null ? output.VolumeKmsKeyId : undefined,
    VpcConfig:
      output.VpcConfig !== undefined && output.VpcConfig !== null
        ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1AutoRollbackConfig = (output: any, context: __SerdeContext): AutoRollbackConfig => {
  return {
    Alarms:
      output.Alarms !== undefined && output.Alarms !== null
        ? deserializeAws_json1_1AlarmList(output.Alarms, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1Bias = (output: any, context: __SerdeContext): Bias => {
  return {
    Report:
      output.Report !== undefined && output.Report !== null
        ? deserializeAws_json1_1MetricsSource(output.Report, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1BlueGreenUpdatePolicy = (output: any, context: __SerdeContext): BlueGreenUpdatePolicy => {
  return {
    MaximumExecutionTimeoutInSeconds:
      output.MaximumExecutionTimeoutInSeconds !== undefined && output.MaximumExecutionTimeoutInSeconds !== null
        ? output.MaximumExecutionTimeoutInSeconds
        : undefined,
    TerminationWaitInSeconds:
      output.TerminationWaitInSeconds !== undefined && output.TerminationWaitInSeconds !== null
        ? output.TerminationWaitInSeconds
        : undefined,
    TrafficRoutingConfiguration:
      output.TrafficRoutingConfiguration !== undefined && output.TrafficRoutingConfiguration !== null
        ? deserializeAws_json1_1TrafficRoutingConfig(output.TrafficRoutingConfiguration, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1CacheHitResult = (output: any, context: __SerdeContext): CacheHitResult => {
  return {
    SourcePipelineExecutionArn:
      output.SourcePipelineExecutionArn !== undefined && output.SourcePipelineExecutionArn !== null
        ? output.SourcePipelineExecutionArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1CandidateArtifactLocations = (
  output: any,
  context: __SerdeContext
): CandidateArtifactLocations => {
  return {
    Explainability:
      output.Explainability !== undefined && output.Explainability !== null ? output.Explainability : undefined,
  } as any;
};

const deserializeAws_json1_1CandidateProperties = (output: any, context: __SerdeContext): CandidateProperties => {
  return {
    CandidateArtifactLocations:
      output.CandidateArtifactLocations !== undefined && output.CandidateArtifactLocations !== null
        ? deserializeAws_json1_1CandidateArtifactLocations(output.CandidateArtifactLocations, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1CandidateSteps = (output: any, context: __SerdeContext): AutoMLCandidateStep[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1AutoMLCandidateStep(entry, context);
    });
};

const deserializeAws_json1_1CapacitySize = (output: any, context: __SerdeContext): CapacitySize => {
  return {
    Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined,
    Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
  } as any;
};

const deserializeAws_json1_1CaptureContentTypeHeader = (
  output: any,
  context: __SerdeContext
): CaptureContentTypeHeader => {
  return {
    CsvContentTypes:
      output.CsvContentTypes !== undefined && output.CsvContentTypes !== null
        ? deserializeAws_json1_1CsvContentTypes(output.CsvContentTypes, context)
        : undefined,
    JsonContentTypes:
      output.JsonContentTypes !== undefined && output.JsonContentTypes !== null
        ? deserializeAws_json1_1JsonContentTypes(output.JsonContentTypes, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1CaptureOption = (output: any, context: __SerdeContext): CaptureOption => {
  return {
    CaptureMode: output.CaptureMode !== undefined && output.CaptureMode !== null ? output.CaptureMode : undefined,
  } as any;
};

const deserializeAws_json1_1CaptureOptionList = (output: any, context: __SerdeContext): CaptureOption[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1CaptureOption(entry, context);
    });
};

const deserializeAws_json1_1CategoricalParameterRange = (
  output: any,
  context: __SerdeContext
): CategoricalParameterRange => {
  return {
    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
    Values:
      output.Values !== undefined && output.Values !== null
        ? deserializeAws_json1_1ParameterValues(output.Values, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1CategoricalParameterRanges = (
  output: any,
  context: __SerdeContext
): CategoricalParameterRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1CategoricalParameterRange(entry, context);
    });
};

const deserializeAws_json1_1CategoricalParameterRangeSpecification = (
  output: any,
  context: __SerdeContext
): CategoricalParameterRangeSpecification => {
  return {
    Values:
      output.Values !== undefined && output.Values !== null
        ? deserializeAws_json1_1ParameterValues(output.Values, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1Channel = (output: any, context: __SerdeContext): Channel => {
  return {
    ChannelName: output.ChannelName !== undefined && output.ChannelName !== null ? output.ChannelName : undefined,
    CompressionType:
      output.CompressionType !== undefined && output.CompressionType !== null ? output.CompressionType : undefined,
    ContentType: output.ContentType !== undefined && output.ContentType !== null ? output.ContentType : undefined,
    DataSource:
      output.DataSource !== undefined && output.DataSource !== null
        ? deserializeAws_json1_1DataSource(output.DataSource, context)
        : undefined,
    InputMode: output.InputMode !== undefined && output.InputMode !== null ? output.InputMode : undefined,
    RecordWrapperType:
      output.RecordWrapperType !== undefined && output.RecordWrapperType !== null
        ? output.RecordWrapperType
        : undefined,
    ShuffleConfig:
      output.ShuffleConfig !== undefined && output.ShuffleConfig !== null
        ? deserializeAws_json1_1ShuffleConfig(output.ShuffleConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ChannelSpecification = (output: any, context: __SerdeContext): ChannelSpecification => {
  return {
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    IsRequired: output.IsRequired !== undefined && output.IsRequired !== null ? output.IsRequired : undefined,
    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
    SupportedCompressionTypes:
      output.SupportedCompressionTypes !== undefined && output.SupportedCompressionTypes !== null
        ? deserializeAws_json1_1CompressionTypes(output.SupportedCompressionTypes, context)
        : undefined,
    SupportedContentTypes:
      output.SupportedContentTypes !== undefined && output.SupportedContentTypes !== null
        ? deserializeAws_json1_1ContentTypes(output.SupportedContentTypes, context)
        : undefined,
    SupportedInputModes:
      output.SupportedInputModes !== undefined && output.SupportedInputModes !== null
        ? deserializeAws_json1_1InputModes(output.SupportedInputModes, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ChannelSpecifications = (output: any, context: __SerdeContext): ChannelSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ChannelSpecification(entry, context);
    });
};

const deserializeAws_json1_1CheckpointConfig = (output: any, context: __SerdeContext): CheckpointConfig => {
  return {
    LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
    S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1Cidrs = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1CodeRepositorySummary = (output: any, context: __SerdeContext): CodeRepositorySummary => {
  return {
    CodeRepositoryArn:
      output.CodeRepositoryArn !== undefined && output.CodeRepositoryArn !== null
        ? output.CodeRepositoryArn
        : undefined,
    CodeRepositoryName:
      output.CodeRepositoryName !== undefined && output.CodeRepositoryName !== null
        ? output.CodeRepositoryName
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    GitConfig:
      output.GitConfig !== undefined && output.GitConfig !== null
        ? deserializeAws_json1_1GitConfig(output.GitConfig, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1CodeRepositorySummaryList = (
  output: any,
  context: __SerdeContext
): CodeRepositorySummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1CodeRepositorySummary(entry, context);
    });
};

const deserializeAws_json1_1CognitoConfig = (output: any, context: __SerdeContext): CognitoConfig => {
  return {
    ClientId: output.ClientId !== undefined && output.ClientId !== null ? output.ClientId : undefined,
    UserPool: output.UserPool !== undefined && output.UserPool !== null ? output.UserPool : undefined,
  } as any;
};

const deserializeAws_json1_1CognitoMemberDefinition = (
  output: any,
  context: __SerdeContext
): CognitoMemberDefinition => {
  return {
    ClientId: output.ClientId !== undefined && output.ClientId !== null ? output.ClientId : undefined,
    UserGroup: output.UserGroup !== undefined && output.UserGroup !== null ? output.UserGroup : undefined,
    UserPool: output.UserPool !== undefined && output.UserPool !== null ? output.UserPool : undefined,
  } as any;
};

const deserializeAws_json1_1CollectionConfiguration = (
  output: any,
  context: __SerdeContext
): CollectionConfiguration => {
  return {
    CollectionName:
      output.CollectionName !== undefined && output.CollectionName !== null ? output.CollectionName : undefined,
    CollectionParameters:
      output.CollectionParameters !== undefined && output.CollectionParameters !== null
        ? deserializeAws_json1_1CollectionParameters(output.CollectionParameters, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1CollectionConfigurations = (
  output: any,
  context: __SerdeContext
): CollectionConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1CollectionConfiguration(entry, context);
    });
};

const deserializeAws_json1_1CollectionParameters = (
  output: any,
  context: __SerdeContext
): { [key: string]: string } => {
  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const deserializeAws_json1_1CompilationJobSummaries = (
  output: any,
  context: __SerdeContext
): CompilationJobSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1CompilationJobSummary(entry, context);
    });
};

const deserializeAws_json1_1CompilationJobSummary = (output: any, context: __SerdeContext): CompilationJobSummary => {
  return {
    CompilationEndTime:
      output.CompilationEndTime !== undefined && output.CompilationEndTime !== null
        ? new Date(Math.round(output.CompilationEndTime * 1000))
        : undefined,
    CompilationJobArn:
      output.CompilationJobArn !== undefined && output.CompilationJobArn !== null
        ? output.CompilationJobArn
        : undefined,
    CompilationJobName:
      output.CompilationJobName !== undefined && output.CompilationJobName !== null
        ? output.CompilationJobName
        : undefined,
    CompilationJobStatus:
      output.CompilationJobStatus !== undefined && output.CompilationJobStatus !== null
        ? output.CompilationJobStatus
        : undefined,
    CompilationStartTime:
      output.CompilationStartTime !== undefined && output.CompilationStartTime !== null
        ? new Date(Math.round(output.CompilationStartTime * 1000))
        : undefined,
    CompilationTargetDevice:
      output.CompilationTargetDevice !== undefined && output.CompilationTargetDevice !== null
        ? output.CompilationTargetDevice
        : undefined,
    CompilationTargetPlatformAccelerator:
      output.CompilationTargetPlatformAccelerator !== undefined && output.CompilationTargetPlatformAccelerator !== null
        ? output.CompilationTargetPlatformAccelerator
        : undefined,
    CompilationTargetPlatformArch:
      output.CompilationTargetPlatformArch !== undefined && output.CompilationTargetPlatformArch !== null
        ? output.CompilationTargetPlatformArch
        : undefined,
    CompilationTargetPlatformOs:
      output.CompilationTargetPlatformOs !== undefined && output.CompilationTargetPlatformOs !== null
        ? output.CompilationTargetPlatformOs
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1CompressionTypes = (output: any, context: __SerdeContext): (CompressionType | string)[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1ConditionStepMetadata = (output: any, context: __SerdeContext): ConditionStepMetadata => {
  return {
    Outcome: output.Outcome !== undefined && output.Outcome !== null ? output.Outcome : undefined,
  } as any;
};

const deserializeAws_json1_1ConflictException = (output: any, context: __SerdeContext): ConflictException => {
  return {
    Message: output.Message !== undefined && output.Message !== null ? output.Message : undefined,
  } as any;
};

const deserializeAws_json1_1ContainerArguments = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1ContainerDefinition = (output: any, context: __SerdeContext): ContainerDefinition => {
  return {
    ContainerHostname:
      output.ContainerHostname !== undefined && output.ContainerHostname !== null
        ? output.ContainerHostname
        : undefined,
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1EnvironmentMap(output.Environment, context)
        : undefined,
    Image: output.Image !== undefined && output.Image !== null ? output.Image : undefined,
    ImageConfig:
      output.ImageConfig !== undefined && output.ImageConfig !== null
        ? deserializeAws_json1_1ImageConfig(output.ImageConfig, context)
        : undefined,
    Mode: output.Mode !== undefined && output.Mode !== null ? output.Mode : undefined,
    ModelDataUrl: output.ModelDataUrl !== undefined && output.ModelDataUrl !== null ? output.ModelDataUrl : undefined,
    ModelPackageName:
      output.ModelPackageName !== undefined && output.ModelPackageName !== null ? output.ModelPackageName : undefined,
    MultiModelConfig:
      output.MultiModelConfig !== undefined && output.MultiModelConfig !== null
        ? deserializeAws_json1_1MultiModelConfig(output.MultiModelConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ContainerDefinitionList = (output: any, context: __SerdeContext): ContainerDefinition[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ContainerDefinition(entry, context);
    });
};

const deserializeAws_json1_1ContainerEntrypoint = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1ContentClassifiers = (
  output: any,
  context: __SerdeContext
): (ContentClassifier | string)[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1ContentTypes = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1ContextSource = (output: any, context: __SerdeContext): ContextSource => {
  return {
    SourceId: output.SourceId !== undefined && output.SourceId !== null ? output.SourceId : undefined,
    SourceType: output.SourceType !== undefined && output.SourceType !== null ? output.SourceType : undefined,
    SourceUri: output.SourceUri !== undefined && output.SourceUri !== null ? output.SourceUri : undefined,
  } as any;
};

const deserializeAws_json1_1ContextSummaries = (output: any, context: __SerdeContext): ContextSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ContextSummary(entry, context);
    });
};

const deserializeAws_json1_1ContextSummary = (output: any, context: __SerdeContext): ContextSummary => {
  return {
    ContextArn: output.ContextArn !== undefined && output.ContextArn !== null ? output.ContextArn : undefined,
    ContextName: output.ContextName !== undefined && output.ContextName !== null ? output.ContextName : undefined,
    ContextType: output.ContextType !== undefined && output.ContextType !== null ? output.ContextType : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    Source:
      output.Source !== undefined && output.Source !== null
        ? deserializeAws_json1_1ContextSource(output.Source, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ContinuousParameterRange = (
  output: any,
  context: __SerdeContext
): ContinuousParameterRange => {
  return {
    MaxValue: output.MaxValue !== undefined && output.MaxValue !== null ? output.MaxValue : undefined,
    MinValue: output.MinValue !== undefined && output.MinValue !== null ? output.MinValue : undefined,
    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
    ScalingType: output.ScalingType !== undefined && output.ScalingType !== null ? output.ScalingType : undefined,
  } as any;
};

const deserializeAws_json1_1ContinuousParameterRanges = (
  output: any,
  context: __SerdeContext
): ContinuousParameterRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ContinuousParameterRange(entry, context);
    });
};

const deserializeAws_json1_1ContinuousParameterRangeSpecification = (
  output: any,
  context: __SerdeContext
): ContinuousParameterRangeSpecification => {
  return {
    MaxValue: output.MaxValue !== undefined && output.MaxValue !== null ? output.MaxValue : undefined,
    MinValue: output.MinValue !== undefined && output.MinValue !== null ? output.MinValue : undefined,
  } as any;
};

const deserializeAws_json1_1CreateActionResponse = (output: any, context: __SerdeContext): CreateActionResponse => {
  return {
    ActionArn: output.ActionArn !== undefined && output.ActionArn !== null ? output.ActionArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateAlgorithmOutput = (output: any, context: __SerdeContext): CreateAlgorithmOutput => {
  return {
    AlgorithmArn: output.AlgorithmArn !== undefined && output.AlgorithmArn !== null ? output.AlgorithmArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateAppImageConfigResponse = (
  output: any,
  context: __SerdeContext
): CreateAppImageConfigResponse => {
  return {
    AppImageConfigArn:
      output.AppImageConfigArn !== undefined && output.AppImageConfigArn !== null
        ? output.AppImageConfigArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1CreateAppResponse = (output: any, context: __SerdeContext): CreateAppResponse => {
  return {
    AppArn: output.AppArn !== undefined && output.AppArn !== null ? output.AppArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateArtifactResponse = (output: any, context: __SerdeContext): CreateArtifactResponse => {
  return {
    ArtifactArn: output.ArtifactArn !== undefined && output.ArtifactArn !== null ? output.ArtifactArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateAutoMLJobResponse = (
  output: any,
  context: __SerdeContext
): CreateAutoMLJobResponse => {
  return {
    AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateCodeRepositoryOutput = (
  output: any,
  context: __SerdeContext
): CreateCodeRepositoryOutput => {
  return {
    CodeRepositoryArn:
      output.CodeRepositoryArn !== undefined && output.CodeRepositoryArn !== null
        ? output.CodeRepositoryArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1CreateCompilationJobResponse = (
  output: any,
  context: __SerdeContext
): CreateCompilationJobResponse => {
  return {
    CompilationJobArn:
      output.CompilationJobArn !== undefined && output.CompilationJobArn !== null
        ? output.CompilationJobArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1CreateContextResponse = (output: any, context: __SerdeContext): CreateContextResponse => {
  return {
    ContextArn: output.ContextArn !== undefined && output.ContextArn !== null ? output.ContextArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateDataQualityJobDefinitionResponse = (
  output: any,
  context: __SerdeContext
): CreateDataQualityJobDefinitionResponse => {
  return {
    JobDefinitionArn:
      output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateDomainResponse = (output: any, context: __SerdeContext): CreateDomainResponse => {
  return {
    DomainArn: output.DomainArn !== undefined && output.DomainArn !== null ? output.DomainArn : undefined,
    Url: output.Url !== undefined && output.Url !== null ? output.Url : undefined,
  } as any;
};

const deserializeAws_json1_1CreateEndpointConfigOutput = (
  output: any,
  context: __SerdeContext
): CreateEndpointConfigOutput => {
  return {
    EndpointConfigArn:
      output.EndpointConfigArn !== undefined && output.EndpointConfigArn !== null
        ? output.EndpointConfigArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1CreateEndpointOutput = (output: any, context: __SerdeContext): CreateEndpointOutput => {
  return {
    EndpointArn: output.EndpointArn !== undefined && output.EndpointArn !== null ? output.EndpointArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateExperimentResponse = (
  output: any,
  context: __SerdeContext
): CreateExperimentResponse => {
  return {
    ExperimentArn:
      output.ExperimentArn !== undefined && output.ExperimentArn !== null ? output.ExperimentArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateFeatureGroupResponse = (
  output: any,
  context: __SerdeContext
): CreateFeatureGroupResponse => {
  return {
    FeatureGroupArn:
      output.FeatureGroupArn !== undefined && output.FeatureGroupArn !== null ? output.FeatureGroupArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateFlowDefinitionResponse = (
  output: any,
  context: __SerdeContext
): CreateFlowDefinitionResponse => {
  return {
    FlowDefinitionArn:
      output.FlowDefinitionArn !== undefined && output.FlowDefinitionArn !== null
        ? output.FlowDefinitionArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1CreateHumanTaskUiResponse = (
  output: any,
  context: __SerdeContext
): CreateHumanTaskUiResponse => {
  return {
    HumanTaskUiArn:
      output.HumanTaskUiArn !== undefined && output.HumanTaskUiArn !== null ? output.HumanTaskUiArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateHyperParameterTuningJobResponse = (
  output: any,
  context: __SerdeContext
): CreateHyperParameterTuningJobResponse => {
  return {
    HyperParameterTuningJobArn:
      output.HyperParameterTuningJobArn !== undefined && output.HyperParameterTuningJobArn !== null
        ? output.HyperParameterTuningJobArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1CreateImageResponse = (output: any, context: __SerdeContext): CreateImageResponse => {
  return {
    ImageArn: output.ImageArn !== undefined && output.ImageArn !== null ? output.ImageArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateImageVersionResponse = (
  output: any,
  context: __SerdeContext
): CreateImageVersionResponse => {
  return {
    ImageVersionArn:
      output.ImageVersionArn !== undefined && output.ImageVersionArn !== null ? output.ImageVersionArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateLabelingJobResponse = (
  output: any,
  context: __SerdeContext
): CreateLabelingJobResponse => {
  return {
    LabelingJobArn:
      output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateModelBiasJobDefinitionResponse = (
  output: any,
  context: __SerdeContext
): CreateModelBiasJobDefinitionResponse => {
  return {
    JobDefinitionArn:
      output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateModelExplainabilityJobDefinitionResponse = (
  output: any,
  context: __SerdeContext
): CreateModelExplainabilityJobDefinitionResponse => {
  return {
    JobDefinitionArn:
      output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateModelOutput = (output: any, context: __SerdeContext): CreateModelOutput => {
  return {
    ModelArn: output.ModelArn !== undefined && output.ModelArn !== null ? output.ModelArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateModelPackageGroupOutput = (
  output: any,
  context: __SerdeContext
): CreateModelPackageGroupOutput => {
  return {
    ModelPackageGroupArn:
      output.ModelPackageGroupArn !== undefined && output.ModelPackageGroupArn !== null
        ? output.ModelPackageGroupArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1CreateModelPackageOutput = (
  output: any,
  context: __SerdeContext
): CreateModelPackageOutput => {
  return {
    ModelPackageArn:
      output.ModelPackageArn !== undefined && output.ModelPackageArn !== null ? output.ModelPackageArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateModelQualityJobDefinitionResponse = (
  output: any,
  context: __SerdeContext
): CreateModelQualityJobDefinitionResponse => {
  return {
    JobDefinitionArn:
      output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateMonitoringScheduleResponse = (
  output: any,
  context: __SerdeContext
): CreateMonitoringScheduleResponse => {
  return {
    MonitoringScheduleArn:
      output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
        ? output.MonitoringScheduleArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1CreateNotebookInstanceLifecycleConfigOutput = (
  output: any,
  context: __SerdeContext
): CreateNotebookInstanceLifecycleConfigOutput => {
  return {
    NotebookInstanceLifecycleConfigArn:
      output.NotebookInstanceLifecycleConfigArn !== undefined && output.NotebookInstanceLifecycleConfigArn !== null
        ? output.NotebookInstanceLifecycleConfigArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1CreateNotebookInstanceOutput = (
  output: any,
  context: __SerdeContext
): CreateNotebookInstanceOutput => {
  return {
    NotebookInstanceArn:
      output.NotebookInstanceArn !== undefined && output.NotebookInstanceArn !== null
        ? output.NotebookInstanceArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1CreatePipelineResponse = (output: any, context: __SerdeContext): CreatePipelineResponse => {
  return {
    PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreatePresignedDomainUrlResponse = (
  output: any,
  context: __SerdeContext
): CreatePresignedDomainUrlResponse => {
  return {
    AuthorizedUrl:
      output.AuthorizedUrl !== undefined && output.AuthorizedUrl !== null ? output.AuthorizedUrl : undefined,
  } as any;
};

const deserializeAws_json1_1CreatePresignedNotebookInstanceUrlOutput = (
  output: any,
  context: __SerdeContext
): CreatePresignedNotebookInstanceUrlOutput => {
  return {
    AuthorizedUrl:
      output.AuthorizedUrl !== undefined && output.AuthorizedUrl !== null ? output.AuthorizedUrl : undefined,
  } as any;
};

const deserializeAws_json1_1CreateProcessingJobResponse = (
  output: any,
  context: __SerdeContext
): CreateProcessingJobResponse => {
  return {
    ProcessingJobArn:
      output.ProcessingJobArn !== undefined && output.ProcessingJobArn !== null ? output.ProcessingJobArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateProjectOutput = (output: any, context: __SerdeContext): CreateProjectOutput => {
  return {
    ProjectArn: output.ProjectArn !== undefined && output.ProjectArn !== null ? output.ProjectArn : undefined,
    ProjectId: output.ProjectId !== undefined && output.ProjectId !== null ? output.ProjectId : undefined,
  } as any;
};

const deserializeAws_json1_1CreateTrainingJobResponse = (
  output: any,
  context: __SerdeContext
): CreateTrainingJobResponse => {
  return {
    TrainingJobArn:
      output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateTransformJobResponse = (
  output: any,
  context: __SerdeContext
): CreateTransformJobResponse => {
  return {
    TransformJobArn:
      output.TransformJobArn !== undefined && output.TransformJobArn !== null ? output.TransformJobArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateTrialComponentResponse = (
  output: any,
  context: __SerdeContext
): CreateTrialComponentResponse => {
  return {
    TrialComponentArn:
      output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
        ? output.TrialComponentArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1CreateTrialResponse = (output: any, context: __SerdeContext): CreateTrialResponse => {
  return {
    TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateUserProfileResponse = (
  output: any,
  context: __SerdeContext
): CreateUserProfileResponse => {
  return {
    UserProfileArn:
      output.UserProfileArn !== undefined && output.UserProfileArn !== null ? output.UserProfileArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateWorkforceResponse = (
  output: any,
  context: __SerdeContext
): CreateWorkforceResponse => {
  return {
    WorkforceArn: output.WorkforceArn !== undefined && output.WorkforceArn !== null ? output.WorkforceArn : undefined,
  } as any;
};

const deserializeAws_json1_1CreateWorkteamResponse = (output: any, context: __SerdeContext): CreateWorkteamResponse => {
  return {
    WorkteamArn: output.WorkteamArn !== undefined && output.WorkteamArn !== null ? output.WorkteamArn : undefined,
  } as any;
};

const deserializeAws_json1_1CsvContentTypes = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1CustomImage = (output: any, context: __SerdeContext): CustomImage => {
  return {
    AppImageConfigName:
      output.AppImageConfigName !== undefined && output.AppImageConfigName !== null
        ? output.AppImageConfigName
        : undefined,
    ImageName: output.ImageName !== undefined && output.ImageName !== null ? output.ImageName : undefined,
    ImageVersionNumber:
      output.ImageVersionNumber !== undefined && output.ImageVersionNumber !== null
        ? output.ImageVersionNumber
        : undefined,
  } as any;
};

const deserializeAws_json1_1CustomImages = (output: any, context: __SerdeContext): CustomImage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1CustomImage(entry, context);
    });
};

const deserializeAws_json1_1DataCaptureConfig = (output: any, context: __SerdeContext): DataCaptureConfig => {
  return {
    CaptureContentTypeHeader:
      output.CaptureContentTypeHeader !== undefined && output.CaptureContentTypeHeader !== null
        ? deserializeAws_json1_1CaptureContentTypeHeader(output.CaptureContentTypeHeader, context)
        : undefined,
    CaptureOptions:
      output.CaptureOptions !== undefined && output.CaptureOptions !== null
        ? deserializeAws_json1_1CaptureOptionList(output.CaptureOptions, context)
        : undefined,
    DestinationS3Uri:
      output.DestinationS3Uri !== undefined && output.DestinationS3Uri !== null ? output.DestinationS3Uri : undefined,
    EnableCapture:
      output.EnableCapture !== undefined && output.EnableCapture !== null ? output.EnableCapture : undefined,
    InitialSamplingPercentage:
      output.InitialSamplingPercentage !== undefined && output.InitialSamplingPercentage !== null
        ? output.InitialSamplingPercentage
        : undefined,
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
  } as any;
};

const deserializeAws_json1_1DataCaptureConfigSummary = (
  output: any,
  context: __SerdeContext
): DataCaptureConfigSummary => {
  return {
    CaptureStatus:
      output.CaptureStatus !== undefined && output.CaptureStatus !== null ? output.CaptureStatus : undefined,
    CurrentSamplingPercentage:
      output.CurrentSamplingPercentage !== undefined && output.CurrentSamplingPercentage !== null
        ? output.CurrentSamplingPercentage
        : undefined,
    DestinationS3Uri:
      output.DestinationS3Uri !== undefined && output.DestinationS3Uri !== null ? output.DestinationS3Uri : undefined,
    EnableCapture:
      output.EnableCapture !== undefined && output.EnableCapture !== null ? output.EnableCapture : undefined,
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
  } as any;
};

const deserializeAws_json1_1DataCatalogConfig = (output: any, context: __SerdeContext): DataCatalogConfig => {
  return {
    Catalog: output.Catalog !== undefined && output.Catalog !== null ? output.Catalog : undefined,
    Database: output.Database !== undefined && output.Database !== null ? output.Database : undefined,
    TableName: output.TableName !== undefined && output.TableName !== null ? output.TableName : undefined,
  } as any;
};

const deserializeAws_json1_1DataProcessing = (output: any, context: __SerdeContext): DataProcessing => {
  return {
    InputFilter: output.InputFilter !== undefined && output.InputFilter !== null ? output.InputFilter : undefined,
    JoinSource: output.JoinSource !== undefined && output.JoinSource !== null ? output.JoinSource : undefined,
    OutputFilter: output.OutputFilter !== undefined && output.OutputFilter !== null ? output.OutputFilter : undefined,
  } as any;
};

const deserializeAws_json1_1DataQualityAppSpecification = (
  output: any,
  context: __SerdeContext
): DataQualityAppSpecification => {
  return {
    ContainerArguments:
      output.ContainerArguments !== undefined && output.ContainerArguments !== null
        ? deserializeAws_json1_1MonitoringContainerArguments(output.ContainerArguments, context)
        : undefined,
    ContainerEntrypoint:
      output.ContainerEntrypoint !== undefined && output.ContainerEntrypoint !== null
        ? deserializeAws_json1_1ContainerEntrypoint(output.ContainerEntrypoint, context)
        : undefined,
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1MonitoringEnvironmentMap(output.Environment, context)
        : undefined,
    ImageUri: output.ImageUri !== undefined && output.ImageUri !== null ? output.ImageUri : undefined,
    PostAnalyticsProcessorSourceUri:
      output.PostAnalyticsProcessorSourceUri !== undefined && output.PostAnalyticsProcessorSourceUri !== null
        ? output.PostAnalyticsProcessorSourceUri
        : undefined,
    RecordPreprocessorSourceUri:
      output.RecordPreprocessorSourceUri !== undefined && output.RecordPreprocessorSourceUri !== null
        ? output.RecordPreprocessorSourceUri
        : undefined,
  } as any;
};

const deserializeAws_json1_1DataQualityBaselineConfig = (
  output: any,
  context: __SerdeContext
): DataQualityBaselineConfig => {
  return {
    BaseliningJobName:
      output.BaseliningJobName !== undefined && output.BaseliningJobName !== null
        ? output.BaseliningJobName
        : undefined,
    ConstraintsResource:
      output.ConstraintsResource !== undefined && output.ConstraintsResource !== null
        ? deserializeAws_json1_1MonitoringConstraintsResource(output.ConstraintsResource, context)
        : undefined,
    StatisticsResource:
      output.StatisticsResource !== undefined && output.StatisticsResource !== null
        ? deserializeAws_json1_1MonitoringStatisticsResource(output.StatisticsResource, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DataQualityJobInput = (output: any, context: __SerdeContext): DataQualityJobInput => {
  return {
    EndpointInput:
      output.EndpointInput !== undefined && output.EndpointInput !== null
        ? deserializeAws_json1_1EndpointInput(output.EndpointInput, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DatasetDefinition = (output: any, context: __SerdeContext): DatasetDefinition => {
  return {
    AthenaDatasetDefinition:
      output.AthenaDatasetDefinition !== undefined && output.AthenaDatasetDefinition !== null
        ? deserializeAws_json1_1AthenaDatasetDefinition(output.AthenaDatasetDefinition, context)
        : undefined,
    DataDistributionType:
      output.DataDistributionType !== undefined && output.DataDistributionType !== null
        ? output.DataDistributionType
        : undefined,
    InputMode: output.InputMode !== undefined && output.InputMode !== null ? output.InputMode : undefined,
    LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
    RedshiftDatasetDefinition:
      output.RedshiftDatasetDefinition !== undefined && output.RedshiftDatasetDefinition !== null
        ? deserializeAws_json1_1RedshiftDatasetDefinition(output.RedshiftDatasetDefinition, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DataSource = (output: any, context: __SerdeContext): DataSource => {
  return {
    FileSystemDataSource:
      output.FileSystemDataSource !== undefined && output.FileSystemDataSource !== null
        ? deserializeAws_json1_1FileSystemDataSource(output.FileSystemDataSource, context)
        : undefined,
    S3DataSource:
      output.S3DataSource !== undefined && output.S3DataSource !== null
        ? deserializeAws_json1_1S3DataSource(output.S3DataSource, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DebugHookConfig = (output: any, context: __SerdeContext): DebugHookConfig => {
  return {
    CollectionConfigurations:
      output.CollectionConfigurations !== undefined && output.CollectionConfigurations !== null
        ? deserializeAws_json1_1CollectionConfigurations(output.CollectionConfigurations, context)
        : undefined,
    HookParameters:
      output.HookParameters !== undefined && output.HookParameters !== null
        ? deserializeAws_json1_1HookParameters(output.HookParameters, context)
        : undefined,
    LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
    S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
  } as any;
};

const deserializeAws_json1_1DebugRuleConfiguration = (output: any, context: __SerdeContext): DebugRuleConfiguration => {
  return {
    InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
    LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
    RuleConfigurationName:
      output.RuleConfigurationName !== undefined && output.RuleConfigurationName !== null
        ? output.RuleConfigurationName
        : undefined,
    RuleEvaluatorImage:
      output.RuleEvaluatorImage !== undefined && output.RuleEvaluatorImage !== null
        ? output.RuleEvaluatorImage
        : undefined,
    RuleParameters:
      output.RuleParameters !== undefined && output.RuleParameters !== null
        ? deserializeAws_json1_1RuleParameters(output.RuleParameters, context)
        : undefined,
    S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
    VolumeSizeInGB:
      output.VolumeSizeInGB !== undefined && output.VolumeSizeInGB !== null ? output.VolumeSizeInGB : undefined,
  } as any;
};

const deserializeAws_json1_1DebugRuleConfigurations = (
  output: any,
  context: __SerdeContext
): DebugRuleConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1DebugRuleConfiguration(entry, context);
    });
};

const deserializeAws_json1_1DebugRuleEvaluationStatus = (
  output: any,
  context: __SerdeContext
): DebugRuleEvaluationStatus => {
  return {
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    RuleConfigurationName:
      output.RuleConfigurationName !== undefined && output.RuleConfigurationName !== null
        ? output.RuleConfigurationName
        : undefined,
    RuleEvaluationJobArn:
      output.RuleEvaluationJobArn !== undefined && output.RuleEvaluationJobArn !== null
        ? output.RuleEvaluationJobArn
        : undefined,
    RuleEvaluationStatus:
      output.RuleEvaluationStatus !== undefined && output.RuleEvaluationStatus !== null
        ? output.RuleEvaluationStatus
        : undefined,
    StatusDetails:
      output.StatusDetails !== undefined && output.StatusDetails !== null ? output.StatusDetails : undefined,
  } as any;
};

const deserializeAws_json1_1DebugRuleEvaluationStatuses = (
  output: any,
  context: __SerdeContext
): DebugRuleEvaluationStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1DebugRuleEvaluationStatus(entry, context);
    });
};

const deserializeAws_json1_1DeleteActionResponse = (output: any, context: __SerdeContext): DeleteActionResponse => {
  return {
    ActionArn: output.ActionArn !== undefined && output.ActionArn !== null ? output.ActionArn : undefined,
  } as any;
};

const deserializeAws_json1_1DeleteArtifactResponse = (output: any, context: __SerdeContext): DeleteArtifactResponse => {
  return {
    ArtifactArn: output.ArtifactArn !== undefined && output.ArtifactArn !== null ? output.ArtifactArn : undefined,
  } as any;
};

const deserializeAws_json1_1DeleteAssociationResponse = (
  output: any,
  context: __SerdeContext
): DeleteAssociationResponse => {
  return {
    DestinationArn:
      output.DestinationArn !== undefined && output.DestinationArn !== null ? output.DestinationArn : undefined,
    SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
  } as any;
};

const deserializeAws_json1_1DeleteContextResponse = (output: any, context: __SerdeContext): DeleteContextResponse => {
  return {
    ContextArn: output.ContextArn !== undefined && output.ContextArn !== null ? output.ContextArn : undefined,
  } as any;
};

const deserializeAws_json1_1DeleteExperimentResponse = (
  output: any,
  context: __SerdeContext
): DeleteExperimentResponse => {
  return {
    ExperimentArn:
      output.ExperimentArn !== undefined && output.ExperimentArn !== null ? output.ExperimentArn : undefined,
  } as any;
};

const deserializeAws_json1_1DeleteFlowDefinitionResponse = (
  output: any,
  context: __SerdeContext
): DeleteFlowDefinitionResponse => {
  return {} as any;
};

const deserializeAws_json1_1DeleteHumanTaskUiResponse = (
  output: any,
  context: __SerdeContext
): DeleteHumanTaskUiResponse => {
  return {} as any;
};

const deserializeAws_json1_1DeleteImageResponse = (output: any, context: __SerdeContext): DeleteImageResponse => {
  return {} as any;
};

const deserializeAws_json1_1DeleteImageVersionResponse = (
  output: any,
  context: __SerdeContext
): DeleteImageVersionResponse => {
  return {} as any;
};

const deserializeAws_json1_1DeletePipelineResponse = (output: any, context: __SerdeContext): DeletePipelineResponse => {
  return {
    PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
  } as any;
};

const deserializeAws_json1_1DeleteTagsOutput = (output: any, context: __SerdeContext): DeleteTagsOutput => {
  return {} as any;
};

const deserializeAws_json1_1DeleteTrialComponentResponse = (
  output: any,
  context: __SerdeContext
): DeleteTrialComponentResponse => {
  return {
    TrialComponentArn:
      output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
        ? output.TrialComponentArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1DeleteTrialResponse = (output: any, context: __SerdeContext): DeleteTrialResponse => {
  return {
    TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
  } as any;
};

const deserializeAws_json1_1DeleteWorkforceResponse = (
  output: any,
  context: __SerdeContext
): DeleteWorkforceResponse => {
  return {} as any;
};

const deserializeAws_json1_1DeleteWorkteamResponse = (output: any, context: __SerdeContext): DeleteWorkteamResponse => {
  return {
    Success: output.Success !== undefined && output.Success !== null ? output.Success : undefined,
  } as any;
};

const deserializeAws_json1_1DeployedImage = (output: any, context: __SerdeContext): DeployedImage => {
  return {
    ResolutionTime:
      output.ResolutionTime !== undefined && output.ResolutionTime !== null
        ? new Date(Math.round(output.ResolutionTime * 1000))
        : undefined,
    ResolvedImage:
      output.ResolvedImage !== undefined && output.ResolvedImage !== null ? output.ResolvedImage : undefined,
    SpecifiedImage:
      output.SpecifiedImage !== undefined && output.SpecifiedImage !== null ? output.SpecifiedImage : undefined,
  } as any;
};

const deserializeAws_json1_1DeployedImages = (output: any, context: __SerdeContext): DeployedImage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1DeployedImage(entry, context);
    });
};

const deserializeAws_json1_1DeploymentConfig = (output: any, context: __SerdeContext): DeploymentConfig => {
  return {
    AutoRollbackConfiguration:
      output.AutoRollbackConfiguration !== undefined && output.AutoRollbackConfiguration !== null
        ? deserializeAws_json1_1AutoRollbackConfig(output.AutoRollbackConfiguration, context)
        : undefined,
    BlueGreenUpdatePolicy:
      output.BlueGreenUpdatePolicy !== undefined && output.BlueGreenUpdatePolicy !== null
        ? deserializeAws_json1_1BlueGreenUpdatePolicy(output.BlueGreenUpdatePolicy, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeActionResponse = (output: any, context: __SerdeContext): DescribeActionResponse => {
  return {
    ActionArn: output.ActionArn !== undefined && output.ActionArn !== null ? output.ActionArn : undefined,
    ActionName: output.ActionName !== undefined && output.ActionName !== null ? output.ActionName : undefined,
    ActionType: output.ActionType !== undefined && output.ActionType !== null ? output.ActionType : undefined,
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    MetadataProperties:
      output.MetadataProperties !== undefined && output.MetadataProperties !== null
        ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
        : undefined,
    Properties:
      output.Properties !== undefined && output.Properties !== null
        ? deserializeAws_json1_1LineageEntityParameters(output.Properties, context)
        : undefined,
    Source:
      output.Source !== undefined && output.Source !== null
        ? deserializeAws_json1_1ActionSource(output.Source, context)
        : undefined,
    Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeAlgorithmOutput = (
  output: any,
  context: __SerdeContext
): DescribeAlgorithmOutput => {
  return {
    AlgorithmArn: output.AlgorithmArn !== undefined && output.AlgorithmArn !== null ? output.AlgorithmArn : undefined,
    AlgorithmDescription:
      output.AlgorithmDescription !== undefined && output.AlgorithmDescription !== null
        ? output.AlgorithmDescription
        : undefined,
    AlgorithmName:
      output.AlgorithmName !== undefined && output.AlgorithmName !== null ? output.AlgorithmName : undefined,
    AlgorithmStatus:
      output.AlgorithmStatus !== undefined && output.AlgorithmStatus !== null ? output.AlgorithmStatus : undefined,
    AlgorithmStatusDetails:
      output.AlgorithmStatusDetails !== undefined && output.AlgorithmStatusDetails !== null
        ? deserializeAws_json1_1AlgorithmStatusDetails(output.AlgorithmStatusDetails, context)
        : undefined,
    CertifyForMarketplace:
      output.CertifyForMarketplace !== undefined && output.CertifyForMarketplace !== null
        ? output.CertifyForMarketplace
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    InferenceSpecification:
      output.InferenceSpecification !== undefined && output.InferenceSpecification !== null
        ? deserializeAws_json1_1InferenceSpecification(output.InferenceSpecification, context)
        : undefined,
    ProductId: output.ProductId !== undefined && output.ProductId !== null ? output.ProductId : undefined,
    TrainingSpecification:
      output.TrainingSpecification !== undefined && output.TrainingSpecification !== null
        ? deserializeAws_json1_1TrainingSpecification(output.TrainingSpecification, context)
        : undefined,
    ValidationSpecification:
      output.ValidationSpecification !== undefined && output.ValidationSpecification !== null
        ? deserializeAws_json1_1AlgorithmValidationSpecification(output.ValidationSpecification, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeAppImageConfigResponse = (
  output: any,
  context: __SerdeContext
): DescribeAppImageConfigResponse => {
  return {
    AppImageConfigArn:
      output.AppImageConfigArn !== undefined && output.AppImageConfigArn !== null
        ? output.AppImageConfigArn
        : undefined,
    AppImageConfigName:
      output.AppImageConfigName !== undefined && output.AppImageConfigName !== null
        ? output.AppImageConfigName
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    KernelGatewayImageConfig:
      output.KernelGatewayImageConfig !== undefined && output.KernelGatewayImageConfig !== null
        ? deserializeAws_json1_1KernelGatewayImageConfig(output.KernelGatewayImageConfig, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeAppResponse = (output: any, context: __SerdeContext): DescribeAppResponse => {
  return {
    AppArn: output.AppArn !== undefined && output.AppArn !== null ? output.AppArn : undefined,
    AppName: output.AppName !== undefined && output.AppName !== null ? output.AppName : undefined,
    AppType: output.AppType !== undefined && output.AppType !== null ? output.AppType : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    LastHealthCheckTimestamp:
      output.LastHealthCheckTimestamp !== undefined && output.LastHealthCheckTimestamp !== null
        ? new Date(Math.round(output.LastHealthCheckTimestamp * 1000))
        : undefined,
    LastUserActivityTimestamp:
      output.LastUserActivityTimestamp !== undefined && output.LastUserActivityTimestamp !== null
        ? new Date(Math.round(output.LastUserActivityTimestamp * 1000))
        : undefined,
    ResourceSpec:
      output.ResourceSpec !== undefined && output.ResourceSpec !== null
        ? deserializeAws_json1_1ResourceSpec(output.ResourceSpec, context)
        : undefined,
    Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
    UserProfileName:
      output.UserProfileName !== undefined && output.UserProfileName !== null ? output.UserProfileName : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeArtifactResponse = (
  output: any,
  context: __SerdeContext
): DescribeArtifactResponse => {
  return {
    ArtifactArn: output.ArtifactArn !== undefined && output.ArtifactArn !== null ? output.ArtifactArn : undefined,
    ArtifactName: output.ArtifactName !== undefined && output.ArtifactName !== null ? output.ArtifactName : undefined,
    ArtifactType: output.ArtifactType !== undefined && output.ArtifactType !== null ? output.ArtifactType : undefined,
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    MetadataProperties:
      output.MetadataProperties !== undefined && output.MetadataProperties !== null
        ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
        : undefined,
    Properties:
      output.Properties !== undefined && output.Properties !== null
        ? deserializeAws_json1_1LineageEntityParameters(output.Properties, context)
        : undefined,
    Source:
      output.Source !== undefined && output.Source !== null
        ? deserializeAws_json1_1ArtifactSource(output.Source, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeAutoMLJobResponse = (
  output: any,
  context: __SerdeContext
): DescribeAutoMLJobResponse => {
  return {
    AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
    AutoMLJobArtifacts:
      output.AutoMLJobArtifacts !== undefined && output.AutoMLJobArtifacts !== null
        ? deserializeAws_json1_1AutoMLJobArtifacts(output.AutoMLJobArtifacts, context)
        : undefined,
    AutoMLJobConfig:
      output.AutoMLJobConfig !== undefined && output.AutoMLJobConfig !== null
        ? deserializeAws_json1_1AutoMLJobConfig(output.AutoMLJobConfig, context)
        : undefined,
    AutoMLJobName:
      output.AutoMLJobName !== undefined && output.AutoMLJobName !== null ? output.AutoMLJobName : undefined,
    AutoMLJobObjective:
      output.AutoMLJobObjective !== undefined && output.AutoMLJobObjective !== null
        ? deserializeAws_json1_1AutoMLJobObjective(output.AutoMLJobObjective, context)
        : undefined,
    AutoMLJobSecondaryStatus:
      output.AutoMLJobSecondaryStatus !== undefined && output.AutoMLJobSecondaryStatus !== null
        ? output.AutoMLJobSecondaryStatus
        : undefined,
    AutoMLJobStatus:
      output.AutoMLJobStatus !== undefined && output.AutoMLJobStatus !== null ? output.AutoMLJobStatus : undefined,
    BestCandidate:
      output.BestCandidate !== undefined && output.BestCandidate !== null
        ? deserializeAws_json1_1AutoMLCandidate(output.BestCandidate, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    EndTime:
      output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    GenerateCandidateDefinitionsOnly:
      output.GenerateCandidateDefinitionsOnly !== undefined && output.GenerateCandidateDefinitionsOnly !== null
        ? output.GenerateCandidateDefinitionsOnly
        : undefined,
    InputDataConfig:
      output.InputDataConfig !== undefined && output.InputDataConfig !== null
        ? deserializeAws_json1_1AutoMLInputDataConfig(output.InputDataConfig, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    ModelDeployConfig:
      output.ModelDeployConfig !== undefined && output.ModelDeployConfig !== null
        ? deserializeAws_json1_1ModelDeployConfig(output.ModelDeployConfig, context)
        : undefined,
    ModelDeployResult:
      output.ModelDeployResult !== undefined && output.ModelDeployResult !== null
        ? deserializeAws_json1_1ModelDeployResult(output.ModelDeployResult, context)
        : undefined,
    OutputDataConfig:
      output.OutputDataConfig !== undefined && output.OutputDataConfig !== null
        ? deserializeAws_json1_1AutoMLOutputDataConfig(output.OutputDataConfig, context)
        : undefined,
    PartialFailureReasons:
      output.PartialFailureReasons !== undefined && output.PartialFailureReasons !== null
        ? deserializeAws_json1_1AutoMLPartialFailureReasons(output.PartialFailureReasons, context)
        : undefined,
    ProblemType: output.ProblemType !== undefined && output.ProblemType !== null ? output.ProblemType : undefined,
    ResolvedAttributes:
      output.ResolvedAttributes !== undefined && output.ResolvedAttributes !== null
        ? deserializeAws_json1_1ResolvedAttributes(output.ResolvedAttributes, context)
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeCodeRepositoryOutput = (
  output: any,
  context: __SerdeContext
): DescribeCodeRepositoryOutput => {
  return {
    CodeRepositoryArn:
      output.CodeRepositoryArn !== undefined && output.CodeRepositoryArn !== null
        ? output.CodeRepositoryArn
        : undefined,
    CodeRepositoryName:
      output.CodeRepositoryName !== undefined && output.CodeRepositoryName !== null
        ? output.CodeRepositoryName
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    GitConfig:
      output.GitConfig !== undefined && output.GitConfig !== null
        ? deserializeAws_json1_1GitConfig(output.GitConfig, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeCompilationJobResponse = (
  output: any,
  context: __SerdeContext
): DescribeCompilationJobResponse => {
  return {
    CompilationEndTime:
      output.CompilationEndTime !== undefined && output.CompilationEndTime !== null
        ? new Date(Math.round(output.CompilationEndTime * 1000))
        : undefined,
    CompilationJobArn:
      output.CompilationJobArn !== undefined && output.CompilationJobArn !== null
        ? output.CompilationJobArn
        : undefined,
    CompilationJobName:
      output.CompilationJobName !== undefined && output.CompilationJobName !== null
        ? output.CompilationJobName
        : undefined,
    CompilationJobStatus:
      output.CompilationJobStatus !== undefined && output.CompilationJobStatus !== null
        ? output.CompilationJobStatus
        : undefined,
    CompilationStartTime:
      output.CompilationStartTime !== undefined && output.CompilationStartTime !== null
        ? new Date(Math.round(output.CompilationStartTime * 1000))
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    InputConfig:
      output.InputConfig !== undefined && output.InputConfig !== null
        ? deserializeAws_json1_1InputConfig(output.InputConfig, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    ModelArtifacts:
      output.ModelArtifacts !== undefined && output.ModelArtifacts !== null
        ? deserializeAws_json1_1ModelArtifacts(output.ModelArtifacts, context)
        : undefined,
    ModelDigests:
      output.ModelDigests !== undefined && output.ModelDigests !== null
        ? deserializeAws_json1_1ModelDigests(output.ModelDigests, context)
        : undefined,
    OutputConfig:
      output.OutputConfig !== undefined && output.OutputConfig !== null
        ? deserializeAws_json1_1OutputConfig(output.OutputConfig, context)
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    StoppingCondition:
      output.StoppingCondition !== undefined && output.StoppingCondition !== null
        ? deserializeAws_json1_1StoppingCondition(output.StoppingCondition, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeContextResponse = (
  output: any,
  context: __SerdeContext
): DescribeContextResponse => {
  return {
    ContextArn: output.ContextArn !== undefined && output.ContextArn !== null ? output.ContextArn : undefined,
    ContextName: output.ContextName !== undefined && output.ContextName !== null ? output.ContextName : undefined,
    ContextType: output.ContextType !== undefined && output.ContextType !== null ? output.ContextType : undefined,
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    Properties:
      output.Properties !== undefined && output.Properties !== null
        ? deserializeAws_json1_1LineageEntityParameters(output.Properties, context)
        : undefined,
    Source:
      output.Source !== undefined && output.Source !== null
        ? deserializeAws_json1_1ContextSource(output.Source, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeDataQualityJobDefinitionResponse = (
  output: any,
  context: __SerdeContext
): DescribeDataQualityJobDefinitionResponse => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DataQualityAppSpecification:
      output.DataQualityAppSpecification !== undefined && output.DataQualityAppSpecification !== null
        ? deserializeAws_json1_1DataQualityAppSpecification(output.DataQualityAppSpecification, context)
        : undefined,
    DataQualityBaselineConfig:
      output.DataQualityBaselineConfig !== undefined && output.DataQualityBaselineConfig !== null
        ? deserializeAws_json1_1DataQualityBaselineConfig(output.DataQualityBaselineConfig, context)
        : undefined,
    DataQualityJobInput:
      output.DataQualityJobInput !== undefined && output.DataQualityJobInput !== null
        ? deserializeAws_json1_1DataQualityJobInput(output.DataQualityJobInput, context)
        : undefined,
    DataQualityJobOutputConfig:
      output.DataQualityJobOutputConfig !== undefined && output.DataQualityJobOutputConfig !== null
        ? deserializeAws_json1_1MonitoringOutputConfig(output.DataQualityJobOutputConfig, context)
        : undefined,
    JobDefinitionArn:
      output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
    JobDefinitionName:
      output.JobDefinitionName !== undefined && output.JobDefinitionName !== null
        ? output.JobDefinitionName
        : undefined,
    JobResources:
      output.JobResources !== undefined && output.JobResources !== null
        ? deserializeAws_json1_1MonitoringResources(output.JobResources, context)
        : undefined,
    NetworkConfig:
      output.NetworkConfig !== undefined && output.NetworkConfig !== null
        ? deserializeAws_json1_1MonitoringNetworkConfig(output.NetworkConfig, context)
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    StoppingCondition:
      output.StoppingCondition !== undefined && output.StoppingCondition !== null
        ? deserializeAws_json1_1MonitoringStoppingCondition(output.StoppingCondition, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeDeviceFleetResponse = (
  output: any,
  context: __SerdeContext
): DescribeDeviceFleetResponse => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    DeviceFleetArn:
      output.DeviceFleetArn !== undefined && output.DeviceFleetArn !== null ? output.DeviceFleetArn : undefined,
    DeviceFleetName:
      output.DeviceFleetName !== undefined && output.DeviceFleetName !== null ? output.DeviceFleetName : undefined,
    IotRoleAlias: output.IotRoleAlias !== undefined && output.IotRoleAlias !== null ? output.IotRoleAlias : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    OutputConfig:
      output.OutputConfig !== undefined && output.OutputConfig !== null
        ? deserializeAws_json1_1EdgeOutputConfig(output.OutputConfig, context)
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeDeviceResponse = (output: any, context: __SerdeContext): DescribeDeviceResponse => {
  return {
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    DeviceArn: output.DeviceArn !== undefined && output.DeviceArn !== null ? output.DeviceArn : undefined,
    DeviceFleetName:
      output.DeviceFleetName !== undefined && output.DeviceFleetName !== null ? output.DeviceFleetName : undefined,
    DeviceName: output.DeviceName !== undefined && output.DeviceName !== null ? output.DeviceName : undefined,
    IotThingName: output.IotThingName !== undefined && output.IotThingName !== null ? output.IotThingName : undefined,
    LatestHeartbeat:
      output.LatestHeartbeat !== undefined && output.LatestHeartbeat !== null
        ? new Date(Math.round(output.LatestHeartbeat * 1000))
        : undefined,
    MaxModels: output.MaxModels !== undefined && output.MaxModels !== null ? output.MaxModels : undefined,
    Models:
      output.Models !== undefined && output.Models !== null
        ? deserializeAws_json1_1EdgeModels(output.Models, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    RegistrationTime:
      output.RegistrationTime !== undefined && output.RegistrationTime !== null
        ? new Date(Math.round(output.RegistrationTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeDomainResponse = (output: any, context: __SerdeContext): DescribeDomainResponse => {
  return {
    AppNetworkAccessType:
      output.AppNetworkAccessType !== undefined && output.AppNetworkAccessType !== null
        ? output.AppNetworkAccessType
        : undefined,
    AuthMode: output.AuthMode !== undefined && output.AuthMode !== null ? output.AuthMode : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DefaultUserSettings:
      output.DefaultUserSettings !== undefined && output.DefaultUserSettings !== null
        ? deserializeAws_json1_1UserSettings(output.DefaultUserSettings, context)
        : undefined,
    DomainArn: output.DomainArn !== undefined && output.DomainArn !== null ? output.DomainArn : undefined,
    DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
    DomainName: output.DomainName !== undefined && output.DomainName !== null ? output.DomainName : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    HomeEfsFileSystemId:
      output.HomeEfsFileSystemId !== undefined && output.HomeEfsFileSystemId !== null
        ? output.HomeEfsFileSystemId
        : undefined,
    HomeEfsFileSystemKmsKeyId:
      output.HomeEfsFileSystemKmsKeyId !== undefined && output.HomeEfsFileSystemKmsKeyId !== null
        ? output.HomeEfsFileSystemKmsKeyId
        : undefined,
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    SingleSignOnManagedApplicationInstanceId:
      output.SingleSignOnManagedApplicationInstanceId !== undefined &&
      output.SingleSignOnManagedApplicationInstanceId !== null
        ? output.SingleSignOnManagedApplicationInstanceId
        : undefined,
    Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
    SubnetIds:
      output.SubnetIds !== undefined && output.SubnetIds !== null
        ? deserializeAws_json1_1Subnets(output.SubnetIds, context)
        : undefined,
    Url: output.Url !== undefined && output.Url !== null ? output.Url : undefined,
    VpcId: output.VpcId !== undefined && output.VpcId !== null ? output.VpcId : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeEdgePackagingJobResponse = (
  output: any,
  context: __SerdeContext
): DescribeEdgePackagingJobResponse => {
  return {
    CompilationJobName:
      output.CompilationJobName !== undefined && output.CompilationJobName !== null
        ? output.CompilationJobName
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    EdgePackagingJobArn:
      output.EdgePackagingJobArn !== undefined && output.EdgePackagingJobArn !== null
        ? output.EdgePackagingJobArn
        : undefined,
    EdgePackagingJobName:
      output.EdgePackagingJobName !== undefined && output.EdgePackagingJobName !== null
        ? output.EdgePackagingJobName
        : undefined,
    EdgePackagingJobStatus:
      output.EdgePackagingJobStatus !== undefined && output.EdgePackagingJobStatus !== null
        ? output.EdgePackagingJobStatus
        : undefined,
    EdgePackagingJobStatusMessage:
      output.EdgePackagingJobStatusMessage !== undefined && output.EdgePackagingJobStatusMessage !== null
        ? output.EdgePackagingJobStatusMessage
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    ModelArtifact:
      output.ModelArtifact !== undefined && output.ModelArtifact !== null ? output.ModelArtifact : undefined,
    ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
    ModelSignature:
      output.ModelSignature !== undefined && output.ModelSignature !== null ? output.ModelSignature : undefined,
    ModelVersion: output.ModelVersion !== undefined && output.ModelVersion !== null ? output.ModelVersion : undefined,
    OutputConfig:
      output.OutputConfig !== undefined && output.OutputConfig !== null
        ? deserializeAws_json1_1EdgeOutputConfig(output.OutputConfig, context)
        : undefined,
    ResourceKey: output.ResourceKey !== undefined && output.ResourceKey !== null ? output.ResourceKey : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeEndpointConfigOutput = (
  output: any,
  context: __SerdeContext
): DescribeEndpointConfigOutput => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DataCaptureConfig:
      output.DataCaptureConfig !== undefined && output.DataCaptureConfig !== null
        ? deserializeAws_json1_1DataCaptureConfig(output.DataCaptureConfig, context)
        : undefined,
    EndpointConfigArn:
      output.EndpointConfigArn !== undefined && output.EndpointConfigArn !== null
        ? output.EndpointConfigArn
        : undefined,
    EndpointConfigName:
      output.EndpointConfigName !== undefined && output.EndpointConfigName !== null
        ? output.EndpointConfigName
        : undefined,
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    ProductionVariants:
      output.ProductionVariants !== undefined && output.ProductionVariants !== null
        ? deserializeAws_json1_1ProductionVariantList(output.ProductionVariants, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeEndpointOutput = (output: any, context: __SerdeContext): DescribeEndpointOutput => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DataCaptureConfig:
      output.DataCaptureConfig !== undefined && output.DataCaptureConfig !== null
        ? deserializeAws_json1_1DataCaptureConfigSummary(output.DataCaptureConfig, context)
        : undefined,
    EndpointArn: output.EndpointArn !== undefined && output.EndpointArn !== null ? output.EndpointArn : undefined,
    EndpointConfigName:
      output.EndpointConfigName !== undefined && output.EndpointConfigName !== null
        ? output.EndpointConfigName
        : undefined,
    EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
    EndpointStatus:
      output.EndpointStatus !== undefined && output.EndpointStatus !== null ? output.EndpointStatus : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    LastDeploymentConfig:
      output.LastDeploymentConfig !== undefined && output.LastDeploymentConfig !== null
        ? deserializeAws_json1_1DeploymentConfig(output.LastDeploymentConfig, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    ProductionVariants:
      output.ProductionVariants !== undefined && output.ProductionVariants !== null
        ? deserializeAws_json1_1ProductionVariantSummaryList(output.ProductionVariants, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeExperimentResponse = (
  output: any,
  context: __SerdeContext
): DescribeExperimentResponse => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
    ExperimentArn:
      output.ExperimentArn !== undefined && output.ExperimentArn !== null ? output.ExperimentArn : undefined,
    ExperimentName:
      output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    Source:
      output.Source !== undefined && output.Source !== null
        ? deserializeAws_json1_1ExperimentSource(output.Source, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeFeatureGroupResponse = (
  output: any,
  context: __SerdeContext
): DescribeFeatureGroupResponse => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    EventTimeFeatureName:
      output.EventTimeFeatureName !== undefined && output.EventTimeFeatureName !== null
        ? output.EventTimeFeatureName
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    FeatureDefinitions:
      output.FeatureDefinitions !== undefined && output.FeatureDefinitions !== null
        ? deserializeAws_json1_1FeatureDefinitions(output.FeatureDefinitions, context)
        : undefined,
    FeatureGroupArn:
      output.FeatureGroupArn !== undefined && output.FeatureGroupArn !== null ? output.FeatureGroupArn : undefined,
    FeatureGroupName:
      output.FeatureGroupName !== undefined && output.FeatureGroupName !== null ? output.FeatureGroupName : undefined,
    FeatureGroupStatus:
      output.FeatureGroupStatus !== undefined && output.FeatureGroupStatus !== null
        ? output.FeatureGroupStatus
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    OfflineStoreConfig:
      output.OfflineStoreConfig !== undefined && output.OfflineStoreConfig !== null
        ? deserializeAws_json1_1OfflineStoreConfig(output.OfflineStoreConfig, context)
        : undefined,
    OfflineStoreStatus:
      output.OfflineStoreStatus !== undefined && output.OfflineStoreStatus !== null
        ? deserializeAws_json1_1OfflineStoreStatus(output.OfflineStoreStatus, context)
        : undefined,
    OnlineStoreConfig:
      output.OnlineStoreConfig !== undefined && output.OnlineStoreConfig !== null
        ? deserializeAws_json1_1OnlineStoreConfig(output.OnlineStoreConfig, context)
        : undefined,
    RecordIdentifierFeatureName:
      output.RecordIdentifierFeatureName !== undefined && output.RecordIdentifierFeatureName !== null
        ? output.RecordIdentifierFeatureName
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeFlowDefinitionResponse = (
  output: any,
  context: __SerdeContext
): DescribeFlowDefinitionResponse => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    FlowDefinitionArn:
      output.FlowDefinitionArn !== undefined && output.FlowDefinitionArn !== null
        ? output.FlowDefinitionArn
        : undefined,
    FlowDefinitionName:
      output.FlowDefinitionName !== undefined && output.FlowDefinitionName !== null
        ? output.FlowDefinitionName
        : undefined,
    FlowDefinitionStatus:
      output.FlowDefinitionStatus !== undefined && output.FlowDefinitionStatus !== null
        ? output.FlowDefinitionStatus
        : undefined,
    HumanLoopActivationConfig:
      output.HumanLoopActivationConfig !== undefined && output.HumanLoopActivationConfig !== null
        ? deserializeAws_json1_1HumanLoopActivationConfig(output.HumanLoopActivationConfig, context)
        : undefined,
    HumanLoopConfig:
      output.HumanLoopConfig !== undefined && output.HumanLoopConfig !== null
        ? deserializeAws_json1_1HumanLoopConfig(output.HumanLoopConfig, context)
        : undefined,
    HumanLoopRequestSource:
      output.HumanLoopRequestSource !== undefined && output.HumanLoopRequestSource !== null
        ? deserializeAws_json1_1HumanLoopRequestSource(output.HumanLoopRequestSource, context)
        : undefined,
    OutputConfig:
      output.OutputConfig !== undefined && output.OutputConfig !== null
        ? deserializeAws_json1_1FlowDefinitionOutputConfig(output.OutputConfig, context)
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeHumanTaskUiResponse = (
  output: any,
  context: __SerdeContext
): DescribeHumanTaskUiResponse => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    HumanTaskUiArn:
      output.HumanTaskUiArn !== undefined && output.HumanTaskUiArn !== null ? output.HumanTaskUiArn : undefined,
    HumanTaskUiName:
      output.HumanTaskUiName !== undefined && output.HumanTaskUiName !== null ? output.HumanTaskUiName : undefined,
    HumanTaskUiStatus:
      output.HumanTaskUiStatus !== undefined && output.HumanTaskUiStatus !== null
        ? output.HumanTaskUiStatus
        : undefined,
    UiTemplate:
      output.UiTemplate !== undefined && output.UiTemplate !== null
        ? deserializeAws_json1_1UiTemplateInfo(output.UiTemplate, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeHyperParameterTuningJobResponse = (
  output: any,
  context: __SerdeContext
): DescribeHyperParameterTuningJobResponse => {
  return {
    BestTrainingJob:
      output.BestTrainingJob !== undefined && output.BestTrainingJob !== null
        ? deserializeAws_json1_1HyperParameterTrainingJobSummary(output.BestTrainingJob, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    HyperParameterTuningEndTime:
      output.HyperParameterTuningEndTime !== undefined && output.HyperParameterTuningEndTime !== null
        ? new Date(Math.round(output.HyperParameterTuningEndTime * 1000))
        : undefined,
    HyperParameterTuningJobArn:
      output.HyperParameterTuningJobArn !== undefined && output.HyperParameterTuningJobArn !== null
        ? output.HyperParameterTuningJobArn
        : undefined,
    HyperParameterTuningJobConfig:
      output.HyperParameterTuningJobConfig !== undefined && output.HyperParameterTuningJobConfig !== null
        ? deserializeAws_json1_1HyperParameterTuningJobConfig(output.HyperParameterTuningJobConfig, context)
        : undefined,
    HyperParameterTuningJobName:
      output.HyperParameterTuningJobName !== undefined && output.HyperParameterTuningJobName !== null
        ? output.HyperParameterTuningJobName
        : undefined,
    HyperParameterTuningJobStatus:
      output.HyperParameterTuningJobStatus !== undefined && output.HyperParameterTuningJobStatus !== null
        ? output.HyperParameterTuningJobStatus
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    ObjectiveStatusCounters:
      output.ObjectiveStatusCounters !== undefined && output.ObjectiveStatusCounters !== null
        ? deserializeAws_json1_1ObjectiveStatusCounters(output.ObjectiveStatusCounters, context)
        : undefined,
    OverallBestTrainingJob:
      output.OverallBestTrainingJob !== undefined && output.OverallBestTrainingJob !== null
        ? deserializeAws_json1_1HyperParameterTrainingJobSummary(output.OverallBestTrainingJob, context)
        : undefined,
    TrainingJobDefinition:
      output.TrainingJobDefinition !== undefined && output.TrainingJobDefinition !== null
        ? deserializeAws_json1_1HyperParameterTrainingJobDefinition(output.TrainingJobDefinition, context)
        : undefined,
    TrainingJobDefinitions:
      output.TrainingJobDefinitions !== undefined && output.TrainingJobDefinitions !== null
        ? deserializeAws_json1_1HyperParameterTrainingJobDefinitions(output.TrainingJobDefinitions, context)
        : undefined,
    TrainingJobStatusCounters:
      output.TrainingJobStatusCounters !== undefined && output.TrainingJobStatusCounters !== null
        ? deserializeAws_json1_1TrainingJobStatusCounters(output.TrainingJobStatusCounters, context)
        : undefined,
    WarmStartConfig:
      output.WarmStartConfig !== undefined && output.WarmStartConfig !== null
        ? deserializeAws_json1_1HyperParameterTuningJobWarmStartConfig(output.WarmStartConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeImageResponse = (output: any, context: __SerdeContext): DescribeImageResponse => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    ImageArn: output.ImageArn !== undefined && output.ImageArn !== null ? output.ImageArn : undefined,
    ImageName: output.ImageName !== undefined && output.ImageName !== null ? output.ImageName : undefined,
    ImageStatus: output.ImageStatus !== undefined && output.ImageStatus !== null ? output.ImageStatus : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeImageVersionResponse = (
  output: any,
  context: __SerdeContext
): DescribeImageVersionResponse => {
  return {
    BaseImage: output.BaseImage !== undefined && output.BaseImage !== null ? output.BaseImage : undefined,
    ContainerImage:
      output.ContainerImage !== undefined && output.ContainerImage !== null ? output.ContainerImage : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    ImageArn: output.ImageArn !== undefined && output.ImageArn !== null ? output.ImageArn : undefined,
    ImageVersionArn:
      output.ImageVersionArn !== undefined && output.ImageVersionArn !== null ? output.ImageVersionArn : undefined,
    ImageVersionStatus:
      output.ImageVersionStatus !== undefined && output.ImageVersionStatus !== null
        ? output.ImageVersionStatus
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    Version: output.Version !== undefined && output.Version !== null ? output.Version : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeLabelingJobResponse = (
  output: any,
  context: __SerdeContext
): DescribeLabelingJobResponse => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    HumanTaskConfig:
      output.HumanTaskConfig !== undefined && output.HumanTaskConfig !== null
        ? deserializeAws_json1_1HumanTaskConfig(output.HumanTaskConfig, context)
        : undefined,
    InputConfig:
      output.InputConfig !== undefined && output.InputConfig !== null
        ? deserializeAws_json1_1LabelingJobInputConfig(output.InputConfig, context)
        : undefined,
    JobReferenceCode:
      output.JobReferenceCode !== undefined && output.JobReferenceCode !== null ? output.JobReferenceCode : undefined,
    LabelAttributeName:
      output.LabelAttributeName !== undefined && output.LabelAttributeName !== null
        ? output.LabelAttributeName
        : undefined,
    LabelCategoryConfigS3Uri:
      output.LabelCategoryConfigS3Uri !== undefined && output.LabelCategoryConfigS3Uri !== null
        ? output.LabelCategoryConfigS3Uri
        : undefined,
    LabelCounters:
      output.LabelCounters !== undefined && output.LabelCounters !== null
        ? deserializeAws_json1_1LabelCounters(output.LabelCounters, context)
        : undefined,
    LabelingJobAlgorithmsConfig:
      output.LabelingJobAlgorithmsConfig !== undefined && output.LabelingJobAlgorithmsConfig !== null
        ? deserializeAws_json1_1LabelingJobAlgorithmsConfig(output.LabelingJobAlgorithmsConfig, context)
        : undefined,
    LabelingJobArn:
      output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
    LabelingJobName:
      output.LabelingJobName !== undefined && output.LabelingJobName !== null ? output.LabelingJobName : undefined,
    LabelingJobOutput:
      output.LabelingJobOutput !== undefined && output.LabelingJobOutput !== null
        ? deserializeAws_json1_1LabelingJobOutput(output.LabelingJobOutput, context)
        : undefined,
    LabelingJobStatus:
      output.LabelingJobStatus !== undefined && output.LabelingJobStatus !== null
        ? output.LabelingJobStatus
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    OutputConfig:
      output.OutputConfig !== undefined && output.OutputConfig !== null
        ? deserializeAws_json1_1LabelingJobOutputConfig(output.OutputConfig, context)
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    StoppingConditions:
      output.StoppingConditions !== undefined && output.StoppingConditions !== null
        ? deserializeAws_json1_1LabelingJobStoppingConditions(output.StoppingConditions, context)
        : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeModelBiasJobDefinitionResponse = (
  output: any,
  context: __SerdeContext
): DescribeModelBiasJobDefinitionResponse => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    JobDefinitionArn:
      output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
    JobDefinitionName:
      output.JobDefinitionName !== undefined && output.JobDefinitionName !== null
        ? output.JobDefinitionName
        : undefined,
    JobResources:
      output.JobResources !== undefined && output.JobResources !== null
        ? deserializeAws_json1_1MonitoringResources(output.JobResources, context)
        : undefined,
    ModelBiasAppSpecification:
      output.ModelBiasAppSpecification !== undefined && output.ModelBiasAppSpecification !== null
        ? deserializeAws_json1_1ModelBiasAppSpecification(output.ModelBiasAppSpecification, context)
        : undefined,
    ModelBiasBaselineConfig:
      output.ModelBiasBaselineConfig !== undefined && output.ModelBiasBaselineConfig !== null
        ? deserializeAws_json1_1ModelBiasBaselineConfig(output.ModelBiasBaselineConfig, context)
        : undefined,
    ModelBiasJobInput:
      output.ModelBiasJobInput !== undefined && output.ModelBiasJobInput !== null
        ? deserializeAws_json1_1ModelBiasJobInput(output.ModelBiasJobInput, context)
        : undefined,
    ModelBiasJobOutputConfig:
      output.ModelBiasJobOutputConfig !== undefined && output.ModelBiasJobOutputConfig !== null
        ? deserializeAws_json1_1MonitoringOutputConfig(output.ModelBiasJobOutputConfig, context)
        : undefined,
    NetworkConfig:
      output.NetworkConfig !== undefined && output.NetworkConfig !== null
        ? deserializeAws_json1_1MonitoringNetworkConfig(output.NetworkConfig, context)
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    StoppingCondition:
      output.StoppingCondition !== undefined && output.StoppingCondition !== null
        ? deserializeAws_json1_1MonitoringStoppingCondition(output.StoppingCondition, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeModelExplainabilityJobDefinitionResponse = (
  output: any,
  context: __SerdeContext
): DescribeModelExplainabilityJobDefinitionResponse => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    JobDefinitionArn:
      output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
    JobDefinitionName:
      output.JobDefinitionName !== undefined && output.JobDefinitionName !== null
        ? output.JobDefinitionName
        : undefined,
    JobResources:
      output.JobResources !== undefined && output.JobResources !== null
        ? deserializeAws_json1_1MonitoringResources(output.JobResources, context)
        : undefined,
    ModelExplainabilityAppSpecification:
      output.ModelExplainabilityAppSpecification !== undefined && output.ModelExplainabilityAppSpecification !== null
        ? deserializeAws_json1_1ModelExplainabilityAppSpecification(output.ModelExplainabilityAppSpecification, context)
        : undefined,
    ModelExplainabilityBaselineConfig:
      output.ModelExplainabilityBaselineConfig !== undefined && output.ModelExplainabilityBaselineConfig !== null
        ? deserializeAws_json1_1ModelExplainabilityBaselineConfig(output.ModelExplainabilityBaselineConfig, context)
        : undefined,
    ModelExplainabilityJobInput:
      output.ModelExplainabilityJobInput !== undefined && output.ModelExplainabilityJobInput !== null
        ? deserializeAws_json1_1ModelExplainabilityJobInput(output.ModelExplainabilityJobInput, context)
        : undefined,
    ModelExplainabilityJobOutputConfig:
      output.ModelExplainabilityJobOutputConfig !== undefined && output.ModelExplainabilityJobOutputConfig !== null
        ? deserializeAws_json1_1MonitoringOutputConfig(output.ModelExplainabilityJobOutputConfig, context)
        : undefined,
    NetworkConfig:
      output.NetworkConfig !== undefined && output.NetworkConfig !== null
        ? deserializeAws_json1_1MonitoringNetworkConfig(output.NetworkConfig, context)
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    StoppingCondition:
      output.StoppingCondition !== undefined && output.StoppingCondition !== null
        ? deserializeAws_json1_1MonitoringStoppingCondition(output.StoppingCondition, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeModelOutput = (output: any, context: __SerdeContext): DescribeModelOutput => {
  return {
    Containers:
      output.Containers !== undefined && output.Containers !== null
        ? deserializeAws_json1_1ContainerDefinitionList(output.Containers, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    EnableNetworkIsolation:
      output.EnableNetworkIsolation !== undefined && output.EnableNetworkIsolation !== null
        ? output.EnableNetworkIsolation
        : undefined,
    ExecutionRoleArn:
      output.ExecutionRoleArn !== undefined && output.ExecutionRoleArn !== null ? output.ExecutionRoleArn : undefined,
    InferenceExecutionConfig:
      output.InferenceExecutionConfig !== undefined && output.InferenceExecutionConfig !== null
        ? deserializeAws_json1_1InferenceExecutionConfig(output.InferenceExecutionConfig, context)
        : undefined,
    ModelArn: output.ModelArn !== undefined && output.ModelArn !== null ? output.ModelArn : undefined,
    ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
    PrimaryContainer:
      output.PrimaryContainer !== undefined && output.PrimaryContainer !== null
        ? deserializeAws_json1_1ContainerDefinition(output.PrimaryContainer, context)
        : undefined,
    VpcConfig:
      output.VpcConfig !== undefined && output.VpcConfig !== null
        ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeModelPackageGroupOutput = (
  output: any,
  context: __SerdeContext
): DescribeModelPackageGroupOutput => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    ModelPackageGroupArn:
      output.ModelPackageGroupArn !== undefined && output.ModelPackageGroupArn !== null
        ? output.ModelPackageGroupArn
        : undefined,
    ModelPackageGroupDescription:
      output.ModelPackageGroupDescription !== undefined && output.ModelPackageGroupDescription !== null
        ? output.ModelPackageGroupDescription
        : undefined,
    ModelPackageGroupName:
      output.ModelPackageGroupName !== undefined && output.ModelPackageGroupName !== null
        ? output.ModelPackageGroupName
        : undefined,
    ModelPackageGroupStatus:
      output.ModelPackageGroupStatus !== undefined && output.ModelPackageGroupStatus !== null
        ? output.ModelPackageGroupStatus
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeModelPackageOutput = (
  output: any,
  context: __SerdeContext
): DescribeModelPackageOutput => {
  return {
    ApprovalDescription:
      output.ApprovalDescription !== undefined && output.ApprovalDescription !== null
        ? output.ApprovalDescription
        : undefined,
    CertifyForMarketplace:
      output.CertifyForMarketplace !== undefined && output.CertifyForMarketplace !== null
        ? output.CertifyForMarketplace
        : undefined,
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    InferenceSpecification:
      output.InferenceSpecification !== undefined && output.InferenceSpecification !== null
        ? deserializeAws_json1_1InferenceSpecification(output.InferenceSpecification, context)
        : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    MetadataProperties:
      output.MetadataProperties !== undefined && output.MetadataProperties !== null
        ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
        : undefined,
    ModelApprovalStatus:
      output.ModelApprovalStatus !== undefined && output.ModelApprovalStatus !== null
        ? output.ModelApprovalStatus
        : undefined,
    ModelMetrics:
      output.ModelMetrics !== undefined && output.ModelMetrics !== null
        ? deserializeAws_json1_1ModelMetrics(output.ModelMetrics, context)
        : undefined,
    ModelPackageArn:
      output.ModelPackageArn !== undefined && output.ModelPackageArn !== null ? output.ModelPackageArn : undefined,
    ModelPackageDescription:
      output.ModelPackageDescription !== undefined && output.ModelPackageDescription !== null
        ? output.ModelPackageDescription
        : undefined,
    ModelPackageGroupName:
      output.ModelPackageGroupName !== undefined && output.ModelPackageGroupName !== null
        ? output.ModelPackageGroupName
        : undefined,
    ModelPackageName:
      output.ModelPackageName !== undefined && output.ModelPackageName !== null ? output.ModelPackageName : undefined,
    ModelPackageStatus:
      output.ModelPackageStatus !== undefined && output.ModelPackageStatus !== null
        ? output.ModelPackageStatus
        : undefined,
    ModelPackageStatusDetails:
      output.ModelPackageStatusDetails !== undefined && output.ModelPackageStatusDetails !== null
        ? deserializeAws_json1_1ModelPackageStatusDetails(output.ModelPackageStatusDetails, context)
        : undefined,
    ModelPackageVersion:
      output.ModelPackageVersion !== undefined && output.ModelPackageVersion !== null
        ? output.ModelPackageVersion
        : undefined,
    SourceAlgorithmSpecification:
      output.SourceAlgorithmSpecification !== undefined && output.SourceAlgorithmSpecification !== null
        ? deserializeAws_json1_1SourceAlgorithmSpecification(output.SourceAlgorithmSpecification, context)
        : undefined,
    ValidationSpecification:
      output.ValidationSpecification !== undefined && output.ValidationSpecification !== null
        ? deserializeAws_json1_1ModelPackageValidationSpecification(output.ValidationSpecification, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeModelQualityJobDefinitionResponse = (
  output: any,
  context: __SerdeContext
): DescribeModelQualityJobDefinitionResponse => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    JobDefinitionArn:
      output.JobDefinitionArn !== undefined && output.JobDefinitionArn !== null ? output.JobDefinitionArn : undefined,
    JobDefinitionName:
      output.JobDefinitionName !== undefined && output.JobDefinitionName !== null
        ? output.JobDefinitionName
        : undefined,
    JobResources:
      output.JobResources !== undefined && output.JobResources !== null
        ? deserializeAws_json1_1MonitoringResources(output.JobResources, context)
        : undefined,
    ModelQualityAppSpecification:
      output.ModelQualityAppSpecification !== undefined && output.ModelQualityAppSpecification !== null
        ? deserializeAws_json1_1ModelQualityAppSpecification(output.ModelQualityAppSpecification, context)
        : undefined,
    ModelQualityBaselineConfig:
      output.ModelQualityBaselineConfig !== undefined && output.ModelQualityBaselineConfig !== null
        ? deserializeAws_json1_1ModelQualityBaselineConfig(output.ModelQualityBaselineConfig, context)
        : undefined,
    ModelQualityJobInput:
      output.ModelQualityJobInput !== undefined && output.ModelQualityJobInput !== null
        ? deserializeAws_json1_1ModelQualityJobInput(output.ModelQualityJobInput, context)
        : undefined,
    ModelQualityJobOutputConfig:
      output.ModelQualityJobOutputConfig !== undefined && output.ModelQualityJobOutputConfig !== null
        ? deserializeAws_json1_1MonitoringOutputConfig(output.ModelQualityJobOutputConfig, context)
        : undefined,
    NetworkConfig:
      output.NetworkConfig !== undefined && output.NetworkConfig !== null
        ? deserializeAws_json1_1MonitoringNetworkConfig(output.NetworkConfig, context)
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    StoppingCondition:
      output.StoppingCondition !== undefined && output.StoppingCondition !== null
        ? deserializeAws_json1_1MonitoringStoppingCondition(output.StoppingCondition, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeMonitoringScheduleResponse = (
  output: any,
  context: __SerdeContext
): DescribeMonitoringScheduleResponse => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    LastMonitoringExecutionSummary:
      output.LastMonitoringExecutionSummary !== undefined && output.LastMonitoringExecutionSummary !== null
        ? deserializeAws_json1_1MonitoringExecutionSummary(output.LastMonitoringExecutionSummary, context)
        : undefined,
    MonitoringScheduleArn:
      output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
        ? output.MonitoringScheduleArn
        : undefined,
    MonitoringScheduleConfig:
      output.MonitoringScheduleConfig !== undefined && output.MonitoringScheduleConfig !== null
        ? deserializeAws_json1_1MonitoringScheduleConfig(output.MonitoringScheduleConfig, context)
        : undefined,
    MonitoringScheduleName:
      output.MonitoringScheduleName !== undefined && output.MonitoringScheduleName !== null
        ? output.MonitoringScheduleName
        : undefined,
    MonitoringScheduleStatus:
      output.MonitoringScheduleStatus !== undefined && output.MonitoringScheduleStatus !== null
        ? output.MonitoringScheduleStatus
        : undefined,
    MonitoringType:
      output.MonitoringType !== undefined && output.MonitoringType !== null ? output.MonitoringType : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeNotebookInstanceLifecycleConfigOutput = (
  output: any,
  context: __SerdeContext
): DescribeNotebookInstanceLifecycleConfigOutput => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    NotebookInstanceLifecycleConfigArn:
      output.NotebookInstanceLifecycleConfigArn !== undefined && output.NotebookInstanceLifecycleConfigArn !== null
        ? output.NotebookInstanceLifecycleConfigArn
        : undefined,
    NotebookInstanceLifecycleConfigName:
      output.NotebookInstanceLifecycleConfigName !== undefined && output.NotebookInstanceLifecycleConfigName !== null
        ? output.NotebookInstanceLifecycleConfigName
        : undefined,
    OnCreate:
      output.OnCreate !== undefined && output.OnCreate !== null
        ? deserializeAws_json1_1NotebookInstanceLifecycleConfigList(output.OnCreate, context)
        : undefined,
    OnStart:
      output.OnStart !== undefined && output.OnStart !== null
        ? deserializeAws_json1_1NotebookInstanceLifecycleConfigList(output.OnStart, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeNotebookInstanceOutput = (
  output: any,
  context: __SerdeContext
): DescribeNotebookInstanceOutput => {
  return {
    AcceleratorTypes:
      output.AcceleratorTypes !== undefined && output.AcceleratorTypes !== null
        ? deserializeAws_json1_1NotebookInstanceAcceleratorTypes(output.AcceleratorTypes, context)
        : undefined,
    AdditionalCodeRepositories:
      output.AdditionalCodeRepositories !== undefined && output.AdditionalCodeRepositories !== null
        ? deserializeAws_json1_1AdditionalCodeRepositoryNamesOrUrls(output.AdditionalCodeRepositories, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DefaultCodeRepository:
      output.DefaultCodeRepository !== undefined && output.DefaultCodeRepository !== null
        ? output.DefaultCodeRepository
        : undefined,
    DirectInternetAccess:
      output.DirectInternetAccess !== undefined && output.DirectInternetAccess !== null
        ? output.DirectInternetAccess
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    NetworkInterfaceId:
      output.NetworkInterfaceId !== undefined && output.NetworkInterfaceId !== null
        ? output.NetworkInterfaceId
        : undefined,
    NotebookInstanceArn:
      output.NotebookInstanceArn !== undefined && output.NotebookInstanceArn !== null
        ? output.NotebookInstanceArn
        : undefined,
    NotebookInstanceLifecycleConfigName:
      output.NotebookInstanceLifecycleConfigName !== undefined && output.NotebookInstanceLifecycleConfigName !== null
        ? output.NotebookInstanceLifecycleConfigName
        : undefined,
    NotebookInstanceName:
      output.NotebookInstanceName !== undefined && output.NotebookInstanceName !== null
        ? output.NotebookInstanceName
        : undefined,
    NotebookInstanceStatus:
      output.NotebookInstanceStatus !== undefined && output.NotebookInstanceStatus !== null
        ? output.NotebookInstanceStatus
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    RootAccess: output.RootAccess !== undefined && output.RootAccess !== null ? output.RootAccess : undefined,
    SecurityGroups:
      output.SecurityGroups !== undefined && output.SecurityGroups !== null
        ? deserializeAws_json1_1SecurityGroupIds(output.SecurityGroups, context)
        : undefined,
    SubnetId: output.SubnetId !== undefined && output.SubnetId !== null ? output.SubnetId : undefined,
    Url: output.Url !== undefined && output.Url !== null ? output.Url : undefined,
    VolumeSizeInGB:
      output.VolumeSizeInGB !== undefined && output.VolumeSizeInGB !== null ? output.VolumeSizeInGB : undefined,
  } as any;
};

const deserializeAws_json1_1DescribePipelineDefinitionForExecutionResponse = (
  output: any,
  context: __SerdeContext
): DescribePipelineDefinitionForExecutionResponse => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    PipelineDefinition:
      output.PipelineDefinition !== undefined && output.PipelineDefinition !== null
        ? output.PipelineDefinition
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribePipelineExecutionResponse = (
  output: any,
  context: __SerdeContext
): DescribePipelineExecutionResponse => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
    PipelineExecutionArn:
      output.PipelineExecutionArn !== undefined && output.PipelineExecutionArn !== null
        ? output.PipelineExecutionArn
        : undefined,
    PipelineExecutionDescription:
      output.PipelineExecutionDescription !== undefined && output.PipelineExecutionDescription !== null
        ? output.PipelineExecutionDescription
        : undefined,
    PipelineExecutionDisplayName:
      output.PipelineExecutionDisplayName !== undefined && output.PipelineExecutionDisplayName !== null
        ? output.PipelineExecutionDisplayName
        : undefined,
    PipelineExecutionStatus:
      output.PipelineExecutionStatus !== undefined && output.PipelineExecutionStatus !== null
        ? output.PipelineExecutionStatus
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribePipelineResponse = (
  output: any,
  context: __SerdeContext
): DescribePipelineResponse => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    LastRunTime:
      output.LastRunTime !== undefined && output.LastRunTime !== null
        ? new Date(Math.round(output.LastRunTime * 1000))
        : undefined,
    PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
    PipelineDefinition:
      output.PipelineDefinition !== undefined && output.PipelineDefinition !== null
        ? output.PipelineDefinition
        : undefined,
    PipelineDescription:
      output.PipelineDescription !== undefined && output.PipelineDescription !== null
        ? output.PipelineDescription
        : undefined,
    PipelineDisplayName:
      output.PipelineDisplayName !== undefined && output.PipelineDisplayName !== null
        ? output.PipelineDisplayName
        : undefined,
    PipelineName: output.PipelineName !== undefined && output.PipelineName !== null ? output.PipelineName : undefined,
    PipelineStatus:
      output.PipelineStatus !== undefined && output.PipelineStatus !== null ? output.PipelineStatus : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeProcessingJobResponse = (
  output: any,
  context: __SerdeContext
): DescribeProcessingJobResponse => {
  return {
    AppSpecification:
      output.AppSpecification !== undefined && output.AppSpecification !== null
        ? deserializeAws_json1_1AppSpecification(output.AppSpecification, context)
        : undefined,
    AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1ProcessingEnvironmentMap(output.Environment, context)
        : undefined,
    ExitMessage: output.ExitMessage !== undefined && output.ExitMessage !== null ? output.ExitMessage : undefined,
    ExperimentConfig:
      output.ExperimentConfig !== undefined && output.ExperimentConfig !== null
        ? deserializeAws_json1_1ExperimentConfig(output.ExperimentConfig, context)
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    MonitoringScheduleArn:
      output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
        ? output.MonitoringScheduleArn
        : undefined,
    NetworkConfig:
      output.NetworkConfig !== undefined && output.NetworkConfig !== null
        ? deserializeAws_json1_1NetworkConfig(output.NetworkConfig, context)
        : undefined,
    ProcessingEndTime:
      output.ProcessingEndTime !== undefined && output.ProcessingEndTime !== null
        ? new Date(Math.round(output.ProcessingEndTime * 1000))
        : undefined,
    ProcessingInputs:
      output.ProcessingInputs !== undefined && output.ProcessingInputs !== null
        ? deserializeAws_json1_1ProcessingInputs(output.ProcessingInputs, context)
        : undefined,
    ProcessingJobArn:
      output.ProcessingJobArn !== undefined && output.ProcessingJobArn !== null ? output.ProcessingJobArn : undefined,
    ProcessingJobName:
      output.ProcessingJobName !== undefined && output.ProcessingJobName !== null
        ? output.ProcessingJobName
        : undefined,
    ProcessingJobStatus:
      output.ProcessingJobStatus !== undefined && output.ProcessingJobStatus !== null
        ? output.ProcessingJobStatus
        : undefined,
    ProcessingOutputConfig:
      output.ProcessingOutputConfig !== undefined && output.ProcessingOutputConfig !== null
        ? deserializeAws_json1_1ProcessingOutputConfig(output.ProcessingOutputConfig, context)
        : undefined,
    ProcessingResources:
      output.ProcessingResources !== undefined && output.ProcessingResources !== null
        ? deserializeAws_json1_1ProcessingResources(output.ProcessingResources, context)
        : undefined,
    ProcessingStartTime:
      output.ProcessingStartTime !== undefined && output.ProcessingStartTime !== null
        ? new Date(Math.round(output.ProcessingStartTime * 1000))
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    StoppingCondition:
      output.StoppingCondition !== undefined && output.StoppingCondition !== null
        ? deserializeAws_json1_1ProcessingStoppingCondition(output.StoppingCondition, context)
        : undefined,
    TrainingJobArn:
      output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeProjectOutput = (output: any, context: __SerdeContext): DescribeProjectOutput => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    ProjectArn: output.ProjectArn !== undefined && output.ProjectArn !== null ? output.ProjectArn : undefined,
    ProjectDescription:
      output.ProjectDescription !== undefined && output.ProjectDescription !== null
        ? output.ProjectDescription
        : undefined,
    ProjectId: output.ProjectId !== undefined && output.ProjectId !== null ? output.ProjectId : undefined,
    ProjectName: output.ProjectName !== undefined && output.ProjectName !== null ? output.ProjectName : undefined,
    ProjectStatus:
      output.ProjectStatus !== undefined && output.ProjectStatus !== null ? output.ProjectStatus : undefined,
    ServiceCatalogProvisionedProductDetails:
      output.ServiceCatalogProvisionedProductDetails !== undefined &&
      output.ServiceCatalogProvisionedProductDetails !== null
        ? deserializeAws_json1_1ServiceCatalogProvisionedProductDetails(
            output.ServiceCatalogProvisionedProductDetails,
            context
          )
        : undefined,
    ServiceCatalogProvisioningDetails:
      output.ServiceCatalogProvisioningDetails !== undefined && output.ServiceCatalogProvisioningDetails !== null
        ? deserializeAws_json1_1ServiceCatalogProvisioningDetails(output.ServiceCatalogProvisioningDetails, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeSubscribedWorkteamResponse = (
  output: any,
  context: __SerdeContext
): DescribeSubscribedWorkteamResponse => {
  return {
    SubscribedWorkteam:
      output.SubscribedWorkteam !== undefined && output.SubscribedWorkteam !== null
        ? deserializeAws_json1_1SubscribedWorkteam(output.SubscribedWorkteam, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeTrainingJobResponse = (
  output: any,
  context: __SerdeContext
): DescribeTrainingJobResponse => {
  return {
    AlgorithmSpecification:
      output.AlgorithmSpecification !== undefined && output.AlgorithmSpecification !== null
        ? deserializeAws_json1_1AlgorithmSpecification(output.AlgorithmSpecification, context)
        : undefined,
    AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
    BillableTimeInSeconds:
      output.BillableTimeInSeconds !== undefined && output.BillableTimeInSeconds !== null
        ? output.BillableTimeInSeconds
        : undefined,
    CheckpointConfig:
      output.CheckpointConfig !== undefined && output.CheckpointConfig !== null
        ? deserializeAws_json1_1CheckpointConfig(output.CheckpointConfig, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DebugHookConfig:
      output.DebugHookConfig !== undefined && output.DebugHookConfig !== null
        ? deserializeAws_json1_1DebugHookConfig(output.DebugHookConfig, context)
        : undefined,
    DebugRuleConfigurations:
      output.DebugRuleConfigurations !== undefined && output.DebugRuleConfigurations !== null
        ? deserializeAws_json1_1DebugRuleConfigurations(output.DebugRuleConfigurations, context)
        : undefined,
    DebugRuleEvaluationStatuses:
      output.DebugRuleEvaluationStatuses !== undefined && output.DebugRuleEvaluationStatuses !== null
        ? deserializeAws_json1_1DebugRuleEvaluationStatuses(output.DebugRuleEvaluationStatuses, context)
        : undefined,
    EnableInterContainerTrafficEncryption:
      output.EnableInterContainerTrafficEncryption !== undefined &&
      output.EnableInterContainerTrafficEncryption !== null
        ? output.EnableInterContainerTrafficEncryption
        : undefined,
    EnableManagedSpotTraining:
      output.EnableManagedSpotTraining !== undefined && output.EnableManagedSpotTraining !== null
        ? output.EnableManagedSpotTraining
        : undefined,
    EnableNetworkIsolation:
      output.EnableNetworkIsolation !== undefined && output.EnableNetworkIsolation !== null
        ? output.EnableNetworkIsolation
        : undefined,
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1TrainingEnvironmentMap(output.Environment, context)
        : undefined,
    ExperimentConfig:
      output.ExperimentConfig !== undefined && output.ExperimentConfig !== null
        ? deserializeAws_json1_1ExperimentConfig(output.ExperimentConfig, context)
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    FinalMetricDataList:
      output.FinalMetricDataList !== undefined && output.FinalMetricDataList !== null
        ? deserializeAws_json1_1FinalMetricDataList(output.FinalMetricDataList, context)
        : undefined,
    HyperParameters:
      output.HyperParameters !== undefined && output.HyperParameters !== null
        ? deserializeAws_json1_1HyperParameters(output.HyperParameters, context)
        : undefined,
    InputDataConfig:
      output.InputDataConfig !== undefined && output.InputDataConfig !== null
        ? deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context)
        : undefined,
    LabelingJobArn:
      output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    ModelArtifacts:
      output.ModelArtifacts !== undefined && output.ModelArtifacts !== null
        ? deserializeAws_json1_1ModelArtifacts(output.ModelArtifacts, context)
        : undefined,
    OutputDataConfig:
      output.OutputDataConfig !== undefined && output.OutputDataConfig !== null
        ? deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context)
        : undefined,
    ProfilerConfig:
      output.ProfilerConfig !== undefined && output.ProfilerConfig !== null
        ? deserializeAws_json1_1ProfilerConfig(output.ProfilerConfig, context)
        : undefined,
    ProfilerRuleConfigurations:
      output.ProfilerRuleConfigurations !== undefined && output.ProfilerRuleConfigurations !== null
        ? deserializeAws_json1_1ProfilerRuleConfigurations(output.ProfilerRuleConfigurations, context)
        : undefined,
    ProfilerRuleEvaluationStatuses:
      output.ProfilerRuleEvaluationStatuses !== undefined && output.ProfilerRuleEvaluationStatuses !== null
        ? deserializeAws_json1_1ProfilerRuleEvaluationStatuses(output.ProfilerRuleEvaluationStatuses, context)
        : undefined,
    ProfilingStatus:
      output.ProfilingStatus !== undefined && output.ProfilingStatus !== null ? output.ProfilingStatus : undefined,
    ResourceConfig:
      output.ResourceConfig !== undefined && output.ResourceConfig !== null
        ? deserializeAws_json1_1ResourceConfig(output.ResourceConfig, context)
        : undefined,
    RetryStrategy:
      output.RetryStrategy !== undefined && output.RetryStrategy !== null
        ? deserializeAws_json1_1RetryStrategy(output.RetryStrategy, context)
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    SecondaryStatus:
      output.SecondaryStatus !== undefined && output.SecondaryStatus !== null ? output.SecondaryStatus : undefined,
    SecondaryStatusTransitions:
      output.SecondaryStatusTransitions !== undefined && output.SecondaryStatusTransitions !== null
        ? deserializeAws_json1_1SecondaryStatusTransitions(output.SecondaryStatusTransitions, context)
        : undefined,
    StoppingCondition:
      output.StoppingCondition !== undefined && output.StoppingCondition !== null
        ? deserializeAws_json1_1StoppingCondition(output.StoppingCondition, context)
        : undefined,
    TensorBoardOutputConfig:
      output.TensorBoardOutputConfig !== undefined && output.TensorBoardOutputConfig !== null
        ? deserializeAws_json1_1TensorBoardOutputConfig(output.TensorBoardOutputConfig, context)
        : undefined,
    TrainingEndTime:
      output.TrainingEndTime !== undefined && output.TrainingEndTime !== null
        ? new Date(Math.round(output.TrainingEndTime * 1000))
        : undefined,
    TrainingJobArn:
      output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
    TrainingJobName:
      output.TrainingJobName !== undefined && output.TrainingJobName !== null ? output.TrainingJobName : undefined,
    TrainingJobStatus:
      output.TrainingJobStatus !== undefined && output.TrainingJobStatus !== null
        ? output.TrainingJobStatus
        : undefined,
    TrainingStartTime:
      output.TrainingStartTime !== undefined && output.TrainingStartTime !== null
        ? new Date(Math.round(output.TrainingStartTime * 1000))
        : undefined,
    TrainingTimeInSeconds:
      output.TrainingTimeInSeconds !== undefined && output.TrainingTimeInSeconds !== null
        ? output.TrainingTimeInSeconds
        : undefined,
    TuningJobArn: output.TuningJobArn !== undefined && output.TuningJobArn !== null ? output.TuningJobArn : undefined,
    VpcConfig:
      output.VpcConfig !== undefined && output.VpcConfig !== null
        ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeTransformJobResponse = (
  output: any,
  context: __SerdeContext
): DescribeTransformJobResponse => {
  return {
    AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
    BatchStrategy:
      output.BatchStrategy !== undefined && output.BatchStrategy !== null ? output.BatchStrategy : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DataProcessing:
      output.DataProcessing !== undefined && output.DataProcessing !== null
        ? deserializeAws_json1_1DataProcessing(output.DataProcessing, context)
        : undefined,
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1TransformEnvironmentMap(output.Environment, context)
        : undefined,
    ExperimentConfig:
      output.ExperimentConfig !== undefined && output.ExperimentConfig !== null
        ? deserializeAws_json1_1ExperimentConfig(output.ExperimentConfig, context)
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    LabelingJobArn:
      output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
    MaxConcurrentTransforms:
      output.MaxConcurrentTransforms !== undefined && output.MaxConcurrentTransforms !== null
        ? output.MaxConcurrentTransforms
        : undefined,
    MaxPayloadInMB:
      output.MaxPayloadInMB !== undefined && output.MaxPayloadInMB !== null ? output.MaxPayloadInMB : undefined,
    ModelClientConfig:
      output.ModelClientConfig !== undefined && output.ModelClientConfig !== null
        ? deserializeAws_json1_1ModelClientConfig(output.ModelClientConfig, context)
        : undefined,
    ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
    TransformEndTime:
      output.TransformEndTime !== undefined && output.TransformEndTime !== null
        ? new Date(Math.round(output.TransformEndTime * 1000))
        : undefined,
    TransformInput:
      output.TransformInput !== undefined && output.TransformInput !== null
        ? deserializeAws_json1_1TransformInput(output.TransformInput, context)
        : undefined,
    TransformJobArn:
      output.TransformJobArn !== undefined && output.TransformJobArn !== null ? output.TransformJobArn : undefined,
    TransformJobName:
      output.TransformJobName !== undefined && output.TransformJobName !== null ? output.TransformJobName : undefined,
    TransformJobStatus:
      output.TransformJobStatus !== undefined && output.TransformJobStatus !== null
        ? output.TransformJobStatus
        : undefined,
    TransformOutput:
      output.TransformOutput !== undefined && output.TransformOutput !== null
        ? deserializeAws_json1_1TransformOutput(output.TransformOutput, context)
        : undefined,
    TransformResources:
      output.TransformResources !== undefined && output.TransformResources !== null
        ? deserializeAws_json1_1TransformResources(output.TransformResources, context)
        : undefined,
    TransformStartTime:
      output.TransformStartTime !== undefined && output.TransformStartTime !== null
        ? new Date(Math.round(output.TransformStartTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeTrialComponentResponse = (
  output: any,
  context: __SerdeContext
): DescribeTrialComponentResponse => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
    EndTime:
      output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
    InputArtifacts:
      output.InputArtifacts !== undefined && output.InputArtifacts !== null
        ? deserializeAws_json1_1TrialComponentArtifacts(output.InputArtifacts, context)
        : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    MetadataProperties:
      output.MetadataProperties !== undefined && output.MetadataProperties !== null
        ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
        : undefined,
    Metrics:
      output.Metrics !== undefined && output.Metrics !== null
        ? deserializeAws_json1_1TrialComponentMetricSummaries(output.Metrics, context)
        : undefined,
    OutputArtifacts:
      output.OutputArtifacts !== undefined && output.OutputArtifacts !== null
        ? deserializeAws_json1_1TrialComponentArtifacts(output.OutputArtifacts, context)
        : undefined,
    Parameters:
      output.Parameters !== undefined && output.Parameters !== null
        ? deserializeAws_json1_1TrialComponentParameters(output.Parameters, context)
        : undefined,
    Source:
      output.Source !== undefined && output.Source !== null
        ? deserializeAws_json1_1TrialComponentSource(output.Source, context)
        : undefined,
    StartTime:
      output.StartTime !== undefined && output.StartTime !== null
        ? new Date(Math.round(output.StartTime * 1000))
        : undefined,
    Status:
      output.Status !== undefined && output.Status !== null
        ? deserializeAws_json1_1TrialComponentStatus(output.Status, context)
        : undefined,
    TrialComponentArn:
      output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
        ? output.TrialComponentArn
        : undefined,
    TrialComponentName:
      output.TrialComponentName !== undefined && output.TrialComponentName !== null
        ? output.TrialComponentName
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeTrialResponse = (output: any, context: __SerdeContext): DescribeTrialResponse => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
    ExperimentName:
      output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    MetadataProperties:
      output.MetadataProperties !== undefined && output.MetadataProperties !== null
        ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
        : undefined,
    Source:
      output.Source !== undefined && output.Source !== null
        ? deserializeAws_json1_1TrialSource(output.Source, context)
        : undefined,
    TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
    TrialName: output.TrialName !== undefined && output.TrialName !== null ? output.TrialName : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeUserProfileResponse = (
  output: any,
  context: __SerdeContext
): DescribeUserProfileResponse => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    HomeEfsFileSystemUid:
      output.HomeEfsFileSystemUid !== undefined && output.HomeEfsFileSystemUid !== null
        ? output.HomeEfsFileSystemUid
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    SingleSignOnUserIdentifier:
      output.SingleSignOnUserIdentifier !== undefined && output.SingleSignOnUserIdentifier !== null
        ? output.SingleSignOnUserIdentifier
        : undefined,
    SingleSignOnUserValue:
      output.SingleSignOnUserValue !== undefined && output.SingleSignOnUserValue !== null
        ? output.SingleSignOnUserValue
        : undefined,
    Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
    UserProfileArn:
      output.UserProfileArn !== undefined && output.UserProfileArn !== null ? output.UserProfileArn : undefined,
    UserProfileName:
      output.UserProfileName !== undefined && output.UserProfileName !== null ? output.UserProfileName : undefined,
    UserSettings:
      output.UserSettings !== undefined && output.UserSettings !== null
        ? deserializeAws_json1_1UserSettings(output.UserSettings, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeWorkforceResponse = (
  output: any,
  context: __SerdeContext
): DescribeWorkforceResponse => {
  return {
    Workforce:
      output.Workforce !== undefined && output.Workforce !== null
        ? deserializeAws_json1_1Workforce(output.Workforce, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DescribeWorkteamResponse = (
  output: any,
  context: __SerdeContext
): DescribeWorkteamResponse => {
  return {
    Workteam:
      output.Workteam !== undefined && output.Workteam !== null
        ? deserializeAws_json1_1Workteam(output.Workteam, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1DeviceFleetSummaries = (output: any, context: __SerdeContext): DeviceFleetSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1DeviceFleetSummary(entry, context);
    });
};

const deserializeAws_json1_1DeviceFleetSummary = (output: any, context: __SerdeContext): DeviceFleetSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DeviceFleetArn:
      output.DeviceFleetArn !== undefined && output.DeviceFleetArn !== null ? output.DeviceFleetArn : undefined,
    DeviceFleetName:
      output.DeviceFleetName !== undefined && output.DeviceFleetName !== null ? output.DeviceFleetName : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1DeviceStats = (output: any, context: __SerdeContext): DeviceStats => {
  return {
    ConnectedDeviceCount:
      output.ConnectedDeviceCount !== undefined && output.ConnectedDeviceCount !== null
        ? output.ConnectedDeviceCount
        : undefined,
    RegisteredDeviceCount:
      output.RegisteredDeviceCount !== undefined && output.RegisteredDeviceCount !== null
        ? output.RegisteredDeviceCount
        : undefined,
  } as any;
};

const deserializeAws_json1_1DeviceSummaries = (output: any, context: __SerdeContext): DeviceSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1DeviceSummary(entry, context);
    });
};

const deserializeAws_json1_1DeviceSummary = (output: any, context: __SerdeContext): DeviceSummary => {
  return {
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    DeviceArn: output.DeviceArn !== undefined && output.DeviceArn !== null ? output.DeviceArn : undefined,
    DeviceFleetName:
      output.DeviceFleetName !== undefined && output.DeviceFleetName !== null ? output.DeviceFleetName : undefined,
    DeviceName: output.DeviceName !== undefined && output.DeviceName !== null ? output.DeviceName : undefined,
    IotThingName: output.IotThingName !== undefined && output.IotThingName !== null ? output.IotThingName : undefined,
    LatestHeartbeat:
      output.LatestHeartbeat !== undefined && output.LatestHeartbeat !== null
        ? new Date(Math.round(output.LatestHeartbeat * 1000))
        : undefined,
    Models:
      output.Models !== undefined && output.Models !== null
        ? deserializeAws_json1_1EdgeModelSummaries(output.Models, context)
        : undefined,
    RegistrationTime:
      output.RegistrationTime !== undefined && output.RegistrationTime !== null
        ? new Date(Math.round(output.RegistrationTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1DisableSagemakerServicecatalogPortfolioOutput = (
  output: any,
  context: __SerdeContext
): DisableSagemakerServicecatalogPortfolioOutput => {
  return {} as any;
};

const deserializeAws_json1_1DisassociateTrialComponentResponse = (
  output: any,
  context: __SerdeContext
): DisassociateTrialComponentResponse => {
  return {
    TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
    TrialComponentArn:
      output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
        ? output.TrialComponentArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1DomainDetails = (output: any, context: __SerdeContext): DomainDetails => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DomainArn: output.DomainArn !== undefined && output.DomainArn !== null ? output.DomainArn : undefined,
    DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
    DomainName: output.DomainName !== undefined && output.DomainName !== null ? output.DomainName : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
    Url: output.Url !== undefined && output.Url !== null ? output.Url : undefined,
  } as any;
};

const deserializeAws_json1_1DomainList = (output: any, context: __SerdeContext): DomainDetails[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1DomainDetails(entry, context);
    });
};

const deserializeAws_json1_1EdgeModel = (output: any, context: __SerdeContext): EdgeModel => {
  return {
    LatestInference:
      output.LatestInference !== undefined && output.LatestInference !== null
        ? new Date(Math.round(output.LatestInference * 1000))
        : undefined,
    LatestSampleTime:
      output.LatestSampleTime !== undefined && output.LatestSampleTime !== null
        ? new Date(Math.round(output.LatestSampleTime * 1000))
        : undefined,
    ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
    ModelVersion: output.ModelVersion !== undefined && output.ModelVersion !== null ? output.ModelVersion : undefined,
  } as any;
};

const deserializeAws_json1_1EdgeModels = (output: any, context: __SerdeContext): EdgeModel[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1EdgeModel(entry, context);
    });
};

const deserializeAws_json1_1EdgeModelStat = (output: any, context: __SerdeContext): EdgeModelStat => {
  return {
    ActiveDeviceCount:
      output.ActiveDeviceCount !== undefined && output.ActiveDeviceCount !== null
        ? output.ActiveDeviceCount
        : undefined,
    ConnectedDeviceCount:
      output.ConnectedDeviceCount !== undefined && output.ConnectedDeviceCount !== null
        ? output.ConnectedDeviceCount
        : undefined,
    ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
    ModelVersion: output.ModelVersion !== undefined && output.ModelVersion !== null ? output.ModelVersion : undefined,
    OfflineDeviceCount:
      output.OfflineDeviceCount !== undefined && output.OfflineDeviceCount !== null
        ? output.OfflineDeviceCount
        : undefined,
    SamplingDeviceCount:
      output.SamplingDeviceCount !== undefined && output.SamplingDeviceCount !== null
        ? output.SamplingDeviceCount
        : undefined,
  } as any;
};

const deserializeAws_json1_1EdgeModelStats = (output: any, context: __SerdeContext): EdgeModelStat[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1EdgeModelStat(entry, context);
    });
};

const deserializeAws_json1_1EdgeModelSummaries = (output: any, context: __SerdeContext): EdgeModelSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1EdgeModelSummary(entry, context);
    });
};

const deserializeAws_json1_1EdgeModelSummary = (output: any, context: __SerdeContext): EdgeModelSummary => {
  return {
    ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
    ModelVersion: output.ModelVersion !== undefined && output.ModelVersion !== null ? output.ModelVersion : undefined,
  } as any;
};

const deserializeAws_json1_1EdgeOutputConfig = (output: any, context: __SerdeContext): EdgeOutputConfig => {
  return {
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    S3OutputLocation:
      output.S3OutputLocation !== undefined && output.S3OutputLocation !== null ? output.S3OutputLocation : undefined,
  } as any;
};

const deserializeAws_json1_1EdgePackagingJobSummaries = (
  output: any,
  context: __SerdeContext
): EdgePackagingJobSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1EdgePackagingJobSummary(entry, context);
    });
};

const deserializeAws_json1_1EdgePackagingJobSummary = (
  output: any,
  context: __SerdeContext
): EdgePackagingJobSummary => {
  return {
    CompilationJobName:
      output.CompilationJobName !== undefined && output.CompilationJobName !== null
        ? output.CompilationJobName
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    EdgePackagingJobArn:
      output.EdgePackagingJobArn !== undefined && output.EdgePackagingJobArn !== null
        ? output.EdgePackagingJobArn
        : undefined,
    EdgePackagingJobName:
      output.EdgePackagingJobName !== undefined && output.EdgePackagingJobName !== null
        ? output.EdgePackagingJobName
        : undefined,
    EdgePackagingJobStatus:
      output.EdgePackagingJobStatus !== undefined && output.EdgePackagingJobStatus !== null
        ? output.EdgePackagingJobStatus
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
    ModelVersion: output.ModelVersion !== undefined && output.ModelVersion !== null ? output.ModelVersion : undefined,
  } as any;
};

const deserializeAws_json1_1EnableSagemakerServicecatalogPortfolioOutput = (
  output: any,
  context: __SerdeContext
): EnableSagemakerServicecatalogPortfolioOutput => {
  return {} as any;
};

const deserializeAws_json1_1Endpoint = (output: any, context: __SerdeContext): Endpoint => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DataCaptureConfig:
      output.DataCaptureConfig !== undefined && output.DataCaptureConfig !== null
        ? deserializeAws_json1_1DataCaptureConfigSummary(output.DataCaptureConfig, context)
        : undefined,
    EndpointArn: output.EndpointArn !== undefined && output.EndpointArn !== null ? output.EndpointArn : undefined,
    EndpointConfigName:
      output.EndpointConfigName !== undefined && output.EndpointConfigName !== null
        ? output.EndpointConfigName
        : undefined,
    EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
    EndpointStatus:
      output.EndpointStatus !== undefined && output.EndpointStatus !== null ? output.EndpointStatus : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    MonitoringSchedules:
      output.MonitoringSchedules !== undefined && output.MonitoringSchedules !== null
        ? deserializeAws_json1_1MonitoringScheduleList(output.MonitoringSchedules, context)
        : undefined,
    ProductionVariants:
      output.ProductionVariants !== undefined && output.ProductionVariants !== null
        ? deserializeAws_json1_1ProductionVariantSummaryList(output.ProductionVariants, context)
        : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1EndpointConfigSummary = (output: any, context: __SerdeContext): EndpointConfigSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    EndpointConfigArn:
      output.EndpointConfigArn !== undefined && output.EndpointConfigArn !== null
        ? output.EndpointConfigArn
        : undefined,
    EndpointConfigName:
      output.EndpointConfigName !== undefined && output.EndpointConfigName !== null
        ? output.EndpointConfigName
        : undefined,
  } as any;
};

const deserializeAws_json1_1EndpointConfigSummaryList = (
  output: any,
  context: __SerdeContext
): EndpointConfigSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1EndpointConfigSummary(entry, context);
    });
};

const deserializeAws_json1_1EndpointInput = (output: any, context: __SerdeContext): EndpointInput => {
  return {
    EndTimeOffset:
      output.EndTimeOffset !== undefined && output.EndTimeOffset !== null ? output.EndTimeOffset : undefined,
    EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
    FeaturesAttribute:
      output.FeaturesAttribute !== undefined && output.FeaturesAttribute !== null
        ? output.FeaturesAttribute
        : undefined,
    InferenceAttribute:
      output.InferenceAttribute !== undefined && output.InferenceAttribute !== null
        ? output.InferenceAttribute
        : undefined,
    LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
    ProbabilityAttribute:
      output.ProbabilityAttribute !== undefined && output.ProbabilityAttribute !== null
        ? output.ProbabilityAttribute
        : undefined,
    ProbabilityThresholdAttribute:
      output.ProbabilityThresholdAttribute !== undefined && output.ProbabilityThresholdAttribute !== null
        ? output.ProbabilityThresholdAttribute
        : undefined,
    S3DataDistributionType:
      output.S3DataDistributionType !== undefined && output.S3DataDistributionType !== null
        ? output.S3DataDistributionType
        : undefined,
    S3InputMode: output.S3InputMode !== undefined && output.S3InputMode !== null ? output.S3InputMode : undefined,
    StartTimeOffset:
      output.StartTimeOffset !== undefined && output.StartTimeOffset !== null ? output.StartTimeOffset : undefined,
  } as any;
};

const deserializeAws_json1_1EndpointSummary = (output: any, context: __SerdeContext): EndpointSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    EndpointArn: output.EndpointArn !== undefined && output.EndpointArn !== null ? output.EndpointArn : undefined,
    EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
    EndpointStatus:
      output.EndpointStatus !== undefined && output.EndpointStatus !== null ? output.EndpointStatus : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1EndpointSummaryList = (output: any, context: __SerdeContext): EndpointSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1EndpointSummary(entry, context);
    });
};

const deserializeAws_json1_1EnvironmentMap = (output: any, context: __SerdeContext): { [key: string]: string } => {
  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const deserializeAws_json1_1Experiment = (output: any, context: __SerdeContext): Experiment => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
    ExperimentArn:
      output.ExperimentArn !== undefined && output.ExperimentArn !== null ? output.ExperimentArn : undefined,
    ExperimentName:
      output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    Source:
      output.Source !== undefined && output.Source !== null
        ? deserializeAws_json1_1ExperimentSource(output.Source, context)
        : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ExperimentConfig = (output: any, context: __SerdeContext): ExperimentConfig => {
  return {
    ExperimentName:
      output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
    TrialComponentDisplayName:
      output.TrialComponentDisplayName !== undefined && output.TrialComponentDisplayName !== null
        ? output.TrialComponentDisplayName
        : undefined,
    TrialName: output.TrialName !== undefined && output.TrialName !== null ? output.TrialName : undefined,
  } as any;
};

const deserializeAws_json1_1ExperimentSource = (output: any, context: __SerdeContext): ExperimentSource => {
  return {
    SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
    SourceType: output.SourceType !== undefined && output.SourceType !== null ? output.SourceType : undefined,
  } as any;
};

const deserializeAws_json1_1ExperimentSummaries = (output: any, context: __SerdeContext): ExperimentSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ExperimentSummary(entry, context);
    });
};

const deserializeAws_json1_1ExperimentSummary = (output: any, context: __SerdeContext): ExperimentSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
    ExperimentArn:
      output.ExperimentArn !== undefined && output.ExperimentArn !== null ? output.ExperimentArn : undefined,
    ExperimentName:
      output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
    ExperimentSource:
      output.ExperimentSource !== undefined && output.ExperimentSource !== null
        ? deserializeAws_json1_1ExperimentSource(output.ExperimentSource, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1Explainability = (output: any, context: __SerdeContext): Explainability => {
  return {
    Report:
      output.Report !== undefined && output.Report !== null
        ? deserializeAws_json1_1MetricsSource(output.Report, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1FeatureDefinition = (output: any, context: __SerdeContext): FeatureDefinition => {
  return {
    FeatureName: output.FeatureName !== undefined && output.FeatureName !== null ? output.FeatureName : undefined,
    FeatureType: output.FeatureType !== undefined && output.FeatureType !== null ? output.FeatureType : undefined,
  } as any;
};

const deserializeAws_json1_1FeatureDefinitions = (output: any, context: __SerdeContext): FeatureDefinition[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1FeatureDefinition(entry, context);
    });
};

const deserializeAws_json1_1FeatureGroup = (output: any, context: __SerdeContext): FeatureGroup => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    EventTimeFeatureName:
      output.EventTimeFeatureName !== undefined && output.EventTimeFeatureName !== null
        ? output.EventTimeFeatureName
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    FeatureDefinitions:
      output.FeatureDefinitions !== undefined && output.FeatureDefinitions !== null
        ? deserializeAws_json1_1FeatureDefinitions(output.FeatureDefinitions, context)
        : undefined,
    FeatureGroupArn:
      output.FeatureGroupArn !== undefined && output.FeatureGroupArn !== null ? output.FeatureGroupArn : undefined,
    FeatureGroupName:
      output.FeatureGroupName !== undefined && output.FeatureGroupName !== null ? output.FeatureGroupName : undefined,
    FeatureGroupStatus:
      output.FeatureGroupStatus !== undefined && output.FeatureGroupStatus !== null
        ? output.FeatureGroupStatus
        : undefined,
    OfflineStoreConfig:
      output.OfflineStoreConfig !== undefined && output.OfflineStoreConfig !== null
        ? deserializeAws_json1_1OfflineStoreConfig(output.OfflineStoreConfig, context)
        : undefined,
    OfflineStoreStatus:
      output.OfflineStoreStatus !== undefined && output.OfflineStoreStatus !== null
        ? deserializeAws_json1_1OfflineStoreStatus(output.OfflineStoreStatus, context)
        : undefined,
    OnlineStoreConfig:
      output.OnlineStoreConfig !== undefined && output.OnlineStoreConfig !== null
        ? deserializeAws_json1_1OnlineStoreConfig(output.OnlineStoreConfig, context)
        : undefined,
    RecordIdentifierFeatureName:
      output.RecordIdentifierFeatureName !== undefined && output.RecordIdentifierFeatureName !== null
        ? output.RecordIdentifierFeatureName
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1FeatureGroupSummaries = (output: any, context: __SerdeContext): FeatureGroupSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1FeatureGroupSummary(entry, context);
    });
};

const deserializeAws_json1_1FeatureGroupSummary = (output: any, context: __SerdeContext): FeatureGroupSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    FeatureGroupArn:
      output.FeatureGroupArn !== undefined && output.FeatureGroupArn !== null ? output.FeatureGroupArn : undefined,
    FeatureGroupName:
      output.FeatureGroupName !== undefined && output.FeatureGroupName !== null ? output.FeatureGroupName : undefined,
    FeatureGroupStatus:
      output.FeatureGroupStatus !== undefined && output.FeatureGroupStatus !== null
        ? output.FeatureGroupStatus
        : undefined,
    OfflineStoreStatus:
      output.OfflineStoreStatus !== undefined && output.OfflineStoreStatus !== null
        ? deserializeAws_json1_1OfflineStoreStatus(output.OfflineStoreStatus, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1FileSystemConfig = (output: any, context: __SerdeContext): FileSystemConfig => {
  return {
    DefaultGid: output.DefaultGid !== undefined && output.DefaultGid !== null ? output.DefaultGid : undefined,
    DefaultUid: output.DefaultUid !== undefined && output.DefaultUid !== null ? output.DefaultUid : undefined,
    MountPath: output.MountPath !== undefined && output.MountPath !== null ? output.MountPath : undefined,
  } as any;
};

const deserializeAws_json1_1FileSystemDataSource = (output: any, context: __SerdeContext): FileSystemDataSource => {
  return {
    DirectoryPath:
      output.DirectoryPath !== undefined && output.DirectoryPath !== null ? output.DirectoryPath : undefined,
    FileSystemAccessMode:
      output.FileSystemAccessMode !== undefined && output.FileSystemAccessMode !== null
        ? output.FileSystemAccessMode
        : undefined,
    FileSystemId: output.FileSystemId !== undefined && output.FileSystemId !== null ? output.FileSystemId : undefined,
    FileSystemType:
      output.FileSystemType !== undefined && output.FileSystemType !== null ? output.FileSystemType : undefined,
  } as any;
};

const deserializeAws_json1_1FinalAutoMLJobObjectiveMetric = (
  output: any,
  context: __SerdeContext
): FinalAutoMLJobObjectiveMetric => {
  return {
    MetricName: output.MetricName !== undefined && output.MetricName !== null ? output.MetricName : undefined,
    Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined,
    Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
  } as any;
};

const deserializeAws_json1_1FinalHyperParameterTuningJobObjectiveMetric = (
  output: any,
  context: __SerdeContext
): FinalHyperParameterTuningJobObjectiveMetric => {
  return {
    MetricName: output.MetricName !== undefined && output.MetricName !== null ? output.MetricName : undefined,
    Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined,
    Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
  } as any;
};

const deserializeAws_json1_1FinalMetricDataList = (output: any, context: __SerdeContext): MetricData[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1MetricData(entry, context);
    });
};

const deserializeAws_json1_1FlowDefinitionOutputConfig = (
  output: any,
  context: __SerdeContext
): FlowDefinitionOutputConfig => {
  return {
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
  } as any;
};

const deserializeAws_json1_1FlowDefinitionSummaries = (
  output: any,
  context: __SerdeContext
): FlowDefinitionSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1FlowDefinitionSummary(entry, context);
    });
};

const deserializeAws_json1_1FlowDefinitionSummary = (output: any, context: __SerdeContext): FlowDefinitionSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    FlowDefinitionArn:
      output.FlowDefinitionArn !== undefined && output.FlowDefinitionArn !== null
        ? output.FlowDefinitionArn
        : undefined,
    FlowDefinitionName:
      output.FlowDefinitionName !== undefined && output.FlowDefinitionName !== null
        ? output.FlowDefinitionName
        : undefined,
    FlowDefinitionStatus:
      output.FlowDefinitionStatus !== undefined && output.FlowDefinitionStatus !== null
        ? output.FlowDefinitionStatus
        : undefined,
  } as any;
};

const deserializeAws_json1_1FlowDefinitionTaskKeywords = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1GetDeviceFleetReportResponse = (
  output: any,
  context: __SerdeContext
): GetDeviceFleetReportResponse => {
  return {
    AgentVersions:
      output.AgentVersions !== undefined && output.AgentVersions !== null
        ? deserializeAws_json1_1AgentVersions(output.AgentVersions, context)
        : undefined,
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    DeviceFleetArn:
      output.DeviceFleetArn !== undefined && output.DeviceFleetArn !== null ? output.DeviceFleetArn : undefined,
    DeviceFleetName:
      output.DeviceFleetName !== undefined && output.DeviceFleetName !== null ? output.DeviceFleetName : undefined,
    DeviceStats:
      output.DeviceStats !== undefined && output.DeviceStats !== null
        ? deserializeAws_json1_1DeviceStats(output.DeviceStats, context)
        : undefined,
    ModelStats:
      output.ModelStats !== undefined && output.ModelStats !== null
        ? deserializeAws_json1_1EdgeModelStats(output.ModelStats, context)
        : undefined,
    OutputConfig:
      output.OutputConfig !== undefined && output.OutputConfig !== null
        ? deserializeAws_json1_1EdgeOutputConfig(output.OutputConfig, context)
        : undefined,
    ReportGenerated:
      output.ReportGenerated !== undefined && output.ReportGenerated !== null
        ? new Date(Math.round(output.ReportGenerated * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1GetModelPackageGroupPolicyOutput = (
  output: any,
  context: __SerdeContext
): GetModelPackageGroupPolicyOutput => {
  return {
    ResourcePolicy:
      output.ResourcePolicy !== undefined && output.ResourcePolicy !== null ? output.ResourcePolicy : undefined,
  } as any;
};

const deserializeAws_json1_1GetSagemakerServicecatalogPortfolioStatusOutput = (
  output: any,
  context: __SerdeContext
): GetSagemakerServicecatalogPortfolioStatusOutput => {
  return {
    Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
  } as any;
};

const deserializeAws_json1_1GetSearchSuggestionsResponse = (
  output: any,
  context: __SerdeContext
): GetSearchSuggestionsResponse => {
  return {
    PropertyNameSuggestions:
      output.PropertyNameSuggestions !== undefined && output.PropertyNameSuggestions !== null
        ? deserializeAws_json1_1PropertyNameSuggestionList(output.PropertyNameSuggestions, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1GitConfig = (output: any, context: __SerdeContext): GitConfig => {
  return {
    Branch: output.Branch !== undefined && output.Branch !== null ? output.Branch : undefined,
    RepositoryUrl:
      output.RepositoryUrl !== undefined && output.RepositoryUrl !== null ? output.RepositoryUrl : undefined,
    SecretArn: output.SecretArn !== undefined && output.SecretArn !== null ? output.SecretArn : undefined,
  } as any;
};

const deserializeAws_json1_1Groups = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1HookParameters = (output: any, context: __SerdeContext): { [key: string]: string } => {
  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const deserializeAws_json1_1HumanLoopActivationConditionsConfig = (
  output: any,
  context: __SerdeContext
): HumanLoopActivationConditionsConfig => {
  return {
    HumanLoopActivationConditions:
      output.HumanLoopActivationConditions !== undefined && output.HumanLoopActivationConditions !== null
        ? new __LazyJsonString(output.HumanLoopActivationConditions)
        : undefined,
  } as any;
};

const deserializeAws_json1_1HumanLoopActivationConfig = (
  output: any,
  context: __SerdeContext
): HumanLoopActivationConfig => {
  return {
    HumanLoopActivationConditionsConfig:
      output.HumanLoopActivationConditionsConfig !== undefined && output.HumanLoopActivationConditionsConfig !== null
        ? deserializeAws_json1_1HumanLoopActivationConditionsConfig(output.HumanLoopActivationConditionsConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1HumanLoopConfig = (output: any, context: __SerdeContext): HumanLoopConfig => {
  return {
    HumanTaskUiArn:
      output.HumanTaskUiArn !== undefined && output.HumanTaskUiArn !== null ? output.HumanTaskUiArn : undefined,
    PublicWorkforceTaskPrice:
      output.PublicWorkforceTaskPrice !== undefined && output.PublicWorkforceTaskPrice !== null
        ? deserializeAws_json1_1PublicWorkforceTaskPrice(output.PublicWorkforceTaskPrice, context)
        : undefined,
    TaskAvailabilityLifetimeInSeconds:
      output.TaskAvailabilityLifetimeInSeconds !== undefined && output.TaskAvailabilityLifetimeInSeconds !== null
        ? output.TaskAvailabilityLifetimeInSeconds
        : undefined,
    TaskCount: output.TaskCount !== undefined && output.TaskCount !== null ? output.TaskCount : undefined,
    TaskDescription:
      output.TaskDescription !== undefined && output.TaskDescription !== null ? output.TaskDescription : undefined,
    TaskKeywords:
      output.TaskKeywords !== undefined && output.TaskKeywords !== null
        ? deserializeAws_json1_1FlowDefinitionTaskKeywords(output.TaskKeywords, context)
        : undefined,
    TaskTimeLimitInSeconds:
      output.TaskTimeLimitInSeconds !== undefined && output.TaskTimeLimitInSeconds !== null
        ? output.TaskTimeLimitInSeconds
        : undefined,
    TaskTitle: output.TaskTitle !== undefined && output.TaskTitle !== null ? output.TaskTitle : undefined,
    WorkteamArn: output.WorkteamArn !== undefined && output.WorkteamArn !== null ? output.WorkteamArn : undefined,
  } as any;
};

const deserializeAws_json1_1HumanLoopRequestSource = (output: any, context: __SerdeContext): HumanLoopRequestSource => {
  return {
    AwsManagedHumanLoopRequestSource:
      output.AwsManagedHumanLoopRequestSource !== undefined && output.AwsManagedHumanLoopRequestSource !== null
        ? output.AwsManagedHumanLoopRequestSource
        : undefined,
  } as any;
};

const deserializeAws_json1_1HumanTaskConfig = (output: any, context: __SerdeContext): HumanTaskConfig => {
  return {
    AnnotationConsolidationConfig:
      output.AnnotationConsolidationConfig !== undefined && output.AnnotationConsolidationConfig !== null
        ? deserializeAws_json1_1AnnotationConsolidationConfig(output.AnnotationConsolidationConfig, context)
        : undefined,
    MaxConcurrentTaskCount:
      output.MaxConcurrentTaskCount !== undefined && output.MaxConcurrentTaskCount !== null
        ? output.MaxConcurrentTaskCount
        : undefined,
    NumberOfHumanWorkersPerDataObject:
      output.NumberOfHumanWorkersPerDataObject !== undefined && output.NumberOfHumanWorkersPerDataObject !== null
        ? output.NumberOfHumanWorkersPerDataObject
        : undefined,
    PreHumanTaskLambdaArn:
      output.PreHumanTaskLambdaArn !== undefined && output.PreHumanTaskLambdaArn !== null
        ? output.PreHumanTaskLambdaArn
        : undefined,
    PublicWorkforceTaskPrice:
      output.PublicWorkforceTaskPrice !== undefined && output.PublicWorkforceTaskPrice !== null
        ? deserializeAws_json1_1PublicWorkforceTaskPrice(output.PublicWorkforceTaskPrice, context)
        : undefined,
    TaskAvailabilityLifetimeInSeconds:
      output.TaskAvailabilityLifetimeInSeconds !== undefined && output.TaskAvailabilityLifetimeInSeconds !== null
        ? output.TaskAvailabilityLifetimeInSeconds
        : undefined,
    TaskDescription:
      output.TaskDescription !== undefined && output.TaskDescription !== null ? output.TaskDescription : undefined,
    TaskKeywords:
      output.TaskKeywords !== undefined && output.TaskKeywords !== null
        ? deserializeAws_json1_1TaskKeywords(output.TaskKeywords, context)
        : undefined,
    TaskTimeLimitInSeconds:
      output.TaskTimeLimitInSeconds !== undefined && output.TaskTimeLimitInSeconds !== null
        ? output.TaskTimeLimitInSeconds
        : undefined,
    TaskTitle: output.TaskTitle !== undefined && output.TaskTitle !== null ? output.TaskTitle : undefined,
    UiConfig:
      output.UiConfig !== undefined && output.UiConfig !== null
        ? deserializeAws_json1_1UiConfig(output.UiConfig, context)
        : undefined,
    WorkteamArn: output.WorkteamArn !== undefined && output.WorkteamArn !== null ? output.WorkteamArn : undefined,
  } as any;
};

const deserializeAws_json1_1HumanTaskUiSummaries = (output: any, context: __SerdeContext): HumanTaskUiSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1HumanTaskUiSummary(entry, context);
    });
};

const deserializeAws_json1_1HumanTaskUiSummary = (output: any, context: __SerdeContext): HumanTaskUiSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    HumanTaskUiArn:
      output.HumanTaskUiArn !== undefined && output.HumanTaskUiArn !== null ? output.HumanTaskUiArn : undefined,
    HumanTaskUiName:
      output.HumanTaskUiName !== undefined && output.HumanTaskUiName !== null ? output.HumanTaskUiName : undefined,
  } as any;
};

const deserializeAws_json1_1HyperParameterAlgorithmSpecification = (
  output: any,
  context: __SerdeContext
): HyperParameterAlgorithmSpecification => {
  return {
    AlgorithmName:
      output.AlgorithmName !== undefined && output.AlgorithmName !== null ? output.AlgorithmName : undefined,
    MetricDefinitions:
      output.MetricDefinitions !== undefined && output.MetricDefinitions !== null
        ? deserializeAws_json1_1MetricDefinitionList(output.MetricDefinitions, context)
        : undefined,
    TrainingImage:
      output.TrainingImage !== undefined && output.TrainingImage !== null ? output.TrainingImage : undefined,
    TrainingInputMode:
      output.TrainingInputMode !== undefined && output.TrainingInputMode !== null
        ? output.TrainingInputMode
        : undefined,
  } as any;
};

const deserializeAws_json1_1HyperParameters = (output: any, context: __SerdeContext): { [key: string]: string } => {
  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const deserializeAws_json1_1HyperParameterSpecification = (
  output: any,
  context: __SerdeContext
): HyperParameterSpecification => {
  return {
    DefaultValue: output.DefaultValue !== undefined && output.DefaultValue !== null ? output.DefaultValue : undefined,
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    IsRequired: output.IsRequired !== undefined && output.IsRequired !== null ? output.IsRequired : undefined,
    IsTunable: output.IsTunable !== undefined && output.IsTunable !== null ? output.IsTunable : undefined,
    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
    Range:
      output.Range !== undefined && output.Range !== null
        ? deserializeAws_json1_1ParameterRange(output.Range, context)
        : undefined,
    Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined,
  } as any;
};

const deserializeAws_json1_1HyperParameterSpecifications = (
  output: any,
  context: __SerdeContext
): HyperParameterSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1HyperParameterSpecification(entry, context);
    });
};

const deserializeAws_json1_1HyperParameterTrainingJobDefinition = (
  output: any,
  context: __SerdeContext
): HyperParameterTrainingJobDefinition => {
  return {
    AlgorithmSpecification:
      output.AlgorithmSpecification !== undefined && output.AlgorithmSpecification !== null
        ? deserializeAws_json1_1HyperParameterAlgorithmSpecification(output.AlgorithmSpecification, context)
        : undefined,
    CheckpointConfig:
      output.CheckpointConfig !== undefined && output.CheckpointConfig !== null
        ? deserializeAws_json1_1CheckpointConfig(output.CheckpointConfig, context)
        : undefined,
    DefinitionName:
      output.DefinitionName !== undefined && output.DefinitionName !== null ? output.DefinitionName : undefined,
    EnableInterContainerTrafficEncryption:
      output.EnableInterContainerTrafficEncryption !== undefined &&
      output.EnableInterContainerTrafficEncryption !== null
        ? output.EnableInterContainerTrafficEncryption
        : undefined,
    EnableManagedSpotTraining:
      output.EnableManagedSpotTraining !== undefined && output.EnableManagedSpotTraining !== null
        ? output.EnableManagedSpotTraining
        : undefined,
    EnableNetworkIsolation:
      output.EnableNetworkIsolation !== undefined && output.EnableNetworkIsolation !== null
        ? output.EnableNetworkIsolation
        : undefined,
    HyperParameterRanges:
      output.HyperParameterRanges !== undefined && output.HyperParameterRanges !== null
        ? deserializeAws_json1_1ParameterRanges(output.HyperParameterRanges, context)
        : undefined,
    InputDataConfig:
      output.InputDataConfig !== undefined && output.InputDataConfig !== null
        ? deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context)
        : undefined,
    OutputDataConfig:
      output.OutputDataConfig !== undefined && output.OutputDataConfig !== null
        ? deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context)
        : undefined,
    ResourceConfig:
      output.ResourceConfig !== undefined && output.ResourceConfig !== null
        ? deserializeAws_json1_1ResourceConfig(output.ResourceConfig, context)
        : undefined,
    RetryStrategy:
      output.RetryStrategy !== undefined && output.RetryStrategy !== null
        ? deserializeAws_json1_1RetryStrategy(output.RetryStrategy, context)
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    StaticHyperParameters:
      output.StaticHyperParameters !== undefined && output.StaticHyperParameters !== null
        ? deserializeAws_json1_1HyperParameters(output.StaticHyperParameters, context)
        : undefined,
    StoppingCondition:
      output.StoppingCondition !== undefined && output.StoppingCondition !== null
        ? deserializeAws_json1_1StoppingCondition(output.StoppingCondition, context)
        : undefined,
    TuningObjective:
      output.TuningObjective !== undefined && output.TuningObjective !== null
        ? deserializeAws_json1_1HyperParameterTuningJobObjective(output.TuningObjective, context)
        : undefined,
    VpcConfig:
      output.VpcConfig !== undefined && output.VpcConfig !== null
        ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1HyperParameterTrainingJobDefinitions = (
  output: any,
  context: __SerdeContext
): HyperParameterTrainingJobDefinition[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1HyperParameterTrainingJobDefinition(entry, context);
    });
};

const deserializeAws_json1_1HyperParameterTrainingJobSummaries = (
  output: any,
  context: __SerdeContext
): HyperParameterTrainingJobSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1HyperParameterTrainingJobSummary(entry, context);
    });
};

const deserializeAws_json1_1HyperParameterTrainingJobSummary = (
  output: any,
  context: __SerdeContext
): HyperParameterTrainingJobSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    FinalHyperParameterTuningJobObjectiveMetric:
      output.FinalHyperParameterTuningJobObjectiveMetric !== undefined &&
      output.FinalHyperParameterTuningJobObjectiveMetric !== null
        ? deserializeAws_json1_1FinalHyperParameterTuningJobObjectiveMetric(
            output.FinalHyperParameterTuningJobObjectiveMetric,
            context
          )
        : undefined,
    ObjectiveStatus:
      output.ObjectiveStatus !== undefined && output.ObjectiveStatus !== null ? output.ObjectiveStatus : undefined,
    TrainingEndTime:
      output.TrainingEndTime !== undefined && output.TrainingEndTime !== null
        ? new Date(Math.round(output.TrainingEndTime * 1000))
        : undefined,
    TrainingJobArn:
      output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
    TrainingJobDefinitionName:
      output.TrainingJobDefinitionName !== undefined && output.TrainingJobDefinitionName !== null
        ? output.TrainingJobDefinitionName
        : undefined,
    TrainingJobName:
      output.TrainingJobName !== undefined && output.TrainingJobName !== null ? output.TrainingJobName : undefined,
    TrainingJobStatus:
      output.TrainingJobStatus !== undefined && output.TrainingJobStatus !== null
        ? output.TrainingJobStatus
        : undefined,
    TrainingStartTime:
      output.TrainingStartTime !== undefined && output.TrainingStartTime !== null
        ? new Date(Math.round(output.TrainingStartTime * 1000))
        : undefined,
    TunedHyperParameters:
      output.TunedHyperParameters !== undefined && output.TunedHyperParameters !== null
        ? deserializeAws_json1_1HyperParameters(output.TunedHyperParameters, context)
        : undefined,
    TuningJobName:
      output.TuningJobName !== undefined && output.TuningJobName !== null ? output.TuningJobName : undefined,
  } as any;
};

const deserializeAws_json1_1HyperParameterTuningJobConfig = (
  output: any,
  context: __SerdeContext
): HyperParameterTuningJobConfig => {
  return {
    HyperParameterTuningJobObjective:
      output.HyperParameterTuningJobObjective !== undefined && output.HyperParameterTuningJobObjective !== null
        ? deserializeAws_json1_1HyperParameterTuningJobObjective(output.HyperParameterTuningJobObjective, context)
        : undefined,
    ParameterRanges:
      output.ParameterRanges !== undefined && output.ParameterRanges !== null
        ? deserializeAws_json1_1ParameterRanges(output.ParameterRanges, context)
        : undefined,
    ResourceLimits:
      output.ResourceLimits !== undefined && output.ResourceLimits !== null
        ? deserializeAws_json1_1ResourceLimits(output.ResourceLimits, context)
        : undefined,
    Strategy: output.Strategy !== undefined && output.Strategy !== null ? output.Strategy : undefined,
    TrainingJobEarlyStoppingType:
      output.TrainingJobEarlyStoppingType !== undefined && output.TrainingJobEarlyStoppingType !== null
        ? output.TrainingJobEarlyStoppingType
        : undefined,
    TuningJobCompletionCriteria:
      output.TuningJobCompletionCriteria !== undefined && output.TuningJobCompletionCriteria !== null
        ? deserializeAws_json1_1TuningJobCompletionCriteria(output.TuningJobCompletionCriteria, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1HyperParameterTuningJobObjective = (
  output: any,
  context: __SerdeContext
): HyperParameterTuningJobObjective => {
  return {
    MetricName: output.MetricName !== undefined && output.MetricName !== null ? output.MetricName : undefined,
    Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined,
  } as any;
};

const deserializeAws_json1_1HyperParameterTuningJobObjectives = (
  output: any,
  context: __SerdeContext
): HyperParameterTuningJobObjective[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1HyperParameterTuningJobObjective(entry, context);
    });
};

const deserializeAws_json1_1HyperParameterTuningJobSummaries = (
  output: any,
  context: __SerdeContext
): HyperParameterTuningJobSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1HyperParameterTuningJobSummary(entry, context);
    });
};

const deserializeAws_json1_1HyperParameterTuningJobSummary = (
  output: any,
  context: __SerdeContext
): HyperParameterTuningJobSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    HyperParameterTuningEndTime:
      output.HyperParameterTuningEndTime !== undefined && output.HyperParameterTuningEndTime !== null
        ? new Date(Math.round(output.HyperParameterTuningEndTime * 1000))
        : undefined,
    HyperParameterTuningJobArn:
      output.HyperParameterTuningJobArn !== undefined && output.HyperParameterTuningJobArn !== null
        ? output.HyperParameterTuningJobArn
        : undefined,
    HyperParameterTuningJobName:
      output.HyperParameterTuningJobName !== undefined && output.HyperParameterTuningJobName !== null
        ? output.HyperParameterTuningJobName
        : undefined,
    HyperParameterTuningJobStatus:
      output.HyperParameterTuningJobStatus !== undefined && output.HyperParameterTuningJobStatus !== null
        ? output.HyperParameterTuningJobStatus
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    ObjectiveStatusCounters:
      output.ObjectiveStatusCounters !== undefined && output.ObjectiveStatusCounters !== null
        ? deserializeAws_json1_1ObjectiveStatusCounters(output.ObjectiveStatusCounters, context)
        : undefined,
    ResourceLimits:
      output.ResourceLimits !== undefined && output.ResourceLimits !== null
        ? deserializeAws_json1_1ResourceLimits(output.ResourceLimits, context)
        : undefined,
    Strategy: output.Strategy !== undefined && output.Strategy !== null ? output.Strategy : undefined,
    TrainingJobStatusCounters:
      output.TrainingJobStatusCounters !== undefined && output.TrainingJobStatusCounters !== null
        ? deserializeAws_json1_1TrainingJobStatusCounters(output.TrainingJobStatusCounters, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1HyperParameterTuningJobWarmStartConfig = (
  output: any,
  context: __SerdeContext
): HyperParameterTuningJobWarmStartConfig => {
  return {
    ParentHyperParameterTuningJobs:
      output.ParentHyperParameterTuningJobs !== undefined && output.ParentHyperParameterTuningJobs !== null
        ? deserializeAws_json1_1ParentHyperParameterTuningJobs(output.ParentHyperParameterTuningJobs, context)
        : undefined,
    WarmStartType:
      output.WarmStartType !== undefined && output.WarmStartType !== null ? output.WarmStartType : undefined,
  } as any;
};

const deserializeAws_json1_1Image = (output: any, context: __SerdeContext): Image => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    ImageArn: output.ImageArn !== undefined && output.ImageArn !== null ? output.ImageArn : undefined,
    ImageName: output.ImageName !== undefined && output.ImageName !== null ? output.ImageName : undefined,
    ImageStatus: output.ImageStatus !== undefined && output.ImageStatus !== null ? output.ImageStatus : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1ImageConfig = (output: any, context: __SerdeContext): ImageConfig => {
  return {
    RepositoryAccessMode:
      output.RepositoryAccessMode !== undefined && output.RepositoryAccessMode !== null
        ? output.RepositoryAccessMode
        : undefined,
    RepositoryAuthConfig:
      output.RepositoryAuthConfig !== undefined && output.RepositoryAuthConfig !== null
        ? deserializeAws_json1_1RepositoryAuthConfig(output.RepositoryAuthConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1Images = (output: any, context: __SerdeContext): Image[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1Image(entry, context);
    });
};

const deserializeAws_json1_1ImageVersion = (output: any, context: __SerdeContext): ImageVersion => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    ImageArn: output.ImageArn !== undefined && output.ImageArn !== null ? output.ImageArn : undefined,
    ImageVersionArn:
      output.ImageVersionArn !== undefined && output.ImageVersionArn !== null ? output.ImageVersionArn : undefined,
    ImageVersionStatus:
      output.ImageVersionStatus !== undefined && output.ImageVersionStatus !== null
        ? output.ImageVersionStatus
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    Version: output.Version !== undefined && output.Version !== null ? output.Version : undefined,
  } as any;
};

const deserializeAws_json1_1ImageVersions = (output: any, context: __SerdeContext): ImageVersion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ImageVersion(entry, context);
    });
};

const deserializeAws_json1_1InferenceExecutionConfig = (
  output: any,
  context: __SerdeContext
): InferenceExecutionConfig => {
  return {
    Mode: output.Mode !== undefined && output.Mode !== null ? output.Mode : undefined,
  } as any;
};

const deserializeAws_json1_1InferenceSpecification = (output: any, context: __SerdeContext): InferenceSpecification => {
  return {
    Containers:
      output.Containers !== undefined && output.Containers !== null
        ? deserializeAws_json1_1ModelPackageContainerDefinitionList(output.Containers, context)
        : undefined,
    SupportedContentTypes:
      output.SupportedContentTypes !== undefined && output.SupportedContentTypes !== null
        ? deserializeAws_json1_1ContentTypes(output.SupportedContentTypes, context)
        : undefined,
    SupportedRealtimeInferenceInstanceTypes:
      output.SupportedRealtimeInferenceInstanceTypes !== undefined &&
      output.SupportedRealtimeInferenceInstanceTypes !== null
        ? deserializeAws_json1_1RealtimeInferenceInstanceTypes(output.SupportedRealtimeInferenceInstanceTypes, context)
        : undefined,
    SupportedResponseMIMETypes:
      output.SupportedResponseMIMETypes !== undefined && output.SupportedResponseMIMETypes !== null
        ? deserializeAws_json1_1ResponseMIMETypes(output.SupportedResponseMIMETypes, context)
        : undefined,
    SupportedTransformInstanceTypes:
      output.SupportedTransformInstanceTypes !== undefined && output.SupportedTransformInstanceTypes !== null
        ? deserializeAws_json1_1TransformInstanceTypes(output.SupportedTransformInstanceTypes, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1InputConfig = (output: any, context: __SerdeContext): InputConfig => {
  return {
    DataInputConfig:
      output.DataInputConfig !== undefined && output.DataInputConfig !== null ? output.DataInputConfig : undefined,
    Framework: output.Framework !== undefined && output.Framework !== null ? output.Framework : undefined,
    FrameworkVersion:
      output.FrameworkVersion !== undefined && output.FrameworkVersion !== null ? output.FrameworkVersion : undefined,
    S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1InputDataConfig = (output: any, context: __SerdeContext): Channel[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1Channel(entry, context);
    });
};

const deserializeAws_json1_1InputModes = (output: any, context: __SerdeContext): (TrainingInputMode | string)[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1IntegerParameterRange = (output: any, context: __SerdeContext): IntegerParameterRange => {
  return {
    MaxValue: output.MaxValue !== undefined && output.MaxValue !== null ? output.MaxValue : undefined,
    MinValue: output.MinValue !== undefined && output.MinValue !== null ? output.MinValue : undefined,
    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
    ScalingType: output.ScalingType !== undefined && output.ScalingType !== null ? output.ScalingType : undefined,
  } as any;
};

const deserializeAws_json1_1IntegerParameterRanges = (
  output: any,
  context: __SerdeContext
): IntegerParameterRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1IntegerParameterRange(entry, context);
    });
};

const deserializeAws_json1_1IntegerParameterRangeSpecification = (
  output: any,
  context: __SerdeContext
): IntegerParameterRangeSpecification => {
  return {
    MaxValue: output.MaxValue !== undefined && output.MaxValue !== null ? output.MaxValue : undefined,
    MinValue: output.MinValue !== undefined && output.MinValue !== null ? output.MinValue : undefined,
  } as any;
};

const deserializeAws_json1_1JsonContentTypes = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1JupyterServerAppSettings = (
  output: any,
  context: __SerdeContext
): JupyterServerAppSettings => {
  return {
    DefaultResourceSpec:
      output.DefaultResourceSpec !== undefined && output.DefaultResourceSpec !== null
        ? deserializeAws_json1_1ResourceSpec(output.DefaultResourceSpec, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1KernelGatewayAppSettings = (
  output: any,
  context: __SerdeContext
): KernelGatewayAppSettings => {
  return {
    CustomImages:
      output.CustomImages !== undefined && output.CustomImages !== null
        ? deserializeAws_json1_1CustomImages(output.CustomImages, context)
        : undefined,
    DefaultResourceSpec:
      output.DefaultResourceSpec !== undefined && output.DefaultResourceSpec !== null
        ? deserializeAws_json1_1ResourceSpec(output.DefaultResourceSpec, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1KernelGatewayImageConfig = (
  output: any,
  context: __SerdeContext
): KernelGatewayImageConfig => {
  return {
    FileSystemConfig:
      output.FileSystemConfig !== undefined && output.FileSystemConfig !== null
        ? deserializeAws_json1_1FileSystemConfig(output.FileSystemConfig, context)
        : undefined,
    KernelSpecs:
      output.KernelSpecs !== undefined && output.KernelSpecs !== null
        ? deserializeAws_json1_1KernelSpecs(output.KernelSpecs, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1KernelSpec = (output: any, context: __SerdeContext): KernelSpec => {
  return {
    DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
  } as any;
};

const deserializeAws_json1_1KernelSpecs = (output: any, context: __SerdeContext): KernelSpec[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1KernelSpec(entry, context);
    });
};

const deserializeAws_json1_1LabelCounters = (output: any, context: __SerdeContext): LabelCounters => {
  return {
    FailedNonRetryableError:
      output.FailedNonRetryableError !== undefined && output.FailedNonRetryableError !== null
        ? output.FailedNonRetryableError
        : undefined,
    HumanLabeled: output.HumanLabeled !== undefined && output.HumanLabeled !== null ? output.HumanLabeled : undefined,
    MachineLabeled:
      output.MachineLabeled !== undefined && output.MachineLabeled !== null ? output.MachineLabeled : undefined,
    TotalLabeled: output.TotalLabeled !== undefined && output.TotalLabeled !== null ? output.TotalLabeled : undefined,
    Unlabeled: output.Unlabeled !== undefined && output.Unlabeled !== null ? output.Unlabeled : undefined,
  } as any;
};

const deserializeAws_json1_1LabelCountersForWorkteam = (
  output: any,
  context: __SerdeContext
): LabelCountersForWorkteam => {
  return {
    HumanLabeled: output.HumanLabeled !== undefined && output.HumanLabeled !== null ? output.HumanLabeled : undefined,
    PendingHuman: output.PendingHuman !== undefined && output.PendingHuman !== null ? output.PendingHuman : undefined,
    Total: output.Total !== undefined && output.Total !== null ? output.Total : undefined,
  } as any;
};

const deserializeAws_json1_1LabelingJobAlgorithmsConfig = (
  output: any,
  context: __SerdeContext
): LabelingJobAlgorithmsConfig => {
  return {
    InitialActiveLearningModelArn:
      output.InitialActiveLearningModelArn !== undefined && output.InitialActiveLearningModelArn !== null
        ? output.InitialActiveLearningModelArn
        : undefined,
    LabelingJobAlgorithmSpecificationArn:
      output.LabelingJobAlgorithmSpecificationArn !== undefined && output.LabelingJobAlgorithmSpecificationArn !== null
        ? output.LabelingJobAlgorithmSpecificationArn
        : undefined,
    LabelingJobResourceConfig:
      output.LabelingJobResourceConfig !== undefined && output.LabelingJobResourceConfig !== null
        ? deserializeAws_json1_1LabelingJobResourceConfig(output.LabelingJobResourceConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1LabelingJobDataAttributes = (
  output: any,
  context: __SerdeContext
): LabelingJobDataAttributes => {
  return {
    ContentClassifiers:
      output.ContentClassifiers !== undefined && output.ContentClassifiers !== null
        ? deserializeAws_json1_1ContentClassifiers(output.ContentClassifiers, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1LabelingJobDataSource = (output: any, context: __SerdeContext): LabelingJobDataSource => {
  return {
    S3DataSource:
      output.S3DataSource !== undefined && output.S3DataSource !== null
        ? deserializeAws_json1_1LabelingJobS3DataSource(output.S3DataSource, context)
        : undefined,
    SnsDataSource:
      output.SnsDataSource !== undefined && output.SnsDataSource !== null
        ? deserializeAws_json1_1LabelingJobSnsDataSource(output.SnsDataSource, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1LabelingJobForWorkteamSummary = (
  output: any,
  context: __SerdeContext
): LabelingJobForWorkteamSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    JobReferenceCode:
      output.JobReferenceCode !== undefined && output.JobReferenceCode !== null ? output.JobReferenceCode : undefined,
    LabelCounters:
      output.LabelCounters !== undefined && output.LabelCounters !== null
        ? deserializeAws_json1_1LabelCountersForWorkteam(output.LabelCounters, context)
        : undefined,
    LabelingJobName:
      output.LabelingJobName !== undefined && output.LabelingJobName !== null ? output.LabelingJobName : undefined,
    NumberOfHumanWorkersPerDataObject:
      output.NumberOfHumanWorkersPerDataObject !== undefined && output.NumberOfHumanWorkersPerDataObject !== null
        ? output.NumberOfHumanWorkersPerDataObject
        : undefined,
    WorkRequesterAccountId:
      output.WorkRequesterAccountId !== undefined && output.WorkRequesterAccountId !== null
        ? output.WorkRequesterAccountId
        : undefined,
  } as any;
};

const deserializeAws_json1_1LabelingJobForWorkteamSummaryList = (
  output: any,
  context: __SerdeContext
): LabelingJobForWorkteamSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1LabelingJobForWorkteamSummary(entry, context);
    });
};

const deserializeAws_json1_1LabelingJobInputConfig = (output: any, context: __SerdeContext): LabelingJobInputConfig => {
  return {
    DataAttributes:
      output.DataAttributes !== undefined && output.DataAttributes !== null
        ? deserializeAws_json1_1LabelingJobDataAttributes(output.DataAttributes, context)
        : undefined,
    DataSource:
      output.DataSource !== undefined && output.DataSource !== null
        ? deserializeAws_json1_1LabelingJobDataSource(output.DataSource, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1LabelingJobOutput = (output: any, context: __SerdeContext): LabelingJobOutput => {
  return {
    FinalActiveLearningModelArn:
      output.FinalActiveLearningModelArn !== undefined && output.FinalActiveLearningModelArn !== null
        ? output.FinalActiveLearningModelArn
        : undefined,
    OutputDatasetS3Uri:
      output.OutputDatasetS3Uri !== undefined && output.OutputDatasetS3Uri !== null
        ? output.OutputDatasetS3Uri
        : undefined,
  } as any;
};

const deserializeAws_json1_1LabelingJobOutputConfig = (
  output: any,
  context: __SerdeContext
): LabelingJobOutputConfig => {
  return {
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
    SnsTopicArn: output.SnsTopicArn !== undefined && output.SnsTopicArn !== null ? output.SnsTopicArn : undefined,
  } as any;
};

const deserializeAws_json1_1LabelingJobResourceConfig = (
  output: any,
  context: __SerdeContext
): LabelingJobResourceConfig => {
  return {
    VolumeKmsKeyId:
      output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null ? output.VolumeKmsKeyId : undefined,
  } as any;
};

const deserializeAws_json1_1LabelingJobS3DataSource = (
  output: any,
  context: __SerdeContext
): LabelingJobS3DataSource => {
  return {
    ManifestS3Uri:
      output.ManifestS3Uri !== undefined && output.ManifestS3Uri !== null ? output.ManifestS3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1LabelingJobSnsDataSource = (
  output: any,
  context: __SerdeContext
): LabelingJobSnsDataSource => {
  return {
    SnsTopicArn: output.SnsTopicArn !== undefined && output.SnsTopicArn !== null ? output.SnsTopicArn : undefined,
  } as any;
};

const deserializeAws_json1_1LabelingJobStoppingConditions = (
  output: any,
  context: __SerdeContext
): LabelingJobStoppingConditions => {
  return {
    MaxHumanLabeledObjectCount:
      output.MaxHumanLabeledObjectCount !== undefined && output.MaxHumanLabeledObjectCount !== null
        ? output.MaxHumanLabeledObjectCount
        : undefined,
    MaxPercentageOfInputDatasetLabeled:
      output.MaxPercentageOfInputDatasetLabeled !== undefined && output.MaxPercentageOfInputDatasetLabeled !== null
        ? output.MaxPercentageOfInputDatasetLabeled
        : undefined,
  } as any;
};

const deserializeAws_json1_1LabelingJobSummary = (output: any, context: __SerdeContext): LabelingJobSummary => {
  return {
    AnnotationConsolidationLambdaArn:
      output.AnnotationConsolidationLambdaArn !== undefined && output.AnnotationConsolidationLambdaArn !== null
        ? output.AnnotationConsolidationLambdaArn
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    InputConfig:
      output.InputConfig !== undefined && output.InputConfig !== null
        ? deserializeAws_json1_1LabelingJobInputConfig(output.InputConfig, context)
        : undefined,
    LabelCounters:
      output.LabelCounters !== undefined && output.LabelCounters !== null
        ? deserializeAws_json1_1LabelCounters(output.LabelCounters, context)
        : undefined,
    LabelingJobArn:
      output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
    LabelingJobName:
      output.LabelingJobName !== undefined && output.LabelingJobName !== null ? output.LabelingJobName : undefined,
    LabelingJobOutput:
      output.LabelingJobOutput !== undefined && output.LabelingJobOutput !== null
        ? deserializeAws_json1_1LabelingJobOutput(output.LabelingJobOutput, context)
        : undefined,
    LabelingJobStatus:
      output.LabelingJobStatus !== undefined && output.LabelingJobStatus !== null
        ? output.LabelingJobStatus
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    PreHumanTaskLambdaArn:
      output.PreHumanTaskLambdaArn !== undefined && output.PreHumanTaskLambdaArn !== null
        ? output.PreHumanTaskLambdaArn
        : undefined,
    WorkteamArn: output.WorkteamArn !== undefined && output.WorkteamArn !== null ? output.WorkteamArn : undefined,
  } as any;
};

const deserializeAws_json1_1LabelingJobSummaryList = (output: any, context: __SerdeContext): LabelingJobSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1LabelingJobSummary(entry, context);
    });
};

const deserializeAws_json1_1LineageEntityParameters = (
  output: any,
  context: __SerdeContext
): { [key: string]: string } => {
  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const deserializeAws_json1_1ListActionsResponse = (output: any, context: __SerdeContext): ListActionsResponse => {
  return {
    ActionSummaries:
      output.ActionSummaries !== undefined && output.ActionSummaries !== null
        ? deserializeAws_json1_1ActionSummaries(output.ActionSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListAlgorithmsOutput = (output: any, context: __SerdeContext): ListAlgorithmsOutput => {
  return {
    AlgorithmSummaryList:
      output.AlgorithmSummaryList !== undefined && output.AlgorithmSummaryList !== null
        ? deserializeAws_json1_1AlgorithmSummaryList(output.AlgorithmSummaryList, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListAppImageConfigsResponse = (
  output: any,
  context: __SerdeContext
): ListAppImageConfigsResponse => {
  return {
    AppImageConfigs:
      output.AppImageConfigs !== undefined && output.AppImageConfigs !== null
        ? deserializeAws_json1_1AppImageConfigList(output.AppImageConfigs, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListAppsResponse = (output: any, context: __SerdeContext): ListAppsResponse => {
  return {
    Apps:
      output.Apps !== undefined && output.Apps !== null
        ? deserializeAws_json1_1AppList(output.Apps, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListArtifactsResponse = (output: any, context: __SerdeContext): ListArtifactsResponse => {
  return {
    ArtifactSummaries:
      output.ArtifactSummaries !== undefined && output.ArtifactSummaries !== null
        ? deserializeAws_json1_1ArtifactSummaries(output.ArtifactSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListAssociationsResponse = (
  output: any,
  context: __SerdeContext
): ListAssociationsResponse => {
  return {
    AssociationSummaries:
      output.AssociationSummaries !== undefined && output.AssociationSummaries !== null
        ? deserializeAws_json1_1AssociationSummaries(output.AssociationSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListAutoMLJobsResponse = (output: any, context: __SerdeContext): ListAutoMLJobsResponse => {
  return {
    AutoMLJobSummaries:
      output.AutoMLJobSummaries !== undefined && output.AutoMLJobSummaries !== null
        ? deserializeAws_json1_1AutoMLJobSummaries(output.AutoMLJobSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListCandidatesForAutoMLJobResponse = (
  output: any,
  context: __SerdeContext
): ListCandidatesForAutoMLJobResponse => {
  return {
    Candidates:
      output.Candidates !== undefined && output.Candidates !== null
        ? deserializeAws_json1_1AutoMLCandidates(output.Candidates, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListCodeRepositoriesOutput = (
  output: any,
  context: __SerdeContext
): ListCodeRepositoriesOutput => {
  return {
    CodeRepositorySummaryList:
      output.CodeRepositorySummaryList !== undefined && output.CodeRepositorySummaryList !== null
        ? deserializeAws_json1_1CodeRepositorySummaryList(output.CodeRepositorySummaryList, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListCompilationJobsResponse = (
  output: any,
  context: __SerdeContext
): ListCompilationJobsResponse => {
  return {
    CompilationJobSummaries:
      output.CompilationJobSummaries !== undefined && output.CompilationJobSummaries !== null
        ? deserializeAws_json1_1CompilationJobSummaries(output.CompilationJobSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListContextsResponse = (output: any, context: __SerdeContext): ListContextsResponse => {
  return {
    ContextSummaries:
      output.ContextSummaries !== undefined && output.ContextSummaries !== null
        ? deserializeAws_json1_1ContextSummaries(output.ContextSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListDataQualityJobDefinitionsResponse = (
  output: any,
  context: __SerdeContext
): ListDataQualityJobDefinitionsResponse => {
  return {
    JobDefinitionSummaries:
      output.JobDefinitionSummaries !== undefined && output.JobDefinitionSummaries !== null
        ? deserializeAws_json1_1MonitoringJobDefinitionSummaryList(output.JobDefinitionSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListDeviceFleetsResponse = (
  output: any,
  context: __SerdeContext
): ListDeviceFleetsResponse => {
  return {
    DeviceFleetSummaries:
      output.DeviceFleetSummaries !== undefined && output.DeviceFleetSummaries !== null
        ? deserializeAws_json1_1DeviceFleetSummaries(output.DeviceFleetSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListDevicesResponse = (output: any, context: __SerdeContext): ListDevicesResponse => {
  return {
    DeviceSummaries:
      output.DeviceSummaries !== undefined && output.DeviceSummaries !== null
        ? deserializeAws_json1_1DeviceSummaries(output.DeviceSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListDomainsResponse = (output: any, context: __SerdeContext): ListDomainsResponse => {
  return {
    Domains:
      output.Domains !== undefined && output.Domains !== null
        ? deserializeAws_json1_1DomainList(output.Domains, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListEdgePackagingJobsResponse = (
  output: any,
  context: __SerdeContext
): ListEdgePackagingJobsResponse => {
  return {
    EdgePackagingJobSummaries:
      output.EdgePackagingJobSummaries !== undefined && output.EdgePackagingJobSummaries !== null
        ? deserializeAws_json1_1EdgePackagingJobSummaries(output.EdgePackagingJobSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListEndpointConfigsOutput = (
  output: any,
  context: __SerdeContext
): ListEndpointConfigsOutput => {
  return {
    EndpointConfigs:
      output.EndpointConfigs !== undefined && output.EndpointConfigs !== null
        ? deserializeAws_json1_1EndpointConfigSummaryList(output.EndpointConfigs, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListEndpointsOutput = (output: any, context: __SerdeContext): ListEndpointsOutput => {
  return {
    Endpoints:
      output.Endpoints !== undefined && output.Endpoints !== null
        ? deserializeAws_json1_1EndpointSummaryList(output.Endpoints, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListExperimentsResponse = (
  output: any,
  context: __SerdeContext
): ListExperimentsResponse => {
  return {
    ExperimentSummaries:
      output.ExperimentSummaries !== undefined && output.ExperimentSummaries !== null
        ? deserializeAws_json1_1ExperimentSummaries(output.ExperimentSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListFeatureGroupsResponse = (
  output: any,
  context: __SerdeContext
): ListFeatureGroupsResponse => {
  return {
    FeatureGroupSummaries:
      output.FeatureGroupSummaries !== undefined && output.FeatureGroupSummaries !== null
        ? deserializeAws_json1_1FeatureGroupSummaries(output.FeatureGroupSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListFlowDefinitionsResponse = (
  output: any,
  context: __SerdeContext
): ListFlowDefinitionsResponse => {
  return {
    FlowDefinitionSummaries:
      output.FlowDefinitionSummaries !== undefined && output.FlowDefinitionSummaries !== null
        ? deserializeAws_json1_1FlowDefinitionSummaries(output.FlowDefinitionSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListHumanTaskUisResponse = (
  output: any,
  context: __SerdeContext
): ListHumanTaskUisResponse => {
  return {
    HumanTaskUiSummaries:
      output.HumanTaskUiSummaries !== undefined && output.HumanTaskUiSummaries !== null
        ? deserializeAws_json1_1HumanTaskUiSummaries(output.HumanTaskUiSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListHyperParameterTuningJobsResponse = (
  output: any,
  context: __SerdeContext
): ListHyperParameterTuningJobsResponse => {
  return {
    HyperParameterTuningJobSummaries:
      output.HyperParameterTuningJobSummaries !== undefined && output.HyperParameterTuningJobSummaries !== null
        ? deserializeAws_json1_1HyperParameterTuningJobSummaries(output.HyperParameterTuningJobSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListImagesResponse = (output: any, context: __SerdeContext): ListImagesResponse => {
  return {
    Images:
      output.Images !== undefined && output.Images !== null
        ? deserializeAws_json1_1Images(output.Images, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListImageVersionsResponse = (
  output: any,
  context: __SerdeContext
): ListImageVersionsResponse => {
  return {
    ImageVersions:
      output.ImageVersions !== undefined && output.ImageVersions !== null
        ? deserializeAws_json1_1ImageVersions(output.ImageVersions, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListLabelingJobsForWorkteamResponse = (
  output: any,
  context: __SerdeContext
): ListLabelingJobsForWorkteamResponse => {
  return {
    LabelingJobSummaryList:
      output.LabelingJobSummaryList !== undefined && output.LabelingJobSummaryList !== null
        ? deserializeAws_json1_1LabelingJobForWorkteamSummaryList(output.LabelingJobSummaryList, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListLabelingJobsResponse = (
  output: any,
  context: __SerdeContext
): ListLabelingJobsResponse => {
  return {
    LabelingJobSummaryList:
      output.LabelingJobSummaryList !== undefined && output.LabelingJobSummaryList !== null
        ? deserializeAws_json1_1LabelingJobSummaryList(output.LabelingJobSummaryList, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListModelBiasJobDefinitionsResponse = (
  output: any,
  context: __SerdeContext
): ListModelBiasJobDefinitionsResponse => {
  return {
    JobDefinitionSummaries:
      output.JobDefinitionSummaries !== undefined && output.JobDefinitionSummaries !== null
        ? deserializeAws_json1_1MonitoringJobDefinitionSummaryList(output.JobDefinitionSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListModelExplainabilityJobDefinitionsResponse = (
  output: any,
  context: __SerdeContext
): ListModelExplainabilityJobDefinitionsResponse => {
  return {
    JobDefinitionSummaries:
      output.JobDefinitionSummaries !== undefined && output.JobDefinitionSummaries !== null
        ? deserializeAws_json1_1MonitoringJobDefinitionSummaryList(output.JobDefinitionSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListModelPackageGroupsOutput = (
  output: any,
  context: __SerdeContext
): ListModelPackageGroupsOutput => {
  return {
    ModelPackageGroupSummaryList:
      output.ModelPackageGroupSummaryList !== undefined && output.ModelPackageGroupSummaryList !== null
        ? deserializeAws_json1_1ModelPackageGroupSummaryList(output.ModelPackageGroupSummaryList, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListModelPackagesOutput = (
  output: any,
  context: __SerdeContext
): ListModelPackagesOutput => {
  return {
    ModelPackageSummaryList:
      output.ModelPackageSummaryList !== undefined && output.ModelPackageSummaryList !== null
        ? deserializeAws_json1_1ModelPackageSummaryList(output.ModelPackageSummaryList, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListModelQualityJobDefinitionsResponse = (
  output: any,
  context: __SerdeContext
): ListModelQualityJobDefinitionsResponse => {
  return {
    JobDefinitionSummaries:
      output.JobDefinitionSummaries !== undefined && output.JobDefinitionSummaries !== null
        ? deserializeAws_json1_1MonitoringJobDefinitionSummaryList(output.JobDefinitionSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListModelsOutput = (output: any, context: __SerdeContext): ListModelsOutput => {
  return {
    Models:
      output.Models !== undefined && output.Models !== null
        ? deserializeAws_json1_1ModelSummaryList(output.Models, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListMonitoringExecutionsResponse = (
  output: any,
  context: __SerdeContext
): ListMonitoringExecutionsResponse => {
  return {
    MonitoringExecutionSummaries:
      output.MonitoringExecutionSummaries !== undefined && output.MonitoringExecutionSummaries !== null
        ? deserializeAws_json1_1MonitoringExecutionSummaryList(output.MonitoringExecutionSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListMonitoringSchedulesResponse = (
  output: any,
  context: __SerdeContext
): ListMonitoringSchedulesResponse => {
  return {
    MonitoringScheduleSummaries:
      output.MonitoringScheduleSummaries !== undefined && output.MonitoringScheduleSummaries !== null
        ? deserializeAws_json1_1MonitoringScheduleSummaryList(output.MonitoringScheduleSummaries, context)
        : undefined,
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
  } as any;
};

const deserializeAws_json1_1ListNotebookInstanceLifecycleConfigsOutput = (
  output: any,
  context: __SerdeContext
): ListNotebookInstanceLifecycleConfigsOutput => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    NotebookInstanceLifecycleConfigs:
      output.NotebookInstanceLifecycleConfigs !== undefined && output.NotebookInstanceLifecycleConfigs !== null
        ? deserializeAws_json1_1NotebookInstanceLifecycleConfigSummaryList(
            output.NotebookInstanceLifecycleConfigs,
            context
          )
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListNotebookInstancesOutput = (
  output: any,
  context: __SerdeContext
): ListNotebookInstancesOutput => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    NotebookInstances:
      output.NotebookInstances !== undefined && output.NotebookInstances !== null
        ? deserializeAws_json1_1NotebookInstanceSummaryList(output.NotebookInstances, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListPipelineExecutionsResponse = (
  output: any,
  context: __SerdeContext
): ListPipelineExecutionsResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    PipelineExecutionSummaries:
      output.PipelineExecutionSummaries !== undefined && output.PipelineExecutionSummaries !== null
        ? deserializeAws_json1_1PipelineExecutionSummaryList(output.PipelineExecutionSummaries, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListPipelineExecutionStepsResponse = (
  output: any,
  context: __SerdeContext
): ListPipelineExecutionStepsResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    PipelineExecutionSteps:
      output.PipelineExecutionSteps !== undefined && output.PipelineExecutionSteps !== null
        ? deserializeAws_json1_1PipelineExecutionStepList(output.PipelineExecutionSteps, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListPipelineParametersForExecutionResponse = (
  output: any,
  context: __SerdeContext
): ListPipelineParametersForExecutionResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    PipelineParameters:
      output.PipelineParameters !== undefined && output.PipelineParameters !== null
        ? deserializeAws_json1_1ParameterList(output.PipelineParameters, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListPipelinesResponse = (output: any, context: __SerdeContext): ListPipelinesResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    PipelineSummaries:
      output.PipelineSummaries !== undefined && output.PipelineSummaries !== null
        ? deserializeAws_json1_1PipelineSummaryList(output.PipelineSummaries, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListProcessingJobsResponse = (
  output: any,
  context: __SerdeContext
): ListProcessingJobsResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    ProcessingJobSummaries:
      output.ProcessingJobSummaries !== undefined && output.ProcessingJobSummaries !== null
        ? deserializeAws_json1_1ProcessingJobSummaries(output.ProcessingJobSummaries, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListProjectsOutput = (output: any, context: __SerdeContext): ListProjectsOutput => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    ProjectSummaryList:
      output.ProjectSummaryList !== undefined && output.ProjectSummaryList !== null
        ? deserializeAws_json1_1ProjectSummaryList(output.ProjectSummaryList, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListSubscribedWorkteamsResponse = (
  output: any,
  context: __SerdeContext
): ListSubscribedWorkteamsResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    SubscribedWorkteams:
      output.SubscribedWorkteams !== undefined && output.SubscribedWorkteams !== null
        ? deserializeAws_json1_1SubscribedWorkteams(output.SubscribedWorkteams, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListTagsOutput = (output: any, context: __SerdeContext): ListTagsOutput => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListTrainingJobsForHyperParameterTuningJobResponse = (
  output: any,
  context: __SerdeContext
): ListTrainingJobsForHyperParameterTuningJobResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    TrainingJobSummaries:
      output.TrainingJobSummaries !== undefined && output.TrainingJobSummaries !== null
        ? deserializeAws_json1_1HyperParameterTrainingJobSummaries(output.TrainingJobSummaries, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListTrainingJobsResponse = (
  output: any,
  context: __SerdeContext
): ListTrainingJobsResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    TrainingJobSummaries:
      output.TrainingJobSummaries !== undefined && output.TrainingJobSummaries !== null
        ? deserializeAws_json1_1TrainingJobSummaries(output.TrainingJobSummaries, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListTransformJobsResponse = (
  output: any,
  context: __SerdeContext
): ListTransformJobsResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    TransformJobSummaries:
      output.TransformJobSummaries !== undefined && output.TransformJobSummaries !== null
        ? deserializeAws_json1_1TransformJobSummaries(output.TransformJobSummaries, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListTrialComponentsResponse = (
  output: any,
  context: __SerdeContext
): ListTrialComponentsResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    TrialComponentSummaries:
      output.TrialComponentSummaries !== undefined && output.TrialComponentSummaries !== null
        ? deserializeAws_json1_1TrialComponentSummaries(output.TrialComponentSummaries, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListTrialsResponse = (output: any, context: __SerdeContext): ListTrialsResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    TrialSummaries:
      output.TrialSummaries !== undefined && output.TrialSummaries !== null
        ? deserializeAws_json1_1TrialSummaries(output.TrialSummaries, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListUserProfilesResponse = (
  output: any,
  context: __SerdeContext
): ListUserProfilesResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    UserProfiles:
      output.UserProfiles !== undefined && output.UserProfiles !== null
        ? deserializeAws_json1_1UserProfileList(output.UserProfiles, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListWorkforcesResponse = (output: any, context: __SerdeContext): ListWorkforcesResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    Workforces:
      output.Workforces !== undefined && output.Workforces !== null
        ? deserializeAws_json1_1Workforces(output.Workforces, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ListWorkteamsResponse = (output: any, context: __SerdeContext): ListWorkteamsResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    Workteams:
      output.Workteams !== undefined && output.Workteams !== null
        ? deserializeAws_json1_1Workteams(output.Workteams, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1MemberDefinition = (output: any, context: __SerdeContext): MemberDefinition => {
  return {
    CognitoMemberDefinition:
      output.CognitoMemberDefinition !== undefined && output.CognitoMemberDefinition !== null
        ? deserializeAws_json1_1CognitoMemberDefinition(output.CognitoMemberDefinition, context)
        : undefined,
    OidcMemberDefinition:
      output.OidcMemberDefinition !== undefined && output.OidcMemberDefinition !== null
        ? deserializeAws_json1_1OidcMemberDefinition(output.OidcMemberDefinition, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1MemberDefinitions = (output: any, context: __SerdeContext): MemberDefinition[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1MemberDefinition(entry, context);
    });
};

const deserializeAws_json1_1MetadataProperties = (output: any, context: __SerdeContext): MetadataProperties => {
  return {
    CommitId: output.CommitId !== undefined && output.CommitId !== null ? output.CommitId : undefined,
    GeneratedBy: output.GeneratedBy !== undefined && output.GeneratedBy !== null ? output.GeneratedBy : undefined,
    ProjectId: output.ProjectId !== undefined && output.ProjectId !== null ? output.ProjectId : undefined,
    Repository: output.Repository !== undefined && output.Repository !== null ? output.Repository : undefined,
  } as any;
};

const deserializeAws_json1_1MetricData = (output: any, context: __SerdeContext): MetricData => {
  return {
    MetricName: output.MetricName !== undefined && output.MetricName !== null ? output.MetricName : undefined,
    Timestamp:
      output.Timestamp !== undefined && output.Timestamp !== null
        ? new Date(Math.round(output.Timestamp * 1000))
        : undefined,
    Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
  } as any;
};

const deserializeAws_json1_1MetricDefinition = (output: any, context: __SerdeContext): MetricDefinition => {
  return {
    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
    Regex: output.Regex !== undefined && output.Regex !== null ? output.Regex : undefined,
  } as any;
};

const deserializeAws_json1_1MetricDefinitionList = (output: any, context: __SerdeContext): MetricDefinition[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1MetricDefinition(entry, context);
    });
};

const deserializeAws_json1_1MetricsSource = (output: any, context: __SerdeContext): MetricsSource => {
  return {
    ContentDigest:
      output.ContentDigest !== undefined && output.ContentDigest !== null ? output.ContentDigest : undefined,
    ContentType: output.ContentType !== undefined && output.ContentType !== null ? output.ContentType : undefined,
    S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1ModelArtifacts = (output: any, context: __SerdeContext): ModelArtifacts => {
  return {
    S3ModelArtifacts:
      output.S3ModelArtifacts !== undefined && output.S3ModelArtifacts !== null ? output.S3ModelArtifacts : undefined,
  } as any;
};

const deserializeAws_json1_1ModelBiasAppSpecification = (
  output: any,
  context: __SerdeContext
): ModelBiasAppSpecification => {
  return {
    ConfigUri: output.ConfigUri !== undefined && output.ConfigUri !== null ? output.ConfigUri : undefined,
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1MonitoringEnvironmentMap(output.Environment, context)
        : undefined,
    ImageUri: output.ImageUri !== undefined && output.ImageUri !== null ? output.ImageUri : undefined,
  } as any;
};

const deserializeAws_json1_1ModelBiasBaselineConfig = (
  output: any,
  context: __SerdeContext
): ModelBiasBaselineConfig => {
  return {
    BaseliningJobName:
      output.BaseliningJobName !== undefined && output.BaseliningJobName !== null
        ? output.BaseliningJobName
        : undefined,
    ConstraintsResource:
      output.ConstraintsResource !== undefined && output.ConstraintsResource !== null
        ? deserializeAws_json1_1MonitoringConstraintsResource(output.ConstraintsResource, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelBiasJobInput = (output: any, context: __SerdeContext): ModelBiasJobInput => {
  return {
    EndpointInput:
      output.EndpointInput !== undefined && output.EndpointInput !== null
        ? deserializeAws_json1_1EndpointInput(output.EndpointInput, context)
        : undefined,
    GroundTruthS3Input:
      output.GroundTruthS3Input !== undefined && output.GroundTruthS3Input !== null
        ? deserializeAws_json1_1MonitoringGroundTruthS3Input(output.GroundTruthS3Input, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelClientConfig = (output: any, context: __SerdeContext): ModelClientConfig => {
  return {
    InvocationsMaxRetries:
      output.InvocationsMaxRetries !== undefined && output.InvocationsMaxRetries !== null
        ? output.InvocationsMaxRetries
        : undefined,
    InvocationsTimeoutInSeconds:
      output.InvocationsTimeoutInSeconds !== undefined && output.InvocationsTimeoutInSeconds !== null
        ? output.InvocationsTimeoutInSeconds
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelDataQuality = (output: any, context: __SerdeContext): ModelDataQuality => {
  return {
    Constraints:
      output.Constraints !== undefined && output.Constraints !== null
        ? deserializeAws_json1_1MetricsSource(output.Constraints, context)
        : undefined,
    Statistics:
      output.Statistics !== undefined && output.Statistics !== null
        ? deserializeAws_json1_1MetricsSource(output.Statistics, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelDeployConfig = (output: any, context: __SerdeContext): ModelDeployConfig => {
  return {
    AutoGenerateEndpointName:
      output.AutoGenerateEndpointName !== undefined && output.AutoGenerateEndpointName !== null
        ? output.AutoGenerateEndpointName
        : undefined,
    EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
  } as any;
};

const deserializeAws_json1_1ModelDeployResult = (output: any, context: __SerdeContext): ModelDeployResult => {
  return {
    EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
  } as any;
};

const deserializeAws_json1_1ModelDigests = (output: any, context: __SerdeContext): ModelDigests => {
  return {
    ArtifactDigest:
      output.ArtifactDigest !== undefined && output.ArtifactDigest !== null ? output.ArtifactDigest : undefined,
  } as any;
};

const deserializeAws_json1_1ModelExplainabilityAppSpecification = (
  output: any,
  context: __SerdeContext
): ModelExplainabilityAppSpecification => {
  return {
    ConfigUri: output.ConfigUri !== undefined && output.ConfigUri !== null ? output.ConfigUri : undefined,
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1MonitoringEnvironmentMap(output.Environment, context)
        : undefined,
    ImageUri: output.ImageUri !== undefined && output.ImageUri !== null ? output.ImageUri : undefined,
  } as any;
};

const deserializeAws_json1_1ModelExplainabilityBaselineConfig = (
  output: any,
  context: __SerdeContext
): ModelExplainabilityBaselineConfig => {
  return {
    BaseliningJobName:
      output.BaseliningJobName !== undefined && output.BaseliningJobName !== null
        ? output.BaseliningJobName
        : undefined,
    ConstraintsResource:
      output.ConstraintsResource !== undefined && output.ConstraintsResource !== null
        ? deserializeAws_json1_1MonitoringConstraintsResource(output.ConstraintsResource, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelExplainabilityJobInput = (
  output: any,
  context: __SerdeContext
): ModelExplainabilityJobInput => {
  return {
    EndpointInput:
      output.EndpointInput !== undefined && output.EndpointInput !== null
        ? deserializeAws_json1_1EndpointInput(output.EndpointInput, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelMetrics = (output: any, context: __SerdeContext): ModelMetrics => {
  return {
    Bias:
      output.Bias !== undefined && output.Bias !== null ? deserializeAws_json1_1Bias(output.Bias, context) : undefined,
    Explainability:
      output.Explainability !== undefined && output.Explainability !== null
        ? deserializeAws_json1_1Explainability(output.Explainability, context)
        : undefined,
    ModelDataQuality:
      output.ModelDataQuality !== undefined && output.ModelDataQuality !== null
        ? deserializeAws_json1_1ModelDataQuality(output.ModelDataQuality, context)
        : undefined,
    ModelQuality:
      output.ModelQuality !== undefined && output.ModelQuality !== null
        ? deserializeAws_json1_1ModelQuality(output.ModelQuality, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelPackage = (output: any, context: __SerdeContext): ModelPackage => {
  return {
    ApprovalDescription:
      output.ApprovalDescription !== undefined && output.ApprovalDescription !== null
        ? output.ApprovalDescription
        : undefined,
    CertifyForMarketplace:
      output.CertifyForMarketplace !== undefined && output.CertifyForMarketplace !== null
        ? output.CertifyForMarketplace
        : undefined,
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    InferenceSpecification:
      output.InferenceSpecification !== undefined && output.InferenceSpecification !== null
        ? deserializeAws_json1_1InferenceSpecification(output.InferenceSpecification, context)
        : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    MetadataProperties:
      output.MetadataProperties !== undefined && output.MetadataProperties !== null
        ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
        : undefined,
    ModelApprovalStatus:
      output.ModelApprovalStatus !== undefined && output.ModelApprovalStatus !== null
        ? output.ModelApprovalStatus
        : undefined,
    ModelMetrics:
      output.ModelMetrics !== undefined && output.ModelMetrics !== null
        ? deserializeAws_json1_1ModelMetrics(output.ModelMetrics, context)
        : undefined,
    ModelPackageArn:
      output.ModelPackageArn !== undefined && output.ModelPackageArn !== null ? output.ModelPackageArn : undefined,
    ModelPackageDescription:
      output.ModelPackageDescription !== undefined && output.ModelPackageDescription !== null
        ? output.ModelPackageDescription
        : undefined,
    ModelPackageGroupName:
      output.ModelPackageGroupName !== undefined && output.ModelPackageGroupName !== null
        ? output.ModelPackageGroupName
        : undefined,
    ModelPackageName:
      output.ModelPackageName !== undefined && output.ModelPackageName !== null ? output.ModelPackageName : undefined,
    ModelPackageStatus:
      output.ModelPackageStatus !== undefined && output.ModelPackageStatus !== null
        ? output.ModelPackageStatus
        : undefined,
    ModelPackageStatusDetails:
      output.ModelPackageStatusDetails !== undefined && output.ModelPackageStatusDetails !== null
        ? deserializeAws_json1_1ModelPackageStatusDetails(output.ModelPackageStatusDetails, context)
        : undefined,
    ModelPackageVersion:
      output.ModelPackageVersion !== undefined && output.ModelPackageVersion !== null
        ? output.ModelPackageVersion
        : undefined,
    SourceAlgorithmSpecification:
      output.SourceAlgorithmSpecification !== undefined && output.SourceAlgorithmSpecification !== null
        ? deserializeAws_json1_1SourceAlgorithmSpecification(output.SourceAlgorithmSpecification, context)
        : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
    ValidationSpecification:
      output.ValidationSpecification !== undefined && output.ValidationSpecification !== null
        ? deserializeAws_json1_1ModelPackageValidationSpecification(output.ValidationSpecification, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelPackageContainerDefinition = (
  output: any,
  context: __SerdeContext
): ModelPackageContainerDefinition => {
  return {
    ContainerHostname:
      output.ContainerHostname !== undefined && output.ContainerHostname !== null
        ? output.ContainerHostname
        : undefined,
    Image: output.Image !== undefined && output.Image !== null ? output.Image : undefined,
    ImageDigest: output.ImageDigest !== undefined && output.ImageDigest !== null ? output.ImageDigest : undefined,
    ModelDataUrl: output.ModelDataUrl !== undefined && output.ModelDataUrl !== null ? output.ModelDataUrl : undefined,
    ProductId: output.ProductId !== undefined && output.ProductId !== null ? output.ProductId : undefined,
  } as any;
};

const deserializeAws_json1_1ModelPackageContainerDefinitionList = (
  output: any,
  context: __SerdeContext
): ModelPackageContainerDefinition[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ModelPackageContainerDefinition(entry, context);
    });
};

const deserializeAws_json1_1ModelPackageGroup = (output: any, context: __SerdeContext): ModelPackageGroup => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    ModelPackageGroupArn:
      output.ModelPackageGroupArn !== undefined && output.ModelPackageGroupArn !== null
        ? output.ModelPackageGroupArn
        : undefined,
    ModelPackageGroupDescription:
      output.ModelPackageGroupDescription !== undefined && output.ModelPackageGroupDescription !== null
        ? output.ModelPackageGroupDescription
        : undefined,
    ModelPackageGroupName:
      output.ModelPackageGroupName !== undefined && output.ModelPackageGroupName !== null
        ? output.ModelPackageGroupName
        : undefined,
    ModelPackageGroupStatus:
      output.ModelPackageGroupStatus !== undefined && output.ModelPackageGroupStatus !== null
        ? output.ModelPackageGroupStatus
        : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelPackageGroupSummary = (
  output: any,
  context: __SerdeContext
): ModelPackageGroupSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    ModelPackageGroupArn:
      output.ModelPackageGroupArn !== undefined && output.ModelPackageGroupArn !== null
        ? output.ModelPackageGroupArn
        : undefined,
    ModelPackageGroupDescription:
      output.ModelPackageGroupDescription !== undefined && output.ModelPackageGroupDescription !== null
        ? output.ModelPackageGroupDescription
        : undefined,
    ModelPackageGroupName:
      output.ModelPackageGroupName !== undefined && output.ModelPackageGroupName !== null
        ? output.ModelPackageGroupName
        : undefined,
    ModelPackageGroupStatus:
      output.ModelPackageGroupStatus !== undefined && output.ModelPackageGroupStatus !== null
        ? output.ModelPackageGroupStatus
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelPackageGroupSummaryList = (
  output: any,
  context: __SerdeContext
): ModelPackageGroupSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ModelPackageGroupSummary(entry, context);
    });
};

const deserializeAws_json1_1ModelPackageStatusDetails = (
  output: any,
  context: __SerdeContext
): ModelPackageStatusDetails => {
  return {
    ImageScanStatuses:
      output.ImageScanStatuses !== undefined && output.ImageScanStatuses !== null
        ? deserializeAws_json1_1ModelPackageStatusItemList(output.ImageScanStatuses, context)
        : undefined,
    ValidationStatuses:
      output.ValidationStatuses !== undefined && output.ValidationStatuses !== null
        ? deserializeAws_json1_1ModelPackageStatusItemList(output.ValidationStatuses, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelPackageStatusItem = (output: any, context: __SerdeContext): ModelPackageStatusItem => {
  return {
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
    Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
  } as any;
};

const deserializeAws_json1_1ModelPackageStatusItemList = (
  output: any,
  context: __SerdeContext
): ModelPackageStatusItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ModelPackageStatusItem(entry, context);
    });
};

const deserializeAws_json1_1ModelPackageSummary = (output: any, context: __SerdeContext): ModelPackageSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    ModelApprovalStatus:
      output.ModelApprovalStatus !== undefined && output.ModelApprovalStatus !== null
        ? output.ModelApprovalStatus
        : undefined,
    ModelPackageArn:
      output.ModelPackageArn !== undefined && output.ModelPackageArn !== null ? output.ModelPackageArn : undefined,
    ModelPackageDescription:
      output.ModelPackageDescription !== undefined && output.ModelPackageDescription !== null
        ? output.ModelPackageDescription
        : undefined,
    ModelPackageGroupName:
      output.ModelPackageGroupName !== undefined && output.ModelPackageGroupName !== null
        ? output.ModelPackageGroupName
        : undefined,
    ModelPackageName:
      output.ModelPackageName !== undefined && output.ModelPackageName !== null ? output.ModelPackageName : undefined,
    ModelPackageStatus:
      output.ModelPackageStatus !== undefined && output.ModelPackageStatus !== null
        ? output.ModelPackageStatus
        : undefined,
    ModelPackageVersion:
      output.ModelPackageVersion !== undefined && output.ModelPackageVersion !== null
        ? output.ModelPackageVersion
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelPackageSummaryList = (output: any, context: __SerdeContext): ModelPackageSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ModelPackageSummary(entry, context);
    });
};

const deserializeAws_json1_1ModelPackageValidationProfile = (
  output: any,
  context: __SerdeContext
): ModelPackageValidationProfile => {
  return {
    ProfileName: output.ProfileName !== undefined && output.ProfileName !== null ? output.ProfileName : undefined,
    TransformJobDefinition:
      output.TransformJobDefinition !== undefined && output.TransformJobDefinition !== null
        ? deserializeAws_json1_1TransformJobDefinition(output.TransformJobDefinition, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelPackageValidationProfiles = (
  output: any,
  context: __SerdeContext
): ModelPackageValidationProfile[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ModelPackageValidationProfile(entry, context);
    });
};

const deserializeAws_json1_1ModelPackageValidationSpecification = (
  output: any,
  context: __SerdeContext
): ModelPackageValidationSpecification => {
  return {
    ValidationProfiles:
      output.ValidationProfiles !== undefined && output.ValidationProfiles !== null
        ? deserializeAws_json1_1ModelPackageValidationProfiles(output.ValidationProfiles, context)
        : undefined,
    ValidationRole:
      output.ValidationRole !== undefined && output.ValidationRole !== null ? output.ValidationRole : undefined,
  } as any;
};

const deserializeAws_json1_1ModelQuality = (output: any, context: __SerdeContext): ModelQuality => {
  return {
    Constraints:
      output.Constraints !== undefined && output.Constraints !== null
        ? deserializeAws_json1_1MetricsSource(output.Constraints, context)
        : undefined,
    Statistics:
      output.Statistics !== undefined && output.Statistics !== null
        ? deserializeAws_json1_1MetricsSource(output.Statistics, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelQualityAppSpecification = (
  output: any,
  context: __SerdeContext
): ModelQualityAppSpecification => {
  return {
    ContainerArguments:
      output.ContainerArguments !== undefined && output.ContainerArguments !== null
        ? deserializeAws_json1_1MonitoringContainerArguments(output.ContainerArguments, context)
        : undefined,
    ContainerEntrypoint:
      output.ContainerEntrypoint !== undefined && output.ContainerEntrypoint !== null
        ? deserializeAws_json1_1ContainerEntrypoint(output.ContainerEntrypoint, context)
        : undefined,
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1MonitoringEnvironmentMap(output.Environment, context)
        : undefined,
    ImageUri: output.ImageUri !== undefined && output.ImageUri !== null ? output.ImageUri : undefined,
    PostAnalyticsProcessorSourceUri:
      output.PostAnalyticsProcessorSourceUri !== undefined && output.PostAnalyticsProcessorSourceUri !== null
        ? output.PostAnalyticsProcessorSourceUri
        : undefined,
    ProblemType: output.ProblemType !== undefined && output.ProblemType !== null ? output.ProblemType : undefined,
    RecordPreprocessorSourceUri:
      output.RecordPreprocessorSourceUri !== undefined && output.RecordPreprocessorSourceUri !== null
        ? output.RecordPreprocessorSourceUri
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelQualityBaselineConfig = (
  output: any,
  context: __SerdeContext
): ModelQualityBaselineConfig => {
  return {
    BaseliningJobName:
      output.BaseliningJobName !== undefined && output.BaseliningJobName !== null
        ? output.BaseliningJobName
        : undefined,
    ConstraintsResource:
      output.ConstraintsResource !== undefined && output.ConstraintsResource !== null
        ? deserializeAws_json1_1MonitoringConstraintsResource(output.ConstraintsResource, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelQualityJobInput = (output: any, context: __SerdeContext): ModelQualityJobInput => {
  return {
    EndpointInput:
      output.EndpointInput !== undefined && output.EndpointInput !== null
        ? deserializeAws_json1_1EndpointInput(output.EndpointInput, context)
        : undefined,
    GroundTruthS3Input:
      output.GroundTruthS3Input !== undefined && output.GroundTruthS3Input !== null
        ? deserializeAws_json1_1MonitoringGroundTruthS3Input(output.GroundTruthS3Input, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ModelStepMetadata = (output: any, context: __SerdeContext): ModelStepMetadata => {
  return {
    Arn: output.Arn !== undefined && output.Arn !== null ? output.Arn : undefined,
  } as any;
};

const deserializeAws_json1_1ModelSummary = (output: any, context: __SerdeContext): ModelSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    ModelArn: output.ModelArn !== undefined && output.ModelArn !== null ? output.ModelArn : undefined,
    ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
  } as any;
};

const deserializeAws_json1_1ModelSummaryList = (output: any, context: __SerdeContext): ModelSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ModelSummary(entry, context);
    });
};

const deserializeAws_json1_1MonitoringAppSpecification = (
  output: any,
  context: __SerdeContext
): MonitoringAppSpecification => {
  return {
    ContainerArguments:
      output.ContainerArguments !== undefined && output.ContainerArguments !== null
        ? deserializeAws_json1_1MonitoringContainerArguments(output.ContainerArguments, context)
        : undefined,
    ContainerEntrypoint:
      output.ContainerEntrypoint !== undefined && output.ContainerEntrypoint !== null
        ? deserializeAws_json1_1ContainerEntrypoint(output.ContainerEntrypoint, context)
        : undefined,
    ImageUri: output.ImageUri !== undefined && output.ImageUri !== null ? output.ImageUri : undefined,
    PostAnalyticsProcessorSourceUri:
      output.PostAnalyticsProcessorSourceUri !== undefined && output.PostAnalyticsProcessorSourceUri !== null
        ? output.PostAnalyticsProcessorSourceUri
        : undefined,
    RecordPreprocessorSourceUri:
      output.RecordPreprocessorSourceUri !== undefined && output.RecordPreprocessorSourceUri !== null
        ? output.RecordPreprocessorSourceUri
        : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringBaselineConfig = (
  output: any,
  context: __SerdeContext
): MonitoringBaselineConfig => {
  return {
    BaseliningJobName:
      output.BaseliningJobName !== undefined && output.BaseliningJobName !== null
        ? output.BaseliningJobName
        : undefined,
    ConstraintsResource:
      output.ConstraintsResource !== undefined && output.ConstraintsResource !== null
        ? deserializeAws_json1_1MonitoringConstraintsResource(output.ConstraintsResource, context)
        : undefined,
    StatisticsResource:
      output.StatisticsResource !== undefined && output.StatisticsResource !== null
        ? deserializeAws_json1_1MonitoringStatisticsResource(output.StatisticsResource, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringClusterConfig = (
  output: any,
  context: __SerdeContext
): MonitoringClusterConfig => {
  return {
    InstanceCount:
      output.InstanceCount !== undefined && output.InstanceCount !== null ? output.InstanceCount : undefined,
    InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
    VolumeKmsKeyId:
      output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null ? output.VolumeKmsKeyId : undefined,
    VolumeSizeInGB:
      output.VolumeSizeInGB !== undefined && output.VolumeSizeInGB !== null ? output.VolumeSizeInGB : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringConstraintsResource = (
  output: any,
  context: __SerdeContext
): MonitoringConstraintsResource => {
  return {
    S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringContainerArguments = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1MonitoringEnvironmentMap = (
  output: any,
  context: __SerdeContext
): { [key: string]: string } => {
  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const deserializeAws_json1_1MonitoringExecutionSummary = (
  output: any,
  context: __SerdeContext
): MonitoringExecutionSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    MonitoringExecutionStatus:
      output.MonitoringExecutionStatus !== undefined && output.MonitoringExecutionStatus !== null
        ? output.MonitoringExecutionStatus
        : undefined,
    MonitoringJobDefinitionName:
      output.MonitoringJobDefinitionName !== undefined && output.MonitoringJobDefinitionName !== null
        ? output.MonitoringJobDefinitionName
        : undefined,
    MonitoringScheduleName:
      output.MonitoringScheduleName !== undefined && output.MonitoringScheduleName !== null
        ? output.MonitoringScheduleName
        : undefined,
    MonitoringType:
      output.MonitoringType !== undefined && output.MonitoringType !== null ? output.MonitoringType : undefined,
    ProcessingJobArn:
      output.ProcessingJobArn !== undefined && output.ProcessingJobArn !== null ? output.ProcessingJobArn : undefined,
    ScheduledTime:
      output.ScheduledTime !== undefined && output.ScheduledTime !== null
        ? new Date(Math.round(output.ScheduledTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringExecutionSummaryList = (
  output: any,
  context: __SerdeContext
): MonitoringExecutionSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1MonitoringExecutionSummary(entry, context);
    });
};

const deserializeAws_json1_1MonitoringGroundTruthS3Input = (
  output: any,
  context: __SerdeContext
): MonitoringGroundTruthS3Input => {
  return {
    S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringInput = (output: any, context: __SerdeContext): MonitoringInput => {
  return {
    EndpointInput:
      output.EndpointInput !== undefined && output.EndpointInput !== null
        ? deserializeAws_json1_1EndpointInput(output.EndpointInput, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringInputs = (output: any, context: __SerdeContext): MonitoringInput[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1MonitoringInput(entry, context);
    });
};

const deserializeAws_json1_1MonitoringJobDefinition = (
  output: any,
  context: __SerdeContext
): MonitoringJobDefinition => {
  return {
    BaselineConfig:
      output.BaselineConfig !== undefined && output.BaselineConfig !== null
        ? deserializeAws_json1_1MonitoringBaselineConfig(output.BaselineConfig, context)
        : undefined,
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1MonitoringEnvironmentMap(output.Environment, context)
        : undefined,
    MonitoringAppSpecification:
      output.MonitoringAppSpecification !== undefined && output.MonitoringAppSpecification !== null
        ? deserializeAws_json1_1MonitoringAppSpecification(output.MonitoringAppSpecification, context)
        : undefined,
    MonitoringInputs:
      output.MonitoringInputs !== undefined && output.MonitoringInputs !== null
        ? deserializeAws_json1_1MonitoringInputs(output.MonitoringInputs, context)
        : undefined,
    MonitoringOutputConfig:
      output.MonitoringOutputConfig !== undefined && output.MonitoringOutputConfig !== null
        ? deserializeAws_json1_1MonitoringOutputConfig(output.MonitoringOutputConfig, context)
        : undefined,
    MonitoringResources:
      output.MonitoringResources !== undefined && output.MonitoringResources !== null
        ? deserializeAws_json1_1MonitoringResources(output.MonitoringResources, context)
        : undefined,
    NetworkConfig:
      output.NetworkConfig !== undefined && output.NetworkConfig !== null
        ? deserializeAws_json1_1NetworkConfig(output.NetworkConfig, context)
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    StoppingCondition:
      output.StoppingCondition !== undefined && output.StoppingCondition !== null
        ? deserializeAws_json1_1MonitoringStoppingCondition(output.StoppingCondition, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringJobDefinitionSummary = (
  output: any,
  context: __SerdeContext
): MonitoringJobDefinitionSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
    MonitoringJobDefinitionArn:
      output.MonitoringJobDefinitionArn !== undefined && output.MonitoringJobDefinitionArn !== null
        ? output.MonitoringJobDefinitionArn
        : undefined,
    MonitoringJobDefinitionName:
      output.MonitoringJobDefinitionName !== undefined && output.MonitoringJobDefinitionName !== null
        ? output.MonitoringJobDefinitionName
        : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringJobDefinitionSummaryList = (
  output: any,
  context: __SerdeContext
): MonitoringJobDefinitionSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1MonitoringJobDefinitionSummary(entry, context);
    });
};

const deserializeAws_json1_1MonitoringNetworkConfig = (
  output: any,
  context: __SerdeContext
): MonitoringNetworkConfig => {
  return {
    EnableInterContainerTrafficEncryption:
      output.EnableInterContainerTrafficEncryption !== undefined &&
      output.EnableInterContainerTrafficEncryption !== null
        ? output.EnableInterContainerTrafficEncryption
        : undefined,
    EnableNetworkIsolation:
      output.EnableNetworkIsolation !== undefined && output.EnableNetworkIsolation !== null
        ? output.EnableNetworkIsolation
        : undefined,
    VpcConfig:
      output.VpcConfig !== undefined && output.VpcConfig !== null
        ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringOutput = (output: any, context: __SerdeContext): MonitoringOutput => {
  return {
    S3Output:
      output.S3Output !== undefined && output.S3Output !== null
        ? deserializeAws_json1_1MonitoringS3Output(output.S3Output, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringOutputConfig = (output: any, context: __SerdeContext): MonitoringOutputConfig => {
  return {
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    MonitoringOutputs:
      output.MonitoringOutputs !== undefined && output.MonitoringOutputs !== null
        ? deserializeAws_json1_1MonitoringOutputs(output.MonitoringOutputs, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringOutputs = (output: any, context: __SerdeContext): MonitoringOutput[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1MonitoringOutput(entry, context);
    });
};

const deserializeAws_json1_1MonitoringResources = (output: any, context: __SerdeContext): MonitoringResources => {
  return {
    ClusterConfig:
      output.ClusterConfig !== undefined && output.ClusterConfig !== null
        ? deserializeAws_json1_1MonitoringClusterConfig(output.ClusterConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringS3Output = (output: any, context: __SerdeContext): MonitoringS3Output => {
  return {
    LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
    S3UploadMode: output.S3UploadMode !== undefined && output.S3UploadMode !== null ? output.S3UploadMode : undefined,
    S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringSchedule = (output: any, context: __SerdeContext): MonitoringSchedule => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    LastMonitoringExecutionSummary:
      output.LastMonitoringExecutionSummary !== undefined && output.LastMonitoringExecutionSummary !== null
        ? deserializeAws_json1_1MonitoringExecutionSummary(output.LastMonitoringExecutionSummary, context)
        : undefined,
    MonitoringScheduleArn:
      output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
        ? output.MonitoringScheduleArn
        : undefined,
    MonitoringScheduleConfig:
      output.MonitoringScheduleConfig !== undefined && output.MonitoringScheduleConfig !== null
        ? deserializeAws_json1_1MonitoringScheduleConfig(output.MonitoringScheduleConfig, context)
        : undefined,
    MonitoringScheduleName:
      output.MonitoringScheduleName !== undefined && output.MonitoringScheduleName !== null
        ? output.MonitoringScheduleName
        : undefined,
    MonitoringScheduleStatus:
      output.MonitoringScheduleStatus !== undefined && output.MonitoringScheduleStatus !== null
        ? output.MonitoringScheduleStatus
        : undefined,
    MonitoringType:
      output.MonitoringType !== undefined && output.MonitoringType !== null ? output.MonitoringType : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringScheduleConfig = (
  output: any,
  context: __SerdeContext
): MonitoringScheduleConfig => {
  return {
    MonitoringJobDefinition:
      output.MonitoringJobDefinition !== undefined && output.MonitoringJobDefinition !== null
        ? deserializeAws_json1_1MonitoringJobDefinition(output.MonitoringJobDefinition, context)
        : undefined,
    MonitoringJobDefinitionName:
      output.MonitoringJobDefinitionName !== undefined && output.MonitoringJobDefinitionName !== null
        ? output.MonitoringJobDefinitionName
        : undefined,
    MonitoringType:
      output.MonitoringType !== undefined && output.MonitoringType !== null ? output.MonitoringType : undefined,
    ScheduleConfig:
      output.ScheduleConfig !== undefined && output.ScheduleConfig !== null
        ? deserializeAws_json1_1ScheduleConfig(output.ScheduleConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringScheduleList = (output: any, context: __SerdeContext): MonitoringSchedule[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1MonitoringSchedule(entry, context);
    });
};

const deserializeAws_json1_1MonitoringScheduleSummary = (
  output: any,
  context: __SerdeContext
): MonitoringScheduleSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    EndpointName: output.EndpointName !== undefined && output.EndpointName !== null ? output.EndpointName : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    MonitoringJobDefinitionName:
      output.MonitoringJobDefinitionName !== undefined && output.MonitoringJobDefinitionName !== null
        ? output.MonitoringJobDefinitionName
        : undefined,
    MonitoringScheduleArn:
      output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
        ? output.MonitoringScheduleArn
        : undefined,
    MonitoringScheduleName:
      output.MonitoringScheduleName !== undefined && output.MonitoringScheduleName !== null
        ? output.MonitoringScheduleName
        : undefined,
    MonitoringScheduleStatus:
      output.MonitoringScheduleStatus !== undefined && output.MonitoringScheduleStatus !== null
        ? output.MonitoringScheduleStatus
        : undefined,
    MonitoringType:
      output.MonitoringType !== undefined && output.MonitoringType !== null ? output.MonitoringType : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringScheduleSummaryList = (
  output: any,
  context: __SerdeContext
): MonitoringScheduleSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1MonitoringScheduleSummary(entry, context);
    });
};

const deserializeAws_json1_1MonitoringStatisticsResource = (
  output: any,
  context: __SerdeContext
): MonitoringStatisticsResource => {
  return {
    S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1MonitoringStoppingCondition = (
  output: any,
  context: __SerdeContext
): MonitoringStoppingCondition => {
  return {
    MaxRuntimeInSeconds:
      output.MaxRuntimeInSeconds !== undefined && output.MaxRuntimeInSeconds !== null
        ? output.MaxRuntimeInSeconds
        : undefined,
  } as any;
};

const deserializeAws_json1_1MultiModelConfig = (output: any, context: __SerdeContext): MultiModelConfig => {
  return {
    ModelCacheSetting:
      output.ModelCacheSetting !== undefined && output.ModelCacheSetting !== null
        ? output.ModelCacheSetting
        : undefined,
  } as any;
};

const deserializeAws_json1_1NetworkConfig = (output: any, context: __SerdeContext): NetworkConfig => {
  return {
    EnableInterContainerTrafficEncryption:
      output.EnableInterContainerTrafficEncryption !== undefined &&
      output.EnableInterContainerTrafficEncryption !== null
        ? output.EnableInterContainerTrafficEncryption
        : undefined,
    EnableNetworkIsolation:
      output.EnableNetworkIsolation !== undefined && output.EnableNetworkIsolation !== null
        ? output.EnableNetworkIsolation
        : undefined,
    VpcConfig:
      output.VpcConfig !== undefined && output.VpcConfig !== null
        ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1NotebookInstanceAcceleratorTypes = (
  output: any,
  context: __SerdeContext
): (NotebookInstanceAcceleratorType | string)[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1NotebookInstanceLifecycleConfigList = (
  output: any,
  context: __SerdeContext
): NotebookInstanceLifecycleHook[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1NotebookInstanceLifecycleHook(entry, context);
    });
};

const deserializeAws_json1_1NotebookInstanceLifecycleConfigSummary = (
  output: any,
  context: __SerdeContext
): NotebookInstanceLifecycleConfigSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    NotebookInstanceLifecycleConfigArn:
      output.NotebookInstanceLifecycleConfigArn !== undefined && output.NotebookInstanceLifecycleConfigArn !== null
        ? output.NotebookInstanceLifecycleConfigArn
        : undefined,
    NotebookInstanceLifecycleConfigName:
      output.NotebookInstanceLifecycleConfigName !== undefined && output.NotebookInstanceLifecycleConfigName !== null
        ? output.NotebookInstanceLifecycleConfigName
        : undefined,
  } as any;
};

const deserializeAws_json1_1NotebookInstanceLifecycleConfigSummaryList = (
  output: any,
  context: __SerdeContext
): NotebookInstanceLifecycleConfigSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1NotebookInstanceLifecycleConfigSummary(entry, context);
    });
};

const deserializeAws_json1_1NotebookInstanceLifecycleHook = (
  output: any,
  context: __SerdeContext
): NotebookInstanceLifecycleHook => {
  return {
    Content: output.Content !== undefined && output.Content !== null ? output.Content : undefined,
  } as any;
};

const deserializeAws_json1_1NotebookInstanceSummary = (
  output: any,
  context: __SerdeContext
): NotebookInstanceSummary => {
  return {
    AdditionalCodeRepositories:
      output.AdditionalCodeRepositories !== undefined && output.AdditionalCodeRepositories !== null
        ? deserializeAws_json1_1AdditionalCodeRepositoryNamesOrUrls(output.AdditionalCodeRepositories, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DefaultCodeRepository:
      output.DefaultCodeRepository !== undefined && output.DefaultCodeRepository !== null
        ? output.DefaultCodeRepository
        : undefined,
    InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    NotebookInstanceArn:
      output.NotebookInstanceArn !== undefined && output.NotebookInstanceArn !== null
        ? output.NotebookInstanceArn
        : undefined,
    NotebookInstanceLifecycleConfigName:
      output.NotebookInstanceLifecycleConfigName !== undefined && output.NotebookInstanceLifecycleConfigName !== null
        ? output.NotebookInstanceLifecycleConfigName
        : undefined,
    NotebookInstanceName:
      output.NotebookInstanceName !== undefined && output.NotebookInstanceName !== null
        ? output.NotebookInstanceName
        : undefined,
    NotebookInstanceStatus:
      output.NotebookInstanceStatus !== undefined && output.NotebookInstanceStatus !== null
        ? output.NotebookInstanceStatus
        : undefined,
    Url: output.Url !== undefined && output.Url !== null ? output.Url : undefined,
  } as any;
};

const deserializeAws_json1_1NotebookInstanceSummaryList = (
  output: any,
  context: __SerdeContext
): NotebookInstanceSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1NotebookInstanceSummary(entry, context);
    });
};

const deserializeAws_json1_1NotificationConfiguration = (
  output: any,
  context: __SerdeContext
): NotificationConfiguration => {
  return {
    NotificationTopicArn:
      output.NotificationTopicArn !== undefined && output.NotificationTopicArn !== null
        ? output.NotificationTopicArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1ObjectiveStatusCounters = (
  output: any,
  context: __SerdeContext
): ObjectiveStatusCounters => {
  return {
    Failed: output.Failed !== undefined && output.Failed !== null ? output.Failed : undefined,
    Pending: output.Pending !== undefined && output.Pending !== null ? output.Pending : undefined,
    Succeeded: output.Succeeded !== undefined && output.Succeeded !== null ? output.Succeeded : undefined,
  } as any;
};

const deserializeAws_json1_1OfflineStoreConfig = (output: any, context: __SerdeContext): OfflineStoreConfig => {
  return {
    DataCatalogConfig:
      output.DataCatalogConfig !== undefined && output.DataCatalogConfig !== null
        ? deserializeAws_json1_1DataCatalogConfig(output.DataCatalogConfig, context)
        : undefined,
    DisableGlueTableCreation:
      output.DisableGlueTableCreation !== undefined && output.DisableGlueTableCreation !== null
        ? output.DisableGlueTableCreation
        : undefined,
    S3StorageConfig:
      output.S3StorageConfig !== undefined && output.S3StorageConfig !== null
        ? deserializeAws_json1_1S3StorageConfig(output.S3StorageConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1OfflineStoreStatus = (output: any, context: __SerdeContext): OfflineStoreStatus => {
  return {
    BlockedReason:
      output.BlockedReason !== undefined && output.BlockedReason !== null ? output.BlockedReason : undefined,
    Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
  } as any;
};

const deserializeAws_json1_1OidcConfigForResponse = (output: any, context: __SerdeContext): OidcConfigForResponse => {
  return {
    AuthorizationEndpoint:
      output.AuthorizationEndpoint !== undefined && output.AuthorizationEndpoint !== null
        ? output.AuthorizationEndpoint
        : undefined,
    ClientId: output.ClientId !== undefined && output.ClientId !== null ? output.ClientId : undefined,
    Issuer: output.Issuer !== undefined && output.Issuer !== null ? output.Issuer : undefined,
    JwksUri: output.JwksUri !== undefined && output.JwksUri !== null ? output.JwksUri : undefined,
    LogoutEndpoint:
      output.LogoutEndpoint !== undefined && output.LogoutEndpoint !== null ? output.LogoutEndpoint : undefined,
    TokenEndpoint:
      output.TokenEndpoint !== undefined && output.TokenEndpoint !== null ? output.TokenEndpoint : undefined,
    UserInfoEndpoint:
      output.UserInfoEndpoint !== undefined && output.UserInfoEndpoint !== null ? output.UserInfoEndpoint : undefined,
  } as any;
};

const deserializeAws_json1_1OidcMemberDefinition = (output: any, context: __SerdeContext): OidcMemberDefinition => {
  return {
    Groups:
      output.Groups !== undefined && output.Groups !== null
        ? deserializeAws_json1_1Groups(output.Groups, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1OnlineStoreConfig = (output: any, context: __SerdeContext): OnlineStoreConfig => {
  return {
    EnableOnlineStore:
      output.EnableOnlineStore !== undefined && output.EnableOnlineStore !== null
        ? output.EnableOnlineStore
        : undefined,
    SecurityConfig:
      output.SecurityConfig !== undefined && output.SecurityConfig !== null
        ? deserializeAws_json1_1OnlineStoreSecurityConfig(output.SecurityConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1OnlineStoreSecurityConfig = (
  output: any,
  context: __SerdeContext
): OnlineStoreSecurityConfig => {
  return {
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
  } as any;
};

const deserializeAws_json1_1OutputConfig = (output: any, context: __SerdeContext): OutputConfig => {
  return {
    CompilerOptions:
      output.CompilerOptions !== undefined && output.CompilerOptions !== null ? output.CompilerOptions : undefined,
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    S3OutputLocation:
      output.S3OutputLocation !== undefined && output.S3OutputLocation !== null ? output.S3OutputLocation : undefined,
    TargetDevice: output.TargetDevice !== undefined && output.TargetDevice !== null ? output.TargetDevice : undefined,
    TargetPlatform:
      output.TargetPlatform !== undefined && output.TargetPlatform !== null
        ? deserializeAws_json1_1TargetPlatform(output.TargetPlatform, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1OutputDataConfig = (output: any, context: __SerdeContext): OutputDataConfig => {
  return {
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
  } as any;
};

const deserializeAws_json1_1Parameter = (output: any, context: __SerdeContext): Parameter => {
  return {
    Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
    Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
  } as any;
};

const deserializeAws_json1_1ParameterList = (output: any, context: __SerdeContext): Parameter[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1Parameter(entry, context);
    });
};

const deserializeAws_json1_1ParameterRange = (output: any, context: __SerdeContext): ParameterRange => {
  return {
    CategoricalParameterRangeSpecification:
      output.CategoricalParameterRangeSpecification !== undefined &&
      output.CategoricalParameterRangeSpecification !== null
        ? deserializeAws_json1_1CategoricalParameterRangeSpecification(
            output.CategoricalParameterRangeSpecification,
            context
          )
        : undefined,
    ContinuousParameterRangeSpecification:
      output.ContinuousParameterRangeSpecification !== undefined &&
      output.ContinuousParameterRangeSpecification !== null
        ? deserializeAws_json1_1ContinuousParameterRangeSpecification(
            output.ContinuousParameterRangeSpecification,
            context
          )
        : undefined,
    IntegerParameterRangeSpecification:
      output.IntegerParameterRangeSpecification !== undefined && output.IntegerParameterRangeSpecification !== null
        ? deserializeAws_json1_1IntegerParameterRangeSpecification(output.IntegerParameterRangeSpecification, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ParameterRanges = (output: any, context: __SerdeContext): ParameterRanges => {
  return {
    CategoricalParameterRanges:
      output.CategoricalParameterRanges !== undefined && output.CategoricalParameterRanges !== null
        ? deserializeAws_json1_1CategoricalParameterRanges(output.CategoricalParameterRanges, context)
        : undefined,
    ContinuousParameterRanges:
      output.ContinuousParameterRanges !== undefined && output.ContinuousParameterRanges !== null
        ? deserializeAws_json1_1ContinuousParameterRanges(output.ContinuousParameterRanges, context)
        : undefined,
    IntegerParameterRanges:
      output.IntegerParameterRanges !== undefined && output.IntegerParameterRanges !== null
        ? deserializeAws_json1_1IntegerParameterRanges(output.IntegerParameterRanges, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ParameterValues = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1Parent = (output: any, context: __SerdeContext): Parent => {
  return {
    ExperimentName:
      output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
    TrialName: output.TrialName !== undefined && output.TrialName !== null ? output.TrialName : undefined,
  } as any;
};

const deserializeAws_json1_1ParentHyperParameterTuningJob = (
  output: any,
  context: __SerdeContext
): ParentHyperParameterTuningJob => {
  return {
    HyperParameterTuningJobName:
      output.HyperParameterTuningJobName !== undefined && output.HyperParameterTuningJobName !== null
        ? output.HyperParameterTuningJobName
        : undefined,
  } as any;
};

const deserializeAws_json1_1ParentHyperParameterTuningJobs = (
  output: any,
  context: __SerdeContext
): ParentHyperParameterTuningJob[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ParentHyperParameterTuningJob(entry, context);
    });
};

const deserializeAws_json1_1Parents = (output: any, context: __SerdeContext): Parent[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1Parent(entry, context);
    });
};

const deserializeAws_json1_1Pipeline = (output: any, context: __SerdeContext): Pipeline => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    LastRunTime:
      output.LastRunTime !== undefined && output.LastRunTime !== null
        ? new Date(Math.round(output.LastRunTime * 1000))
        : undefined,
    PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
    PipelineDescription:
      output.PipelineDescription !== undefined && output.PipelineDescription !== null
        ? output.PipelineDescription
        : undefined,
    PipelineDisplayName:
      output.PipelineDisplayName !== undefined && output.PipelineDisplayName !== null
        ? output.PipelineDisplayName
        : undefined,
    PipelineName: output.PipelineName !== undefined && output.PipelineName !== null ? output.PipelineName : undefined,
    PipelineStatus:
      output.PipelineStatus !== undefined && output.PipelineStatus !== null ? output.PipelineStatus : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1PipelineExecution = (output: any, context: __SerdeContext): PipelineExecution => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
    PipelineExecutionArn:
      output.PipelineExecutionArn !== undefined && output.PipelineExecutionArn !== null
        ? output.PipelineExecutionArn
        : undefined,
    PipelineExecutionDescription:
      output.PipelineExecutionDescription !== undefined && output.PipelineExecutionDescription !== null
        ? output.PipelineExecutionDescription
        : undefined,
    PipelineExecutionDisplayName:
      output.PipelineExecutionDisplayName !== undefined && output.PipelineExecutionDisplayName !== null
        ? output.PipelineExecutionDisplayName
        : undefined,
    PipelineExecutionStatus:
      output.PipelineExecutionStatus !== undefined && output.PipelineExecutionStatus !== null
        ? output.PipelineExecutionStatus
        : undefined,
    PipelineParameters:
      output.PipelineParameters !== undefined && output.PipelineParameters !== null
        ? deserializeAws_json1_1ParameterList(output.PipelineParameters, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1PipelineExecutionStep = (output: any, context: __SerdeContext): PipelineExecutionStep => {
  return {
    CacheHitResult:
      output.CacheHitResult !== undefined && output.CacheHitResult !== null
        ? deserializeAws_json1_1CacheHitResult(output.CacheHitResult, context)
        : undefined,
    EndTime:
      output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    Metadata:
      output.Metadata !== undefined && output.Metadata !== null
        ? deserializeAws_json1_1PipelineExecutionStepMetadata(output.Metadata, context)
        : undefined,
    StartTime:
      output.StartTime !== undefined && output.StartTime !== null
        ? new Date(Math.round(output.StartTime * 1000))
        : undefined,
    StepName: output.StepName !== undefined && output.StepName !== null ? output.StepName : undefined,
    StepStatus: output.StepStatus !== undefined && output.StepStatus !== null ? output.StepStatus : undefined,
  } as any;
};

const deserializeAws_json1_1PipelineExecutionStepList = (
  output: any,
  context: __SerdeContext
): PipelineExecutionStep[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1PipelineExecutionStep(entry, context);
    });
};

const deserializeAws_json1_1PipelineExecutionStepMetadata = (
  output: any,
  context: __SerdeContext
): PipelineExecutionStepMetadata => {
  return {
    Condition:
      output.Condition !== undefined && output.Condition !== null
        ? deserializeAws_json1_1ConditionStepMetadata(output.Condition, context)
        : undefined,
    Model:
      output.Model !== undefined && output.Model !== null
        ? deserializeAws_json1_1ModelStepMetadata(output.Model, context)
        : undefined,
    ProcessingJob:
      output.ProcessingJob !== undefined && output.ProcessingJob !== null
        ? deserializeAws_json1_1ProcessingJobStepMetadata(output.ProcessingJob, context)
        : undefined,
    RegisterModel:
      output.RegisterModel !== undefined && output.RegisterModel !== null
        ? deserializeAws_json1_1RegisterModelStepMetadata(output.RegisterModel, context)
        : undefined,
    TrainingJob:
      output.TrainingJob !== undefined && output.TrainingJob !== null
        ? deserializeAws_json1_1TrainingJobStepMetadata(output.TrainingJob, context)
        : undefined,
    TransformJob:
      output.TransformJob !== undefined && output.TransformJob !== null
        ? deserializeAws_json1_1TransformJobStepMetadata(output.TransformJob, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1PipelineExecutionSummary = (
  output: any,
  context: __SerdeContext
): PipelineExecutionSummary => {
  return {
    PipelineExecutionArn:
      output.PipelineExecutionArn !== undefined && output.PipelineExecutionArn !== null
        ? output.PipelineExecutionArn
        : undefined,
    PipelineExecutionDescription:
      output.PipelineExecutionDescription !== undefined && output.PipelineExecutionDescription !== null
        ? output.PipelineExecutionDescription
        : undefined,
    PipelineExecutionDisplayName:
      output.PipelineExecutionDisplayName !== undefined && output.PipelineExecutionDisplayName !== null
        ? output.PipelineExecutionDisplayName
        : undefined,
    PipelineExecutionStatus:
      output.PipelineExecutionStatus !== undefined && output.PipelineExecutionStatus !== null
        ? output.PipelineExecutionStatus
        : undefined,
    StartTime:
      output.StartTime !== undefined && output.StartTime !== null
        ? new Date(Math.round(output.StartTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1PipelineExecutionSummaryList = (
  output: any,
  context: __SerdeContext
): PipelineExecutionSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1PipelineExecutionSummary(entry, context);
    });
};

const deserializeAws_json1_1PipelineSummary = (output: any, context: __SerdeContext): PipelineSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    LastExecutionTime:
      output.LastExecutionTime !== undefined && output.LastExecutionTime !== null
        ? new Date(Math.round(output.LastExecutionTime * 1000))
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
    PipelineDescription:
      output.PipelineDescription !== undefined && output.PipelineDescription !== null
        ? output.PipelineDescription
        : undefined,
    PipelineDisplayName:
      output.PipelineDisplayName !== undefined && output.PipelineDisplayName !== null
        ? output.PipelineDisplayName
        : undefined,
    PipelineName: output.PipelineName !== undefined && output.PipelineName !== null ? output.PipelineName : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
  } as any;
};

const deserializeAws_json1_1PipelineSummaryList = (output: any, context: __SerdeContext): PipelineSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1PipelineSummary(entry, context);
    });
};

const deserializeAws_json1_1ProcessingClusterConfig = (
  output: any,
  context: __SerdeContext
): ProcessingClusterConfig => {
  return {
    InstanceCount:
      output.InstanceCount !== undefined && output.InstanceCount !== null ? output.InstanceCount : undefined,
    InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
    VolumeKmsKeyId:
      output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null ? output.VolumeKmsKeyId : undefined,
    VolumeSizeInGB:
      output.VolumeSizeInGB !== undefined && output.VolumeSizeInGB !== null ? output.VolumeSizeInGB : undefined,
  } as any;
};

const deserializeAws_json1_1ProcessingEnvironmentMap = (
  output: any,
  context: __SerdeContext
): { [key: string]: string } => {
  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const deserializeAws_json1_1ProcessingFeatureStoreOutput = (
  output: any,
  context: __SerdeContext
): ProcessingFeatureStoreOutput => {
  return {
    FeatureGroupName:
      output.FeatureGroupName !== undefined && output.FeatureGroupName !== null ? output.FeatureGroupName : undefined,
  } as any;
};

const deserializeAws_json1_1ProcessingInput = (output: any, context: __SerdeContext): ProcessingInput => {
  return {
    AppManaged: output.AppManaged !== undefined && output.AppManaged !== null ? output.AppManaged : undefined,
    DatasetDefinition:
      output.DatasetDefinition !== undefined && output.DatasetDefinition !== null
        ? deserializeAws_json1_1DatasetDefinition(output.DatasetDefinition, context)
        : undefined,
    InputName: output.InputName !== undefined && output.InputName !== null ? output.InputName : undefined,
    S3Input:
      output.S3Input !== undefined && output.S3Input !== null
        ? deserializeAws_json1_1ProcessingS3Input(output.S3Input, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ProcessingInputs = (output: any, context: __SerdeContext): ProcessingInput[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ProcessingInput(entry, context);
    });
};

const deserializeAws_json1_1ProcessingJob = (output: any, context: __SerdeContext): ProcessingJob => {
  return {
    AppSpecification:
      output.AppSpecification !== undefined && output.AppSpecification !== null
        ? deserializeAws_json1_1AppSpecification(output.AppSpecification, context)
        : undefined,
    AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1ProcessingEnvironmentMap(output.Environment, context)
        : undefined,
    ExitMessage: output.ExitMessage !== undefined && output.ExitMessage !== null ? output.ExitMessage : undefined,
    ExperimentConfig:
      output.ExperimentConfig !== undefined && output.ExperimentConfig !== null
        ? deserializeAws_json1_1ExperimentConfig(output.ExperimentConfig, context)
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    MonitoringScheduleArn:
      output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
        ? output.MonitoringScheduleArn
        : undefined,
    NetworkConfig:
      output.NetworkConfig !== undefined && output.NetworkConfig !== null
        ? deserializeAws_json1_1NetworkConfig(output.NetworkConfig, context)
        : undefined,
    ProcessingEndTime:
      output.ProcessingEndTime !== undefined && output.ProcessingEndTime !== null
        ? new Date(Math.round(output.ProcessingEndTime * 1000))
        : undefined,
    ProcessingInputs:
      output.ProcessingInputs !== undefined && output.ProcessingInputs !== null
        ? deserializeAws_json1_1ProcessingInputs(output.ProcessingInputs, context)
        : undefined,
    ProcessingJobArn:
      output.ProcessingJobArn !== undefined && output.ProcessingJobArn !== null ? output.ProcessingJobArn : undefined,
    ProcessingJobName:
      output.ProcessingJobName !== undefined && output.ProcessingJobName !== null
        ? output.ProcessingJobName
        : undefined,
    ProcessingJobStatus:
      output.ProcessingJobStatus !== undefined && output.ProcessingJobStatus !== null
        ? output.ProcessingJobStatus
        : undefined,
    ProcessingOutputConfig:
      output.ProcessingOutputConfig !== undefined && output.ProcessingOutputConfig !== null
        ? deserializeAws_json1_1ProcessingOutputConfig(output.ProcessingOutputConfig, context)
        : undefined,
    ProcessingResources:
      output.ProcessingResources !== undefined && output.ProcessingResources !== null
        ? deserializeAws_json1_1ProcessingResources(output.ProcessingResources, context)
        : undefined,
    ProcessingStartTime:
      output.ProcessingStartTime !== undefined && output.ProcessingStartTime !== null
        ? new Date(Math.round(output.ProcessingStartTime * 1000))
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    StoppingCondition:
      output.StoppingCondition !== undefined && output.StoppingCondition !== null
        ? deserializeAws_json1_1ProcessingStoppingCondition(output.StoppingCondition, context)
        : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
    TrainingJobArn:
      output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
  } as any;
};

const deserializeAws_json1_1ProcessingJobStepMetadata = (
  output: any,
  context: __SerdeContext
): ProcessingJobStepMetadata => {
  return {
    Arn: output.Arn !== undefined && output.Arn !== null ? output.Arn : undefined,
  } as any;
};

const deserializeAws_json1_1ProcessingJobSummaries = (output: any, context: __SerdeContext): ProcessingJobSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ProcessingJobSummary(entry, context);
    });
};

const deserializeAws_json1_1ProcessingJobSummary = (output: any, context: __SerdeContext): ProcessingJobSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    ExitMessage: output.ExitMessage !== undefined && output.ExitMessage !== null ? output.ExitMessage : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    ProcessingEndTime:
      output.ProcessingEndTime !== undefined && output.ProcessingEndTime !== null
        ? new Date(Math.round(output.ProcessingEndTime * 1000))
        : undefined,
    ProcessingJobArn:
      output.ProcessingJobArn !== undefined && output.ProcessingJobArn !== null ? output.ProcessingJobArn : undefined,
    ProcessingJobName:
      output.ProcessingJobName !== undefined && output.ProcessingJobName !== null
        ? output.ProcessingJobName
        : undefined,
    ProcessingJobStatus:
      output.ProcessingJobStatus !== undefined && output.ProcessingJobStatus !== null
        ? output.ProcessingJobStatus
        : undefined,
  } as any;
};

const deserializeAws_json1_1ProcessingOutput = (output: any, context: __SerdeContext): ProcessingOutput => {
  return {
    AppManaged: output.AppManaged !== undefined && output.AppManaged !== null ? output.AppManaged : undefined,
    FeatureStoreOutput:
      output.FeatureStoreOutput !== undefined && output.FeatureStoreOutput !== null
        ? deserializeAws_json1_1ProcessingFeatureStoreOutput(output.FeatureStoreOutput, context)
        : undefined,
    OutputName: output.OutputName !== undefined && output.OutputName !== null ? output.OutputName : undefined,
    S3Output:
      output.S3Output !== undefined && output.S3Output !== null
        ? deserializeAws_json1_1ProcessingS3Output(output.S3Output, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ProcessingOutputConfig = (output: any, context: __SerdeContext): ProcessingOutputConfig => {
  return {
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    Outputs:
      output.Outputs !== undefined && output.Outputs !== null
        ? deserializeAws_json1_1ProcessingOutputs(output.Outputs, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ProcessingOutputs = (output: any, context: __SerdeContext): ProcessingOutput[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ProcessingOutput(entry, context);
    });
};

const deserializeAws_json1_1ProcessingResources = (output: any, context: __SerdeContext): ProcessingResources => {
  return {
    ClusterConfig:
      output.ClusterConfig !== undefined && output.ClusterConfig !== null
        ? deserializeAws_json1_1ProcessingClusterConfig(output.ClusterConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1ProcessingS3Input = (output: any, context: __SerdeContext): ProcessingS3Input => {
  return {
    LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
    S3CompressionType:
      output.S3CompressionType !== undefined && output.S3CompressionType !== null
        ? output.S3CompressionType
        : undefined,
    S3DataDistributionType:
      output.S3DataDistributionType !== undefined && output.S3DataDistributionType !== null
        ? output.S3DataDistributionType
        : undefined,
    S3DataType: output.S3DataType !== undefined && output.S3DataType !== null ? output.S3DataType : undefined,
    S3InputMode: output.S3InputMode !== undefined && output.S3InputMode !== null ? output.S3InputMode : undefined,
    S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1ProcessingS3Output = (output: any, context: __SerdeContext): ProcessingS3Output => {
  return {
    LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
    S3UploadMode: output.S3UploadMode !== undefined && output.S3UploadMode !== null ? output.S3UploadMode : undefined,
    S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1ProcessingStoppingCondition = (
  output: any,
  context: __SerdeContext
): ProcessingStoppingCondition => {
  return {
    MaxRuntimeInSeconds:
      output.MaxRuntimeInSeconds !== undefined && output.MaxRuntimeInSeconds !== null
        ? output.MaxRuntimeInSeconds
        : undefined,
  } as any;
};

const deserializeAws_json1_1ProductionVariant = (output: any, context: __SerdeContext): ProductionVariant => {
  return {
    AcceleratorType:
      output.AcceleratorType !== undefined && output.AcceleratorType !== null ? output.AcceleratorType : undefined,
    CoreDumpConfig:
      output.CoreDumpConfig !== undefined && output.CoreDumpConfig !== null
        ? deserializeAws_json1_1ProductionVariantCoreDumpConfig(output.CoreDumpConfig, context)
        : undefined,
    InitialInstanceCount:
      output.InitialInstanceCount !== undefined && output.InitialInstanceCount !== null
        ? output.InitialInstanceCount
        : undefined,
    InitialVariantWeight:
      output.InitialVariantWeight !== undefined && output.InitialVariantWeight !== null
        ? output.InitialVariantWeight
        : undefined,
    InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
    ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
    VariantName: output.VariantName !== undefined && output.VariantName !== null ? output.VariantName : undefined,
  } as any;
};

const deserializeAws_json1_1ProductionVariantCoreDumpConfig = (
  output: any,
  context: __SerdeContext
): ProductionVariantCoreDumpConfig => {
  return {
    DestinationS3Uri:
      output.DestinationS3Uri !== undefined && output.DestinationS3Uri !== null ? output.DestinationS3Uri : undefined,
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
  } as any;
};

const deserializeAws_json1_1ProductionVariantList = (output: any, context: __SerdeContext): ProductionVariant[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ProductionVariant(entry, context);
    });
};

const deserializeAws_json1_1ProductionVariantSummary = (
  output: any,
  context: __SerdeContext
): ProductionVariantSummary => {
  return {
    CurrentInstanceCount:
      output.CurrentInstanceCount !== undefined && output.CurrentInstanceCount !== null
        ? output.CurrentInstanceCount
        : undefined,
    CurrentWeight:
      output.CurrentWeight !== undefined && output.CurrentWeight !== null ? output.CurrentWeight : undefined,
    DeployedImages:
      output.DeployedImages !== undefined && output.DeployedImages !== null
        ? deserializeAws_json1_1DeployedImages(output.DeployedImages, context)
        : undefined,
    DesiredInstanceCount:
      output.DesiredInstanceCount !== undefined && output.DesiredInstanceCount !== null
        ? output.DesiredInstanceCount
        : undefined,
    DesiredWeight:
      output.DesiredWeight !== undefined && output.DesiredWeight !== null ? output.DesiredWeight : undefined,
    VariantName: output.VariantName !== undefined && output.VariantName !== null ? output.VariantName : undefined,
  } as any;
};

const deserializeAws_json1_1ProductionVariantSummaryList = (
  output: any,
  context: __SerdeContext
): ProductionVariantSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ProductionVariantSummary(entry, context);
    });
};

const deserializeAws_json1_1ProductListings = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1ProfilerConfig = (output: any, context: __SerdeContext): ProfilerConfig => {
  return {
    ProfilingIntervalInMilliseconds:
      output.ProfilingIntervalInMilliseconds !== undefined && output.ProfilingIntervalInMilliseconds !== null
        ? output.ProfilingIntervalInMilliseconds
        : undefined,
    ProfilingParameters:
      output.ProfilingParameters !== undefined && output.ProfilingParameters !== null
        ? deserializeAws_json1_1ProfilingParameters(output.ProfilingParameters, context)
        : undefined,
    S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
  } as any;
};

const deserializeAws_json1_1ProfilerRuleConfiguration = (
  output: any,
  context: __SerdeContext
): ProfilerRuleConfiguration => {
  return {
    InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
    LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
    RuleConfigurationName:
      output.RuleConfigurationName !== undefined && output.RuleConfigurationName !== null
        ? output.RuleConfigurationName
        : undefined,
    RuleEvaluatorImage:
      output.RuleEvaluatorImage !== undefined && output.RuleEvaluatorImage !== null
        ? output.RuleEvaluatorImage
        : undefined,
    RuleParameters:
      output.RuleParameters !== undefined && output.RuleParameters !== null
        ? deserializeAws_json1_1RuleParameters(output.RuleParameters, context)
        : undefined,
    S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
    VolumeSizeInGB:
      output.VolumeSizeInGB !== undefined && output.VolumeSizeInGB !== null ? output.VolumeSizeInGB : undefined,
  } as any;
};

const deserializeAws_json1_1ProfilerRuleConfigurations = (
  output: any,
  context: __SerdeContext
): ProfilerRuleConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ProfilerRuleConfiguration(entry, context);
    });
};

const deserializeAws_json1_1ProfilerRuleEvaluationStatus = (
  output: any,
  context: __SerdeContext
): ProfilerRuleEvaluationStatus => {
  return {
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    RuleConfigurationName:
      output.RuleConfigurationName !== undefined && output.RuleConfigurationName !== null
        ? output.RuleConfigurationName
        : undefined,
    RuleEvaluationJobArn:
      output.RuleEvaluationJobArn !== undefined && output.RuleEvaluationJobArn !== null
        ? output.RuleEvaluationJobArn
        : undefined,
    RuleEvaluationStatus:
      output.RuleEvaluationStatus !== undefined && output.RuleEvaluationStatus !== null
        ? output.RuleEvaluationStatus
        : undefined,
    StatusDetails:
      output.StatusDetails !== undefined && output.StatusDetails !== null ? output.StatusDetails : undefined,
  } as any;
};

const deserializeAws_json1_1ProfilerRuleEvaluationStatuses = (
  output: any,
  context: __SerdeContext
): ProfilerRuleEvaluationStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ProfilerRuleEvaluationStatus(entry, context);
    });
};

const deserializeAws_json1_1ProfilingParameters = (output: any, context: __SerdeContext): { [key: string]: string } => {
  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const deserializeAws_json1_1ProjectSummary = (output: any, context: __SerdeContext): ProjectSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    ProjectArn: output.ProjectArn !== undefined && output.ProjectArn !== null ? output.ProjectArn : undefined,
    ProjectDescription:
      output.ProjectDescription !== undefined && output.ProjectDescription !== null
        ? output.ProjectDescription
        : undefined,
    ProjectId: output.ProjectId !== undefined && output.ProjectId !== null ? output.ProjectId : undefined,
    ProjectName: output.ProjectName !== undefined && output.ProjectName !== null ? output.ProjectName : undefined,
    ProjectStatus:
      output.ProjectStatus !== undefined && output.ProjectStatus !== null ? output.ProjectStatus : undefined,
  } as any;
};

const deserializeAws_json1_1ProjectSummaryList = (output: any, context: __SerdeContext): ProjectSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ProjectSummary(entry, context);
    });
};

const deserializeAws_json1_1PropertyNameSuggestion = (output: any, context: __SerdeContext): PropertyNameSuggestion => {
  return {
    PropertyName: output.PropertyName !== undefined && output.PropertyName !== null ? output.PropertyName : undefined,
  } as any;
};

const deserializeAws_json1_1PropertyNameSuggestionList = (
  output: any,
  context: __SerdeContext
): PropertyNameSuggestion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1PropertyNameSuggestion(entry, context);
    });
};

const deserializeAws_json1_1ProvisioningParameter = (output: any, context: __SerdeContext): ProvisioningParameter => {
  return {
    Key: output.Key !== undefined && output.Key !== null ? output.Key : undefined,
    Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
  } as any;
};

const deserializeAws_json1_1ProvisioningParameters = (
  output: any,
  context: __SerdeContext
): ProvisioningParameter[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1ProvisioningParameter(entry, context);
    });
};

const deserializeAws_json1_1PublicWorkforceTaskPrice = (
  output: any,
  context: __SerdeContext
): PublicWorkforceTaskPrice => {
  return {
    AmountInUsd:
      output.AmountInUsd !== undefined && output.AmountInUsd !== null
        ? deserializeAws_json1_1USD(output.AmountInUsd, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1PutModelPackageGroupPolicyOutput = (
  output: any,
  context: __SerdeContext
): PutModelPackageGroupPolicyOutput => {
  return {
    ModelPackageGroupArn:
      output.ModelPackageGroupArn !== undefined && output.ModelPackageGroupArn !== null
        ? output.ModelPackageGroupArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1RealtimeInferenceInstanceTypes = (
  output: any,
  context: __SerdeContext
): (ProductionVariantInstanceType | string)[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1RedshiftDatasetDefinition = (
  output: any,
  context: __SerdeContext
): RedshiftDatasetDefinition => {
  return {
    ClusterId: output.ClusterId !== undefined && output.ClusterId !== null ? output.ClusterId : undefined,
    ClusterRoleArn:
      output.ClusterRoleArn !== undefined && output.ClusterRoleArn !== null ? output.ClusterRoleArn : undefined,
    Database: output.Database !== undefined && output.Database !== null ? output.Database : undefined,
    DbUser: output.DbUser !== undefined && output.DbUser !== null ? output.DbUser : undefined,
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    OutputCompression:
      output.OutputCompression !== undefined && output.OutputCompression !== null
        ? output.OutputCompression
        : undefined,
    OutputFormat: output.OutputFormat !== undefined && output.OutputFormat !== null ? output.OutputFormat : undefined,
    OutputS3Uri: output.OutputS3Uri !== undefined && output.OutputS3Uri !== null ? output.OutputS3Uri : undefined,
    QueryString: output.QueryString !== undefined && output.QueryString !== null ? output.QueryString : undefined,
  } as any;
};

const deserializeAws_json1_1RegisterModelStepMetadata = (
  output: any,
  context: __SerdeContext
): RegisterModelStepMetadata => {
  return {
    Arn: output.Arn !== undefined && output.Arn !== null ? output.Arn : undefined,
  } as any;
};

const deserializeAws_json1_1RenderingError = (output: any, context: __SerdeContext): RenderingError => {
  return {
    Code: output.Code !== undefined && output.Code !== null ? output.Code : undefined,
    Message: output.Message !== undefined && output.Message !== null ? output.Message : undefined,
  } as any;
};

const deserializeAws_json1_1RenderingErrorList = (output: any, context: __SerdeContext): RenderingError[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1RenderingError(entry, context);
    });
};

const deserializeAws_json1_1RenderUiTemplateResponse = (
  output: any,
  context: __SerdeContext
): RenderUiTemplateResponse => {
  return {
    Errors:
      output.Errors !== undefined && output.Errors !== null
        ? deserializeAws_json1_1RenderingErrorList(output.Errors, context)
        : undefined,
    RenderedContent:
      output.RenderedContent !== undefined && output.RenderedContent !== null ? output.RenderedContent : undefined,
  } as any;
};

const deserializeAws_json1_1RepositoryAuthConfig = (output: any, context: __SerdeContext): RepositoryAuthConfig => {
  return {
    RepositoryCredentialsProviderArn:
      output.RepositoryCredentialsProviderArn !== undefined && output.RepositoryCredentialsProviderArn !== null
        ? output.RepositoryCredentialsProviderArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1ResolvedAttributes = (output: any, context: __SerdeContext): ResolvedAttributes => {
  return {
    AutoMLJobObjective:
      output.AutoMLJobObjective !== undefined && output.AutoMLJobObjective !== null
        ? deserializeAws_json1_1AutoMLJobObjective(output.AutoMLJobObjective, context)
        : undefined,
    CompletionCriteria:
      output.CompletionCriteria !== undefined && output.CompletionCriteria !== null
        ? deserializeAws_json1_1AutoMLJobCompletionCriteria(output.CompletionCriteria, context)
        : undefined,
    ProblemType: output.ProblemType !== undefined && output.ProblemType !== null ? output.ProblemType : undefined,
  } as any;
};

const deserializeAws_json1_1ResourceConfig = (output: any, context: __SerdeContext): ResourceConfig => {
  return {
    InstanceCount:
      output.InstanceCount !== undefined && output.InstanceCount !== null ? output.InstanceCount : undefined,
    InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
    VolumeKmsKeyId:
      output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null ? output.VolumeKmsKeyId : undefined,
    VolumeSizeInGB:
      output.VolumeSizeInGB !== undefined && output.VolumeSizeInGB !== null ? output.VolumeSizeInGB : undefined,
  } as any;
};

const deserializeAws_json1_1ResourceInUse = (output: any, context: __SerdeContext): ResourceInUse => {
  return {
    Message: output.Message !== undefined && output.Message !== null ? output.Message : undefined,
  } as any;
};

const deserializeAws_json1_1ResourceLimitExceeded = (output: any, context: __SerdeContext): ResourceLimitExceeded => {
  return {
    Message: output.Message !== undefined && output.Message !== null ? output.Message : undefined,
  } as any;
};

const deserializeAws_json1_1ResourceLimits = (output: any, context: __SerdeContext): ResourceLimits => {
  return {
    MaxNumberOfTrainingJobs:
      output.MaxNumberOfTrainingJobs !== undefined && output.MaxNumberOfTrainingJobs !== null
        ? output.MaxNumberOfTrainingJobs
        : undefined,
    MaxParallelTrainingJobs:
      output.MaxParallelTrainingJobs !== undefined && output.MaxParallelTrainingJobs !== null
        ? output.MaxParallelTrainingJobs
        : undefined,
  } as any;
};

const deserializeAws_json1_1ResourceNotFound = (output: any, context: __SerdeContext): ResourceNotFound => {
  return {
    Message: output.Message !== undefined && output.Message !== null ? output.Message : undefined,
  } as any;
};

const deserializeAws_json1_1ResourceSpec = (output: any, context: __SerdeContext): ResourceSpec => {
  return {
    InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
    SageMakerImageArn:
      output.SageMakerImageArn !== undefined && output.SageMakerImageArn !== null
        ? output.SageMakerImageArn
        : undefined,
    SageMakerImageVersionArn:
      output.SageMakerImageVersionArn !== undefined && output.SageMakerImageVersionArn !== null
        ? output.SageMakerImageVersionArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1ResponseMIMETypes = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1RetryStrategy = (output: any, context: __SerdeContext): RetryStrategy => {
  return {
    MaximumRetryAttempts:
      output.MaximumRetryAttempts !== undefined && output.MaximumRetryAttempts !== null
        ? output.MaximumRetryAttempts
        : undefined,
  } as any;
};

const deserializeAws_json1_1RuleParameters = (output: any, context: __SerdeContext): { [key: string]: string } => {
  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const deserializeAws_json1_1S3DataSource = (output: any, context: __SerdeContext): S3DataSource => {
  return {
    AttributeNames:
      output.AttributeNames !== undefined && output.AttributeNames !== null
        ? deserializeAws_json1_1AttributeNames(output.AttributeNames, context)
        : undefined,
    S3DataDistributionType:
      output.S3DataDistributionType !== undefined && output.S3DataDistributionType !== null
        ? output.S3DataDistributionType
        : undefined,
    S3DataType: output.S3DataType !== undefined && output.S3DataType !== null ? output.S3DataType : undefined,
    S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1S3StorageConfig = (output: any, context: __SerdeContext): S3StorageConfig => {
  return {
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    ResolvedOutputS3Uri:
      output.ResolvedOutputS3Uri !== undefined && output.ResolvedOutputS3Uri !== null
        ? output.ResolvedOutputS3Uri
        : undefined,
    S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1ScheduleConfig = (output: any, context: __SerdeContext): ScheduleConfig => {
  return {
    ScheduleExpression:
      output.ScheduleExpression !== undefined && output.ScheduleExpression !== null
        ? output.ScheduleExpression
        : undefined,
  } as any;
};

const deserializeAws_json1_1SearchRecord = (output: any, context: __SerdeContext): SearchRecord => {
  return {
    Endpoint:
      output.Endpoint !== undefined && output.Endpoint !== null
        ? deserializeAws_json1_1Endpoint(output.Endpoint, context)
        : undefined,
    Experiment:
      output.Experiment !== undefined && output.Experiment !== null
        ? deserializeAws_json1_1Experiment(output.Experiment, context)
        : undefined,
    FeatureGroup:
      output.FeatureGroup !== undefined && output.FeatureGroup !== null
        ? deserializeAws_json1_1FeatureGroup(output.FeatureGroup, context)
        : undefined,
    ModelPackage:
      output.ModelPackage !== undefined && output.ModelPackage !== null
        ? deserializeAws_json1_1ModelPackage(output.ModelPackage, context)
        : undefined,
    ModelPackageGroup:
      output.ModelPackageGroup !== undefined && output.ModelPackageGroup !== null
        ? deserializeAws_json1_1ModelPackageGroup(output.ModelPackageGroup, context)
        : undefined,
    Pipeline:
      output.Pipeline !== undefined && output.Pipeline !== null
        ? deserializeAws_json1_1Pipeline(output.Pipeline, context)
        : undefined,
    PipelineExecution:
      output.PipelineExecution !== undefined && output.PipelineExecution !== null
        ? deserializeAws_json1_1PipelineExecution(output.PipelineExecution, context)
        : undefined,
    TrainingJob:
      output.TrainingJob !== undefined && output.TrainingJob !== null
        ? deserializeAws_json1_1TrainingJob(output.TrainingJob, context)
        : undefined,
    Trial:
      output.Trial !== undefined && output.Trial !== null
        ? deserializeAws_json1_1Trial(output.Trial, context)
        : undefined,
    TrialComponent:
      output.TrialComponent !== undefined && output.TrialComponent !== null
        ? deserializeAws_json1_1TrialComponent(output.TrialComponent, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1SearchResponse = (output: any, context: __SerdeContext): SearchResponse => {
  return {
    NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined,
    Results:
      output.Results !== undefined && output.Results !== null
        ? deserializeAws_json1_1SearchResultsList(output.Results, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1SearchResultsList = (output: any, context: __SerdeContext): SearchRecord[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1SearchRecord(entry, context);
    });
};

const deserializeAws_json1_1SecondaryStatusTransition = (
  output: any,
  context: __SerdeContext
): SecondaryStatusTransition => {
  return {
    EndTime:
      output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
    StartTime:
      output.StartTime !== undefined && output.StartTime !== null
        ? new Date(Math.round(output.StartTime * 1000))
        : undefined,
    Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
    StatusMessage:
      output.StatusMessage !== undefined && output.StatusMessage !== null ? output.StatusMessage : undefined,
  } as any;
};

const deserializeAws_json1_1SecondaryStatusTransitions = (
  output: any,
  context: __SerdeContext
): SecondaryStatusTransition[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1SecondaryStatusTransition(entry, context);
    });
};

const deserializeAws_json1_1SecurityGroupIds = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1ServiceCatalogProvisionedProductDetails = (
  output: any,
  context: __SerdeContext
): ServiceCatalogProvisionedProductDetails => {
  return {
    ProvisionedProductId:
      output.ProvisionedProductId !== undefined && output.ProvisionedProductId !== null
        ? output.ProvisionedProductId
        : undefined,
    ProvisionedProductStatusMessage:
      output.ProvisionedProductStatusMessage !== undefined && output.ProvisionedProductStatusMessage !== null
        ? output.ProvisionedProductStatusMessage
        : undefined,
  } as any;
};

const deserializeAws_json1_1ServiceCatalogProvisioningDetails = (
  output: any,
  context: __SerdeContext
): ServiceCatalogProvisioningDetails => {
  return {
    PathId: output.PathId !== undefined && output.PathId !== null ? output.PathId : undefined,
    ProductId: output.ProductId !== undefined && output.ProductId !== null ? output.ProductId : undefined,
    ProvisioningArtifactId:
      output.ProvisioningArtifactId !== undefined && output.ProvisioningArtifactId !== null
        ? output.ProvisioningArtifactId
        : undefined,
    ProvisioningParameters:
      output.ProvisioningParameters !== undefined && output.ProvisioningParameters !== null
        ? deserializeAws_json1_1ProvisioningParameters(output.ProvisioningParameters, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1SharingSettings = (output: any, context: __SerdeContext): SharingSettings => {
  return {
    NotebookOutputOption:
      output.NotebookOutputOption !== undefined && output.NotebookOutputOption !== null
        ? output.NotebookOutputOption
        : undefined,
    S3KmsKeyId: output.S3KmsKeyId !== undefined && output.S3KmsKeyId !== null ? output.S3KmsKeyId : undefined,
    S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
  } as any;
};

const deserializeAws_json1_1ShuffleConfig = (output: any, context: __SerdeContext): ShuffleConfig => {
  return {
    Seed: output.Seed !== undefined && output.Seed !== null ? output.Seed : undefined,
  } as any;
};

const deserializeAws_json1_1SourceAlgorithm = (output: any, context: __SerdeContext): SourceAlgorithm => {
  return {
    AlgorithmName:
      output.AlgorithmName !== undefined && output.AlgorithmName !== null ? output.AlgorithmName : undefined,
    ModelDataUrl: output.ModelDataUrl !== undefined && output.ModelDataUrl !== null ? output.ModelDataUrl : undefined,
  } as any;
};

const deserializeAws_json1_1SourceAlgorithmList = (output: any, context: __SerdeContext): SourceAlgorithm[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1SourceAlgorithm(entry, context);
    });
};

const deserializeAws_json1_1SourceAlgorithmSpecification = (
  output: any,
  context: __SerdeContext
): SourceAlgorithmSpecification => {
  return {
    SourceAlgorithms:
      output.SourceAlgorithms !== undefined && output.SourceAlgorithms !== null
        ? deserializeAws_json1_1SourceAlgorithmList(output.SourceAlgorithms, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1SourceIpConfig = (output: any, context: __SerdeContext): SourceIpConfig => {
  return {
    Cidrs:
      output.Cidrs !== undefined && output.Cidrs !== null
        ? deserializeAws_json1_1Cidrs(output.Cidrs, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1StartPipelineExecutionResponse = (
  output: any,
  context: __SerdeContext
): StartPipelineExecutionResponse => {
  return {
    PipelineExecutionArn:
      output.PipelineExecutionArn !== undefined && output.PipelineExecutionArn !== null
        ? output.PipelineExecutionArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1StoppingCondition = (output: any, context: __SerdeContext): StoppingCondition => {
  return {
    MaxRuntimeInSeconds:
      output.MaxRuntimeInSeconds !== undefined && output.MaxRuntimeInSeconds !== null
        ? output.MaxRuntimeInSeconds
        : undefined,
    MaxWaitTimeInSeconds:
      output.MaxWaitTimeInSeconds !== undefined && output.MaxWaitTimeInSeconds !== null
        ? output.MaxWaitTimeInSeconds
        : undefined,
  } as any;
};

const deserializeAws_json1_1StopPipelineExecutionResponse = (
  output: any,
  context: __SerdeContext
): StopPipelineExecutionResponse => {
  return {
    PipelineExecutionArn:
      output.PipelineExecutionArn !== undefined && output.PipelineExecutionArn !== null
        ? output.PipelineExecutionArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1Subnets = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1SubscribedWorkteam = (output: any, context: __SerdeContext): SubscribedWorkteam => {
  return {
    ListingId: output.ListingId !== undefined && output.ListingId !== null ? output.ListingId : undefined,
    MarketplaceDescription:
      output.MarketplaceDescription !== undefined && output.MarketplaceDescription !== null
        ? output.MarketplaceDescription
        : undefined,
    MarketplaceTitle:
      output.MarketplaceTitle !== undefined && output.MarketplaceTitle !== null ? output.MarketplaceTitle : undefined,
    SellerName: output.SellerName !== undefined && output.SellerName !== null ? output.SellerName : undefined,
    WorkteamArn: output.WorkteamArn !== undefined && output.WorkteamArn !== null ? output.WorkteamArn : undefined,
  } as any;
};

const deserializeAws_json1_1SubscribedWorkteams = (output: any, context: __SerdeContext): SubscribedWorkteam[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1SubscribedWorkteam(entry, context);
    });
};

const deserializeAws_json1_1Tag = (output: any, context: __SerdeContext): Tag => {
  return {
    Key: output.Key !== undefined && output.Key !== null ? output.Key : undefined,
    Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
  } as any;
};

const deserializeAws_json1_1TagList = (output: any, context: __SerdeContext): Tag[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1Tag(entry, context);
    });
};

const deserializeAws_json1_1TargetPlatform = (output: any, context: __SerdeContext): TargetPlatform => {
  return {
    Accelerator: output.Accelerator !== undefined && output.Accelerator !== null ? output.Accelerator : undefined,
    Arch: output.Arch !== undefined && output.Arch !== null ? output.Arch : undefined,
    Os: output.Os !== undefined && output.Os !== null ? output.Os : undefined,
  } as any;
};

const deserializeAws_json1_1TaskKeywords = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1TensorBoardAppSettings = (output: any, context: __SerdeContext): TensorBoardAppSettings => {
  return {
    DefaultResourceSpec:
      output.DefaultResourceSpec !== undefined && output.DefaultResourceSpec !== null
        ? deserializeAws_json1_1ResourceSpec(output.DefaultResourceSpec, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1TensorBoardOutputConfig = (
  output: any,
  context: __SerdeContext
): TensorBoardOutputConfig => {
  return {
    LocalPath: output.LocalPath !== undefined && output.LocalPath !== null ? output.LocalPath : undefined,
    S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
  } as any;
};

const deserializeAws_json1_1TrafficRoutingConfig = (output: any, context: __SerdeContext): TrafficRoutingConfig => {
  return {
    CanarySize:
      output.CanarySize !== undefined && output.CanarySize !== null
        ? deserializeAws_json1_1CapacitySize(output.CanarySize, context)
        : undefined,
    Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined,
    WaitIntervalInSeconds:
      output.WaitIntervalInSeconds !== undefined && output.WaitIntervalInSeconds !== null
        ? output.WaitIntervalInSeconds
        : undefined,
  } as any;
};

const deserializeAws_json1_1TrainingEnvironmentMap = (
  output: any,
  context: __SerdeContext
): { [key: string]: string } => {
  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const deserializeAws_json1_1TrainingInstanceTypes = (
  output: any,
  context: __SerdeContext
): (TrainingInstanceType | string)[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1TrainingJob = (output: any, context: __SerdeContext): TrainingJob => {
  return {
    AlgorithmSpecification:
      output.AlgorithmSpecification !== undefined && output.AlgorithmSpecification !== null
        ? deserializeAws_json1_1AlgorithmSpecification(output.AlgorithmSpecification, context)
        : undefined,
    AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
    BillableTimeInSeconds:
      output.BillableTimeInSeconds !== undefined && output.BillableTimeInSeconds !== null
        ? output.BillableTimeInSeconds
        : undefined,
    CheckpointConfig:
      output.CheckpointConfig !== undefined && output.CheckpointConfig !== null
        ? deserializeAws_json1_1CheckpointConfig(output.CheckpointConfig, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DebugHookConfig:
      output.DebugHookConfig !== undefined && output.DebugHookConfig !== null
        ? deserializeAws_json1_1DebugHookConfig(output.DebugHookConfig, context)
        : undefined,
    DebugRuleConfigurations:
      output.DebugRuleConfigurations !== undefined && output.DebugRuleConfigurations !== null
        ? deserializeAws_json1_1DebugRuleConfigurations(output.DebugRuleConfigurations, context)
        : undefined,
    DebugRuleEvaluationStatuses:
      output.DebugRuleEvaluationStatuses !== undefined && output.DebugRuleEvaluationStatuses !== null
        ? deserializeAws_json1_1DebugRuleEvaluationStatuses(output.DebugRuleEvaluationStatuses, context)
        : undefined,
    EnableInterContainerTrafficEncryption:
      output.EnableInterContainerTrafficEncryption !== undefined &&
      output.EnableInterContainerTrafficEncryption !== null
        ? output.EnableInterContainerTrafficEncryption
        : undefined,
    EnableManagedSpotTraining:
      output.EnableManagedSpotTraining !== undefined && output.EnableManagedSpotTraining !== null
        ? output.EnableManagedSpotTraining
        : undefined,
    EnableNetworkIsolation:
      output.EnableNetworkIsolation !== undefined && output.EnableNetworkIsolation !== null
        ? output.EnableNetworkIsolation
        : undefined,
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1TrainingEnvironmentMap(output.Environment, context)
        : undefined,
    ExperimentConfig:
      output.ExperimentConfig !== undefined && output.ExperimentConfig !== null
        ? deserializeAws_json1_1ExperimentConfig(output.ExperimentConfig, context)
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    FinalMetricDataList:
      output.FinalMetricDataList !== undefined && output.FinalMetricDataList !== null
        ? deserializeAws_json1_1FinalMetricDataList(output.FinalMetricDataList, context)
        : undefined,
    HyperParameters:
      output.HyperParameters !== undefined && output.HyperParameters !== null
        ? deserializeAws_json1_1HyperParameters(output.HyperParameters, context)
        : undefined,
    InputDataConfig:
      output.InputDataConfig !== undefined && output.InputDataConfig !== null
        ? deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context)
        : undefined,
    LabelingJobArn:
      output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    ModelArtifacts:
      output.ModelArtifacts !== undefined && output.ModelArtifacts !== null
        ? deserializeAws_json1_1ModelArtifacts(output.ModelArtifacts, context)
        : undefined,
    OutputDataConfig:
      output.OutputDataConfig !== undefined && output.OutputDataConfig !== null
        ? deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context)
        : undefined,
    ResourceConfig:
      output.ResourceConfig !== undefined && output.ResourceConfig !== null
        ? deserializeAws_json1_1ResourceConfig(output.ResourceConfig, context)
        : undefined,
    RetryStrategy:
      output.RetryStrategy !== undefined && output.RetryStrategy !== null
        ? deserializeAws_json1_1RetryStrategy(output.RetryStrategy, context)
        : undefined,
    RoleArn: output.RoleArn !== undefined && output.RoleArn !== null ? output.RoleArn : undefined,
    SecondaryStatus:
      output.SecondaryStatus !== undefined && output.SecondaryStatus !== null ? output.SecondaryStatus : undefined,
    SecondaryStatusTransitions:
      output.SecondaryStatusTransitions !== undefined && output.SecondaryStatusTransitions !== null
        ? deserializeAws_json1_1SecondaryStatusTransitions(output.SecondaryStatusTransitions, context)
        : undefined,
    StoppingCondition:
      output.StoppingCondition !== undefined && output.StoppingCondition !== null
        ? deserializeAws_json1_1StoppingCondition(output.StoppingCondition, context)
        : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
    TensorBoardOutputConfig:
      output.TensorBoardOutputConfig !== undefined && output.TensorBoardOutputConfig !== null
        ? deserializeAws_json1_1TensorBoardOutputConfig(output.TensorBoardOutputConfig, context)
        : undefined,
    TrainingEndTime:
      output.TrainingEndTime !== undefined && output.TrainingEndTime !== null
        ? new Date(Math.round(output.TrainingEndTime * 1000))
        : undefined,
    TrainingJobArn:
      output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
    TrainingJobName:
      output.TrainingJobName !== undefined && output.TrainingJobName !== null ? output.TrainingJobName : undefined,
    TrainingJobStatus:
      output.TrainingJobStatus !== undefined && output.TrainingJobStatus !== null
        ? output.TrainingJobStatus
        : undefined,
    TrainingStartTime:
      output.TrainingStartTime !== undefined && output.TrainingStartTime !== null
        ? new Date(Math.round(output.TrainingStartTime * 1000))
        : undefined,
    TrainingTimeInSeconds:
      output.TrainingTimeInSeconds !== undefined && output.TrainingTimeInSeconds !== null
        ? output.TrainingTimeInSeconds
        : undefined,
    TuningJobArn: output.TuningJobArn !== undefined && output.TuningJobArn !== null ? output.TuningJobArn : undefined,
    VpcConfig:
      output.VpcConfig !== undefined && output.VpcConfig !== null
        ? deserializeAws_json1_1VpcConfig(output.VpcConfig, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1TrainingJobDefinition = (output: any, context: __SerdeContext): TrainingJobDefinition => {
  return {
    HyperParameters:
      output.HyperParameters !== undefined && output.HyperParameters !== null
        ? deserializeAws_json1_1HyperParameters(output.HyperParameters, context)
        : undefined,
    InputDataConfig:
      output.InputDataConfig !== undefined && output.InputDataConfig !== null
        ? deserializeAws_json1_1InputDataConfig(output.InputDataConfig, context)
        : undefined,
    OutputDataConfig:
      output.OutputDataConfig !== undefined && output.OutputDataConfig !== null
        ? deserializeAws_json1_1OutputDataConfig(output.OutputDataConfig, context)
        : undefined,
    ResourceConfig:
      output.ResourceConfig !== undefined && output.ResourceConfig !== null
        ? deserializeAws_json1_1ResourceConfig(output.ResourceConfig, context)
        : undefined,
    StoppingCondition:
      output.StoppingCondition !== undefined && output.StoppingCondition !== null
        ? deserializeAws_json1_1StoppingCondition(output.StoppingCondition, context)
        : undefined,
    TrainingInputMode:
      output.TrainingInputMode !== undefined && output.TrainingInputMode !== null
        ? output.TrainingInputMode
        : undefined,
  } as any;
};

const deserializeAws_json1_1TrainingJobStatusCounters = (
  output: any,
  context: __SerdeContext
): TrainingJobStatusCounters => {
  return {
    Completed: output.Completed !== undefined && output.Completed !== null ? output.Completed : undefined,
    InProgress: output.InProgress !== undefined && output.InProgress !== null ? output.InProgress : undefined,
    NonRetryableError:
      output.NonRetryableError !== undefined && output.NonRetryableError !== null
        ? output.NonRetryableError
        : undefined,
    RetryableError:
      output.RetryableError !== undefined && output.RetryableError !== null ? output.RetryableError : undefined,
    Stopped: output.Stopped !== undefined && output.Stopped !== null ? output.Stopped : undefined,
  } as any;
};

const deserializeAws_json1_1TrainingJobStepMetadata = (
  output: any,
  context: __SerdeContext
): TrainingJobStepMetadata => {
  return {
    Arn: output.Arn !== undefined && output.Arn !== null ? output.Arn : undefined,
  } as any;
};

const deserializeAws_json1_1TrainingJobSummaries = (output: any, context: __SerdeContext): TrainingJobSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1TrainingJobSummary(entry, context);
    });
};

const deserializeAws_json1_1TrainingJobSummary = (output: any, context: __SerdeContext): TrainingJobSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    TrainingEndTime:
      output.TrainingEndTime !== undefined && output.TrainingEndTime !== null
        ? new Date(Math.round(output.TrainingEndTime * 1000))
        : undefined,
    TrainingJobArn:
      output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
    TrainingJobName:
      output.TrainingJobName !== undefined && output.TrainingJobName !== null ? output.TrainingJobName : undefined,
    TrainingJobStatus:
      output.TrainingJobStatus !== undefined && output.TrainingJobStatus !== null
        ? output.TrainingJobStatus
        : undefined,
  } as any;
};

const deserializeAws_json1_1TrainingSpecification = (output: any, context: __SerdeContext): TrainingSpecification => {
  return {
    MetricDefinitions:
      output.MetricDefinitions !== undefined && output.MetricDefinitions !== null
        ? deserializeAws_json1_1MetricDefinitionList(output.MetricDefinitions, context)
        : undefined,
    SupportedHyperParameters:
      output.SupportedHyperParameters !== undefined && output.SupportedHyperParameters !== null
        ? deserializeAws_json1_1HyperParameterSpecifications(output.SupportedHyperParameters, context)
        : undefined,
    SupportedTrainingInstanceTypes:
      output.SupportedTrainingInstanceTypes !== undefined && output.SupportedTrainingInstanceTypes !== null
        ? deserializeAws_json1_1TrainingInstanceTypes(output.SupportedTrainingInstanceTypes, context)
        : undefined,
    SupportedTuningJobObjectiveMetrics:
      output.SupportedTuningJobObjectiveMetrics !== undefined && output.SupportedTuningJobObjectiveMetrics !== null
        ? deserializeAws_json1_1HyperParameterTuningJobObjectives(output.SupportedTuningJobObjectiveMetrics, context)
        : undefined,
    SupportsDistributedTraining:
      output.SupportsDistributedTraining !== undefined && output.SupportsDistributedTraining !== null
        ? output.SupportsDistributedTraining
        : undefined,
    TrainingChannels:
      output.TrainingChannels !== undefined && output.TrainingChannels !== null
        ? deserializeAws_json1_1ChannelSpecifications(output.TrainingChannels, context)
        : undefined,
    TrainingImage:
      output.TrainingImage !== undefined && output.TrainingImage !== null ? output.TrainingImage : undefined,
    TrainingImageDigest:
      output.TrainingImageDigest !== undefined && output.TrainingImageDigest !== null
        ? output.TrainingImageDigest
        : undefined,
  } as any;
};

const deserializeAws_json1_1TransformDataSource = (output: any, context: __SerdeContext): TransformDataSource => {
  return {
    S3DataSource:
      output.S3DataSource !== undefined && output.S3DataSource !== null
        ? deserializeAws_json1_1TransformS3DataSource(output.S3DataSource, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1TransformEnvironmentMap = (
  output: any,
  context: __SerdeContext
): { [key: string]: string } => {
  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {
    if (value === null) {
      return acc;
    }
    return {
      ...acc,
      [key]: value,
    };
  }, {});
};

const deserializeAws_json1_1TransformInput = (output: any, context: __SerdeContext): TransformInput => {
  return {
    CompressionType:
      output.CompressionType !== undefined && output.CompressionType !== null ? output.CompressionType : undefined,
    ContentType: output.ContentType !== undefined && output.ContentType !== null ? output.ContentType : undefined,
    DataSource:
      output.DataSource !== undefined && output.DataSource !== null
        ? deserializeAws_json1_1TransformDataSource(output.DataSource, context)
        : undefined,
    SplitType: output.SplitType !== undefined && output.SplitType !== null ? output.SplitType : undefined,
  } as any;
};

const deserializeAws_json1_1TransformInstanceTypes = (
  output: any,
  context: __SerdeContext
): (TransformInstanceType | string)[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1TransformJob = (output: any, context: __SerdeContext): TransformJob => {
  return {
    AutoMLJobArn: output.AutoMLJobArn !== undefined && output.AutoMLJobArn !== null ? output.AutoMLJobArn : undefined,
    BatchStrategy:
      output.BatchStrategy !== undefined && output.BatchStrategy !== null ? output.BatchStrategy : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DataProcessing:
      output.DataProcessing !== undefined && output.DataProcessing !== null
        ? deserializeAws_json1_1DataProcessing(output.DataProcessing, context)
        : undefined,
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1TransformEnvironmentMap(output.Environment, context)
        : undefined,
    ExperimentConfig:
      output.ExperimentConfig !== undefined && output.ExperimentConfig !== null
        ? deserializeAws_json1_1ExperimentConfig(output.ExperimentConfig, context)
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    LabelingJobArn:
      output.LabelingJobArn !== undefined && output.LabelingJobArn !== null ? output.LabelingJobArn : undefined,
    MaxConcurrentTransforms:
      output.MaxConcurrentTransforms !== undefined && output.MaxConcurrentTransforms !== null
        ? output.MaxConcurrentTransforms
        : undefined,
    MaxPayloadInMB:
      output.MaxPayloadInMB !== undefined && output.MaxPayloadInMB !== null ? output.MaxPayloadInMB : undefined,
    ModelClientConfig:
      output.ModelClientConfig !== undefined && output.ModelClientConfig !== null
        ? deserializeAws_json1_1ModelClientConfig(output.ModelClientConfig, context)
        : undefined,
    ModelName: output.ModelName !== undefined && output.ModelName !== null ? output.ModelName : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
    TransformEndTime:
      output.TransformEndTime !== undefined && output.TransformEndTime !== null
        ? new Date(Math.round(output.TransformEndTime * 1000))
        : undefined,
    TransformInput:
      output.TransformInput !== undefined && output.TransformInput !== null
        ? deserializeAws_json1_1TransformInput(output.TransformInput, context)
        : undefined,
    TransformJobArn:
      output.TransformJobArn !== undefined && output.TransformJobArn !== null ? output.TransformJobArn : undefined,
    TransformJobName:
      output.TransformJobName !== undefined && output.TransformJobName !== null ? output.TransformJobName : undefined,
    TransformJobStatus:
      output.TransformJobStatus !== undefined && output.TransformJobStatus !== null
        ? output.TransformJobStatus
        : undefined,
    TransformOutput:
      output.TransformOutput !== undefined && output.TransformOutput !== null
        ? deserializeAws_json1_1TransformOutput(output.TransformOutput, context)
        : undefined,
    TransformResources:
      output.TransformResources !== undefined && output.TransformResources !== null
        ? deserializeAws_json1_1TransformResources(output.TransformResources, context)
        : undefined,
    TransformStartTime:
      output.TransformStartTime !== undefined && output.TransformStartTime !== null
        ? new Date(Math.round(output.TransformStartTime * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1TransformJobDefinition = (output: any, context: __SerdeContext): TransformJobDefinition => {
  return {
    BatchStrategy:
      output.BatchStrategy !== undefined && output.BatchStrategy !== null ? output.BatchStrategy : undefined,
    Environment:
      output.Environment !== undefined && output.Environment !== null
        ? deserializeAws_json1_1TransformEnvironmentMap(output.Environment, context)
        : undefined,
    MaxConcurrentTransforms:
      output.MaxConcurrentTransforms !== undefined && output.MaxConcurrentTransforms !== null
        ? output.MaxConcurrentTransforms
        : undefined,
    MaxPayloadInMB:
      output.MaxPayloadInMB !== undefined && output.MaxPayloadInMB !== null ? output.MaxPayloadInMB : undefined,
    TransformInput:
      output.TransformInput !== undefined && output.TransformInput !== null
        ? deserializeAws_json1_1TransformInput(output.TransformInput, context)
        : undefined,
    TransformOutput:
      output.TransformOutput !== undefined && output.TransformOutput !== null
        ? deserializeAws_json1_1TransformOutput(output.TransformOutput, context)
        : undefined,
    TransformResources:
      output.TransformResources !== undefined && output.TransformResources !== null
        ? deserializeAws_json1_1TransformResources(output.TransformResources, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1TransformJobStepMetadata = (
  output: any,
  context: __SerdeContext
): TransformJobStepMetadata => {
  return {
    Arn: output.Arn !== undefined && output.Arn !== null ? output.Arn : undefined,
  } as any;
};

const deserializeAws_json1_1TransformJobSummaries = (output: any, context: __SerdeContext): TransformJobSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1TransformJobSummary(entry, context);
    });
};

const deserializeAws_json1_1TransformJobSummary = (output: any, context: __SerdeContext): TransformJobSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    FailureReason:
      output.FailureReason !== undefined && output.FailureReason !== null ? output.FailureReason : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    TransformEndTime:
      output.TransformEndTime !== undefined && output.TransformEndTime !== null
        ? new Date(Math.round(output.TransformEndTime * 1000))
        : undefined,
    TransformJobArn:
      output.TransformJobArn !== undefined && output.TransformJobArn !== null ? output.TransformJobArn : undefined,
    TransformJobName:
      output.TransformJobName !== undefined && output.TransformJobName !== null ? output.TransformJobName : undefined,
    TransformJobStatus:
      output.TransformJobStatus !== undefined && output.TransformJobStatus !== null
        ? output.TransformJobStatus
        : undefined,
  } as any;
};

const deserializeAws_json1_1TransformOutput = (output: any, context: __SerdeContext): TransformOutput => {
  return {
    Accept: output.Accept !== undefined && output.Accept !== null ? output.Accept : undefined,
    AssembleWith: output.AssembleWith !== undefined && output.AssembleWith !== null ? output.AssembleWith : undefined,
    KmsKeyId: output.KmsKeyId !== undefined && output.KmsKeyId !== null ? output.KmsKeyId : undefined,
    S3OutputPath: output.S3OutputPath !== undefined && output.S3OutputPath !== null ? output.S3OutputPath : undefined,
  } as any;
};

const deserializeAws_json1_1TransformResources = (output: any, context: __SerdeContext): TransformResources => {
  return {
    InstanceCount:
      output.InstanceCount !== undefined && output.InstanceCount !== null ? output.InstanceCount : undefined,
    InstanceType: output.InstanceType !== undefined && output.InstanceType !== null ? output.InstanceType : undefined,
    VolumeKmsKeyId:
      output.VolumeKmsKeyId !== undefined && output.VolumeKmsKeyId !== null ? output.VolumeKmsKeyId : undefined,
  } as any;
};

const deserializeAws_json1_1TransformS3DataSource = (output: any, context: __SerdeContext): TransformS3DataSource => {
  return {
    S3DataType: output.S3DataType !== undefined && output.S3DataType !== null ? output.S3DataType : undefined,
    S3Uri: output.S3Uri !== undefined && output.S3Uri !== null ? output.S3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1Trial = (output: any, context: __SerdeContext): Trial => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
    ExperimentName:
      output.ExperimentName !== undefined && output.ExperimentName !== null ? output.ExperimentName : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    MetadataProperties:
      output.MetadataProperties !== undefined && output.MetadataProperties !== null
        ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
        : undefined,
    Source:
      output.Source !== undefined && output.Source !== null
        ? deserializeAws_json1_1TrialSource(output.Source, context)
        : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
    TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
    TrialComponentSummaries:
      output.TrialComponentSummaries !== undefined && output.TrialComponentSummaries !== null
        ? deserializeAws_json1_1TrialComponentSimpleSummaries(output.TrialComponentSummaries, context)
        : undefined,
    TrialName: output.TrialName !== undefined && output.TrialName !== null ? output.TrialName : undefined,
  } as any;
};

const deserializeAws_json1_1TrialComponent = (output: any, context: __SerdeContext): TrialComponent => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
    EndTime:
      output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
    InputArtifacts:
      output.InputArtifacts !== undefined && output.InputArtifacts !== null
        ? deserializeAws_json1_1TrialComponentArtifacts(output.InputArtifacts, context)
        : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    MetadataProperties:
      output.MetadataProperties !== undefined && output.MetadataProperties !== null
        ? deserializeAws_json1_1MetadataProperties(output.MetadataProperties, context)
        : undefined,
    Metrics:
      output.Metrics !== undefined && output.Metrics !== null
        ? deserializeAws_json1_1TrialComponentMetricSummaries(output.Metrics, context)
        : undefined,
    OutputArtifacts:
      output.OutputArtifacts !== undefined && output.OutputArtifacts !== null
        ? deserializeAws_json1_1TrialComponentArtifacts(output.OutputArtifacts, context)
        : undefined,
    Parameters:
      output.Parameters !== undefined && output.Parameters !== null
        ? deserializeAws_json1_1TrialComponentParameters(output.Parameters, context)
        : undefined,
    Parents:
      output.Parents !== undefined && output.Parents !== null
        ? deserializeAws_json1_1Parents(output.Parents, context)
        : undefined,
    Source:
      output.Source !== undefined && output.Source !== null
        ? deserializeAws_json1_1TrialComponentSource(output.Source, context)
        : undefined,
    SourceDetail:
      output.SourceDetail !== undefined && output.SourceDetail !== null
        ? deserializeAws_json1_1TrialComponentSourceDetail(output.SourceDetail, context)
        : undefined,
    StartTime:
      output.StartTime !== undefined && output.StartTime !== null
        ? new Date(Math.round(output.StartTime * 1000))
        : undefined,
    Status:
      output.Status !== undefined && output.Status !== null
        ? deserializeAws_json1_1TrialComponentStatus(output.Status, context)
        : undefined,
    Tags:
      output.Tags !== undefined && output.Tags !== null
        ? deserializeAws_json1_1TagList(output.Tags, context)
        : undefined,
    TrialComponentArn:
      output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
        ? output.TrialComponentArn
        : undefined,
    TrialComponentName:
      output.TrialComponentName !== undefined && output.TrialComponentName !== null
        ? output.TrialComponentName
        : undefined,
  } as any;
};

const deserializeAws_json1_1TrialComponentArtifact = (output: any, context: __SerdeContext): TrialComponentArtifact => {
  return {
    MediaType: output.MediaType !== undefined && output.MediaType !== null ? output.MediaType : undefined,
    Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined,
  } as any;
};

const deserializeAws_json1_1TrialComponentArtifacts = (
  output: any,
  context: __SerdeContext
): { [key: string]: TrialComponentArtifact } => {
  return Object.entries(output).reduce(
    (acc: { [key: string]: TrialComponentArtifact }, [key, value]: [string, any]) => {
      if (value === null) {
        return acc;
      }
      return {
        ...acc,
        [key]: deserializeAws_json1_1TrialComponentArtifact(value, context),
      };
    },
    {}
  );
};

const deserializeAws_json1_1TrialComponentMetricSummaries = (
  output: any,
  context: __SerdeContext
): TrialComponentMetricSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1TrialComponentMetricSummary(entry, context);
    });
};

const deserializeAws_json1_1TrialComponentMetricSummary = (
  output: any,
  context: __SerdeContext
): TrialComponentMetricSummary => {
  return {
    Avg: output.Avg !== undefined && output.Avg !== null ? output.Avg : undefined,
    Count: output.Count !== undefined && output.Count !== null ? output.Count : undefined,
    Last: output.Last !== undefined && output.Last !== null ? output.Last : undefined,
    Max: output.Max !== undefined && output.Max !== null ? output.Max : undefined,
    MetricName: output.MetricName !== undefined && output.MetricName !== null ? output.MetricName : undefined,
    Min: output.Min !== undefined && output.Min !== null ? output.Min : undefined,
    SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
    StdDev: output.StdDev !== undefined && output.StdDev !== null ? output.StdDev : undefined,
    TimeStamp:
      output.TimeStamp !== undefined && output.TimeStamp !== null
        ? new Date(Math.round(output.TimeStamp * 1000))
        : undefined,
  } as any;
};

const deserializeAws_json1_1TrialComponentParameters = (
  output: any,
  context: __SerdeContext
): { [key: string]: TrialComponentParameterValue } => {
  return Object.entries(output).reduce(
    (acc: { [key: string]: TrialComponentParameterValue }, [key, value]: [string, any]) => {
      if (value === null) {
        return acc;
      }
      return {
        ...acc,
        [key]: deserializeAws_json1_1TrialComponentParameterValue(value, context),
      };
    },
    {}
  );
};

const deserializeAws_json1_1TrialComponentParameterValue = (
  output: any,
  context: __SerdeContext
): TrialComponentParameterValue => {
  if (output.NumberValue !== undefined && output.NumberValue !== null) {
    return {
      NumberValue: output.NumberValue,
    };
  }
  if (output.StringValue !== undefined && output.StringValue !== null) {
    return {
      StringValue: output.StringValue,
    };
  }
  return { $unknown: Object.entries(output)[0] };
};

const deserializeAws_json1_1TrialComponentSimpleSummaries = (
  output: any,
  context: __SerdeContext
): TrialComponentSimpleSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1TrialComponentSimpleSummary(entry, context);
    });
};

const deserializeAws_json1_1TrialComponentSimpleSummary = (
  output: any,
  context: __SerdeContext
): TrialComponentSimpleSummary => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    TrialComponentArn:
      output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
        ? output.TrialComponentArn
        : undefined,
    TrialComponentName:
      output.TrialComponentName !== undefined && output.TrialComponentName !== null
        ? output.TrialComponentName
        : undefined,
    TrialComponentSource:
      output.TrialComponentSource !== undefined && output.TrialComponentSource !== null
        ? deserializeAws_json1_1TrialComponentSource(output.TrialComponentSource, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1TrialComponentSource = (output: any, context: __SerdeContext): TrialComponentSource => {
  return {
    SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
    SourceType: output.SourceType !== undefined && output.SourceType !== null ? output.SourceType : undefined,
  } as any;
};

const deserializeAws_json1_1TrialComponentSourceDetail = (
  output: any,
  context: __SerdeContext
): TrialComponentSourceDetail => {
  return {
    ProcessingJob:
      output.ProcessingJob !== undefined && output.ProcessingJob !== null
        ? deserializeAws_json1_1ProcessingJob(output.ProcessingJob, context)
        : undefined,
    SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
    TrainingJob:
      output.TrainingJob !== undefined && output.TrainingJob !== null
        ? deserializeAws_json1_1TrainingJob(output.TrainingJob, context)
        : undefined,
    TransformJob:
      output.TransformJob !== undefined && output.TransformJob !== null
        ? deserializeAws_json1_1TransformJob(output.TransformJob, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1TrialComponentStatus = (output: any, context: __SerdeContext): TrialComponentStatus => {
  return {
    Message: output.Message !== undefined && output.Message !== null ? output.Message : undefined,
    PrimaryStatus:
      output.PrimaryStatus !== undefined && output.PrimaryStatus !== null ? output.PrimaryStatus : undefined,
  } as any;
};

const deserializeAws_json1_1TrialComponentSummaries = (
  output: any,
  context: __SerdeContext
): TrialComponentSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1TrialComponentSummary(entry, context);
    });
};

const deserializeAws_json1_1TrialComponentSummary = (output: any, context: __SerdeContext): TrialComponentSummary => {
  return {
    CreatedBy:
      output.CreatedBy !== undefined && output.CreatedBy !== null
        ? deserializeAws_json1_1UserContext(output.CreatedBy, context)
        : undefined,
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
    EndTime:
      output.EndTime !== undefined && output.EndTime !== null ? new Date(Math.round(output.EndTime * 1000)) : undefined,
    LastModifiedBy:
      output.LastModifiedBy !== undefined && output.LastModifiedBy !== null
        ? deserializeAws_json1_1UserContext(output.LastModifiedBy, context)
        : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    StartTime:
      output.StartTime !== undefined && output.StartTime !== null
        ? new Date(Math.round(output.StartTime * 1000))
        : undefined,
    Status:
      output.Status !== undefined && output.Status !== null
        ? deserializeAws_json1_1TrialComponentStatus(output.Status, context)
        : undefined,
    TrialComponentArn:
      output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
        ? output.TrialComponentArn
        : undefined,
    TrialComponentName:
      output.TrialComponentName !== undefined && output.TrialComponentName !== null
        ? output.TrialComponentName
        : undefined,
    TrialComponentSource:
      output.TrialComponentSource !== undefined && output.TrialComponentSource !== null
        ? deserializeAws_json1_1TrialComponentSource(output.TrialComponentSource, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1TrialSource = (output: any, context: __SerdeContext): TrialSource => {
  return {
    SourceArn: output.SourceArn !== undefined && output.SourceArn !== null ? output.SourceArn : undefined,
    SourceType: output.SourceType !== undefined && output.SourceType !== null ? output.SourceType : undefined,
  } as any;
};

const deserializeAws_json1_1TrialSummaries = (output: any, context: __SerdeContext): TrialSummary[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1TrialSummary(entry, context);
    });
};

const deserializeAws_json1_1TrialSummary = (output: any, context: __SerdeContext): TrialSummary => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DisplayName: output.DisplayName !== undefined && output.DisplayName !== null ? output.DisplayName : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
    TrialName: output.TrialName !== undefined && output.TrialName !== null ? output.TrialName : undefined,
    TrialSource:
      output.TrialSource !== undefined && output.TrialSource !== null
        ? deserializeAws_json1_1TrialSource(output.TrialSource, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1TuningJobCompletionCriteria = (
  output: any,
  context: __SerdeContext
): TuningJobCompletionCriteria => {
  return {
    TargetObjectiveMetricValue:
      output.TargetObjectiveMetricValue !== undefined && output.TargetObjectiveMetricValue !== null
        ? output.TargetObjectiveMetricValue
        : undefined,
  } as any;
};

const deserializeAws_json1_1UiConfig = (output: any, context: __SerdeContext): UiConfig => {
  return {
    HumanTaskUiArn:
      output.HumanTaskUiArn !== undefined && output.HumanTaskUiArn !== null ? output.HumanTaskUiArn : undefined,
    UiTemplateS3Uri:
      output.UiTemplateS3Uri !== undefined && output.UiTemplateS3Uri !== null ? output.UiTemplateS3Uri : undefined,
  } as any;
};

const deserializeAws_json1_1UiTemplateInfo = (output: any, context: __SerdeContext): UiTemplateInfo => {
  return {
    ContentSha256:
      output.ContentSha256 !== undefined && output.ContentSha256 !== null ? output.ContentSha256 : undefined,
    Url: output.Url !== undefined && output.Url !== null ? output.Url : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateActionResponse = (output: any, context: __SerdeContext): UpdateActionResponse => {
  return {
    ActionArn: output.ActionArn !== undefined && output.ActionArn !== null ? output.ActionArn : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateAppImageConfigResponse = (
  output: any,
  context: __SerdeContext
): UpdateAppImageConfigResponse => {
  return {
    AppImageConfigArn:
      output.AppImageConfigArn !== undefined && output.AppImageConfigArn !== null
        ? output.AppImageConfigArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateArtifactResponse = (output: any, context: __SerdeContext): UpdateArtifactResponse => {
  return {
    ArtifactArn: output.ArtifactArn !== undefined && output.ArtifactArn !== null ? output.ArtifactArn : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateCodeRepositoryOutput = (
  output: any,
  context: __SerdeContext
): UpdateCodeRepositoryOutput => {
  return {
    CodeRepositoryArn:
      output.CodeRepositoryArn !== undefined && output.CodeRepositoryArn !== null
        ? output.CodeRepositoryArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateContextResponse = (output: any, context: __SerdeContext): UpdateContextResponse => {
  return {
    ContextArn: output.ContextArn !== undefined && output.ContextArn !== null ? output.ContextArn : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateDomainResponse = (output: any, context: __SerdeContext): UpdateDomainResponse => {
  return {
    DomainArn: output.DomainArn !== undefined && output.DomainArn !== null ? output.DomainArn : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateEndpointOutput = (output: any, context: __SerdeContext): UpdateEndpointOutput => {
  return {
    EndpointArn: output.EndpointArn !== undefined && output.EndpointArn !== null ? output.EndpointArn : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateEndpointWeightsAndCapacitiesOutput = (
  output: any,
  context: __SerdeContext
): UpdateEndpointWeightsAndCapacitiesOutput => {
  return {
    EndpointArn: output.EndpointArn !== undefined && output.EndpointArn !== null ? output.EndpointArn : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateExperimentResponse = (
  output: any,
  context: __SerdeContext
): UpdateExperimentResponse => {
  return {
    ExperimentArn:
      output.ExperimentArn !== undefined && output.ExperimentArn !== null ? output.ExperimentArn : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateImageResponse = (output: any, context: __SerdeContext): UpdateImageResponse => {
  return {
    ImageArn: output.ImageArn !== undefined && output.ImageArn !== null ? output.ImageArn : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateModelPackageOutput = (
  output: any,
  context: __SerdeContext
): UpdateModelPackageOutput => {
  return {
    ModelPackageArn:
      output.ModelPackageArn !== undefined && output.ModelPackageArn !== null ? output.ModelPackageArn : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateMonitoringScheduleResponse = (
  output: any,
  context: __SerdeContext
): UpdateMonitoringScheduleResponse => {
  return {
    MonitoringScheduleArn:
      output.MonitoringScheduleArn !== undefined && output.MonitoringScheduleArn !== null
        ? output.MonitoringScheduleArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateNotebookInstanceLifecycleConfigOutput = (
  output: any,
  context: __SerdeContext
): UpdateNotebookInstanceLifecycleConfigOutput => {
  return {} as any;
};

const deserializeAws_json1_1UpdateNotebookInstanceOutput = (
  output: any,
  context: __SerdeContext
): UpdateNotebookInstanceOutput => {
  return {} as any;
};

const deserializeAws_json1_1UpdatePipelineExecutionResponse = (
  output: any,
  context: __SerdeContext
): UpdatePipelineExecutionResponse => {
  return {
    PipelineExecutionArn:
      output.PipelineExecutionArn !== undefined && output.PipelineExecutionArn !== null
        ? output.PipelineExecutionArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1UpdatePipelineResponse = (output: any, context: __SerdeContext): UpdatePipelineResponse => {
  return {
    PipelineArn: output.PipelineArn !== undefined && output.PipelineArn !== null ? output.PipelineArn : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateTrainingJobResponse = (
  output: any,
  context: __SerdeContext
): UpdateTrainingJobResponse => {
  return {
    TrainingJobArn:
      output.TrainingJobArn !== undefined && output.TrainingJobArn !== null ? output.TrainingJobArn : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateTrialComponentResponse = (
  output: any,
  context: __SerdeContext
): UpdateTrialComponentResponse => {
  return {
    TrialComponentArn:
      output.TrialComponentArn !== undefined && output.TrialComponentArn !== null
        ? output.TrialComponentArn
        : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateTrialResponse = (output: any, context: __SerdeContext): UpdateTrialResponse => {
  return {
    TrialArn: output.TrialArn !== undefined && output.TrialArn !== null ? output.TrialArn : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateUserProfileResponse = (
  output: any,
  context: __SerdeContext
): UpdateUserProfileResponse => {
  return {
    UserProfileArn:
      output.UserProfileArn !== undefined && output.UserProfileArn !== null ? output.UserProfileArn : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateWorkforceResponse = (
  output: any,
  context: __SerdeContext
): UpdateWorkforceResponse => {
  return {
    Workforce:
      output.Workforce !== undefined && output.Workforce !== null
        ? deserializeAws_json1_1Workforce(output.Workforce, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1UpdateWorkteamResponse = (output: any, context: __SerdeContext): UpdateWorkteamResponse => {
  return {
    Workteam:
      output.Workteam !== undefined && output.Workteam !== null
        ? deserializeAws_json1_1Workteam(output.Workteam, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1USD = (output: any, context: __SerdeContext): USD => {
  return {
    Cents: output.Cents !== undefined && output.Cents !== null ? output.Cents : undefined,
    Dollars: output.Dollars !== undefined && output.Dollars !== null ? output.Dollars : undefined,
    TenthFractionsOfACent:
      output.TenthFractionsOfACent !== undefined && output.TenthFractionsOfACent !== null
        ? output.TenthFractionsOfACent
        : undefined,
  } as any;
};

const deserializeAws_json1_1UserContext = (output: any, context: __SerdeContext): UserContext => {
  return {
    DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
    UserProfileArn:
      output.UserProfileArn !== undefined && output.UserProfileArn !== null ? output.UserProfileArn : undefined,
    UserProfileName:
      output.UserProfileName !== undefined && output.UserProfileName !== null ? output.UserProfileName : undefined,
  } as any;
};

const deserializeAws_json1_1UserProfileDetails = (output: any, context: __SerdeContext): UserProfileDetails => {
  return {
    CreationTime:
      output.CreationTime !== undefined && output.CreationTime !== null
        ? new Date(Math.round(output.CreationTime * 1000))
        : undefined,
    DomainId: output.DomainId !== undefined && output.DomainId !== null ? output.DomainId : undefined,
    LastModifiedTime:
      output.LastModifiedTime !== undefined && output.LastModifiedTime !== null
        ? new Date(Math.round(output.LastModifiedTime * 1000))
        : undefined,
    Status: output.Status !== undefined && output.Status !== null ? output.Status : undefined,
    UserProfileName:
      output.UserProfileName !== undefined && output.UserProfileName !== null ? output.UserProfileName : undefined,
  } as any;
};

const deserializeAws_json1_1UserProfileList = (output: any, context: __SerdeContext): UserProfileDetails[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1UserProfileDetails(entry, context);
    });
};

const deserializeAws_json1_1UserSettings = (output: any, context: __SerdeContext): UserSettings => {
  return {
    ExecutionRole:
      output.ExecutionRole !== undefined && output.ExecutionRole !== null ? output.ExecutionRole : undefined,
    JupyterServerAppSettings:
      output.JupyterServerAppSettings !== undefined && output.JupyterServerAppSettings !== null
        ? deserializeAws_json1_1JupyterServerAppSettings(output.JupyterServerAppSettings, context)
        : undefined,
    KernelGatewayAppSettings:
      output.KernelGatewayAppSettings !== undefined && output.KernelGatewayAppSettings !== null
        ? deserializeAws_json1_1KernelGatewayAppSettings(output.KernelGatewayAppSettings, context)
        : undefined,
    SecurityGroups:
      output.SecurityGroups !== undefined && output.SecurityGroups !== null
        ? deserializeAws_json1_1SecurityGroupIds(output.SecurityGroups, context)
        : undefined,
    SharingSettings:
      output.SharingSettings !== undefined && output.SharingSettings !== null
        ? deserializeAws_json1_1SharingSettings(output.SharingSettings, context)
        : undefined,
    TensorBoardAppSettings:
      output.TensorBoardAppSettings !== undefined && output.TensorBoardAppSettings !== null
        ? deserializeAws_json1_1TensorBoardAppSettings(output.TensorBoardAppSettings, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1VpcConfig = (output: any, context: __SerdeContext): VpcConfig => {
  return {
    SecurityGroupIds:
      output.SecurityGroupIds !== undefined && output.SecurityGroupIds !== null
        ? deserializeAws_json1_1VpcSecurityGroupIds(output.SecurityGroupIds, context)
        : undefined,
    Subnets:
      output.Subnets !== undefined && output.Subnets !== null
        ? deserializeAws_json1_1Subnets(output.Subnets, context)
        : undefined,
  } as any;
};

const deserializeAws_json1_1VpcSecurityGroupIds = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return entry;
    });
};

const deserializeAws_json1_1Workforce = (output: any, context: __SerdeContext): Workforce => {
  return {
    CognitoConfig:
      output.CognitoConfig !== undefined && output.CognitoConfig !== null
        ? deserializeAws_json1_1CognitoConfig(output.CognitoConfig, context)
        : undefined,
    CreateDate:
      output.CreateDate !== undefined && output.CreateDate !== null
        ? new Date(Math.round(output.CreateDate * 1000))
        : undefined,
    LastUpdatedDate:
      output.LastUpdatedDate !== undefined && output.LastUpdatedDate !== null
        ? new Date(Math.round(output.LastUpdatedDate * 1000))
        : undefined,
    OidcConfig:
      output.OidcConfig !== undefined && output.OidcConfig !== null
        ? deserializeAws_json1_1OidcConfigForResponse(output.OidcConfig, context)
        : undefined,
    SourceIpConfig:
      output.SourceIpConfig !== undefined && output.SourceIpConfig !== null
        ? deserializeAws_json1_1SourceIpConfig(output.SourceIpConfig, context)
        : undefined,
    SubDomain: output.SubDomain !== undefined && output.SubDomain !== null ? output.SubDomain : undefined,
    WorkforceArn: output.WorkforceArn !== undefined && output.WorkforceArn !== null ? output.WorkforceArn : undefined,
    WorkforceName:
      output.WorkforceName !== undefined && output.WorkforceName !== null ? output.WorkforceName : undefined,
  } as any;
};

const deserializeAws_json1_1Workforces = (output: any, context: __SerdeContext): Workforce[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1Workforce(entry, context);
    });
};

const deserializeAws_json1_1Workteam = (output: any, context: __SerdeContext): Workteam => {
  return {
    CreateDate:
      output.CreateDate !== undefined && output.CreateDate !== null
        ? new Date(Math.round(output.CreateDate * 1000))
        : undefined,
    Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
    LastUpdatedDate:
      output.LastUpdatedDate !== undefined && output.LastUpdatedDate !== null
        ? new Date(Math.round(output.LastUpdatedDate * 1000))
        : undefined,
    MemberDefinitions:
      output.MemberDefinitions !== undefined && output.MemberDefinitions !== null
        ? deserializeAws_json1_1MemberDefinitions(output.MemberDefinitions, context)
        : undefined,
    NotificationConfiguration:
      output.NotificationConfiguration !== undefined && output.NotificationConfiguration !== null
        ? deserializeAws_json1_1NotificationConfiguration(output.NotificationConfiguration, context)
        : undefined,
    ProductListingIds:
      output.ProductListingIds !== undefined && output.ProductListingIds !== null
        ? deserializeAws_json1_1ProductListings(output.ProductListingIds, context)
        : undefined,
    SubDomain: output.SubDomain !== undefined && output.SubDomain !== null ? output.SubDomain : undefined,
    WorkforceArn: output.WorkforceArn !== undefined && output.WorkforceArn !== null ? output.WorkforceArn : undefined,
    WorkteamArn: output.WorkteamArn !== undefined && output.WorkteamArn !== null ? output.WorkteamArn : undefined,
    WorkteamName: output.WorkteamName !== undefined && output.WorkteamName !== null ? output.WorkteamName : undefined,
  } as any;
};

const deserializeAws_json1_1Workteams = (output: any, context: __SerdeContext): Workteam[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      if (entry === null) {
        return null as any;
      }
      return deserializeAws_json1_1Workteam(entry, context);
    });
};

const deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"],
});

// Collect low-level response body stream to Uint8Array.
const collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {
  if (streamBody instanceof Uint8Array) {
    return Promise.resolve(streamBody);
  }
  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};

// Encode Uint8Array data into string with utf-8.
const collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>
  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));

const buildHttpRpcRequest = async (
  context: __SerdeContext,
  headers: __HeaderBag,
  path: string,
  resolvedHostname: string | undefined,
  body: any
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port } = await context.endpoint();
  const contents: any = {
    protocol,
    hostname,
    port,
    method: "POST",
    path,
    headers,
  };
  if (resolvedHostname !== undefined) {
    contents.hostname = resolvedHostname;
  }
  if (body !== undefined) {
    contents.body = body;
  }
  return new __HttpRequest(contents);
};

const parseBody = (streamBody: any, context: __SerdeContext): any =>
  collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
      return JSON.parse(encoded);
    }
    return {};
  });

/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */
const loadRestJsonErrorCode = (output: __HttpResponse, data: any): string => {
  const findKey = (object: any, key: string) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());

  const sanitizeErrorCode = (rawValue: string): string => {
    let cleanValue = rawValue;
    if (cleanValue.indexOf(":") >= 0) {
      cleanValue = cleanValue.split(":")[0];
    }
    if (cleanValue.indexOf("#") >= 0) {
      cleanValue = cleanValue.split("#")[1];
    }
    return cleanValue;
  };

  const headerKey = findKey(output.headers, "x-amzn-errortype");
  if (headerKey !== undefined) {
    return sanitizeErrorCode(output.headers[headerKey]);
  }

  if (data.code !== undefined) {
    return sanitizeErrorCode(data.code);
  }

  if (data["__type"] !== undefined) {
    return sanitizeErrorCode(data["__type"]);
  }

  return "";
};
