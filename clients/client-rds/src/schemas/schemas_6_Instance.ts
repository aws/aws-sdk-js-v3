// smithy-typescript generated code
import { error, op, struct } from "@smithy/core/schema";

import {
  BackupPolicyNotFoundFault as __BackupPolicyNotFoundFault,
  DBClusterAlreadyExistsFault as __DBClusterAlreadyExistsFault,
  DBInstanceAlreadyExistsFault as __DBInstanceAlreadyExistsFault,
  DBSubnetGroupNotAllowedFault as __DBSubnetGroupNotAllowedFault,
  DBUpgradeDependencyFailureFault as __DBUpgradeDependencyFailureFault,
  DomainNotFoundFault as __DomainNotFoundFault,
  InsufficientDBClusterCapacityFault as __InsufficientDBClusterCapacityFault,
  InsufficientStorageClusterCapacityFault as __InsufficientStorageClusterCapacityFault,
  InvalidDBSubnetGroupFault as __InvalidDBSubnetGroupFault,
  InvalidRestoreFault as __InvalidRestoreFault,
  PointInTimeRestoreNotEnabledFault as __PointInTimeRestoreNotEnabledFault,
  ProvisionedIopsNotAvailableInAZFault as __ProvisionedIopsNotAvailableInAZFault,
  StorageQuotaExceededFault as __StorageQuotaExceededFault,
  StorageTypeNotAvailableFault as __StorageTypeNotAvailableFault,
} from "../models/index";
import {
  _ABRPA,
  _AEMC,
  _AIp,
  _AM,
  _AMVU,
  _AMVUl,
  _AP,
  _aQE,
  _AS,
  _AZ,
  _AZv,
  _BPNFF,
  _BRP,
  _BTa,
  _BW,
  _c,
  _CACI,
  _CDBC,
  _CDBCM,
  _CDBCR,
  _CDBI,
  _CDBIM,
  _CDBIR,
  _CDBIRR,
  _CDBIRRM,
  _CDBIRRR,
  _CIIP,
  _CLEC,
  _CRR,
  _CSN,
  _CST,
  _CTTS,
  _DASA,
  _DBC,
  _DBCAEF,
  _DBCI,
  _DBCIC,
  _DBCPGN,
  _DBCSI,
  _DBI,
  _DBIAEF,
  _DBIC,
  _DBII,
  _DBIPGN,
  _DBN,
  _DBPGN,
  _DBPNo,
  _DBSGe,
  _DBSGNAF,
  _DBSGNu,
  _DBSI,
  _DBSIn,
  _DBUDFF,
  _DD,
  _DDI,
  _DF,
  _DIAMRN,
  _DIM,
  _DLT,
  _DLV,
  _DN,
  _DNFF,
  _DO,
  _Do,
  _DP,
  _E,
  _e,
  _ECLE,
  _ECOI,
  _EGWF,
  _EHE,
  _EIAMDA,
  _ELD,
  _ELS,
  _ELT,
  _ELWF,
  _EMn,
  _EPI,
  _EV,
  _GCI,
  _hE,
  _I,
  _IDBCCF,
  _IDBSGF,
  _IRF,
  _ISCCF,
  _KKI,
  _LM,
  _m,
  _MAS,
  _MAZ,
  _MC,
  _MCa,
  _MDBC,
  _MDBCM,
  _MDBCR,
  _MDBI,
  _MDBIM,
  _MDBIR,
  _MI,
  _MMUP,
  _MRA,
  _MT,
  _MU,
  _MUAT,
  _MUP,
  _MUSKKI,
  _NCSN,
  _NDBCI,
  _NDBII,
  _NT,
  _OGN,
  _P,
  _PA,
  _PBW,
  _PF,
  _PIKMSKI,
  _PINAIAZF,
  _PIRP,
  _PITRNEF,
  _PMW,
  _PSU,
  _PT,
  _RCCC,
  _RDBCFS,
  _RDBCFSe,
  _RDBCFSM,
  _RDBCFSMe,
  _RDBCFSR,
  _RDBCFSRe,
  _RDBCTPIT,
  _RDBCTPITM,
  _RDBCTPITR,
  _RDBIFDBS,
  _RDBIFDBSM,
  _RDBIFDBSR,
  _RDBIFS,
  _RDBIFSM,
  _RDBIFSR,
  _RDBITPIT,
  _RDBITPITM,
  _RDBITPITR,
  _RFAMM,
  _RM,
  _RMUP,
  _RSI,
  _RT,
  _RTe,
  _RTT,
  _SBN,
  _SBT,
  _SC,
  _SDBCI,
  _SDBIABA,
  _SDBII,
  _SDCRI,
  _SDRI,
  _SE,
  _SEo,
  _SEV,
  _SIn,
  _SIRA,
  _SP,
  _SQEFt,
  _ST,
  _STNAF,
  _STt,
  _SUAP,
  _SVSC,
  _T,
  _TAi,
  _TCA,
  _TCP,
  _TDBII,
  _Ti,
  _UDPF,
  _ULRT,
  _USC,
  _VSGI,
  AvailabilityZones,
  DBInstance,
  n0,
  ProcessorFeatureList,
  TagList,
} from "./schemas_0";
import { DBCluster, RdsCustomClusterConfiguration } from "./schemas_18_Cluster";
import { DBSecurityGroupNameList } from "./schemas_57_BInstance";
import { VpcSecurityGroupIdList } from "./schemas_75_Instance";

/* eslint no-var: 0 */

export var BackupPolicyNotFoundFault = error(
  n0,
  _BPNFF,
  {
    [_e]: _c,
    [_hE]: 404,
    [_aQE]: [`BackupPolicyNotFoundFault`, 404],
  },
  [_m],
  [0],

  __BackupPolicyNotFoundFault
);
export var CloudwatchLogsExportConfiguration = struct(n0, _CLEC, 0, [_ELT, _DLT], [64 | 0, 64 | 0]);
export var CreateDBClusterMessage = struct(
  n0,
  _CDBCM,
  0,
  [
    _AZv,
    _BRP,
    _CSN,
    _DN,
    _DBCI,
    _DBCPGN,
    _VSGI,
    _DBSGNu,
    _E,
    _EV,
    _P,
    _MU,
    _MUP,
    _OGN,
    _PBW,
    _PMW,
    _RSI,
    _T,
    _SE,
    _KKI,
    _PSU,
    _EIAMDA,
    _BW,
    _ECLE,
    _EMn,
    _SC,
    _RCCC,
    _DP,
    _GCI,
    _EHE,
    _CTTS,
    _Do,
    _DIAMRN,
    _EGWF,
    _DBCIC,
    _AS,
    _ST,
    _I,
    _PA,
    _AMVU,
    _MI,
    _MRA,
    _DIM,
    _EPI,
    _PIKMSKI,
    _PIRP,
    _ELD,
    _SVSC,
    _NT,
    _CST,
    _DBSI,
    _MMUP,
    _MUSKKI,
    _ELWF,
    _CACI,
    _ELS,
    _MUAT,
  ],
  [
    [() => AvailabilityZones, 0],
    1,
    0,
    0,
    0,
    0,
    [() => VpcSecurityGroupIdList, 0],
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    [() => TagList, 0],
    2,
    0,
    0,
    2,
    1,
    64 | 0,
    0,
    () => ScalingConfiguration,
    () => RdsCustomClusterConfiguration,
    2,
    0,
    2,
    2,
    0,
    0,
    2,
    0,
    1,
    0,
    1,
    2,
    2,
    1,
    0,
    0,
    2,
    0,
    1,
    2,
    () => ServerlessV2ScalingConfiguration,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    0,
    0,
  ]
);
export var CreateDBClusterResult = struct(n0, _CDBCR, 0, [_DBC], [[() => DBCluster, 0]]);
export var CreateDBInstanceMessage = struct(
  n0,
  _CDBIM,
  0,
  [
    _DBN,
    _DBII,
    _AS,
    _DBIC,
    _E,
    _MU,
    _MUP,
    _DBSGe,
    _VSGI,
    _AZ,
    _DBSGNu,
    _PMW,
    _DBPGN,
    _BRP,
    _PBW,
    _P,
    _MAZ,
    _EV,
    _AMVU,
    _LM,
    _I,
    _OGN,
    _CSN,
    _NCSN,
    _PA,
    _T,
    _DBCI,
    _ST,
    _TCA,
    _TCP,
    _SE,
    _KKI,
    _Do,
    _DF,
    _DO,
    _DASA,
    _DDI,
    _CTTS,
    _MI,
    _MRA,
    _DIAMRN,
    _PT,
    _Ti,
    _EIAMDA,
    _DIM,
    _EPI,
    _PIKMSKI,
    _PIRP,
    _ECLE,
    _PF,
    _DP,
    _MAS,
    _ECOI,
    _CIIP,
    _BTa,
    _NT,
    _STt,
    _MMUP,
    _MUSKKI,
    _CACI,
    _DBSI,
    _DLV,
    _MT,
    _ELS,
    _MUAT,
  ],
  [
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    [() => DBSecurityGroupNameList, 0],
    [() => VpcSecurityGroupIdList, 0],
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    2,
    0,
    2,
    0,
    1,
    0,
    0,
    0,
    2,
    [() => TagList, 0],
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    64 | 0,
    2,
    1,
    0,
    0,
    1,
    0,
    2,
    0,
    2,
    0,
    1,
    64 | 0,
    [() => ProcessorFeatureList, 0],
    2,
    1,
    2,
    0,
    0,
    0,
    1,
    2,
    0,
    0,
    0,
    2,
    2,
    0,
    0,
  ]
);
export var CreateDBInstanceReadReplicaMessage = struct(
  n0,
  _CDBIRRM,
  0,
  [
    _DBII,
    _SDBII,
    _DBIC,
    _AZ,
    _P,
    _MAZ,
    _AMVU,
    _I,
    _OGN,
    _DBPGN,
    _PA,
    _T,
    _DBSGNu,
    _VSGI,
    _ST,
    _CTTS,
    _MI,
    _MRA,
    _KKI,
    _PSU,
    _EIAMDA,
    _DIM,
    _EPI,
    _PIKMSKI,
    _PIRP,
    _ECLE,
    _PF,
    _UDPF,
    _DP,
    _Do,
    _DIAMRN,
    _DF,
    _DO,
    _DASA,
    _DDI,
    _RM,
    _MAS,
    _CIIP,
    _NT,
    _STt,
    _ECOI,
    _BTa,
    _AS,
    _SDBCI,
    _DLV,
    _USC,
    _CACI,
  ],
  [
    0,
    0,
    0,
    0,
    1,
    2,
    2,
    1,
    0,
    0,
    2,
    [() => TagList, 0],
    0,
    [() => VpcSecurityGroupIdList, 0],
    0,
    2,
    1,
    0,
    0,
    0,
    2,
    0,
    2,
    0,
    1,
    64 | 0,
    [() => ProcessorFeatureList, 0],
    2,
    2,
    0,
    0,
    0,
    0,
    0,
    64 | 0,
    0,
    1,
    0,
    0,
    1,
    2,
    0,
    1,
    0,
    2,
    2,
    0,
  ]
);
export var CreateDBInstanceReadReplicaResult = struct(n0, _CDBIRRR, 0, [_DBI], [[() => DBInstance, 0]]);
export var CreateDBInstanceResult = struct(n0, _CDBIR, 0, [_DBI], [[() => DBInstance, 0]]);
export var DBClusterAlreadyExistsFault = error(
  n0,
  _DBCAEF,
  {
    [_e]: _c,
    [_hE]: 400,
    [_aQE]: [`DBClusterAlreadyExistsFault`, 400],
  },
  [_m],
  [0],

  __DBClusterAlreadyExistsFault
);
export var DBInstanceAlreadyExistsFault = error(
  n0,
  _DBIAEF,
  {
    [_e]: _c,
    [_hE]: 400,
    [_aQE]: [`DBInstanceAlreadyExists`, 400],
  },
  [_m],
  [0],

  __DBInstanceAlreadyExistsFault
);
export var DBSubnetGroupNotAllowedFault = error(
  n0,
  _DBSGNAF,
  {
    [_e]: _c,
    [_hE]: 400,
    [_aQE]: [`DBSubnetGroupNotAllowedFault`, 400],
  },
  [_m],
  [0],

  __DBSubnetGroupNotAllowedFault
);
export var DBUpgradeDependencyFailureFault = error(
  n0,
  _DBUDFF,
  {
    [_e]: _c,
    [_hE]: 400,
    [_aQE]: [`DBUpgradeDependencyFailure`, 400],
  },
  [_m],
  [0],

  __DBUpgradeDependencyFailureFault
);
export var DomainNotFoundFault = error(
  n0,
  _DNFF,
  {
    [_e]: _c,
    [_hE]: 404,
    [_aQE]: [`DomainNotFoundFault`, 404],
  },
  [_m],
  [0],

  __DomainNotFoundFault
);
export var InsufficientDBClusterCapacityFault = error(
  n0,
  _IDBCCF,
  {
    [_e]: _c,
    [_hE]: 403,
    [_aQE]: [`InsufficientDBClusterCapacityFault`, 403],
  },
  [_m],
  [0],

  __InsufficientDBClusterCapacityFault
);
export var InsufficientStorageClusterCapacityFault = error(
  n0,
  _ISCCF,
  {
    [_e]: _c,
    [_hE]: 400,
    [_aQE]: [`InsufficientStorageClusterCapacity`, 400],
  },
  [_m],
  [0],

  __InsufficientStorageClusterCapacityFault
);
export var InvalidDBSubnetGroupFault = error(
  n0,
  _IDBSGF,
  {
    [_e]: _c,
    [_hE]: 400,
    [_aQE]: [`InvalidDBSubnetGroupFault`, 400],
  },
  [_m],
  [0],

  __InvalidDBSubnetGroupFault
);
export var InvalidRestoreFault = error(
  n0,
  _IRF,
  {
    [_e]: _c,
    [_hE]: 400,
    [_aQE]: [`InvalidRestoreFault`, 400],
  },
  [_m],
  [0],

  __InvalidRestoreFault
);
export var ModifyDBClusterMessage = struct(
  n0,
  _MDBCM,
  0,
  [
    _DBCI,
    _NDBCI,
    _AIp,
    _BRP,
    _DBCPGN,
    _VSGI,
    _P,
    _MUP,
    _OGN,
    _PBW,
    _PMW,
    _EIAMDA,
    _BW,
    _CLEC,
    _EV,
    _AMVUl,
    _DBIPGN,
    _Do,
    _DIAMRN,
    _SC,
    _DP,
    _EHE,
    _CTTS,
    _EGWF,
    _DBCIC,
    _AS,
    _ST,
    _I,
    _AMVU,
    _MI,
    _MRA,
    _DIM,
    _EPI,
    _PIKMSKI,
    _PIRP,
    _SVSC,
    _NT,
    _MMUP,
    _RMUP,
    _MUSKKI,
    _EMn,
    _AEMC,
    _ELWF,
    _ABRPA,
    _ELD,
    _CACI,
    _MUAT,
  ],
  [
    0,
    0,
    2,
    1,
    0,
    [() => VpcSecurityGroupIdList, 0],
    1,
    0,
    0,
    0,
    0,
    2,
    1,
    () => CloudwatchLogsExportConfiguration,
    0,
    2,
    0,
    0,
    0,
    () => ScalingConfiguration,
    2,
    2,
    2,
    2,
    0,
    1,
    0,
    1,
    2,
    1,
    0,
    0,
    2,
    0,
    1,
    () => ServerlessV2ScalingConfiguration,
    0,
    2,
    2,
    0,
    0,
    2,
    2,
    0,
    2,
    0,
    0,
  ]
);
export var ModifyDBClusterResult = struct(n0, _MDBCR, 0, [_DBC], [[() => DBCluster, 0]]);
export var ModifyDBInstanceMessage = struct(
  n0,
  _MDBIM,
  0,
  [
    _DBII,
    _AS,
    _DBIC,
    _DBSGNu,
    _DBSGe,
    _VSGI,
    _AIp,
    _MUP,
    _DBPGN,
    _BRP,
    _PBW,
    _PMW,
    _MAZ,
    _EV,
    _AMVUl,
    _AMVU,
    _LM,
    _I,
    _OGN,
    _NDBII,
    _ST,
    _TCA,
    _TCP,
    _CACI,
    _Do,
    _DF,
    _DO,
    _DASA,
    _DDI,
    _CTTS,
    _MI,
    _DBPNo,
    _PA,
    _MRA,
    _DIAMRN,
    _DD,
    _PT,
    _EIAMDA,
    _DIM,
    _EPI,
    _PIKMSKI,
    _PIRP,
    _CLEC,
    _PF,
    _UDPF,
    _DP,
    _MAS,
    _CRR,
    _RM,
    _ECOI,
    _ABRPA,
    _AM,
    _RFAMM,
    _NT,
    _STt,
    _MMUP,
    _RMUP,
    _MUSKKI,
    _E,
    _DLV,
    _MT,
    _MUAT,
  ],
  [
    0,
    1,
    0,
    0,
    [() => DBSecurityGroupNameList, 0],
    [() => VpcSecurityGroupIdList, 0],
    2,
    0,
    0,
    1,
    0,
    0,
    2,
    0,
    2,
    2,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    64 | 0,
    2,
    1,
    1,
    2,
    0,
    0,
    2,
    1,
    2,
    0,
    2,
    0,
    1,
    () => CloudwatchLogsExportConfiguration,
    [() => ProcessorFeatureList, 0],
    2,
    2,
    1,
    2,
    0,
    2,
    0,
    0,
    1,
    0,
    1,
    2,
    2,
    0,
    0,
    2,
    2,
    0,
  ]
);
export var ModifyDBInstanceResult = struct(n0, _MDBIR, 0, [_DBI], [[() => DBInstance, 0]]);
export var PointInTimeRestoreNotEnabledFault = error(
  n0,
  _PITRNEF,
  {
    [_e]: _c,
    [_hE]: 400,
    [_aQE]: [`PointInTimeRestoreNotEnabled`, 400],
  },
  [_m],
  [0],

  __PointInTimeRestoreNotEnabledFault
);
export var ProvisionedIopsNotAvailableInAZFault = error(
  n0,
  _PINAIAZF,
  {
    [_e]: _c,
    [_hE]: 400,
    [_aQE]: [`ProvisionedIopsNotAvailableInAZFault`, 400],
  },
  [_m],
  [0],

  __ProvisionedIopsNotAvailableInAZFault
);
export var RestoreDBClusterFromS3Message = struct(
  n0,
  _RDBCFSM,
  0,
  [
    _AZv,
    _BRP,
    _CSN,
    _DN,
    _DBCI,
    _DBCPGN,
    _VSGI,
    _DBSGNu,
    _E,
    _EV,
    _P,
    _MU,
    _MUP,
    _OGN,
    _PBW,
    _PMW,
    _T,
    _SE,
    _KKI,
    _EIAMDA,
    _SEo,
    _SEV,
    _SBN,
    _SP,
    _SIRA,
    _BW,
    _ECLE,
    _DP,
    _CTTS,
    _Do,
    _DIAMRN,
    _SVSC,
    _NT,
    _MMUP,
    _MUSKKI,
    _ST,
    _ELS,
  ],
  [
    [() => AvailabilityZones, 0],
    1,
    0,
    0,
    0,
    0,
    [() => VpcSecurityGroupIdList, 0],
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    0,
    [() => TagList, 0],
    2,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    1,
    64 | 0,
    2,
    2,
    0,
    0,
    () => ServerlessV2ScalingConfiguration,
    0,
    2,
    0,
    0,
    0,
  ]
);
export var RestoreDBClusterFromS3Result = struct(n0, _RDBCFSR, 0, [_DBC], [[() => DBCluster, 0]]);
export var RestoreDBClusterFromSnapshotMessage = struct(
  n0,
  _RDBCFSMe,
  0,
  [
    _AZv,
    _DBCI,
    _SIn,
    _E,
    _EV,
    _P,
    _DBSGNu,
    _DN,
    _OGN,
    _VSGI,
    _T,
    _KKI,
    _EIAMDA,
    _BW,
    _ECLE,
    _EMn,
    _SC,
    _DBCPGN,
    _DP,
    _CTTS,
    _Do,
    _DIAMRN,
    _DBCIC,
    _ST,
    _I,
    _PA,
    _SVSC,
    _NT,
    _RCCC,
    _MI,
    _MRA,
    _EPI,
    _PIKMSKI,
    _PIRP,
    _ELS,
  ],
  [
    [() => AvailabilityZones, 0],
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    [() => VpcSecurityGroupIdList, 0],
    [() => TagList, 0],
    0,
    2,
    1,
    64 | 0,
    0,
    () => ScalingConfiguration,
    0,
    2,
    2,
    0,
    0,
    0,
    0,
    1,
    2,
    () => ServerlessV2ScalingConfiguration,
    0,
    () => RdsCustomClusterConfiguration,
    1,
    0,
    2,
    0,
    1,
    0,
  ]
);
export var RestoreDBClusterFromSnapshotResult = struct(n0, _RDBCFSRe, 0, [_DBC], [[() => DBCluster, 0]]);
export var RestoreDBClusterToPointInTimeMessage = struct(
  n0,
  _RDBCTPITM,
  0,
  [
    _DBCI,
    _RT,
    _SDBCI,
    _RTT,
    _ULRT,
    _P,
    _DBSGNu,
    _OGN,
    _VSGI,
    _T,
    _KKI,
    _EIAMDA,
    _BW,
    _ECLE,
    _DBCPGN,
    _DP,
    _CTTS,
    _Do,
    _DIAMRN,
    _SC,
    _EMn,
    _DBCIC,
    _ST,
    _PA,
    _I,
    _SVSC,
    _NT,
    _SDCRI,
    _RCCC,
    _MI,
    _MRA,
    _EPI,
    _PIKMSKI,
    _PIRP,
    _ELS,
  ],
  [
    0,
    0,
    0,
    4,
    2,
    1,
    0,
    0,
    [() => VpcSecurityGroupIdList, 0],
    [() => TagList, 0],
    0,
    2,
    1,
    64 | 0,
    0,
    2,
    2,
    0,
    0,
    () => ScalingConfiguration,
    0,
    0,
    0,
    2,
    1,
    () => ServerlessV2ScalingConfiguration,
    0,
    0,
    () => RdsCustomClusterConfiguration,
    1,
    0,
    2,
    0,
    1,
    0,
  ]
);
export var RestoreDBClusterToPointInTimeResult = struct(n0, _RDBCTPITR, 0, [_DBC], [[() => DBCluster, 0]]);
export var RestoreDBInstanceFromDBSnapshotMessage = struct(
  n0,
  _RDBIFDBSM,
  0,
  [
    _DBII,
    _DBSIn,
    _DBIC,
    _P,
    _AZ,
    _DBSGNu,
    _MAZ,
    _PA,
    _AMVU,
    _LM,
    _DBN,
    _E,
    _I,
    _OGN,
    _T,
    _ST,
    _TCA,
    _TCP,
    _VSGI,
    _Do,
    _DF,
    _DO,
    _DASA,
    _DDI,
    _CTTS,
    _DIAMRN,
    _EIAMDA,
    _ECLE,
    _PF,
    _UDPF,
    _DBPGN,
    _DP,
    _ECOI,
    _CIIP,
    _BTa,
    _NT,
    _STt,
    _DBCSI,
    _AS,
    _DLV,
    _CACI,
    _ELS,
    _MMUP,
    _MUSKKI,
  ],
  [
    0,
    0,
    0,
    1,
    0,
    0,
    2,
    2,
    2,
    0,
    0,
    0,
    1,
    0,
    [() => TagList, 0],
    0,
    0,
    0,
    [() => VpcSecurityGroupIdList, 0],
    0,
    0,
    0,
    0,
    64 | 0,
    2,
    0,
    2,
    64 | 0,
    [() => ProcessorFeatureList, 0],
    2,
    0,
    2,
    2,
    0,
    0,
    0,
    1,
    0,
    1,
    2,
    0,
    0,
    2,
    0,
  ]
);
export var RestoreDBInstanceFromDBSnapshotResult = struct(n0, _RDBIFDBSR, 0, [_DBI], [[() => DBInstance, 0]]);
export var RestoreDBInstanceFromS3Message = struct(
  n0,
  _RDBIFSM,
  0,
  [
    _DBN,
    _DBII,
    _AS,
    _DBIC,
    _E,
    _MU,
    _MUP,
    _DBSGe,
    _VSGI,
    _AZ,
    _DBSGNu,
    _PMW,
    _DBPGN,
    _BRP,
    _PBW,
    _P,
    _MAZ,
    _EV,
    _AMVU,
    _LM,
    _I,
    _OGN,
    _PA,
    _T,
    _ST,
    _SE,
    _KKI,
    _CTTS,
    _MI,
    _MRA,
    _EIAMDA,
    _SEo,
    _SEV,
    _SBN,
    _SP,
    _SIRA,
    _DIM,
    _EPI,
    _PIKMSKI,
    _PIRP,
    _ECLE,
    _PF,
    _UDPF,
    _DP,
    _MAS,
    _NT,
    _STt,
    _MMUP,
    _MUSKKI,
    _DLV,
    _CACI,
    _ELS,
  ],
  [
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    [() => DBSecurityGroupNameList, 0],
    [() => VpcSecurityGroupIdList, 0],
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    [() => TagList, 0],
    0,
    2,
    0,
    2,
    1,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    1,
    64 | 0,
    [() => ProcessorFeatureList, 0],
    2,
    2,
    1,
    0,
    1,
    2,
    0,
    2,
    0,
    0,
  ]
);
export var RestoreDBInstanceFromS3Result = struct(n0, _RDBIFSR, 0, [_DBI], [[() => DBInstance, 0]]);
export var RestoreDBInstanceToPointInTimeMessage = struct(
  n0,
  _RDBITPITM,
  0,
  [
    _SDBII,
    _TDBII,
    _RTe,
    _ULRT,
    _DBIC,
    _P,
    _AZ,
    _DBSGNu,
    _MAZ,
    _PA,
    _AMVU,
    _LM,
    _DBN,
    _E,
    _I,
    _OGN,
    _CTTS,
    _T,
    _ST,
    _TCA,
    _TCP,
    _VSGI,
    _Do,
    _DIAMRN,
    _DF,
    _DO,
    _DASA,
    _DDI,
    _EIAMDA,
    _ECLE,
    _PF,
    _UDPF,
    _DBPGN,
    _DP,
    _SDRI,
    _MAS,
    _SDBIABA,
    _ECOI,
    _CIIP,
    _BTa,
    _NT,
    _STt,
    _AS,
    _DLV,
    _CACI,
    _ELS,
    _MMUP,
    _MUSKKI,
  ],
  [
    0,
    0,
    4,
    2,
    0,
    1,
    0,
    0,
    2,
    2,
    2,
    0,
    0,
    0,
    1,
    0,
    2,
    [() => TagList, 0],
    0,
    0,
    0,
    [() => VpcSecurityGroupIdList, 0],
    0,
    0,
    0,
    0,
    0,
    64 | 0,
    2,
    64 | 0,
    [() => ProcessorFeatureList, 0],
    2,
    0,
    2,
    0,
    1,
    0,
    2,
    0,
    0,
    0,
    1,
    1,
    2,
    0,
    0,
    2,
    0,
  ]
);
export var RestoreDBInstanceToPointInTimeResult = struct(n0, _RDBITPITR, 0, [_DBI], [[() => DBInstance, 0]]);
export var ScalingConfiguration = struct(n0, _SC, 0, [_MC, _MCa, _AP, _SUAP, _TAi, _SBT], [1, 1, 2, 1, 0, 1]);
export var ServerlessV2ScalingConfiguration = struct(n0, _SVSC, 0, [_MC, _MCa, _SUAP], [1, 1, 1]);
export var StorageQuotaExceededFault = error(
  n0,
  _SQEFt,
  {
    [_e]: _c,
    [_hE]: 400,
    [_aQE]: [`StorageQuotaExceeded`, 400],
  },
  [_m],
  [0],

  __StorageQuotaExceededFault
);
export var StorageTypeNotAvailableFault = error(
  n0,
  _STNAF,
  {
    [_e]: _c,
    [_hE]: 400,
    [_aQE]: [`StorageTypeNotAvailableFault`, 400],
  },
  [_m],
  [0],

  __StorageTypeNotAvailableFault
);
export var CreateDBCluster = op(
  n0,
  _CDBC,
  0,
  () => CreateDBClusterMessage,
  () => CreateDBClusterResult
);
export var CreateDBInstance = op(
  n0,
  _CDBI,
  0,
  () => CreateDBInstanceMessage,
  () => CreateDBInstanceResult
);
export var CreateDBInstanceReadReplica = op(
  n0,
  _CDBIRR,
  0,
  () => CreateDBInstanceReadReplicaMessage,
  () => CreateDBInstanceReadReplicaResult
);
export var ModifyDBCluster = op(
  n0,
  _MDBC,
  0,
  () => ModifyDBClusterMessage,
  () => ModifyDBClusterResult
);
export var ModifyDBInstance = op(
  n0,
  _MDBI,
  0,
  () => ModifyDBInstanceMessage,
  () => ModifyDBInstanceResult
);
export var RestoreDBClusterFromS3 = op(
  n0,
  _RDBCFS,
  0,
  () => RestoreDBClusterFromS3Message,
  () => RestoreDBClusterFromS3Result
);
export var RestoreDBClusterFromSnapshot = op(
  n0,
  _RDBCFSe,
  0,
  () => RestoreDBClusterFromSnapshotMessage,
  () => RestoreDBClusterFromSnapshotResult
);
export var RestoreDBClusterToPointInTime = op(
  n0,
  _RDBCTPIT,
  0,
  () => RestoreDBClusterToPointInTimeMessage,
  () => RestoreDBClusterToPointInTimeResult
);
export var RestoreDBInstanceFromDBSnapshot = op(
  n0,
  _RDBIFDBS,
  0,
  () => RestoreDBInstanceFromDBSnapshotMessage,
  () => RestoreDBInstanceFromDBSnapshotResult
);
export var RestoreDBInstanceFromS3 = op(
  n0,
  _RDBIFS,
  0,
  () => RestoreDBInstanceFromS3Message,
  () => RestoreDBInstanceFromS3Result
);
export var RestoreDBInstanceToPointInTime = op(
  n0,
  _RDBITPIT,
  0,
  () => RestoreDBInstanceToPointInTimeMessage,
  () => RestoreDBInstanceToPointInTimeResult
);
