// smithy-typescript generated code
import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";

import { RedshiftDataServiceException as __BaseException } from "./RedshiftDataServiceException";

/**
 * @public
 * <p>The number of active statements exceeds the limit.</p>
 */
export class ActiveStatementsExceededException extends __BaseException {
  readonly name: "ActiveStatementsExceededException" = "ActiveStatementsExceededException";
  readonly $fault: "client" = "client";
  Message?: string;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<ActiveStatementsExceededException, __BaseException>) {
    super({
      name: "ActiveStatementsExceededException",
      $fault: "client",
      ...opts,
    });
    Object.setPrototypeOf(this, ActiveStatementsExceededException.prototype);
    this.Message = opts.Message;
  }
}

/**
 * @public
 * <p>An SQL statement encountered an environmental error while running.</p>
 */
export class BatchExecuteStatementException extends __BaseException {
  readonly name: "BatchExecuteStatementException" = "BatchExecuteStatementException";
  readonly $fault: "server" = "server";
  Message: string | undefined;
  /**
   * @public
   * <p>Statement identifier of the exception.</p>
   */
  StatementId: string | undefined;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<BatchExecuteStatementException, __BaseException>) {
    super({
      name: "BatchExecuteStatementException",
      $fault: "server",
      ...opts,
    });
    Object.setPrototypeOf(this, BatchExecuteStatementException.prototype);
    this.Message = opts.Message;
    this.StatementId = opts.StatementId;
  }
}

/**
 * @public
 */
export interface BatchExecuteStatementInput {
  /**
   * @public
   * <p>One or more SQL statements to run.
   *
   *       The SQL statements are run as a single transaction. They run serially in the order of the array.
   *       Subsequent SQL statements don't start until the previous statement in the array completes.
   *       If any SQL statement fails, then because they are run as one transaction, all work is rolled back.</p>
   */
  Sqls: string[] | undefined;

  /**
   * @public
   * <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
   */
  ClusterIdentifier?: string;

  /**
   * @public
   * <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
   */
  SecretArn?: string;

  /**
   * @public
   * <p>The database user name. This parameter is required when connecting to a cluster as a database user and authenticating using temporary credentials. </p>
   */
  DbUser?: string;

  /**
   * @public
   * <p>The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. </p>
   */
  Database: string | undefined;

  /**
   * @public
   * <p>A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statements run. </p>
   */
  WithEvent?: boolean;

  /**
   * @public
   * <p>The name of the SQL statements. You can name the SQL statements when you create them to identify the query. </p>
   */
  StatementName?: string;

  /**
   * @public
   * <p>The serverless workgroup name or Amazon Resource Name (ARN). This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
   */
  WorkgroupName?: string;

  /**
   * @public
   * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
   */
  ClientToken?: string;
}

/**
 * @public
 */
export interface BatchExecuteStatementOutput {
  /**
   * @public
   * <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
   *       This identifier is returned by <code>BatchExecuteStatment</code>. </p>
   */
  Id?: string;

  /**
   * @public
   * <p>The date and time (UTC) the statement was created. </p>
   */
  CreatedAt?: Date;

  /**
   * @public
   * <p>The cluster identifier. This element is not returned when connecting to a serverless workgroup. </p>
   */
  ClusterIdentifier?: string;

  /**
   * @public
   * <p>The database user name.</p>
   */
  DbUser?: string;

  /**
   * @public
   * <p>The name of the database.</p>
   */
  Database?: string;

  /**
   * @public
   * <p>The name or ARN of the secret that enables access to the database. </p>
   */
  SecretArn?: string;

  /**
   * @public
   * <p>The serverless workgroup name or Amazon Resource Name (ARN). This element is not returned when connecting to a provisioned cluster.</p>
   */
  WorkgroupName?: string;
}

/**
 * @public
 * <p>The Amazon Redshift Data API operation failed due to invalid input. </p>
 */
export class ValidationException extends __BaseException {
  readonly name: "ValidationException" = "ValidationException";
  readonly $fault: "client" = "client";
  /**
   * @public
   * <p>The exception message.</p>
   */
  Message?: string;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts,
    });
    Object.setPrototypeOf(this, ValidationException.prototype);
    this.Message = opts.Message;
  }
}

/**
 * @public
 */
export interface CancelStatementRequest {
  /**
   * @public
   * <p>The identifier of the SQL statement to cancel. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
   *         This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatment</code>, and <code>ListStatements</code>. </p>
   */
  Id: string | undefined;
}

/**
 * @public
 */
export interface CancelStatementResponse {
  /**
   * @public
   * <p>A value that indicates whether the cancel statement succeeded (true). </p>
   */
  Status?: boolean;
}

/**
 * @public
 * <p>Connection to a database failed.</p>
 */
export class DatabaseConnectionException extends __BaseException {
  readonly name: "DatabaseConnectionException" = "DatabaseConnectionException";
  readonly $fault: "server" = "server";
  Message: string | undefined;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<DatabaseConnectionException, __BaseException>) {
    super({
      name: "DatabaseConnectionException",
      $fault: "server",
      ...opts,
    });
    Object.setPrototypeOf(this, DatabaseConnectionException.prototype);
    this.Message = opts.Message;
  }
}

/**
 * @public
 * <p>The Amazon Redshift Data API operation failed due to invalid input. </p>
 */
export class InternalServerException extends __BaseException {
  readonly name: "InternalServerException" = "InternalServerException";
  readonly $fault: "server" = "server";
  /**
   * @public
   * <p>The exception message.</p>
   */
  Message: string | undefined;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts,
    });
    Object.setPrototypeOf(this, InternalServerException.prototype);
    this.Message = opts.Message;
  }
}

/**
 * @public
 * <p>The Amazon Redshift Data API operation failed due to a missing resource. </p>
 */
export class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException" = "ResourceNotFoundException";
  readonly $fault: "client" = "client";
  /**
   * @public
   * <p>The exception message.</p>
   */
  Message: string | undefined;

  /**
   * @public
   * <p>Resource identifier associated with the exception.</p>
   */
  ResourceId: string | undefined;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts,
    });
    Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    this.Message = opts.Message;
    this.ResourceId = opts.ResourceId;
  }
}

/**
 * @public
 * <p>The properties (metadata) of a column. </p>
 */
export interface ColumnMetadata {
  /**
   * @public
   * <p>A value that indicates whether the column is case-sensitive. </p>
   */
  isCaseSensitive?: boolean;

  /**
   * @public
   * <p>A value that indicates whether the column contains currency values.</p>
   */
  isCurrency?: boolean;

  /**
   * @public
   * <p>A value that indicates whether an integer column is signed.</p>
   */
  isSigned?: boolean;

  /**
   * @public
   * <p>The label for the column. </p>
   */
  label?: string;

  /**
   * @public
   * <p>The name of the column. </p>
   */
  name?: string;

  /**
   * @public
   * <p>A value that indicates whether the column is nullable. </p>
   */
  nullable?: number;

  /**
   * @public
   * <p>The precision value of a decimal number column. </p>
   */
  precision?: number;

  /**
   * @public
   * <p>The scale value of a decimal number column. </p>
   */
  scale?: number;

  /**
   * @public
   * <p>The name of the schema that contains the table that includes the column.</p>
   */
  schemaName?: string;

  /**
   * @public
   * <p>The name of the table that includes the column. </p>
   */
  tableName?: string;

  /**
   * @public
   * <p>The database-specific data type of the column. </p>
   */
  typeName?: string;

  /**
   * @public
   * <p>The length of the column.</p>
   */
  length?: number;

  /**
   * @public
   * <p>The default value of the column. </p>
   */
  columnDefault?: string;
}

/**
 * @public
 */
export interface DescribeStatementRequest {
  /**
   * @public
   * <p>The identifier of the SQL statement to describe. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
   *        A suffix indicates the number of the SQL statement.
   *        For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.
   *        This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatement</code>, and <code>ListStatements</code>. </p>
   */
  Id: string | undefined;
}

/**
 * @public
 * <p>A parameter used in a SQL statement.</p>
 */
export interface SqlParameter {
  /**
   * @public
   * <p>The name of the parameter.</p>
   */
  name: string | undefined;

  /**
   * @public
   * <p>The value of the parameter.
   *     Amazon Redshift implicitly converts to the proper data type. For more information, see
   *       <a href="https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html">Data types</a> in the
   *       <i>Amazon Redshift Database Developer Guide</i>. </p>
   */
  value: string | undefined;
}

/**
 * @public
 * @enum
 */
export const StatusString = {
  ABORTED: "ABORTED",
  ALL: "ALL",
  FAILED: "FAILED",
  FINISHED: "FINISHED",
  PICKED: "PICKED",
  STARTED: "STARTED",
  SUBMITTED: "SUBMITTED",
} as const;

/**
 * @public
 */
export type StatusString = (typeof StatusString)[keyof typeof StatusString];

/**
 * @public
 * @enum
 */
export const StatementStatusString = {
  ABORTED: "ABORTED",
  FAILED: "FAILED",
  FINISHED: "FINISHED",
  PICKED: "PICKED",
  STARTED: "STARTED",
  SUBMITTED: "SUBMITTED",
} as const;

/**
 * @public
 */
export type StatementStatusString = (typeof StatementStatusString)[keyof typeof StatementStatusString];

/**
 * @public
 * <p>Information about an SQL statement.</p>
 */
export interface SubStatementData {
  /**
   * @public
   * <p>The identifier of the SQL statement. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
   *       A suffix indicates the number of the SQL statement.
   *       For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.</p>
   */
  Id: string | undefined;

  /**
   * @public
   * <p>The amount of time in nanoseconds that the statement ran.</p>
   */
  Duration?: number;

  /**
   * @public
   * <p>The error message from the cluster if the SQL statement encountered an error while running.</p>
   */
  Error?: string;

  /**
   * @public
   * <p>The status of the SQL statement. An
   *       example is the that the SQL statement finished.
   *       </p>
   */
  Status?: StatementStatusString;

  /**
   * @public
   * <p>The date and time (UTC) the statement was created. </p>
   */
  CreatedAt?: Date;

  /**
   * @public
   * <p>The date and time (UTC) that the statement metadata was last updated.</p>
   */
  UpdatedAt?: Date;

  /**
   * @public
   * <p>The SQL statement text.</p>
   */
  QueryString?: string;

  /**
   * @public
   * <p>Either the number of rows returned from the SQL statement or the number of rows affected.
   *       If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others.
   *       A <code>-1</code> indicates the value is null.</p>
   */
  ResultRows?: number;

  /**
   * @public
   * <p>The size in bytes of the returned results. A <code>-1</code> indicates the value is null.</p>
   */
  ResultSize?: number;

  /**
   * @public
   * <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
   */
  RedshiftQueryId?: number;

  /**
   * @public
   * <p>A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set.</p>
   */
  HasResultSet?: boolean;
}

/**
 * @public
 */
export interface DescribeStatementResponse {
  /**
   * @public
   * <p>The identifier of the SQL statement described. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
   */
  Id: string | undefined;

  /**
   * @public
   * <p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>
   */
  SecretArn?: string;

  /**
   * @public
   * <p>The database user name. </p>
   */
  DbUser?: string;

  /**
   * @public
   * <p>The name of the database. </p>
   */
  Database?: string;

  /**
   * @public
   * <p>The cluster identifier. </p>
   */
  ClusterIdentifier?: string;

  /**
   * @public
   * <p>The amount of time in nanoseconds that the statement ran. </p>
   */
  Duration?: number;

  /**
   * @public
   * <p>The error message from the cluster if the SQL statement encountered an error while running. </p>
   */
  Error?: string;

  /**
   * @public
   * <p>The status of the SQL statement being described. Status values are defined as follows: </p>
   *          <ul>
   *             <li>
   *                <p>ABORTED - The query run was stopped by the user. </p>
   *             </li>
   *             <li>
   *                <p>ALL -  A status value that includes all query statuses. This value can be used to filter results. </p>
   *             </li>
   *             <li>
   *                <p>FAILED - The query run failed. </p>
   *             </li>
   *             <li>
   *                <p>FINISHED - The query has finished running. </p>
   *             </li>
   *             <li>
   *                <p>PICKED - The query has been chosen to be run. </p>
   *             </li>
   *             <li>
   *                <p>STARTED - The query run has started. </p>
   *             </li>
   *             <li>
   *                <p>SUBMITTED - The query was submitted, but not yet processed. </p>
   *             </li>
   *          </ul>
   */
  Status?: StatusString;

  /**
   * @public
   * <p>The date and time (UTC) when the SQL statement was submitted to run. </p>
   */
  CreatedAt?: Date;

  /**
   * @public
   * <p>The date and time (UTC) that the metadata for the SQL statement was last updated. An
   *       example is the time the status last changed. </p>
   */
  UpdatedAt?: Date;

  /**
   * @public
   * <p>The process identifier from Amazon Redshift. </p>
   */
  RedshiftPid?: number;

  /**
   * @public
   * <p>A value that indicates whether the statement has a result set. The result set can be empty. The value is true for an empty result set.
   *       The value is true if any substatement returns a result set.</p>
   */
  HasResultSet?: boolean;

  /**
   * @public
   * <p>The SQL statement text. </p>
   */
  QueryString?: string;

  /**
   * @public
   * <p>Either the number of rows returned from the SQL statement or the number of rows affected.
   *         If result size is greater than zero, the result rows can be the number of rows affected by SQL statements such as INSERT, UPDATE, DELETE, COPY, and others.
   *         A <code>-1</code> indicates the value is null.</p>
   */
  ResultRows?: number;

  /**
   * @public
   * <p>The size in bytes of the returned results. A <code>-1</code> indicates the value is null.</p>
   */
  ResultSize?: number;

  /**
   * @public
   * <p>The identifier of the query generated by Amazon Redshift.
   *       These identifiers are also available in the <code>query</code> column of the <code>STL_QUERY</code> system view. </p>
   */
  RedshiftQueryId?: number;

  /**
   * @public
   * <p>The parameters for the SQL statement.</p>
   */
  QueryParameters?: SqlParameter[];

  /**
   * @public
   * <p>The SQL statements from a multiple statement run.</p>
   */
  SubStatements?: SubStatementData[];

  /**
   * @public
   * <p>The serverless workgroup name or Amazon Resource Name (ARN).</p>
   */
  WorkgroupName?: string;
}

/**
 * @public
 */
export interface DescribeTableRequest {
  /**
   * @public
   * <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
   */
  ClusterIdentifier?: string;

  /**
   * @public
   * <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
   */
  SecretArn?: string;

  /**
   * @public
   * <p>The database user name. This parameter is required when connecting to a cluster as a database user and authenticating using temporary credentials. </p>
   */
  DbUser?: string;

  /**
   * @public
   * <p>The name of the database that contains the tables to be described.
   *       If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
   */
  Database: string | undefined;

  /**
   * @public
   * <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
   */
  ConnectedDatabase?: string;

  /**
   * @public
   * <p>The schema that contains the table. If no schema is specified, then matching tables for all schemas are returned. </p>
   */
  Schema?: string;

  /**
   * @public
   * <p>The table name. If no table is specified, then all tables for all matching schemas are returned.
   *        If no table and no schema is specified, then all tables for all schemas in the database are returned</p>
   */
  Table?: string;

  /**
   * @public
   * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
   */
  NextToken?: string;

  /**
   * @public
   * <p>The maximum number of tables to return in the response.
   *       If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
   */
  MaxResults?: number;

  /**
   * @public
   * <p>The serverless workgroup name or Amazon Resource Name (ARN). This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
   */
  WorkgroupName?: string;
}

/**
 * @public
 */
export interface DescribeTableResponse {
  /**
   * @public
   * <p>The table name. </p>
   */
  TableName?: string;

  /**
   * @public
   * <p>A list of columns in the table. </p>
   */
  ColumnList?: ColumnMetadata[];

  /**
   * @public
   * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
   */
  NextToken?: string;
}

/**
 * @public
 * <p>The SQL statement encountered an environmental error while running.</p>
 */
export class ExecuteStatementException extends __BaseException {
  readonly name: "ExecuteStatementException" = "ExecuteStatementException";
  readonly $fault: "server" = "server";
  /**
   * @public
   * <p>The exception message.</p>
   */
  Message: string | undefined;

  /**
   * @public
   * <p>Statement identifier of the exception.</p>
   */
  StatementId: string | undefined;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<ExecuteStatementException, __BaseException>) {
    super({
      name: "ExecuteStatementException",
      $fault: "server",
      ...opts,
    });
    Object.setPrototypeOf(this, ExecuteStatementException.prototype);
    this.Message = opts.Message;
    this.StatementId = opts.StatementId;
  }
}

/**
 * @public
 */
export interface ExecuteStatementInput {
  /**
   * @public
   * <p>The SQL statement text to run. </p>
   */
  Sql: string | undefined;

  /**
   * @public
   * <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
   */
  ClusterIdentifier?: string;

  /**
   * @public
   * <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
   */
  SecretArn?: string;

  /**
   * @public
   * <p>The database user name. This parameter is required when connecting to a cluster as a database user and authenticating using temporary credentials. </p>
   */
  DbUser?: string;

  /**
   * @public
   * <p>The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. </p>
   */
  Database: string | undefined;

  /**
   * @public
   * <p>A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs. </p>
   */
  WithEvent?: boolean;

  /**
   * @public
   * <p>The name of the SQL statement. You can name the SQL statement when you create it to identify the query. </p>
   */
  StatementName?: string;

  /**
   * @public
   * <p>The parameters for the SQL statement.</p>
   */
  Parameters?: SqlParameter[];

  /**
   * @public
   * <p>The serverless workgroup name or Amazon Resource Name (ARN). This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
   */
  WorkgroupName?: string;

  /**
   * @public
   * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
   */
  ClientToken?: string;
}

/**
 * @public
 */
export interface ExecuteStatementOutput {
  /**
   * @public
   * <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
   */
  Id?: string;

  /**
   * @public
   * <p>The date and time (UTC) the statement was created. </p>
   */
  CreatedAt?: Date;

  /**
   * @public
   * <p>The cluster identifier. This element is not returned when connecting to a serverless workgroup. </p>
   */
  ClusterIdentifier?: string;

  /**
   * @public
   * <p>The database user name.</p>
   */
  DbUser?: string;

  /**
   * @public
   * <p>The name of the database.</p>
   */
  Database?: string;

  /**
   * @public
   * <p>The name or ARN of the secret that enables access to the database. </p>
   */
  SecretArn?: string;

  /**
   * @public
   * <p>The serverless workgroup name or Amazon Resource Name (ARN). This element is not returned when connecting to a provisioned cluster.</p>
   */
  WorkgroupName?: string;
}

/**
 * @public
 * <p>A data value in a column. </p>
 */
export type Field =
  | Field.BlobValueMember
  | Field.BooleanValueMember
  | Field.DoubleValueMember
  | Field.IsNullMember
  | Field.LongValueMember
  | Field.StringValueMember
  | Field.$UnknownMember;

/**
 * @public
 */
export namespace Field {
  /**
   * @public
   * <p>A value that indicates whether the data is NULL. </p>
   */
  export interface IsNullMember {
    isNull: boolean;
    booleanValue?: never;
    longValue?: never;
    doubleValue?: never;
    stringValue?: never;
    blobValue?: never;
    $unknown?: never;
  }

  /**
   * @public
   * <p>A value of the Boolean data type. </p>
   */
  export interface BooleanValueMember {
    isNull?: never;
    booleanValue: boolean;
    longValue?: never;
    doubleValue?: never;
    stringValue?: never;
    blobValue?: never;
    $unknown?: never;
  }

  /**
   * @public
   * <p>A value of the long data type. </p>
   */
  export interface LongValueMember {
    isNull?: never;
    booleanValue?: never;
    longValue: number;
    doubleValue?: never;
    stringValue?: never;
    blobValue?: never;
    $unknown?: never;
  }

  /**
   * @public
   * <p>A value of the double data type. </p>
   */
  export interface DoubleValueMember {
    isNull?: never;
    booleanValue?: never;
    longValue?: never;
    doubleValue: number;
    stringValue?: never;
    blobValue?: never;
    $unknown?: never;
  }

  /**
   * @public
   * <p>A value of the string data type. </p>
   */
  export interface StringValueMember {
    isNull?: never;
    booleanValue?: never;
    longValue?: never;
    doubleValue?: never;
    stringValue: string;
    blobValue?: never;
    $unknown?: never;
  }

  /**
   * @public
   * <p>A value of the BLOB data type. </p>
   */
  export interface BlobValueMember {
    isNull?: never;
    booleanValue?: never;
    longValue?: never;
    doubleValue?: never;
    stringValue?: never;
    blobValue: Uint8Array;
    $unknown?: never;
  }

  /**
   * @public
   */
  export interface $UnknownMember {
    isNull?: never;
    booleanValue?: never;
    longValue?: never;
    doubleValue?: never;
    stringValue?: never;
    blobValue?: never;
    $unknown: [string, any];
  }

  export interface Visitor<T> {
    isNull: (value: boolean) => T;
    booleanValue: (value: boolean) => T;
    longValue: (value: number) => T;
    doubleValue: (value: number) => T;
    stringValue: (value: string) => T;
    blobValue: (value: Uint8Array) => T;
    _: (name: string, value: any) => T;
  }

  export const visit = <T>(value: Field, visitor: Visitor<T>): T => {
    if (value.isNull !== undefined) return visitor.isNull(value.isNull);
    if (value.booleanValue !== undefined) return visitor.booleanValue(value.booleanValue);
    if (value.longValue !== undefined) return visitor.longValue(value.longValue);
    if (value.doubleValue !== undefined) return visitor.doubleValue(value.doubleValue);
    if (value.stringValue !== undefined) return visitor.stringValue(value.stringValue);
    if (value.blobValue !== undefined) return visitor.blobValue(value.blobValue);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
}

/**
 * @public
 */
export interface GetStatementResultRequest {
  /**
   * @public
   * <p>The identifier of the SQL statement whose results are to be fetched. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API.
   *        A suffix indicates then number of the SQL statement.
   *        For example, <code>d9b6c0c9-0747-4bf4-b142-e8883122f766:2</code> has a suffix of <code>:2</code> that indicates the second SQL statement of a batch query.
   *        This identifier is returned by <code>BatchExecuteStatment</code>, <code>ExecuteStatment</code>, and <code>ListStatements</code>. </p>
   */
  Id: string | undefined;

  /**
   * @public
   * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
   */
  NextToken?: string;
}

/**
 * @public
 */
export interface GetStatementResultResponse {
  /**
   * @public
   * <p>The results of the SQL statement.</p>
   */
  Records: Field[][] | undefined;

  /**
   * @public
   * <p>The properties (metadata) of a column. </p>
   */
  ColumnMetadata?: ColumnMetadata[];

  /**
   * @public
   * <p>The total number of rows in the result set returned from a query.
   *        You can use this number to estimate the number of calls to the <code>GetStatementResult</code> operation needed to page through the results. </p>
   */
  TotalNumRows?: number;

  /**
   * @public
   * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
   */
  NextToken?: string;
}

/**
 * @public
 */
export interface ListDatabasesRequest {
  /**
   * @public
   * <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
   */
  ClusterIdentifier?: string;

  /**
   * @public
   * <p>The name of the database. This parameter is required when authenticating using either Secrets Manager or temporary credentials. </p>
   */
  Database: string | undefined;

  /**
   * @public
   * <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
   */
  SecretArn?: string;

  /**
   * @public
   * <p>The database user name. This parameter is required when connecting to a cluster as a database user and authenticating using temporary credentials. </p>
   */
  DbUser?: string;

  /**
   * @public
   * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
   */
  NextToken?: string;

  /**
   * @public
   * <p>The maximum number of databases to return in the response.
   *        If more databases exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
   */
  MaxResults?: number;

  /**
   * @public
   * <p>The serverless workgroup name or Amazon Resource Name (ARN). This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
   */
  WorkgroupName?: string;
}

/**
 * @public
 */
export interface ListDatabasesResponse {
  /**
   * @public
   * <p>The names of databases. </p>
   */
  Databases?: string[];

  /**
   * @public
   * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
   */
  NextToken?: string;
}

/**
 * @public
 */
export interface ListSchemasRequest {
  /**
   * @public
   * <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
   */
  ClusterIdentifier?: string;

  /**
   * @public
   * <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
   */
  SecretArn?: string;

  /**
   * @public
   * <p>The database user name. This parameter is required when connecting to a cluster as a database user and authenticating using temporary credentials. </p>
   */
  DbUser?: string;

  /**
   * @public
   * <p>The name of the database that contains the schemas to list.
   *      If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
   */
  Database: string | undefined;

  /**
   * @public
   * <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
   */
  ConnectedDatabase?: string;

  /**
   * @public
   * <p>A pattern to filter results by schema name. Within a schema pattern, "%" means match any
   *       substring of 0 or more characters and "_" means match any one character. Only schema name
   *       entries matching the search pattern are returned. </p>
   */
  SchemaPattern?: string;

  /**
   * @public
   * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
   */
  NextToken?: string;

  /**
   * @public
   * <p>The maximum number of schemas to return in the response.
   *        If more schemas exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
   */
  MaxResults?: number;

  /**
   * @public
   * <p>The serverless workgroup name or Amazon Resource Name (ARN). This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
   */
  WorkgroupName?: string;
}

/**
 * @public
 */
export interface ListSchemasResponse {
  /**
   * @public
   * <p>The schemas that match the request pattern. </p>
   */
  Schemas?: string[];

  /**
   * @public
   * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
   */
  NextToken?: string;
}

/**
 * @public
 */
export interface ListStatementsRequest {
  /**
   * @public
   * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
   */
  NextToken?: string;

  /**
   * @public
   * <p>The maximum number of SQL statements to return in the response.
   *        If more SQL statements exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
   */
  MaxResults?: number;

  /**
   * @public
   * <p>The name of the SQL statement specified as input to <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> to identify the query.
   *       You can list multiple statements by providing a prefix that matches the beginning of the statement name.
   *       For example, to list myStatement1, myStatement2, myStatement3, and so on, then provide the a value of <code>myStatement</code>.
   *       Data API does a case-sensitive match of SQL statement names to the prefix value you provide. </p>
   */
  StatementName?: string;

  /**
   * @public
   * <p>The status of the SQL statement to list. Status values are defined as follows: </p>
   *          <ul>
   *             <li>
   *                <p>ABORTED - The query run was stopped by the user. </p>
   *             </li>
   *             <li>
   *                <p>ALL -  A status value that includes all query statuses. This value can be used to filter results. </p>
   *             </li>
   *             <li>
   *                <p>FAILED - The query run failed. </p>
   *             </li>
   *             <li>
   *                <p>FINISHED - The query has finished running. </p>
   *             </li>
   *             <li>
   *                <p>PICKED - The query has been chosen to be run. </p>
   *             </li>
   *             <li>
   *                <p>STARTED - The query run has started. </p>
   *             </li>
   *             <li>
   *                <p>SUBMITTED - The query was submitted, but not yet processed. </p>
   *             </li>
   *          </ul>
   */
  Status?: StatusString;

  /**
   * @public
   * <p>A value that filters which statements to return in the response. If true, all statements run by the caller's IAM role are returned.
   *       If false, only statements run by the caller's IAM role in the current IAM session are returned.  The default is true. </p>
   */
  RoleLevel?: boolean;
}

/**
 * @public
 * <p>The SQL statement to run.</p>
 */
export interface StatementData {
  /**
   * @public
   * <p>The SQL statement identifier. This value is a universally unique identifier (UUID) generated by Amazon Redshift Data API. </p>
   */
  Id: string | undefined;

  /**
   * @public
   * <p>The SQL statement.</p>
   */
  QueryString?: string;

  /**
   * @public
   * <p>One or more SQL statements. Each query string in the array corresponds to one of the queries in a batch query request.</p>
   */
  QueryStrings?: string[];

  /**
   * @public
   * <p>The name or Amazon Resource Name (ARN) of the secret that enables access to the database. </p>
   */
  SecretArn?: string;

  /**
   * @public
   * <p>The status of the SQL statement. An
   *        example is the that the SQL statement finished.
   *       </p>
   */
  Status?: StatusString;

  /**
   * @public
   * <p>The name of the SQL statement. </p>
   */
  StatementName?: string;

  /**
   * @public
   * <p>The date and time (UTC) the statement was created. </p>
   */
  CreatedAt?: Date;

  /**
   * @public
   * <p>The date and time (UTC) that the statement metadata was last updated.</p>
   */
  UpdatedAt?: Date;

  /**
   * @public
   * <p>The parameters used in a SQL statement.</p>
   */
  QueryParameters?: SqlParameter[];

  /**
   * @public
   * <p>A value that indicates whether the statement is a batch query request.</p>
   */
  IsBatchStatement?: boolean;
}

/**
 * @public
 */
export interface ListStatementsResponse {
  /**
   * @public
   * <p>The SQL statements. </p>
   */
  Statements: StatementData[] | undefined;

  /**
   * @public
   * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
   */
  NextToken?: string;
}

/**
 * @public
 */
export interface ListTablesRequest {
  /**
   * @public
   * <p>The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials. </p>
   */
  ClusterIdentifier?: string;

  /**
   * @public
   * <p>The name or ARN of the secret that enables access to the database. This parameter is required when authenticating using Secrets Manager. </p>
   */
  SecretArn?: string;

  /**
   * @public
   * <p>The database user name. This parameter is required when connecting to a cluster as a database user and authenticating using temporary credentials. </p>
   */
  DbUser?: string;

  /**
   * @public
   * <p>The name of the database that contains the tables to list.
   *       If <code>ConnectedDatabase</code> is not specified, this is also the database to connect to with your authentication credentials.</p>
   */
  Database: string | undefined;

  /**
   * @public
   * <p>A database name. The connected database is specified when you connect with your authentication credentials. </p>
   */
  ConnectedDatabase?: string;

  /**
   * @public
   * <p>A pattern to filter results by schema name. Within a schema pattern, "%" means match any
   *       substring of 0 or more characters and "_" means match any one character. Only schema name
   *       entries matching the search pattern are returned. If <code>SchemaPattern</code> is not specified, then all tables that match
   *        <code>TablePattern</code> are returned.
   *        If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. </p>
   */
  SchemaPattern?: string;

  /**
   * @public
   * <p>A pattern to filter results by table name. Within a table pattern, "%" means match any
   *       substring of 0 or more characters and "_" means match any one character. Only table name
   *       entries matching the search pattern are returned. If <code>TablePattern</code> is not specified, then all tables that match
   *        <code>SchemaPattern</code>are returned.
   *        If neither <code>SchemaPattern</code> or <code>TablePattern</code> are specified, then all tables are returned. </p>
   */
  TablePattern?: string;

  /**
   * @public
   * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
   */
  NextToken?: string;

  /**
   * @public
   * <p>The maximum number of tables to return in the response.
   *        If more tables exist than fit in one response, then <code>NextToken</code> is returned to page through the results. </p>
   */
  MaxResults?: number;

  /**
   * @public
   * <p>The serverless workgroup name or Amazon Resource Name (ARN). This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.</p>
   */
  WorkgroupName?: string;
}

/**
 * @public
 * <p>The properties of a table. </p>
 */
export interface TableMember {
  /**
   * @public
   * <p>The name of the table. </p>
   */
  name?: string;

  /**
   * @public
   * <p>The type of the table. Possible values include TABLE, VIEW, SYSTEM TABLE, GLOBAL
   *       TEMPORARY, LOCAL TEMPORARY, ALIAS, and SYNONYM. </p>
   */
  type?: string;

  /**
   * @public
   * <p>The schema containing the table. </p>
   */
  schema?: string;
}

/**
 * @public
 */
export interface ListTablesResponse {
  /**
   * @public
   * <p>The tables that match the request pattern. </p>
   */
  Tables?: TableMember[];

  /**
   * @public
   * <p>A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned NextToken value in the next NextToken parameter and retrying the command. If the NextToken field is empty, all response records have been retrieved for the request. </p>
   */
  NextToken?: string;
}
