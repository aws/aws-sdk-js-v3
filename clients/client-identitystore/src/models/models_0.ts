// smithy-typescript generated code
import { ExceptionOptionType as __ExceptionOptionType, SENSITIVE_STRING } from "@smithy/smithy-client";

import { DocumentType as __DocumentType } from "@smithy/types";

import { IdentitystoreServiceException as __BaseException } from "./IdentitystoreServiceException";

/**
 * <p>You do not have sufficient access to perform this action.</p>
 * @public
 */
export class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException" = "AccessDeniedException";
  readonly $fault: "client" = "client";
  Message?: string;
  /**
   * <p>The identifier for each request. This value is a globally unique ID that is generated by
   *          the identity store service for each sent request, and is then returned inside the exception
   *          if the request fails.</p>
   * @public
   */
  RequestId?: string;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts,
    });
    Object.setPrototypeOf(this, AccessDeniedException.prototype);
    this.Message = opts.Message;
    this.RequestId = opts.RequestId;
  }
}

/**
 * <p>The address associated with the specified user.</p>
 * @public
 */
export interface Address {
  /**
   * <p>The
   *          street
   *          of the address.</p>
   * @public
   */
  StreetAddress?: string;

  /**
   * <p>A string of the address locality.</p>
   * @public
   */
  Locality?: string;

  /**
   * <p>The
   *          region
   *          of the address.</p>
   * @public
   */
  Region?: string;

  /**
   * <p>The postal code of the address.</p>
   * @public
   */
  PostalCode?: string;

  /**
   * <p>The country of the address.</p>
   * @public
   */
  Country?: string;

  /**
   * <p>A string containing a formatted version of the address for display.</p>
   * @public
   */
  Formatted?: string;

  /**
   * <p>A string representing the type of address. For example, "Home."</p>
   * @public
   */
  Type?: string;

  /**
   * <p>A Boolean value representing whether this is the primary address for the associated
   *          resource.</p>
   * @public
   */
  Primary?: boolean;
}

/**
 * <p>The identifier issued to this resource by an external identity provider.</p>
 * @public
 */
export interface ExternalId {
  /**
   * <p>The issuer for an external identifier.</p>
   * @public
   */
  Issuer: string | undefined;

  /**
   * <p>The identifier issued to this resource by an external identity provider.</p>
   * @public
   */
  Id: string | undefined;
}

/**
 * <p>An entity attribute that's unique to a specific entity.</p>
 * @public
 */
export interface UniqueAttribute {
  /**
   * <p>A string representation of the path to a given attribute or sub-attribute. Supports
   *          JMESPath.</p>
   * @public
   */
  AttributePath: string | undefined;

  /**
   * <p>The value of the attribute. This is a <code>Document</code> type.
   *          This type is not supported by Java V1, Go V1, and older versions of the CLI.</p>
   * @public
   */
  AttributeValue: __DocumentType | undefined;
}

/**
 * <p>A unique identifier for a user or group that is not the primary identifier. This value can be
 *          an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute.</p>
 * @public
 */
export type AlternateIdentifier =
  | AlternateIdentifier.ExternalIdMember
  | AlternateIdentifier.UniqueAttributeMember
  | AlternateIdentifier.$UnknownMember;

/**
 * @public
 */
export namespace AlternateIdentifier {
  /**
   * <p>The identifier issued to this resource by an external identity provider.</p>
   * @public
   */
  export interface ExternalIdMember {
    ExternalId: ExternalId;
    UniqueAttribute?: never;
    $unknown?: never;
  }

  /**
   * <p>An entity attribute that's unique to a specific entity.</p>
   * @public
   */
  export interface UniqueAttributeMember {
    ExternalId?: never;
    UniqueAttribute: UniqueAttribute;
    $unknown?: never;
  }

  /**
   * @public
   */
  export interface $UnknownMember {
    ExternalId?: never;
    UniqueAttribute?: never;
    $unknown: [string, any];
  }

  export interface Visitor<T> {
    ExternalId: (value: ExternalId) => T;
    UniqueAttribute: (value: UniqueAttribute) => T;
    _: (name: string, value: any) => T;
  }

  export const visit = <T>(value: AlternateIdentifier, visitor: Visitor<T>): T => {
    if (value.ExternalId !== undefined) return visitor.ExternalId(value.ExternalId);
    if (value.UniqueAttribute !== undefined) return visitor.UniqueAttribute(value.UniqueAttribute);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
}

/**
 * <p>An operation that applies to the requested group. This operation might add, replace, or remove an attribute.</p>
 * @public
 */
export interface AttributeOperation {
  /**
   * <p>A string representation of the path to a given attribute or sub-attribute. Supports
   *          JMESPath.</p>
   * @public
   */
  AttributePath: string | undefined;

  /**
   * <p>The value of the attribute. This is a <code>Document</code> type.
   *          This type is not supported by Java V1, Go V1, and older versions of the CLI.</p>
   * @public
   */
  AttributeValue?: __DocumentType;
}

/**
 * @public
 */
export interface GetGroupIdRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>A unique identifier for a user or group that is not the primary identifier. This value can be
   *          an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For the unique attribute, the only valid path is <code>displayName</code>.</p>
   * @public
   */
  AlternateIdentifier: AlternateIdentifier | undefined;
}

/**
 * @public
 */
export interface GetGroupIdResponse {
  /**
   * <p>The identifier for a group in the identity store.</p>
   * @public
   */
  GroupId: string | undefined;

  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;
}

/**
 * <p>The request processing has failed because of an unknown error, exception or failure with an internal server.</p>
 * @public
 */
export class InternalServerException extends __BaseException {
  readonly name: "InternalServerException" = "InternalServerException";
  readonly $fault: "server" = "server";
  $retryable = {};
  Message?: string;
  /**
   * <p>The identifier for each request. This value is a globally unique ID that is generated by
   *          the identity store service for each sent request, and is then returned inside the exception
   *          if the request fails.</p>
   * @public
   */
  RequestId?: string;

  /**
   * <p>The number of seconds to wait before retrying the next request.</p>
   * @public
   */
  RetryAfterSeconds?: number;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>) {
    super({
      name: "InternalServerException",
      $fault: "server",
      ...opts,
    });
    Object.setPrototypeOf(this, InternalServerException.prototype);
    this.Message = opts.Message;
    this.RequestId = opts.RequestId;
    this.RetryAfterSeconds = opts.RetryAfterSeconds;
  }
}

/**
 * @public
 * @enum
 */
export const ResourceType = {
  GROUP: "GROUP",
  GROUP_MEMBERSHIP: "GROUP_MEMBERSHIP",
  IDENTITY_STORE: "IDENTITY_STORE",
  USER: "USER",
} as const;

/**
 * @public
 */
export type ResourceType = (typeof ResourceType)[keyof typeof ResourceType];

/**
 * <p>Indicates that a requested resource is not found.</p>
 * @public
 */
export class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException" = "ResourceNotFoundException";
  readonly $fault: "client" = "client";
  /**
   * <p>An enum object indicating the type of resource in the identity store service. Valid values include USER, GROUP, and IDENTITY_STORE.</p>
   * @public
   */
  ResourceType?: ResourceType;

  /**
   * <p>The identifier for a resource in the identity store that can be used as <code>UserId</code> or <code>GroupId</code>. The format for <code>ResourceId</code> is either <code>UUID</code> or <code>1234567890-UUID</code>, where <code>UUID</code> is a randomly generated value for each resource when it is created and <code>1234567890</code> represents the <code>IdentityStoreId</code> string value. In the case that the identity store is migrated from a legacy SSO identity store, the <code>ResourceId</code> for that identity store will be in the format of <code>UUID</code>. Otherwise, it will be in the <code>1234567890-UUID</code> format.</p>
   * @public
   */
  ResourceId?: string;

  Message?: string;
  /**
   * <p>The identifier for each request. This value is a globally unique ID that is generated by
   *          the identity store service for each sent request, and is then returned inside the exception
   *          if the request fails.</p>
   * @public
   */
  RequestId?: string;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts,
    });
    Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    this.ResourceType = opts.ResourceType;
    this.ResourceId = opts.ResourceId;
    this.Message = opts.Message;
    this.RequestId = opts.RequestId;
  }
}

/**
 * <p>Indicates that the principal has crossed the throttling limits of the API operations.</p>
 * @public
 */
export class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException" = "ThrottlingException";
  readonly $fault: "client" = "client";
  $retryable = {
    throttling: true,
  };
  Message?: string;
  /**
   * <p>The identifier for each request. This value is a globally unique ID that is generated by
   *          the identity store service for each sent request, and is then returned inside the exception
   *          if the request fails.</p>
   * @public
   */
  RequestId?: string;

  /**
   * <p>The number of seconds to wait before retrying the next request.</p>
   * @public
   */
  RetryAfterSeconds?: number;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts,
    });
    Object.setPrototypeOf(this, ThrottlingException.prototype);
    this.Message = opts.Message;
    this.RequestId = opts.RequestId;
    this.RetryAfterSeconds = opts.RetryAfterSeconds;
  }
}

/**
 * <p>The request failed because it contains a syntax error.</p>
 * @public
 */
export class ValidationException extends __BaseException {
  readonly name: "ValidationException" = "ValidationException";
  readonly $fault: "client" = "client";
  Message?: string;
  /**
   * <p>The identifier for each request. This value is a globally unique ID that is generated by
   *          the identity store service for each sent request, and is then returned inside the exception
   *          if the request fails.</p>
   * @public
   */
  RequestId?: string;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts,
    });
    Object.setPrototypeOf(this, ValidationException.prototype);
    this.Message = opts.Message;
    this.RequestId = opts.RequestId;
  }
}

/**
 * <p>An object containing the identifier of a group member.</p>
 * @public
 */
export type MemberId = MemberId.UserIdMember | MemberId.$UnknownMember;

/**
 * @public
 */
export namespace MemberId {
  /**
   * <p>An object containing the identifiers of resources that can be members.</p>
   * @public
   */
  export interface UserIdMember {
    UserId: string;
    $unknown?: never;
  }

  /**
   * @public
   */
  export interface $UnknownMember {
    UserId?: never;
    $unknown: [string, any];
  }

  export interface Visitor<T> {
    UserId: (value: string) => T;
    _: (name: string, value: any) => T;
  }

  export const visit = <T>(value: MemberId, visitor: Visitor<T>): T => {
    if (value.UserId !== undefined) return visitor.UserId(value.UserId);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  };
}

/**
 * @public
 */
export interface GetGroupMembershipIdRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The identifier for a group in the identity store.</p>
   * @public
   */
  GroupId: string | undefined;

  /**
   * <p>An object that contains the identifier of a group member. Setting the <code>UserID</code> field to the specific identifier for a user indicates that the user is a member of the group.</p>
   * @public
   */
  MemberId: MemberId | undefined;
}

/**
 * @public
 */
export interface GetGroupMembershipIdResponse {
  /**
   * <p>The identifier for a <code>GroupMembership</code> in an identity store.</p>
   * @public
   */
  MembershipId: string | undefined;

  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;
}

/**
 * @public
 */
export interface GetUserIdRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>A unique identifier for a user or group that is not the primary identifier. This value can be
   *          an identifier from an external identity provider (IdP) that is associated with the user, the group, or a unique attribute. For the unique attribute, the only valid paths are <code>userName</code> and <code>emails.value</code>.</p>
   * @public
   */
  AlternateIdentifier: AlternateIdentifier | undefined;
}

/**
 * @public
 */
export interface GetUserIdResponse {
  /**
   * <p>The identifier for a user in the identity store.</p>
   * @public
   */
  UserId: string | undefined;

  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;
}

/**
 * @public
 * @enum
 */
export const ConflictExceptionReason = {
  CONCURRENT_MODIFICATION: "CONCURRENT_MODIFICATION",
  UNIQUENESS_CONSTRAINT_VIOLATION: "UNIQUENESS_CONSTRAINT_VIOLATION",
} as const;

/**
 * @public
 */
export type ConflictExceptionReason = (typeof ConflictExceptionReason)[keyof typeof ConflictExceptionReason];

/**
 * <p>This request cannot be completed for one of the following reasons:</p>
 *          <ul>
 *             <li>
 *                <p>Performing the requested operation would violate an existing uniqueness claim in the identity store. Resolve the conflict before retrying this request.</p>
 *             </li>
 *             <li>
 *                <p>The requested resource was being concurrently modified by another request.</p>
 *             </li>
 *          </ul>
 * @public
 */
export class ConflictException extends __BaseException {
  readonly name: "ConflictException" = "ConflictException";
  readonly $fault: "client" = "client";
  Message?: string;
  /**
   * <p>The identifier for each request. This value is a globally unique ID that is generated by the identity store service for each sent request, and is then returned inside the exception if the request fails.</p>
   * @public
   */
  RequestId?: string;

  /**
   * <p>This request cannot be completed for one of the following reasons:</p>
   *          <ul>
   *             <li>
   *                <p>Performing the requested operation would violate an existing uniqueness claim in the identity store. Resolve the conflict before retrying this request.</p>
   *             </li>
   *             <li>
   *                <p>The requested resource was being concurrently modified by another request.</p>
   *             </li>
   *          </ul>
   * @public
   */
  Reason?: ConflictExceptionReason;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts,
    });
    Object.setPrototypeOf(this, ConflictException.prototype);
    this.Message = opts.Message;
    this.RequestId = opts.RequestId;
    this.Reason = opts.Reason;
  }
}

/**
 * @public
 */
export interface CreateGroupMembershipRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The identifier for a group in the identity store.</p>
   * @public
   */
  GroupId: string | undefined;

  /**
   * <p>An object that contains the identifier of a group member. Setting the <code>UserID</code> field to the specific identifier for a user indicates that the user is a member of the group.</p>
   * @public
   */
  MemberId: MemberId | undefined;
}

/**
 * @public
 */
export interface CreateGroupMembershipResponse {
  /**
   * <p>The identifier for a newly created <code>GroupMembership</code> in an identity
   *          store.</p>
   * @public
   */
  MembershipId: string | undefined;

  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;
}

/**
 * <p>The request would cause the number of users or groups in the identity store to exceed the maximum allowed.</p>
 * @public
 */
export class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException" = "ServiceQuotaExceededException";
  readonly $fault: "client" = "client";
  Message?: string;
  /**
   * <p>The identifier for each request. This value is a globally unique ID that is generated by the identity store service for each sent request, and is then returned inside the exception if the request fails.</p>
   * @public
   */
  RequestId?: string;
  /**
   * @internal
   */
  constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>) {
    super({
      name: "ServiceQuotaExceededException",
      $fault: "client",
      ...opts,
    });
    Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
    this.Message = opts.Message;
    this.RequestId = opts.RequestId;
  }
}

/**
 * @public
 */
export interface DeleteGroupMembershipRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The identifier for a <code>GroupMembership</code> in an identity store.</p>
   * @public
   */
  MembershipId: string | undefined;
}

/**
 * @public
 */
export interface DeleteGroupMembershipResponse {}

/**
 * @public
 */
export interface DescribeGroupMembershipRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The identifier for a <code>GroupMembership</code> in an identity store.</p>
   * @public
   */
  MembershipId: string | undefined;
}

/**
 * @public
 */
export interface DescribeGroupMembershipResponse {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The identifier for a <code>GroupMembership</code> in an identity store.</p>
   * @public
   */
  MembershipId: string | undefined;

  /**
   * <p>The identifier for a group in the identity store.</p>
   * @public
   */
  GroupId: string | undefined;

  /**
   * <p>An object containing the identifier of a group member.</p>
   * @public
   */
  MemberId: MemberId | undefined;
}

/**
 * @public
 */
export interface ListGroupMembershipsRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The identifier for a group in the identity store.</p>
   * @public
   */
  GroupId: string | undefined;

  /**
   * <p>The maximum number of results to be returned per request. This parameter is used in all
   *             <code>List</code> requests to specify how many results to return in one page.</p>
   * @public
   */
  MaxResults?: number;

  /**
   * <p>The pagination token used for the <code>ListUsers</code>, <code>ListGroups</code> and <code>ListGroupMemberships</code> API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.</p>
   * @public
   */
  NextToken?: string;
}

/**
 * <p>Contains the identifiers for a group, a group member, and a <code>GroupMembership</code>
 *          object in the identity store.</p>
 * @public
 */
export interface GroupMembership {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The identifier for a <code>GroupMembership</code> object in an identity store.</p>
   * @public
   */
  MembershipId?: string;

  /**
   * <p>The identifier for a group in the identity store.</p>
   * @public
   */
  GroupId?: string;

  /**
   * <p>An object that contains the identifier of a group member. Setting the <code>UserID</code> field to the specific identifier for a user indicates that the user is a member of the group.</p>
   * @public
   */
  MemberId?: MemberId;
}

/**
 * @public
 */
export interface ListGroupMembershipsResponse {
  /**
   * <p>A list of <code>GroupMembership</code> objects in the group.</p>
   * @public
   */
  GroupMemberships: GroupMembership[] | undefined;

  /**
   * <p>The pagination token used for the <code>ListUsers</code>, <code>ListGroups</code>, and <code>ListGroupMemberships</code> API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.</p>
   * @public
   */
  NextToken?: string;
}

/**
 * @public
 */
export interface CreateGroupRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>A string containing the name of the group. This value is commonly displayed when the
   *          group is referenced. <code>Administrator</code> and <code>AWSAdministrators</code> are
   *          reserved names and can't be used for users or groups.</p>
   * @public
   */
  DisplayName?: string;

  /**
   * <p>A string containing the description of the group.</p>
   * @public
   */
  Description?: string;
}

/**
 * @public
 */
export interface CreateGroupResponse {
  /**
   * <p>The
   *          identifier
   *          of the newly created group in the identity store.</p>
   * @public
   */
  GroupId: string | undefined;

  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;
}

/**
 * @public
 */
export interface DeleteGroupRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The identifier for a group in the identity store.</p>
   * @public
   */
  GroupId: string | undefined;
}

/**
 * @public
 */
export interface DeleteGroupResponse {}

/**
 * @public
 */
export interface DescribeGroupRequest {
  /**
   * <p>The globally unique identifier for the identity store, such as
   *          <code>d-1234567890</code>. In this example, <code>d-</code> is a fixed prefix, and
   *             <code>1234567890</code> is a randomly generated string that contains numbers and lower
   *          case letters. This value is generated at the time that a new identity store is
   *          created.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The identifier for a group in the identity store.</p>
   * @public
   */
  GroupId: string | undefined;
}

/**
 * @public
 */
export interface DescribeGroupResponse {
  /**
   * <p>The identifier for a group in the identity store.</p>
   * @public
   */
  GroupId: string | undefined;

  /**
   * <p>The group’s display name value. The length limit is 1,024 characters. This
   *          value can consist of letters, accented characters, symbols, numbers, punctuation, tab, new
   *          line, carriage return, space, and nonbreaking space in this attribute. This value is specified at the time that the
   *          group is created and stored as an attribute of the group object in the identity
   *          store.</p>
   * @public
   */
  DisplayName?: string;

  /**
   * <p>A list of <code>ExternalId</code> objects that contains the identifiers issued to this
   *          resource by an external identity provider.</p>
   * @public
   */
  ExternalIds?: ExternalId[];

  /**
   * <p>A string containing a description of the group.</p>
   * @public
   */
  Description?: string;

  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;
}

/**
 * <p>A query filter used by <code>ListUsers</code> and <code>ListGroups</code>. This filter
 *          object provides the attribute name and attribute value to search users or groups.</p>
 * @public
 */
export interface Filter {
  /**
   * <p>The attribute path that is used to specify which attribute name to search. Length limit
   *          is 255 characters. For example, <code>UserName</code> is a valid attribute path for the
   *             <code>ListUsers</code> API, and <code>DisplayName</code> is a valid attribute path for
   *          the <code>ListGroups</code> API.</p>
   * @public
   */
  AttributePath: string | undefined;

  /**
   * <p>Represents the data for an attribute. Each attribute value is described as a name-value
   *          pair. </p>
   * @public
   */
  AttributeValue: string | undefined;
}

/**
 * @public
 */
export interface ListGroupsRequest {
  /**
   * <p>The globally unique identifier for the identity store, such as
   *          <code>d-1234567890</code>. In this example, <code>d-</code> is a fixed prefix, and
   *             <code>1234567890</code> is a randomly generated string that contains numbers and lower
   *          case letters. This value is generated at the time that a new identity store is
   *          created.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The maximum number of results to be returned per request. This parameter is used in the
   *             <code>ListUsers</code> and <code>ListGroups</code> requests to specify how many results
   *          to return in one page. The length limit is 50 characters.</p>
   * @public
   */
  MaxResults?: number;

  /**
   * <p>The pagination token used for the <code>ListUsers</code> and <code>ListGroups</code> API
   *          operations. This value is generated by the identity store service. It is returned in the
   *          API response if the total results are more than the size of one page. This token is also
   *          returned when it is used in the API request to search for the next page.</p>
   * @public
   */
  NextToken?: string;

  /**
   * @deprecated
   *
   * <p>A list of <code>Filter</code> objects, which is used in the <code>ListUsers</code> and
   *             <code>ListGroups</code> requests.</p>
   * @public
   */
  Filters?: Filter[];
}

/**
 * <p>A group object that contains the metadata and attributes for a specified group.</p>
 * @public
 */
export interface Group {
  /**
   * <p>The identifier for a group in the identity store.</p>
   * @public
   */
  GroupId: string | undefined;

  /**
   * <p>The display name value for the group. The length limit is 1,024 characters. This value
   *          can consist of letters, accented characters, symbols, numbers, punctuation, tab, new line,
   *          carriage return, space, and nonbreaking space in this attribute. This value is specified at
   *          the time the group is created and stored as an attribute of the group object in the
   *          identity store.</p>
   * @public
   */
  DisplayName?: string;

  /**
   * <p>A list of <code>ExternalId</code> objects that contains the identifiers issued to this
   *          resource by an external identity provider.</p>
   * @public
   */
  ExternalIds?: ExternalId[];

  /**
   * <p>A string containing a description of the specified group.</p>
   * @public
   */
  Description?: string;

  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;
}

/**
 * @public
 */
export interface ListGroupsResponse {
  /**
   * <p>A list of <code>Group</code> objects in the identity store.</p>
   * @public
   */
  Groups: Group[] | undefined;

  /**
   * <p>The pagination token used for the <code>ListUsers</code> and <code>ListGroups</code> API
   *          operations. This value is generated by the identity store service. It is returned in the
   *          API response if the total results are more than the size of one page. This token is also
   *          returned when it1 is used in the API request to search for the next page.</p>
   * @public
   */
  NextToken?: string;
}

/**
 * @public
 */
export interface UpdateGroupRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The identifier for a group in the identity store.</p>
   * @public
   */
  GroupId: string | undefined;

  /**
   * <p>A list of <code>AttributeOperation</code> objects to apply to the requested group. These
   *          operations might add, replace, or remove an attribute.</p>
   * @public
   */
  Operations: AttributeOperation[] | undefined;
}

/**
 * @public
 */
export interface UpdateGroupResponse {}

/**
 * @public
 */
export interface IsMemberInGroupsRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>An object containing the identifier of a group member.</p>
   * @public
   */
  MemberId: MemberId | undefined;

  /**
   * <p>A list of identifiers for groups in the identity store.</p>
   * @public
   */
  GroupIds: string[] | undefined;
}

/**
 * <p>Indicates whether a resource is a member of a group in the identity store.</p>
 * @public
 */
export interface GroupMembershipExistenceResult {
  /**
   * <p>The identifier for a group in the identity store.</p>
   * @public
   */
  GroupId?: string;

  /**
   * <p>An object that contains the identifier of a group member. Setting the <code>UserID</code> field to the specific identifier for a user indicates that the user is a member of the group.</p>
   * @public
   */
  MemberId?: MemberId;

  /**
   * <p>Indicates whether a membership relation exists or not.</p>
   * @public
   */
  MembershipExists?: boolean;
}

/**
 * @public
 */
export interface IsMemberInGroupsResponse {
  /**
   * <p>A list containing the results of membership existence checks.</p>
   * @public
   */
  Results: GroupMembershipExistenceResult[] | undefined;
}

/**
 * @public
 */
export interface ListGroupMembershipsForMemberRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>An object that contains the identifier of a group member. Setting the <code>UserID</code> field to the specific identifier for a user indicates that the user is a member of the group.</p>
   * @public
   */
  MemberId: MemberId | undefined;

  /**
   * <p>The maximum number of results to be returned per request. This parameter is used in the <code>ListUsers</code> and <code>ListGroups</code> requests to specify how many results to return in one page. The length limit is 50 characters.</p>
   * @public
   */
  MaxResults?: number;

  /**
   * <p>The pagination token used for the <code>ListUsers</code>, <code>ListGroups</code>, and <code>ListGroupMemberships</code> API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.</p>
   * @public
   */
  NextToken?: string;
}

/**
 * @public
 */
export interface ListGroupMembershipsForMemberResponse {
  /**
   * <p>A list of <code>GroupMembership</code> objects in the group for a specified member.</p>
   * @public
   */
  GroupMemberships: GroupMembership[] | undefined;

  /**
   * <p>The pagination token used for the <code>ListUsers</code>, <code>ListGroups</code>, and <code>ListGroupMemberships</code> API operations. This value is generated by the identity store service. It is returned in the API response if the total results are more than the size of one page. This token is also returned when it is used in the API request to search for the next page.
   *          </p>
   * @public
   */
  NextToken?: string;
}

/**
 * <p>The email address associated with the user.</p>
 * @public
 */
export interface Email {
  /**
   * <p>A string containing an email address. For example, "johndoe@amazon.com."</p>
   * @public
   */
  Value?: string;

  /**
   * <p>A string representing the type of address. For example, "Work."</p>
   * @public
   */
  Type?: string;

  /**
   * <p>A Boolean value representing whether this is the primary email address for the
   *          associated resource.</p>
   * @public
   */
  Primary?: boolean;
}

/**
 * <p>The
 *          full name
 *          of the user.</p>
 * @public
 */
export interface Name {
  /**
   * <p>A string containing a formatted version of the name for display.</p>
   * @public
   */
  Formatted?: string;

  /**
   * <p>The family name of the user.</p>
   * @public
   */
  FamilyName?: string;

  /**
   * <p>The given name of the user.</p>
   * @public
   */
  GivenName?: string;

  /**
   * <p>The middle name of the user.</p>
   * @public
   */
  MiddleName?: string;

  /**
   * <p>The honorific prefix of the user. For example, "Dr."</p>
   * @public
   */
  HonorificPrefix?: string;

  /**
   * <p>The honorific suffix of the user. For example, "M.D."</p>
   * @public
   */
  HonorificSuffix?: string;
}

/**
 * <p>The phone number associated with the user.</p>
 * @public
 */
export interface PhoneNumber {
  /**
   * <p>A string containing a phone number. For example,
   *          "8675309"
   *          or "+1 (800) 123-4567".</p>
   * @public
   */
  Value?: string;

  /**
   * <p>A string representing the type of a phone number. For example, "Mobile."</p>
   * @public
   */
  Type?: string;

  /**
   * <p>A Boolean value representing whether this is the primary phone number for the associated
   *          resource.</p>
   * @public
   */
  Primary?: boolean;
}

/**
 * @public
 */
export interface CreateUserRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>A unique string used to identify the user. The length limit is 128 characters. This
   *          value can consist of letters, accented characters, symbols, numbers, and punctuation. This
   *          value is specified at the time the user is created and stored as an attribute of the user
   *          object in the identity store. <code>Administrator</code> and <code>AWSAdministrators</code>
   *          are reserved names and can't be used for users or groups.</p>
   * @public
   */
  UserName?: string;

  /**
   * <p>An object containing the name of the user.</p>
   * @public
   */
  Name?: Name;

  /**
   * <p>A string containing the name of the user. This value is typically formatted for display
   *          when the user is referenced. For example, "John Doe." </p>
   * @public
   */
  DisplayName?: string;

  /**
   * <p>A string containing an alternate name for the user.</p>
   * @public
   */
  NickName?: string;

  /**
   * <p>A string containing a URL that might be associated with the user.</p>
   * @public
   */
  ProfileUrl?: string;

  /**
   * <p>A list of <code>Email</code> objects containing email addresses associated with the user.</p>
   * @public
   */
  Emails?: Email[];

  /**
   * <p>A list of <code>Address</code> objects containing addresses associated with the user.</p>
   * @public
   */
  Addresses?: Address[];

  /**
   * <p>A list of <code>PhoneNumber</code> objects containing phone numbers associated with the user.</p>
   * @public
   */
  PhoneNumbers?: PhoneNumber[];

  /**
   * <p>A string indicating the type of user. Possible values are left unspecified. The value
   *          can vary based on your specific use case.</p>
   * @public
   */
  UserType?: string;

  /**
   * <p>A string containing the title of the user. Possible values are left unspecified. The
   *          value can vary based on your specific use case.</p>
   * @public
   */
  Title?: string;

  /**
   * <p>A string containing the preferred language of the user. For example, "American English"
   *          or "en-us."</p>
   * @public
   */
  PreferredLanguage?: string;

  /**
   * <p>A string containing the geographical region or location of the user.</p>
   * @public
   */
  Locale?: string;

  /**
   * <p>A string containing the time zone of the user.</p>
   * @public
   */
  Timezone?: string;
}

/**
 * @public
 */
export interface CreateUserResponse {
  /**
   * <p>The identifier of the newly created user in the identity store.</p>
   * @public
   */
  UserId: string | undefined;

  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;
}

/**
 * @public
 */
export interface DeleteUserRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The identifier for a user in the identity store.</p>
   * @public
   */
  UserId: string | undefined;
}

/**
 * @public
 */
export interface DeleteUserResponse {}

/**
 * @public
 */
export interface DescribeUserRequest {
  /**
   * <p>The globally unique identifier for the identity store, such as
   *          <code>d-1234567890</code>. In this example, <code>d-</code> is a fixed prefix, and
   *             <code>1234567890</code> is a randomly generated string that contains numbers and lower
   *          case letters. This value is generated at the time that a new identity store is
   *          created.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The identifier for a user in the identity store.</p>
   * @public
   */
  UserId: string | undefined;
}

/**
 * @public
 */
export interface DescribeUserResponse {
  /**
   * <p>A unique string used to identify the user. The length limit is 128 characters. This value can consist of
   *          letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is
   *          created and stored as an attribute of the user object in the identity store.</p>
   * @public
   */
  UserName?: string;

  /**
   * <p>The identifier for a user in the identity store.</p>
   * @public
   */
  UserId: string | undefined;

  /**
   * <p>A list of <code>ExternalId</code> objects that contains the identifiers issued to this
   *          resource by an external identity provider.</p>
   * @public
   */
  ExternalIds?: ExternalId[];

  /**
   * <p>The name of the user.</p>
   * @public
   */
  Name?: Name;

  /**
   * <p>The display name of the user.</p>
   * @public
   */
  DisplayName?: string;

  /**
   * <p>An alternative descriptive name for the user.</p>
   * @public
   */
  NickName?: string;

  /**
   * <p>A URL link for the user's profile.</p>
   * @public
   */
  ProfileUrl?: string;

  /**
   * <p>The email address of the user.</p>
   * @public
   */
  Emails?: Email[];

  /**
   * <p>The physical address of the user.</p>
   * @public
   */
  Addresses?: Address[];

  /**
   * <p>A list of <code>PhoneNumber</code> objects associated with a user.</p>
   * @public
   */
  PhoneNumbers?: PhoneNumber[];

  /**
   * <p>A string indicating the type of user.</p>
   * @public
   */
  UserType?: string;

  /**
   * <p>A string containing the title of the user.</p>
   * @public
   */
  Title?: string;

  /**
   * <p>The preferred language of the user.</p>
   * @public
   */
  PreferredLanguage?: string;

  /**
   * <p>A string containing the geographical region or location of the user.</p>
   * @public
   */
  Locale?: string;

  /**
   * <p>The time zone for a user.</p>
   * @public
   */
  Timezone?: string;

  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;
}

/**
 * @public
 */
export interface ListUsersRequest {
  /**
   * <p>The globally unique identifier for the identity store, such as
   *          <code>d-1234567890</code>. In this example, <code>d-</code> is a fixed prefix, and
   *             <code>1234567890</code> is a randomly generated string that contains numbers and lower
   *          case letters. This value is generated at the time that a new identity store is
   *          created.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The maximum number of results to be returned per request. This parameter is used in the
   *             <code>ListUsers</code> and <code>ListGroups</code> requests to specify how many results
   *          to return in one page. The length limit is 50 characters.</p>
   * @public
   */
  MaxResults?: number;

  /**
   * <p>The pagination token used for the <code>ListUsers</code> and <code>ListGroups</code> API
   *          operations. This value is generated by the identity store service. It is returned in the
   *          API response if the total results are more than the size of one page. This token is also
   *          returned when it is used in the API request to search for the next page.</p>
   * @public
   */
  NextToken?: string;

  /**
   * @deprecated
   *
   * <p>A list of <code>Filter</code> objects, which is used in the <code>ListUsers</code> and
   *             <code>ListGroups</code> requests. </p>
   * @public
   */
  Filters?: Filter[];
}

/**
 * <p>A user object that contains the metadata and attributes for a specified user.</p>
 * @public
 */
export interface User {
  /**
   * <p>A unique string used to identify the user. The length limit is 128 characters. This value can
   *          consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is
   *          created and stored as an attribute of the user object in the identity store.</p>
   * @public
   */
  UserName?: string;

  /**
   * <p>The identifier for a user in the identity store.</p>
   * @public
   */
  UserId: string | undefined;

  /**
   * <p>A list of <code>ExternalId</code> objects that contains the identifiers issued to this
   *          resource by an external identity provider.</p>
   * @public
   */
  ExternalIds?: ExternalId[];

  /**
   * <p>An object containing the name of the user.</p>
   * @public
   */
  Name?: Name;

  /**
   * <p>A string containing the  name of the user that is formatted for display when the user is
   *          referenced. For example, "John Doe."</p>
   * @public
   */
  DisplayName?: string;

  /**
   * <p>A string containing an alternate name for the user.</p>
   * @public
   */
  NickName?: string;

  /**
   * <p>A string containing a URL that might be associated with the user.</p>
   * @public
   */
  ProfileUrl?: string;

  /**
   * <p>A list of <code>Email</code> objects containing email addresses associated with the user.</p>
   * @public
   */
  Emails?: Email[];

  /**
   * <p>A list of <code>Address</code> objects containing addresses associated with the user.</p>
   * @public
   */
  Addresses?: Address[];

  /**
   * <p>A list of <code>PhoneNumber</code> objects containing phone numbers associated with the user.</p>
   * @public
   */
  PhoneNumbers?: PhoneNumber[];

  /**
   * <p>A string indicating the type of user. Possible values are left unspecified. The value
   *          can vary based on your specific use case.</p>
   * @public
   */
  UserType?: string;

  /**
   * <p>A string containing the title of the user. Possible values are left unspecified. The
   *          value can vary based on your specific use case.</p>
   * @public
   */
  Title?: string;

  /**
   * <p>A string containing the preferred language of the user. For example, "American English"
   *          or "en-us."</p>
   * @public
   */
  PreferredLanguage?: string;

  /**
   * <p>A string containing the geographical region or location of the user.</p>
   * @public
   */
  Locale?: string;

  /**
   * <p>A string containing the time zone of the user.</p>
   * @public
   */
  Timezone?: string;

  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;
}

/**
 * @public
 */
export interface ListUsersResponse {
  /**
   * <p>A list of <code>User</code> objects in the identity store.</p>
   * @public
   */
  Users: User[] | undefined;

  /**
   * <p>The pagination token used for the <code>ListUsers</code> and <code>ListGroups</code> API
   *          operations. This value is generated by the identity store service. It is returned in the
   *          API response if the total results are more than the size of one page. This token is also
   *          returned when it is used in the API request to search for the next page.</p>
   * @public
   */
  NextToken?: string;
}

/**
 * @public
 */
export interface UpdateUserRequest {
  /**
   * <p>The globally unique identifier for the identity store.</p>
   * @public
   */
  IdentityStoreId: string | undefined;

  /**
   * <p>The identifier for a user in the identity store.</p>
   * @public
   */
  UserId: string | undefined;

  /**
   * <p>A list of <code>AttributeOperation</code> objects to apply to the requested user. These
   *          operations might add, replace, or remove an attribute.</p>
   * @public
   */
  Operations: AttributeOperation[] | undefined;
}

/**
 * @public
 */
export interface UpdateUserResponse {}

/**
 * @internal
 */
export const AddressFilterSensitiveLog = (obj: Address): any => ({
  ...obj,
  ...(obj.StreetAddress && { StreetAddress: SENSITIVE_STRING }),
  ...(obj.Locality && { Locality: SENSITIVE_STRING }),
  ...(obj.Region && { Region: SENSITIVE_STRING }),
  ...(obj.PostalCode && { PostalCode: SENSITIVE_STRING }),
  ...(obj.Country && { Country: SENSITIVE_STRING }),
  ...(obj.Formatted && { Formatted: SENSITIVE_STRING }),
  ...(obj.Type && { Type: SENSITIVE_STRING }),
  ...(obj.Primary && { Primary: SENSITIVE_STRING }),
});

/**
 * @internal
 */
export const ExternalIdFilterSensitiveLog = (obj: ExternalId): any => ({
  ...obj,
  ...(obj.Issuer && { Issuer: SENSITIVE_STRING }),
  ...(obj.Id && { Id: SENSITIVE_STRING }),
});

/**
 * @internal
 */
export const AlternateIdentifierFilterSensitiveLog = (obj: AlternateIdentifier): any => {
  if (obj.ExternalId !== undefined) return { ExternalId: ExternalIdFilterSensitiveLog(obj.ExternalId) };
  if (obj.UniqueAttribute !== undefined) return { UniqueAttribute: obj.UniqueAttribute };
  if (obj.$unknown !== undefined) return { [obj.$unknown[0]]: "UNKNOWN" };
};

/**
 * @internal
 */
export const GetGroupIdRequestFilterSensitiveLog = (obj: GetGroupIdRequest): any => ({
  ...obj,
  ...(obj.AlternateIdentifier && {
    AlternateIdentifier: AlternateIdentifierFilterSensitiveLog(obj.AlternateIdentifier),
  }),
});

/**
 * @internal
 */
export const GetUserIdRequestFilterSensitiveLog = (obj: GetUserIdRequest): any => ({
  ...obj,
  ...(obj.AlternateIdentifier && {
    AlternateIdentifier: AlternateIdentifierFilterSensitiveLog(obj.AlternateIdentifier),
  }),
});

/**
 * @internal
 */
export const CreateGroupRequestFilterSensitiveLog = (obj: CreateGroupRequest): any => ({
  ...obj,
  ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
  ...(obj.Description && { Description: SENSITIVE_STRING }),
});

/**
 * @internal
 */
export const DescribeGroupResponseFilterSensitiveLog = (obj: DescribeGroupResponse): any => ({
  ...obj,
  ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
  ...(obj.ExternalIds && { ExternalIds: obj.ExternalIds.map((item) => ExternalIdFilterSensitiveLog(item)) }),
  ...(obj.Description && { Description: SENSITIVE_STRING }),
});

/**
 * @internal
 */
export const FilterFilterSensitiveLog = (obj: Filter): any => ({
  ...obj,
  ...(obj.AttributeValue && { AttributeValue: SENSITIVE_STRING }),
});

/**
 * @internal
 */
export const ListGroupsRequestFilterSensitiveLog = (obj: ListGroupsRequest): any => ({
  ...obj,
  ...(obj.Filters && { Filters: obj.Filters.map((item) => FilterFilterSensitiveLog(item)) }),
});

/**
 * @internal
 */
export const GroupFilterSensitiveLog = (obj: Group): any => ({
  ...obj,
  ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
  ...(obj.ExternalIds && { ExternalIds: obj.ExternalIds.map((item) => ExternalIdFilterSensitiveLog(item)) }),
  ...(obj.Description && { Description: SENSITIVE_STRING }),
});

/**
 * @internal
 */
export const ListGroupsResponseFilterSensitiveLog = (obj: ListGroupsResponse): any => ({
  ...obj,
  ...(obj.Groups && { Groups: obj.Groups.map((item) => GroupFilterSensitiveLog(item)) }),
});

/**
 * @internal
 */
export const GroupMembershipExistenceResultFilterSensitiveLog = (obj: GroupMembershipExistenceResult): any => ({
  ...obj,
  ...(obj.MemberId && { MemberId: obj.MemberId }),
  ...(obj.MembershipExists && { MembershipExists: SENSITIVE_STRING }),
});

/**
 * @internal
 */
export const IsMemberInGroupsResponseFilterSensitiveLog = (obj: IsMemberInGroupsResponse): any => ({
  ...obj,
  ...(obj.Results && { Results: obj.Results.map((item) => GroupMembershipExistenceResultFilterSensitiveLog(item)) }),
});

/**
 * @internal
 */
export const EmailFilterSensitiveLog = (obj: Email): any => ({
  ...obj,
  ...(obj.Value && { Value: SENSITIVE_STRING }),
  ...(obj.Type && { Type: SENSITIVE_STRING }),
  ...(obj.Primary && { Primary: SENSITIVE_STRING }),
});

/**
 * @internal
 */
export const NameFilterSensitiveLog = (obj: Name): any => ({
  ...obj,
  ...(obj.Formatted && { Formatted: SENSITIVE_STRING }),
  ...(obj.FamilyName && { FamilyName: SENSITIVE_STRING }),
  ...(obj.GivenName && { GivenName: SENSITIVE_STRING }),
  ...(obj.MiddleName && { MiddleName: SENSITIVE_STRING }),
  ...(obj.HonorificPrefix && { HonorificPrefix: SENSITIVE_STRING }),
  ...(obj.HonorificSuffix && { HonorificSuffix: SENSITIVE_STRING }),
});

/**
 * @internal
 */
export const PhoneNumberFilterSensitiveLog = (obj: PhoneNumber): any => ({
  ...obj,
  ...(obj.Value && { Value: SENSITIVE_STRING }),
  ...(obj.Type && { Type: SENSITIVE_STRING }),
  ...(obj.Primary && { Primary: SENSITIVE_STRING }),
});

/**
 * @internal
 */
export const CreateUserRequestFilterSensitiveLog = (obj: CreateUserRequest): any => ({
  ...obj,
  ...(obj.UserName && { UserName: SENSITIVE_STRING }),
  ...(obj.Name && { Name: NameFilterSensitiveLog(obj.Name) }),
  ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
  ...(obj.NickName && { NickName: SENSITIVE_STRING }),
  ...(obj.ProfileUrl && { ProfileUrl: SENSITIVE_STRING }),
  ...(obj.Emails && { Emails: obj.Emails.map((item) => EmailFilterSensitiveLog(item)) }),
  ...(obj.Addresses && { Addresses: obj.Addresses.map((item) => AddressFilterSensitiveLog(item)) }),
  ...(obj.PhoneNumbers && { PhoneNumbers: obj.PhoneNumbers.map((item) => PhoneNumberFilterSensitiveLog(item)) }),
  ...(obj.UserType && { UserType: SENSITIVE_STRING }),
  ...(obj.Title && { Title: SENSITIVE_STRING }),
  ...(obj.PreferredLanguage && { PreferredLanguage: SENSITIVE_STRING }),
  ...(obj.Locale && { Locale: SENSITIVE_STRING }),
  ...(obj.Timezone && { Timezone: SENSITIVE_STRING }),
});

/**
 * @internal
 */
export const DescribeUserResponseFilterSensitiveLog = (obj: DescribeUserResponse): any => ({
  ...obj,
  ...(obj.UserName && { UserName: SENSITIVE_STRING }),
  ...(obj.ExternalIds && { ExternalIds: obj.ExternalIds.map((item) => ExternalIdFilterSensitiveLog(item)) }),
  ...(obj.Name && { Name: NameFilterSensitiveLog(obj.Name) }),
  ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
  ...(obj.NickName && { NickName: SENSITIVE_STRING }),
  ...(obj.ProfileUrl && { ProfileUrl: SENSITIVE_STRING }),
  ...(obj.Emails && { Emails: obj.Emails.map((item) => EmailFilterSensitiveLog(item)) }),
  ...(obj.Addresses && { Addresses: obj.Addresses.map((item) => AddressFilterSensitiveLog(item)) }),
  ...(obj.PhoneNumbers && { PhoneNumbers: obj.PhoneNumbers.map((item) => PhoneNumberFilterSensitiveLog(item)) }),
  ...(obj.UserType && { UserType: SENSITIVE_STRING }),
  ...(obj.Title && { Title: SENSITIVE_STRING }),
  ...(obj.PreferredLanguage && { PreferredLanguage: SENSITIVE_STRING }),
  ...(obj.Locale && { Locale: SENSITIVE_STRING }),
  ...(obj.Timezone && { Timezone: SENSITIVE_STRING }),
});

/**
 * @internal
 */
export const ListUsersRequestFilterSensitiveLog = (obj: ListUsersRequest): any => ({
  ...obj,
  ...(obj.Filters && { Filters: obj.Filters.map((item) => FilterFilterSensitiveLog(item)) }),
});

/**
 * @internal
 */
export const UserFilterSensitiveLog = (obj: User): any => ({
  ...obj,
  ...(obj.UserName && { UserName: SENSITIVE_STRING }),
  ...(obj.ExternalIds && { ExternalIds: obj.ExternalIds.map((item) => ExternalIdFilterSensitiveLog(item)) }),
  ...(obj.Name && { Name: NameFilterSensitiveLog(obj.Name) }),
  ...(obj.DisplayName && { DisplayName: SENSITIVE_STRING }),
  ...(obj.NickName && { NickName: SENSITIVE_STRING }),
  ...(obj.ProfileUrl && { ProfileUrl: SENSITIVE_STRING }),
  ...(obj.Emails && { Emails: obj.Emails.map((item) => EmailFilterSensitiveLog(item)) }),
  ...(obj.Addresses && { Addresses: obj.Addresses.map((item) => AddressFilterSensitiveLog(item)) }),
  ...(obj.PhoneNumbers && { PhoneNumbers: obj.PhoneNumbers.map((item) => PhoneNumberFilterSensitiveLog(item)) }),
  ...(obj.UserType && { UserType: SENSITIVE_STRING }),
  ...(obj.Title && { Title: SENSITIVE_STRING }),
  ...(obj.PreferredLanguage && { PreferredLanguage: SENSITIVE_STRING }),
  ...(obj.Locale && { Locale: SENSITIVE_STRING }),
  ...(obj.Timezone && { Timezone: SENSITIVE_STRING }),
});

/**
 * @internal
 */
export const ListUsersResponseFilterSensitiveLog = (obj: ListUsersResponse): any => ({
  ...obj,
  ...(obj.Users && { Users: obj.Users.map((item) => UserFilterSensitiveLog(item)) }),
});
