// smithy-typescript generated code
import { getEndpointPlugin } from "@smithy/middleware-endpoint";
import { getSerdePlugin } from "@smithy/middleware-serde";
import { Command as $Command } from "@smithy/smithy-client";
import { MetadataBearer as __MetadataBearer } from "@smithy/types";

import { AccessAnalyzerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../AccessAnalyzerClient";
import { commonParams } from "../endpoint/EndpointParameters";
import { ListFindingsV2Request, ListFindingsV2Response } from "../models/models_0";
import { de_ListFindingsV2Command, se_ListFindingsV2Command } from "../protocols/Aws_restJson1";

/**
 * @public
 */
export type { __MetadataBearer };
export { $Command };
/**
 * @public
 *
 * The input for {@link ListFindingsV2Command}.
 */
export interface ListFindingsV2CommandInput extends ListFindingsV2Request {}
/**
 * @public
 *
 * The output of {@link ListFindingsV2Command}.
 */
export interface ListFindingsV2CommandOutput extends ListFindingsV2Response, __MetadataBearer {}

/**
 * <p>Retrieves a list of findings generated by the specified analyzer. ListFindings and
 *          ListFindingsV2 both use <code>access-analyzer:ListFindings</code> in the
 *             <code>Action</code> element of an IAM policy statement. You must have permission to
 *          perform the <code>access-analyzer:ListFindings</code> action.</p>
 *          <p>To learn about filter keys that you can use to retrieve a list of findings, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access-analyzer-reference-filter-keys.html">IAM Access Analyzer filter keys</a> in the <b>IAM User Guide</b>.</p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { AccessAnalyzerClient, ListFindingsV2Command } from "@aws-sdk/client-accessanalyzer"; // ES Modules import
 * // const { AccessAnalyzerClient, ListFindingsV2Command } = require("@aws-sdk/client-accessanalyzer"); // CommonJS import
 * const client = new AccessAnalyzerClient(config);
 * const input = { // ListFindingsV2Request
 *   analyzerArn: "STRING_VALUE", // required
 *   filter: { // FilterCriteriaMap
 *     "<keys>": { // Criterion
 *       eq: [ // ValueList
 *         "STRING_VALUE",
 *       ],
 *       neq: [
 *         "STRING_VALUE",
 *       ],
 *       contains: [
 *         "STRING_VALUE",
 *       ],
 *       exists: true || false,
 *     },
 *   },
 *   maxResults: Number("int"),
 *   nextToken: "STRING_VALUE",
 *   sort: { // SortCriteria
 *     attributeName: "STRING_VALUE",
 *     orderBy: "STRING_VALUE",
 *   },
 * };
 * const command = new ListFindingsV2Command(input);
 * const response = await client.send(command);
 * // { // ListFindingsV2Response
 * //   findings: [ // FindingsListV2 // required
 * //     { // FindingSummaryV2
 * //       analyzedAt: new Date("TIMESTAMP"), // required
 * //       createdAt: new Date("TIMESTAMP"), // required
 * //       error: "STRING_VALUE",
 * //       id: "STRING_VALUE", // required
 * //       resource: "STRING_VALUE",
 * //       resourceType: "STRING_VALUE", // required
 * //       resourceOwnerAccount: "STRING_VALUE", // required
 * //       status: "STRING_VALUE", // required
 * //       updatedAt: new Date("TIMESTAMP"), // required
 * //       findingType: "STRING_VALUE",
 * //     },
 * //   ],
 * //   nextToken: "STRING_VALUE",
 * // };
 *
 * ```
 *
 * @param ListFindingsV2CommandInput - {@link ListFindingsV2CommandInput}
 * @returns {@link ListFindingsV2CommandOutput}
 * @see {@link ListFindingsV2CommandInput} for command's `input` shape.
 * @see {@link ListFindingsV2CommandOutput} for command's `response` shape.
 * @see {@link AccessAnalyzerClientResolvedConfig | config} for AccessAnalyzerClient's `config` shape.
 *
 * @throws {@link AccessDeniedException} (client fault)
 *  <p>You do not have sufficient access to perform this action.</p>
 *
 * @throws {@link InternalServerException} (server fault)
 *  <p>Internal server error.</p>
 *
 * @throws {@link ResourceNotFoundException} (client fault)
 *  <p>The specified resource could not be found.</p>
 *
 * @throws {@link ThrottlingException} (client fault)
 *  <p>Throttling limit exceeded error.</p>
 *
 * @throws {@link ValidationException} (client fault)
 *  <p>Validation exception error.</p>
 *
 * @throws {@link AccessAnalyzerServiceException}
 * <p>Base exception class for all service exceptions from AccessAnalyzer service.</p>
 *
 * @public
 */
export class ListFindingsV2Command extends $Command
  .classBuilder<
    ListFindingsV2CommandInput,
    ListFindingsV2CommandOutput,
    AccessAnalyzerClientResolvedConfig,
    ServiceInputTypes,
    ServiceOutputTypes
  >()
  .ep({
    ...commonParams,
  })
  .m(function (this: any, Command: any, cs: any, config: AccessAnalyzerClientResolvedConfig, o: any) {
    return [
      getSerdePlugin(config, this.serialize, this.deserialize),
      getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
  })
  .s("AccessAnalyzer", "ListFindingsV2", {})
  .n("AccessAnalyzerClient", "ListFindingsV2Command")
  .f(void 0, void 0)
  .ser(se_ListFindingsV2Command)
  .de(de_ListFindingsV2Command)
  .build() {}
