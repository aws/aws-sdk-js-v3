// smithy-typescript generated code
import { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from "@smithy/protocol-http";
import {
  collectBody,
  expectNonNull as __expectNonNull,
  expectString as __expectString,
  extendedEncodeURIComponent as __extendedEncodeURIComponent,
  getArrayIfSingleItem as __getArrayIfSingleItem,
  getValueFromTextNode as __getValueFromTextNode,
  parseBoolean as __parseBoolean,
  parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset,
  serializeFloat as __serializeFloat,
  strictParseFloat as __strictParseFloat,
  strictParseInt32 as __strictParseInt32,
  strictParseLong as __strictParseLong,
  withBaseException,
} from "@smithy/smithy-client";
import {
  Endpoint as __Endpoint,
  HeaderBag as __HeaderBag,
  ResponseMetadata as __ResponseMetadata,
  SerdeContext as __SerdeContext,
} from "@smithy/types";
import { XMLParser } from "fast-xml-parser";
import { v4 as generateIdempotencyToken } from "uuid";

import {
  AcceptAddressTransferCommandInput,
  AcceptAddressTransferCommandOutput,
} from "../commands/AcceptAddressTransferCommand";
import {
  AcceptReservedInstancesExchangeQuoteCommandInput,
  AcceptReservedInstancesExchangeQuoteCommandOutput,
} from "../commands/AcceptReservedInstancesExchangeQuoteCommand";
import {
  AcceptTransitGatewayMulticastDomainAssociationsCommandInput,
  AcceptTransitGatewayMulticastDomainAssociationsCommandOutput,
} from "../commands/AcceptTransitGatewayMulticastDomainAssociationsCommand";
import {
  AcceptTransitGatewayPeeringAttachmentCommandInput,
  AcceptTransitGatewayPeeringAttachmentCommandOutput,
} from "../commands/AcceptTransitGatewayPeeringAttachmentCommand";
import {
  AcceptTransitGatewayVpcAttachmentCommandInput,
  AcceptTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/AcceptTransitGatewayVpcAttachmentCommand";
import {
  AcceptVpcEndpointConnectionsCommandInput,
  AcceptVpcEndpointConnectionsCommandOutput,
} from "../commands/AcceptVpcEndpointConnectionsCommand";
import {
  AcceptVpcPeeringConnectionCommandInput,
  AcceptVpcPeeringConnectionCommandOutput,
} from "../commands/AcceptVpcPeeringConnectionCommand";
import { AdvertiseByoipCidrCommandInput, AdvertiseByoipCidrCommandOutput } from "../commands/AdvertiseByoipCidrCommand";
import { AllocateAddressCommandInput, AllocateAddressCommandOutput } from "../commands/AllocateAddressCommand";
import { AllocateHostsCommandInput, AllocateHostsCommandOutput } from "../commands/AllocateHostsCommand";
import {
  AllocateIpamPoolCidrCommandInput,
  AllocateIpamPoolCidrCommandOutput,
} from "../commands/AllocateIpamPoolCidrCommand";
import {
  ApplySecurityGroupsToClientVpnTargetNetworkCommandInput,
  ApplySecurityGroupsToClientVpnTargetNetworkCommandOutput,
} from "../commands/ApplySecurityGroupsToClientVpnTargetNetworkCommand";
import {
  AssignIpv6AddressesCommandInput,
  AssignIpv6AddressesCommandOutput,
} from "../commands/AssignIpv6AddressesCommand";
import {
  AssignPrivateIpAddressesCommandInput,
  AssignPrivateIpAddressesCommandOutput,
} from "../commands/AssignPrivateIpAddressesCommand";
import {
  AssignPrivateNatGatewayAddressCommandInput,
  AssignPrivateNatGatewayAddressCommandOutput,
} from "../commands/AssignPrivateNatGatewayAddressCommand";
import { AssociateAddressCommandInput, AssociateAddressCommandOutput } from "../commands/AssociateAddressCommand";
import {
  AssociateClientVpnTargetNetworkCommandInput,
  AssociateClientVpnTargetNetworkCommandOutput,
} from "../commands/AssociateClientVpnTargetNetworkCommand";
import {
  AssociateDhcpOptionsCommandInput,
  AssociateDhcpOptionsCommandOutput,
} from "../commands/AssociateDhcpOptionsCommand";
import {
  AssociateEnclaveCertificateIamRoleCommandInput,
  AssociateEnclaveCertificateIamRoleCommandOutput,
} from "../commands/AssociateEnclaveCertificateIamRoleCommand";
import {
  AssociateIamInstanceProfileCommandInput,
  AssociateIamInstanceProfileCommandOutput,
} from "../commands/AssociateIamInstanceProfileCommand";
import {
  AssociateInstanceEventWindowCommandInput,
  AssociateInstanceEventWindowCommandOutput,
} from "../commands/AssociateInstanceEventWindowCommand";
import {
  AssociateIpamResourceDiscoveryCommandInput,
  AssociateIpamResourceDiscoveryCommandOutput,
} from "../commands/AssociateIpamResourceDiscoveryCommand";
import {
  AssociateNatGatewayAddressCommandInput,
  AssociateNatGatewayAddressCommandOutput,
} from "../commands/AssociateNatGatewayAddressCommand";
import {
  AssociateRouteTableCommandInput,
  AssociateRouteTableCommandOutput,
} from "../commands/AssociateRouteTableCommand";
import {
  AssociateSubnetCidrBlockCommandInput,
  AssociateSubnetCidrBlockCommandOutput,
} from "../commands/AssociateSubnetCidrBlockCommand";
import {
  AssociateTransitGatewayMulticastDomainCommandInput,
  AssociateTransitGatewayMulticastDomainCommandOutput,
} from "../commands/AssociateTransitGatewayMulticastDomainCommand";
import {
  AssociateTransitGatewayPolicyTableCommandInput,
  AssociateTransitGatewayPolicyTableCommandOutput,
} from "../commands/AssociateTransitGatewayPolicyTableCommand";
import {
  AssociateTransitGatewayRouteTableCommandInput,
  AssociateTransitGatewayRouteTableCommandOutput,
} from "../commands/AssociateTransitGatewayRouteTableCommand";
import {
  AssociateTrunkInterfaceCommandInput,
  AssociateTrunkInterfaceCommandOutput,
} from "../commands/AssociateTrunkInterfaceCommand";
import {
  AssociateVpcCidrBlockCommandInput,
  AssociateVpcCidrBlockCommandOutput,
} from "../commands/AssociateVpcCidrBlockCommand";
import {
  AttachClassicLinkVpcCommandInput,
  AttachClassicLinkVpcCommandOutput,
} from "../commands/AttachClassicLinkVpcCommand";
import {
  AttachInternetGatewayCommandInput,
  AttachInternetGatewayCommandOutput,
} from "../commands/AttachInternetGatewayCommand";
import {
  AttachNetworkInterfaceCommandInput,
  AttachNetworkInterfaceCommandOutput,
} from "../commands/AttachNetworkInterfaceCommand";
import {
  AttachVerifiedAccessTrustProviderCommandInput,
  AttachVerifiedAccessTrustProviderCommandOutput,
} from "../commands/AttachVerifiedAccessTrustProviderCommand";
import { AttachVolumeCommandInput, AttachVolumeCommandOutput } from "../commands/AttachVolumeCommand";
import { AttachVpnGatewayCommandInput, AttachVpnGatewayCommandOutput } from "../commands/AttachVpnGatewayCommand";
import {
  AuthorizeClientVpnIngressCommandInput,
  AuthorizeClientVpnIngressCommandOutput,
} from "../commands/AuthorizeClientVpnIngressCommand";
import {
  AuthorizeSecurityGroupEgressCommandInput,
  AuthorizeSecurityGroupEgressCommandOutput,
} from "../commands/AuthorizeSecurityGroupEgressCommand";
import {
  AuthorizeSecurityGroupIngressCommandInput,
  AuthorizeSecurityGroupIngressCommandOutput,
} from "../commands/AuthorizeSecurityGroupIngressCommand";
import { BundleInstanceCommandInput, BundleInstanceCommandOutput } from "../commands/BundleInstanceCommand";
import { CancelBundleTaskCommandInput, CancelBundleTaskCommandOutput } from "../commands/CancelBundleTaskCommand";
import {
  CancelCapacityReservationCommandInput,
  CancelCapacityReservationCommandOutput,
} from "../commands/CancelCapacityReservationCommand";
import {
  CancelCapacityReservationFleetsCommandInput,
  CancelCapacityReservationFleetsCommandOutput,
} from "../commands/CancelCapacityReservationFleetsCommand";
import {
  CancelConversionTaskCommandInput,
  CancelConversionTaskCommandOutput,
} from "../commands/CancelConversionTaskCommand";
import { CancelExportTaskCommandInput, CancelExportTaskCommandOutput } from "../commands/CancelExportTaskCommand";
import {
  CancelImageLaunchPermissionCommandInput,
  CancelImageLaunchPermissionCommandOutput,
} from "../commands/CancelImageLaunchPermissionCommand";
import { CancelImportTaskCommandInput, CancelImportTaskCommandOutput } from "../commands/CancelImportTaskCommand";
import {
  CancelReservedInstancesListingCommandInput,
  CancelReservedInstancesListingCommandOutput,
} from "../commands/CancelReservedInstancesListingCommand";
import {
  CancelSpotFleetRequestsCommandInput,
  CancelSpotFleetRequestsCommandOutput,
} from "../commands/CancelSpotFleetRequestsCommand";
import {
  CancelSpotInstanceRequestsCommandInput,
  CancelSpotInstanceRequestsCommandOutput,
} from "../commands/CancelSpotInstanceRequestsCommand";
import {
  ConfirmProductInstanceCommandInput,
  ConfirmProductInstanceCommandOutput,
} from "../commands/ConfirmProductInstanceCommand";
import { CopyFpgaImageCommandInput, CopyFpgaImageCommandOutput } from "../commands/CopyFpgaImageCommand";
import { CopyImageCommandInput, CopyImageCommandOutput } from "../commands/CopyImageCommand";
import { CopySnapshotCommandInput, CopySnapshotCommandOutput } from "../commands/CopySnapshotCommand";
import {
  CreateCapacityReservationCommandInput,
  CreateCapacityReservationCommandOutput,
} from "../commands/CreateCapacityReservationCommand";
import {
  CreateCapacityReservationFleetCommandInput,
  CreateCapacityReservationFleetCommandOutput,
} from "../commands/CreateCapacityReservationFleetCommand";
import {
  CreateCarrierGatewayCommandInput,
  CreateCarrierGatewayCommandOutput,
} from "../commands/CreateCarrierGatewayCommand";
import {
  CreateClientVpnEndpointCommandInput,
  CreateClientVpnEndpointCommandOutput,
} from "../commands/CreateClientVpnEndpointCommand";
import {
  CreateClientVpnRouteCommandInput,
  CreateClientVpnRouteCommandOutput,
} from "../commands/CreateClientVpnRouteCommand";
import { CreateCoipCidrCommandInput, CreateCoipCidrCommandOutput } from "../commands/CreateCoipCidrCommand";
import { CreateCoipPoolCommandInput, CreateCoipPoolCommandOutput } from "../commands/CreateCoipPoolCommand";
import {
  CreateCustomerGatewayCommandInput,
  CreateCustomerGatewayCommandOutput,
} from "../commands/CreateCustomerGatewayCommand";
import {
  CreateDefaultSubnetCommandInput,
  CreateDefaultSubnetCommandOutput,
} from "../commands/CreateDefaultSubnetCommand";
import { CreateDefaultVpcCommandInput, CreateDefaultVpcCommandOutput } from "../commands/CreateDefaultVpcCommand";
import { CreateDhcpOptionsCommandInput, CreateDhcpOptionsCommandOutput } from "../commands/CreateDhcpOptionsCommand";
import {
  CreateEgressOnlyInternetGatewayCommandInput,
  CreateEgressOnlyInternetGatewayCommandOutput,
} from "../commands/CreateEgressOnlyInternetGatewayCommand";
import { CreateFleetCommandInput, CreateFleetCommandOutput } from "../commands/CreateFleetCommand";
import { CreateFlowLogsCommandInput, CreateFlowLogsCommandOutput } from "../commands/CreateFlowLogsCommand";
import { CreateFpgaImageCommandInput, CreateFpgaImageCommandOutput } from "../commands/CreateFpgaImageCommand";
import { CreateImageCommandInput, CreateImageCommandOutput } from "../commands/CreateImageCommand";
import {
  CreateInstanceConnectEndpointCommandInput,
  CreateInstanceConnectEndpointCommandOutput,
} from "../commands/CreateInstanceConnectEndpointCommand";
import {
  CreateInstanceEventWindowCommandInput,
  CreateInstanceEventWindowCommandOutput,
} from "../commands/CreateInstanceEventWindowCommand";
import {
  CreateInstanceExportTaskCommandInput,
  CreateInstanceExportTaskCommandOutput,
} from "../commands/CreateInstanceExportTaskCommand";
import {
  CreateInternetGatewayCommandInput,
  CreateInternetGatewayCommandOutput,
} from "../commands/CreateInternetGatewayCommand";
import { CreateIpamCommandInput, CreateIpamCommandOutput } from "../commands/CreateIpamCommand";
import { CreateIpamPoolCommandInput, CreateIpamPoolCommandOutput } from "../commands/CreateIpamPoolCommand";
import {
  CreateIpamResourceDiscoveryCommandInput,
  CreateIpamResourceDiscoveryCommandOutput,
} from "../commands/CreateIpamResourceDiscoveryCommand";
import { CreateIpamScopeCommandInput, CreateIpamScopeCommandOutput } from "../commands/CreateIpamScopeCommand";
import { CreateKeyPairCommandInput, CreateKeyPairCommandOutput } from "../commands/CreateKeyPairCommand";
import {
  CreateLaunchTemplateCommandInput,
  CreateLaunchTemplateCommandOutput,
} from "../commands/CreateLaunchTemplateCommand";
import {
  CreateLaunchTemplateVersionCommandInput,
  CreateLaunchTemplateVersionCommandOutput,
} from "../commands/CreateLaunchTemplateVersionCommand";
import {
  CreateLocalGatewayRouteCommandInput,
  CreateLocalGatewayRouteCommandOutput,
} from "../commands/CreateLocalGatewayRouteCommand";
import {
  CreateLocalGatewayRouteTableCommandInput,
  CreateLocalGatewayRouteTableCommandOutput,
} from "../commands/CreateLocalGatewayRouteTableCommand";
import {
  CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandInput,
  CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput,
} from "../commands/CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand";
import {
  CreateLocalGatewayRouteTableVpcAssociationCommandInput,
  CreateLocalGatewayRouteTableVpcAssociationCommandOutput,
} from "../commands/CreateLocalGatewayRouteTableVpcAssociationCommand";
import {
  CreateManagedPrefixListCommandInput,
  CreateManagedPrefixListCommandOutput,
} from "../commands/CreateManagedPrefixListCommand";
import { CreateNatGatewayCommandInput, CreateNatGatewayCommandOutput } from "../commands/CreateNatGatewayCommand";
import { CreateNetworkAclCommandInput, CreateNetworkAclCommandOutput } from "../commands/CreateNetworkAclCommand";
import {
  CreateNetworkAclEntryCommandInput,
  CreateNetworkAclEntryCommandOutput,
} from "../commands/CreateNetworkAclEntryCommand";
import {
  CreateNetworkInsightsAccessScopeCommandInput,
  CreateNetworkInsightsAccessScopeCommandOutput,
} from "../commands/CreateNetworkInsightsAccessScopeCommand";
import {
  CreateNetworkInsightsPathCommandInput,
  CreateNetworkInsightsPathCommandOutput,
} from "../commands/CreateNetworkInsightsPathCommand";
import {
  CreateNetworkInterfaceCommandInput,
  CreateNetworkInterfaceCommandOutput,
} from "../commands/CreateNetworkInterfaceCommand";
import {
  CreateNetworkInterfacePermissionCommandInput,
  CreateNetworkInterfacePermissionCommandOutput,
} from "../commands/CreateNetworkInterfacePermissionCommand";
import {
  CreatePlacementGroupCommandInput,
  CreatePlacementGroupCommandOutput,
} from "../commands/CreatePlacementGroupCommand";
import {
  CreatePublicIpv4PoolCommandInput,
  CreatePublicIpv4PoolCommandOutput,
} from "../commands/CreatePublicIpv4PoolCommand";
import {
  CreateReplaceRootVolumeTaskCommandInput,
  CreateReplaceRootVolumeTaskCommandOutput,
} from "../commands/CreateReplaceRootVolumeTaskCommand";
import {
  CreateReservedInstancesListingCommandInput,
  CreateReservedInstancesListingCommandOutput,
} from "../commands/CreateReservedInstancesListingCommand";
import {
  CreateRestoreImageTaskCommandInput,
  CreateRestoreImageTaskCommandOutput,
} from "../commands/CreateRestoreImageTaskCommand";
import { CreateRouteCommandInput, CreateRouteCommandOutput } from "../commands/CreateRouteCommand";
import { CreateRouteTableCommandInput, CreateRouteTableCommandOutput } from "../commands/CreateRouteTableCommand";
import {
  CreateSecurityGroupCommandInput,
  CreateSecurityGroupCommandOutput,
} from "../commands/CreateSecurityGroupCommand";
import { CreateSnapshotCommandInput, CreateSnapshotCommandOutput } from "../commands/CreateSnapshotCommand";
import { CreateSnapshotsCommandInput, CreateSnapshotsCommandOutput } from "../commands/CreateSnapshotsCommand";
import {
  CreateSpotDatafeedSubscriptionCommandInput,
  CreateSpotDatafeedSubscriptionCommandOutput,
} from "../commands/CreateSpotDatafeedSubscriptionCommand";
import {
  CreateStoreImageTaskCommandInput,
  CreateStoreImageTaskCommandOutput,
} from "../commands/CreateStoreImageTaskCommand";
import {
  CreateSubnetCidrReservationCommandInput,
  CreateSubnetCidrReservationCommandOutput,
} from "../commands/CreateSubnetCidrReservationCommand";
import { CreateSubnetCommandInput, CreateSubnetCommandOutput } from "../commands/CreateSubnetCommand";
import { CreateTagsCommandInput, CreateTagsCommandOutput } from "../commands/CreateTagsCommand";
import {
  CreateTrafficMirrorFilterCommandInput,
  CreateTrafficMirrorFilterCommandOutput,
} from "../commands/CreateTrafficMirrorFilterCommand";
import {
  CreateTrafficMirrorFilterRuleCommandInput,
  CreateTrafficMirrorFilterRuleCommandOutput,
} from "../commands/CreateTrafficMirrorFilterRuleCommand";
import {
  CreateTrafficMirrorSessionCommandInput,
  CreateTrafficMirrorSessionCommandOutput,
} from "../commands/CreateTrafficMirrorSessionCommand";
import {
  CreateTrafficMirrorTargetCommandInput,
  CreateTrafficMirrorTargetCommandOutput,
} from "../commands/CreateTrafficMirrorTargetCommand";
import {
  CreateTransitGatewayCommandInput,
  CreateTransitGatewayCommandOutput,
} from "../commands/CreateTransitGatewayCommand";
import {
  CreateTransitGatewayConnectCommandInput,
  CreateTransitGatewayConnectCommandOutput,
} from "../commands/CreateTransitGatewayConnectCommand";
import {
  CreateTransitGatewayConnectPeerCommandInput,
  CreateTransitGatewayConnectPeerCommandOutput,
} from "../commands/CreateTransitGatewayConnectPeerCommand";
import {
  CreateTransitGatewayMulticastDomainCommandInput,
  CreateTransitGatewayMulticastDomainCommandOutput,
} from "../commands/CreateTransitGatewayMulticastDomainCommand";
import {
  CreateTransitGatewayPeeringAttachmentCommandInput,
  CreateTransitGatewayPeeringAttachmentCommandOutput,
} from "../commands/CreateTransitGatewayPeeringAttachmentCommand";
import {
  CreateTransitGatewayPolicyTableCommandInput,
  CreateTransitGatewayPolicyTableCommandOutput,
} from "../commands/CreateTransitGatewayPolicyTableCommand";
import {
  CreateTransitGatewayPrefixListReferenceCommandInput,
  CreateTransitGatewayPrefixListReferenceCommandOutput,
} from "../commands/CreateTransitGatewayPrefixListReferenceCommand";
import {
  CreateTransitGatewayRouteCommandInput,
  CreateTransitGatewayRouteCommandOutput,
} from "../commands/CreateTransitGatewayRouteCommand";
import {
  CreateTransitGatewayRouteTableAnnouncementCommandInput,
  CreateTransitGatewayRouteTableAnnouncementCommandOutput,
} from "../commands/CreateTransitGatewayRouteTableAnnouncementCommand";
import {
  CreateTransitGatewayRouteTableCommandInput,
  CreateTransitGatewayRouteTableCommandOutput,
} from "../commands/CreateTransitGatewayRouteTableCommand";
import {
  CreateTransitGatewayVpcAttachmentCommandInput,
  CreateTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/CreateTransitGatewayVpcAttachmentCommand";
import {
  CreateVerifiedAccessEndpointCommandInput,
  CreateVerifiedAccessEndpointCommandOutput,
} from "../commands/CreateVerifiedAccessEndpointCommand";
import {
  CreateVerifiedAccessGroupCommandInput,
  CreateVerifiedAccessGroupCommandOutput,
} from "../commands/CreateVerifiedAccessGroupCommand";
import {
  CreateVerifiedAccessInstanceCommandInput,
  CreateVerifiedAccessInstanceCommandOutput,
} from "../commands/CreateVerifiedAccessInstanceCommand";
import {
  CreateVerifiedAccessTrustProviderCommandInput,
  CreateVerifiedAccessTrustProviderCommandOutput,
} from "../commands/CreateVerifiedAccessTrustProviderCommand";
import { CreateVolumeCommandInput, CreateVolumeCommandOutput } from "../commands/CreateVolumeCommand";
import { CreateVpcCommandInput, CreateVpcCommandOutput } from "../commands/CreateVpcCommand";
import { CreateVpcEndpointCommandInput, CreateVpcEndpointCommandOutput } from "../commands/CreateVpcEndpointCommand";
import {
  CreateVpcEndpointConnectionNotificationCommandInput,
  CreateVpcEndpointConnectionNotificationCommandOutput,
} from "../commands/CreateVpcEndpointConnectionNotificationCommand";
import {
  CreateVpcEndpointServiceConfigurationCommandInput,
  CreateVpcEndpointServiceConfigurationCommandOutput,
} from "../commands/CreateVpcEndpointServiceConfigurationCommand";
import {
  CreateVpcPeeringConnectionCommandInput,
  CreateVpcPeeringConnectionCommandOutput,
} from "../commands/CreateVpcPeeringConnectionCommand";
import {
  CreateVpnConnectionCommandInput,
  CreateVpnConnectionCommandOutput,
} from "../commands/CreateVpnConnectionCommand";
import {
  CreateVpnConnectionRouteCommandInput,
  CreateVpnConnectionRouteCommandOutput,
} from "../commands/CreateVpnConnectionRouteCommand";
import { CreateVpnGatewayCommandInput, CreateVpnGatewayCommandOutput } from "../commands/CreateVpnGatewayCommand";
import {
  DeleteCarrierGatewayCommandInput,
  DeleteCarrierGatewayCommandOutput,
} from "../commands/DeleteCarrierGatewayCommand";
import {
  DeleteClientVpnEndpointCommandInput,
  DeleteClientVpnEndpointCommandOutput,
} from "../commands/DeleteClientVpnEndpointCommand";
import {
  DeleteClientVpnRouteCommandInput,
  DeleteClientVpnRouteCommandOutput,
} from "../commands/DeleteClientVpnRouteCommand";
import { DeleteCoipCidrCommandInput, DeleteCoipCidrCommandOutput } from "../commands/DeleteCoipCidrCommand";
import { DeleteCoipPoolCommandInput, DeleteCoipPoolCommandOutput } from "../commands/DeleteCoipPoolCommand";
import {
  DeleteCustomerGatewayCommandInput,
  DeleteCustomerGatewayCommandOutput,
} from "../commands/DeleteCustomerGatewayCommand";
import { DeleteDhcpOptionsCommandInput, DeleteDhcpOptionsCommandOutput } from "../commands/DeleteDhcpOptionsCommand";
import {
  DeleteEgressOnlyInternetGatewayCommandInput,
  DeleteEgressOnlyInternetGatewayCommandOutput,
} from "../commands/DeleteEgressOnlyInternetGatewayCommand";
import { DeleteFleetsCommandInput, DeleteFleetsCommandOutput } from "../commands/DeleteFleetsCommand";
import { DeleteFlowLogsCommandInput, DeleteFlowLogsCommandOutput } from "../commands/DeleteFlowLogsCommand";
import { DeleteFpgaImageCommandInput, DeleteFpgaImageCommandOutput } from "../commands/DeleteFpgaImageCommand";
import {
  DeleteInstanceConnectEndpointCommandInput,
  DeleteInstanceConnectEndpointCommandOutput,
} from "../commands/DeleteInstanceConnectEndpointCommand";
import {
  DeleteInstanceEventWindowCommandInput,
  DeleteInstanceEventWindowCommandOutput,
} from "../commands/DeleteInstanceEventWindowCommand";
import {
  DeleteInternetGatewayCommandInput,
  DeleteInternetGatewayCommandOutput,
} from "../commands/DeleteInternetGatewayCommand";
import { DeleteIpamCommandInput, DeleteIpamCommandOutput } from "../commands/DeleteIpamCommand";
import { DeleteIpamPoolCommandInput, DeleteIpamPoolCommandOutput } from "../commands/DeleteIpamPoolCommand";
import {
  DeleteIpamResourceDiscoveryCommandInput,
  DeleteIpamResourceDiscoveryCommandOutput,
} from "../commands/DeleteIpamResourceDiscoveryCommand";
import { DeleteIpamScopeCommandInput, DeleteIpamScopeCommandOutput } from "../commands/DeleteIpamScopeCommand";
import { DeleteKeyPairCommandInput, DeleteKeyPairCommandOutput } from "../commands/DeleteKeyPairCommand";
import {
  DeleteLaunchTemplateCommandInput,
  DeleteLaunchTemplateCommandOutput,
} from "../commands/DeleteLaunchTemplateCommand";
import {
  DeleteLaunchTemplateVersionsCommandInput,
  DeleteLaunchTemplateVersionsCommandOutput,
} from "../commands/DeleteLaunchTemplateVersionsCommand";
import {
  DeleteLocalGatewayRouteCommandInput,
  DeleteLocalGatewayRouteCommandOutput,
} from "../commands/DeleteLocalGatewayRouteCommand";
import {
  DeleteLocalGatewayRouteTableCommandInput,
  DeleteLocalGatewayRouteTableCommandOutput,
} from "../commands/DeleteLocalGatewayRouteTableCommand";
import {
  DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandInput,
  DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput,
} from "../commands/DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand";
import {
  DeleteLocalGatewayRouteTableVpcAssociationCommandInput,
  DeleteLocalGatewayRouteTableVpcAssociationCommandOutput,
} from "../commands/DeleteLocalGatewayRouteTableVpcAssociationCommand";
import {
  DeleteManagedPrefixListCommandInput,
  DeleteManagedPrefixListCommandOutput,
} from "../commands/DeleteManagedPrefixListCommand";
import { DeleteNatGatewayCommandInput, DeleteNatGatewayCommandOutput } from "../commands/DeleteNatGatewayCommand";
import { DeleteNetworkAclCommandInput, DeleteNetworkAclCommandOutput } from "../commands/DeleteNetworkAclCommand";
import {
  DeleteNetworkAclEntryCommandInput,
  DeleteNetworkAclEntryCommandOutput,
} from "../commands/DeleteNetworkAclEntryCommand";
import {
  DeleteNetworkInsightsAccessScopeAnalysisCommandInput,
  DeleteNetworkInsightsAccessScopeAnalysisCommandOutput,
} from "../commands/DeleteNetworkInsightsAccessScopeAnalysisCommand";
import {
  DeleteNetworkInsightsAccessScopeCommandInput,
  DeleteNetworkInsightsAccessScopeCommandOutput,
} from "../commands/DeleteNetworkInsightsAccessScopeCommand";
import {
  DeleteNetworkInsightsAnalysisCommandInput,
  DeleteNetworkInsightsAnalysisCommandOutput,
} from "../commands/DeleteNetworkInsightsAnalysisCommand";
import {
  DeleteNetworkInsightsPathCommandInput,
  DeleteNetworkInsightsPathCommandOutput,
} from "../commands/DeleteNetworkInsightsPathCommand";
import {
  DeleteNetworkInterfaceCommandInput,
  DeleteNetworkInterfaceCommandOutput,
} from "../commands/DeleteNetworkInterfaceCommand";
import {
  DeleteNetworkInterfacePermissionCommandInput,
  DeleteNetworkInterfacePermissionCommandOutput,
} from "../commands/DeleteNetworkInterfacePermissionCommand";
import {
  DeletePlacementGroupCommandInput,
  DeletePlacementGroupCommandOutput,
} from "../commands/DeletePlacementGroupCommand";
import {
  DeletePublicIpv4PoolCommandInput,
  DeletePublicIpv4PoolCommandOutput,
} from "../commands/DeletePublicIpv4PoolCommand";
import {
  DeleteQueuedReservedInstancesCommandInput,
  DeleteQueuedReservedInstancesCommandOutput,
} from "../commands/DeleteQueuedReservedInstancesCommand";
import { DeleteRouteCommandInput, DeleteRouteCommandOutput } from "../commands/DeleteRouteCommand";
import { DeleteRouteTableCommandInput, DeleteRouteTableCommandOutput } from "../commands/DeleteRouteTableCommand";
import {
  DeleteSecurityGroupCommandInput,
  DeleteSecurityGroupCommandOutput,
} from "../commands/DeleteSecurityGroupCommand";
import { DeleteSnapshotCommandInput, DeleteSnapshotCommandOutput } from "../commands/DeleteSnapshotCommand";
import {
  DeleteSpotDatafeedSubscriptionCommandInput,
  DeleteSpotDatafeedSubscriptionCommandOutput,
} from "../commands/DeleteSpotDatafeedSubscriptionCommand";
import {
  DeleteSubnetCidrReservationCommandInput,
  DeleteSubnetCidrReservationCommandOutput,
} from "../commands/DeleteSubnetCidrReservationCommand";
import { DeleteSubnetCommandInput, DeleteSubnetCommandOutput } from "../commands/DeleteSubnetCommand";
import { DeleteTagsCommandInput, DeleteTagsCommandOutput } from "../commands/DeleteTagsCommand";
import {
  DeleteTrafficMirrorFilterCommandInput,
  DeleteTrafficMirrorFilterCommandOutput,
} from "../commands/DeleteTrafficMirrorFilterCommand";
import {
  DeleteTrafficMirrorFilterRuleCommandInput,
  DeleteTrafficMirrorFilterRuleCommandOutput,
} from "../commands/DeleteTrafficMirrorFilterRuleCommand";
import {
  DeleteTrafficMirrorSessionCommandInput,
  DeleteTrafficMirrorSessionCommandOutput,
} from "../commands/DeleteTrafficMirrorSessionCommand";
import {
  DeleteTrafficMirrorTargetCommandInput,
  DeleteTrafficMirrorTargetCommandOutput,
} from "../commands/DeleteTrafficMirrorTargetCommand";
import {
  DeleteTransitGatewayCommandInput,
  DeleteTransitGatewayCommandOutput,
} from "../commands/DeleteTransitGatewayCommand";
import {
  DeleteTransitGatewayConnectCommandInput,
  DeleteTransitGatewayConnectCommandOutput,
} from "../commands/DeleteTransitGatewayConnectCommand";
import {
  DeleteTransitGatewayConnectPeerCommandInput,
  DeleteTransitGatewayConnectPeerCommandOutput,
} from "../commands/DeleteTransitGatewayConnectPeerCommand";
import {
  DeleteTransitGatewayMulticastDomainCommandInput,
  DeleteTransitGatewayMulticastDomainCommandOutput,
} from "../commands/DeleteTransitGatewayMulticastDomainCommand";
import {
  DeleteTransitGatewayPeeringAttachmentCommandInput,
  DeleteTransitGatewayPeeringAttachmentCommandOutput,
} from "../commands/DeleteTransitGatewayPeeringAttachmentCommand";
import {
  DeleteTransitGatewayPolicyTableCommandInput,
  DeleteTransitGatewayPolicyTableCommandOutput,
} from "../commands/DeleteTransitGatewayPolicyTableCommand";
import {
  DeleteTransitGatewayPrefixListReferenceCommandInput,
  DeleteTransitGatewayPrefixListReferenceCommandOutput,
} from "../commands/DeleteTransitGatewayPrefixListReferenceCommand";
import {
  DeleteTransitGatewayRouteCommandInput,
  DeleteTransitGatewayRouteCommandOutput,
} from "../commands/DeleteTransitGatewayRouteCommand";
import {
  DeleteTransitGatewayRouteTableAnnouncementCommandInput,
  DeleteTransitGatewayRouteTableAnnouncementCommandOutput,
} from "../commands/DeleteTransitGatewayRouteTableAnnouncementCommand";
import {
  DeleteTransitGatewayRouteTableCommandInput,
  DeleteTransitGatewayRouteTableCommandOutput,
} from "../commands/DeleteTransitGatewayRouteTableCommand";
import {
  DeleteTransitGatewayVpcAttachmentCommandInput,
  DeleteTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/DeleteTransitGatewayVpcAttachmentCommand";
import {
  DeleteVerifiedAccessEndpointCommandInput,
  DeleteVerifiedAccessEndpointCommandOutput,
} from "../commands/DeleteVerifiedAccessEndpointCommand";
import {
  DeleteVerifiedAccessGroupCommandInput,
  DeleteVerifiedAccessGroupCommandOutput,
} from "../commands/DeleteVerifiedAccessGroupCommand";
import {
  DeleteVerifiedAccessInstanceCommandInput,
  DeleteVerifiedAccessInstanceCommandOutput,
} from "../commands/DeleteVerifiedAccessInstanceCommand";
import {
  DeleteVerifiedAccessTrustProviderCommandInput,
  DeleteVerifiedAccessTrustProviderCommandOutput,
} from "../commands/DeleteVerifiedAccessTrustProviderCommand";
import { DeleteVolumeCommandInput, DeleteVolumeCommandOutput } from "../commands/DeleteVolumeCommand";
import { DeleteVpcCommandInput, DeleteVpcCommandOutput } from "../commands/DeleteVpcCommand";
import {
  DeleteVpcEndpointConnectionNotificationsCommandInput,
  DeleteVpcEndpointConnectionNotificationsCommandOutput,
} from "../commands/DeleteVpcEndpointConnectionNotificationsCommand";
import { DeleteVpcEndpointsCommandInput, DeleteVpcEndpointsCommandOutput } from "../commands/DeleteVpcEndpointsCommand";
import {
  DeleteVpcEndpointServiceConfigurationsCommandInput,
  DeleteVpcEndpointServiceConfigurationsCommandOutput,
} from "../commands/DeleteVpcEndpointServiceConfigurationsCommand";
import {
  DeleteVpcPeeringConnectionCommandInput,
  DeleteVpcPeeringConnectionCommandOutput,
} from "../commands/DeleteVpcPeeringConnectionCommand";
import {
  DeleteVpnConnectionCommandInput,
  DeleteVpnConnectionCommandOutput,
} from "../commands/DeleteVpnConnectionCommand";
import {
  DeleteVpnConnectionRouteCommandInput,
  DeleteVpnConnectionRouteCommandOutput,
} from "../commands/DeleteVpnConnectionRouteCommand";
import { DeleteVpnGatewayCommandInput, DeleteVpnGatewayCommandOutput } from "../commands/DeleteVpnGatewayCommand";
import {
  DeprovisionByoipCidrCommandInput,
  DeprovisionByoipCidrCommandOutput,
} from "../commands/DeprovisionByoipCidrCommand";
import {
  DeprovisionIpamPoolCidrCommandInput,
  DeprovisionIpamPoolCidrCommandOutput,
} from "../commands/DeprovisionIpamPoolCidrCommand";
import {
  DeprovisionPublicIpv4PoolCidrCommandInput,
  DeprovisionPublicIpv4PoolCidrCommandOutput,
} from "../commands/DeprovisionPublicIpv4PoolCidrCommand";
import { DeregisterImageCommandInput, DeregisterImageCommandOutput } from "../commands/DeregisterImageCommand";
import {
  DeregisterInstanceEventNotificationAttributesCommandInput,
  DeregisterInstanceEventNotificationAttributesCommandOutput,
} from "../commands/DeregisterInstanceEventNotificationAttributesCommand";
import {
  DeregisterTransitGatewayMulticastGroupMembersCommandInput,
  DeregisterTransitGatewayMulticastGroupMembersCommandOutput,
} from "../commands/DeregisterTransitGatewayMulticastGroupMembersCommand";
import {
  DeregisterTransitGatewayMulticastGroupSourcesCommandInput,
  DeregisterTransitGatewayMulticastGroupSourcesCommandOutput,
} from "../commands/DeregisterTransitGatewayMulticastGroupSourcesCommand";
import {
  DescribeAccountAttributesCommandInput,
  DescribeAccountAttributesCommandOutput,
} from "../commands/DescribeAccountAttributesCommand";
import {
  DescribeAddressesAttributeCommandInput,
  DescribeAddressesAttributeCommandOutput,
} from "../commands/DescribeAddressesAttributeCommand";
import { DescribeAddressesCommandInput, DescribeAddressesCommandOutput } from "../commands/DescribeAddressesCommand";
import {
  DescribeAddressTransfersCommandInput,
  DescribeAddressTransfersCommandOutput,
} from "../commands/DescribeAddressTransfersCommand";
import {
  DescribeAggregateIdFormatCommandInput,
  DescribeAggregateIdFormatCommandOutput,
} from "../commands/DescribeAggregateIdFormatCommand";
import {
  DescribeAvailabilityZonesCommandInput,
  DescribeAvailabilityZonesCommandOutput,
} from "../commands/DescribeAvailabilityZonesCommand";
import {
  DescribeAwsNetworkPerformanceMetricSubscriptionsCommandInput,
  DescribeAwsNetworkPerformanceMetricSubscriptionsCommandOutput,
} from "../commands/DescribeAwsNetworkPerformanceMetricSubscriptionsCommand";
import {
  DescribeBundleTasksCommandInput,
  DescribeBundleTasksCommandOutput,
} from "../commands/DescribeBundleTasksCommand";
import { DescribeByoipCidrsCommandInput, DescribeByoipCidrsCommandOutput } from "../commands/DescribeByoipCidrsCommand";
import {
  DescribeCapacityReservationFleetsCommandInput,
  DescribeCapacityReservationFleetsCommandOutput,
} from "../commands/DescribeCapacityReservationFleetsCommand";
import {
  DescribeCapacityReservationsCommandInput,
  DescribeCapacityReservationsCommandOutput,
} from "../commands/DescribeCapacityReservationsCommand";
import {
  DescribeCarrierGatewaysCommandInput,
  DescribeCarrierGatewaysCommandOutput,
} from "../commands/DescribeCarrierGatewaysCommand";
import {
  DescribeClassicLinkInstancesCommandInput,
  DescribeClassicLinkInstancesCommandOutput,
} from "../commands/DescribeClassicLinkInstancesCommand";
import {
  DescribeClientVpnAuthorizationRulesCommandInput,
  DescribeClientVpnAuthorizationRulesCommandOutput,
} from "../commands/DescribeClientVpnAuthorizationRulesCommand";
import {
  DescribeClientVpnConnectionsCommandInput,
  DescribeClientVpnConnectionsCommandOutput,
} from "../commands/DescribeClientVpnConnectionsCommand";
import {
  DescribeClientVpnEndpointsCommandInput,
  DescribeClientVpnEndpointsCommandOutput,
} from "../commands/DescribeClientVpnEndpointsCommand";
import {
  DescribeClientVpnRoutesCommandInput,
  DescribeClientVpnRoutesCommandOutput,
} from "../commands/DescribeClientVpnRoutesCommand";
import {
  DescribeClientVpnTargetNetworksCommandInput,
  DescribeClientVpnTargetNetworksCommandOutput,
} from "../commands/DescribeClientVpnTargetNetworksCommand";
import { DescribeCoipPoolsCommandInput, DescribeCoipPoolsCommandOutput } from "../commands/DescribeCoipPoolsCommand";
import {
  DescribeConversionTasksCommandInput,
  DescribeConversionTasksCommandOutput,
} from "../commands/DescribeConversionTasksCommand";
import {
  DescribeCustomerGatewaysCommandInput,
  DescribeCustomerGatewaysCommandOutput,
} from "../commands/DescribeCustomerGatewaysCommand";
import {
  DescribeDhcpOptionsCommandInput,
  DescribeDhcpOptionsCommandOutput,
} from "../commands/DescribeDhcpOptionsCommand";
import {
  DescribeEgressOnlyInternetGatewaysCommandInput,
  DescribeEgressOnlyInternetGatewaysCommandOutput,
} from "../commands/DescribeEgressOnlyInternetGatewaysCommand";
import {
  DescribeElasticGpusCommandInput,
  DescribeElasticGpusCommandOutput,
} from "../commands/DescribeElasticGpusCommand";
import {
  DescribeExportImageTasksCommandInput,
  DescribeExportImageTasksCommandOutput,
} from "../commands/DescribeExportImageTasksCommand";
import {
  DescribeExportTasksCommandInput,
  DescribeExportTasksCommandOutput,
} from "../commands/DescribeExportTasksCommand";
import {
  DescribeFastLaunchImagesCommandInput,
  DescribeFastLaunchImagesCommandOutput,
} from "../commands/DescribeFastLaunchImagesCommand";
import {
  DescribeFastSnapshotRestoresCommandInput,
  DescribeFastSnapshotRestoresCommandOutput,
} from "../commands/DescribeFastSnapshotRestoresCommand";
import {
  DescribeFleetHistoryCommandInput,
  DescribeFleetHistoryCommandOutput,
} from "../commands/DescribeFleetHistoryCommand";
import {
  DescribeFleetInstancesCommandInput,
  DescribeFleetInstancesCommandOutput,
} from "../commands/DescribeFleetInstancesCommand";
import { DescribeFleetsCommandInput, DescribeFleetsCommandOutput } from "../commands/DescribeFleetsCommand";
import { DescribeFlowLogsCommandInput, DescribeFlowLogsCommandOutput } from "../commands/DescribeFlowLogsCommand";
import {
  DescribeFpgaImageAttributeCommandInput,
  DescribeFpgaImageAttributeCommandOutput,
} from "../commands/DescribeFpgaImageAttributeCommand";
import { DescribeFpgaImagesCommandInput, DescribeFpgaImagesCommandOutput } from "../commands/DescribeFpgaImagesCommand";
import {
  DescribeHostReservationOfferingsCommandInput,
  DescribeHostReservationOfferingsCommandOutput,
} from "../commands/DescribeHostReservationOfferingsCommand";
import {
  DescribeHostReservationsCommandInput,
  DescribeHostReservationsCommandOutput,
} from "../commands/DescribeHostReservationsCommand";
import { DescribeHostsCommandInput, DescribeHostsCommandOutput } from "../commands/DescribeHostsCommand";
import {
  DescribeIamInstanceProfileAssociationsCommandInput,
  DescribeIamInstanceProfileAssociationsCommandOutput,
} from "../commands/DescribeIamInstanceProfileAssociationsCommand";
import {
  DescribeIdentityIdFormatCommandInput,
  DescribeIdentityIdFormatCommandOutput,
} from "../commands/DescribeIdentityIdFormatCommand";
import { DescribeIdFormatCommandInput, DescribeIdFormatCommandOutput } from "../commands/DescribeIdFormatCommand";
import {
  DescribeImageAttributeCommandInput,
  DescribeImageAttributeCommandOutput,
} from "../commands/DescribeImageAttributeCommand";
import { DescribeImagesCommandInput, DescribeImagesCommandOutput } from "../commands/DescribeImagesCommand";
import {
  DescribeImportImageTasksCommandInput,
  DescribeImportImageTasksCommandOutput,
} from "../commands/DescribeImportImageTasksCommand";
import {
  DescribeImportSnapshotTasksCommandInput,
  DescribeImportSnapshotTasksCommandOutput,
} from "../commands/DescribeImportSnapshotTasksCommand";
import {
  DescribeInstanceAttributeCommandInput,
  DescribeInstanceAttributeCommandOutput,
} from "../commands/DescribeInstanceAttributeCommand";
import {
  DescribeInstanceConnectEndpointsCommandInput,
  DescribeInstanceConnectEndpointsCommandOutput,
} from "../commands/DescribeInstanceConnectEndpointsCommand";
import {
  DescribeInstanceCreditSpecificationsCommandInput,
  DescribeInstanceCreditSpecificationsCommandOutput,
} from "../commands/DescribeInstanceCreditSpecificationsCommand";
import {
  DescribeInstanceEventNotificationAttributesCommandInput,
  DescribeInstanceEventNotificationAttributesCommandOutput,
} from "../commands/DescribeInstanceEventNotificationAttributesCommand";
import {
  DescribeInstanceEventWindowsCommandInput,
  DescribeInstanceEventWindowsCommandOutput,
} from "../commands/DescribeInstanceEventWindowsCommand";
import { DescribeInstancesCommandInput, DescribeInstancesCommandOutput } from "../commands/DescribeInstancesCommand";
import {
  DescribeInstanceStatusCommandInput,
  DescribeInstanceStatusCommandOutput,
} from "../commands/DescribeInstanceStatusCommand";
import {
  DescribeInstanceTypeOfferingsCommandInput,
  DescribeInstanceTypeOfferingsCommandOutput,
} from "../commands/DescribeInstanceTypeOfferingsCommand";
import {
  DescribeInstanceTypesCommandInput,
  DescribeInstanceTypesCommandOutput,
} from "../commands/DescribeInstanceTypesCommand";
import {
  DescribeInternetGatewaysCommandInput,
  DescribeInternetGatewaysCommandOutput,
} from "../commands/DescribeInternetGatewaysCommand";
import { DescribeIpamPoolsCommandInput, DescribeIpamPoolsCommandOutput } from "../commands/DescribeIpamPoolsCommand";
import {
  DescribeIpamResourceDiscoveriesCommandInput,
  DescribeIpamResourceDiscoveriesCommandOutput,
} from "../commands/DescribeIpamResourceDiscoveriesCommand";
import {
  DescribeIpamResourceDiscoveryAssociationsCommandInput,
  DescribeIpamResourceDiscoveryAssociationsCommandOutput,
} from "../commands/DescribeIpamResourceDiscoveryAssociationsCommand";
import { DescribeIpamsCommandInput, DescribeIpamsCommandOutput } from "../commands/DescribeIpamsCommand";
import { DescribeIpamScopesCommandInput, DescribeIpamScopesCommandOutput } from "../commands/DescribeIpamScopesCommand";
import { DescribeIpv6PoolsCommandInput, DescribeIpv6PoolsCommandOutput } from "../commands/DescribeIpv6PoolsCommand";
import { DescribeKeyPairsCommandInput, DescribeKeyPairsCommandOutput } from "../commands/DescribeKeyPairsCommand";
import {
  DescribeLaunchTemplatesCommandInput,
  DescribeLaunchTemplatesCommandOutput,
} from "../commands/DescribeLaunchTemplatesCommand";
import {
  DescribeLaunchTemplateVersionsCommandInput,
  DescribeLaunchTemplateVersionsCommandOutput,
} from "../commands/DescribeLaunchTemplateVersionsCommand";
import {
  DescribeLocalGatewayRouteTablesCommandInput,
  DescribeLocalGatewayRouteTablesCommandOutput,
} from "../commands/DescribeLocalGatewayRouteTablesCommand";
import {
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandInput,
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandOutput,
} from "../commands/DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand";
import {
  DescribeLocalGatewayRouteTableVpcAssociationsCommandInput,
  DescribeLocalGatewayRouteTableVpcAssociationsCommandOutput,
} from "../commands/DescribeLocalGatewayRouteTableVpcAssociationsCommand";
import {
  DescribeLocalGatewaysCommandInput,
  DescribeLocalGatewaysCommandOutput,
} from "../commands/DescribeLocalGatewaysCommand";
import {
  DescribeLocalGatewayVirtualInterfaceGroupsCommandInput,
  DescribeLocalGatewayVirtualInterfaceGroupsCommandOutput,
} from "../commands/DescribeLocalGatewayVirtualInterfaceGroupsCommand";
import {
  DescribeLocalGatewayVirtualInterfacesCommandInput,
  DescribeLocalGatewayVirtualInterfacesCommandOutput,
} from "../commands/DescribeLocalGatewayVirtualInterfacesCommand";
import {
  DescribeManagedPrefixListsCommandInput,
  DescribeManagedPrefixListsCommandOutput,
} from "../commands/DescribeManagedPrefixListsCommand";
import {
  DescribeMovingAddressesCommandInput,
  DescribeMovingAddressesCommandOutput,
} from "../commands/DescribeMovingAddressesCommand";
import {
  DescribeNatGatewaysCommandInput,
  DescribeNatGatewaysCommandOutput,
} from "../commands/DescribeNatGatewaysCommand";
import {
  DescribeNetworkAclsCommandInput,
  DescribeNetworkAclsCommandOutput,
} from "../commands/DescribeNetworkAclsCommand";
import {
  DescribeNetworkInsightsAccessScopeAnalysesCommandInput,
  DescribeNetworkInsightsAccessScopeAnalysesCommandOutput,
} from "../commands/DescribeNetworkInsightsAccessScopeAnalysesCommand";
import {
  DescribeNetworkInsightsAccessScopesCommandInput,
  DescribeNetworkInsightsAccessScopesCommandOutput,
} from "../commands/DescribeNetworkInsightsAccessScopesCommand";
import {
  DescribeNetworkInsightsAnalysesCommandInput,
  DescribeNetworkInsightsAnalysesCommandOutput,
} from "../commands/DescribeNetworkInsightsAnalysesCommand";
import {
  DescribeNetworkInsightsPathsCommandInput,
  DescribeNetworkInsightsPathsCommandOutput,
} from "../commands/DescribeNetworkInsightsPathsCommand";
import {
  DescribeNetworkInterfaceAttributeCommandInput,
  DescribeNetworkInterfaceAttributeCommandOutput,
} from "../commands/DescribeNetworkInterfaceAttributeCommand";
import {
  DescribeNetworkInterfacePermissionsCommandInput,
  DescribeNetworkInterfacePermissionsCommandOutput,
} from "../commands/DescribeNetworkInterfacePermissionsCommand";
import {
  DescribeNetworkInterfacesCommandInput,
  DescribeNetworkInterfacesCommandOutput,
} from "../commands/DescribeNetworkInterfacesCommand";
import {
  DescribePlacementGroupsCommandInput,
  DescribePlacementGroupsCommandOutput,
} from "../commands/DescribePlacementGroupsCommand";
import {
  DescribePrefixListsCommandInput,
  DescribePrefixListsCommandOutput,
} from "../commands/DescribePrefixListsCommand";
import {
  DescribePrincipalIdFormatCommandInput,
  DescribePrincipalIdFormatCommandOutput,
} from "../commands/DescribePrincipalIdFormatCommand";
import {
  DescribePublicIpv4PoolsCommandInput,
  DescribePublicIpv4PoolsCommandOutput,
} from "../commands/DescribePublicIpv4PoolsCommand";
import { DescribeRegionsCommandInput, DescribeRegionsCommandOutput } from "../commands/DescribeRegionsCommand";
import {
  DescribeReplaceRootVolumeTasksCommandInput,
  DescribeReplaceRootVolumeTasksCommandOutput,
} from "../commands/DescribeReplaceRootVolumeTasksCommand";
import {
  DescribeReservedInstancesCommandInput,
  DescribeReservedInstancesCommandOutput,
} from "../commands/DescribeReservedInstancesCommand";
import {
  DescribeReservedInstancesListingsCommandInput,
  DescribeReservedInstancesListingsCommandOutput,
} from "../commands/DescribeReservedInstancesListingsCommand";
import {
  DescribeReservedInstancesModificationsCommandInput,
  DescribeReservedInstancesModificationsCommandOutput,
} from "../commands/DescribeReservedInstancesModificationsCommand";
import {
  DescribeReservedInstancesOfferingsCommandInput,
  DescribeReservedInstancesOfferingsCommandOutput,
} from "../commands/DescribeReservedInstancesOfferingsCommand";
import {
  DescribeRouteTablesCommandInput,
  DescribeRouteTablesCommandOutput,
} from "../commands/DescribeRouteTablesCommand";
import {
  DescribeScheduledInstanceAvailabilityCommandInput,
  DescribeScheduledInstanceAvailabilityCommandOutput,
} from "../commands/DescribeScheduledInstanceAvailabilityCommand";
import {
  DescribeScheduledInstancesCommandInput,
  DescribeScheduledInstancesCommandOutput,
} from "../commands/DescribeScheduledInstancesCommand";
import {
  DescribeSecurityGroupReferencesCommandInput,
  DescribeSecurityGroupReferencesCommandOutput,
} from "../commands/DescribeSecurityGroupReferencesCommand";
import {
  DescribeSecurityGroupRulesCommandInput,
  DescribeSecurityGroupRulesCommandOutput,
} from "../commands/DescribeSecurityGroupRulesCommand";
import {
  DescribeSecurityGroupsCommandInput,
  DescribeSecurityGroupsCommandOutput,
} from "../commands/DescribeSecurityGroupsCommand";
import {
  DescribeSnapshotAttributeCommandInput,
  DescribeSnapshotAttributeCommandOutput,
} from "../commands/DescribeSnapshotAttributeCommand";
import { DescribeSnapshotsCommandInput, DescribeSnapshotsCommandOutput } from "../commands/DescribeSnapshotsCommand";
import {
  DescribeSnapshotTierStatusCommandInput,
  DescribeSnapshotTierStatusCommandOutput,
} from "../commands/DescribeSnapshotTierStatusCommand";
import {
  DescribeSpotDatafeedSubscriptionCommandInput,
  DescribeSpotDatafeedSubscriptionCommandOutput,
} from "../commands/DescribeSpotDatafeedSubscriptionCommand";
import {
  DescribeSpotFleetInstancesCommandInput,
  DescribeSpotFleetInstancesCommandOutput,
} from "../commands/DescribeSpotFleetInstancesCommand";
import {
  DescribeSpotFleetRequestHistoryCommandInput,
  DescribeSpotFleetRequestHistoryCommandOutput,
} from "../commands/DescribeSpotFleetRequestHistoryCommand";
import {
  DescribeSpotFleetRequestsCommandInput,
  DescribeSpotFleetRequestsCommandOutput,
} from "../commands/DescribeSpotFleetRequestsCommand";
import {
  DescribeSpotInstanceRequestsCommandInput,
  DescribeSpotInstanceRequestsCommandOutput,
} from "../commands/DescribeSpotInstanceRequestsCommand";
import {
  DescribeSpotPriceHistoryCommandInput,
  DescribeSpotPriceHistoryCommandOutput,
} from "../commands/DescribeSpotPriceHistoryCommand";
import {
  DescribeStaleSecurityGroupsCommandInput,
  DescribeStaleSecurityGroupsCommandOutput,
} from "../commands/DescribeStaleSecurityGroupsCommand";
import {
  DescribeStoreImageTasksCommandInput,
  DescribeStoreImageTasksCommandOutput,
} from "../commands/DescribeStoreImageTasksCommand";
import { DescribeSubnetsCommandInput, DescribeSubnetsCommandOutput } from "../commands/DescribeSubnetsCommand";
import { DescribeTagsCommandInput, DescribeTagsCommandOutput } from "../commands/DescribeTagsCommand";
import {
  DescribeTrafficMirrorFiltersCommandInput,
  DescribeTrafficMirrorFiltersCommandOutput,
} from "../commands/DescribeTrafficMirrorFiltersCommand";
import {
  DescribeTrafficMirrorSessionsCommandInput,
  DescribeTrafficMirrorSessionsCommandOutput,
} from "../commands/DescribeTrafficMirrorSessionsCommand";
import {
  DescribeTrafficMirrorTargetsCommandInput,
  DescribeTrafficMirrorTargetsCommandOutput,
} from "../commands/DescribeTrafficMirrorTargetsCommand";
import {
  DescribeTransitGatewayAttachmentsCommandInput,
  DescribeTransitGatewayAttachmentsCommandOutput,
} from "../commands/DescribeTransitGatewayAttachmentsCommand";
import {
  DescribeTransitGatewayConnectPeersCommandInput,
  DescribeTransitGatewayConnectPeersCommandOutput,
} from "../commands/DescribeTransitGatewayConnectPeersCommand";
import {
  DescribeTransitGatewayConnectsCommandInput,
  DescribeTransitGatewayConnectsCommandOutput,
} from "../commands/DescribeTransitGatewayConnectsCommand";
import {
  DescribeTransitGatewayMulticastDomainsCommandInput,
  DescribeTransitGatewayMulticastDomainsCommandOutput,
} from "../commands/DescribeTransitGatewayMulticastDomainsCommand";
import {
  DescribeTransitGatewayPeeringAttachmentsCommandInput,
  DescribeTransitGatewayPeeringAttachmentsCommandOutput,
} from "../commands/DescribeTransitGatewayPeeringAttachmentsCommand";
import {
  DescribeTransitGatewayPolicyTablesCommandInput,
  DescribeTransitGatewayPolicyTablesCommandOutput,
} from "../commands/DescribeTransitGatewayPolicyTablesCommand";
import {
  DescribeTransitGatewayRouteTableAnnouncementsCommandInput,
  DescribeTransitGatewayRouteTableAnnouncementsCommandOutput,
} from "../commands/DescribeTransitGatewayRouteTableAnnouncementsCommand";
import {
  DescribeTransitGatewayRouteTablesCommandInput,
  DescribeTransitGatewayRouteTablesCommandOutput,
} from "../commands/DescribeTransitGatewayRouteTablesCommand";
import {
  DescribeTransitGatewaysCommandInput,
  DescribeTransitGatewaysCommandOutput,
} from "../commands/DescribeTransitGatewaysCommand";
import {
  DescribeTransitGatewayVpcAttachmentsCommandInput,
  DescribeTransitGatewayVpcAttachmentsCommandOutput,
} from "../commands/DescribeTransitGatewayVpcAttachmentsCommand";
import {
  DescribeTrunkInterfaceAssociationsCommandInput,
  DescribeTrunkInterfaceAssociationsCommandOutput,
} from "../commands/DescribeTrunkInterfaceAssociationsCommand";
import {
  DescribeVerifiedAccessEndpointsCommandInput,
  DescribeVerifiedAccessEndpointsCommandOutput,
} from "../commands/DescribeVerifiedAccessEndpointsCommand";
import {
  DescribeVerifiedAccessGroupsCommandInput,
  DescribeVerifiedAccessGroupsCommandOutput,
} from "../commands/DescribeVerifiedAccessGroupsCommand";
import {
  DescribeVerifiedAccessInstanceLoggingConfigurationsCommandInput,
  DescribeVerifiedAccessInstanceLoggingConfigurationsCommandOutput,
} from "../commands/DescribeVerifiedAccessInstanceLoggingConfigurationsCommand";
import {
  DescribeVerifiedAccessInstancesCommandInput,
  DescribeVerifiedAccessInstancesCommandOutput,
} from "../commands/DescribeVerifiedAccessInstancesCommand";
import {
  DescribeVerifiedAccessTrustProvidersCommandInput,
  DescribeVerifiedAccessTrustProvidersCommandOutput,
} from "../commands/DescribeVerifiedAccessTrustProvidersCommand";
import {
  DescribeVolumeAttributeCommandInput,
  DescribeVolumeAttributeCommandOutput,
} from "../commands/DescribeVolumeAttributeCommand";
import { DescribeVolumesCommandInput, DescribeVolumesCommandOutput } from "../commands/DescribeVolumesCommand";
import {
  DescribeVolumesModificationsCommandInput,
  DescribeVolumesModificationsCommandOutput,
} from "../commands/DescribeVolumesModificationsCommand";
import {
  DescribeVolumeStatusCommandInput,
  DescribeVolumeStatusCommandOutput,
} from "../commands/DescribeVolumeStatusCommand";
import {
  DescribeVpcAttributeCommandInput,
  DescribeVpcAttributeCommandOutput,
} from "../commands/DescribeVpcAttributeCommand";
import {
  DescribeVpcClassicLinkCommandInput,
  DescribeVpcClassicLinkCommandOutput,
} from "../commands/DescribeVpcClassicLinkCommand";
import {
  DescribeVpcClassicLinkDnsSupportCommandInput,
  DescribeVpcClassicLinkDnsSupportCommandOutput,
} from "../commands/DescribeVpcClassicLinkDnsSupportCommand";
import {
  DescribeVpcEndpointConnectionNotificationsCommandInput,
  DescribeVpcEndpointConnectionNotificationsCommandOutput,
} from "../commands/DescribeVpcEndpointConnectionNotificationsCommand";
import {
  DescribeVpcEndpointConnectionsCommandInput,
  DescribeVpcEndpointConnectionsCommandOutput,
} from "../commands/DescribeVpcEndpointConnectionsCommand";
import {
  DescribeVpcEndpointsCommandInput,
  DescribeVpcEndpointsCommandOutput,
} from "../commands/DescribeVpcEndpointsCommand";
import {
  DescribeVpcEndpointServiceConfigurationsCommandInput,
  DescribeVpcEndpointServiceConfigurationsCommandOutput,
} from "../commands/DescribeVpcEndpointServiceConfigurationsCommand";
import {
  DescribeVpcEndpointServicePermissionsCommandInput,
  DescribeVpcEndpointServicePermissionsCommandOutput,
} from "../commands/DescribeVpcEndpointServicePermissionsCommand";
import {
  DescribeVpcEndpointServicesCommandInput,
  DescribeVpcEndpointServicesCommandOutput,
} from "../commands/DescribeVpcEndpointServicesCommand";
import {
  DescribeVpcPeeringConnectionsCommandInput,
  DescribeVpcPeeringConnectionsCommandOutput,
} from "../commands/DescribeVpcPeeringConnectionsCommand";
import { DescribeVpcsCommandInput, DescribeVpcsCommandOutput } from "../commands/DescribeVpcsCommand";
import {
  DescribeVpnConnectionsCommandInput,
  DescribeVpnConnectionsCommandOutput,
} from "../commands/DescribeVpnConnectionsCommand";
import {
  DescribeVpnGatewaysCommandInput,
  DescribeVpnGatewaysCommandOutput,
} from "../commands/DescribeVpnGatewaysCommand";
import {
  DetachClassicLinkVpcCommandInput,
  DetachClassicLinkVpcCommandOutput,
} from "../commands/DetachClassicLinkVpcCommand";
import {
  DetachInternetGatewayCommandInput,
  DetachInternetGatewayCommandOutput,
} from "../commands/DetachInternetGatewayCommand";
import {
  DetachNetworkInterfaceCommandInput,
  DetachNetworkInterfaceCommandOutput,
} from "../commands/DetachNetworkInterfaceCommand";
import {
  DetachVerifiedAccessTrustProviderCommandInput,
  DetachVerifiedAccessTrustProviderCommandOutput,
} from "../commands/DetachVerifiedAccessTrustProviderCommand";
import { DetachVolumeCommandInput, DetachVolumeCommandOutput } from "../commands/DetachVolumeCommand";
import { DetachVpnGatewayCommandInput, DetachVpnGatewayCommandOutput } from "../commands/DetachVpnGatewayCommand";
import {
  DisableAddressTransferCommandInput,
  DisableAddressTransferCommandOutput,
} from "../commands/DisableAddressTransferCommand";
import {
  DisableAwsNetworkPerformanceMetricSubscriptionCommandInput,
  DisableAwsNetworkPerformanceMetricSubscriptionCommandOutput,
} from "../commands/DisableAwsNetworkPerformanceMetricSubscriptionCommand";
import {
  DisableEbsEncryptionByDefaultCommandInput,
  DisableEbsEncryptionByDefaultCommandOutput,
} from "../commands/DisableEbsEncryptionByDefaultCommand";
import { DisableFastLaunchCommandInput, DisableFastLaunchCommandOutput } from "../commands/DisableFastLaunchCommand";
import {
  DisableFastSnapshotRestoresCommandInput,
  DisableFastSnapshotRestoresCommandOutput,
} from "../commands/DisableFastSnapshotRestoresCommand";
import {
  DisableImageBlockPublicAccessCommandInput,
  DisableImageBlockPublicAccessCommandOutput,
} from "../commands/DisableImageBlockPublicAccessCommand";
import { DisableImageCommandInput, DisableImageCommandOutput } from "../commands/DisableImageCommand";
import {
  DisableImageDeprecationCommandInput,
  DisableImageDeprecationCommandOutput,
} from "../commands/DisableImageDeprecationCommand";
import {
  DisableIpamOrganizationAdminAccountCommandInput,
  DisableIpamOrganizationAdminAccountCommandOutput,
} from "../commands/DisableIpamOrganizationAdminAccountCommand";
import {
  DisableSerialConsoleAccessCommandInput,
  DisableSerialConsoleAccessCommandOutput,
} from "../commands/DisableSerialConsoleAccessCommand";
import {
  DisableTransitGatewayRouteTablePropagationCommandInput,
  DisableTransitGatewayRouteTablePropagationCommandOutput,
} from "../commands/DisableTransitGatewayRouteTablePropagationCommand";
import {
  DisableVgwRoutePropagationCommandInput,
  DisableVgwRoutePropagationCommandOutput,
} from "../commands/DisableVgwRoutePropagationCommand";
import {
  DisableVpcClassicLinkCommandInput,
  DisableVpcClassicLinkCommandOutput,
} from "../commands/DisableVpcClassicLinkCommand";
import {
  DisableVpcClassicLinkDnsSupportCommandInput,
  DisableVpcClassicLinkDnsSupportCommandOutput,
} from "../commands/DisableVpcClassicLinkDnsSupportCommand";
import {
  DisassociateAddressCommandInput,
  DisassociateAddressCommandOutput,
} from "../commands/DisassociateAddressCommand";
import {
  DisassociateClientVpnTargetNetworkCommandInput,
  DisassociateClientVpnTargetNetworkCommandOutput,
} from "../commands/DisassociateClientVpnTargetNetworkCommand";
import {
  DisassociateEnclaveCertificateIamRoleCommandInput,
  DisassociateEnclaveCertificateIamRoleCommandOutput,
} from "../commands/DisassociateEnclaveCertificateIamRoleCommand";
import {
  DisassociateIamInstanceProfileCommandInput,
  DisassociateIamInstanceProfileCommandOutput,
} from "../commands/DisassociateIamInstanceProfileCommand";
import {
  DisassociateInstanceEventWindowCommandInput,
  DisassociateInstanceEventWindowCommandOutput,
} from "../commands/DisassociateInstanceEventWindowCommand";
import {
  DisassociateIpamResourceDiscoveryCommandInput,
  DisassociateIpamResourceDiscoveryCommandOutput,
} from "../commands/DisassociateIpamResourceDiscoveryCommand";
import {
  DisassociateNatGatewayAddressCommandInput,
  DisassociateNatGatewayAddressCommandOutput,
} from "../commands/DisassociateNatGatewayAddressCommand";
import {
  DisassociateRouteTableCommandInput,
  DisassociateRouteTableCommandOutput,
} from "../commands/DisassociateRouteTableCommand";
import {
  DisassociateSubnetCidrBlockCommandInput,
  DisassociateSubnetCidrBlockCommandOutput,
} from "../commands/DisassociateSubnetCidrBlockCommand";
import {
  DisassociateTransitGatewayMulticastDomainCommandInput,
  DisassociateTransitGatewayMulticastDomainCommandOutput,
} from "../commands/DisassociateTransitGatewayMulticastDomainCommand";
import {
  DisassociateTransitGatewayPolicyTableCommandInput,
  DisassociateTransitGatewayPolicyTableCommandOutput,
} from "../commands/DisassociateTransitGatewayPolicyTableCommand";
import {
  DisassociateTransitGatewayRouteTableCommandInput,
  DisassociateTransitGatewayRouteTableCommandOutput,
} from "../commands/DisassociateTransitGatewayRouteTableCommand";
import {
  DisassociateTrunkInterfaceCommandInput,
  DisassociateTrunkInterfaceCommandOutput,
} from "../commands/DisassociateTrunkInterfaceCommand";
import {
  DisassociateVpcCidrBlockCommandInput,
  DisassociateVpcCidrBlockCommandOutput,
} from "../commands/DisassociateVpcCidrBlockCommand";
import {
  EnableAddressTransferCommandInput,
  EnableAddressTransferCommandOutput,
} from "../commands/EnableAddressTransferCommand";
import {
  EnableAwsNetworkPerformanceMetricSubscriptionCommandInput,
  EnableAwsNetworkPerformanceMetricSubscriptionCommandOutput,
} from "../commands/EnableAwsNetworkPerformanceMetricSubscriptionCommand";
import {
  EnableEbsEncryptionByDefaultCommandInput,
  EnableEbsEncryptionByDefaultCommandOutput,
} from "../commands/EnableEbsEncryptionByDefaultCommand";
import { EnableFastLaunchCommandInput, EnableFastLaunchCommandOutput } from "../commands/EnableFastLaunchCommand";
import {
  EnableFastSnapshotRestoresCommandInput,
  EnableFastSnapshotRestoresCommandOutput,
} from "../commands/EnableFastSnapshotRestoresCommand";
import {
  EnableImageBlockPublicAccessCommandInput,
  EnableImageBlockPublicAccessCommandOutput,
} from "../commands/EnableImageBlockPublicAccessCommand";
import { EnableImageCommandInput, EnableImageCommandOutput } from "../commands/EnableImageCommand";
import {
  EnableImageDeprecationCommandInput,
  EnableImageDeprecationCommandOutput,
} from "../commands/EnableImageDeprecationCommand";
import {
  EnableIpamOrganizationAdminAccountCommandInput,
  EnableIpamOrganizationAdminAccountCommandOutput,
} from "../commands/EnableIpamOrganizationAdminAccountCommand";
import {
  EnableReachabilityAnalyzerOrganizationSharingCommandInput,
  EnableReachabilityAnalyzerOrganizationSharingCommandOutput,
} from "../commands/EnableReachabilityAnalyzerOrganizationSharingCommand";
import {
  EnableSerialConsoleAccessCommandInput,
  EnableSerialConsoleAccessCommandOutput,
} from "../commands/EnableSerialConsoleAccessCommand";
import {
  EnableTransitGatewayRouteTablePropagationCommandInput,
  EnableTransitGatewayRouteTablePropagationCommandOutput,
} from "../commands/EnableTransitGatewayRouteTablePropagationCommand";
import {
  EnableVgwRoutePropagationCommandInput,
  EnableVgwRoutePropagationCommandOutput,
} from "../commands/EnableVgwRoutePropagationCommand";
import { EnableVolumeIOCommandInput, EnableVolumeIOCommandOutput } from "../commands/EnableVolumeIOCommand";
import {
  EnableVpcClassicLinkCommandInput,
  EnableVpcClassicLinkCommandOutput,
} from "../commands/EnableVpcClassicLinkCommand";
import {
  EnableVpcClassicLinkDnsSupportCommandInput,
  EnableVpcClassicLinkDnsSupportCommandOutput,
} from "../commands/EnableVpcClassicLinkDnsSupportCommand";
import {
  ExportClientVpnClientCertificateRevocationListCommandInput,
  ExportClientVpnClientCertificateRevocationListCommandOutput,
} from "../commands/ExportClientVpnClientCertificateRevocationListCommand";
import {
  ExportClientVpnClientConfigurationCommandInput,
  ExportClientVpnClientConfigurationCommandOutput,
} from "../commands/ExportClientVpnClientConfigurationCommand";
import { ExportImageCommandInput, ExportImageCommandOutput } from "../commands/ExportImageCommand";
import {
  ExportTransitGatewayRoutesCommandInput,
  ExportTransitGatewayRoutesCommandOutput,
} from "../commands/ExportTransitGatewayRoutesCommand";
import {
  GetAssociatedEnclaveCertificateIamRolesCommandInput,
  GetAssociatedEnclaveCertificateIamRolesCommandOutput,
} from "../commands/GetAssociatedEnclaveCertificateIamRolesCommand";
import {
  GetAssociatedIpv6PoolCidrsCommandInput,
  GetAssociatedIpv6PoolCidrsCommandOutput,
} from "../commands/GetAssociatedIpv6PoolCidrsCommand";
import {
  GetAwsNetworkPerformanceDataCommandInput,
  GetAwsNetworkPerformanceDataCommandOutput,
} from "../commands/GetAwsNetworkPerformanceDataCommand";
import {
  GetCapacityReservationUsageCommandInput,
  GetCapacityReservationUsageCommandOutput,
} from "../commands/GetCapacityReservationUsageCommand";
import { GetCoipPoolUsageCommandInput, GetCoipPoolUsageCommandOutput } from "../commands/GetCoipPoolUsageCommand";
import { GetConsoleOutputCommandInput, GetConsoleOutputCommandOutput } from "../commands/GetConsoleOutputCommand";
import {
  GetConsoleScreenshotCommandInput,
  GetConsoleScreenshotCommandOutput,
} from "../commands/GetConsoleScreenshotCommand";
import {
  GetDefaultCreditSpecificationCommandInput,
  GetDefaultCreditSpecificationCommandOutput,
} from "../commands/GetDefaultCreditSpecificationCommand";
import {
  GetEbsDefaultKmsKeyIdCommandInput,
  GetEbsDefaultKmsKeyIdCommandOutput,
} from "../commands/GetEbsDefaultKmsKeyIdCommand";
import {
  GetEbsEncryptionByDefaultCommandInput,
  GetEbsEncryptionByDefaultCommandOutput,
} from "../commands/GetEbsEncryptionByDefaultCommand";
import {
  GetFlowLogsIntegrationTemplateCommandInput,
  GetFlowLogsIntegrationTemplateCommandOutput,
} from "../commands/GetFlowLogsIntegrationTemplateCommand";
import {
  GetGroupsForCapacityReservationCommandInput,
  GetGroupsForCapacityReservationCommandOutput,
} from "../commands/GetGroupsForCapacityReservationCommand";
import {
  GetHostReservationPurchasePreviewCommandInput,
  GetHostReservationPurchasePreviewCommandOutput,
} from "../commands/GetHostReservationPurchasePreviewCommand";
import {
  GetImageBlockPublicAccessStateCommandInput,
  GetImageBlockPublicAccessStateCommandOutput,
} from "../commands/GetImageBlockPublicAccessStateCommand";
import {
  GetInstanceTypesFromInstanceRequirementsCommandInput,
  GetInstanceTypesFromInstanceRequirementsCommandOutput,
} from "../commands/GetInstanceTypesFromInstanceRequirementsCommand";
import {
  GetInstanceUefiDataCommandInput,
  GetInstanceUefiDataCommandOutput,
} from "../commands/GetInstanceUefiDataCommand";
import {
  GetIpamAddressHistoryCommandInput,
  GetIpamAddressHistoryCommandOutput,
} from "../commands/GetIpamAddressHistoryCommand";
import {
  GetIpamDiscoveredAccountsCommandInput,
  GetIpamDiscoveredAccountsCommandOutput,
} from "../commands/GetIpamDiscoveredAccountsCommand";
import {
  GetIpamDiscoveredResourceCidrsCommandInput,
  GetIpamDiscoveredResourceCidrsCommandOutput,
} from "../commands/GetIpamDiscoveredResourceCidrsCommand";
import {
  GetIpamPoolAllocationsCommandInput,
  GetIpamPoolAllocationsCommandOutput,
} from "../commands/GetIpamPoolAllocationsCommand";
import { GetIpamPoolCidrsCommandInput, GetIpamPoolCidrsCommandOutput } from "../commands/GetIpamPoolCidrsCommand";
import {
  GetIpamResourceCidrsCommandInput,
  GetIpamResourceCidrsCommandOutput,
} from "../commands/GetIpamResourceCidrsCommand";
import {
  GetLaunchTemplateDataCommandInput,
  GetLaunchTemplateDataCommandOutput,
} from "../commands/GetLaunchTemplateDataCommand";
import {
  GetManagedPrefixListAssociationsCommandInput,
  GetManagedPrefixListAssociationsCommandOutput,
} from "../commands/GetManagedPrefixListAssociationsCommand";
import {
  GetManagedPrefixListEntriesCommandInput,
  GetManagedPrefixListEntriesCommandOutput,
} from "../commands/GetManagedPrefixListEntriesCommand";
import {
  GetNetworkInsightsAccessScopeAnalysisFindingsCommandInput,
  GetNetworkInsightsAccessScopeAnalysisFindingsCommandOutput,
} from "../commands/GetNetworkInsightsAccessScopeAnalysisFindingsCommand";
import {
  GetNetworkInsightsAccessScopeContentCommandInput,
  GetNetworkInsightsAccessScopeContentCommandOutput,
} from "../commands/GetNetworkInsightsAccessScopeContentCommand";
import { GetPasswordDataCommandInput, GetPasswordDataCommandOutput } from "../commands/GetPasswordDataCommand";
import {
  GetReservedInstancesExchangeQuoteCommandInput,
  GetReservedInstancesExchangeQuoteCommandOutput,
} from "../commands/GetReservedInstancesExchangeQuoteCommand";
import {
  GetSerialConsoleAccessStatusCommandInput,
  GetSerialConsoleAccessStatusCommandOutput,
} from "../commands/GetSerialConsoleAccessStatusCommand";
import {
  GetSpotPlacementScoresCommandInput,
  GetSpotPlacementScoresCommandOutput,
} from "../commands/GetSpotPlacementScoresCommand";
import {
  GetSubnetCidrReservationsCommandInput,
  GetSubnetCidrReservationsCommandOutput,
} from "../commands/GetSubnetCidrReservationsCommand";
import {
  GetTransitGatewayAttachmentPropagationsCommandInput,
  GetTransitGatewayAttachmentPropagationsCommandOutput,
} from "../commands/GetTransitGatewayAttachmentPropagationsCommand";
import {
  GetTransitGatewayMulticastDomainAssociationsCommandInput,
  GetTransitGatewayMulticastDomainAssociationsCommandOutput,
} from "../commands/GetTransitGatewayMulticastDomainAssociationsCommand";
import {
  GetTransitGatewayPolicyTableAssociationsCommandInput,
  GetTransitGatewayPolicyTableAssociationsCommandOutput,
} from "../commands/GetTransitGatewayPolicyTableAssociationsCommand";
import {
  GetTransitGatewayPolicyTableEntriesCommandInput,
  GetTransitGatewayPolicyTableEntriesCommandOutput,
} from "../commands/GetTransitGatewayPolicyTableEntriesCommand";
import {
  GetTransitGatewayPrefixListReferencesCommandInput,
  GetTransitGatewayPrefixListReferencesCommandOutput,
} from "../commands/GetTransitGatewayPrefixListReferencesCommand";
import {
  GetTransitGatewayRouteTableAssociationsCommandInput,
  GetTransitGatewayRouteTableAssociationsCommandOutput,
} from "../commands/GetTransitGatewayRouteTableAssociationsCommand";
import {
  GetTransitGatewayRouteTablePropagationsCommandInput,
  GetTransitGatewayRouteTablePropagationsCommandOutput,
} from "../commands/GetTransitGatewayRouteTablePropagationsCommand";
import {
  GetVerifiedAccessEndpointPolicyCommandInput,
  GetVerifiedAccessEndpointPolicyCommandOutput,
} from "../commands/GetVerifiedAccessEndpointPolicyCommand";
import {
  GetVerifiedAccessGroupPolicyCommandInput,
  GetVerifiedAccessGroupPolicyCommandOutput,
} from "../commands/GetVerifiedAccessGroupPolicyCommand";
import {
  GetVpnConnectionDeviceSampleConfigurationCommandInput,
  GetVpnConnectionDeviceSampleConfigurationCommandOutput,
} from "../commands/GetVpnConnectionDeviceSampleConfigurationCommand";
import {
  GetVpnConnectionDeviceTypesCommandInput,
  GetVpnConnectionDeviceTypesCommandOutput,
} from "../commands/GetVpnConnectionDeviceTypesCommand";
import {
  GetVpnTunnelReplacementStatusCommandInput,
  GetVpnTunnelReplacementStatusCommandOutput,
} from "../commands/GetVpnTunnelReplacementStatusCommand";
import {
  ImportClientVpnClientCertificateRevocationListCommandInput,
  ImportClientVpnClientCertificateRevocationListCommandOutput,
} from "../commands/ImportClientVpnClientCertificateRevocationListCommand";
import { ImportImageCommandInput, ImportImageCommandOutput } from "../commands/ImportImageCommand";
import { ImportInstanceCommandInput, ImportInstanceCommandOutput } from "../commands/ImportInstanceCommand";
import { ImportKeyPairCommandInput, ImportKeyPairCommandOutput } from "../commands/ImportKeyPairCommand";
import { ImportSnapshotCommandInput, ImportSnapshotCommandOutput } from "../commands/ImportSnapshotCommand";
import { ImportVolumeCommandInput, ImportVolumeCommandOutput } from "../commands/ImportVolumeCommand";
import {
  ListImagesInRecycleBinCommandInput,
  ListImagesInRecycleBinCommandOutput,
} from "../commands/ListImagesInRecycleBinCommand";
import {
  ListSnapshotsInRecycleBinCommandInput,
  ListSnapshotsInRecycleBinCommandOutput,
} from "../commands/ListSnapshotsInRecycleBinCommand";
import {
  ModifyAddressAttributeCommandInput,
  ModifyAddressAttributeCommandOutput,
} from "../commands/ModifyAddressAttributeCommand";
import {
  ModifyAvailabilityZoneGroupCommandInput,
  ModifyAvailabilityZoneGroupCommandOutput,
} from "../commands/ModifyAvailabilityZoneGroupCommand";
import {
  ModifyCapacityReservationCommandInput,
  ModifyCapacityReservationCommandOutput,
} from "../commands/ModifyCapacityReservationCommand";
import {
  ModifyCapacityReservationFleetCommandInput,
  ModifyCapacityReservationFleetCommandOutput,
} from "../commands/ModifyCapacityReservationFleetCommand";
import {
  ModifyClientVpnEndpointCommandInput,
  ModifyClientVpnEndpointCommandOutput,
} from "../commands/ModifyClientVpnEndpointCommand";
import {
  ModifyDefaultCreditSpecificationCommandInput,
  ModifyDefaultCreditSpecificationCommandOutput,
} from "../commands/ModifyDefaultCreditSpecificationCommand";
import {
  ModifyEbsDefaultKmsKeyIdCommandInput,
  ModifyEbsDefaultKmsKeyIdCommandOutput,
} from "../commands/ModifyEbsDefaultKmsKeyIdCommand";
import { ModifyFleetCommandInput, ModifyFleetCommandOutput } from "../commands/ModifyFleetCommand";
import {
  ModifyFpgaImageAttributeCommandInput,
  ModifyFpgaImageAttributeCommandOutput,
} from "../commands/ModifyFpgaImageAttributeCommand";
import { ModifyHostsCommandInput, ModifyHostsCommandOutput } from "../commands/ModifyHostsCommand";
import {
  ModifyIdentityIdFormatCommandInput,
  ModifyIdentityIdFormatCommandOutput,
} from "../commands/ModifyIdentityIdFormatCommand";
import { ModifyIdFormatCommandInput, ModifyIdFormatCommandOutput } from "../commands/ModifyIdFormatCommand";
import {
  ModifyImageAttributeCommandInput,
  ModifyImageAttributeCommandOutput,
} from "../commands/ModifyImageAttributeCommand";
import {
  ModifyInstanceAttributeCommandInput,
  ModifyInstanceAttributeCommandOutput,
} from "../commands/ModifyInstanceAttributeCommand";
import {
  ModifyInstanceCapacityReservationAttributesCommandInput,
  ModifyInstanceCapacityReservationAttributesCommandOutput,
} from "../commands/ModifyInstanceCapacityReservationAttributesCommand";
import {
  ModifyInstanceCreditSpecificationCommandInput,
  ModifyInstanceCreditSpecificationCommandOutput,
} from "../commands/ModifyInstanceCreditSpecificationCommand";
import {
  ModifyInstanceEventStartTimeCommandInput,
  ModifyInstanceEventStartTimeCommandOutput,
} from "../commands/ModifyInstanceEventStartTimeCommand";
import {
  ModifyInstanceEventWindowCommandInput,
  ModifyInstanceEventWindowCommandOutput,
} from "../commands/ModifyInstanceEventWindowCommand";
import {
  ModifyInstanceMaintenanceOptionsCommandInput,
  ModifyInstanceMaintenanceOptionsCommandOutput,
} from "../commands/ModifyInstanceMaintenanceOptionsCommand";
import {
  ModifyInstanceMetadataOptionsCommandInput,
  ModifyInstanceMetadataOptionsCommandOutput,
} from "../commands/ModifyInstanceMetadataOptionsCommand";
import {
  ModifyInstancePlacementCommandInput,
  ModifyInstancePlacementCommandOutput,
} from "../commands/ModifyInstancePlacementCommand";
import { ModifyIpamCommandInput, ModifyIpamCommandOutput } from "../commands/ModifyIpamCommand";
import { ModifyIpamPoolCommandInput, ModifyIpamPoolCommandOutput } from "../commands/ModifyIpamPoolCommand";
import {
  ModifyIpamResourceCidrCommandInput,
  ModifyIpamResourceCidrCommandOutput,
} from "../commands/ModifyIpamResourceCidrCommand";
import {
  ModifyIpamResourceDiscoveryCommandInput,
  ModifyIpamResourceDiscoveryCommandOutput,
} from "../commands/ModifyIpamResourceDiscoveryCommand";
import { ModifyIpamScopeCommandInput, ModifyIpamScopeCommandOutput } from "../commands/ModifyIpamScopeCommand";
import {
  ModifyLaunchTemplateCommandInput,
  ModifyLaunchTemplateCommandOutput,
} from "../commands/ModifyLaunchTemplateCommand";
import {
  ModifyLocalGatewayRouteCommandInput,
  ModifyLocalGatewayRouteCommandOutput,
} from "../commands/ModifyLocalGatewayRouteCommand";
import {
  ModifyManagedPrefixListCommandInput,
  ModifyManagedPrefixListCommandOutput,
} from "../commands/ModifyManagedPrefixListCommand";
import {
  ModifyNetworkInterfaceAttributeCommandInput,
  ModifyNetworkInterfaceAttributeCommandOutput,
} from "../commands/ModifyNetworkInterfaceAttributeCommand";
import {
  ModifyPrivateDnsNameOptionsCommandInput,
  ModifyPrivateDnsNameOptionsCommandOutput,
} from "../commands/ModifyPrivateDnsNameOptionsCommand";
import {
  ModifyReservedInstancesCommandInput,
  ModifyReservedInstancesCommandOutput,
} from "../commands/ModifyReservedInstancesCommand";
import {
  ModifySecurityGroupRulesCommandInput,
  ModifySecurityGroupRulesCommandOutput,
} from "../commands/ModifySecurityGroupRulesCommand";
import {
  ModifySnapshotAttributeCommandInput,
  ModifySnapshotAttributeCommandOutput,
} from "../commands/ModifySnapshotAttributeCommand";
import { ModifySnapshotTierCommandInput, ModifySnapshotTierCommandOutput } from "../commands/ModifySnapshotTierCommand";
import {
  ModifySpotFleetRequestCommandInput,
  ModifySpotFleetRequestCommandOutput,
} from "../commands/ModifySpotFleetRequestCommand";
import {
  ModifySubnetAttributeCommandInput,
  ModifySubnetAttributeCommandOutput,
} from "../commands/ModifySubnetAttributeCommand";
import {
  ModifyTrafficMirrorFilterNetworkServicesCommandInput,
  ModifyTrafficMirrorFilterNetworkServicesCommandOutput,
} from "../commands/ModifyTrafficMirrorFilterNetworkServicesCommand";
import {
  ModifyTrafficMirrorFilterRuleCommandInput,
  ModifyTrafficMirrorFilterRuleCommandOutput,
} from "../commands/ModifyTrafficMirrorFilterRuleCommand";
import {
  ModifyTrafficMirrorSessionCommandInput,
  ModifyTrafficMirrorSessionCommandOutput,
} from "../commands/ModifyTrafficMirrorSessionCommand";
import {
  ModifyTransitGatewayCommandInput,
  ModifyTransitGatewayCommandOutput,
} from "../commands/ModifyTransitGatewayCommand";
import {
  ModifyTransitGatewayPrefixListReferenceCommandInput,
  ModifyTransitGatewayPrefixListReferenceCommandOutput,
} from "../commands/ModifyTransitGatewayPrefixListReferenceCommand";
import {
  ModifyTransitGatewayVpcAttachmentCommandInput,
  ModifyTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/ModifyTransitGatewayVpcAttachmentCommand";
import {
  ModifyVerifiedAccessEndpointCommandInput,
  ModifyVerifiedAccessEndpointCommandOutput,
} from "../commands/ModifyVerifiedAccessEndpointCommand";
import {
  ModifyVerifiedAccessEndpointPolicyCommandInput,
  ModifyVerifiedAccessEndpointPolicyCommandOutput,
} from "../commands/ModifyVerifiedAccessEndpointPolicyCommand";
import {
  ModifyVerifiedAccessGroupCommandInput,
  ModifyVerifiedAccessGroupCommandOutput,
} from "../commands/ModifyVerifiedAccessGroupCommand";
import {
  ModifyVerifiedAccessGroupPolicyCommandInput,
  ModifyVerifiedAccessGroupPolicyCommandOutput,
} from "../commands/ModifyVerifiedAccessGroupPolicyCommand";
import {
  ModifyVerifiedAccessInstanceCommandInput,
  ModifyVerifiedAccessInstanceCommandOutput,
} from "../commands/ModifyVerifiedAccessInstanceCommand";
import {
  ModifyVerifiedAccessInstanceLoggingConfigurationCommandInput,
  ModifyVerifiedAccessInstanceLoggingConfigurationCommandOutput,
} from "../commands/ModifyVerifiedAccessInstanceLoggingConfigurationCommand";
import {
  ModifyVerifiedAccessTrustProviderCommandInput,
  ModifyVerifiedAccessTrustProviderCommandOutput,
} from "../commands/ModifyVerifiedAccessTrustProviderCommand";
import {
  ModifyVolumeAttributeCommandInput,
  ModifyVolumeAttributeCommandOutput,
} from "../commands/ModifyVolumeAttributeCommand";
import { ModifyVolumeCommandInput, ModifyVolumeCommandOutput } from "../commands/ModifyVolumeCommand";
import { ModifyVpcAttributeCommandInput, ModifyVpcAttributeCommandOutput } from "../commands/ModifyVpcAttributeCommand";
import { ModifyVpcEndpointCommandInput, ModifyVpcEndpointCommandOutput } from "../commands/ModifyVpcEndpointCommand";
import {
  ModifyVpcEndpointConnectionNotificationCommandInput,
  ModifyVpcEndpointConnectionNotificationCommandOutput,
} from "../commands/ModifyVpcEndpointConnectionNotificationCommand";
import {
  ModifyVpcEndpointServiceConfigurationCommandInput,
  ModifyVpcEndpointServiceConfigurationCommandOutput,
} from "../commands/ModifyVpcEndpointServiceConfigurationCommand";
import {
  ModifyVpcEndpointServicePayerResponsibilityCommandInput,
  ModifyVpcEndpointServicePayerResponsibilityCommandOutput,
} from "../commands/ModifyVpcEndpointServicePayerResponsibilityCommand";
import {
  ModifyVpcEndpointServicePermissionsCommandInput,
  ModifyVpcEndpointServicePermissionsCommandOutput,
} from "../commands/ModifyVpcEndpointServicePermissionsCommand";
import {
  ModifyVpcPeeringConnectionOptionsCommandInput,
  ModifyVpcPeeringConnectionOptionsCommandOutput,
} from "../commands/ModifyVpcPeeringConnectionOptionsCommand";
import { ModifyVpcTenancyCommandInput, ModifyVpcTenancyCommandOutput } from "../commands/ModifyVpcTenancyCommand";
import {
  ModifyVpnConnectionCommandInput,
  ModifyVpnConnectionCommandOutput,
} from "../commands/ModifyVpnConnectionCommand";
import {
  ModifyVpnConnectionOptionsCommandInput,
  ModifyVpnConnectionOptionsCommandOutput,
} from "../commands/ModifyVpnConnectionOptionsCommand";
import {
  ModifyVpnTunnelCertificateCommandInput,
  ModifyVpnTunnelCertificateCommandOutput,
} from "../commands/ModifyVpnTunnelCertificateCommand";
import {
  ModifyVpnTunnelOptionsCommandInput,
  ModifyVpnTunnelOptionsCommandOutput,
} from "../commands/ModifyVpnTunnelOptionsCommand";
import { MonitorInstancesCommandInput, MonitorInstancesCommandOutput } from "../commands/MonitorInstancesCommand";
import { MoveAddressToVpcCommandInput, MoveAddressToVpcCommandOutput } from "../commands/MoveAddressToVpcCommand";
import {
  MoveByoipCidrToIpamCommandInput,
  MoveByoipCidrToIpamCommandOutput,
} from "../commands/MoveByoipCidrToIpamCommand";
import { ProvisionByoipCidrCommandInput, ProvisionByoipCidrCommandOutput } from "../commands/ProvisionByoipCidrCommand";
import {
  ProvisionIpamPoolCidrCommandInput,
  ProvisionIpamPoolCidrCommandOutput,
} from "../commands/ProvisionIpamPoolCidrCommand";
import {
  ProvisionPublicIpv4PoolCidrCommandInput,
  ProvisionPublicIpv4PoolCidrCommandOutput,
} from "../commands/ProvisionPublicIpv4PoolCidrCommand";
import {
  PurchaseHostReservationCommandInput,
  PurchaseHostReservationCommandOutput,
} from "../commands/PurchaseHostReservationCommand";
import {
  PurchaseReservedInstancesOfferingCommandInput,
  PurchaseReservedInstancesOfferingCommandOutput,
} from "../commands/PurchaseReservedInstancesOfferingCommand";
import {
  PurchaseScheduledInstancesCommandInput,
  PurchaseScheduledInstancesCommandOutput,
} from "../commands/PurchaseScheduledInstancesCommand";
import { RebootInstancesCommandInput, RebootInstancesCommandOutput } from "../commands/RebootInstancesCommand";
import { RegisterImageCommandInput, RegisterImageCommandOutput } from "../commands/RegisterImageCommand";
import {
  RegisterInstanceEventNotificationAttributesCommandInput,
  RegisterInstanceEventNotificationAttributesCommandOutput,
} from "../commands/RegisterInstanceEventNotificationAttributesCommand";
import {
  RegisterTransitGatewayMulticastGroupMembersCommandInput,
  RegisterTransitGatewayMulticastGroupMembersCommandOutput,
} from "../commands/RegisterTransitGatewayMulticastGroupMembersCommand";
import {
  RegisterTransitGatewayMulticastGroupSourcesCommandInput,
  RegisterTransitGatewayMulticastGroupSourcesCommandOutput,
} from "../commands/RegisterTransitGatewayMulticastGroupSourcesCommand";
import {
  RejectTransitGatewayMulticastDomainAssociationsCommandInput,
  RejectTransitGatewayMulticastDomainAssociationsCommandOutput,
} from "../commands/RejectTransitGatewayMulticastDomainAssociationsCommand";
import {
  RejectTransitGatewayPeeringAttachmentCommandInput,
  RejectTransitGatewayPeeringAttachmentCommandOutput,
} from "../commands/RejectTransitGatewayPeeringAttachmentCommand";
import {
  RejectTransitGatewayVpcAttachmentCommandInput,
  RejectTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/RejectTransitGatewayVpcAttachmentCommand";
import {
  RejectVpcEndpointConnectionsCommandInput,
  RejectVpcEndpointConnectionsCommandOutput,
} from "../commands/RejectVpcEndpointConnectionsCommand";
import {
  RejectVpcPeeringConnectionCommandInput,
  RejectVpcPeeringConnectionCommandOutput,
} from "../commands/RejectVpcPeeringConnectionCommand";
import { ReleaseAddressCommandInput, ReleaseAddressCommandOutput } from "../commands/ReleaseAddressCommand";
import { ReleaseHostsCommandInput, ReleaseHostsCommandOutput } from "../commands/ReleaseHostsCommand";
import {
  ReleaseIpamPoolAllocationCommandInput,
  ReleaseIpamPoolAllocationCommandOutput,
} from "../commands/ReleaseIpamPoolAllocationCommand";
import {
  ReplaceIamInstanceProfileAssociationCommandInput,
  ReplaceIamInstanceProfileAssociationCommandOutput,
} from "../commands/ReplaceIamInstanceProfileAssociationCommand";
import {
  ReplaceNetworkAclAssociationCommandInput,
  ReplaceNetworkAclAssociationCommandOutput,
} from "../commands/ReplaceNetworkAclAssociationCommand";
import {
  ReplaceNetworkAclEntryCommandInput,
  ReplaceNetworkAclEntryCommandOutput,
} from "../commands/ReplaceNetworkAclEntryCommand";
import { ReplaceRouteCommandInput, ReplaceRouteCommandOutput } from "../commands/ReplaceRouteCommand";
import {
  ReplaceRouteTableAssociationCommandInput,
  ReplaceRouteTableAssociationCommandOutput,
} from "../commands/ReplaceRouteTableAssociationCommand";
import {
  ReplaceTransitGatewayRouteCommandInput,
  ReplaceTransitGatewayRouteCommandOutput,
} from "../commands/ReplaceTransitGatewayRouteCommand";
import { ReplaceVpnTunnelCommandInput, ReplaceVpnTunnelCommandOutput } from "../commands/ReplaceVpnTunnelCommand";
import {
  ReportInstanceStatusCommandInput,
  ReportInstanceStatusCommandOutput,
} from "../commands/ReportInstanceStatusCommand";
import { RequestSpotFleetCommandInput, RequestSpotFleetCommandOutput } from "../commands/RequestSpotFleetCommand";
import {
  RequestSpotInstancesCommandInput,
  RequestSpotInstancesCommandOutput,
} from "../commands/RequestSpotInstancesCommand";
import {
  ResetAddressAttributeCommandInput,
  ResetAddressAttributeCommandOutput,
} from "../commands/ResetAddressAttributeCommand";
import {
  ResetEbsDefaultKmsKeyIdCommandInput,
  ResetEbsDefaultKmsKeyIdCommandOutput,
} from "../commands/ResetEbsDefaultKmsKeyIdCommand";
import {
  ResetFpgaImageAttributeCommandInput,
  ResetFpgaImageAttributeCommandOutput,
} from "../commands/ResetFpgaImageAttributeCommand";
import {
  ResetImageAttributeCommandInput,
  ResetImageAttributeCommandOutput,
} from "../commands/ResetImageAttributeCommand";
import {
  ResetInstanceAttributeCommandInput,
  ResetInstanceAttributeCommandOutput,
} from "../commands/ResetInstanceAttributeCommand";
import {
  ResetNetworkInterfaceAttributeCommandInput,
  ResetNetworkInterfaceAttributeCommandOutput,
} from "../commands/ResetNetworkInterfaceAttributeCommand";
import {
  ResetSnapshotAttributeCommandInput,
  ResetSnapshotAttributeCommandOutput,
} from "../commands/ResetSnapshotAttributeCommand";
import {
  RestoreAddressToClassicCommandInput,
  RestoreAddressToClassicCommandOutput,
} from "../commands/RestoreAddressToClassicCommand";
import {
  RestoreImageFromRecycleBinCommandInput,
  RestoreImageFromRecycleBinCommandOutput,
} from "../commands/RestoreImageFromRecycleBinCommand";
import {
  RestoreManagedPrefixListVersionCommandInput,
  RestoreManagedPrefixListVersionCommandOutput,
} from "../commands/RestoreManagedPrefixListVersionCommand";
import {
  RestoreSnapshotFromRecycleBinCommandInput,
  RestoreSnapshotFromRecycleBinCommandOutput,
} from "../commands/RestoreSnapshotFromRecycleBinCommand";
import {
  RestoreSnapshotTierCommandInput,
  RestoreSnapshotTierCommandOutput,
} from "../commands/RestoreSnapshotTierCommand";
import {
  RevokeClientVpnIngressCommandInput,
  RevokeClientVpnIngressCommandOutput,
} from "../commands/RevokeClientVpnIngressCommand";
import {
  RevokeSecurityGroupEgressCommandInput,
  RevokeSecurityGroupEgressCommandOutput,
} from "../commands/RevokeSecurityGroupEgressCommand";
import {
  RevokeSecurityGroupIngressCommandInput,
  RevokeSecurityGroupIngressCommandOutput,
} from "../commands/RevokeSecurityGroupIngressCommand";
import { RunInstancesCommandInput, RunInstancesCommandOutput } from "../commands/RunInstancesCommand";
import {
  RunScheduledInstancesCommandInput,
  RunScheduledInstancesCommandOutput,
} from "../commands/RunScheduledInstancesCommand";
import {
  SearchLocalGatewayRoutesCommandInput,
  SearchLocalGatewayRoutesCommandOutput,
} from "../commands/SearchLocalGatewayRoutesCommand";
import {
  SearchTransitGatewayMulticastGroupsCommandInput,
  SearchTransitGatewayMulticastGroupsCommandOutput,
} from "../commands/SearchTransitGatewayMulticastGroupsCommand";
import {
  SearchTransitGatewayRoutesCommandInput,
  SearchTransitGatewayRoutesCommandOutput,
} from "../commands/SearchTransitGatewayRoutesCommand";
import {
  SendDiagnosticInterruptCommandInput,
  SendDiagnosticInterruptCommandOutput,
} from "../commands/SendDiagnosticInterruptCommand";
import { StartInstancesCommandInput, StartInstancesCommandOutput } from "../commands/StartInstancesCommand";
import {
  StartNetworkInsightsAccessScopeAnalysisCommandInput,
  StartNetworkInsightsAccessScopeAnalysisCommandOutput,
} from "../commands/StartNetworkInsightsAccessScopeAnalysisCommand";
import {
  StartNetworkInsightsAnalysisCommandInput,
  StartNetworkInsightsAnalysisCommandOutput,
} from "../commands/StartNetworkInsightsAnalysisCommand";
import {
  StartVpcEndpointServicePrivateDnsVerificationCommandInput,
  StartVpcEndpointServicePrivateDnsVerificationCommandOutput,
} from "../commands/StartVpcEndpointServicePrivateDnsVerificationCommand";
import { StopInstancesCommandInput, StopInstancesCommandOutput } from "../commands/StopInstancesCommand";
import {
  TerminateClientVpnConnectionsCommandInput,
  TerminateClientVpnConnectionsCommandOutput,
} from "../commands/TerminateClientVpnConnectionsCommand";
import { TerminateInstancesCommandInput, TerminateInstancesCommandOutput } from "../commands/TerminateInstancesCommand";
import {
  UnassignIpv6AddressesCommandInput,
  UnassignIpv6AddressesCommandOutput,
} from "../commands/UnassignIpv6AddressesCommand";
import {
  UnassignPrivateIpAddressesCommandInput,
  UnassignPrivateIpAddressesCommandOutput,
} from "../commands/UnassignPrivateIpAddressesCommand";
import {
  UnassignPrivateNatGatewayAddressCommandInput,
  UnassignPrivateNatGatewayAddressCommandOutput,
} from "../commands/UnassignPrivateNatGatewayAddressCommand";
import { UnmonitorInstancesCommandInput, UnmonitorInstancesCommandOutput } from "../commands/UnmonitorInstancesCommand";
import {
  UpdateSecurityGroupRuleDescriptionsEgressCommandInput,
  UpdateSecurityGroupRuleDescriptionsEgressCommandOutput,
} from "../commands/UpdateSecurityGroupRuleDescriptionsEgressCommand";
import {
  UpdateSecurityGroupRuleDescriptionsIngressCommandInput,
  UpdateSecurityGroupRuleDescriptionsIngressCommandOutput,
} from "../commands/UpdateSecurityGroupRuleDescriptionsIngressCommand";
import { WithdrawByoipCidrCommandInput, WithdrawByoipCidrCommandOutput } from "../commands/WithdrawByoipCidrCommand";
import { EC2ServiceException as __BaseException } from "../models/EC2ServiceException";
import {
  _InstanceType,
  AcceleratorCount,
  AcceleratorCountRequest,
  AcceleratorManufacturer,
  AcceleratorName,
  AcceleratorTotalMemoryMiB,
  AcceleratorTotalMemoryMiBRequest,
  AcceleratorType,
  AcceptAddressTransferRequest,
  AcceptAddressTransferResult,
  AcceptReservedInstancesExchangeQuoteRequest,
  AcceptReservedInstancesExchangeQuoteResult,
  AcceptTransitGatewayMulticastDomainAssociationsRequest,
  AcceptTransitGatewayMulticastDomainAssociationsResult,
  AcceptTransitGatewayPeeringAttachmentRequest,
  AcceptTransitGatewayPeeringAttachmentResult,
  AcceptTransitGatewayVpcAttachmentRequest,
  AcceptTransitGatewayVpcAttachmentResult,
  AcceptVpcEndpointConnectionsRequest,
  AcceptVpcEndpointConnectionsResult,
  AcceptVpcPeeringConnectionRequest,
  AcceptVpcPeeringConnectionResult,
  AccessScopeAnalysisFinding,
  AccessScopePath,
  AccessScopePathRequest,
  AccountAttribute,
  AccountAttributeName,
  AccountAttributeValue,
  ActiveInstance,
  AddedPrincipal,
  AddIpamOperatingRegion,
  AdditionalDetail,
  AddPrefixListEntry,
  Address,
  AddressAttribute,
  AddressTransfer,
  AdvertiseByoipCidrRequest,
  AdvertiseByoipCidrResult,
  AllocateAddressRequest,
  AllocateAddressResult,
  AllocateHostsRequest,
  AllocateHostsResult,
  AllocateIpamPoolCidrRequest,
  AllocateIpamPoolCidrResult,
  AllowedPrincipal,
  AlternatePathHint,
  AnalysisAclRule,
  AnalysisComponent,
  AnalysisLoadBalancerListener,
  AnalysisLoadBalancerTarget,
  AnalysisPacketHeader,
  AnalysisRouteTableRoute,
  AnalysisSecurityGroupRule,
  ApplySecurityGroupsToClientVpnTargetNetworkRequest,
  ApplySecurityGroupsToClientVpnTargetNetworkResult,
  AssignedPrivateIpAddress,
  AssignIpv6AddressesRequest,
  AssignIpv6AddressesResult,
  AssignPrivateIpAddressesRequest,
  AssignPrivateIpAddressesResult,
  AssignPrivateNatGatewayAddressRequest,
  AssignPrivateNatGatewayAddressResult,
  AssociateAddressRequest,
  AssociateAddressResult,
  AssociateClientVpnTargetNetworkRequest,
  AssociateClientVpnTargetNetworkResult,
  AssociateDhcpOptionsRequest,
  AssociateEnclaveCertificateIamRoleRequest,
  AssociateEnclaveCertificateIamRoleResult,
  AssociateIamInstanceProfileRequest,
  AssociateIamInstanceProfileResult,
  AssociateInstanceEventWindowRequest,
  AssociateInstanceEventWindowResult,
  AssociateIpamResourceDiscoveryRequest,
  AssociateIpamResourceDiscoveryResult,
  AssociateNatGatewayAddressRequest,
  AssociateNatGatewayAddressResult,
  AssociateRouteTableRequest,
  AssociateRouteTableResult,
  AssociateSubnetCidrBlockRequest,
  AssociateSubnetCidrBlockResult,
  AssociateTransitGatewayMulticastDomainRequest,
  AssociateTransitGatewayMulticastDomainResult,
  AssociateTransitGatewayPolicyTableRequest,
  AssociateTransitGatewayPolicyTableResult,
  AssociateTransitGatewayRouteTableRequest,
  AssociateTransitGatewayRouteTableResult,
  AssociateTrunkInterfaceRequest,
  AssociateTrunkInterfaceResult,
  AssociateVpcCidrBlockRequest,
  AssociateVpcCidrBlockResult,
  AssociationStatus,
  AttachClassicLinkVpcRequest,
  AttachClassicLinkVpcResult,
  AttachInternetGatewayRequest,
  AttachNetworkInterfaceRequest,
  AttachNetworkInterfaceResult,
  AttachVerifiedAccessTrustProviderRequest,
  AttachVerifiedAccessTrustProviderResult,
  AttachVolumeRequest,
  AttachVpnGatewayRequest,
  AttachVpnGatewayResult,
  AuthorizeClientVpnIngressRequest,
  AuthorizeClientVpnIngressResult,
  AuthorizeSecurityGroupEgressRequest,
  AuthorizeSecurityGroupEgressResult,
  AuthorizeSecurityGroupIngressRequest,
  AuthorizeSecurityGroupIngressResult,
  BundleInstanceRequest,
  BundleInstanceResult,
  BundleTask,
  BundleTaskError,
  ByoipCidr,
  CancelBundleTaskRequest,
  CancelBundleTaskResult,
  CancelCapacityReservationFleetError,
  CancelCapacityReservationFleetsRequest,
  CancelCapacityReservationFleetsResult,
  CancelCapacityReservationRequest,
  CancelCapacityReservationResult,
  CancelConversionRequest,
  CancelExportTaskRequest,
  CancelImageLaunchPermissionRequest,
  CancelImageLaunchPermissionResult,
  CancelImportTaskRequest,
  CancelImportTaskResult,
  CancelledSpotInstanceRequest,
  CancelReservedInstancesListingRequest,
  CancelReservedInstancesListingResult,
  CancelSpotFleetRequestsError,
  CancelSpotFleetRequestsErrorItem,
  CancelSpotFleetRequestsRequest,
  CancelSpotFleetRequestsResponse,
  CancelSpotFleetRequestsSuccessItem,
  CancelSpotInstanceRequestsRequest,
  CancelSpotInstanceRequestsResult,
  CapacityAllocation,
  CapacityReservation,
  CapacityReservationFleetCancellationState,
  CarrierGateway,
  CidrBlock,
  ClientVpnAuthorizationRuleStatus,
  ConfirmProductInstanceRequest,
  ConfirmProductInstanceResult,
  CopyFpgaImageRequest,
  CopyFpgaImageResult,
  CopyImageRequest,
  CopyImageResult,
  CopySnapshotRequest,
  CopySnapshotResult,
  CreateCapacityReservationFleetRequest,
  CreateCapacityReservationFleetResult,
  CreateCapacityReservationRequest,
  CreateCapacityReservationResult,
  CreateCarrierGatewayRequest,
  CreateCarrierGatewayResult,
  DeviceOptions,
  DirectoryServiceAuthenticationRequest,
  EnaSrdSpecification,
  EnaSrdUdpSpecification,
  Explanation,
  FailedCapacityReservationFleetCancellationResult,
  FederatedAuthenticationRequest,
  FirewallStatefulRule,
  FirewallStatelessRule,
  FleetCapacityReservation,
  IamInstanceProfile,
  IamInstanceProfileAssociation,
  IamInstanceProfileSpecification,
  InstanceCount,
  InstanceEventWindow,
  InstanceEventWindowAssociationRequest,
  InstanceEventWindowAssociationTarget,
  InstanceEventWindowTimeRange,
  IpamPoolAllocation,
  IpamResourceDiscoveryAssociation,
  IpPermission,
  IpRange,
  Ipv4PrefixSpecification,
  Ipv6CidrBlock,
  Ipv6Range,
  NatGatewayAddress,
  OidcOptions,
  PacketHeaderStatement,
  PacketHeaderStatementRequest,
  PathComponent,
  PathStatement,
  PathStatementRequest,
  PeeringAttachmentStatus,
  PeeringTgwInfo,
  PortRange,
  PrefixListId,
  PriceSchedule,
  Protocol,
  PtrUpdateStatus,
  ReferencedSecurityGroup,
  ReservationFleetInstanceSpecification,
  ReservedInstancesListing,
  ResourceStatement,
  ResourceStatementRequest,
  RouteTableAssociationState,
  RuleGroupRuleOptionsPair,
  RuleGroupTypePair,
  RuleOption,
  S3Storage,
  SecurityGroupRule,
  Storage,
  SubnetAssociation,
  SubnetCidrBlockState,
  SubnetIpv6CidrBlockAssociation,
  Tag,
  TagSpecification,
  TargetConfigurationRequest,
  ThroughResourcesStatement,
  ThroughResourcesStatementRequest,
  TransitGatewayAssociation,
  TransitGatewayMulticastDomainAssociations,
  TransitGatewayPeeringAttachment,
  TransitGatewayPeeringAttachmentOptions,
  TransitGatewayPolicyTableAssociation,
  TransitGatewayRouteTableRoute,
  TransitGatewayVpcAttachment,
  TransitGatewayVpcAttachmentOptions,
  TrunkInterfaceAssociation,
  UnsuccessfulItem,
  UnsuccessfulItemError,
  UserIdGroupPair,
  VerifiedAccessInstance,
  VerifiedAccessSseSpecificationResponse,
  VerifiedAccessTrustProvider,
  VerifiedAccessTrustProviderCondensed,
  VolumeAttachment,
  VpcAttachment,
  VpcCidrBlockAssociation,
  VpcCidrBlockState,
  VpcIpv6CidrBlockAssociation,
  VpcPeeringConnection,
  VpcPeeringConnectionOptionsDescription,
  VpcPeeringConnectionStateReason,
  VpcPeeringConnectionVpcInfo,
} from "../models/models_0";
import {
  AttachmentEnaSrdSpecification,
  AttachmentEnaSrdUdpSpecification,
  AttributeValue,
  BaselineEbsBandwidthMbps,
  BaselineEbsBandwidthMbpsRequest,
  BlockDeviceMapping,
  CapacityReservationOptionsRequest,
  CapacityReservationTarget,
  CapacityReservationTargetResponse,
  CertificateAuthenticationRequest,
  ClientConnectOptions,
  ClientLoginBannerOptions,
  ClientVpnAuthenticationRequest,
  ClientVpnEndpointStatus,
  ClientVpnRouteStatus,
  CoipCidr,
  CoipPool,
  ConnectionLogOptions,
  CpuManufacturer,
  CreateClientVpnEndpointRequest,
  CreateClientVpnEndpointResult,
  CreateClientVpnRouteRequest,
  CreateClientVpnRouteResult,
  CreateCoipCidrRequest,
  CreateCoipCidrResult,
  CreateCoipPoolRequest,
  CreateCoipPoolResult,
  CreateCustomerGatewayRequest,
  CreateCustomerGatewayResult,
  CreateDefaultSubnetRequest,
  CreateDefaultSubnetResult,
  CreateDefaultVpcRequest,
  CreateDefaultVpcResult,
  CreateDhcpOptionsRequest,
  CreateDhcpOptionsResult,
  CreateEgressOnlyInternetGatewayRequest,
  CreateEgressOnlyInternetGatewayResult,
  CreateFleetError,
  CreateFleetInstance,
  CreateFleetRequest,
  CreateFleetResult,
  CreateFlowLogsRequest,
  CreateFlowLogsResult,
  CreateFpgaImageRequest,
  CreateFpgaImageResult,
  CreateImageRequest,
  CreateImageResult,
  CreateInstanceConnectEndpointRequest,
  CreateInstanceConnectEndpointResult,
  CreateInstanceEventWindowRequest,
  CreateInstanceEventWindowResult,
  CreateInstanceExportTaskRequest,
  CreateInstanceExportTaskResult,
  CreateInternetGatewayRequest,
  CreateInternetGatewayResult,
  CreateIpamPoolRequest,
  CreateIpamPoolResult,
  CreateIpamRequest,
  CreateIpamResourceDiscoveryRequest,
  CreateIpamResourceDiscoveryResult,
  CreateIpamResult,
  CreateIpamScopeRequest,
  CreateIpamScopeResult,
  CreateKeyPairRequest,
  CreateLaunchTemplateRequest,
  CreateLaunchTemplateResult,
  CreateLaunchTemplateVersionRequest,
  CreateLaunchTemplateVersionResult,
  CreateLocalGatewayRouteRequest,
  CreateLocalGatewayRouteResult,
  CreateLocalGatewayRouteTableRequest,
  CreateLocalGatewayRouteTableResult,
  CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest,
  CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult,
  CreateLocalGatewayRouteTableVpcAssociationRequest,
  CreateLocalGatewayRouteTableVpcAssociationResult,
  CreateManagedPrefixListRequest,
  CreateManagedPrefixListResult,
  CreateNatGatewayRequest,
  CreateNatGatewayResult,
  CreateNetworkAclEntryRequest,
  CreateNetworkAclRequest,
  CreateNetworkAclResult,
  CreateNetworkInsightsAccessScopeRequest,
  CreateNetworkInsightsAccessScopeResult,
  CreateNetworkInsightsPathRequest,
  CreateNetworkInsightsPathResult,
  CreateNetworkInterfacePermissionRequest,
  CreateNetworkInterfacePermissionResult,
  CreateNetworkInterfaceRequest,
  CreateNetworkInterfaceResult,
  CreatePlacementGroupRequest,
  CreditSpecification,
  CreditSpecificationRequest,
  CustomerGateway,
  DestinationOptionsRequest,
  DhcpConfiguration,
  DhcpOptions,
  EbsBlockDevice,
  Ec2InstanceConnectEndpoint,
  EgressOnlyInternetGateway,
  ElasticGpuSpecification,
  ElasticGpuSpecificationResponse,
  ExportTask,
  ExportToS3Task,
  ExportToS3TaskSpecification,
  FilterPortRange,
  FleetLaunchTemplateConfigRequest,
  FleetLaunchTemplateOverrides,
  FleetLaunchTemplateOverridesRequest,
  FleetLaunchTemplateSpecification,
  FleetLaunchTemplateSpecificationRequest,
  FleetSpotCapacityRebalanceRequest,
  FleetSpotMaintenanceStrategiesRequest,
  GroupIdentifier,
  IcmpTypeCode,
  InstanceEventWindowTimeRangeRequest,
  InstanceExportDetails,
  InstanceGeneration,
  InstanceIpv6Address,
  InstanceIpv6AddressRequest,
  InstanceRequirements,
  InstanceRequirementsRequest,
  InternetGateway,
  InternetGatewayAttachment,
  Ipam,
  IpamOperatingRegion,
  IpamPool,
  IpamResourceDiscovery,
  IpamResourceTag,
  IpamScope,
  Ipv4PrefixSpecificationRequest,
  Ipv4PrefixSpecificationResponse,
  Ipv6PrefixSpecification,
  Ipv6PrefixSpecificationRequest,
  Ipv6PrefixSpecificationResponse,
  KeyPair,
  LaunchTemplate,
  LaunchTemplateAndOverridesResponse,
  LaunchTemplateBlockDeviceMapping,
  LaunchTemplateBlockDeviceMappingRequest,
  LaunchTemplateCapacityReservationSpecificationRequest,
  LaunchTemplateCapacityReservationSpecificationResponse,
  LaunchTemplateCpuOptions,
  LaunchTemplateCpuOptionsRequest,
  LaunchTemplateEbsBlockDevice,
  LaunchTemplateEbsBlockDeviceRequest,
  LaunchTemplateElasticInferenceAccelerator,
  LaunchTemplateElasticInferenceAcceleratorResponse,
  LaunchTemplateEnclaveOptions,
  LaunchTemplateEnclaveOptionsRequest,
  LaunchTemplateHibernationOptions,
  LaunchTemplateHibernationOptionsRequest,
  LaunchTemplateIamInstanceProfileSpecification,
  LaunchTemplateIamInstanceProfileSpecificationRequest,
  LaunchTemplateInstanceMaintenanceOptions,
  LaunchTemplateInstanceMaintenanceOptionsRequest,
  LaunchTemplateInstanceMarketOptions,
  LaunchTemplateInstanceMarketOptionsRequest,
  LaunchTemplateInstanceMetadataOptions,
  LaunchTemplateInstanceMetadataOptionsRequest,
  LaunchTemplateInstanceNetworkInterfaceSpecification,
  LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
  LaunchTemplateLicenseConfiguration,
  LaunchTemplateLicenseConfigurationRequest,
  LaunchTemplatePlacement,
  LaunchTemplatePlacementRequest,
  LaunchTemplatePrivateDnsNameOptions,
  LaunchTemplatePrivateDnsNameOptionsRequest,
  LaunchTemplatesMonitoring,
  LaunchTemplatesMonitoringRequest,
  LaunchTemplateSpotMarketOptions,
  LaunchTemplateSpotMarketOptionsRequest,
  LaunchTemplateTagSpecification,
  LaunchTemplateTagSpecificationRequest,
  LaunchTemplateVersion,
  LocalGatewayRoute,
  LocalGatewayRouteTable,
  LocalGatewayRouteTableVirtualInterfaceGroupAssociation,
  LocalGatewayRouteTableVpcAssociation,
  LocalStorageType,
  ManagedPrefixList,
  MemoryGiBPerVCpu,
  MemoryGiBPerVCpuRequest,
  MemoryMiB,
  MemoryMiBRequest,
  NatGateway,
  NetworkAcl,
  NetworkAclAssociation,
  NetworkAclEntry,
  NetworkBandwidthGbps,
  NetworkBandwidthGbpsRequest,
  NetworkInsightsAccessScope,
  NetworkInsightsAccessScopeContent,
  NetworkInsightsPath,
  NetworkInterface,
  NetworkInterfaceAssociation,
  NetworkInterfaceAttachment,
  NetworkInterfaceCount,
  NetworkInterfaceCountRequest,
  NetworkInterfaceIpv6Address,
  NetworkInterfacePermission,
  NetworkInterfacePermissionState,
  NetworkInterfacePrivateIpAddress,
  NewDhcpConfiguration,
  OnDemandOptionsRequest,
  PathFilter,
  PathRequestFilter,
  Placement,
  PlacementGroup,
  PlacementResponse,
  PrivateDnsNameOptionsOnLaunch,
  PrivateIpAddressSpecification,
  ProvisionedBandwidth,
  RequestFilterPortRange,
  RequestIpamResourceTag,
  RequestLaunchTemplateData,
  ResponseLaunchTemplateData,
  SpotOptionsRequest,
  StateReason,
  StorageLocation,
  Subnet,
  TargetCapacitySpecificationRequest,
  TotalLocalStorageGB,
  TotalLocalStorageGBRequest,
  ValidationError,
  ValidationWarning,
  VCpuCountRange,
  VCpuCountRangeRequest,
  Vpc,
} from "../models/models_1";
import {
  CloudWatchLogOptions,
  CloudWatchLogOptionsSpecification,
  ConnectionNotification,
  CreatePlacementGroupResult,
  CreatePublicIpv4PoolRequest,
  CreatePublicIpv4PoolResult,
  CreateReplaceRootVolumeTaskRequest,
  CreateReplaceRootVolumeTaskResult,
  CreateReservedInstancesListingRequest,
  CreateReservedInstancesListingResult,
  CreateRestoreImageTaskRequest,
  CreateRestoreImageTaskResult,
  CreateRouteRequest,
  CreateRouteResult,
  CreateRouteTableRequest,
  CreateRouteTableResult,
  CreateSecurityGroupRequest,
  CreateSecurityGroupResult,
  CreateSnapshotRequest,
  CreateSnapshotsRequest,
  CreateSnapshotsResult,
  CreateSpotDatafeedSubscriptionRequest,
  CreateSpotDatafeedSubscriptionResult,
  CreateStoreImageTaskRequest,
  CreateStoreImageTaskResult,
  CreateSubnetCidrReservationRequest,
  CreateSubnetCidrReservationResult,
  CreateSubnetRequest,
  CreateSubnetResult,
  CreateTagsRequest,
  CreateTrafficMirrorFilterRequest,
  CreateTrafficMirrorFilterResult,
  CreateTrafficMirrorFilterRuleRequest,
  CreateTrafficMirrorFilterRuleResult,
  CreateTrafficMirrorSessionRequest,
  CreateTrafficMirrorSessionResult,
  CreateTrafficMirrorTargetRequest,
  CreateTrafficMirrorTargetResult,
  CreateTransitGatewayConnectPeerRequest,
  CreateTransitGatewayConnectPeerResult,
  CreateTransitGatewayConnectRequest,
  CreateTransitGatewayConnectRequestOptions,
  CreateTransitGatewayConnectResult,
  CreateTransitGatewayMulticastDomainRequest,
  CreateTransitGatewayMulticastDomainRequestOptions,
  CreateTransitGatewayMulticastDomainResult,
  CreateTransitGatewayPeeringAttachmentRequest,
  CreateTransitGatewayPeeringAttachmentRequestOptions,
  CreateTransitGatewayPeeringAttachmentResult,
  CreateTransitGatewayPolicyTableRequest,
  CreateTransitGatewayPolicyTableResult,
  CreateTransitGatewayPrefixListReferenceRequest,
  CreateTransitGatewayPrefixListReferenceResult,
  CreateTransitGatewayRequest,
  CreateTransitGatewayResult,
  CreateTransitGatewayRouteRequest,
  CreateTransitGatewayRouteResult,
  CreateTransitGatewayRouteTableAnnouncementRequest,
  CreateTransitGatewayRouteTableAnnouncementResult,
  CreateTransitGatewayRouteTableRequest,
  CreateTransitGatewayRouteTableResult,
  CreateTransitGatewayVpcAttachmentRequest,
  CreateTransitGatewayVpcAttachmentRequestOptions,
  CreateTransitGatewayVpcAttachmentResult,
  CreateVerifiedAccessEndpointEniOptions,
  CreateVerifiedAccessEndpointLoadBalancerOptions,
  CreateVerifiedAccessEndpointRequest,
  CreateVerifiedAccessEndpointResult,
  CreateVerifiedAccessGroupRequest,
  CreateVerifiedAccessGroupResult,
  CreateVerifiedAccessInstanceRequest,
  CreateVerifiedAccessInstanceResult,
  CreateVerifiedAccessTrustProviderDeviceOptions,
  CreateVerifiedAccessTrustProviderOidcOptions,
  CreateVerifiedAccessTrustProviderRequest,
  CreateVerifiedAccessTrustProviderResult,
  CreateVolumeRequest,
  CreateVpcEndpointConnectionNotificationRequest,
  CreateVpcEndpointConnectionNotificationResult,
  CreateVpcEndpointRequest,
  CreateVpcEndpointResult,
  CreateVpcEndpointServiceConfigurationRequest,
  CreateVpcEndpointServiceConfigurationResult,
  CreateVpcPeeringConnectionRequest,
  CreateVpcPeeringConnectionResult,
  CreateVpcRequest,
  CreateVpcResult,
  CreateVpnConnectionRequest,
  CreateVpnConnectionResult,
  CreateVpnConnectionRouteRequest,
  CreateVpnGatewayRequest,
  CreateVpnGatewayResult,
  DeleteCarrierGatewayRequest,
  DeleteCarrierGatewayResult,
  DeleteClientVpnEndpointRequest,
  DeleteClientVpnEndpointResult,
  DeleteClientVpnRouteRequest,
  DeleteClientVpnRouteResult,
  DeleteCoipCidrRequest,
  DeleteCoipCidrResult,
  DeleteCoipPoolRequest,
  DeleteCoipPoolResult,
  DeleteCustomerGatewayRequest,
  DeleteDhcpOptionsRequest,
  DeleteEgressOnlyInternetGatewayRequest,
  DeleteEgressOnlyInternetGatewayResult,
  DeleteFleetError,
  DeleteFleetErrorItem,
  DeleteFleetsRequest,
  DeleteFleetsResult,
  DeleteFleetSuccessItem,
  DeleteFlowLogsRequest,
  DeleteFlowLogsResult,
  DeleteFpgaImageRequest,
  DeleteFpgaImageResult,
  DeleteInstanceConnectEndpointRequest,
  DeleteInstanceConnectEndpointResult,
  DeleteInstanceEventWindowRequest,
  DeleteInstanceEventWindowResult,
  DeleteInternetGatewayRequest,
  DeleteIpamPoolRequest,
  DeleteIpamPoolResult,
  DeleteIpamRequest,
  DeleteIpamResourceDiscoveryRequest,
  DeleteIpamResourceDiscoveryResult,
  DeleteIpamResult,
  DeleteIpamScopeRequest,
  DeleteIpamScopeResult,
  DeleteKeyPairRequest,
  DeleteKeyPairResult,
  DeleteLaunchTemplateRequest,
  DeleteLaunchTemplateResult,
  DeleteLaunchTemplateVersionsRequest,
  DeleteLaunchTemplateVersionsResponseErrorItem,
  DeleteLaunchTemplateVersionsResponseSuccessItem,
  DeleteLaunchTemplateVersionsResult,
  DeleteLocalGatewayRouteRequest,
  DeleteLocalGatewayRouteResult,
  DeleteLocalGatewayRouteTableRequest,
  DeleteLocalGatewayRouteTableResult,
  DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest,
  DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult,
  DeleteLocalGatewayRouteTableVpcAssociationRequest,
  DeleteLocalGatewayRouteTableVpcAssociationResult,
  DeleteManagedPrefixListRequest,
  DeleteManagedPrefixListResult,
  DeleteNatGatewayRequest,
  DeleteNatGatewayResult,
  DeleteNetworkAclEntryRequest,
  DeleteNetworkAclRequest,
  DeleteNetworkInsightsAccessScopeAnalysisRequest,
  DeleteNetworkInsightsAccessScopeAnalysisResult,
  DeleteNetworkInsightsAccessScopeRequest,
  DeleteNetworkInsightsAccessScopeResult,
  DeleteNetworkInsightsAnalysisRequest,
  DeleteNetworkInsightsAnalysisResult,
  DeleteNetworkInsightsPathRequest,
  DeleteNetworkInsightsPathResult,
  DeleteNetworkInterfacePermissionRequest,
  DeleteNetworkInterfacePermissionResult,
  DeleteNetworkInterfaceRequest,
  DeletePlacementGroupRequest,
  DeletePublicIpv4PoolRequest,
  DnsEntry,
  DnsOptions,
  DnsOptionsSpecification,
  IKEVersionsListValue,
  IKEVersionsRequestListValue,
  InstanceEventWindowStateChange,
  InstanceSpecification,
  LastError,
  Phase1DHGroupNumbersListValue,
  Phase1DHGroupNumbersRequestListValue,
  Phase1EncryptionAlgorithmsListValue,
  Phase1EncryptionAlgorithmsRequestListValue,
  Phase1IntegrityAlgorithmsListValue,
  Phase1IntegrityAlgorithmsRequestListValue,
  Phase2DHGroupNumbersListValue,
  Phase2DHGroupNumbersRequestListValue,
  Phase2EncryptionAlgorithmsListValue,
  Phase2EncryptionAlgorithmsRequestListValue,
  Phase2IntegrityAlgorithmsListValue,
  Phase2IntegrityAlgorithmsRequestListValue,
  PriceScheduleSpecification,
  PrivateDnsNameConfiguration,
  PropagatingVgw,
  ReplaceRootVolumeTask,
  ResponseError,
  Route,
  RouteTable,
  RouteTableAssociation,
  S3ObjectTag,
  SecurityGroupIdentifier,
  ServiceConfiguration,
  ServiceConnectivityType,
  ServiceTypeDetail,
  Snapshot,
  SnapshotInfo,
  SpotDatafeedSubscription,
  SpotInstanceStateFault,
  SubnetCidrReservation,
  SubnetConfiguration,
  TrafficMirrorFilter,
  TrafficMirrorFilterRule,
  TrafficMirrorNetworkService,
  TrafficMirrorPortRange,
  TrafficMirrorPortRangeRequest,
  TrafficMirrorSession,
  TrafficMirrorTarget,
  TransitGateway,
  TransitGatewayAttachmentBgpConfiguration,
  TransitGatewayConnect,
  TransitGatewayConnectOptions,
  TransitGatewayConnectPeer,
  TransitGatewayConnectPeerConfiguration,
  TransitGatewayConnectRequestBgpOptions,
  TransitGatewayMulticastDomain,
  TransitGatewayMulticastDomainOptions,
  TransitGatewayOptions,
  TransitGatewayPolicyTable,
  TransitGatewayPrefixListAttachment,
  TransitGatewayPrefixListReference,
  TransitGatewayRequestOptions,
  TransitGatewayRoute,
  TransitGatewayRouteAttachment,
  TransitGatewayRouteTable,
  TransitGatewayRouteTableAnnouncement,
  TunnelOption,
  VerifiedAccessEndpoint,
  VerifiedAccessEndpointEniOptions,
  VerifiedAccessEndpointLoadBalancerOptions,
  VerifiedAccessEndpointStatus,
  VerifiedAccessGroup,
  VerifiedAccessSseSpecificationRequest,
  VgwTelemetry,
  Volume,
  VpcEndpoint,
  VpnConnection,
  VpnConnectionOptions,
  VpnConnectionOptionsSpecification,
  VpnGateway,
  VpnStaticRoute,
  VpnTunnelLogOptions,
  VpnTunnelLogOptionsSpecification,
  VpnTunnelOptionsSpecification,
} from "../models/models_2";
import {
  AssociatedTargetNetwork,
  AttributeBooleanValue,
  AuthorizationRule,
  AvailabilityZone,
  AvailabilityZoneMessage,
  AvailableCapacity,
  CapacityReservationFleet,
  CapacityReservationOptions,
  CapacityReservationSpecificationResponse,
  CertificateAuthentication,
  ClassicLinkInstance,
  ClientConnectResponseOptions,
  ClientLoginBannerResponseOptions,
  ClientVpnAuthentication,
  ClientVpnConnection,
  ClientVpnConnectionStatus,
  ClientVpnEndpoint,
  ClientVpnEndpointAttributeStatus,
  ClientVpnRoute,
  ConnectionLogResponseOptions,
  ConversionTask,
  CpuOptions,
  DeletePublicIpv4PoolResult,
  DeleteQueuedReservedInstancesError,
  DeleteQueuedReservedInstancesRequest,
  DeleteQueuedReservedInstancesResult,
  DeleteRouteRequest,
  DeleteRouteTableRequest,
  DeleteSecurityGroupRequest,
  DeleteSnapshotRequest,
  DeleteSpotDatafeedSubscriptionRequest,
  DeleteSubnetCidrReservationRequest,
  DeleteSubnetCidrReservationResult,
  DeleteSubnetRequest,
  DeleteTagsRequest,
  DeleteTrafficMirrorFilterRequest,
  DeleteTrafficMirrorFilterResult,
  DeleteTrafficMirrorFilterRuleRequest,
  DeleteTrafficMirrorFilterRuleResult,
  DeleteTrafficMirrorSessionRequest,
  DeleteTrafficMirrorSessionResult,
  DeleteTrafficMirrorTargetRequest,
  DeleteTrafficMirrorTargetResult,
  DeleteTransitGatewayConnectPeerRequest,
  DeleteTransitGatewayConnectPeerResult,
  DeleteTransitGatewayConnectRequest,
  DeleteTransitGatewayConnectResult,
  DeleteTransitGatewayMulticastDomainRequest,
  DeleteTransitGatewayMulticastDomainResult,
  DeleteTransitGatewayPeeringAttachmentRequest,
  DeleteTransitGatewayPeeringAttachmentResult,
  DeleteTransitGatewayPolicyTableRequest,
  DeleteTransitGatewayPolicyTableResult,
  DeleteTransitGatewayPrefixListReferenceRequest,
  DeleteTransitGatewayPrefixListReferenceResult,
  DeleteTransitGatewayRequest,
  DeleteTransitGatewayResult,
  DeleteTransitGatewayRouteRequest,
  DeleteTransitGatewayRouteResult,
  DeleteTransitGatewayRouteTableAnnouncementRequest,
  DeleteTransitGatewayRouteTableAnnouncementResult,
  DeleteTransitGatewayRouteTableRequest,
  DeleteTransitGatewayRouteTableResult,
  DeleteTransitGatewayVpcAttachmentRequest,
  DeleteTransitGatewayVpcAttachmentResult,
  DeleteVerifiedAccessEndpointRequest,
  DeleteVerifiedAccessEndpointResult,
  DeleteVerifiedAccessGroupRequest,
  DeleteVerifiedAccessGroupResult,
  DeleteVerifiedAccessInstanceRequest,
  DeleteVerifiedAccessInstanceResult,
  DeleteVerifiedAccessTrustProviderRequest,
  DeleteVerifiedAccessTrustProviderResult,
  DeleteVolumeRequest,
  DeleteVpcEndpointConnectionNotificationsRequest,
  DeleteVpcEndpointConnectionNotificationsResult,
  DeleteVpcEndpointServiceConfigurationsRequest,
  DeleteVpcEndpointServiceConfigurationsResult,
  DeleteVpcEndpointsRequest,
  DeleteVpcEndpointsResult,
  DeleteVpcPeeringConnectionRequest,
  DeleteVpcPeeringConnectionResult,
  DeleteVpcRequest,
  DeleteVpnConnectionRequest,
  DeleteVpnConnectionRouteRequest,
  DeleteVpnGatewayRequest,
  DeprovisionByoipCidrRequest,
  DeprovisionByoipCidrResult,
  DeprovisionIpamPoolCidrRequest,
  DeprovisionIpamPoolCidrResult,
  DeprovisionPublicIpv4PoolCidrRequest,
  DeprovisionPublicIpv4PoolCidrResult,
  DeregisterImageRequest,
  DeregisterInstanceEventNotificationAttributesRequest,
  DeregisterInstanceEventNotificationAttributesResult,
  DeregisterInstanceTagAttributeRequest,
  DeregisterTransitGatewayMulticastGroupMembersRequest,
  DeregisterTransitGatewayMulticastGroupMembersResult,
  DeregisterTransitGatewayMulticastGroupSourcesRequest,
  DeregisterTransitGatewayMulticastGroupSourcesResult,
  DescribeAccountAttributesRequest,
  DescribeAccountAttributesResult,
  DescribeAddressesAttributeRequest,
  DescribeAddressesAttributeResult,
  DescribeAddressesRequest,
  DescribeAddressesResult,
  DescribeAddressTransfersRequest,
  DescribeAddressTransfersResult,
  DescribeAggregateIdFormatRequest,
  DescribeAggregateIdFormatResult,
  DescribeAvailabilityZonesRequest,
  DescribeAvailabilityZonesResult,
  DescribeAwsNetworkPerformanceMetricSubscriptionsRequest,
  DescribeAwsNetworkPerformanceMetricSubscriptionsResult,
  DescribeBundleTasksRequest,
  DescribeBundleTasksResult,
  DescribeByoipCidrsRequest,
  DescribeByoipCidrsResult,
  DescribeCapacityReservationFleetsRequest,
  DescribeCapacityReservationFleetsResult,
  DescribeCapacityReservationsRequest,
  DescribeCapacityReservationsResult,
  DescribeCarrierGatewaysRequest,
  DescribeCarrierGatewaysResult,
  DescribeClassicLinkInstancesRequest,
  DescribeClassicLinkInstancesResult,
  DescribeClientVpnAuthorizationRulesRequest,
  DescribeClientVpnAuthorizationRulesResult,
  DescribeClientVpnConnectionsRequest,
  DescribeClientVpnConnectionsResult,
  DescribeClientVpnEndpointsRequest,
  DescribeClientVpnEndpointsResult,
  DescribeClientVpnRoutesRequest,
  DescribeClientVpnRoutesResult,
  DescribeClientVpnTargetNetworksRequest,
  DescribeClientVpnTargetNetworksResult,
  DescribeCoipPoolsRequest,
  DescribeCoipPoolsResult,
  DescribeConversionTasksRequest,
  DescribeConversionTasksResult,
  DescribeCustomerGatewaysRequest,
  DescribeCustomerGatewaysResult,
  DescribeDhcpOptionsRequest,
  DescribeDhcpOptionsResult,
  DescribeEgressOnlyInternetGatewaysRequest,
  DescribeEgressOnlyInternetGatewaysResult,
  DescribeElasticGpusRequest,
  DescribeElasticGpusResult,
  DescribeExportImageTasksRequest,
  DescribeExportImageTasksResult,
  DescribeExportTasksRequest,
  DescribeExportTasksResult,
  DescribeFastLaunchImagesRequest,
  DescribeFastLaunchImagesResult,
  DescribeFastLaunchImagesSuccessItem,
  DescribeFastSnapshotRestoresRequest,
  DescribeFastSnapshotRestoresResult,
  DescribeFastSnapshotRestoreSuccessItem,
  DescribeFleetError,
  DescribeFleetHistoryRequest,
  DescribeFleetHistoryResult,
  DescribeFleetInstancesRequest,
  DescribeFleetInstancesResult,
  DescribeFleetsInstances,
  DescribeFleetsRequest,
  DescribeFleetsResult,
  DescribeFlowLogsRequest,
  DescribeFlowLogsResult,
  DescribeFpgaImageAttributeRequest,
  DescribeFpgaImageAttributeResult,
  DescribeFpgaImagesRequest,
  DescribeFpgaImagesResult,
  DescribeHostReservationOfferingsRequest,
  DescribeHostReservationOfferingsResult,
  DescribeHostReservationsRequest,
  DescribeHostReservationsResult,
  DescribeHostsRequest,
  DescribeHostsResult,
  DescribeIamInstanceProfileAssociationsRequest,
  DescribeIamInstanceProfileAssociationsResult,
  DescribeIdentityIdFormatRequest,
  DescribeIdentityIdFormatResult,
  DescribeIdFormatRequest,
  DescribeIdFormatResult,
  DescribeImageAttributeRequest,
  DescribeImagesRequest,
  DescribeImagesResult,
  DescribeImportImageTasksRequest,
  DescribeImportImageTasksResult,
  DescribeImportSnapshotTasksRequest,
  DescribeImportSnapshotTasksResult,
  DescribeInstanceAttributeRequest,
  DescribeInstanceConnectEndpointsRequest,
  DescribeInstanceConnectEndpointsResult,
  DescribeInstanceCreditSpecificationsRequest,
  DescribeInstanceCreditSpecificationsResult,
  DescribeInstanceEventNotificationAttributesRequest,
  DescribeInstanceEventNotificationAttributesResult,
  DescribeInstanceEventWindowsRequest,
  DescribeInstanceEventWindowsResult,
  DescribeInstancesRequest,
  DestinationOptionsResponse,
  DirectoryServiceAuthentication,
  DiskImageDescription,
  DiskImageVolumeDescription,
  EbsInstanceBlockDevice,
  ElasticGpuHealth,
  ElasticGpus,
  EnclaveOptions,
  EventInformation,
  ExportImageTask,
  ExportTaskS3Location,
  FailedQueuedPurchaseDeletion,
  FastLaunchLaunchTemplateSpecificationResponse,
  FastLaunchSnapshotConfigurationResponse,
  FederatedAuthentication,
  Filter,
  FleetData,
  FleetLaunchTemplateConfig,
  FleetSpotCapacityRebalance,
  FleetSpotMaintenanceStrategies,
  FlowLog,
  FpgaImage,
  FpgaImageAttribute,
  FpgaImageState,
  HistoryRecordEntry,
  Host,
  HostInstance,
  HostOffering,
  HostProperties,
  HostReservation,
  IdFormat,
  Image,
  ImageAttribute,
  ImportImageLicenseConfigurationResponse,
  ImportImageTask,
  ImportInstanceTaskDetails,
  ImportInstanceVolumeDetailItem,
  ImportSnapshotTask,
  ImportVolumeTaskDetails,
  InstanceAttribute,
  InstanceBlockDeviceMapping,
  InstanceCapacity,
  InstanceCreditSpecification,
  InstanceTagNotificationAttribute,
  IpamPoolCidr,
  IpamPoolCidrFailureReason,
  LaunchPermission,
  LoadPermission,
  OnDemandOptions,
  PciId,
  ProductCode,
  SnapshotDetail,
  SnapshotTaskDetail,
  SpotOptions,
  Subscription,
  SuccessfulQueuedPurchaseDeletion,
  TargetCapacitySpecification,
  TargetNetwork,
  TransitGatewayMulticastDeregisteredGroupMembers,
  TransitGatewayMulticastDeregisteredGroupSources,
  UserBucketDetails,
  VirtualizationType,
} from "../models/models_3";
import {
  ArchitectureType,
  BootModeType,
  ClassicLoadBalancer,
  ClassicLoadBalancersConfig,
  CreateVolumePermission,
  DescribeInstancesResult,
  DescribeInstanceStatusRequest,
  DescribeInstanceStatusResult,
  DescribeInstanceTypeOfferingsRequest,
  DescribeInstanceTypeOfferingsResult,
  DescribeInstanceTypesRequest,
  DescribeInstanceTypesResult,
  DescribeInternetGatewaysRequest,
  DescribeInternetGatewaysResult,
  DescribeIpamPoolsRequest,
  DescribeIpamPoolsResult,
  DescribeIpamResourceDiscoveriesRequest,
  DescribeIpamResourceDiscoveriesResult,
  DescribeIpamResourceDiscoveryAssociationsRequest,
  DescribeIpamResourceDiscoveryAssociationsResult,
  DescribeIpamScopesRequest,
  DescribeIpamScopesResult,
  DescribeIpamsRequest,
  DescribeIpamsResult,
  DescribeIpv6PoolsRequest,
  DescribeIpv6PoolsResult,
  DescribeKeyPairsRequest,
  DescribeKeyPairsResult,
  DescribeLaunchTemplatesRequest,
  DescribeLaunchTemplatesResult,
  DescribeLaunchTemplateVersionsRequest,
  DescribeLaunchTemplateVersionsResult,
  DescribeLocalGatewayRouteTablesRequest,
  DescribeLocalGatewayRouteTablesResult,
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest,
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult,
  DescribeLocalGatewayRouteTableVpcAssociationsRequest,
  DescribeLocalGatewayRouteTableVpcAssociationsResult,
  DescribeLocalGatewaysRequest,
  DescribeLocalGatewaysResult,
  DescribeLocalGatewayVirtualInterfaceGroupsRequest,
  DescribeLocalGatewayVirtualInterfaceGroupsResult,
  DescribeLocalGatewayVirtualInterfacesRequest,
  DescribeLocalGatewayVirtualInterfacesResult,
  DescribeManagedPrefixListsRequest,
  DescribeManagedPrefixListsResult,
  DescribeMovingAddressesRequest,
  DescribeMovingAddressesResult,
  DescribeNatGatewaysRequest,
  DescribeNatGatewaysResult,
  DescribeNetworkAclsRequest,
  DescribeNetworkAclsResult,
  DescribeNetworkInsightsAccessScopeAnalysesRequest,
  DescribeNetworkInsightsAccessScopeAnalysesResult,
  DescribeNetworkInsightsAccessScopesRequest,
  DescribeNetworkInsightsAccessScopesResult,
  DescribeNetworkInsightsAnalysesRequest,
  DescribeNetworkInsightsAnalysesResult,
  DescribeNetworkInsightsPathsRequest,
  DescribeNetworkInsightsPathsResult,
  DescribeNetworkInterfaceAttributeRequest,
  DescribeNetworkInterfaceAttributeResult,
  DescribeNetworkInterfacePermissionsRequest,
  DescribeNetworkInterfacePermissionsResult,
  DescribeNetworkInterfacesRequest,
  DescribeNetworkInterfacesResult,
  DescribePlacementGroupsRequest,
  DescribePlacementGroupsResult,
  DescribePrefixListsRequest,
  DescribePrefixListsResult,
  DescribePrincipalIdFormatRequest,
  DescribePrincipalIdFormatResult,
  DescribePublicIpv4PoolsRequest,
  DescribePublicIpv4PoolsResult,
  DescribeRegionsRequest,
  DescribeRegionsResult,
  DescribeReplaceRootVolumeTasksRequest,
  DescribeReplaceRootVolumeTasksResult,
  DescribeReservedInstancesListingsRequest,
  DescribeReservedInstancesListingsResult,
  DescribeReservedInstancesModificationsRequest,
  DescribeReservedInstancesModificationsResult,
  DescribeReservedInstancesOfferingsRequest,
  DescribeReservedInstancesOfferingsResult,
  DescribeReservedInstancesRequest,
  DescribeReservedInstancesResult,
  DescribeRouteTablesRequest,
  DescribeRouteTablesResult,
  DescribeScheduledInstanceAvailabilityRequest,
  DescribeScheduledInstanceAvailabilityResult,
  DescribeScheduledInstancesRequest,
  DescribeScheduledInstancesResult,
  DescribeSecurityGroupReferencesRequest,
  DescribeSecurityGroupReferencesResult,
  DescribeSecurityGroupRulesRequest,
  DescribeSecurityGroupRulesResult,
  DescribeSecurityGroupsRequest,
  DescribeSecurityGroupsResult,
  DescribeSnapshotAttributeRequest,
  DescribeSnapshotAttributeResult,
  DescribeSnapshotsRequest,
  DescribeSnapshotsResult,
  DescribeSnapshotTierStatusRequest,
  DescribeSnapshotTierStatusResult,
  DescribeSpotDatafeedSubscriptionRequest,
  DescribeSpotDatafeedSubscriptionResult,
  DescribeSpotFleetInstancesRequest,
  DescribeSpotFleetInstancesResponse,
  DescribeSpotFleetRequestHistoryRequest,
  DescribeSpotFleetRequestHistoryResponse,
  DescribeSpotFleetRequestsRequest,
  DescribeSpotFleetRequestsResponse,
  DescribeSpotInstanceRequestsRequest,
  DescribeSpotInstanceRequestsResult,
  DescribeSpotPriceHistoryRequest,
  DescribeSpotPriceHistoryResult,
  DescribeStaleSecurityGroupsRequest,
  DescribeStaleSecurityGroupsResult,
  DescribeStoreImageTasksRequest,
  DescribeStoreImageTasksResult,
  DescribeSubnetsRequest,
  DescribeSubnetsResult,
  DescribeTagsRequest,
  DescribeTagsResult,
  DescribeTrafficMirrorFiltersRequest,
  DescribeTrafficMirrorFiltersResult,
  DescribeTrafficMirrorSessionsRequest,
  DescribeTrafficMirrorSessionsResult,
  DescribeTrafficMirrorTargetsRequest,
  DescribeTrafficMirrorTargetsResult,
  DescribeTransitGatewayAttachmentsRequest,
  DescribeTransitGatewayAttachmentsResult,
  DescribeTransitGatewayConnectPeersRequest,
  DescribeTransitGatewayConnectPeersResult,
  DescribeTransitGatewayConnectsRequest,
  DescribeTransitGatewayConnectsResult,
  DescribeTransitGatewayMulticastDomainsRequest,
  DescribeTransitGatewayMulticastDomainsResult,
  DescribeTransitGatewayPeeringAttachmentsRequest,
  DescribeTransitGatewayPeeringAttachmentsResult,
  DescribeTransitGatewayPolicyTablesRequest,
  DescribeTransitGatewayPolicyTablesResult,
  DescribeTransitGatewayRouteTableAnnouncementsRequest,
  DescribeTransitGatewayRouteTableAnnouncementsResult,
  DescribeTransitGatewayRouteTablesRequest,
  DescribeTransitGatewayRouteTablesResult,
  DescribeTransitGatewaysRequest,
  DescribeTransitGatewaysResult,
  DescribeTransitGatewayVpcAttachmentsRequest,
  DescribeTransitGatewayVpcAttachmentsResult,
  DescribeTrunkInterfaceAssociationsRequest,
  DescribeTrunkInterfaceAssociationsResult,
  DescribeVerifiedAccessEndpointsRequest,
  DescribeVerifiedAccessEndpointsResult,
  DiskInfo,
  EbsInfo,
  EbsOptimizedInfo,
  EfaInfo,
  ElasticGpuAssociation,
  ElasticInferenceAcceleratorAssociation,
  FpgaDeviceInfo,
  FpgaDeviceMemoryInfo,
  FpgaInfo,
  GpuDeviceInfo,
  GpuDeviceMemoryInfo,
  GpuInfo,
  HibernationOptions,
  HistoryRecord,
  InferenceAcceleratorInfo,
  InferenceDeviceInfo,
  InferenceDeviceMemoryInfo,
  Instance,
  InstanceIpv4Prefix,
  InstanceIpv6Prefix,
  InstanceMaintenanceOptions,
  InstanceMetadataOptionsResponse,
  InstanceNetworkInterface,
  InstanceNetworkInterfaceAssociation,
  InstanceNetworkInterfaceAttachment,
  InstanceNetworkInterfaceSpecification,
  InstancePrivateIpAddress,
  InstanceState,
  InstanceStatus,
  InstanceStatusDetails,
  InstanceStatusEvent,
  InstanceStatusSummary,
  InstanceStorageInfo,
  InstanceTypeInfo,
  InstanceTypeOffering,
  Ipv6Pool,
  KeyPairInfo,
  LaunchSpecification,
  LaunchTemplateConfig,
  LaunchTemplateOverrides,
  LicenseConfiguration,
  LoadBalancersConfig,
  LocalGateway,
  LocalGatewayVirtualInterface,
  LocalGatewayVirtualInterfaceGroup,
  MemoryInfo,
  Monitoring,
  MovingAddressStatus,
  NetworkCardInfo,
  NetworkInfo,
  NetworkInsightsAccessScopeAnalysis,
  NetworkInsightsAnalysis,
  NitroTpmInfo,
  PlacementGroupInfo,
  PlacementGroupStrategy,
  PoolCidrBlock,
  PrefixList,
  PricingDetail,
  PrincipalIdFormat,
  PrivateDnsNameOptionsResponse,
  ProcessorInfo,
  PublicIpv4Pool,
  PublicIpv4PoolRange,
  RecurringCharge,
  Region,
  Reservation,
  ReservedInstances,
  ReservedInstancesConfiguration,
  ReservedInstancesId,
  ReservedInstancesModification,
  ReservedInstancesModificationResult,
  ReservedInstancesOffering,
  RootDeviceType,
  RunInstancesMonitoringEnabled,
  ScheduledInstance,
  ScheduledInstanceAvailability,
  ScheduledInstanceRecurrence,
  ScheduledInstanceRecurrenceRequest,
  SecurityGroup,
  SecurityGroupReference,
  SlotDateTimeRangeRequest,
  SlotStartTimeRangeRequest,
  SnapshotTierStatus,
  SpotCapacityRebalance,
  SpotFleetLaunchSpecification,
  SpotFleetMonitoring,
  SpotFleetRequestConfig,
  SpotFleetRequestConfigData,
  SpotFleetTagSpecification,
  SpotInstanceRequest,
  SpotInstanceStatus,
  SpotMaintenanceStrategies,
  SpotPlacement,
  SpotPrice,
  StaleIpPermission,
  StaleSecurityGroup,
  StoreImageTaskResult,
  SupportedAdditionalProcessorFeature,
  TagDescription,
  TargetGroup,
  TargetGroupsConfig,
  TransitGatewayAttachment,
  TransitGatewayAttachmentAssociation,
  UsageClassType,
  VCpuInfo,
} from "../models/models_4";
import {
  AssociatedRole,
  AthenaIntegration,
  CapacityReservationGroup,
  ClassicLinkDnsSupport,
  ClientCertificateRevocationListStatus,
  CoipAddressUsage,
  DataQuery,
  DataResponse,
  DescribeVerifiedAccessGroupsRequest,
  DescribeVerifiedAccessGroupsResult,
  DescribeVerifiedAccessInstanceLoggingConfigurationsRequest,
  DescribeVerifiedAccessInstanceLoggingConfigurationsResult,
  DescribeVerifiedAccessInstancesRequest,
  DescribeVerifiedAccessInstancesResult,
  DescribeVerifiedAccessTrustProvidersRequest,
  DescribeVerifiedAccessTrustProvidersResult,
  DescribeVolumeAttributeRequest,
  DescribeVolumeAttributeResult,
  DescribeVolumesModificationsRequest,
  DescribeVolumesModificationsResult,
  DescribeVolumesRequest,
  DescribeVolumesResult,
  DescribeVolumeStatusRequest,
  DescribeVolumeStatusResult,
  DescribeVpcAttributeRequest,
  DescribeVpcAttributeResult,
  DescribeVpcClassicLinkDnsSupportRequest,
  DescribeVpcClassicLinkDnsSupportResult,
  DescribeVpcClassicLinkRequest,
  DescribeVpcClassicLinkResult,
  DescribeVpcEndpointConnectionNotificationsRequest,
  DescribeVpcEndpointConnectionNotificationsResult,
  DescribeVpcEndpointConnectionsRequest,
  DescribeVpcEndpointConnectionsResult,
  DescribeVpcEndpointServiceConfigurationsRequest,
  DescribeVpcEndpointServiceConfigurationsResult,
  DescribeVpcEndpointServicePermissionsRequest,
  DescribeVpcEndpointServicePermissionsResult,
  DescribeVpcEndpointServicesRequest,
  DescribeVpcEndpointServicesResult,
  DescribeVpcEndpointsRequest,
  DescribeVpcEndpointsResult,
  DescribeVpcPeeringConnectionsRequest,
  DescribeVpcPeeringConnectionsResult,
  DescribeVpcsRequest,
  DescribeVpcsResult,
  DescribeVpnConnectionsRequest,
  DescribeVpnConnectionsResult,
  DescribeVpnGatewaysRequest,
  DescribeVpnGatewaysResult,
  DetachClassicLinkVpcRequest,
  DetachClassicLinkVpcResult,
  DetachInternetGatewayRequest,
  DetachNetworkInterfaceRequest,
  DetachVerifiedAccessTrustProviderRequest,
  DetachVerifiedAccessTrustProviderResult,
  DetachVolumeRequest,
  DetachVpnGatewayRequest,
  DisableAddressTransferRequest,
  DisableAddressTransferResult,
  DisableAwsNetworkPerformanceMetricSubscriptionRequest,
  DisableAwsNetworkPerformanceMetricSubscriptionResult,
  DisableEbsEncryptionByDefaultRequest,
  DisableEbsEncryptionByDefaultResult,
  DisableFastLaunchRequest,
  DisableFastLaunchResult,
  DisableFastSnapshotRestoreErrorItem,
  DisableFastSnapshotRestoresRequest,
  DisableFastSnapshotRestoresResult,
  DisableFastSnapshotRestoreStateError,
  DisableFastSnapshotRestoreStateErrorItem,
  DisableFastSnapshotRestoreSuccessItem,
  DisableImageBlockPublicAccessRequest,
  DisableImageBlockPublicAccessResult,
  DisableImageDeprecationRequest,
  DisableImageDeprecationResult,
  DisableImageRequest,
  DisableImageResult,
  DisableIpamOrganizationAdminAccountRequest,
  DisableIpamOrganizationAdminAccountResult,
  DisableSerialConsoleAccessRequest,
  DisableSerialConsoleAccessResult,
  DisableTransitGatewayRouteTablePropagationRequest,
  DisableTransitGatewayRouteTablePropagationResult,
  DisableVgwRoutePropagationRequest,
  DisableVpcClassicLinkDnsSupportRequest,
  DisableVpcClassicLinkDnsSupportResult,
  DisableVpcClassicLinkRequest,
  DisableVpcClassicLinkResult,
  DisassociateAddressRequest,
  DisassociateClientVpnTargetNetworkRequest,
  DisassociateClientVpnTargetNetworkResult,
  DisassociateEnclaveCertificateIamRoleRequest,
  DisassociateEnclaveCertificateIamRoleResult,
  DisassociateIamInstanceProfileRequest,
  DisassociateIamInstanceProfileResult,
  DisassociateInstanceEventWindowRequest,
  DisassociateInstanceEventWindowResult,
  DisassociateIpamResourceDiscoveryRequest,
  DisassociateIpamResourceDiscoveryResult,
  DisassociateNatGatewayAddressRequest,
  DisassociateNatGatewayAddressResult,
  DisassociateRouteTableRequest,
  DisassociateSubnetCidrBlockRequest,
  DisassociateSubnetCidrBlockResult,
  DisassociateTransitGatewayMulticastDomainRequest,
  DisassociateTransitGatewayMulticastDomainResult,
  DisassociateTransitGatewayPolicyTableRequest,
  DisassociateTransitGatewayPolicyTableResult,
  DisassociateTransitGatewayRouteTableRequest,
  DisassociateTransitGatewayRouteTableResult,
  DisassociateTrunkInterfaceRequest,
  DisassociateTrunkInterfaceResult,
  DisassociateVpcCidrBlockRequest,
  DisassociateVpcCidrBlockResult,
  EnableAddressTransferRequest,
  EnableAddressTransferResult,
  EnableAwsNetworkPerformanceMetricSubscriptionRequest,
  EnableAwsNetworkPerformanceMetricSubscriptionResult,
  EnableEbsEncryptionByDefaultRequest,
  EnableEbsEncryptionByDefaultResult,
  EnableFastLaunchRequest,
  EnableFastLaunchResult,
  EnableFastSnapshotRestoreErrorItem,
  EnableFastSnapshotRestoresRequest,
  EnableFastSnapshotRestoresResult,
  EnableFastSnapshotRestoreStateError,
  EnableFastSnapshotRestoreStateErrorItem,
  EnableFastSnapshotRestoreSuccessItem,
  EnableImageBlockPublicAccessRequest,
  EnableImageBlockPublicAccessResult,
  EnableImageDeprecationRequest,
  EnableImageDeprecationResult,
  EnableImageRequest,
  EnableImageResult,
  EnableIpamOrganizationAdminAccountRequest,
  EnableIpamOrganizationAdminAccountResult,
  EnableReachabilityAnalyzerOrganizationSharingRequest,
  EnableReachabilityAnalyzerOrganizationSharingResult,
  EnableSerialConsoleAccessRequest,
  EnableSerialConsoleAccessResult,
  EnableTransitGatewayRouteTablePropagationRequest,
  EnableTransitGatewayRouteTablePropagationResult,
  EnableVgwRoutePropagationRequest,
  EnableVolumeIORequest,
  EnableVpcClassicLinkDnsSupportRequest,
  EnableVpcClassicLinkDnsSupportResult,
  EnableVpcClassicLinkRequest,
  EnableVpcClassicLinkResult,
  ExportClientVpnClientCertificateRevocationListRequest,
  ExportClientVpnClientCertificateRevocationListResult,
  ExportClientVpnClientConfigurationRequest,
  ExportClientVpnClientConfigurationResult,
  ExportImageRequest,
  ExportImageResult,
  ExportTaskS3LocationRequest,
  ExportTransitGatewayRoutesRequest,
  ExportTransitGatewayRoutesResult,
  FastLaunchLaunchTemplateSpecificationRequest,
  FastLaunchSnapshotConfigurationRequest,
  GetAssociatedEnclaveCertificateIamRolesRequest,
  GetAssociatedEnclaveCertificateIamRolesResult,
  GetAssociatedIpv6PoolCidrsRequest,
  GetAssociatedIpv6PoolCidrsResult,
  GetAwsNetworkPerformanceDataRequest,
  GetAwsNetworkPerformanceDataResult,
  GetCapacityReservationUsageRequest,
  GetCapacityReservationUsageResult,
  GetCoipPoolUsageRequest,
  GetCoipPoolUsageResult,
  GetConsoleOutputRequest,
  GetConsoleOutputResult,
  GetConsoleScreenshotRequest,
  GetConsoleScreenshotResult,
  GetDefaultCreditSpecificationRequest,
  GetDefaultCreditSpecificationResult,
  GetEbsDefaultKmsKeyIdRequest,
  GetEbsDefaultKmsKeyIdResult,
  GetEbsEncryptionByDefaultRequest,
  GetEbsEncryptionByDefaultResult,
  GetFlowLogsIntegrationTemplateRequest,
  GetFlowLogsIntegrationTemplateResult,
  GetGroupsForCapacityReservationRequest,
  GetGroupsForCapacityReservationResult,
  GetHostReservationPurchasePreviewRequest,
  GetHostReservationPurchasePreviewResult,
  GetImageBlockPublicAccessStateRequest,
  GetImageBlockPublicAccessStateResult,
  GetInstanceTypesFromInstanceRequirementsRequest,
  GetInstanceTypesFromInstanceRequirementsResult,
  GetInstanceUefiDataRequest,
  GetInstanceUefiDataResult,
  GetIpamAddressHistoryRequest,
  GetIpamAddressHistoryResult,
  GetIpamDiscoveredAccountsRequest,
  GetIpamDiscoveredAccountsResult,
  GetIpamDiscoveredResourceCidrsRequest,
  GetIpamDiscoveredResourceCidrsResult,
  GetIpamPoolAllocationsRequest,
  GetIpamPoolAllocationsResult,
  GetIpamPoolCidrsRequest,
  GetIpamPoolCidrsResult,
  GetIpamResourceCidrsRequest,
  GetIpamResourceCidrsResult,
  GetLaunchTemplateDataRequest,
  GetLaunchTemplateDataResult,
  GetManagedPrefixListAssociationsRequest,
  GetManagedPrefixListAssociationsResult,
  GetManagedPrefixListEntriesRequest,
  GetManagedPrefixListEntriesResult,
  GetNetworkInsightsAccessScopeAnalysisFindingsRequest,
  GetNetworkInsightsAccessScopeAnalysisFindingsResult,
  GetNetworkInsightsAccessScopeContentRequest,
  GetNetworkInsightsAccessScopeContentResult,
  GetPasswordDataRequest,
  GetPasswordDataResult,
  GetReservedInstancesExchangeQuoteRequest,
  GetReservedInstancesExchangeQuoteResult,
  GetSerialConsoleAccessStatusRequest,
  GetSerialConsoleAccessStatusResult,
  GetSpotPlacementScoresRequest,
  GetSpotPlacementScoresResult,
  GetSubnetCidrReservationsRequest,
  GetSubnetCidrReservationsResult,
  GetTransitGatewayAttachmentPropagationsRequest,
  GetTransitGatewayAttachmentPropagationsResult,
  GetTransitGatewayMulticastDomainAssociationsRequest,
  GetTransitGatewayMulticastDomainAssociationsResult,
  GetTransitGatewayPolicyTableAssociationsRequest,
  GetTransitGatewayPolicyTableAssociationsResult,
  GetTransitGatewayPolicyTableEntriesRequest,
  GetTransitGatewayPolicyTableEntriesResult,
  GetTransitGatewayPrefixListReferencesRequest,
  GetTransitGatewayPrefixListReferencesResult,
  GetTransitGatewayRouteTableAssociationsRequest,
  GetTransitGatewayRouteTableAssociationsResult,
  GetTransitGatewayRouteTablePropagationsRequest,
  InstanceEventWindowDisassociationRequest,
  InstanceFamilyCreditSpecification,
  InstanceRequirementsWithMetadataRequest,
  InstanceTypeInfoFromInstanceRequirements,
  InstanceUsage,
  IntegrateServices,
  IpamAddressHistoryRecord,
  IpamDiscoveredAccount,
  IpamDiscoveredResourceCidr,
  IpamDiscoveryFailureReason,
  IpamResourceCidr,
  Ipv6CidrAssociation,
  MetricPoint,
  PrefixListAssociation,
  PrefixListEntry,
  PrivateDnsDetails,
  Purchase,
  ReservationValue,
  ReservedInstanceReservationValue,
  ServiceDetail,
  SpotPlacementScore,
  TargetConfiguration,
  TargetReservationValue,
  TransitGatewayAttachmentPropagation,
  TransitGatewayMulticastDomainAssociation,
  TransitGatewayPolicyRule,
  TransitGatewayPolicyRuleMetaData,
  TransitGatewayPolicyTableEntry,
  TransitGatewayPropagation,
  TransitGatewayRouteTableAssociation,
  VerifiedAccessInstanceLoggingConfiguration,
  VerifiedAccessLogCloudWatchLogsDestination,
  VerifiedAccessLogDeliveryStatus,
  VerifiedAccessLogKinesisDataFirehoseDestination,
  VerifiedAccessLogs,
  VerifiedAccessLogS3Destination,
  VolumeModification,
  VolumeStatusAction,
  VolumeStatusAttachmentStatus,
  VolumeStatusDetails,
  VolumeStatusEvent,
  VolumeStatusInfo,
  VolumeStatusItem,
  VpcClassicLink,
  VpcEndpointConnection,
} from "../models/models_5";
import {
  BlobAttributeValue,
  CapacityReservationSpecification,
  CidrAuthorizationContext,
  ClientData,
  CpuOptionsRequest,
  CreateVolumePermissionModifications,
  DiskImage,
  DiskImageDetail,
  DnsServersOptionsModifyStructure,
  EbsInstanceBlockDeviceSpecification,
  ElasticInferenceAccelerator,
  GetTransitGatewayRouteTablePropagationsResult,
  GetVerifiedAccessEndpointPolicyRequest,
  GetVerifiedAccessEndpointPolicyResult,
  GetVerifiedAccessGroupPolicyRequest,
  GetVerifiedAccessGroupPolicyResult,
  GetVpnConnectionDeviceSampleConfigurationRequest,
  GetVpnConnectionDeviceSampleConfigurationResult,
  GetVpnConnectionDeviceTypesRequest,
  GetVpnConnectionDeviceTypesResult,
  GetVpnTunnelReplacementStatusRequest,
  GetVpnTunnelReplacementStatusResult,
  ImageDiskContainer,
  ImageRecycleBinInfo,
  ImportClientVpnClientCertificateRevocationListRequest,
  ImportClientVpnClientCertificateRevocationListResult,
  ImportImageLicenseConfigurationRequest,
  ImportImageRequest,
  ImportImageResult,
  ImportInstanceLaunchSpecification,
  ImportInstanceRequest,
  ImportInstanceResult,
  ImportKeyPairRequest,
  ImportKeyPairResult,
  ImportSnapshotRequest,
  ImportSnapshotResult,
  ImportVolumeRequest,
  ImportVolumeResult,
  InstanceBlockDeviceMappingSpecification,
  InstanceCreditSpecificationRequest,
  InstanceMonitoring,
  IpamCidrAuthorizationContext,
  LaunchPermissionModifications,
  ListImagesInRecycleBinRequest,
  ListImagesInRecycleBinResult,
  ListSnapshotsInRecycleBinRequest,
  ListSnapshotsInRecycleBinResult,
  LoadPermissionModifications,
  LoadPermissionRequest,
  MaintenanceDetails,
  ModifyAddressAttributeRequest,
  ModifyAddressAttributeResult,
  ModifyAvailabilityZoneGroupRequest,
  ModifyAvailabilityZoneGroupResult,
  ModifyCapacityReservationFleetRequest,
  ModifyCapacityReservationFleetResult,
  ModifyCapacityReservationRequest,
  ModifyCapacityReservationResult,
  ModifyClientVpnEndpointRequest,
  ModifyClientVpnEndpointResult,
  ModifyDefaultCreditSpecificationRequest,
  ModifyDefaultCreditSpecificationResult,
  ModifyEbsDefaultKmsKeyIdRequest,
  ModifyEbsDefaultKmsKeyIdResult,
  ModifyFleetRequest,
  ModifyFleetResult,
  ModifyFpgaImageAttributeRequest,
  ModifyFpgaImageAttributeResult,
  ModifyHostsRequest,
  ModifyHostsResult,
  ModifyIdentityIdFormatRequest,
  ModifyIdFormatRequest,
  ModifyImageAttributeRequest,
  ModifyInstanceAttributeRequest,
  ModifyInstanceCapacityReservationAttributesRequest,
  ModifyInstanceCapacityReservationAttributesResult,
  ModifyInstanceCreditSpecificationRequest,
  ModifyInstanceCreditSpecificationResult,
  ModifyInstanceEventStartTimeRequest,
  ModifyInstanceEventStartTimeResult,
  ModifyInstanceEventWindowRequest,
  ModifyInstanceEventWindowResult,
  ModifyInstanceMaintenanceOptionsRequest,
  ModifyInstanceMaintenanceOptionsResult,
  ModifyInstanceMetadataOptionsRequest,
  ModifyInstanceMetadataOptionsResult,
  ModifyInstancePlacementRequest,
  ModifyInstancePlacementResult,
  ModifyIpamPoolRequest,
  ModifyIpamPoolResult,
  ModifyIpamRequest,
  ModifyIpamResourceCidrRequest,
  ModifyIpamResourceCidrResult,
  ModifyIpamResourceDiscoveryRequest,
  ModifyIpamResourceDiscoveryResult,
  ModifyIpamResult,
  ModifyIpamScopeRequest,
  ModifyIpamScopeResult,
  ModifyLaunchTemplateRequest,
  ModifyLaunchTemplateResult,
  ModifyLocalGatewayRouteRequest,
  ModifyLocalGatewayRouteResult,
  ModifyManagedPrefixListRequest,
  ModifyManagedPrefixListResult,
  ModifyNetworkInterfaceAttributeRequest,
  ModifyPrivateDnsNameOptionsRequest,
  ModifyPrivateDnsNameOptionsResult,
  ModifyReservedInstancesRequest,
  ModifyReservedInstancesResult,
  ModifySecurityGroupRulesRequest,
  ModifySecurityGroupRulesResult,
  ModifySnapshotAttributeRequest,
  ModifySnapshotTierRequest,
  ModifySnapshotTierResult,
  ModifySpotFleetRequestRequest,
  ModifySpotFleetRequestResponse,
  ModifySubnetAttributeRequest,
  ModifyTrafficMirrorFilterNetworkServicesRequest,
  ModifyTrafficMirrorFilterNetworkServicesResult,
  ModifyTrafficMirrorFilterRuleRequest,
  ModifyTrafficMirrorFilterRuleResult,
  ModifyTrafficMirrorSessionRequest,
  ModifyTrafficMirrorSessionResult,
  ModifyTransitGatewayOptions,
  ModifyTransitGatewayPrefixListReferenceRequest,
  ModifyTransitGatewayPrefixListReferenceResult,
  ModifyTransitGatewayRequest,
  ModifyTransitGatewayResult,
  ModifyTransitGatewayVpcAttachmentRequest,
  ModifyTransitGatewayVpcAttachmentRequestOptions,
  ModifyTransitGatewayVpcAttachmentResult,
  ModifyVerifiedAccessEndpointEniOptions,
  ModifyVerifiedAccessEndpointLoadBalancerOptions,
  ModifyVerifiedAccessEndpointPolicyRequest,
  ModifyVerifiedAccessEndpointPolicyResult,
  ModifyVerifiedAccessEndpointRequest,
  ModifyVerifiedAccessEndpointResult,
  ModifyVerifiedAccessGroupPolicyRequest,
  ModifyVerifiedAccessGroupPolicyResult,
  ModifyVerifiedAccessGroupRequest,
  ModifyVerifiedAccessGroupResult,
  ModifyVerifiedAccessInstanceLoggingConfigurationRequest,
  ModifyVerifiedAccessInstanceLoggingConfigurationResult,
  ModifyVerifiedAccessInstanceRequest,
  ModifyVerifiedAccessInstanceResult,
  ModifyVerifiedAccessTrustProviderOidcOptions,
  ModifyVerifiedAccessTrustProviderRequest,
  ModifyVerifiedAccessTrustProviderResult,
  ModifyVolumeAttributeRequest,
  ModifyVolumeRequest,
  ModifyVolumeResult,
  ModifyVpcAttributeRequest,
  ModifyVpcEndpointConnectionNotificationRequest,
  ModifyVpcEndpointConnectionNotificationResult,
  ModifyVpcEndpointRequest,
  ModifyVpcEndpointResult,
  ModifyVpcEndpointServiceConfigurationRequest,
  ModifyVpcEndpointServiceConfigurationResult,
  ModifyVpcEndpointServicePayerResponsibilityRequest,
  ModifyVpcEndpointServicePayerResponsibilityResult,
  ModifyVpcEndpointServicePermissionsRequest,
  ModifyVpcEndpointServicePermissionsResult,
  ModifyVpcPeeringConnectionOptionsRequest,
  ModifyVpcPeeringConnectionOptionsResult,
  ModifyVpcTenancyRequest,
  ModifyVpcTenancyResult,
  ModifyVpnConnectionOptionsRequest,
  ModifyVpnConnectionOptionsResult,
  ModifyVpnConnectionRequest,
  ModifyVpnConnectionResult,
  ModifyVpnTunnelCertificateRequest,
  ModifyVpnTunnelCertificateResult,
  ModifyVpnTunnelOptionsRequest,
  ModifyVpnTunnelOptionsResult,
  ModifyVpnTunnelOptionsSpecification,
  MonitorInstancesRequest,
  MonitorInstancesResult,
  MoveAddressToVpcRequest,
  MoveAddressToVpcResult,
  MoveByoipCidrToIpamRequest,
  MoveByoipCidrToIpamResult,
  NetworkInterfaceAttachmentChanges,
  PeeringConnectionOptions,
  PeeringConnectionOptionsRequest,
  ProvisionByoipCidrRequest,
  ProvisionByoipCidrResult,
  ProvisionIpamPoolCidrRequest,
  ProvisionIpamPoolCidrResult,
  ProvisionPublicIpv4PoolCidrRequest,
  ProvisionPublicIpv4PoolCidrResult,
  PurchaseHostReservationRequest,
  PurchaseHostReservationResult,
  PurchaseRequest,
  PurchaseReservedInstancesOfferingRequest,
  PurchaseReservedInstancesOfferingResult,
  PurchaseScheduledInstancesRequest,
  PurchaseScheduledInstancesResult,
  RebootInstancesRequest,
  RegisterImageRequest,
  RegisterImageResult,
  RegisterInstanceEventNotificationAttributesRequest,
  RegisterInstanceEventNotificationAttributesResult,
  RegisterInstanceTagAttributeRequest,
  RegisterTransitGatewayMulticastGroupMembersRequest,
  RegisterTransitGatewayMulticastGroupMembersResult,
  RegisterTransitGatewayMulticastGroupSourcesRequest,
  RegisterTransitGatewayMulticastGroupSourcesResult,
  RejectTransitGatewayMulticastDomainAssociationsRequest,
  RejectTransitGatewayMulticastDomainAssociationsResult,
  RejectTransitGatewayPeeringAttachmentRequest,
  RejectTransitGatewayPeeringAttachmentResult,
  RejectTransitGatewayVpcAttachmentRequest,
  RejectTransitGatewayVpcAttachmentResult,
  RejectVpcEndpointConnectionsRequest,
  RejectVpcEndpointConnectionsResult,
  RejectVpcPeeringConnectionRequest,
  RejectVpcPeeringConnectionResult,
  ReleaseAddressRequest,
  ReleaseHostsRequest,
  ReleaseHostsResult,
  ReleaseIpamPoolAllocationRequest,
  ReleaseIpamPoolAllocationResult,
  RemoveIpamOperatingRegion,
  RemovePrefixListEntry,
  ReplaceIamInstanceProfileAssociationRequest,
  ReplaceIamInstanceProfileAssociationResult,
  ReplaceNetworkAclAssociationRequest,
  ReplaceNetworkAclAssociationResult,
  ReplaceNetworkAclEntryRequest,
  ReplaceRouteRequest,
  ReplaceRouteTableAssociationRequest,
  ReplaceRouteTableAssociationResult,
  ReplaceTransitGatewayRouteRequest,
  ReplaceTransitGatewayRouteResult,
  ReplaceVpnTunnelRequest,
  ReplaceVpnTunnelResult,
  ReportInstanceReasonCodes,
  ReportInstanceStatusRequest,
  RequestSpotFleetRequest,
  RequestSpotFleetResponse,
  RequestSpotInstancesRequest,
  RequestSpotInstancesResult,
  RequestSpotLaunchSpecification,
  ReservedInstanceLimitPrice,
  ResetAddressAttributeRequest,
  ResetAddressAttributeResult,
  ResetEbsDefaultKmsKeyIdRequest,
  ResetEbsDefaultKmsKeyIdResult,
  ResetFpgaImageAttributeRequest,
  ResetFpgaImageAttributeResult,
  ResetImageAttributeRequest,
  ResetInstanceAttributeRequest,
  ResetNetworkInterfaceAttributeRequest,
  ResetSnapshotAttributeRequest,
  RestoreAddressToClassicRequest,
  RestoreAddressToClassicResult,
  RestoreImageFromRecycleBinRequest,
  RestoreImageFromRecycleBinResult,
  RestoreManagedPrefixListVersionRequest,
  RestoreManagedPrefixListVersionResult,
  RestoreSnapshotFromRecycleBinRequest,
  RestoreSnapshotFromRecycleBinResult,
  RestoreSnapshotTierRequest,
  RestoreSnapshotTierResult,
  RevokeClientVpnIngressRequest,
  RevokeClientVpnIngressResult,
  RevokeSecurityGroupEgressRequest,
  RevokeSecurityGroupEgressResult,
  RevokeSecurityGroupIngressRequest,
  RevokeSecurityGroupIngressResult,
  SecurityGroupRuleRequest,
  SecurityGroupRuleUpdate,
  SnapshotDiskContainer,
  SnapshotRecycleBinInfo,
  SuccessfulInstanceCreditSpecificationItem,
  TrafficMirrorFilterRuleField,
  TrafficMirrorSessionField,
  TransitGatewayMulticastRegisteredGroupMembers,
  TransitGatewayMulticastRegisteredGroupSources,
  TransitGatewayRouteTablePropagation,
  UnsuccessfulInstanceCreditSpecificationItem,
  UnsuccessfulInstanceCreditSpecificationItemError,
  UserBucket,
  UserData,
  VerifiedAccessLogCloudWatchLogsDestinationOptions,
  VerifiedAccessLogKinesisDataFirehoseDestinationOptions,
  VerifiedAccessLogOptions,
  VerifiedAccessLogS3DestinationOptions,
  VolumeDetail,
  VpnConnectionDeviceType,
} from "../models/models_6";
import {
  EnclaveOptionsRequest,
  HibernationOptionsRequest,
  InstanceMaintenanceOptionsRequest,
  InstanceMarketOptionsRequest,
  InstanceMetadataOptionsRequest,
  InstanceStateChange,
  LaunchTemplateSpecification,
  LicenseConfigurationRequest,
  PrivateDnsNameOptionsRequest,
  RunInstancesRequest,
  RunScheduledInstancesRequest,
  RunScheduledInstancesResult,
  ScheduledInstancesBlockDeviceMapping,
  ScheduledInstancesEbs,
  ScheduledInstancesIamInstanceProfile,
  ScheduledInstancesIpv6Address,
  ScheduledInstancesLaunchSpecification,
  ScheduledInstancesMonitoring,
  ScheduledInstancesNetworkInterface,
  ScheduledInstancesPlacement,
  ScheduledInstancesPrivateIpAddressConfig,
  SearchLocalGatewayRoutesRequest,
  SearchLocalGatewayRoutesResult,
  SearchTransitGatewayMulticastGroupsRequest,
  SearchTransitGatewayMulticastGroupsResult,
  SearchTransitGatewayRoutesRequest,
  SearchTransitGatewayRoutesResult,
  SecurityGroupRuleDescription,
  SendDiagnosticInterruptRequest,
  SpotMarketOptions,
  StartInstancesRequest,
  StartInstancesResult,
  StartNetworkInsightsAccessScopeAnalysisRequest,
  StartNetworkInsightsAccessScopeAnalysisResult,
  StartNetworkInsightsAnalysisRequest,
  StartNetworkInsightsAnalysisResult,
  StartVpcEndpointServicePrivateDnsVerificationRequest,
  StartVpcEndpointServicePrivateDnsVerificationResult,
  StopInstancesRequest,
  StopInstancesResult,
  TerminateClientVpnConnectionsRequest,
  TerminateClientVpnConnectionsResult,
  TerminateConnectionStatus,
  TerminateInstancesRequest,
  TerminateInstancesResult,
  TransitGatewayMulticastGroup,
  UnassignIpv6AddressesRequest,
  UnassignIpv6AddressesResult,
  UnassignPrivateIpAddressesRequest,
  UnassignPrivateNatGatewayAddressRequest,
  UnassignPrivateNatGatewayAddressResult,
  UnmonitorInstancesRequest,
  UnmonitorInstancesResult,
  UpdateSecurityGroupRuleDescriptionsEgressRequest,
  UpdateSecurityGroupRuleDescriptionsEgressResult,
  UpdateSecurityGroupRuleDescriptionsIngressRequest,
  UpdateSecurityGroupRuleDescriptionsIngressResult,
  WithdrawByoipCidrRequest,
  WithdrawByoipCidrResult,
} from "../models/models_7";

/**
 * serializeAws_ec2AcceptAddressTransferCommand
 */
export const se_AcceptAddressTransferCommand = async (
  input: AcceptAddressTransferCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptAddressTransferRequest(input, context),
    Action: "AcceptAddressTransfer",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand
 */
export const se_AcceptReservedInstancesExchangeQuoteCommand = async (
  input: AcceptReservedInstancesExchangeQuoteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptReservedInstancesExchangeQuoteRequest(input, context),
    Action: "AcceptReservedInstancesExchangeQuote",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand
 */
export const se_AcceptTransitGatewayMulticastDomainAssociationsCommand = async (
  input: AcceptTransitGatewayMulticastDomainAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptTransitGatewayMulticastDomainAssociationsRequest(input, context),
    Action: "AcceptTransitGatewayMulticastDomainAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand
 */
export const se_AcceptTransitGatewayPeeringAttachmentCommand = async (
  input: AcceptTransitGatewayPeeringAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptTransitGatewayPeeringAttachmentRequest(input, context),
    Action: "AcceptTransitGatewayPeeringAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand
 */
export const se_AcceptTransitGatewayVpcAttachmentCommand = async (
  input: AcceptTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptTransitGatewayVpcAttachmentRequest(input, context),
    Action: "AcceptTransitGatewayVpcAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AcceptVpcEndpointConnectionsCommand
 */
export const se_AcceptVpcEndpointConnectionsCommand = async (
  input: AcceptVpcEndpointConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptVpcEndpointConnectionsRequest(input, context),
    Action: "AcceptVpcEndpointConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AcceptVpcPeeringConnectionCommand
 */
export const se_AcceptVpcPeeringConnectionCommand = async (
  input: AcceptVpcPeeringConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptVpcPeeringConnectionRequest(input, context),
    Action: "AcceptVpcPeeringConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AdvertiseByoipCidrCommand
 */
export const se_AdvertiseByoipCidrCommand = async (
  input: AdvertiseByoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AdvertiseByoipCidrRequest(input, context),
    Action: "AdvertiseByoipCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AllocateAddressCommand
 */
export const se_AllocateAddressCommand = async (
  input: AllocateAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AllocateAddressRequest(input, context),
    Action: "AllocateAddress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AllocateHostsCommand
 */
export const se_AllocateHostsCommand = async (
  input: AllocateHostsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AllocateHostsRequest(input, context),
    Action: "AllocateHosts",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AllocateIpamPoolCidrCommand
 */
export const se_AllocateIpamPoolCidrCommand = async (
  input: AllocateIpamPoolCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AllocateIpamPoolCidrRequest(input, context),
    Action: "AllocateIpamPoolCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand
 */
export const se_ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (
  input: ApplySecurityGroupsToClientVpnTargetNetworkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ApplySecurityGroupsToClientVpnTargetNetworkRequest(input, context),
    Action: "ApplySecurityGroupsToClientVpnTargetNetwork",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssignIpv6AddressesCommand
 */
export const se_AssignIpv6AddressesCommand = async (
  input: AssignIpv6AddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssignIpv6AddressesRequest(input, context),
    Action: "AssignIpv6Addresses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssignPrivateIpAddressesCommand
 */
export const se_AssignPrivateIpAddressesCommand = async (
  input: AssignPrivateIpAddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssignPrivateIpAddressesRequest(input, context),
    Action: "AssignPrivateIpAddresses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssignPrivateNatGatewayAddressCommand
 */
export const se_AssignPrivateNatGatewayAddressCommand = async (
  input: AssignPrivateNatGatewayAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssignPrivateNatGatewayAddressRequest(input, context),
    Action: "AssignPrivateNatGatewayAddress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateAddressCommand
 */
export const se_AssociateAddressCommand = async (
  input: AssociateAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateAddressRequest(input, context),
    Action: "AssociateAddress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateClientVpnTargetNetworkCommand
 */
export const se_AssociateClientVpnTargetNetworkCommand = async (
  input: AssociateClientVpnTargetNetworkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateClientVpnTargetNetworkRequest(input, context),
    Action: "AssociateClientVpnTargetNetwork",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateDhcpOptionsCommand
 */
export const se_AssociateDhcpOptionsCommand = async (
  input: AssociateDhcpOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateDhcpOptionsRequest(input, context),
    Action: "AssociateDhcpOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateEnclaveCertificateIamRoleCommand
 */
export const se_AssociateEnclaveCertificateIamRoleCommand = async (
  input: AssociateEnclaveCertificateIamRoleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateEnclaveCertificateIamRoleRequest(input, context),
    Action: "AssociateEnclaveCertificateIamRole",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateIamInstanceProfileCommand
 */
export const se_AssociateIamInstanceProfileCommand = async (
  input: AssociateIamInstanceProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateIamInstanceProfileRequest(input, context),
    Action: "AssociateIamInstanceProfile",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateInstanceEventWindowCommand
 */
export const se_AssociateInstanceEventWindowCommand = async (
  input: AssociateInstanceEventWindowCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateInstanceEventWindowRequest(input, context),
    Action: "AssociateInstanceEventWindow",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateIpamResourceDiscoveryCommand
 */
export const se_AssociateIpamResourceDiscoveryCommand = async (
  input: AssociateIpamResourceDiscoveryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateIpamResourceDiscoveryRequest(input, context),
    Action: "AssociateIpamResourceDiscovery",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateNatGatewayAddressCommand
 */
export const se_AssociateNatGatewayAddressCommand = async (
  input: AssociateNatGatewayAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateNatGatewayAddressRequest(input, context),
    Action: "AssociateNatGatewayAddress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateRouteTableCommand
 */
export const se_AssociateRouteTableCommand = async (
  input: AssociateRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateRouteTableRequest(input, context),
    Action: "AssociateRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateSubnetCidrBlockCommand
 */
export const se_AssociateSubnetCidrBlockCommand = async (
  input: AssociateSubnetCidrBlockCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateSubnetCidrBlockRequest(input, context),
    Action: "AssociateSubnetCidrBlock",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateTransitGatewayMulticastDomainCommand
 */
export const se_AssociateTransitGatewayMulticastDomainCommand = async (
  input: AssociateTransitGatewayMulticastDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateTransitGatewayMulticastDomainRequest(input, context),
    Action: "AssociateTransitGatewayMulticastDomain",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateTransitGatewayPolicyTableCommand
 */
export const se_AssociateTransitGatewayPolicyTableCommand = async (
  input: AssociateTransitGatewayPolicyTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateTransitGatewayPolicyTableRequest(input, context),
    Action: "AssociateTransitGatewayPolicyTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateTransitGatewayRouteTableCommand
 */
export const se_AssociateTransitGatewayRouteTableCommand = async (
  input: AssociateTransitGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateTransitGatewayRouteTableRequest(input, context),
    Action: "AssociateTransitGatewayRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateTrunkInterfaceCommand
 */
export const se_AssociateTrunkInterfaceCommand = async (
  input: AssociateTrunkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateTrunkInterfaceRequest(input, context),
    Action: "AssociateTrunkInterface",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateVpcCidrBlockCommand
 */
export const se_AssociateVpcCidrBlockCommand = async (
  input: AssociateVpcCidrBlockCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateVpcCidrBlockRequest(input, context),
    Action: "AssociateVpcCidrBlock",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AttachClassicLinkVpcCommand
 */
export const se_AttachClassicLinkVpcCommand = async (
  input: AttachClassicLinkVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AttachClassicLinkVpcRequest(input, context),
    Action: "AttachClassicLinkVpc",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AttachInternetGatewayCommand
 */
export const se_AttachInternetGatewayCommand = async (
  input: AttachInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AttachInternetGatewayRequest(input, context),
    Action: "AttachInternetGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AttachNetworkInterfaceCommand
 */
export const se_AttachNetworkInterfaceCommand = async (
  input: AttachNetworkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AttachNetworkInterfaceRequest(input, context),
    Action: "AttachNetworkInterface",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AttachVerifiedAccessTrustProviderCommand
 */
export const se_AttachVerifiedAccessTrustProviderCommand = async (
  input: AttachVerifiedAccessTrustProviderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AttachVerifiedAccessTrustProviderRequest(input, context),
    Action: "AttachVerifiedAccessTrustProvider",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AttachVolumeCommand
 */
export const se_AttachVolumeCommand = async (
  input: AttachVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AttachVolumeRequest(input, context),
    Action: "AttachVolume",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AttachVpnGatewayCommand
 */
export const se_AttachVpnGatewayCommand = async (
  input: AttachVpnGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AttachVpnGatewayRequest(input, context),
    Action: "AttachVpnGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AuthorizeClientVpnIngressCommand
 */
export const se_AuthorizeClientVpnIngressCommand = async (
  input: AuthorizeClientVpnIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AuthorizeClientVpnIngressRequest(input, context),
    Action: "AuthorizeClientVpnIngress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AuthorizeSecurityGroupEgressCommand
 */
export const se_AuthorizeSecurityGroupEgressCommand = async (
  input: AuthorizeSecurityGroupEgressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AuthorizeSecurityGroupEgressRequest(input, context),
    Action: "AuthorizeSecurityGroupEgress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AuthorizeSecurityGroupIngressCommand
 */
export const se_AuthorizeSecurityGroupIngressCommand = async (
  input: AuthorizeSecurityGroupIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AuthorizeSecurityGroupIngressRequest(input, context),
    Action: "AuthorizeSecurityGroupIngress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2BundleInstanceCommand
 */
export const se_BundleInstanceCommand = async (
  input: BundleInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_BundleInstanceRequest(input, context),
    Action: "BundleInstance",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelBundleTaskCommand
 */
export const se_CancelBundleTaskCommand = async (
  input: CancelBundleTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelBundleTaskRequest(input, context),
    Action: "CancelBundleTask",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelCapacityReservationCommand
 */
export const se_CancelCapacityReservationCommand = async (
  input: CancelCapacityReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelCapacityReservationRequest(input, context),
    Action: "CancelCapacityReservation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelCapacityReservationFleetsCommand
 */
export const se_CancelCapacityReservationFleetsCommand = async (
  input: CancelCapacityReservationFleetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelCapacityReservationFleetsRequest(input, context),
    Action: "CancelCapacityReservationFleets",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelConversionTaskCommand
 */
export const se_CancelConversionTaskCommand = async (
  input: CancelConversionTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelConversionRequest(input, context),
    Action: "CancelConversionTask",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelExportTaskCommand
 */
export const se_CancelExportTaskCommand = async (
  input: CancelExportTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelExportTaskRequest(input, context),
    Action: "CancelExportTask",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelImageLaunchPermissionCommand
 */
export const se_CancelImageLaunchPermissionCommand = async (
  input: CancelImageLaunchPermissionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelImageLaunchPermissionRequest(input, context),
    Action: "CancelImageLaunchPermission",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelImportTaskCommand
 */
export const se_CancelImportTaskCommand = async (
  input: CancelImportTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelImportTaskRequest(input, context),
    Action: "CancelImportTask",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelReservedInstancesListingCommand
 */
export const se_CancelReservedInstancesListingCommand = async (
  input: CancelReservedInstancesListingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelReservedInstancesListingRequest(input, context),
    Action: "CancelReservedInstancesListing",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelSpotFleetRequestsCommand
 */
export const se_CancelSpotFleetRequestsCommand = async (
  input: CancelSpotFleetRequestsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelSpotFleetRequestsRequest(input, context),
    Action: "CancelSpotFleetRequests",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelSpotInstanceRequestsCommand
 */
export const se_CancelSpotInstanceRequestsCommand = async (
  input: CancelSpotInstanceRequestsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelSpotInstanceRequestsRequest(input, context),
    Action: "CancelSpotInstanceRequests",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ConfirmProductInstanceCommand
 */
export const se_ConfirmProductInstanceCommand = async (
  input: ConfirmProductInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ConfirmProductInstanceRequest(input, context),
    Action: "ConfirmProductInstance",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CopyFpgaImageCommand
 */
export const se_CopyFpgaImageCommand = async (
  input: CopyFpgaImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CopyFpgaImageRequest(input, context),
    Action: "CopyFpgaImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CopyImageCommand
 */
export const se_CopyImageCommand = async (
  input: CopyImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CopyImageRequest(input, context),
    Action: "CopyImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CopySnapshotCommand
 */
export const se_CopySnapshotCommand = async (
  input: CopySnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CopySnapshotRequest(input, context),
    Action: "CopySnapshot",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateCapacityReservationCommand
 */
export const se_CreateCapacityReservationCommand = async (
  input: CreateCapacityReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateCapacityReservationRequest(input, context),
    Action: "CreateCapacityReservation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateCapacityReservationFleetCommand
 */
export const se_CreateCapacityReservationFleetCommand = async (
  input: CreateCapacityReservationFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateCapacityReservationFleetRequest(input, context),
    Action: "CreateCapacityReservationFleet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateCarrierGatewayCommand
 */
export const se_CreateCarrierGatewayCommand = async (
  input: CreateCarrierGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateCarrierGatewayRequest(input, context),
    Action: "CreateCarrierGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateClientVpnEndpointCommand
 */
export const se_CreateClientVpnEndpointCommand = async (
  input: CreateClientVpnEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateClientVpnEndpointRequest(input, context),
    Action: "CreateClientVpnEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateClientVpnRouteCommand
 */
export const se_CreateClientVpnRouteCommand = async (
  input: CreateClientVpnRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateClientVpnRouteRequest(input, context),
    Action: "CreateClientVpnRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateCoipCidrCommand
 */
export const se_CreateCoipCidrCommand = async (
  input: CreateCoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateCoipCidrRequest(input, context),
    Action: "CreateCoipCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateCoipPoolCommand
 */
export const se_CreateCoipPoolCommand = async (
  input: CreateCoipPoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateCoipPoolRequest(input, context),
    Action: "CreateCoipPool",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateCustomerGatewayCommand
 */
export const se_CreateCustomerGatewayCommand = async (
  input: CreateCustomerGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateCustomerGatewayRequest(input, context),
    Action: "CreateCustomerGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateDefaultSubnetCommand
 */
export const se_CreateDefaultSubnetCommand = async (
  input: CreateDefaultSubnetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateDefaultSubnetRequest(input, context),
    Action: "CreateDefaultSubnet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateDefaultVpcCommand
 */
export const se_CreateDefaultVpcCommand = async (
  input: CreateDefaultVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateDefaultVpcRequest(input, context),
    Action: "CreateDefaultVpc",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateDhcpOptionsCommand
 */
export const se_CreateDhcpOptionsCommand = async (
  input: CreateDhcpOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateDhcpOptionsRequest(input, context),
    Action: "CreateDhcpOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateEgressOnlyInternetGatewayCommand
 */
export const se_CreateEgressOnlyInternetGatewayCommand = async (
  input: CreateEgressOnlyInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateEgressOnlyInternetGatewayRequest(input, context),
    Action: "CreateEgressOnlyInternetGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateFleetCommand
 */
export const se_CreateFleetCommand = async (
  input: CreateFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateFleetRequest(input, context),
    Action: "CreateFleet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateFlowLogsCommand
 */
export const se_CreateFlowLogsCommand = async (
  input: CreateFlowLogsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateFlowLogsRequest(input, context),
    Action: "CreateFlowLogs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateFpgaImageCommand
 */
export const se_CreateFpgaImageCommand = async (
  input: CreateFpgaImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateFpgaImageRequest(input, context),
    Action: "CreateFpgaImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateImageCommand
 */
export const se_CreateImageCommand = async (
  input: CreateImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateImageRequest(input, context),
    Action: "CreateImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateInstanceConnectEndpointCommand
 */
export const se_CreateInstanceConnectEndpointCommand = async (
  input: CreateInstanceConnectEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateInstanceConnectEndpointRequest(input, context),
    Action: "CreateInstanceConnectEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateInstanceEventWindowCommand
 */
export const se_CreateInstanceEventWindowCommand = async (
  input: CreateInstanceEventWindowCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateInstanceEventWindowRequest(input, context),
    Action: "CreateInstanceEventWindow",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateInstanceExportTaskCommand
 */
export const se_CreateInstanceExportTaskCommand = async (
  input: CreateInstanceExportTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateInstanceExportTaskRequest(input, context),
    Action: "CreateInstanceExportTask",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateInternetGatewayCommand
 */
export const se_CreateInternetGatewayCommand = async (
  input: CreateInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateInternetGatewayRequest(input, context),
    Action: "CreateInternetGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateIpamCommand
 */
export const se_CreateIpamCommand = async (
  input: CreateIpamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateIpamRequest(input, context),
    Action: "CreateIpam",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateIpamPoolCommand
 */
export const se_CreateIpamPoolCommand = async (
  input: CreateIpamPoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateIpamPoolRequest(input, context),
    Action: "CreateIpamPool",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateIpamResourceDiscoveryCommand
 */
export const se_CreateIpamResourceDiscoveryCommand = async (
  input: CreateIpamResourceDiscoveryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateIpamResourceDiscoveryRequest(input, context),
    Action: "CreateIpamResourceDiscovery",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateIpamScopeCommand
 */
export const se_CreateIpamScopeCommand = async (
  input: CreateIpamScopeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateIpamScopeRequest(input, context),
    Action: "CreateIpamScope",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateKeyPairCommand
 */
export const se_CreateKeyPairCommand = async (
  input: CreateKeyPairCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateKeyPairRequest(input, context),
    Action: "CreateKeyPair",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateLaunchTemplateCommand
 */
export const se_CreateLaunchTemplateCommand = async (
  input: CreateLaunchTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateLaunchTemplateRequest(input, context),
    Action: "CreateLaunchTemplate",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateLaunchTemplateVersionCommand
 */
export const se_CreateLaunchTemplateVersionCommand = async (
  input: CreateLaunchTemplateVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateLaunchTemplateVersionRequest(input, context),
    Action: "CreateLaunchTemplateVersion",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteCommand
 */
export const se_CreateLocalGatewayRouteCommand = async (
  input: CreateLocalGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateLocalGatewayRouteRequest(input, context),
    Action: "CreateLocalGatewayRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteTableCommand
 */
export const se_CreateLocalGatewayRouteTableCommand = async (
  input: CreateLocalGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateLocalGatewayRouteTableRequest(input, context),
    Action: "CreateLocalGatewayRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand
 */
export const se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (
  input: CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(input, context),
    Action: "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand
 */
export const se_CreateLocalGatewayRouteTableVpcAssociationCommand = async (
  input: CreateLocalGatewayRouteTableVpcAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateLocalGatewayRouteTableVpcAssociationRequest(input, context),
    Action: "CreateLocalGatewayRouteTableVpcAssociation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateManagedPrefixListCommand
 */
export const se_CreateManagedPrefixListCommand = async (
  input: CreateManagedPrefixListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateManagedPrefixListRequest(input, context),
    Action: "CreateManagedPrefixList",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNatGatewayCommand
 */
export const se_CreateNatGatewayCommand = async (
  input: CreateNatGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNatGatewayRequest(input, context),
    Action: "CreateNatGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNetworkAclCommand
 */
export const se_CreateNetworkAclCommand = async (
  input: CreateNetworkAclCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkAclRequest(input, context),
    Action: "CreateNetworkAcl",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNetworkAclEntryCommand
 */
export const se_CreateNetworkAclEntryCommand = async (
  input: CreateNetworkAclEntryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkAclEntryRequest(input, context),
    Action: "CreateNetworkAclEntry",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNetworkInsightsAccessScopeCommand
 */
export const se_CreateNetworkInsightsAccessScopeCommand = async (
  input: CreateNetworkInsightsAccessScopeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkInsightsAccessScopeRequest(input, context),
    Action: "CreateNetworkInsightsAccessScope",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNetworkInsightsPathCommand
 */
export const se_CreateNetworkInsightsPathCommand = async (
  input: CreateNetworkInsightsPathCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkInsightsPathRequest(input, context),
    Action: "CreateNetworkInsightsPath",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNetworkInterfaceCommand
 */
export const se_CreateNetworkInterfaceCommand = async (
  input: CreateNetworkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkInterfaceRequest(input, context),
    Action: "CreateNetworkInterface",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNetworkInterfacePermissionCommand
 */
export const se_CreateNetworkInterfacePermissionCommand = async (
  input: CreateNetworkInterfacePermissionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkInterfacePermissionRequest(input, context),
    Action: "CreateNetworkInterfacePermission",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreatePlacementGroupCommand
 */
export const se_CreatePlacementGroupCommand = async (
  input: CreatePlacementGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreatePlacementGroupRequest(input, context),
    Action: "CreatePlacementGroup",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreatePublicIpv4PoolCommand
 */
export const se_CreatePublicIpv4PoolCommand = async (
  input: CreatePublicIpv4PoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreatePublicIpv4PoolRequest(input, context),
    Action: "CreatePublicIpv4Pool",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateReplaceRootVolumeTaskCommand
 */
export const se_CreateReplaceRootVolumeTaskCommand = async (
  input: CreateReplaceRootVolumeTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateReplaceRootVolumeTaskRequest(input, context),
    Action: "CreateReplaceRootVolumeTask",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateReservedInstancesListingCommand
 */
export const se_CreateReservedInstancesListingCommand = async (
  input: CreateReservedInstancesListingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateReservedInstancesListingRequest(input, context),
    Action: "CreateReservedInstancesListing",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateRestoreImageTaskCommand
 */
export const se_CreateRestoreImageTaskCommand = async (
  input: CreateRestoreImageTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateRestoreImageTaskRequest(input, context),
    Action: "CreateRestoreImageTask",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateRouteCommand
 */
export const se_CreateRouteCommand = async (
  input: CreateRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateRouteRequest(input, context),
    Action: "CreateRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateRouteTableCommand
 */
export const se_CreateRouteTableCommand = async (
  input: CreateRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateRouteTableRequest(input, context),
    Action: "CreateRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateSecurityGroupCommand
 */
export const se_CreateSecurityGroupCommand = async (
  input: CreateSecurityGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateSecurityGroupRequest(input, context),
    Action: "CreateSecurityGroup",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateSnapshotCommand
 */
export const se_CreateSnapshotCommand = async (
  input: CreateSnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateSnapshotRequest(input, context),
    Action: "CreateSnapshot",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateSnapshotsCommand
 */
export const se_CreateSnapshotsCommand = async (
  input: CreateSnapshotsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateSnapshotsRequest(input, context),
    Action: "CreateSnapshots",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateSpotDatafeedSubscriptionCommand
 */
export const se_CreateSpotDatafeedSubscriptionCommand = async (
  input: CreateSpotDatafeedSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateSpotDatafeedSubscriptionRequest(input, context),
    Action: "CreateSpotDatafeedSubscription",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateStoreImageTaskCommand
 */
export const se_CreateStoreImageTaskCommand = async (
  input: CreateStoreImageTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateStoreImageTaskRequest(input, context),
    Action: "CreateStoreImageTask",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateSubnetCommand
 */
export const se_CreateSubnetCommand = async (
  input: CreateSubnetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateSubnetRequest(input, context),
    Action: "CreateSubnet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateSubnetCidrReservationCommand
 */
export const se_CreateSubnetCidrReservationCommand = async (
  input: CreateSubnetCidrReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateSubnetCidrReservationRequest(input, context),
    Action: "CreateSubnetCidrReservation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTagsCommand
 */
export const se_CreateTagsCommand = async (
  input: CreateTagsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTagsRequest(input, context),
    Action: "CreateTags",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTrafficMirrorFilterCommand
 */
export const se_CreateTrafficMirrorFilterCommand = async (
  input: CreateTrafficMirrorFilterCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTrafficMirrorFilterRequest(input, context),
    Action: "CreateTrafficMirrorFilter",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTrafficMirrorFilterRuleCommand
 */
export const se_CreateTrafficMirrorFilterRuleCommand = async (
  input: CreateTrafficMirrorFilterRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTrafficMirrorFilterRuleRequest(input, context),
    Action: "CreateTrafficMirrorFilterRule",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTrafficMirrorSessionCommand
 */
export const se_CreateTrafficMirrorSessionCommand = async (
  input: CreateTrafficMirrorSessionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTrafficMirrorSessionRequest(input, context),
    Action: "CreateTrafficMirrorSession",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTrafficMirrorTargetCommand
 */
export const se_CreateTrafficMirrorTargetCommand = async (
  input: CreateTrafficMirrorTargetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTrafficMirrorTargetRequest(input, context),
    Action: "CreateTrafficMirrorTarget",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayCommand
 */
export const se_CreateTransitGatewayCommand = async (
  input: CreateTransitGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayRequest(input, context),
    Action: "CreateTransitGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayConnectCommand
 */
export const se_CreateTransitGatewayConnectCommand = async (
  input: CreateTransitGatewayConnectCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayConnectRequest(input, context),
    Action: "CreateTransitGatewayConnect",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayConnectPeerCommand
 */
export const se_CreateTransitGatewayConnectPeerCommand = async (
  input: CreateTransitGatewayConnectPeerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayConnectPeerRequest(input, context),
    Action: "CreateTransitGatewayConnectPeer",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayMulticastDomainCommand
 */
export const se_CreateTransitGatewayMulticastDomainCommand = async (
  input: CreateTransitGatewayMulticastDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayMulticastDomainRequest(input, context),
    Action: "CreateTransitGatewayMulticastDomain",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand
 */
export const se_CreateTransitGatewayPeeringAttachmentCommand = async (
  input: CreateTransitGatewayPeeringAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayPeeringAttachmentRequest(input, context),
    Action: "CreateTransitGatewayPeeringAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayPolicyTableCommand
 */
export const se_CreateTransitGatewayPolicyTableCommand = async (
  input: CreateTransitGatewayPolicyTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayPolicyTableRequest(input, context),
    Action: "CreateTransitGatewayPolicyTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand
 */
export const se_CreateTransitGatewayPrefixListReferenceCommand = async (
  input: CreateTransitGatewayPrefixListReferenceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayPrefixListReferenceRequest(input, context),
    Action: "CreateTransitGatewayPrefixListReference",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayRouteCommand
 */
export const se_CreateTransitGatewayRouteCommand = async (
  input: CreateTransitGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayRouteRequest(input, context),
    Action: "CreateTransitGatewayRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayRouteTableCommand
 */
export const se_CreateTransitGatewayRouteTableCommand = async (
  input: CreateTransitGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayRouteTableRequest(input, context),
    Action: "CreateTransitGatewayRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayRouteTableAnnouncementCommand
 */
export const se_CreateTransitGatewayRouteTableAnnouncementCommand = async (
  input: CreateTransitGatewayRouteTableAnnouncementCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayRouteTableAnnouncementRequest(input, context),
    Action: "CreateTransitGatewayRouteTableAnnouncement",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayVpcAttachmentCommand
 */
export const se_CreateTransitGatewayVpcAttachmentCommand = async (
  input: CreateTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayVpcAttachmentRequest(input, context),
    Action: "CreateTransitGatewayVpcAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVerifiedAccessEndpointCommand
 */
export const se_CreateVerifiedAccessEndpointCommand = async (
  input: CreateVerifiedAccessEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVerifiedAccessEndpointRequest(input, context),
    Action: "CreateVerifiedAccessEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVerifiedAccessGroupCommand
 */
export const se_CreateVerifiedAccessGroupCommand = async (
  input: CreateVerifiedAccessGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVerifiedAccessGroupRequest(input, context),
    Action: "CreateVerifiedAccessGroup",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVerifiedAccessInstanceCommand
 */
export const se_CreateVerifiedAccessInstanceCommand = async (
  input: CreateVerifiedAccessInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVerifiedAccessInstanceRequest(input, context),
    Action: "CreateVerifiedAccessInstance",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVerifiedAccessTrustProviderCommand
 */
export const se_CreateVerifiedAccessTrustProviderCommand = async (
  input: CreateVerifiedAccessTrustProviderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVerifiedAccessTrustProviderRequest(input, context),
    Action: "CreateVerifiedAccessTrustProvider",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVolumeCommand
 */
export const se_CreateVolumeCommand = async (
  input: CreateVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVolumeRequest(input, context),
    Action: "CreateVolume",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpcCommand
 */
export const se_CreateVpcCommand = async (
  input: CreateVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpcRequest(input, context),
    Action: "CreateVpc",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpcEndpointCommand
 */
export const se_CreateVpcEndpointCommand = async (
  input: CreateVpcEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpcEndpointRequest(input, context),
    Action: "CreateVpcEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpcEndpointConnectionNotificationCommand
 */
export const se_CreateVpcEndpointConnectionNotificationCommand = async (
  input: CreateVpcEndpointConnectionNotificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpcEndpointConnectionNotificationRequest(input, context),
    Action: "CreateVpcEndpointConnectionNotification",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpcEndpointServiceConfigurationCommand
 */
export const se_CreateVpcEndpointServiceConfigurationCommand = async (
  input: CreateVpcEndpointServiceConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpcEndpointServiceConfigurationRequest(input, context),
    Action: "CreateVpcEndpointServiceConfiguration",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpcPeeringConnectionCommand
 */
export const se_CreateVpcPeeringConnectionCommand = async (
  input: CreateVpcPeeringConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpcPeeringConnectionRequest(input, context),
    Action: "CreateVpcPeeringConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpnConnectionCommand
 */
export const se_CreateVpnConnectionCommand = async (
  input: CreateVpnConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpnConnectionRequest(input, context),
    Action: "CreateVpnConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpnConnectionRouteCommand
 */
export const se_CreateVpnConnectionRouteCommand = async (
  input: CreateVpnConnectionRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpnConnectionRouteRequest(input, context),
    Action: "CreateVpnConnectionRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpnGatewayCommand
 */
export const se_CreateVpnGatewayCommand = async (
  input: CreateVpnGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpnGatewayRequest(input, context),
    Action: "CreateVpnGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteCarrierGatewayCommand
 */
export const se_DeleteCarrierGatewayCommand = async (
  input: DeleteCarrierGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteCarrierGatewayRequest(input, context),
    Action: "DeleteCarrierGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteClientVpnEndpointCommand
 */
export const se_DeleteClientVpnEndpointCommand = async (
  input: DeleteClientVpnEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteClientVpnEndpointRequest(input, context),
    Action: "DeleteClientVpnEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteClientVpnRouteCommand
 */
export const se_DeleteClientVpnRouteCommand = async (
  input: DeleteClientVpnRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteClientVpnRouteRequest(input, context),
    Action: "DeleteClientVpnRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteCoipCidrCommand
 */
export const se_DeleteCoipCidrCommand = async (
  input: DeleteCoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteCoipCidrRequest(input, context),
    Action: "DeleteCoipCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteCoipPoolCommand
 */
export const se_DeleteCoipPoolCommand = async (
  input: DeleteCoipPoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteCoipPoolRequest(input, context),
    Action: "DeleteCoipPool",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteCustomerGatewayCommand
 */
export const se_DeleteCustomerGatewayCommand = async (
  input: DeleteCustomerGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteCustomerGatewayRequest(input, context),
    Action: "DeleteCustomerGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteDhcpOptionsCommand
 */
export const se_DeleteDhcpOptionsCommand = async (
  input: DeleteDhcpOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteDhcpOptionsRequest(input, context),
    Action: "DeleteDhcpOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteEgressOnlyInternetGatewayCommand
 */
export const se_DeleteEgressOnlyInternetGatewayCommand = async (
  input: DeleteEgressOnlyInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteEgressOnlyInternetGatewayRequest(input, context),
    Action: "DeleteEgressOnlyInternetGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteFleetsCommand
 */
export const se_DeleteFleetsCommand = async (
  input: DeleteFleetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteFleetsRequest(input, context),
    Action: "DeleteFleets",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteFlowLogsCommand
 */
export const se_DeleteFlowLogsCommand = async (
  input: DeleteFlowLogsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteFlowLogsRequest(input, context),
    Action: "DeleteFlowLogs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteFpgaImageCommand
 */
export const se_DeleteFpgaImageCommand = async (
  input: DeleteFpgaImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteFpgaImageRequest(input, context),
    Action: "DeleteFpgaImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteInstanceConnectEndpointCommand
 */
export const se_DeleteInstanceConnectEndpointCommand = async (
  input: DeleteInstanceConnectEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteInstanceConnectEndpointRequest(input, context),
    Action: "DeleteInstanceConnectEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteInstanceEventWindowCommand
 */
export const se_DeleteInstanceEventWindowCommand = async (
  input: DeleteInstanceEventWindowCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteInstanceEventWindowRequest(input, context),
    Action: "DeleteInstanceEventWindow",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteInternetGatewayCommand
 */
export const se_DeleteInternetGatewayCommand = async (
  input: DeleteInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteInternetGatewayRequest(input, context),
    Action: "DeleteInternetGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteIpamCommand
 */
export const se_DeleteIpamCommand = async (
  input: DeleteIpamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteIpamRequest(input, context),
    Action: "DeleteIpam",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteIpamPoolCommand
 */
export const se_DeleteIpamPoolCommand = async (
  input: DeleteIpamPoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteIpamPoolRequest(input, context),
    Action: "DeleteIpamPool",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteIpamResourceDiscoveryCommand
 */
export const se_DeleteIpamResourceDiscoveryCommand = async (
  input: DeleteIpamResourceDiscoveryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteIpamResourceDiscoveryRequest(input, context),
    Action: "DeleteIpamResourceDiscovery",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteIpamScopeCommand
 */
export const se_DeleteIpamScopeCommand = async (
  input: DeleteIpamScopeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteIpamScopeRequest(input, context),
    Action: "DeleteIpamScope",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteKeyPairCommand
 */
export const se_DeleteKeyPairCommand = async (
  input: DeleteKeyPairCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteKeyPairRequest(input, context),
    Action: "DeleteKeyPair",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteLaunchTemplateCommand
 */
export const se_DeleteLaunchTemplateCommand = async (
  input: DeleteLaunchTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteLaunchTemplateRequest(input, context),
    Action: "DeleteLaunchTemplate",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteLaunchTemplateVersionsCommand
 */
export const se_DeleteLaunchTemplateVersionsCommand = async (
  input: DeleteLaunchTemplateVersionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteLaunchTemplateVersionsRequest(input, context),
    Action: "DeleteLaunchTemplateVersions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteCommand
 */
export const se_DeleteLocalGatewayRouteCommand = async (
  input: DeleteLocalGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteLocalGatewayRouteRequest(input, context),
    Action: "DeleteLocalGatewayRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteTableCommand
 */
export const se_DeleteLocalGatewayRouteTableCommand = async (
  input: DeleteLocalGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteLocalGatewayRouteTableRequest(input, context),
    Action: "DeleteLocalGatewayRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand
 */
export const se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (
  input: DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(input, context),
    Action: "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand
 */
export const se_DeleteLocalGatewayRouteTableVpcAssociationCommand = async (
  input: DeleteLocalGatewayRouteTableVpcAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteLocalGatewayRouteTableVpcAssociationRequest(input, context),
    Action: "DeleteLocalGatewayRouteTableVpcAssociation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteManagedPrefixListCommand
 */
export const se_DeleteManagedPrefixListCommand = async (
  input: DeleteManagedPrefixListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteManagedPrefixListRequest(input, context),
    Action: "DeleteManagedPrefixList",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNatGatewayCommand
 */
export const se_DeleteNatGatewayCommand = async (
  input: DeleteNatGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNatGatewayRequest(input, context),
    Action: "DeleteNatGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkAclCommand
 */
export const se_DeleteNetworkAclCommand = async (
  input: DeleteNetworkAclCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkAclRequest(input, context),
    Action: "DeleteNetworkAcl",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkAclEntryCommand
 */
export const se_DeleteNetworkAclEntryCommand = async (
  input: DeleteNetworkAclEntryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkAclEntryRequest(input, context),
    Action: "DeleteNetworkAclEntry",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkInsightsAccessScopeCommand
 */
export const se_DeleteNetworkInsightsAccessScopeCommand = async (
  input: DeleteNetworkInsightsAccessScopeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInsightsAccessScopeRequest(input, context),
    Action: "DeleteNetworkInsightsAccessScope",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand
 */
export const se_DeleteNetworkInsightsAccessScopeAnalysisCommand = async (
  input: DeleteNetworkInsightsAccessScopeAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInsightsAccessScopeAnalysisRequest(input, context),
    Action: "DeleteNetworkInsightsAccessScopeAnalysis",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkInsightsAnalysisCommand
 */
export const se_DeleteNetworkInsightsAnalysisCommand = async (
  input: DeleteNetworkInsightsAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInsightsAnalysisRequest(input, context),
    Action: "DeleteNetworkInsightsAnalysis",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkInsightsPathCommand
 */
export const se_DeleteNetworkInsightsPathCommand = async (
  input: DeleteNetworkInsightsPathCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInsightsPathRequest(input, context),
    Action: "DeleteNetworkInsightsPath",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkInterfaceCommand
 */
export const se_DeleteNetworkInterfaceCommand = async (
  input: DeleteNetworkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInterfaceRequest(input, context),
    Action: "DeleteNetworkInterface",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkInterfacePermissionCommand
 */
export const se_DeleteNetworkInterfacePermissionCommand = async (
  input: DeleteNetworkInterfacePermissionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInterfacePermissionRequest(input, context),
    Action: "DeleteNetworkInterfacePermission",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeletePlacementGroupCommand
 */
export const se_DeletePlacementGroupCommand = async (
  input: DeletePlacementGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeletePlacementGroupRequest(input, context),
    Action: "DeletePlacementGroup",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeletePublicIpv4PoolCommand
 */
export const se_DeletePublicIpv4PoolCommand = async (
  input: DeletePublicIpv4PoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeletePublicIpv4PoolRequest(input, context),
    Action: "DeletePublicIpv4Pool",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteQueuedReservedInstancesCommand
 */
export const se_DeleteQueuedReservedInstancesCommand = async (
  input: DeleteQueuedReservedInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteQueuedReservedInstancesRequest(input, context),
    Action: "DeleteQueuedReservedInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteRouteCommand
 */
export const se_DeleteRouteCommand = async (
  input: DeleteRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteRouteRequest(input, context),
    Action: "DeleteRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteRouteTableCommand
 */
export const se_DeleteRouteTableCommand = async (
  input: DeleteRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteRouteTableRequest(input, context),
    Action: "DeleteRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteSecurityGroupCommand
 */
export const se_DeleteSecurityGroupCommand = async (
  input: DeleteSecurityGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteSecurityGroupRequest(input, context),
    Action: "DeleteSecurityGroup",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteSnapshotCommand
 */
export const se_DeleteSnapshotCommand = async (
  input: DeleteSnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteSnapshotRequest(input, context),
    Action: "DeleteSnapshot",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteSpotDatafeedSubscriptionCommand
 */
export const se_DeleteSpotDatafeedSubscriptionCommand = async (
  input: DeleteSpotDatafeedSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteSpotDatafeedSubscriptionRequest(input, context),
    Action: "DeleteSpotDatafeedSubscription",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteSubnetCommand
 */
export const se_DeleteSubnetCommand = async (
  input: DeleteSubnetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteSubnetRequest(input, context),
    Action: "DeleteSubnet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteSubnetCidrReservationCommand
 */
export const se_DeleteSubnetCidrReservationCommand = async (
  input: DeleteSubnetCidrReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteSubnetCidrReservationRequest(input, context),
    Action: "DeleteSubnetCidrReservation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTagsCommand
 */
export const se_DeleteTagsCommand = async (
  input: DeleteTagsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTagsRequest(input, context),
    Action: "DeleteTags",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTrafficMirrorFilterCommand
 */
export const se_DeleteTrafficMirrorFilterCommand = async (
  input: DeleteTrafficMirrorFilterCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTrafficMirrorFilterRequest(input, context),
    Action: "DeleteTrafficMirrorFilter",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTrafficMirrorFilterRuleCommand
 */
export const se_DeleteTrafficMirrorFilterRuleCommand = async (
  input: DeleteTrafficMirrorFilterRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTrafficMirrorFilterRuleRequest(input, context),
    Action: "DeleteTrafficMirrorFilterRule",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTrafficMirrorSessionCommand
 */
export const se_DeleteTrafficMirrorSessionCommand = async (
  input: DeleteTrafficMirrorSessionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTrafficMirrorSessionRequest(input, context),
    Action: "DeleteTrafficMirrorSession",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTrafficMirrorTargetCommand
 */
export const se_DeleteTrafficMirrorTargetCommand = async (
  input: DeleteTrafficMirrorTargetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTrafficMirrorTargetRequest(input, context),
    Action: "DeleteTrafficMirrorTarget",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayCommand
 */
export const se_DeleteTransitGatewayCommand = async (
  input: DeleteTransitGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayRequest(input, context),
    Action: "DeleteTransitGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayConnectCommand
 */
export const se_DeleteTransitGatewayConnectCommand = async (
  input: DeleteTransitGatewayConnectCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayConnectRequest(input, context),
    Action: "DeleteTransitGatewayConnect",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayConnectPeerCommand
 */
export const se_DeleteTransitGatewayConnectPeerCommand = async (
  input: DeleteTransitGatewayConnectPeerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayConnectPeerRequest(input, context),
    Action: "DeleteTransitGatewayConnectPeer",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayMulticastDomainCommand
 */
export const se_DeleteTransitGatewayMulticastDomainCommand = async (
  input: DeleteTransitGatewayMulticastDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayMulticastDomainRequest(input, context),
    Action: "DeleteTransitGatewayMulticastDomain",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand
 */
export const se_DeleteTransitGatewayPeeringAttachmentCommand = async (
  input: DeleteTransitGatewayPeeringAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayPeeringAttachmentRequest(input, context),
    Action: "DeleteTransitGatewayPeeringAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayPolicyTableCommand
 */
export const se_DeleteTransitGatewayPolicyTableCommand = async (
  input: DeleteTransitGatewayPolicyTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayPolicyTableRequest(input, context),
    Action: "DeleteTransitGatewayPolicyTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand
 */
export const se_DeleteTransitGatewayPrefixListReferenceCommand = async (
  input: DeleteTransitGatewayPrefixListReferenceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayPrefixListReferenceRequest(input, context),
    Action: "DeleteTransitGatewayPrefixListReference",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayRouteCommand
 */
export const se_DeleteTransitGatewayRouteCommand = async (
  input: DeleteTransitGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayRouteRequest(input, context),
    Action: "DeleteTransitGatewayRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayRouteTableCommand
 */
export const se_DeleteTransitGatewayRouteTableCommand = async (
  input: DeleteTransitGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayRouteTableRequest(input, context),
    Action: "DeleteTransitGatewayRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayRouteTableAnnouncementCommand
 */
export const se_DeleteTransitGatewayRouteTableAnnouncementCommand = async (
  input: DeleteTransitGatewayRouteTableAnnouncementCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayRouteTableAnnouncementRequest(input, context),
    Action: "DeleteTransitGatewayRouteTableAnnouncement",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand
 */
export const se_DeleteTransitGatewayVpcAttachmentCommand = async (
  input: DeleteTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayVpcAttachmentRequest(input, context),
    Action: "DeleteTransitGatewayVpcAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVerifiedAccessEndpointCommand
 */
export const se_DeleteVerifiedAccessEndpointCommand = async (
  input: DeleteVerifiedAccessEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVerifiedAccessEndpointRequest(input, context),
    Action: "DeleteVerifiedAccessEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVerifiedAccessGroupCommand
 */
export const se_DeleteVerifiedAccessGroupCommand = async (
  input: DeleteVerifiedAccessGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVerifiedAccessGroupRequest(input, context),
    Action: "DeleteVerifiedAccessGroup",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVerifiedAccessInstanceCommand
 */
export const se_DeleteVerifiedAccessInstanceCommand = async (
  input: DeleteVerifiedAccessInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVerifiedAccessInstanceRequest(input, context),
    Action: "DeleteVerifiedAccessInstance",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVerifiedAccessTrustProviderCommand
 */
export const se_DeleteVerifiedAccessTrustProviderCommand = async (
  input: DeleteVerifiedAccessTrustProviderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVerifiedAccessTrustProviderRequest(input, context),
    Action: "DeleteVerifiedAccessTrustProvider",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVolumeCommand
 */
export const se_DeleteVolumeCommand = async (
  input: DeleteVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVolumeRequest(input, context),
    Action: "DeleteVolume",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpcCommand
 */
export const se_DeleteVpcCommand = async (
  input: DeleteVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcRequest(input, context),
    Action: "DeleteVpc",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand
 */
export const se_DeleteVpcEndpointConnectionNotificationsCommand = async (
  input: DeleteVpcEndpointConnectionNotificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcEndpointConnectionNotificationsRequest(input, context),
    Action: "DeleteVpcEndpointConnectionNotifications",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpcEndpointsCommand
 */
export const se_DeleteVpcEndpointsCommand = async (
  input: DeleteVpcEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcEndpointsRequest(input, context),
    Action: "DeleteVpcEndpoints",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand
 */
export const se_DeleteVpcEndpointServiceConfigurationsCommand = async (
  input: DeleteVpcEndpointServiceConfigurationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcEndpointServiceConfigurationsRequest(input, context),
    Action: "DeleteVpcEndpointServiceConfigurations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpcPeeringConnectionCommand
 */
export const se_DeleteVpcPeeringConnectionCommand = async (
  input: DeleteVpcPeeringConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcPeeringConnectionRequest(input, context),
    Action: "DeleteVpcPeeringConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpnConnectionCommand
 */
export const se_DeleteVpnConnectionCommand = async (
  input: DeleteVpnConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpnConnectionRequest(input, context),
    Action: "DeleteVpnConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpnConnectionRouteCommand
 */
export const se_DeleteVpnConnectionRouteCommand = async (
  input: DeleteVpnConnectionRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpnConnectionRouteRequest(input, context),
    Action: "DeleteVpnConnectionRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpnGatewayCommand
 */
export const se_DeleteVpnGatewayCommand = async (
  input: DeleteVpnGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpnGatewayRequest(input, context),
    Action: "DeleteVpnGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeprovisionByoipCidrCommand
 */
export const se_DeprovisionByoipCidrCommand = async (
  input: DeprovisionByoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeprovisionByoipCidrRequest(input, context),
    Action: "DeprovisionByoipCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeprovisionIpamPoolCidrCommand
 */
export const se_DeprovisionIpamPoolCidrCommand = async (
  input: DeprovisionIpamPoolCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeprovisionIpamPoolCidrRequest(input, context),
    Action: "DeprovisionIpamPoolCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand
 */
export const se_DeprovisionPublicIpv4PoolCidrCommand = async (
  input: DeprovisionPublicIpv4PoolCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeprovisionPublicIpv4PoolCidrRequest(input, context),
    Action: "DeprovisionPublicIpv4PoolCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeregisterImageCommand
 */
export const se_DeregisterImageCommand = async (
  input: DeregisterImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeregisterImageRequest(input, context),
    Action: "DeregisterImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand
 */
export const se_DeregisterInstanceEventNotificationAttributesCommand = async (
  input: DeregisterInstanceEventNotificationAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeregisterInstanceEventNotificationAttributesRequest(input, context),
    Action: "DeregisterInstanceEventNotificationAttributes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand
 */
export const se_DeregisterTransitGatewayMulticastGroupMembersCommand = async (
  input: DeregisterTransitGatewayMulticastGroupMembersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeregisterTransitGatewayMulticastGroupMembersRequest(input, context),
    Action: "DeregisterTransitGatewayMulticastGroupMembers",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand
 */
export const se_DeregisterTransitGatewayMulticastGroupSourcesCommand = async (
  input: DeregisterTransitGatewayMulticastGroupSourcesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeregisterTransitGatewayMulticastGroupSourcesRequest(input, context),
    Action: "DeregisterTransitGatewayMulticastGroupSources",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAccountAttributesCommand
 */
export const se_DescribeAccountAttributesCommand = async (
  input: DescribeAccountAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAccountAttributesRequest(input, context),
    Action: "DescribeAccountAttributes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAddressesCommand
 */
export const se_DescribeAddressesCommand = async (
  input: DescribeAddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAddressesRequest(input, context),
    Action: "DescribeAddresses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAddressesAttributeCommand
 */
export const se_DescribeAddressesAttributeCommand = async (
  input: DescribeAddressesAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAddressesAttributeRequest(input, context),
    Action: "DescribeAddressesAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAddressTransfersCommand
 */
export const se_DescribeAddressTransfersCommand = async (
  input: DescribeAddressTransfersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAddressTransfersRequest(input, context),
    Action: "DescribeAddressTransfers",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAggregateIdFormatCommand
 */
export const se_DescribeAggregateIdFormatCommand = async (
  input: DescribeAggregateIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAggregateIdFormatRequest(input, context),
    Action: "DescribeAggregateIdFormat",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAvailabilityZonesCommand
 */
export const se_DescribeAvailabilityZonesCommand = async (
  input: DescribeAvailabilityZonesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAvailabilityZonesRequest(input, context),
    Action: "DescribeAvailabilityZones",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAwsNetworkPerformanceMetricSubscriptionsCommand
 */
export const se_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand = async (
  input: DescribeAwsNetworkPerformanceMetricSubscriptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAwsNetworkPerformanceMetricSubscriptionsRequest(input, context),
    Action: "DescribeAwsNetworkPerformanceMetricSubscriptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeBundleTasksCommand
 */
export const se_DescribeBundleTasksCommand = async (
  input: DescribeBundleTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeBundleTasksRequest(input, context),
    Action: "DescribeBundleTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeByoipCidrsCommand
 */
export const se_DescribeByoipCidrsCommand = async (
  input: DescribeByoipCidrsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeByoipCidrsRequest(input, context),
    Action: "DescribeByoipCidrs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeCapacityReservationFleetsCommand
 */
export const se_DescribeCapacityReservationFleetsCommand = async (
  input: DescribeCapacityReservationFleetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeCapacityReservationFleetsRequest(input, context),
    Action: "DescribeCapacityReservationFleets",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeCapacityReservationsCommand
 */
export const se_DescribeCapacityReservationsCommand = async (
  input: DescribeCapacityReservationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeCapacityReservationsRequest(input, context),
    Action: "DescribeCapacityReservations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeCarrierGatewaysCommand
 */
export const se_DescribeCarrierGatewaysCommand = async (
  input: DescribeCarrierGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeCarrierGatewaysRequest(input, context),
    Action: "DescribeCarrierGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeClassicLinkInstancesCommand
 */
export const se_DescribeClassicLinkInstancesCommand = async (
  input: DescribeClassicLinkInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeClassicLinkInstancesRequest(input, context),
    Action: "DescribeClassicLinkInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeClientVpnAuthorizationRulesCommand
 */
export const se_DescribeClientVpnAuthorizationRulesCommand = async (
  input: DescribeClientVpnAuthorizationRulesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnAuthorizationRulesRequest(input, context),
    Action: "DescribeClientVpnAuthorizationRules",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeClientVpnConnectionsCommand
 */
export const se_DescribeClientVpnConnectionsCommand = async (
  input: DescribeClientVpnConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnConnectionsRequest(input, context),
    Action: "DescribeClientVpnConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeClientVpnEndpointsCommand
 */
export const se_DescribeClientVpnEndpointsCommand = async (
  input: DescribeClientVpnEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnEndpointsRequest(input, context),
    Action: "DescribeClientVpnEndpoints",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeClientVpnRoutesCommand
 */
export const se_DescribeClientVpnRoutesCommand = async (
  input: DescribeClientVpnRoutesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnRoutesRequest(input, context),
    Action: "DescribeClientVpnRoutes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeClientVpnTargetNetworksCommand
 */
export const se_DescribeClientVpnTargetNetworksCommand = async (
  input: DescribeClientVpnTargetNetworksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnTargetNetworksRequest(input, context),
    Action: "DescribeClientVpnTargetNetworks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeCoipPoolsCommand
 */
export const se_DescribeCoipPoolsCommand = async (
  input: DescribeCoipPoolsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeCoipPoolsRequest(input, context),
    Action: "DescribeCoipPools",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeConversionTasksCommand
 */
export const se_DescribeConversionTasksCommand = async (
  input: DescribeConversionTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeConversionTasksRequest(input, context),
    Action: "DescribeConversionTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeCustomerGatewaysCommand
 */
export const se_DescribeCustomerGatewaysCommand = async (
  input: DescribeCustomerGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeCustomerGatewaysRequest(input, context),
    Action: "DescribeCustomerGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeDhcpOptionsCommand
 */
export const se_DescribeDhcpOptionsCommand = async (
  input: DescribeDhcpOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeDhcpOptionsRequest(input, context),
    Action: "DescribeDhcpOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand
 */
export const se_DescribeEgressOnlyInternetGatewaysCommand = async (
  input: DescribeEgressOnlyInternetGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeEgressOnlyInternetGatewaysRequest(input, context),
    Action: "DescribeEgressOnlyInternetGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeElasticGpusCommand
 */
export const se_DescribeElasticGpusCommand = async (
  input: DescribeElasticGpusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeElasticGpusRequest(input, context),
    Action: "DescribeElasticGpus",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeExportImageTasksCommand
 */
export const se_DescribeExportImageTasksCommand = async (
  input: DescribeExportImageTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeExportImageTasksRequest(input, context),
    Action: "DescribeExportImageTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeExportTasksCommand
 */
export const se_DescribeExportTasksCommand = async (
  input: DescribeExportTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeExportTasksRequest(input, context),
    Action: "DescribeExportTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFastLaunchImagesCommand
 */
export const se_DescribeFastLaunchImagesCommand = async (
  input: DescribeFastLaunchImagesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFastLaunchImagesRequest(input, context),
    Action: "DescribeFastLaunchImages",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFastSnapshotRestoresCommand
 */
export const se_DescribeFastSnapshotRestoresCommand = async (
  input: DescribeFastSnapshotRestoresCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFastSnapshotRestoresRequest(input, context),
    Action: "DescribeFastSnapshotRestores",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFleetHistoryCommand
 */
export const se_DescribeFleetHistoryCommand = async (
  input: DescribeFleetHistoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFleetHistoryRequest(input, context),
    Action: "DescribeFleetHistory",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFleetInstancesCommand
 */
export const se_DescribeFleetInstancesCommand = async (
  input: DescribeFleetInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFleetInstancesRequest(input, context),
    Action: "DescribeFleetInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFleetsCommand
 */
export const se_DescribeFleetsCommand = async (
  input: DescribeFleetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFleetsRequest(input, context),
    Action: "DescribeFleets",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFlowLogsCommand
 */
export const se_DescribeFlowLogsCommand = async (
  input: DescribeFlowLogsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFlowLogsRequest(input, context),
    Action: "DescribeFlowLogs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFpgaImageAttributeCommand
 */
export const se_DescribeFpgaImageAttributeCommand = async (
  input: DescribeFpgaImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFpgaImageAttributeRequest(input, context),
    Action: "DescribeFpgaImageAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFpgaImagesCommand
 */
export const se_DescribeFpgaImagesCommand = async (
  input: DescribeFpgaImagesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFpgaImagesRequest(input, context),
    Action: "DescribeFpgaImages",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeHostReservationOfferingsCommand
 */
export const se_DescribeHostReservationOfferingsCommand = async (
  input: DescribeHostReservationOfferingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeHostReservationOfferingsRequest(input, context),
    Action: "DescribeHostReservationOfferings",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeHostReservationsCommand
 */
export const se_DescribeHostReservationsCommand = async (
  input: DescribeHostReservationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeHostReservationsRequest(input, context),
    Action: "DescribeHostReservations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeHostsCommand
 */
export const se_DescribeHostsCommand = async (
  input: DescribeHostsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeHostsRequest(input, context),
    Action: "DescribeHosts",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIamInstanceProfileAssociationsCommand
 */
export const se_DescribeIamInstanceProfileAssociationsCommand = async (
  input: DescribeIamInstanceProfileAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIamInstanceProfileAssociationsRequest(input, context),
    Action: "DescribeIamInstanceProfileAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIdentityIdFormatCommand
 */
export const se_DescribeIdentityIdFormatCommand = async (
  input: DescribeIdentityIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIdentityIdFormatRequest(input, context),
    Action: "DescribeIdentityIdFormat",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIdFormatCommand
 */
export const se_DescribeIdFormatCommand = async (
  input: DescribeIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIdFormatRequest(input, context),
    Action: "DescribeIdFormat",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeImageAttributeCommand
 */
export const se_DescribeImageAttributeCommand = async (
  input: DescribeImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeImageAttributeRequest(input, context),
    Action: "DescribeImageAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeImagesCommand
 */
export const se_DescribeImagesCommand = async (
  input: DescribeImagesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeImagesRequest(input, context),
    Action: "DescribeImages",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeImportImageTasksCommand
 */
export const se_DescribeImportImageTasksCommand = async (
  input: DescribeImportImageTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeImportImageTasksRequest(input, context),
    Action: "DescribeImportImageTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeImportSnapshotTasksCommand
 */
export const se_DescribeImportSnapshotTasksCommand = async (
  input: DescribeImportSnapshotTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeImportSnapshotTasksRequest(input, context),
    Action: "DescribeImportSnapshotTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceAttributeCommand
 */
export const se_DescribeInstanceAttributeCommand = async (
  input: DescribeInstanceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceAttributeRequest(input, context),
    Action: "DescribeInstanceAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceConnectEndpointsCommand
 */
export const se_DescribeInstanceConnectEndpointsCommand = async (
  input: DescribeInstanceConnectEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceConnectEndpointsRequest(input, context),
    Action: "DescribeInstanceConnectEndpoints",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceCreditSpecificationsCommand
 */
export const se_DescribeInstanceCreditSpecificationsCommand = async (
  input: DescribeInstanceCreditSpecificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceCreditSpecificationsRequest(input, context),
    Action: "DescribeInstanceCreditSpecifications",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceEventNotificationAttributesCommand
 */
export const se_DescribeInstanceEventNotificationAttributesCommand = async (
  input: DescribeInstanceEventNotificationAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceEventNotificationAttributesRequest(input, context),
    Action: "DescribeInstanceEventNotificationAttributes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceEventWindowsCommand
 */
export const se_DescribeInstanceEventWindowsCommand = async (
  input: DescribeInstanceEventWindowsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceEventWindowsRequest(input, context),
    Action: "DescribeInstanceEventWindows",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstancesCommand
 */
export const se_DescribeInstancesCommand = async (
  input: DescribeInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstancesRequest(input, context),
    Action: "DescribeInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceStatusCommand
 */
export const se_DescribeInstanceStatusCommand = async (
  input: DescribeInstanceStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceStatusRequest(input, context),
    Action: "DescribeInstanceStatus",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceTypeOfferingsCommand
 */
export const se_DescribeInstanceTypeOfferingsCommand = async (
  input: DescribeInstanceTypeOfferingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceTypeOfferingsRequest(input, context),
    Action: "DescribeInstanceTypeOfferings",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceTypesCommand
 */
export const se_DescribeInstanceTypesCommand = async (
  input: DescribeInstanceTypesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceTypesRequest(input, context),
    Action: "DescribeInstanceTypes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInternetGatewaysCommand
 */
export const se_DescribeInternetGatewaysCommand = async (
  input: DescribeInternetGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInternetGatewaysRequest(input, context),
    Action: "DescribeInternetGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIpamPoolsCommand
 */
export const se_DescribeIpamPoolsCommand = async (
  input: DescribeIpamPoolsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamPoolsRequest(input, context),
    Action: "DescribeIpamPools",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIpamResourceDiscoveriesCommand
 */
export const se_DescribeIpamResourceDiscoveriesCommand = async (
  input: DescribeIpamResourceDiscoveriesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamResourceDiscoveriesRequest(input, context),
    Action: "DescribeIpamResourceDiscoveries",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIpamResourceDiscoveryAssociationsCommand
 */
export const se_DescribeIpamResourceDiscoveryAssociationsCommand = async (
  input: DescribeIpamResourceDiscoveryAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamResourceDiscoveryAssociationsRequest(input, context),
    Action: "DescribeIpamResourceDiscoveryAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIpamsCommand
 */
export const se_DescribeIpamsCommand = async (
  input: DescribeIpamsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamsRequest(input, context),
    Action: "DescribeIpams",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIpamScopesCommand
 */
export const se_DescribeIpamScopesCommand = async (
  input: DescribeIpamScopesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamScopesRequest(input, context),
    Action: "DescribeIpamScopes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIpv6PoolsCommand
 */
export const se_DescribeIpv6PoolsCommand = async (
  input: DescribeIpv6PoolsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIpv6PoolsRequest(input, context),
    Action: "DescribeIpv6Pools",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeKeyPairsCommand
 */
export const se_DescribeKeyPairsCommand = async (
  input: DescribeKeyPairsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeKeyPairsRequest(input, context),
    Action: "DescribeKeyPairs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLaunchTemplatesCommand
 */
export const se_DescribeLaunchTemplatesCommand = async (
  input: DescribeLaunchTemplatesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLaunchTemplatesRequest(input, context),
    Action: "DescribeLaunchTemplates",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLaunchTemplateVersionsCommand
 */
export const se_DescribeLaunchTemplateVersionsCommand = async (
  input: DescribeLaunchTemplateVersionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLaunchTemplateVersionsRequest(input, context),
    Action: "DescribeLaunchTemplateVersions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLocalGatewayRouteTablesCommand
 */
export const se_DescribeLocalGatewayRouteTablesCommand = async (
  input: DescribeLocalGatewayRouteTablesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayRouteTablesRequest(input, context),
    Action: "DescribeLocalGatewayRouteTables",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand
 */
export const se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (
  input: DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(input, context),
    Action: "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand
 */
export const se_DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (
  input: DescribeLocalGatewayRouteTableVpcAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayRouteTableVpcAssociationsRequest(input, context),
    Action: "DescribeLocalGatewayRouteTableVpcAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLocalGatewaysCommand
 */
export const se_DescribeLocalGatewaysCommand = async (
  input: DescribeLocalGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewaysRequest(input, context),
    Action: "DescribeLocalGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand
 */
export const se_DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (
  input: DescribeLocalGatewayVirtualInterfaceGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayVirtualInterfaceGroupsRequest(input, context),
    Action: "DescribeLocalGatewayVirtualInterfaceGroups",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand
 */
export const se_DescribeLocalGatewayVirtualInterfacesCommand = async (
  input: DescribeLocalGatewayVirtualInterfacesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayVirtualInterfacesRequest(input, context),
    Action: "DescribeLocalGatewayVirtualInterfaces",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeManagedPrefixListsCommand
 */
export const se_DescribeManagedPrefixListsCommand = async (
  input: DescribeManagedPrefixListsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeManagedPrefixListsRequest(input, context),
    Action: "DescribeManagedPrefixLists",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeMovingAddressesCommand
 */
export const se_DescribeMovingAddressesCommand = async (
  input: DescribeMovingAddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeMovingAddressesRequest(input, context),
    Action: "DescribeMovingAddresses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNatGatewaysCommand
 */
export const se_DescribeNatGatewaysCommand = async (
  input: DescribeNatGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNatGatewaysRequest(input, context),
    Action: "DescribeNatGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkAclsCommand
 */
export const se_DescribeNetworkAclsCommand = async (
  input: DescribeNetworkAclsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkAclsRequest(input, context),
    Action: "DescribeNetworkAcls",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand
 */
export const se_DescribeNetworkInsightsAccessScopeAnalysesCommand = async (
  input: DescribeNetworkInsightsAccessScopeAnalysesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInsightsAccessScopeAnalysesRequest(input, context),
    Action: "DescribeNetworkInsightsAccessScopeAnalyses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInsightsAccessScopesCommand
 */
export const se_DescribeNetworkInsightsAccessScopesCommand = async (
  input: DescribeNetworkInsightsAccessScopesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInsightsAccessScopesRequest(input, context),
    Action: "DescribeNetworkInsightsAccessScopes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInsightsAnalysesCommand
 */
export const se_DescribeNetworkInsightsAnalysesCommand = async (
  input: DescribeNetworkInsightsAnalysesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInsightsAnalysesRequest(input, context),
    Action: "DescribeNetworkInsightsAnalyses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInsightsPathsCommand
 */
export const se_DescribeNetworkInsightsPathsCommand = async (
  input: DescribeNetworkInsightsPathsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInsightsPathsRequest(input, context),
    Action: "DescribeNetworkInsightsPaths",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInterfaceAttributeCommand
 */
export const se_DescribeNetworkInterfaceAttributeCommand = async (
  input: DescribeNetworkInterfaceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInterfaceAttributeRequest(input, context),
    Action: "DescribeNetworkInterfaceAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInterfacePermissionsCommand
 */
export const se_DescribeNetworkInterfacePermissionsCommand = async (
  input: DescribeNetworkInterfacePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInterfacePermissionsRequest(input, context),
    Action: "DescribeNetworkInterfacePermissions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInterfacesCommand
 */
export const se_DescribeNetworkInterfacesCommand = async (
  input: DescribeNetworkInterfacesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInterfacesRequest(input, context),
    Action: "DescribeNetworkInterfaces",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribePlacementGroupsCommand
 */
export const se_DescribePlacementGroupsCommand = async (
  input: DescribePlacementGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribePlacementGroupsRequest(input, context),
    Action: "DescribePlacementGroups",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribePrefixListsCommand
 */
export const se_DescribePrefixListsCommand = async (
  input: DescribePrefixListsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribePrefixListsRequest(input, context),
    Action: "DescribePrefixLists",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribePrincipalIdFormatCommand
 */
export const se_DescribePrincipalIdFormatCommand = async (
  input: DescribePrincipalIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribePrincipalIdFormatRequest(input, context),
    Action: "DescribePrincipalIdFormat",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribePublicIpv4PoolsCommand
 */
export const se_DescribePublicIpv4PoolsCommand = async (
  input: DescribePublicIpv4PoolsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribePublicIpv4PoolsRequest(input, context),
    Action: "DescribePublicIpv4Pools",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeRegionsCommand
 */
export const se_DescribeRegionsCommand = async (
  input: DescribeRegionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeRegionsRequest(input, context),
    Action: "DescribeRegions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeReplaceRootVolumeTasksCommand
 */
export const se_DescribeReplaceRootVolumeTasksCommand = async (
  input: DescribeReplaceRootVolumeTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeReplaceRootVolumeTasksRequest(input, context),
    Action: "DescribeReplaceRootVolumeTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeReservedInstancesCommand
 */
export const se_DescribeReservedInstancesCommand = async (
  input: DescribeReservedInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedInstancesRequest(input, context),
    Action: "DescribeReservedInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeReservedInstancesListingsCommand
 */
export const se_DescribeReservedInstancesListingsCommand = async (
  input: DescribeReservedInstancesListingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedInstancesListingsRequest(input, context),
    Action: "DescribeReservedInstancesListings",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeReservedInstancesModificationsCommand
 */
export const se_DescribeReservedInstancesModificationsCommand = async (
  input: DescribeReservedInstancesModificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedInstancesModificationsRequest(input, context),
    Action: "DescribeReservedInstancesModifications",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeReservedInstancesOfferingsCommand
 */
export const se_DescribeReservedInstancesOfferingsCommand = async (
  input: DescribeReservedInstancesOfferingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedInstancesOfferingsRequest(input, context),
    Action: "DescribeReservedInstancesOfferings",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeRouteTablesCommand
 */
export const se_DescribeRouteTablesCommand = async (
  input: DescribeRouteTablesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeRouteTablesRequest(input, context),
    Action: "DescribeRouteTables",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeScheduledInstanceAvailabilityCommand
 */
export const se_DescribeScheduledInstanceAvailabilityCommand = async (
  input: DescribeScheduledInstanceAvailabilityCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeScheduledInstanceAvailabilityRequest(input, context),
    Action: "DescribeScheduledInstanceAvailability",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeScheduledInstancesCommand
 */
export const se_DescribeScheduledInstancesCommand = async (
  input: DescribeScheduledInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeScheduledInstancesRequest(input, context),
    Action: "DescribeScheduledInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSecurityGroupReferencesCommand
 */
export const se_DescribeSecurityGroupReferencesCommand = async (
  input: DescribeSecurityGroupReferencesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSecurityGroupReferencesRequest(input, context),
    Action: "DescribeSecurityGroupReferences",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSecurityGroupRulesCommand
 */
export const se_DescribeSecurityGroupRulesCommand = async (
  input: DescribeSecurityGroupRulesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSecurityGroupRulesRequest(input, context),
    Action: "DescribeSecurityGroupRules",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSecurityGroupsCommand
 */
export const se_DescribeSecurityGroupsCommand = async (
  input: DescribeSecurityGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSecurityGroupsRequest(input, context),
    Action: "DescribeSecurityGroups",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSnapshotAttributeCommand
 */
export const se_DescribeSnapshotAttributeCommand = async (
  input: DescribeSnapshotAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSnapshotAttributeRequest(input, context),
    Action: "DescribeSnapshotAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSnapshotsCommand
 */
export const se_DescribeSnapshotsCommand = async (
  input: DescribeSnapshotsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSnapshotsRequest(input, context),
    Action: "DescribeSnapshots",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSnapshotTierStatusCommand
 */
export const se_DescribeSnapshotTierStatusCommand = async (
  input: DescribeSnapshotTierStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSnapshotTierStatusRequest(input, context),
    Action: "DescribeSnapshotTierStatus",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSpotDatafeedSubscriptionCommand
 */
export const se_DescribeSpotDatafeedSubscriptionCommand = async (
  input: DescribeSpotDatafeedSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotDatafeedSubscriptionRequest(input, context),
    Action: "DescribeSpotDatafeedSubscription",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSpotFleetInstancesCommand
 */
export const se_DescribeSpotFleetInstancesCommand = async (
  input: DescribeSpotFleetInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotFleetInstancesRequest(input, context),
    Action: "DescribeSpotFleetInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSpotFleetRequestHistoryCommand
 */
export const se_DescribeSpotFleetRequestHistoryCommand = async (
  input: DescribeSpotFleetRequestHistoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotFleetRequestHistoryRequest(input, context),
    Action: "DescribeSpotFleetRequestHistory",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSpotFleetRequestsCommand
 */
export const se_DescribeSpotFleetRequestsCommand = async (
  input: DescribeSpotFleetRequestsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotFleetRequestsRequest(input, context),
    Action: "DescribeSpotFleetRequests",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSpotInstanceRequestsCommand
 */
export const se_DescribeSpotInstanceRequestsCommand = async (
  input: DescribeSpotInstanceRequestsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotInstanceRequestsRequest(input, context),
    Action: "DescribeSpotInstanceRequests",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSpotPriceHistoryCommand
 */
export const se_DescribeSpotPriceHistoryCommand = async (
  input: DescribeSpotPriceHistoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotPriceHistoryRequest(input, context),
    Action: "DescribeSpotPriceHistory",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeStaleSecurityGroupsCommand
 */
export const se_DescribeStaleSecurityGroupsCommand = async (
  input: DescribeStaleSecurityGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeStaleSecurityGroupsRequest(input, context),
    Action: "DescribeStaleSecurityGroups",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeStoreImageTasksCommand
 */
export const se_DescribeStoreImageTasksCommand = async (
  input: DescribeStoreImageTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeStoreImageTasksRequest(input, context),
    Action: "DescribeStoreImageTasks",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSubnetsCommand
 */
export const se_DescribeSubnetsCommand = async (
  input: DescribeSubnetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSubnetsRequest(input, context),
    Action: "DescribeSubnets",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTagsCommand
 */
export const se_DescribeTagsCommand = async (
  input: DescribeTagsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTagsRequest(input, context),
    Action: "DescribeTags",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTrafficMirrorFiltersCommand
 */
export const se_DescribeTrafficMirrorFiltersCommand = async (
  input: DescribeTrafficMirrorFiltersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTrafficMirrorFiltersRequest(input, context),
    Action: "DescribeTrafficMirrorFilters",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTrafficMirrorSessionsCommand
 */
export const se_DescribeTrafficMirrorSessionsCommand = async (
  input: DescribeTrafficMirrorSessionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTrafficMirrorSessionsRequest(input, context),
    Action: "DescribeTrafficMirrorSessions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTrafficMirrorTargetsCommand
 */
export const se_DescribeTrafficMirrorTargetsCommand = async (
  input: DescribeTrafficMirrorTargetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTrafficMirrorTargetsRequest(input, context),
    Action: "DescribeTrafficMirrorTargets",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayAttachmentsCommand
 */
export const se_DescribeTransitGatewayAttachmentsCommand = async (
  input: DescribeTransitGatewayAttachmentsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayAttachmentsRequest(input, context),
    Action: "DescribeTransitGatewayAttachments",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayConnectPeersCommand
 */
export const se_DescribeTransitGatewayConnectPeersCommand = async (
  input: DescribeTransitGatewayConnectPeersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayConnectPeersRequest(input, context),
    Action: "DescribeTransitGatewayConnectPeers",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayConnectsCommand
 */
export const se_DescribeTransitGatewayConnectsCommand = async (
  input: DescribeTransitGatewayConnectsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayConnectsRequest(input, context),
    Action: "DescribeTransitGatewayConnects",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand
 */
export const se_DescribeTransitGatewayMulticastDomainsCommand = async (
  input: DescribeTransitGatewayMulticastDomainsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayMulticastDomainsRequest(input, context),
    Action: "DescribeTransitGatewayMulticastDomains",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand
 */
export const se_DescribeTransitGatewayPeeringAttachmentsCommand = async (
  input: DescribeTransitGatewayPeeringAttachmentsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayPeeringAttachmentsRequest(input, context),
    Action: "DescribeTransitGatewayPeeringAttachments",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayPolicyTablesCommand
 */
export const se_DescribeTransitGatewayPolicyTablesCommand = async (
  input: DescribeTransitGatewayPolicyTablesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayPolicyTablesRequest(input, context),
    Action: "DescribeTransitGatewayPolicyTables",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayRouteTableAnnouncementsCommand
 */
export const se_DescribeTransitGatewayRouteTableAnnouncementsCommand = async (
  input: DescribeTransitGatewayRouteTableAnnouncementsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayRouteTableAnnouncementsRequest(input, context),
    Action: "DescribeTransitGatewayRouteTableAnnouncements",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayRouteTablesCommand
 */
export const se_DescribeTransitGatewayRouteTablesCommand = async (
  input: DescribeTransitGatewayRouteTablesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayRouteTablesRequest(input, context),
    Action: "DescribeTransitGatewayRouteTables",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewaysCommand
 */
export const se_DescribeTransitGatewaysCommand = async (
  input: DescribeTransitGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewaysRequest(input, context),
    Action: "DescribeTransitGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand
 */
export const se_DescribeTransitGatewayVpcAttachmentsCommand = async (
  input: DescribeTransitGatewayVpcAttachmentsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayVpcAttachmentsRequest(input, context),
    Action: "DescribeTransitGatewayVpcAttachments",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTrunkInterfaceAssociationsCommand
 */
export const se_DescribeTrunkInterfaceAssociationsCommand = async (
  input: DescribeTrunkInterfaceAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTrunkInterfaceAssociationsRequest(input, context),
    Action: "DescribeTrunkInterfaceAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVerifiedAccessEndpointsCommand
 */
export const se_DescribeVerifiedAccessEndpointsCommand = async (
  input: DescribeVerifiedAccessEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessEndpointsRequest(input, context),
    Action: "DescribeVerifiedAccessEndpoints",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVerifiedAccessGroupsCommand
 */
export const se_DescribeVerifiedAccessGroupsCommand = async (
  input: DescribeVerifiedAccessGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessGroupsRequest(input, context),
    Action: "DescribeVerifiedAccessGroups",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVerifiedAccessInstanceLoggingConfigurationsCommand
 */
export const se_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand = async (
  input: DescribeVerifiedAccessInstanceLoggingConfigurationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessInstanceLoggingConfigurationsRequest(input, context),
    Action: "DescribeVerifiedAccessInstanceLoggingConfigurations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVerifiedAccessInstancesCommand
 */
export const se_DescribeVerifiedAccessInstancesCommand = async (
  input: DescribeVerifiedAccessInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessInstancesRequest(input, context),
    Action: "DescribeVerifiedAccessInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVerifiedAccessTrustProvidersCommand
 */
export const se_DescribeVerifiedAccessTrustProvidersCommand = async (
  input: DescribeVerifiedAccessTrustProvidersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessTrustProvidersRequest(input, context),
    Action: "DescribeVerifiedAccessTrustProviders",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVolumeAttributeCommand
 */
export const se_DescribeVolumeAttributeCommand = async (
  input: DescribeVolumeAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVolumeAttributeRequest(input, context),
    Action: "DescribeVolumeAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVolumesCommand
 */
export const se_DescribeVolumesCommand = async (
  input: DescribeVolumesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVolumesRequest(input, context),
    Action: "DescribeVolumes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVolumesModificationsCommand
 */
export const se_DescribeVolumesModificationsCommand = async (
  input: DescribeVolumesModificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVolumesModificationsRequest(input, context),
    Action: "DescribeVolumesModifications",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVolumeStatusCommand
 */
export const se_DescribeVolumeStatusCommand = async (
  input: DescribeVolumeStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVolumeStatusRequest(input, context),
    Action: "DescribeVolumeStatus",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcAttributeCommand
 */
export const se_DescribeVpcAttributeCommand = async (
  input: DescribeVpcAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcAttributeRequest(input, context),
    Action: "DescribeVpcAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcClassicLinkCommand
 */
export const se_DescribeVpcClassicLinkCommand = async (
  input: DescribeVpcClassicLinkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcClassicLinkRequest(input, context),
    Action: "DescribeVpcClassicLink",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand
 */
export const se_DescribeVpcClassicLinkDnsSupportCommand = async (
  input: DescribeVpcClassicLinkDnsSupportCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcClassicLinkDnsSupportRequest(input, context),
    Action: "DescribeVpcClassicLinkDnsSupport",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand
 */
export const se_DescribeVpcEndpointConnectionNotificationsCommand = async (
  input: DescribeVpcEndpointConnectionNotificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointConnectionNotificationsRequest(input, context),
    Action: "DescribeVpcEndpointConnectionNotifications",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcEndpointConnectionsCommand
 */
export const se_DescribeVpcEndpointConnectionsCommand = async (
  input: DescribeVpcEndpointConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointConnectionsRequest(input, context),
    Action: "DescribeVpcEndpointConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcEndpointsCommand
 */
export const se_DescribeVpcEndpointsCommand = async (
  input: DescribeVpcEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointsRequest(input, context),
    Action: "DescribeVpcEndpoints",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand
 */
export const se_DescribeVpcEndpointServiceConfigurationsCommand = async (
  input: DescribeVpcEndpointServiceConfigurationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointServiceConfigurationsRequest(input, context),
    Action: "DescribeVpcEndpointServiceConfigurations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcEndpointServicePermissionsCommand
 */
export const se_DescribeVpcEndpointServicePermissionsCommand = async (
  input: DescribeVpcEndpointServicePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointServicePermissionsRequest(input, context),
    Action: "DescribeVpcEndpointServicePermissions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcEndpointServicesCommand
 */
export const se_DescribeVpcEndpointServicesCommand = async (
  input: DescribeVpcEndpointServicesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointServicesRequest(input, context),
    Action: "DescribeVpcEndpointServices",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcPeeringConnectionsCommand
 */
export const se_DescribeVpcPeeringConnectionsCommand = async (
  input: DescribeVpcPeeringConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcPeeringConnectionsRequest(input, context),
    Action: "DescribeVpcPeeringConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcsCommand
 */
export const se_DescribeVpcsCommand = async (
  input: DescribeVpcsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcsRequest(input, context),
    Action: "DescribeVpcs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpnConnectionsCommand
 */
export const se_DescribeVpnConnectionsCommand = async (
  input: DescribeVpnConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpnConnectionsRequest(input, context),
    Action: "DescribeVpnConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpnGatewaysCommand
 */
export const se_DescribeVpnGatewaysCommand = async (
  input: DescribeVpnGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpnGatewaysRequest(input, context),
    Action: "DescribeVpnGateways",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DetachClassicLinkVpcCommand
 */
export const se_DetachClassicLinkVpcCommand = async (
  input: DetachClassicLinkVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DetachClassicLinkVpcRequest(input, context),
    Action: "DetachClassicLinkVpc",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DetachInternetGatewayCommand
 */
export const se_DetachInternetGatewayCommand = async (
  input: DetachInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DetachInternetGatewayRequest(input, context),
    Action: "DetachInternetGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DetachNetworkInterfaceCommand
 */
export const se_DetachNetworkInterfaceCommand = async (
  input: DetachNetworkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DetachNetworkInterfaceRequest(input, context),
    Action: "DetachNetworkInterface",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DetachVerifiedAccessTrustProviderCommand
 */
export const se_DetachVerifiedAccessTrustProviderCommand = async (
  input: DetachVerifiedAccessTrustProviderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DetachVerifiedAccessTrustProviderRequest(input, context),
    Action: "DetachVerifiedAccessTrustProvider",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DetachVolumeCommand
 */
export const se_DetachVolumeCommand = async (
  input: DetachVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DetachVolumeRequest(input, context),
    Action: "DetachVolume",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DetachVpnGatewayCommand
 */
export const se_DetachVpnGatewayCommand = async (
  input: DetachVpnGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DetachVpnGatewayRequest(input, context),
    Action: "DetachVpnGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableAddressTransferCommand
 */
export const se_DisableAddressTransferCommand = async (
  input: DisableAddressTransferCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableAddressTransferRequest(input, context),
    Action: "DisableAddressTransfer",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableAwsNetworkPerformanceMetricSubscriptionCommand
 */
export const se_DisableAwsNetworkPerformanceMetricSubscriptionCommand = async (
  input: DisableAwsNetworkPerformanceMetricSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableAwsNetworkPerformanceMetricSubscriptionRequest(input, context),
    Action: "DisableAwsNetworkPerformanceMetricSubscription",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableEbsEncryptionByDefaultCommand
 */
export const se_DisableEbsEncryptionByDefaultCommand = async (
  input: DisableEbsEncryptionByDefaultCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableEbsEncryptionByDefaultRequest(input, context),
    Action: "DisableEbsEncryptionByDefault",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableFastLaunchCommand
 */
export const se_DisableFastLaunchCommand = async (
  input: DisableFastLaunchCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableFastLaunchRequest(input, context),
    Action: "DisableFastLaunch",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableFastSnapshotRestoresCommand
 */
export const se_DisableFastSnapshotRestoresCommand = async (
  input: DisableFastSnapshotRestoresCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableFastSnapshotRestoresRequest(input, context),
    Action: "DisableFastSnapshotRestores",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableImageCommand
 */
export const se_DisableImageCommand = async (
  input: DisableImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableImageRequest(input, context),
    Action: "DisableImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableImageBlockPublicAccessCommand
 */
export const se_DisableImageBlockPublicAccessCommand = async (
  input: DisableImageBlockPublicAccessCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableImageBlockPublicAccessRequest(input, context),
    Action: "DisableImageBlockPublicAccess",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableImageDeprecationCommand
 */
export const se_DisableImageDeprecationCommand = async (
  input: DisableImageDeprecationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableImageDeprecationRequest(input, context),
    Action: "DisableImageDeprecation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableIpamOrganizationAdminAccountCommand
 */
export const se_DisableIpamOrganizationAdminAccountCommand = async (
  input: DisableIpamOrganizationAdminAccountCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableIpamOrganizationAdminAccountRequest(input, context),
    Action: "DisableIpamOrganizationAdminAccount",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableSerialConsoleAccessCommand
 */
export const se_DisableSerialConsoleAccessCommand = async (
  input: DisableSerialConsoleAccessCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableSerialConsoleAccessRequest(input, context),
    Action: "DisableSerialConsoleAccess",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand
 */
export const se_DisableTransitGatewayRouteTablePropagationCommand = async (
  input: DisableTransitGatewayRouteTablePropagationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableTransitGatewayRouteTablePropagationRequest(input, context),
    Action: "DisableTransitGatewayRouteTablePropagation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableVgwRoutePropagationCommand
 */
export const se_DisableVgwRoutePropagationCommand = async (
  input: DisableVgwRoutePropagationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableVgwRoutePropagationRequest(input, context),
    Action: "DisableVgwRoutePropagation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableVpcClassicLinkCommand
 */
export const se_DisableVpcClassicLinkCommand = async (
  input: DisableVpcClassicLinkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableVpcClassicLinkRequest(input, context),
    Action: "DisableVpcClassicLink",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableVpcClassicLinkDnsSupportCommand
 */
export const se_DisableVpcClassicLinkDnsSupportCommand = async (
  input: DisableVpcClassicLinkDnsSupportCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableVpcClassicLinkDnsSupportRequest(input, context),
    Action: "DisableVpcClassicLinkDnsSupport",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateAddressCommand
 */
export const se_DisassociateAddressCommand = async (
  input: DisassociateAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateAddressRequest(input, context),
    Action: "DisassociateAddress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateClientVpnTargetNetworkCommand
 */
export const se_DisassociateClientVpnTargetNetworkCommand = async (
  input: DisassociateClientVpnTargetNetworkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateClientVpnTargetNetworkRequest(input, context),
    Action: "DisassociateClientVpnTargetNetwork",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand
 */
export const se_DisassociateEnclaveCertificateIamRoleCommand = async (
  input: DisassociateEnclaveCertificateIamRoleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateEnclaveCertificateIamRoleRequest(input, context),
    Action: "DisassociateEnclaveCertificateIamRole",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateIamInstanceProfileCommand
 */
export const se_DisassociateIamInstanceProfileCommand = async (
  input: DisassociateIamInstanceProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateIamInstanceProfileRequest(input, context),
    Action: "DisassociateIamInstanceProfile",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateInstanceEventWindowCommand
 */
export const se_DisassociateInstanceEventWindowCommand = async (
  input: DisassociateInstanceEventWindowCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateInstanceEventWindowRequest(input, context),
    Action: "DisassociateInstanceEventWindow",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateIpamResourceDiscoveryCommand
 */
export const se_DisassociateIpamResourceDiscoveryCommand = async (
  input: DisassociateIpamResourceDiscoveryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateIpamResourceDiscoveryRequest(input, context),
    Action: "DisassociateIpamResourceDiscovery",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateNatGatewayAddressCommand
 */
export const se_DisassociateNatGatewayAddressCommand = async (
  input: DisassociateNatGatewayAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateNatGatewayAddressRequest(input, context),
    Action: "DisassociateNatGatewayAddress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateRouteTableCommand
 */
export const se_DisassociateRouteTableCommand = async (
  input: DisassociateRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateRouteTableRequest(input, context),
    Action: "DisassociateRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateSubnetCidrBlockCommand
 */
export const se_DisassociateSubnetCidrBlockCommand = async (
  input: DisassociateSubnetCidrBlockCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateSubnetCidrBlockRequest(input, context),
    Action: "DisassociateSubnetCidrBlock",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand
 */
export const se_DisassociateTransitGatewayMulticastDomainCommand = async (
  input: DisassociateTransitGatewayMulticastDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateTransitGatewayMulticastDomainRequest(input, context),
    Action: "DisassociateTransitGatewayMulticastDomain",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateTransitGatewayPolicyTableCommand
 */
export const se_DisassociateTransitGatewayPolicyTableCommand = async (
  input: DisassociateTransitGatewayPolicyTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateTransitGatewayPolicyTableRequest(input, context),
    Action: "DisassociateTransitGatewayPolicyTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateTransitGatewayRouteTableCommand
 */
export const se_DisassociateTransitGatewayRouteTableCommand = async (
  input: DisassociateTransitGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateTransitGatewayRouteTableRequest(input, context),
    Action: "DisassociateTransitGatewayRouteTable",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateTrunkInterfaceCommand
 */
export const se_DisassociateTrunkInterfaceCommand = async (
  input: DisassociateTrunkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateTrunkInterfaceRequest(input, context),
    Action: "DisassociateTrunkInterface",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateVpcCidrBlockCommand
 */
export const se_DisassociateVpcCidrBlockCommand = async (
  input: DisassociateVpcCidrBlockCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateVpcCidrBlockRequest(input, context),
    Action: "DisassociateVpcCidrBlock",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableAddressTransferCommand
 */
export const se_EnableAddressTransferCommand = async (
  input: EnableAddressTransferCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableAddressTransferRequest(input, context),
    Action: "EnableAddressTransfer",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableAwsNetworkPerformanceMetricSubscriptionCommand
 */
export const se_EnableAwsNetworkPerformanceMetricSubscriptionCommand = async (
  input: EnableAwsNetworkPerformanceMetricSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableAwsNetworkPerformanceMetricSubscriptionRequest(input, context),
    Action: "EnableAwsNetworkPerformanceMetricSubscription",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableEbsEncryptionByDefaultCommand
 */
export const se_EnableEbsEncryptionByDefaultCommand = async (
  input: EnableEbsEncryptionByDefaultCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableEbsEncryptionByDefaultRequest(input, context),
    Action: "EnableEbsEncryptionByDefault",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableFastLaunchCommand
 */
export const se_EnableFastLaunchCommand = async (
  input: EnableFastLaunchCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableFastLaunchRequest(input, context),
    Action: "EnableFastLaunch",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableFastSnapshotRestoresCommand
 */
export const se_EnableFastSnapshotRestoresCommand = async (
  input: EnableFastSnapshotRestoresCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableFastSnapshotRestoresRequest(input, context),
    Action: "EnableFastSnapshotRestores",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableImageCommand
 */
export const se_EnableImageCommand = async (
  input: EnableImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableImageRequest(input, context),
    Action: "EnableImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableImageBlockPublicAccessCommand
 */
export const se_EnableImageBlockPublicAccessCommand = async (
  input: EnableImageBlockPublicAccessCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableImageBlockPublicAccessRequest(input, context),
    Action: "EnableImageBlockPublicAccess",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableImageDeprecationCommand
 */
export const se_EnableImageDeprecationCommand = async (
  input: EnableImageDeprecationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableImageDeprecationRequest(input, context),
    Action: "EnableImageDeprecation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableIpamOrganizationAdminAccountCommand
 */
export const se_EnableIpamOrganizationAdminAccountCommand = async (
  input: EnableIpamOrganizationAdminAccountCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableIpamOrganizationAdminAccountRequest(input, context),
    Action: "EnableIpamOrganizationAdminAccount",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableReachabilityAnalyzerOrganizationSharingCommand
 */
export const se_EnableReachabilityAnalyzerOrganizationSharingCommand = async (
  input: EnableReachabilityAnalyzerOrganizationSharingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableReachabilityAnalyzerOrganizationSharingRequest(input, context),
    Action: "EnableReachabilityAnalyzerOrganizationSharing",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableSerialConsoleAccessCommand
 */
export const se_EnableSerialConsoleAccessCommand = async (
  input: EnableSerialConsoleAccessCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableSerialConsoleAccessRequest(input, context),
    Action: "EnableSerialConsoleAccess",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand
 */
export const se_EnableTransitGatewayRouteTablePropagationCommand = async (
  input: EnableTransitGatewayRouteTablePropagationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableTransitGatewayRouteTablePropagationRequest(input, context),
    Action: "EnableTransitGatewayRouteTablePropagation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableVgwRoutePropagationCommand
 */
export const se_EnableVgwRoutePropagationCommand = async (
  input: EnableVgwRoutePropagationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableVgwRoutePropagationRequest(input, context),
    Action: "EnableVgwRoutePropagation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableVolumeIOCommand
 */
export const se_EnableVolumeIOCommand = async (
  input: EnableVolumeIOCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableVolumeIORequest(input, context),
    Action: "EnableVolumeIO",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableVpcClassicLinkCommand
 */
export const se_EnableVpcClassicLinkCommand = async (
  input: EnableVpcClassicLinkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableVpcClassicLinkRequest(input, context),
    Action: "EnableVpcClassicLink",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableVpcClassicLinkDnsSupportCommand
 */
export const se_EnableVpcClassicLinkDnsSupportCommand = async (
  input: EnableVpcClassicLinkDnsSupportCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableVpcClassicLinkDnsSupportRequest(input, context),
    Action: "EnableVpcClassicLinkDnsSupport",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand
 */
export const se_ExportClientVpnClientCertificateRevocationListCommand = async (
  input: ExportClientVpnClientCertificateRevocationListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ExportClientVpnClientCertificateRevocationListRequest(input, context),
    Action: "ExportClientVpnClientCertificateRevocationList",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ExportClientVpnClientConfigurationCommand
 */
export const se_ExportClientVpnClientConfigurationCommand = async (
  input: ExportClientVpnClientConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ExportClientVpnClientConfigurationRequest(input, context),
    Action: "ExportClientVpnClientConfiguration",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ExportImageCommand
 */
export const se_ExportImageCommand = async (
  input: ExportImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ExportImageRequest(input, context),
    Action: "ExportImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ExportTransitGatewayRoutesCommand
 */
export const se_ExportTransitGatewayRoutesCommand = async (
  input: ExportTransitGatewayRoutesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ExportTransitGatewayRoutesRequest(input, context),
    Action: "ExportTransitGatewayRoutes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand
 */
export const se_GetAssociatedEnclaveCertificateIamRolesCommand = async (
  input: GetAssociatedEnclaveCertificateIamRolesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetAssociatedEnclaveCertificateIamRolesRequest(input, context),
    Action: "GetAssociatedEnclaveCertificateIamRoles",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetAssociatedIpv6PoolCidrsCommand
 */
export const se_GetAssociatedIpv6PoolCidrsCommand = async (
  input: GetAssociatedIpv6PoolCidrsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetAssociatedIpv6PoolCidrsRequest(input, context),
    Action: "GetAssociatedIpv6PoolCidrs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetAwsNetworkPerformanceDataCommand
 */
export const se_GetAwsNetworkPerformanceDataCommand = async (
  input: GetAwsNetworkPerformanceDataCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetAwsNetworkPerformanceDataRequest(input, context),
    Action: "GetAwsNetworkPerformanceData",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetCapacityReservationUsageCommand
 */
export const se_GetCapacityReservationUsageCommand = async (
  input: GetCapacityReservationUsageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetCapacityReservationUsageRequest(input, context),
    Action: "GetCapacityReservationUsage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetCoipPoolUsageCommand
 */
export const se_GetCoipPoolUsageCommand = async (
  input: GetCoipPoolUsageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetCoipPoolUsageRequest(input, context),
    Action: "GetCoipPoolUsage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetConsoleOutputCommand
 */
export const se_GetConsoleOutputCommand = async (
  input: GetConsoleOutputCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetConsoleOutputRequest(input, context),
    Action: "GetConsoleOutput",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetConsoleScreenshotCommand
 */
export const se_GetConsoleScreenshotCommand = async (
  input: GetConsoleScreenshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetConsoleScreenshotRequest(input, context),
    Action: "GetConsoleScreenshot",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetDefaultCreditSpecificationCommand
 */
export const se_GetDefaultCreditSpecificationCommand = async (
  input: GetDefaultCreditSpecificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetDefaultCreditSpecificationRequest(input, context),
    Action: "GetDefaultCreditSpecification",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetEbsDefaultKmsKeyIdCommand
 */
export const se_GetEbsDefaultKmsKeyIdCommand = async (
  input: GetEbsDefaultKmsKeyIdCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetEbsDefaultKmsKeyIdRequest(input, context),
    Action: "GetEbsDefaultKmsKeyId",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetEbsEncryptionByDefaultCommand
 */
export const se_GetEbsEncryptionByDefaultCommand = async (
  input: GetEbsEncryptionByDefaultCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetEbsEncryptionByDefaultRequest(input, context),
    Action: "GetEbsEncryptionByDefault",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetFlowLogsIntegrationTemplateCommand
 */
export const se_GetFlowLogsIntegrationTemplateCommand = async (
  input: GetFlowLogsIntegrationTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetFlowLogsIntegrationTemplateRequest(input, context),
    Action: "GetFlowLogsIntegrationTemplate",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetGroupsForCapacityReservationCommand
 */
export const se_GetGroupsForCapacityReservationCommand = async (
  input: GetGroupsForCapacityReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetGroupsForCapacityReservationRequest(input, context),
    Action: "GetGroupsForCapacityReservation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetHostReservationPurchasePreviewCommand
 */
export const se_GetHostReservationPurchasePreviewCommand = async (
  input: GetHostReservationPurchasePreviewCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetHostReservationPurchasePreviewRequest(input, context),
    Action: "GetHostReservationPurchasePreview",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetImageBlockPublicAccessStateCommand
 */
export const se_GetImageBlockPublicAccessStateCommand = async (
  input: GetImageBlockPublicAccessStateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetImageBlockPublicAccessStateRequest(input, context),
    Action: "GetImageBlockPublicAccessState",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand
 */
export const se_GetInstanceTypesFromInstanceRequirementsCommand = async (
  input: GetInstanceTypesFromInstanceRequirementsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetInstanceTypesFromInstanceRequirementsRequest(input, context),
    Action: "GetInstanceTypesFromInstanceRequirements",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetInstanceUefiDataCommand
 */
export const se_GetInstanceUefiDataCommand = async (
  input: GetInstanceUefiDataCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetInstanceUefiDataRequest(input, context),
    Action: "GetInstanceUefiData",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetIpamAddressHistoryCommand
 */
export const se_GetIpamAddressHistoryCommand = async (
  input: GetIpamAddressHistoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetIpamAddressHistoryRequest(input, context),
    Action: "GetIpamAddressHistory",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetIpamDiscoveredAccountsCommand
 */
export const se_GetIpamDiscoveredAccountsCommand = async (
  input: GetIpamDiscoveredAccountsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetIpamDiscoveredAccountsRequest(input, context),
    Action: "GetIpamDiscoveredAccounts",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetIpamDiscoveredResourceCidrsCommand
 */
export const se_GetIpamDiscoveredResourceCidrsCommand = async (
  input: GetIpamDiscoveredResourceCidrsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetIpamDiscoveredResourceCidrsRequest(input, context),
    Action: "GetIpamDiscoveredResourceCidrs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetIpamPoolAllocationsCommand
 */
export const se_GetIpamPoolAllocationsCommand = async (
  input: GetIpamPoolAllocationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetIpamPoolAllocationsRequest(input, context),
    Action: "GetIpamPoolAllocations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetIpamPoolCidrsCommand
 */
export const se_GetIpamPoolCidrsCommand = async (
  input: GetIpamPoolCidrsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetIpamPoolCidrsRequest(input, context),
    Action: "GetIpamPoolCidrs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetIpamResourceCidrsCommand
 */
export const se_GetIpamResourceCidrsCommand = async (
  input: GetIpamResourceCidrsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetIpamResourceCidrsRequest(input, context),
    Action: "GetIpamResourceCidrs",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetLaunchTemplateDataCommand
 */
export const se_GetLaunchTemplateDataCommand = async (
  input: GetLaunchTemplateDataCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetLaunchTemplateDataRequest(input, context),
    Action: "GetLaunchTemplateData",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetManagedPrefixListAssociationsCommand
 */
export const se_GetManagedPrefixListAssociationsCommand = async (
  input: GetManagedPrefixListAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetManagedPrefixListAssociationsRequest(input, context),
    Action: "GetManagedPrefixListAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetManagedPrefixListEntriesCommand
 */
export const se_GetManagedPrefixListEntriesCommand = async (
  input: GetManagedPrefixListEntriesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetManagedPrefixListEntriesRequest(input, context),
    Action: "GetManagedPrefixListEntries",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand
 */
export const se_GetNetworkInsightsAccessScopeAnalysisFindingsCommand = async (
  input: GetNetworkInsightsAccessScopeAnalysisFindingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetNetworkInsightsAccessScopeAnalysisFindingsRequest(input, context),
    Action: "GetNetworkInsightsAccessScopeAnalysisFindings",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetNetworkInsightsAccessScopeContentCommand
 */
export const se_GetNetworkInsightsAccessScopeContentCommand = async (
  input: GetNetworkInsightsAccessScopeContentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetNetworkInsightsAccessScopeContentRequest(input, context),
    Action: "GetNetworkInsightsAccessScopeContent",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetPasswordDataCommand
 */
export const se_GetPasswordDataCommand = async (
  input: GetPasswordDataCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetPasswordDataRequest(input, context),
    Action: "GetPasswordData",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetReservedInstancesExchangeQuoteCommand
 */
export const se_GetReservedInstancesExchangeQuoteCommand = async (
  input: GetReservedInstancesExchangeQuoteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetReservedInstancesExchangeQuoteRequest(input, context),
    Action: "GetReservedInstancesExchangeQuote",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetSerialConsoleAccessStatusCommand
 */
export const se_GetSerialConsoleAccessStatusCommand = async (
  input: GetSerialConsoleAccessStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetSerialConsoleAccessStatusRequest(input, context),
    Action: "GetSerialConsoleAccessStatus",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetSpotPlacementScoresCommand
 */
export const se_GetSpotPlacementScoresCommand = async (
  input: GetSpotPlacementScoresCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetSpotPlacementScoresRequest(input, context),
    Action: "GetSpotPlacementScores",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetSubnetCidrReservationsCommand
 */
export const se_GetSubnetCidrReservationsCommand = async (
  input: GetSubnetCidrReservationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetSubnetCidrReservationsRequest(input, context),
    Action: "GetSubnetCidrReservations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand
 */
export const se_GetTransitGatewayAttachmentPropagationsCommand = async (
  input: GetTransitGatewayAttachmentPropagationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayAttachmentPropagationsRequest(input, context),
    Action: "GetTransitGatewayAttachmentPropagations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand
 */
export const se_GetTransitGatewayMulticastDomainAssociationsCommand = async (
  input: GetTransitGatewayMulticastDomainAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayMulticastDomainAssociationsRequest(input, context),
    Action: "GetTransitGatewayMulticastDomainAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayPolicyTableAssociationsCommand
 */
export const se_GetTransitGatewayPolicyTableAssociationsCommand = async (
  input: GetTransitGatewayPolicyTableAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayPolicyTableAssociationsRequest(input, context),
    Action: "GetTransitGatewayPolicyTableAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayPolicyTableEntriesCommand
 */
export const se_GetTransitGatewayPolicyTableEntriesCommand = async (
  input: GetTransitGatewayPolicyTableEntriesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayPolicyTableEntriesRequest(input, context),
    Action: "GetTransitGatewayPolicyTableEntries",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayPrefixListReferencesCommand
 */
export const se_GetTransitGatewayPrefixListReferencesCommand = async (
  input: GetTransitGatewayPrefixListReferencesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayPrefixListReferencesRequest(input, context),
    Action: "GetTransitGatewayPrefixListReferences",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand
 */
export const se_GetTransitGatewayRouteTableAssociationsCommand = async (
  input: GetTransitGatewayRouteTableAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayRouteTableAssociationsRequest(input, context),
    Action: "GetTransitGatewayRouteTableAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand
 */
export const se_GetTransitGatewayRouteTablePropagationsCommand = async (
  input: GetTransitGatewayRouteTablePropagationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayRouteTablePropagationsRequest(input, context),
    Action: "GetTransitGatewayRouteTablePropagations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetVerifiedAccessEndpointPolicyCommand
 */
export const se_GetVerifiedAccessEndpointPolicyCommand = async (
  input: GetVerifiedAccessEndpointPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetVerifiedAccessEndpointPolicyRequest(input, context),
    Action: "GetVerifiedAccessEndpointPolicy",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetVerifiedAccessGroupPolicyCommand
 */
export const se_GetVerifiedAccessGroupPolicyCommand = async (
  input: GetVerifiedAccessGroupPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetVerifiedAccessGroupPolicyRequest(input, context),
    Action: "GetVerifiedAccessGroupPolicy",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand
 */
export const se_GetVpnConnectionDeviceSampleConfigurationCommand = async (
  input: GetVpnConnectionDeviceSampleConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetVpnConnectionDeviceSampleConfigurationRequest(input, context),
    Action: "GetVpnConnectionDeviceSampleConfiguration",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetVpnConnectionDeviceTypesCommand
 */
export const se_GetVpnConnectionDeviceTypesCommand = async (
  input: GetVpnConnectionDeviceTypesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetVpnConnectionDeviceTypesRequest(input, context),
    Action: "GetVpnConnectionDeviceTypes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetVpnTunnelReplacementStatusCommand
 */
export const se_GetVpnTunnelReplacementStatusCommand = async (
  input: GetVpnTunnelReplacementStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetVpnTunnelReplacementStatusRequest(input, context),
    Action: "GetVpnTunnelReplacementStatus",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand
 */
export const se_ImportClientVpnClientCertificateRevocationListCommand = async (
  input: ImportClientVpnClientCertificateRevocationListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ImportClientVpnClientCertificateRevocationListRequest(input, context),
    Action: "ImportClientVpnClientCertificateRevocationList",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ImportImageCommand
 */
export const se_ImportImageCommand = async (
  input: ImportImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ImportImageRequest(input, context),
    Action: "ImportImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ImportInstanceCommand
 */
export const se_ImportInstanceCommand = async (
  input: ImportInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ImportInstanceRequest(input, context),
    Action: "ImportInstance",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ImportKeyPairCommand
 */
export const se_ImportKeyPairCommand = async (
  input: ImportKeyPairCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ImportKeyPairRequest(input, context),
    Action: "ImportKeyPair",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ImportSnapshotCommand
 */
export const se_ImportSnapshotCommand = async (
  input: ImportSnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ImportSnapshotRequest(input, context),
    Action: "ImportSnapshot",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ImportVolumeCommand
 */
export const se_ImportVolumeCommand = async (
  input: ImportVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ImportVolumeRequest(input, context),
    Action: "ImportVolume",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ListImagesInRecycleBinCommand
 */
export const se_ListImagesInRecycleBinCommand = async (
  input: ListImagesInRecycleBinCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ListImagesInRecycleBinRequest(input, context),
    Action: "ListImagesInRecycleBin",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ListSnapshotsInRecycleBinCommand
 */
export const se_ListSnapshotsInRecycleBinCommand = async (
  input: ListSnapshotsInRecycleBinCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ListSnapshotsInRecycleBinRequest(input, context),
    Action: "ListSnapshotsInRecycleBin",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyAddressAttributeCommand
 */
export const se_ModifyAddressAttributeCommand = async (
  input: ModifyAddressAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyAddressAttributeRequest(input, context),
    Action: "ModifyAddressAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyAvailabilityZoneGroupCommand
 */
export const se_ModifyAvailabilityZoneGroupCommand = async (
  input: ModifyAvailabilityZoneGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyAvailabilityZoneGroupRequest(input, context),
    Action: "ModifyAvailabilityZoneGroup",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyCapacityReservationCommand
 */
export const se_ModifyCapacityReservationCommand = async (
  input: ModifyCapacityReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyCapacityReservationRequest(input, context),
    Action: "ModifyCapacityReservation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyCapacityReservationFleetCommand
 */
export const se_ModifyCapacityReservationFleetCommand = async (
  input: ModifyCapacityReservationFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyCapacityReservationFleetRequest(input, context),
    Action: "ModifyCapacityReservationFleet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyClientVpnEndpointCommand
 */
export const se_ModifyClientVpnEndpointCommand = async (
  input: ModifyClientVpnEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyClientVpnEndpointRequest(input, context),
    Action: "ModifyClientVpnEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyDefaultCreditSpecificationCommand
 */
export const se_ModifyDefaultCreditSpecificationCommand = async (
  input: ModifyDefaultCreditSpecificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyDefaultCreditSpecificationRequest(input, context),
    Action: "ModifyDefaultCreditSpecification",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand
 */
export const se_ModifyEbsDefaultKmsKeyIdCommand = async (
  input: ModifyEbsDefaultKmsKeyIdCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyEbsDefaultKmsKeyIdRequest(input, context),
    Action: "ModifyEbsDefaultKmsKeyId",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyFleetCommand
 */
export const se_ModifyFleetCommand = async (
  input: ModifyFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyFleetRequest(input, context),
    Action: "ModifyFleet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyFpgaImageAttributeCommand
 */
export const se_ModifyFpgaImageAttributeCommand = async (
  input: ModifyFpgaImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyFpgaImageAttributeRequest(input, context),
    Action: "ModifyFpgaImageAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyHostsCommand
 */
export const se_ModifyHostsCommand = async (
  input: ModifyHostsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyHostsRequest(input, context),
    Action: "ModifyHosts",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIdentityIdFormatCommand
 */
export const se_ModifyIdentityIdFormatCommand = async (
  input: ModifyIdentityIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIdentityIdFormatRequest(input, context),
    Action: "ModifyIdentityIdFormat",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIdFormatCommand
 */
export const se_ModifyIdFormatCommand = async (
  input: ModifyIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIdFormatRequest(input, context),
    Action: "ModifyIdFormat",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyImageAttributeCommand
 */
export const se_ModifyImageAttributeCommand = async (
  input: ModifyImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyImageAttributeRequest(input, context),
    Action: "ModifyImageAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceAttributeCommand
 */
export const se_ModifyInstanceAttributeCommand = async (
  input: ModifyInstanceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceAttributeRequest(input, context),
    Action: "ModifyInstanceAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand
 */
export const se_ModifyInstanceCapacityReservationAttributesCommand = async (
  input: ModifyInstanceCapacityReservationAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceCapacityReservationAttributesRequest(input, context),
    Action: "ModifyInstanceCapacityReservationAttributes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceCreditSpecificationCommand
 */
export const se_ModifyInstanceCreditSpecificationCommand = async (
  input: ModifyInstanceCreditSpecificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceCreditSpecificationRequest(input, context),
    Action: "ModifyInstanceCreditSpecification",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceEventStartTimeCommand
 */
export const se_ModifyInstanceEventStartTimeCommand = async (
  input: ModifyInstanceEventStartTimeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceEventStartTimeRequest(input, context),
    Action: "ModifyInstanceEventStartTime",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceEventWindowCommand
 */
export const se_ModifyInstanceEventWindowCommand = async (
  input: ModifyInstanceEventWindowCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceEventWindowRequest(input, context),
    Action: "ModifyInstanceEventWindow",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceMaintenanceOptionsCommand
 */
export const se_ModifyInstanceMaintenanceOptionsCommand = async (
  input: ModifyInstanceMaintenanceOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceMaintenanceOptionsRequest(input, context),
    Action: "ModifyInstanceMaintenanceOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceMetadataOptionsCommand
 */
export const se_ModifyInstanceMetadataOptionsCommand = async (
  input: ModifyInstanceMetadataOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceMetadataOptionsRequest(input, context),
    Action: "ModifyInstanceMetadataOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstancePlacementCommand
 */
export const se_ModifyInstancePlacementCommand = async (
  input: ModifyInstancePlacementCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstancePlacementRequest(input, context),
    Action: "ModifyInstancePlacement",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIpamCommand
 */
export const se_ModifyIpamCommand = async (
  input: ModifyIpamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamRequest(input, context),
    Action: "ModifyIpam",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIpamPoolCommand
 */
export const se_ModifyIpamPoolCommand = async (
  input: ModifyIpamPoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamPoolRequest(input, context),
    Action: "ModifyIpamPool",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIpamResourceCidrCommand
 */
export const se_ModifyIpamResourceCidrCommand = async (
  input: ModifyIpamResourceCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamResourceCidrRequest(input, context),
    Action: "ModifyIpamResourceCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIpamResourceDiscoveryCommand
 */
export const se_ModifyIpamResourceDiscoveryCommand = async (
  input: ModifyIpamResourceDiscoveryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamResourceDiscoveryRequest(input, context),
    Action: "ModifyIpamResourceDiscovery",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIpamScopeCommand
 */
export const se_ModifyIpamScopeCommand = async (
  input: ModifyIpamScopeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamScopeRequest(input, context),
    Action: "ModifyIpamScope",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyLaunchTemplateCommand
 */
export const se_ModifyLaunchTemplateCommand = async (
  input: ModifyLaunchTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyLaunchTemplateRequest(input, context),
    Action: "ModifyLaunchTemplate",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyLocalGatewayRouteCommand
 */
export const se_ModifyLocalGatewayRouteCommand = async (
  input: ModifyLocalGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyLocalGatewayRouteRequest(input, context),
    Action: "ModifyLocalGatewayRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyManagedPrefixListCommand
 */
export const se_ModifyManagedPrefixListCommand = async (
  input: ModifyManagedPrefixListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyManagedPrefixListRequest(input, context),
    Action: "ModifyManagedPrefixList",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyNetworkInterfaceAttributeCommand
 */
export const se_ModifyNetworkInterfaceAttributeCommand = async (
  input: ModifyNetworkInterfaceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyNetworkInterfaceAttributeRequest(input, context),
    Action: "ModifyNetworkInterfaceAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyPrivateDnsNameOptionsCommand
 */
export const se_ModifyPrivateDnsNameOptionsCommand = async (
  input: ModifyPrivateDnsNameOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyPrivateDnsNameOptionsRequest(input, context),
    Action: "ModifyPrivateDnsNameOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyReservedInstancesCommand
 */
export const se_ModifyReservedInstancesCommand = async (
  input: ModifyReservedInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyReservedInstancesRequest(input, context),
    Action: "ModifyReservedInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifySecurityGroupRulesCommand
 */
export const se_ModifySecurityGroupRulesCommand = async (
  input: ModifySecurityGroupRulesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifySecurityGroupRulesRequest(input, context),
    Action: "ModifySecurityGroupRules",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifySnapshotAttributeCommand
 */
export const se_ModifySnapshotAttributeCommand = async (
  input: ModifySnapshotAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifySnapshotAttributeRequest(input, context),
    Action: "ModifySnapshotAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifySnapshotTierCommand
 */
export const se_ModifySnapshotTierCommand = async (
  input: ModifySnapshotTierCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifySnapshotTierRequest(input, context),
    Action: "ModifySnapshotTier",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifySpotFleetRequestCommand
 */
export const se_ModifySpotFleetRequestCommand = async (
  input: ModifySpotFleetRequestCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifySpotFleetRequestRequest(input, context),
    Action: "ModifySpotFleetRequest",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifySubnetAttributeCommand
 */
export const se_ModifySubnetAttributeCommand = async (
  input: ModifySubnetAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifySubnetAttributeRequest(input, context),
    Action: "ModifySubnetAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand
 */
export const se_ModifyTrafficMirrorFilterNetworkServicesCommand = async (
  input: ModifyTrafficMirrorFilterNetworkServicesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyTrafficMirrorFilterNetworkServicesRequest(input, context),
    Action: "ModifyTrafficMirrorFilterNetworkServices",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyTrafficMirrorFilterRuleCommand
 */
export const se_ModifyTrafficMirrorFilterRuleCommand = async (
  input: ModifyTrafficMirrorFilterRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyTrafficMirrorFilterRuleRequest(input, context),
    Action: "ModifyTrafficMirrorFilterRule",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyTrafficMirrorSessionCommand
 */
export const se_ModifyTrafficMirrorSessionCommand = async (
  input: ModifyTrafficMirrorSessionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyTrafficMirrorSessionRequest(input, context),
    Action: "ModifyTrafficMirrorSession",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyTransitGatewayCommand
 */
export const se_ModifyTransitGatewayCommand = async (
  input: ModifyTransitGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyTransitGatewayRequest(input, context),
    Action: "ModifyTransitGateway",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand
 */
export const se_ModifyTransitGatewayPrefixListReferenceCommand = async (
  input: ModifyTransitGatewayPrefixListReferenceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyTransitGatewayPrefixListReferenceRequest(input, context),
    Action: "ModifyTransitGatewayPrefixListReference",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand
 */
export const se_ModifyTransitGatewayVpcAttachmentCommand = async (
  input: ModifyTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyTransitGatewayVpcAttachmentRequest(input, context),
    Action: "ModifyTransitGatewayVpcAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointCommand
 */
export const se_ModifyVerifiedAccessEndpointCommand = async (
  input: ModifyVerifiedAccessEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessEndpointRequest(input, context),
    Action: "ModifyVerifiedAccessEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointPolicyCommand
 */
export const se_ModifyVerifiedAccessEndpointPolicyCommand = async (
  input: ModifyVerifiedAccessEndpointPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessEndpointPolicyRequest(input, context),
    Action: "ModifyVerifiedAccessEndpointPolicy",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessGroupCommand
 */
export const se_ModifyVerifiedAccessGroupCommand = async (
  input: ModifyVerifiedAccessGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessGroupRequest(input, context),
    Action: "ModifyVerifiedAccessGroup",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessGroupPolicyCommand
 */
export const se_ModifyVerifiedAccessGroupPolicyCommand = async (
  input: ModifyVerifiedAccessGroupPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessGroupPolicyRequest(input, context),
    Action: "ModifyVerifiedAccessGroupPolicy",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessInstanceCommand
 */
export const se_ModifyVerifiedAccessInstanceCommand = async (
  input: ModifyVerifiedAccessInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessInstanceRequest(input, context),
    Action: "ModifyVerifiedAccessInstance",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessInstanceLoggingConfigurationCommand
 */
export const se_ModifyVerifiedAccessInstanceLoggingConfigurationCommand = async (
  input: ModifyVerifiedAccessInstanceLoggingConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessInstanceLoggingConfigurationRequest(input, context),
    Action: "ModifyVerifiedAccessInstanceLoggingConfiguration",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessTrustProviderCommand
 */
export const se_ModifyVerifiedAccessTrustProviderCommand = async (
  input: ModifyVerifiedAccessTrustProviderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessTrustProviderRequest(input, context),
    Action: "ModifyVerifiedAccessTrustProvider",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVolumeCommand
 */
export const se_ModifyVolumeCommand = async (
  input: ModifyVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVolumeRequest(input, context),
    Action: "ModifyVolume",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVolumeAttributeCommand
 */
export const se_ModifyVolumeAttributeCommand = async (
  input: ModifyVolumeAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVolumeAttributeRequest(input, context),
    Action: "ModifyVolumeAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcAttributeCommand
 */
export const se_ModifyVpcAttributeCommand = async (
  input: ModifyVpcAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcAttributeRequest(input, context),
    Action: "ModifyVpcAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcEndpointCommand
 */
export const se_ModifyVpcEndpointCommand = async (
  input: ModifyVpcEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointRequest(input, context),
    Action: "ModifyVpcEndpoint",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand
 */
export const se_ModifyVpcEndpointConnectionNotificationCommand = async (
  input: ModifyVpcEndpointConnectionNotificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointConnectionNotificationRequest(input, context),
    Action: "ModifyVpcEndpointConnectionNotification",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand
 */
export const se_ModifyVpcEndpointServiceConfigurationCommand = async (
  input: ModifyVpcEndpointServiceConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointServiceConfigurationRequest(input, context),
    Action: "ModifyVpcEndpointServiceConfiguration",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand
 */
export const se_ModifyVpcEndpointServicePayerResponsibilityCommand = async (
  input: ModifyVpcEndpointServicePayerResponsibilityCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointServicePayerResponsibilityRequest(input, context),
    Action: "ModifyVpcEndpointServicePayerResponsibility",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcEndpointServicePermissionsCommand
 */
export const se_ModifyVpcEndpointServicePermissionsCommand = async (
  input: ModifyVpcEndpointServicePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointServicePermissionsRequest(input, context),
    Action: "ModifyVpcEndpointServicePermissions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand
 */
export const se_ModifyVpcPeeringConnectionOptionsCommand = async (
  input: ModifyVpcPeeringConnectionOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcPeeringConnectionOptionsRequest(input, context),
    Action: "ModifyVpcPeeringConnectionOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcTenancyCommand
 */
export const se_ModifyVpcTenancyCommand = async (
  input: ModifyVpcTenancyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcTenancyRequest(input, context),
    Action: "ModifyVpcTenancy",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpnConnectionCommand
 */
export const se_ModifyVpnConnectionCommand = async (
  input: ModifyVpnConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpnConnectionRequest(input, context),
    Action: "ModifyVpnConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpnConnectionOptionsCommand
 */
export const se_ModifyVpnConnectionOptionsCommand = async (
  input: ModifyVpnConnectionOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpnConnectionOptionsRequest(input, context),
    Action: "ModifyVpnConnectionOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpnTunnelCertificateCommand
 */
export const se_ModifyVpnTunnelCertificateCommand = async (
  input: ModifyVpnTunnelCertificateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpnTunnelCertificateRequest(input, context),
    Action: "ModifyVpnTunnelCertificate",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpnTunnelOptionsCommand
 */
export const se_ModifyVpnTunnelOptionsCommand = async (
  input: ModifyVpnTunnelOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpnTunnelOptionsRequest(input, context),
    Action: "ModifyVpnTunnelOptions",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2MonitorInstancesCommand
 */
export const se_MonitorInstancesCommand = async (
  input: MonitorInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_MonitorInstancesRequest(input, context),
    Action: "MonitorInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2MoveAddressToVpcCommand
 */
export const se_MoveAddressToVpcCommand = async (
  input: MoveAddressToVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_MoveAddressToVpcRequest(input, context),
    Action: "MoveAddressToVpc",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2MoveByoipCidrToIpamCommand
 */
export const se_MoveByoipCidrToIpamCommand = async (
  input: MoveByoipCidrToIpamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_MoveByoipCidrToIpamRequest(input, context),
    Action: "MoveByoipCidrToIpam",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ProvisionByoipCidrCommand
 */
export const se_ProvisionByoipCidrCommand = async (
  input: ProvisionByoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ProvisionByoipCidrRequest(input, context),
    Action: "ProvisionByoipCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ProvisionIpamPoolCidrCommand
 */
export const se_ProvisionIpamPoolCidrCommand = async (
  input: ProvisionIpamPoolCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ProvisionIpamPoolCidrRequest(input, context),
    Action: "ProvisionIpamPoolCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ProvisionPublicIpv4PoolCidrCommand
 */
export const se_ProvisionPublicIpv4PoolCidrCommand = async (
  input: ProvisionPublicIpv4PoolCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ProvisionPublicIpv4PoolCidrRequest(input, context),
    Action: "ProvisionPublicIpv4PoolCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2PurchaseHostReservationCommand
 */
export const se_PurchaseHostReservationCommand = async (
  input: PurchaseHostReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_PurchaseHostReservationRequest(input, context),
    Action: "PurchaseHostReservation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2PurchaseReservedInstancesOfferingCommand
 */
export const se_PurchaseReservedInstancesOfferingCommand = async (
  input: PurchaseReservedInstancesOfferingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_PurchaseReservedInstancesOfferingRequest(input, context),
    Action: "PurchaseReservedInstancesOffering",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2PurchaseScheduledInstancesCommand
 */
export const se_PurchaseScheduledInstancesCommand = async (
  input: PurchaseScheduledInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_PurchaseScheduledInstancesRequest(input, context),
    Action: "PurchaseScheduledInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RebootInstancesCommand
 */
export const se_RebootInstancesCommand = async (
  input: RebootInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RebootInstancesRequest(input, context),
    Action: "RebootInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RegisterImageCommand
 */
export const se_RegisterImageCommand = async (
  input: RegisterImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RegisterImageRequest(input, context),
    Action: "RegisterImage",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RegisterInstanceEventNotificationAttributesCommand
 */
export const se_RegisterInstanceEventNotificationAttributesCommand = async (
  input: RegisterInstanceEventNotificationAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RegisterInstanceEventNotificationAttributesRequest(input, context),
    Action: "RegisterInstanceEventNotificationAttributes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand
 */
export const se_RegisterTransitGatewayMulticastGroupMembersCommand = async (
  input: RegisterTransitGatewayMulticastGroupMembersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RegisterTransitGatewayMulticastGroupMembersRequest(input, context),
    Action: "RegisterTransitGatewayMulticastGroupMembers",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand
 */
export const se_RegisterTransitGatewayMulticastGroupSourcesCommand = async (
  input: RegisterTransitGatewayMulticastGroupSourcesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RegisterTransitGatewayMulticastGroupSourcesRequest(input, context),
    Action: "RegisterTransitGatewayMulticastGroupSources",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand
 */
export const se_RejectTransitGatewayMulticastDomainAssociationsCommand = async (
  input: RejectTransitGatewayMulticastDomainAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RejectTransitGatewayMulticastDomainAssociationsRequest(input, context),
    Action: "RejectTransitGatewayMulticastDomainAssociations",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand
 */
export const se_RejectTransitGatewayPeeringAttachmentCommand = async (
  input: RejectTransitGatewayPeeringAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RejectTransitGatewayPeeringAttachmentRequest(input, context),
    Action: "RejectTransitGatewayPeeringAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RejectTransitGatewayVpcAttachmentCommand
 */
export const se_RejectTransitGatewayVpcAttachmentCommand = async (
  input: RejectTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RejectTransitGatewayVpcAttachmentRequest(input, context),
    Action: "RejectTransitGatewayVpcAttachment",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RejectVpcEndpointConnectionsCommand
 */
export const se_RejectVpcEndpointConnectionsCommand = async (
  input: RejectVpcEndpointConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RejectVpcEndpointConnectionsRequest(input, context),
    Action: "RejectVpcEndpointConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RejectVpcPeeringConnectionCommand
 */
export const se_RejectVpcPeeringConnectionCommand = async (
  input: RejectVpcPeeringConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RejectVpcPeeringConnectionRequest(input, context),
    Action: "RejectVpcPeeringConnection",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReleaseAddressCommand
 */
export const se_ReleaseAddressCommand = async (
  input: ReleaseAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReleaseAddressRequest(input, context),
    Action: "ReleaseAddress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReleaseHostsCommand
 */
export const se_ReleaseHostsCommand = async (
  input: ReleaseHostsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReleaseHostsRequest(input, context),
    Action: "ReleaseHosts",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReleaseIpamPoolAllocationCommand
 */
export const se_ReleaseIpamPoolAllocationCommand = async (
  input: ReleaseIpamPoolAllocationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReleaseIpamPoolAllocationRequest(input, context),
    Action: "ReleaseIpamPoolAllocation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceIamInstanceProfileAssociationCommand
 */
export const se_ReplaceIamInstanceProfileAssociationCommand = async (
  input: ReplaceIamInstanceProfileAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceIamInstanceProfileAssociationRequest(input, context),
    Action: "ReplaceIamInstanceProfileAssociation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceNetworkAclAssociationCommand
 */
export const se_ReplaceNetworkAclAssociationCommand = async (
  input: ReplaceNetworkAclAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceNetworkAclAssociationRequest(input, context),
    Action: "ReplaceNetworkAclAssociation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceNetworkAclEntryCommand
 */
export const se_ReplaceNetworkAclEntryCommand = async (
  input: ReplaceNetworkAclEntryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceNetworkAclEntryRequest(input, context),
    Action: "ReplaceNetworkAclEntry",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceRouteCommand
 */
export const se_ReplaceRouteCommand = async (
  input: ReplaceRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceRouteRequest(input, context),
    Action: "ReplaceRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceRouteTableAssociationCommand
 */
export const se_ReplaceRouteTableAssociationCommand = async (
  input: ReplaceRouteTableAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceRouteTableAssociationRequest(input, context),
    Action: "ReplaceRouteTableAssociation",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceTransitGatewayRouteCommand
 */
export const se_ReplaceTransitGatewayRouteCommand = async (
  input: ReplaceTransitGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceTransitGatewayRouteRequest(input, context),
    Action: "ReplaceTransitGatewayRoute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceVpnTunnelCommand
 */
export const se_ReplaceVpnTunnelCommand = async (
  input: ReplaceVpnTunnelCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceVpnTunnelRequest(input, context),
    Action: "ReplaceVpnTunnel",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReportInstanceStatusCommand
 */
export const se_ReportInstanceStatusCommand = async (
  input: ReportInstanceStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReportInstanceStatusRequest(input, context),
    Action: "ReportInstanceStatus",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RequestSpotFleetCommand
 */
export const se_RequestSpotFleetCommand = async (
  input: RequestSpotFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RequestSpotFleetRequest(input, context),
    Action: "RequestSpotFleet",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RequestSpotInstancesCommand
 */
export const se_RequestSpotInstancesCommand = async (
  input: RequestSpotInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RequestSpotInstancesRequest(input, context),
    Action: "RequestSpotInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetAddressAttributeCommand
 */
export const se_ResetAddressAttributeCommand = async (
  input: ResetAddressAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetAddressAttributeRequest(input, context),
    Action: "ResetAddressAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetEbsDefaultKmsKeyIdCommand
 */
export const se_ResetEbsDefaultKmsKeyIdCommand = async (
  input: ResetEbsDefaultKmsKeyIdCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetEbsDefaultKmsKeyIdRequest(input, context),
    Action: "ResetEbsDefaultKmsKeyId",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetFpgaImageAttributeCommand
 */
export const se_ResetFpgaImageAttributeCommand = async (
  input: ResetFpgaImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetFpgaImageAttributeRequest(input, context),
    Action: "ResetFpgaImageAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetImageAttributeCommand
 */
export const se_ResetImageAttributeCommand = async (
  input: ResetImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetImageAttributeRequest(input, context),
    Action: "ResetImageAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetInstanceAttributeCommand
 */
export const se_ResetInstanceAttributeCommand = async (
  input: ResetInstanceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetInstanceAttributeRequest(input, context),
    Action: "ResetInstanceAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetNetworkInterfaceAttributeCommand
 */
export const se_ResetNetworkInterfaceAttributeCommand = async (
  input: ResetNetworkInterfaceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetNetworkInterfaceAttributeRequest(input, context),
    Action: "ResetNetworkInterfaceAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetSnapshotAttributeCommand
 */
export const se_ResetSnapshotAttributeCommand = async (
  input: ResetSnapshotAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetSnapshotAttributeRequest(input, context),
    Action: "ResetSnapshotAttribute",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RestoreAddressToClassicCommand
 */
export const se_RestoreAddressToClassicCommand = async (
  input: RestoreAddressToClassicCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RestoreAddressToClassicRequest(input, context),
    Action: "RestoreAddressToClassic",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RestoreImageFromRecycleBinCommand
 */
export const se_RestoreImageFromRecycleBinCommand = async (
  input: RestoreImageFromRecycleBinCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RestoreImageFromRecycleBinRequest(input, context),
    Action: "RestoreImageFromRecycleBin",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RestoreManagedPrefixListVersionCommand
 */
export const se_RestoreManagedPrefixListVersionCommand = async (
  input: RestoreManagedPrefixListVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RestoreManagedPrefixListVersionRequest(input, context),
    Action: "RestoreManagedPrefixListVersion",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RestoreSnapshotFromRecycleBinCommand
 */
export const se_RestoreSnapshotFromRecycleBinCommand = async (
  input: RestoreSnapshotFromRecycleBinCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RestoreSnapshotFromRecycleBinRequest(input, context),
    Action: "RestoreSnapshotFromRecycleBin",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RestoreSnapshotTierCommand
 */
export const se_RestoreSnapshotTierCommand = async (
  input: RestoreSnapshotTierCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RestoreSnapshotTierRequest(input, context),
    Action: "RestoreSnapshotTier",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RevokeClientVpnIngressCommand
 */
export const se_RevokeClientVpnIngressCommand = async (
  input: RevokeClientVpnIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RevokeClientVpnIngressRequest(input, context),
    Action: "RevokeClientVpnIngress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RevokeSecurityGroupEgressCommand
 */
export const se_RevokeSecurityGroupEgressCommand = async (
  input: RevokeSecurityGroupEgressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RevokeSecurityGroupEgressRequest(input, context),
    Action: "RevokeSecurityGroupEgress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RevokeSecurityGroupIngressCommand
 */
export const se_RevokeSecurityGroupIngressCommand = async (
  input: RevokeSecurityGroupIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RevokeSecurityGroupIngressRequest(input, context),
    Action: "RevokeSecurityGroupIngress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RunInstancesCommand
 */
export const se_RunInstancesCommand = async (
  input: RunInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RunInstancesRequest(input, context),
    Action: "RunInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RunScheduledInstancesCommand
 */
export const se_RunScheduledInstancesCommand = async (
  input: RunScheduledInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RunScheduledInstancesRequest(input, context),
    Action: "RunScheduledInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2SearchLocalGatewayRoutesCommand
 */
export const se_SearchLocalGatewayRoutesCommand = async (
  input: SearchLocalGatewayRoutesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_SearchLocalGatewayRoutesRequest(input, context),
    Action: "SearchLocalGatewayRoutes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2SearchTransitGatewayMulticastGroupsCommand
 */
export const se_SearchTransitGatewayMulticastGroupsCommand = async (
  input: SearchTransitGatewayMulticastGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_SearchTransitGatewayMulticastGroupsRequest(input, context),
    Action: "SearchTransitGatewayMulticastGroups",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2SearchTransitGatewayRoutesCommand
 */
export const se_SearchTransitGatewayRoutesCommand = async (
  input: SearchTransitGatewayRoutesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_SearchTransitGatewayRoutesRequest(input, context),
    Action: "SearchTransitGatewayRoutes",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2SendDiagnosticInterruptCommand
 */
export const se_SendDiagnosticInterruptCommand = async (
  input: SendDiagnosticInterruptCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_SendDiagnosticInterruptRequest(input, context),
    Action: "SendDiagnosticInterrupt",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2StartInstancesCommand
 */
export const se_StartInstancesCommand = async (
  input: StartInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_StartInstancesRequest(input, context),
    Action: "StartInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand
 */
export const se_StartNetworkInsightsAccessScopeAnalysisCommand = async (
  input: StartNetworkInsightsAccessScopeAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_StartNetworkInsightsAccessScopeAnalysisRequest(input, context),
    Action: "StartNetworkInsightsAccessScopeAnalysis",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2StartNetworkInsightsAnalysisCommand
 */
export const se_StartNetworkInsightsAnalysisCommand = async (
  input: StartNetworkInsightsAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_StartNetworkInsightsAnalysisRequest(input, context),
    Action: "StartNetworkInsightsAnalysis",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand
 */
export const se_StartVpcEndpointServicePrivateDnsVerificationCommand = async (
  input: StartVpcEndpointServicePrivateDnsVerificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_StartVpcEndpointServicePrivateDnsVerificationRequest(input, context),
    Action: "StartVpcEndpointServicePrivateDnsVerification",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2StopInstancesCommand
 */
export const se_StopInstancesCommand = async (
  input: StopInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_StopInstancesRequest(input, context),
    Action: "StopInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2TerminateClientVpnConnectionsCommand
 */
export const se_TerminateClientVpnConnectionsCommand = async (
  input: TerminateClientVpnConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_TerminateClientVpnConnectionsRequest(input, context),
    Action: "TerminateClientVpnConnections",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2TerminateInstancesCommand
 */
export const se_TerminateInstancesCommand = async (
  input: TerminateInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_TerminateInstancesRequest(input, context),
    Action: "TerminateInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2UnassignIpv6AddressesCommand
 */
export const se_UnassignIpv6AddressesCommand = async (
  input: UnassignIpv6AddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_UnassignIpv6AddressesRequest(input, context),
    Action: "UnassignIpv6Addresses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2UnassignPrivateIpAddressesCommand
 */
export const se_UnassignPrivateIpAddressesCommand = async (
  input: UnassignPrivateIpAddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_UnassignPrivateIpAddressesRequest(input, context),
    Action: "UnassignPrivateIpAddresses",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2UnassignPrivateNatGatewayAddressCommand
 */
export const se_UnassignPrivateNatGatewayAddressCommand = async (
  input: UnassignPrivateNatGatewayAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_UnassignPrivateNatGatewayAddressRequest(input, context),
    Action: "UnassignPrivateNatGatewayAddress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2UnmonitorInstancesCommand
 */
export const se_UnmonitorInstancesCommand = async (
  input: UnmonitorInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_UnmonitorInstancesRequest(input, context),
    Action: "UnmonitorInstances",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand
 */
export const se_UpdateSecurityGroupRuleDescriptionsEgressCommand = async (
  input: UpdateSecurityGroupRuleDescriptionsEgressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_UpdateSecurityGroupRuleDescriptionsEgressRequest(input, context),
    Action: "UpdateSecurityGroupRuleDescriptionsEgress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand
 */
export const se_UpdateSecurityGroupRuleDescriptionsIngressCommand = async (
  input: UpdateSecurityGroupRuleDescriptionsIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_UpdateSecurityGroupRuleDescriptionsIngressRequest(input, context),
    Action: "UpdateSecurityGroupRuleDescriptionsIngress",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2WithdrawByoipCidrCommand
 */
export const se_WithdrawByoipCidrCommand = async (
  input: WithdrawByoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_WithdrawByoipCidrRequest(input, context),
    Action: "WithdrawByoipCidr",
    Version: "2016-11-15",
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * deserializeAws_ec2AcceptAddressTransferCommand
 */
export const de_AcceptAddressTransferCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptAddressTransferCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptAddressTransferCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptAddressTransferResult(data, context);
  const response: AcceptAddressTransferCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptAddressTransferCommandError
 */
const de_AcceptAddressTransferCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptAddressTransferCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand
 */
export const de_AcceptReservedInstancesExchangeQuoteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptReservedInstancesExchangeQuoteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptReservedInstancesExchangeQuoteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptReservedInstancesExchangeQuoteResult(data, context);
  const response: AcceptReservedInstancesExchangeQuoteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommandError
 */
const de_AcceptReservedInstancesExchangeQuoteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptReservedInstancesExchangeQuoteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand
 */
export const de_AcceptTransitGatewayMulticastDomainAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptTransitGatewayMulticastDomainAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptTransitGatewayMulticastDomainAssociationsResult(data, context);
  const response: AcceptTransitGatewayMulticastDomainAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommandError
 */
const de_AcceptTransitGatewayMulticastDomainAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand
 */
export const de_AcceptTransitGatewayPeeringAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayPeeringAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptTransitGatewayPeeringAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptTransitGatewayPeeringAttachmentResult(data, context);
  const response: AcceptTransitGatewayPeeringAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommandError
 */
const de_AcceptTransitGatewayPeeringAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayPeeringAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand
 */
export const de_AcceptTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptTransitGatewayVpcAttachmentResult(data, context);
  const response: AcceptTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommandError
 */
const de_AcceptTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AcceptVpcEndpointConnectionsCommand
 */
export const de_AcceptVpcEndpointConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptVpcEndpointConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptVpcEndpointConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptVpcEndpointConnectionsResult(data, context);
  const response: AcceptVpcEndpointConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptVpcEndpointConnectionsCommandError
 */
const de_AcceptVpcEndpointConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptVpcEndpointConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AcceptVpcPeeringConnectionCommand
 */
export const de_AcceptVpcPeeringConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptVpcPeeringConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptVpcPeeringConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptVpcPeeringConnectionResult(data, context);
  const response: AcceptVpcPeeringConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptVpcPeeringConnectionCommandError
 */
const de_AcceptVpcPeeringConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptVpcPeeringConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AdvertiseByoipCidrCommand
 */
export const de_AdvertiseByoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AdvertiseByoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AdvertiseByoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AdvertiseByoipCidrResult(data, context);
  const response: AdvertiseByoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AdvertiseByoipCidrCommandError
 */
const de_AdvertiseByoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AdvertiseByoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AllocateAddressCommand
 */
export const de_AllocateAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AllocateAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AllocateAddressResult(data, context);
  const response: AllocateAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AllocateAddressCommandError
 */
const de_AllocateAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AllocateHostsCommand
 */
export const de_AllocateHostsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateHostsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AllocateHostsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AllocateHostsResult(data, context);
  const response: AllocateHostsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AllocateHostsCommandError
 */
const de_AllocateHostsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateHostsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AllocateIpamPoolCidrCommand
 */
export const de_AllocateIpamPoolCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateIpamPoolCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AllocateIpamPoolCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AllocateIpamPoolCidrResult(data, context);
  const response: AllocateIpamPoolCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AllocateIpamPoolCidrCommandError
 */
const de_AllocateIpamPoolCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateIpamPoolCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand
 */
export const de_ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ApplySecurityGroupsToClientVpnTargetNetworkCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ApplySecurityGroupsToClientVpnTargetNetworkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ApplySecurityGroupsToClientVpnTargetNetworkResult(data, context);
  const response: ApplySecurityGroupsToClientVpnTargetNetworkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommandError
 */
const de_ApplySecurityGroupsToClientVpnTargetNetworkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ApplySecurityGroupsToClientVpnTargetNetworkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssignIpv6AddressesCommand
 */
export const de_AssignIpv6AddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignIpv6AddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssignIpv6AddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssignIpv6AddressesResult(data, context);
  const response: AssignIpv6AddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssignIpv6AddressesCommandError
 */
const de_AssignIpv6AddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignIpv6AddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssignPrivateIpAddressesCommand
 */
export const de_AssignPrivateIpAddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignPrivateIpAddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssignPrivateIpAddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssignPrivateIpAddressesResult(data, context);
  const response: AssignPrivateIpAddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssignPrivateIpAddressesCommandError
 */
const de_AssignPrivateIpAddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignPrivateIpAddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssignPrivateNatGatewayAddressCommand
 */
export const de_AssignPrivateNatGatewayAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignPrivateNatGatewayAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssignPrivateNatGatewayAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssignPrivateNatGatewayAddressResult(data, context);
  const response: AssignPrivateNatGatewayAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssignPrivateNatGatewayAddressCommandError
 */
const de_AssignPrivateNatGatewayAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignPrivateNatGatewayAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateAddressCommand
 */
export const de_AssociateAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateAddressResult(data, context);
  const response: AssociateAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateAddressCommandError
 */
const de_AssociateAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateClientVpnTargetNetworkCommand
 */
export const de_AssociateClientVpnTargetNetworkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateClientVpnTargetNetworkCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateClientVpnTargetNetworkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateClientVpnTargetNetworkResult(data, context);
  const response: AssociateClientVpnTargetNetworkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateClientVpnTargetNetworkCommandError
 */
const de_AssociateClientVpnTargetNetworkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateClientVpnTargetNetworkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateDhcpOptionsCommand
 */
export const de_AssociateDhcpOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateDhcpOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateDhcpOptionsCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: AssociateDhcpOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateDhcpOptionsCommandError
 */
const de_AssociateDhcpOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateDhcpOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommand
 */
export const de_AssociateEnclaveCertificateIamRoleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateEnclaveCertificateIamRoleCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateEnclaveCertificateIamRoleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateEnclaveCertificateIamRoleResult(data, context);
  const response: AssociateEnclaveCertificateIamRoleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommandError
 */
const de_AssociateEnclaveCertificateIamRoleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateEnclaveCertificateIamRoleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateIamInstanceProfileCommand
 */
export const de_AssociateIamInstanceProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateIamInstanceProfileCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateIamInstanceProfileCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateIamInstanceProfileResult(data, context);
  const response: AssociateIamInstanceProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateIamInstanceProfileCommandError
 */
const de_AssociateIamInstanceProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateIamInstanceProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateInstanceEventWindowCommand
 */
export const de_AssociateInstanceEventWindowCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateInstanceEventWindowCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateInstanceEventWindowCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateInstanceEventWindowResult(data, context);
  const response: AssociateInstanceEventWindowCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateInstanceEventWindowCommandError
 */
const de_AssociateInstanceEventWindowCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateInstanceEventWindowCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateIpamResourceDiscoveryCommand
 */
export const de_AssociateIpamResourceDiscoveryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateIpamResourceDiscoveryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateIpamResourceDiscoveryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateIpamResourceDiscoveryResult(data, context);
  const response: AssociateIpamResourceDiscoveryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateIpamResourceDiscoveryCommandError
 */
const de_AssociateIpamResourceDiscoveryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateIpamResourceDiscoveryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateNatGatewayAddressCommand
 */
export const de_AssociateNatGatewayAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateNatGatewayAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateNatGatewayAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateNatGatewayAddressResult(data, context);
  const response: AssociateNatGatewayAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateNatGatewayAddressCommandError
 */
const de_AssociateNatGatewayAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateNatGatewayAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateRouteTableCommand
 */
export const de_AssociateRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateRouteTableResult(data, context);
  const response: AssociateRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateRouteTableCommandError
 */
const de_AssociateRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateSubnetCidrBlockCommand
 */
export const de_AssociateSubnetCidrBlockCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateSubnetCidrBlockCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateSubnetCidrBlockCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateSubnetCidrBlockResult(data, context);
  const response: AssociateSubnetCidrBlockCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateSubnetCidrBlockCommandError
 */
const de_AssociateSubnetCidrBlockCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateSubnetCidrBlockCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommand
 */
export const de_AssociateTransitGatewayMulticastDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayMulticastDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateTransitGatewayMulticastDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateTransitGatewayMulticastDomainResult(data, context);
  const response: AssociateTransitGatewayMulticastDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommandError
 */
const de_AssociateTransitGatewayMulticastDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayMulticastDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateTransitGatewayPolicyTableCommand
 */
export const de_AssociateTransitGatewayPolicyTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayPolicyTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateTransitGatewayPolicyTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateTransitGatewayPolicyTableResult(data, context);
  const response: AssociateTransitGatewayPolicyTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateTransitGatewayPolicyTableCommandError
 */
const de_AssociateTransitGatewayPolicyTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayPolicyTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateTransitGatewayRouteTableCommand
 */
export const de_AssociateTransitGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateTransitGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateTransitGatewayRouteTableResult(data, context);
  const response: AssociateTransitGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateTransitGatewayRouteTableCommandError
 */
const de_AssociateTransitGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateTrunkInterfaceCommand
 */
export const de_AssociateTrunkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTrunkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateTrunkInterfaceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateTrunkInterfaceResult(data, context);
  const response: AssociateTrunkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateTrunkInterfaceCommandError
 */
const de_AssociateTrunkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTrunkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateVpcCidrBlockCommand
 */
export const de_AssociateVpcCidrBlockCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateVpcCidrBlockCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateVpcCidrBlockCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateVpcCidrBlockResult(data, context);
  const response: AssociateVpcCidrBlockCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateVpcCidrBlockCommandError
 */
const de_AssociateVpcCidrBlockCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateVpcCidrBlockCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AttachClassicLinkVpcCommand
 */
export const de_AttachClassicLinkVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachClassicLinkVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AttachClassicLinkVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AttachClassicLinkVpcResult(data, context);
  const response: AttachClassicLinkVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AttachClassicLinkVpcCommandError
 */
const de_AttachClassicLinkVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachClassicLinkVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AttachInternetGatewayCommand
 */
export const de_AttachInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AttachInternetGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: AttachInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2AttachInternetGatewayCommandError
 */
const de_AttachInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AttachNetworkInterfaceCommand
 */
export const de_AttachNetworkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachNetworkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AttachNetworkInterfaceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AttachNetworkInterfaceResult(data, context);
  const response: AttachNetworkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AttachNetworkInterfaceCommandError
 */
const de_AttachNetworkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachNetworkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AttachVerifiedAccessTrustProviderCommand
 */
export const de_AttachVerifiedAccessTrustProviderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVerifiedAccessTrustProviderCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AttachVerifiedAccessTrustProviderCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AttachVerifiedAccessTrustProviderResult(data, context);
  const response: AttachVerifiedAccessTrustProviderCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AttachVerifiedAccessTrustProviderCommandError
 */
const de_AttachVerifiedAccessTrustProviderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVerifiedAccessTrustProviderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AttachVolumeCommand
 */
export const de_AttachVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AttachVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_VolumeAttachment(data, context);
  const response: AttachVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AttachVolumeCommandError
 */
const de_AttachVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AttachVpnGatewayCommand
 */
export const de_AttachVpnGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVpnGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AttachVpnGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AttachVpnGatewayResult(data, context);
  const response: AttachVpnGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AttachVpnGatewayCommandError
 */
const de_AttachVpnGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVpnGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AuthorizeClientVpnIngressCommand
 */
export const de_AuthorizeClientVpnIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeClientVpnIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AuthorizeClientVpnIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AuthorizeClientVpnIngressResult(data, context);
  const response: AuthorizeClientVpnIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AuthorizeClientVpnIngressCommandError
 */
const de_AuthorizeClientVpnIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeClientVpnIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AuthorizeSecurityGroupEgressCommand
 */
export const de_AuthorizeSecurityGroupEgressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeSecurityGroupEgressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AuthorizeSecurityGroupEgressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AuthorizeSecurityGroupEgressResult(data, context);
  const response: AuthorizeSecurityGroupEgressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AuthorizeSecurityGroupEgressCommandError
 */
const de_AuthorizeSecurityGroupEgressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeSecurityGroupEgressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AuthorizeSecurityGroupIngressCommand
 */
export const de_AuthorizeSecurityGroupIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeSecurityGroupIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AuthorizeSecurityGroupIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AuthorizeSecurityGroupIngressResult(data, context);
  const response: AuthorizeSecurityGroupIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AuthorizeSecurityGroupIngressCommandError
 */
const de_AuthorizeSecurityGroupIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeSecurityGroupIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2BundleInstanceCommand
 */
export const de_BundleInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<BundleInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_BundleInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_BundleInstanceResult(data, context);
  const response: BundleInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2BundleInstanceCommandError
 */
const de_BundleInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<BundleInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelBundleTaskCommand
 */
export const de_CancelBundleTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelBundleTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelBundleTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelBundleTaskResult(data, context);
  const response: CancelBundleTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelBundleTaskCommandError
 */
const de_CancelBundleTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelBundleTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelCapacityReservationCommand
 */
export const de_CancelCapacityReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelCapacityReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelCapacityReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelCapacityReservationResult(data, context);
  const response: CancelCapacityReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelCapacityReservationCommandError
 */
const de_CancelCapacityReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelCapacityReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelCapacityReservationFleetsCommand
 */
export const de_CancelCapacityReservationFleetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelCapacityReservationFleetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelCapacityReservationFleetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelCapacityReservationFleetsResult(data, context);
  const response: CancelCapacityReservationFleetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelCapacityReservationFleetsCommandError
 */
const de_CancelCapacityReservationFleetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelCapacityReservationFleetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelConversionTaskCommand
 */
export const de_CancelConversionTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelConversionTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelConversionTaskCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CancelConversionTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2CancelConversionTaskCommandError
 */
const de_CancelConversionTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelConversionTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelExportTaskCommand
 */
export const de_CancelExportTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelExportTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelExportTaskCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CancelExportTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2CancelExportTaskCommandError
 */
const de_CancelExportTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelExportTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelImageLaunchPermissionCommand
 */
export const de_CancelImageLaunchPermissionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelImageLaunchPermissionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelImageLaunchPermissionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelImageLaunchPermissionResult(data, context);
  const response: CancelImageLaunchPermissionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelImageLaunchPermissionCommandError
 */
const de_CancelImageLaunchPermissionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelImageLaunchPermissionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelImportTaskCommand
 */
export const de_CancelImportTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelImportTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelImportTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelImportTaskResult(data, context);
  const response: CancelImportTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelImportTaskCommandError
 */
const de_CancelImportTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelImportTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelReservedInstancesListingCommand
 */
export const de_CancelReservedInstancesListingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelReservedInstancesListingCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelReservedInstancesListingCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelReservedInstancesListingResult(data, context);
  const response: CancelReservedInstancesListingCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelReservedInstancesListingCommandError
 */
const de_CancelReservedInstancesListingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelReservedInstancesListingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsCommand
 */
export const de_CancelSpotFleetRequestsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelSpotFleetRequestsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelSpotFleetRequestsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelSpotFleetRequestsResponse(data, context);
  const response: CancelSpotFleetRequestsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsCommandError
 */
const de_CancelSpotFleetRequestsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelSpotFleetRequestsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelSpotInstanceRequestsCommand
 */
export const de_CancelSpotInstanceRequestsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelSpotInstanceRequestsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelSpotInstanceRequestsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelSpotInstanceRequestsResult(data, context);
  const response: CancelSpotInstanceRequestsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelSpotInstanceRequestsCommandError
 */
const de_CancelSpotInstanceRequestsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelSpotInstanceRequestsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ConfirmProductInstanceCommand
 */
export const de_ConfirmProductInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ConfirmProductInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ConfirmProductInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ConfirmProductInstanceResult(data, context);
  const response: ConfirmProductInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ConfirmProductInstanceCommandError
 */
const de_ConfirmProductInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ConfirmProductInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CopyFpgaImageCommand
 */
export const de_CopyFpgaImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopyFpgaImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CopyFpgaImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CopyFpgaImageResult(data, context);
  const response: CopyFpgaImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CopyFpgaImageCommandError
 */
const de_CopyFpgaImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopyFpgaImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CopyImageCommand
 */
export const de_CopyImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopyImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CopyImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CopyImageResult(data, context);
  const response: CopyImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CopyImageCommandError
 */
const de_CopyImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopyImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CopySnapshotCommand
 */
export const de_CopySnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopySnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CopySnapshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CopySnapshotResult(data, context);
  const response: CopySnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CopySnapshotCommandError
 */
const de_CopySnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopySnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateCapacityReservationCommand
 */
export const de_CreateCapacityReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCapacityReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateCapacityReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateCapacityReservationResult(data, context);
  const response: CreateCapacityReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateCapacityReservationCommandError
 */
const de_CreateCapacityReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCapacityReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateCapacityReservationFleetCommand
 */
export const de_CreateCapacityReservationFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCapacityReservationFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateCapacityReservationFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateCapacityReservationFleetResult(data, context);
  const response: CreateCapacityReservationFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateCapacityReservationFleetCommandError
 */
const de_CreateCapacityReservationFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCapacityReservationFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateCarrierGatewayCommand
 */
export const de_CreateCarrierGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCarrierGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateCarrierGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateCarrierGatewayResult(data, context);
  const response: CreateCarrierGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateCarrierGatewayCommandError
 */
const de_CreateCarrierGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCarrierGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateClientVpnEndpointCommand
 */
export const de_CreateClientVpnEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateClientVpnEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateClientVpnEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateClientVpnEndpointResult(data, context);
  const response: CreateClientVpnEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateClientVpnEndpointCommandError
 */
const de_CreateClientVpnEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateClientVpnEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateClientVpnRouteCommand
 */
export const de_CreateClientVpnRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateClientVpnRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateClientVpnRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateClientVpnRouteResult(data, context);
  const response: CreateClientVpnRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateClientVpnRouteCommandError
 */
const de_CreateClientVpnRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateClientVpnRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateCoipCidrCommand
 */
export const de_CreateCoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateCoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateCoipCidrResult(data, context);
  const response: CreateCoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateCoipCidrCommandError
 */
const de_CreateCoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateCoipPoolCommand
 */
export const de_CreateCoipPoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCoipPoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateCoipPoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateCoipPoolResult(data, context);
  const response: CreateCoipPoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateCoipPoolCommandError
 */
const de_CreateCoipPoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCoipPoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateCustomerGatewayCommand
 */
export const de_CreateCustomerGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCustomerGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateCustomerGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateCustomerGatewayResult(data, context);
  const response: CreateCustomerGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateCustomerGatewayCommandError
 */
const de_CreateCustomerGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCustomerGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateDefaultSubnetCommand
 */
export const de_CreateDefaultSubnetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDefaultSubnetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateDefaultSubnetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateDefaultSubnetResult(data, context);
  const response: CreateDefaultSubnetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateDefaultSubnetCommandError
 */
const de_CreateDefaultSubnetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDefaultSubnetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateDefaultVpcCommand
 */
export const de_CreateDefaultVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDefaultVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateDefaultVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateDefaultVpcResult(data, context);
  const response: CreateDefaultVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateDefaultVpcCommandError
 */
const de_CreateDefaultVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDefaultVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateDhcpOptionsCommand
 */
export const de_CreateDhcpOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDhcpOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateDhcpOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateDhcpOptionsResult(data, context);
  const response: CreateDhcpOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateDhcpOptionsCommandError
 */
const de_CreateDhcpOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDhcpOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateEgressOnlyInternetGatewayCommand
 */
export const de_CreateEgressOnlyInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateEgressOnlyInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateEgressOnlyInternetGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateEgressOnlyInternetGatewayResult(data, context);
  const response: CreateEgressOnlyInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateEgressOnlyInternetGatewayCommandError
 */
const de_CreateEgressOnlyInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateEgressOnlyInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateFleetCommand
 */
export const de_CreateFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateFleetResult(data, context);
  const response: CreateFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateFleetCommandError
 */
const de_CreateFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateFlowLogsCommand
 */
export const de_CreateFlowLogsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFlowLogsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateFlowLogsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateFlowLogsResult(data, context);
  const response: CreateFlowLogsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateFlowLogsCommandError
 */
const de_CreateFlowLogsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFlowLogsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateFpgaImageCommand
 */
export const de_CreateFpgaImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFpgaImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateFpgaImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateFpgaImageResult(data, context);
  const response: CreateFpgaImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateFpgaImageCommandError
 */
const de_CreateFpgaImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFpgaImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateImageCommand
 */
export const de_CreateImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateImageResult(data, context);
  const response: CreateImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateImageCommandError
 */
const de_CreateImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateInstanceConnectEndpointCommand
 */
export const de_CreateInstanceConnectEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceConnectEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateInstanceConnectEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateInstanceConnectEndpointResult(data, context);
  const response: CreateInstanceConnectEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateInstanceConnectEndpointCommandError
 */
const de_CreateInstanceConnectEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceConnectEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateInstanceEventWindowCommand
 */
export const de_CreateInstanceEventWindowCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceEventWindowCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateInstanceEventWindowCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateInstanceEventWindowResult(data, context);
  const response: CreateInstanceEventWindowCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateInstanceEventWindowCommandError
 */
const de_CreateInstanceEventWindowCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceEventWindowCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateInstanceExportTaskCommand
 */
export const de_CreateInstanceExportTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceExportTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateInstanceExportTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateInstanceExportTaskResult(data, context);
  const response: CreateInstanceExportTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateInstanceExportTaskCommandError
 */
const de_CreateInstanceExportTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceExportTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateInternetGatewayCommand
 */
export const de_CreateInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateInternetGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateInternetGatewayResult(data, context);
  const response: CreateInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateInternetGatewayCommandError
 */
const de_CreateInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateIpamCommand
 */
export const de_CreateIpamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateIpamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateIpamResult(data, context);
  const response: CreateIpamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateIpamCommandError
 */
const de_CreateIpamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateIpamPoolCommand
 */
export const de_CreateIpamPoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamPoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateIpamPoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateIpamPoolResult(data, context);
  const response: CreateIpamPoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateIpamPoolCommandError
 */
const de_CreateIpamPoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamPoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateIpamResourceDiscoveryCommand
 */
export const de_CreateIpamResourceDiscoveryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamResourceDiscoveryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateIpamResourceDiscoveryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateIpamResourceDiscoveryResult(data, context);
  const response: CreateIpamResourceDiscoveryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateIpamResourceDiscoveryCommandError
 */
const de_CreateIpamResourceDiscoveryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamResourceDiscoveryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateIpamScopeCommand
 */
export const de_CreateIpamScopeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamScopeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateIpamScopeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateIpamScopeResult(data, context);
  const response: CreateIpamScopeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateIpamScopeCommandError
 */
const de_CreateIpamScopeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamScopeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateKeyPairCommand
 */
export const de_CreateKeyPairCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateKeyPairCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateKeyPairCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_KeyPair(data, context);
  const response: CreateKeyPairCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateKeyPairCommandError
 */
const de_CreateKeyPairCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateKeyPairCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateLaunchTemplateCommand
 */
export const de_CreateLaunchTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLaunchTemplateCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateLaunchTemplateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateLaunchTemplateResult(data, context);
  const response: CreateLaunchTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateLaunchTemplateCommandError
 */
const de_CreateLaunchTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLaunchTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateLaunchTemplateVersionCommand
 */
export const de_CreateLaunchTemplateVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLaunchTemplateVersionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateLaunchTemplateVersionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateLaunchTemplateVersionResult(data, context);
  const response: CreateLaunchTemplateVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateLaunchTemplateVersionCommandError
 */
const de_CreateLaunchTemplateVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLaunchTemplateVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteCommand
 */
export const de_CreateLocalGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateLocalGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateLocalGatewayRouteResult(data, context);
  const response: CreateLocalGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteCommandError
 */
const de_CreateLocalGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableCommand
 */
export const de_CreateLocalGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateLocalGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateLocalGatewayRouteTableResult(data, context);
  const response: CreateLocalGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableCommandError
 */
const de_CreateLocalGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand
 */
export const de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult(data, context);
  const response: CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError
 */
const de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand
 */
export const de_CreateLocalGatewayRouteTableVpcAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableVpcAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateLocalGatewayRouteTableVpcAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateLocalGatewayRouteTableVpcAssociationResult(data, context);
  const response: CreateLocalGatewayRouteTableVpcAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommandError
 */
const de_CreateLocalGatewayRouteTableVpcAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableVpcAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateManagedPrefixListCommand
 */
export const de_CreateManagedPrefixListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateManagedPrefixListCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateManagedPrefixListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateManagedPrefixListResult(data, context);
  const response: CreateManagedPrefixListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateManagedPrefixListCommandError
 */
const de_CreateManagedPrefixListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateManagedPrefixListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNatGatewayCommand
 */
export const de_CreateNatGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNatGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNatGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateNatGatewayResult(data, context);
  const response: CreateNatGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNatGatewayCommandError
 */
const de_CreateNatGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNatGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNetworkAclCommand
 */
export const de_CreateNetworkAclCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkAclCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNetworkAclCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateNetworkAclResult(data, context);
  const response: CreateNetworkAclCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNetworkAclCommandError
 */
const de_CreateNetworkAclCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkAclCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNetworkAclEntryCommand
 */
export const de_CreateNetworkAclEntryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkAclEntryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNetworkAclEntryCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CreateNetworkAclEntryCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNetworkAclEntryCommandError
 */
const de_CreateNetworkAclEntryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkAclEntryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNetworkInsightsAccessScopeCommand
 */
export const de_CreateNetworkInsightsAccessScopeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInsightsAccessScopeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNetworkInsightsAccessScopeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateNetworkInsightsAccessScopeResult(data, context);
  const response: CreateNetworkInsightsAccessScopeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNetworkInsightsAccessScopeCommandError
 */
const de_CreateNetworkInsightsAccessScopeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInsightsAccessScopeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNetworkInsightsPathCommand
 */
export const de_CreateNetworkInsightsPathCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInsightsPathCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNetworkInsightsPathCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateNetworkInsightsPathResult(data, context);
  const response: CreateNetworkInsightsPathCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNetworkInsightsPathCommandError
 */
const de_CreateNetworkInsightsPathCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInsightsPathCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNetworkInterfaceCommand
 */
export const de_CreateNetworkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNetworkInterfaceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateNetworkInterfaceResult(data, context);
  const response: CreateNetworkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNetworkInterfaceCommandError
 */
const de_CreateNetworkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNetworkInterfacePermissionCommand
 */
export const de_CreateNetworkInterfacePermissionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInterfacePermissionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNetworkInterfacePermissionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateNetworkInterfacePermissionResult(data, context);
  const response: CreateNetworkInterfacePermissionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNetworkInterfacePermissionCommandError
 */
const de_CreateNetworkInterfacePermissionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInterfacePermissionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreatePlacementGroupCommand
 */
export const de_CreatePlacementGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePlacementGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreatePlacementGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreatePlacementGroupResult(data, context);
  const response: CreatePlacementGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreatePlacementGroupCommandError
 */
const de_CreatePlacementGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePlacementGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreatePublicIpv4PoolCommand
 */
export const de_CreatePublicIpv4PoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePublicIpv4PoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreatePublicIpv4PoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreatePublicIpv4PoolResult(data, context);
  const response: CreatePublicIpv4PoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreatePublicIpv4PoolCommandError
 */
const de_CreatePublicIpv4PoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePublicIpv4PoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateReplaceRootVolumeTaskCommand
 */
export const de_CreateReplaceRootVolumeTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateReplaceRootVolumeTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateReplaceRootVolumeTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateReplaceRootVolumeTaskResult(data, context);
  const response: CreateReplaceRootVolumeTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateReplaceRootVolumeTaskCommandError
 */
const de_CreateReplaceRootVolumeTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateReplaceRootVolumeTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateReservedInstancesListingCommand
 */
export const de_CreateReservedInstancesListingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateReservedInstancesListingCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateReservedInstancesListingCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateReservedInstancesListingResult(data, context);
  const response: CreateReservedInstancesListingCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateReservedInstancesListingCommandError
 */
const de_CreateReservedInstancesListingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateReservedInstancesListingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateRestoreImageTaskCommand
 */
export const de_CreateRestoreImageTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRestoreImageTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateRestoreImageTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateRestoreImageTaskResult(data, context);
  const response: CreateRestoreImageTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateRestoreImageTaskCommandError
 */
const de_CreateRestoreImageTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRestoreImageTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateRouteCommand
 */
export const de_CreateRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateRouteResult(data, context);
  const response: CreateRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateRouteCommandError
 */
const de_CreateRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateRouteTableCommand
 */
export const de_CreateRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateRouteTableResult(data, context);
  const response: CreateRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateRouteTableCommandError
 */
const de_CreateRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateSecurityGroupCommand
 */
export const de_CreateSecurityGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSecurityGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateSecurityGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateSecurityGroupResult(data, context);
  const response: CreateSecurityGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateSecurityGroupCommandError
 */
const de_CreateSecurityGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSecurityGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateSnapshotCommand
 */
export const de_CreateSnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateSnapshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_Snapshot(data, context);
  const response: CreateSnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateSnapshotCommandError
 */
const de_CreateSnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateSnapshotsCommand
 */
export const de_CreateSnapshotsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSnapshotsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateSnapshotsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateSnapshotsResult(data, context);
  const response: CreateSnapshotsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateSnapshotsCommandError
 */
const de_CreateSnapshotsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSnapshotsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateSpotDatafeedSubscriptionCommand
 */
export const de_CreateSpotDatafeedSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSpotDatafeedSubscriptionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateSpotDatafeedSubscriptionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateSpotDatafeedSubscriptionResult(data, context);
  const response: CreateSpotDatafeedSubscriptionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateSpotDatafeedSubscriptionCommandError
 */
const de_CreateSpotDatafeedSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSpotDatafeedSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateStoreImageTaskCommand
 */
export const de_CreateStoreImageTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateStoreImageTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateStoreImageTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateStoreImageTaskResult(data, context);
  const response: CreateStoreImageTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateStoreImageTaskCommandError
 */
const de_CreateStoreImageTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateStoreImageTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateSubnetCommand
 */
export const de_CreateSubnetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSubnetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateSubnetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateSubnetResult(data, context);
  const response: CreateSubnetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateSubnetCommandError
 */
const de_CreateSubnetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSubnetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateSubnetCidrReservationCommand
 */
export const de_CreateSubnetCidrReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSubnetCidrReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateSubnetCidrReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateSubnetCidrReservationResult(data, context);
  const response: CreateSubnetCidrReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateSubnetCidrReservationCommandError
 */
const de_CreateSubnetCidrReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSubnetCidrReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTagsCommand
 */
export const de_CreateTagsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTagsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTagsCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CreateTagsCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTagsCommandError
 */
const de_CreateTagsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTagsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTrafficMirrorFilterCommand
 */
export const de_CreateTrafficMirrorFilterCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorFilterCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTrafficMirrorFilterCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTrafficMirrorFilterResult(data, context);
  const response: CreateTrafficMirrorFilterCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorFilterCommandError
 */
const de_CreateTrafficMirrorFilterCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorFilterCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTrafficMirrorFilterRuleCommand
 */
export const de_CreateTrafficMirrorFilterRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorFilterRuleCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTrafficMirrorFilterRuleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTrafficMirrorFilterRuleResult(data, context);
  const response: CreateTrafficMirrorFilterRuleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorFilterRuleCommandError
 */
const de_CreateTrafficMirrorFilterRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorFilterRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTrafficMirrorSessionCommand
 */
export const de_CreateTrafficMirrorSessionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorSessionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTrafficMirrorSessionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTrafficMirrorSessionResult(data, context);
  const response: CreateTrafficMirrorSessionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorSessionCommandError
 */
const de_CreateTrafficMirrorSessionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorSessionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTrafficMirrorTargetCommand
 */
export const de_CreateTrafficMirrorTargetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorTargetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTrafficMirrorTargetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTrafficMirrorTargetResult(data, context);
  const response: CreateTrafficMirrorTargetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorTargetCommandError
 */
const de_CreateTrafficMirrorTargetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorTargetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayCommand
 */
export const de_CreateTransitGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayResult(data, context);
  const response: CreateTransitGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayCommandError
 */
const de_CreateTransitGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayConnectCommand
 */
export const de_CreateTransitGatewayConnectCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayConnectCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayConnectCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayConnectResult(data, context);
  const response: CreateTransitGatewayConnectCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayConnectCommandError
 */
const de_CreateTransitGatewayConnectCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayConnectCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayConnectPeerCommand
 */
export const de_CreateTransitGatewayConnectPeerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayConnectPeerCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayConnectPeerCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayConnectPeerResult(data, context);
  const response: CreateTransitGatewayConnectPeerCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayConnectPeerCommandError
 */
const de_CreateTransitGatewayConnectPeerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayConnectPeerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayMulticastDomainCommand
 */
export const de_CreateTransitGatewayMulticastDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayMulticastDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayMulticastDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayMulticastDomainResult(data, context);
  const response: CreateTransitGatewayMulticastDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayMulticastDomainCommandError
 */
const de_CreateTransitGatewayMulticastDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayMulticastDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand
 */
export const de_CreateTransitGatewayPeeringAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPeeringAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayPeeringAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayPeeringAttachmentResult(data, context);
  const response: CreateTransitGatewayPeeringAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommandError
 */
const de_CreateTransitGatewayPeeringAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPeeringAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayPolicyTableCommand
 */
export const de_CreateTransitGatewayPolicyTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPolicyTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayPolicyTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayPolicyTableResult(data, context);
  const response: CreateTransitGatewayPolicyTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayPolicyTableCommandError
 */
const de_CreateTransitGatewayPolicyTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPolicyTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand
 */
export const de_CreateTransitGatewayPrefixListReferenceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPrefixListReferenceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayPrefixListReferenceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayPrefixListReferenceResult(data, context);
  const response: CreateTransitGatewayPrefixListReferenceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommandError
 */
const de_CreateTransitGatewayPrefixListReferenceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPrefixListReferenceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteCommand
 */
export const de_CreateTransitGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayRouteResult(data, context);
  const response: CreateTransitGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteCommandError
 */
const de_CreateTransitGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteTableCommand
 */
export const de_CreateTransitGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayRouteTableResult(data, context);
  const response: CreateTransitGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteTableCommandError
 */
const de_CreateTransitGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteTableAnnouncementCommand
 */
export const de_CreateTransitGatewayRouteTableAnnouncementCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteTableAnnouncementCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayRouteTableAnnouncementCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayRouteTableAnnouncementResult(data, context);
  const response: CreateTransitGatewayRouteTableAnnouncementCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteTableAnnouncementCommandError
 */
const de_CreateTransitGatewayRouteTableAnnouncementCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteTableAnnouncementCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommand
 */
export const de_CreateTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayVpcAttachmentResult(data, context);
  const response: CreateTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommandError
 */
const de_CreateTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVerifiedAccessEndpointCommand
 */
export const de_CreateVerifiedAccessEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVerifiedAccessEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVerifiedAccessEndpointResult(data, context);
  const response: CreateVerifiedAccessEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessEndpointCommandError
 */
const de_CreateVerifiedAccessEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVerifiedAccessGroupCommand
 */
export const de_CreateVerifiedAccessGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVerifiedAccessGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVerifiedAccessGroupResult(data, context);
  const response: CreateVerifiedAccessGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessGroupCommandError
 */
const de_CreateVerifiedAccessGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVerifiedAccessInstanceCommand
 */
export const de_CreateVerifiedAccessInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVerifiedAccessInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVerifiedAccessInstanceResult(data, context);
  const response: CreateVerifiedAccessInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessInstanceCommandError
 */
const de_CreateVerifiedAccessInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVerifiedAccessTrustProviderCommand
 */
export const de_CreateVerifiedAccessTrustProviderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessTrustProviderCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVerifiedAccessTrustProviderCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVerifiedAccessTrustProviderResult(data, context);
  const response: CreateVerifiedAccessTrustProviderCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessTrustProviderCommandError
 */
const de_CreateVerifiedAccessTrustProviderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessTrustProviderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVolumeCommand
 */
export const de_CreateVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_Volume(data, context);
  const response: CreateVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVolumeCommandError
 */
const de_CreateVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpcCommand
 */
export const de_CreateVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpcResult(data, context);
  const response: CreateVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpcCommandError
 */
const de_CreateVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpcEndpointCommand
 */
export const de_CreateVpcEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpcEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpcEndpointResult(data, context);
  const response: CreateVpcEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpcEndpointCommandError
 */
const de_CreateVpcEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommand
 */
export const de_CreateVpcEndpointConnectionNotificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointConnectionNotificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpcEndpointConnectionNotificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpcEndpointConnectionNotificationResult(data, context);
  const response: CreateVpcEndpointConnectionNotificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommandError
 */
const de_CreateVpcEndpointConnectionNotificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointConnectionNotificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommand
 */
export const de_CreateVpcEndpointServiceConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointServiceConfigurationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpcEndpointServiceConfigurationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpcEndpointServiceConfigurationResult(data, context);
  const response: CreateVpcEndpointServiceConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommandError
 */
const de_CreateVpcEndpointServiceConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointServiceConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpcPeeringConnectionCommand
 */
export const de_CreateVpcPeeringConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcPeeringConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpcPeeringConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpcPeeringConnectionResult(data, context);
  const response: CreateVpcPeeringConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpcPeeringConnectionCommandError
 */
const de_CreateVpcPeeringConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcPeeringConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpnConnectionCommand
 */
export const de_CreateVpnConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpnConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpnConnectionResult(data, context);
  const response: CreateVpnConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpnConnectionCommandError
 */
const de_CreateVpnConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpnConnectionRouteCommand
 */
export const de_CreateVpnConnectionRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnConnectionRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpnConnectionRouteCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CreateVpnConnectionRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpnConnectionRouteCommandError
 */
const de_CreateVpnConnectionRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnConnectionRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpnGatewayCommand
 */
export const de_CreateVpnGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpnGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpnGatewayResult(data, context);
  const response: CreateVpnGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpnGatewayCommandError
 */
const de_CreateVpnGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteCarrierGatewayCommand
 */
export const de_DeleteCarrierGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCarrierGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteCarrierGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteCarrierGatewayResult(data, context);
  const response: DeleteCarrierGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteCarrierGatewayCommandError
 */
const de_DeleteCarrierGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCarrierGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteClientVpnEndpointCommand
 */
export const de_DeleteClientVpnEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteClientVpnEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteClientVpnEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteClientVpnEndpointResult(data, context);
  const response: DeleteClientVpnEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteClientVpnEndpointCommandError
 */
const de_DeleteClientVpnEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteClientVpnEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteClientVpnRouteCommand
 */
export const de_DeleteClientVpnRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteClientVpnRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteClientVpnRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteClientVpnRouteResult(data, context);
  const response: DeleteClientVpnRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteClientVpnRouteCommandError
 */
const de_DeleteClientVpnRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteClientVpnRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteCoipCidrCommand
 */
export const de_DeleteCoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteCoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteCoipCidrResult(data, context);
  const response: DeleteCoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteCoipCidrCommandError
 */
const de_DeleteCoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteCoipPoolCommand
 */
export const de_DeleteCoipPoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCoipPoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteCoipPoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteCoipPoolResult(data, context);
  const response: DeleteCoipPoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteCoipPoolCommandError
 */
const de_DeleteCoipPoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCoipPoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteCustomerGatewayCommand
 */
export const de_DeleteCustomerGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCustomerGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteCustomerGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteCustomerGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteCustomerGatewayCommandError
 */
const de_DeleteCustomerGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCustomerGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteDhcpOptionsCommand
 */
export const de_DeleteDhcpOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDhcpOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteDhcpOptionsCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteDhcpOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteDhcpOptionsCommandError
 */
const de_DeleteDhcpOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDhcpOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommand
 */
export const de_DeleteEgressOnlyInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteEgressOnlyInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteEgressOnlyInternetGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteEgressOnlyInternetGatewayResult(data, context);
  const response: DeleteEgressOnlyInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommandError
 */
const de_DeleteEgressOnlyInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteEgressOnlyInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteFleetsCommand
 */
export const de_DeleteFleetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFleetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteFleetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteFleetsResult(data, context);
  const response: DeleteFleetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteFleetsCommandError
 */
const de_DeleteFleetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFleetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteFlowLogsCommand
 */
export const de_DeleteFlowLogsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFlowLogsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteFlowLogsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteFlowLogsResult(data, context);
  const response: DeleteFlowLogsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteFlowLogsCommandError
 */
const de_DeleteFlowLogsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFlowLogsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteFpgaImageCommand
 */
export const de_DeleteFpgaImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFpgaImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteFpgaImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteFpgaImageResult(data, context);
  const response: DeleteFpgaImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteFpgaImageCommandError
 */
const de_DeleteFpgaImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFpgaImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteInstanceConnectEndpointCommand
 */
export const de_DeleteInstanceConnectEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInstanceConnectEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteInstanceConnectEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteInstanceConnectEndpointResult(data, context);
  const response: DeleteInstanceConnectEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteInstanceConnectEndpointCommandError
 */
const de_DeleteInstanceConnectEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInstanceConnectEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteInstanceEventWindowCommand
 */
export const de_DeleteInstanceEventWindowCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInstanceEventWindowCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteInstanceEventWindowCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteInstanceEventWindowResult(data, context);
  const response: DeleteInstanceEventWindowCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteInstanceEventWindowCommandError
 */
const de_DeleteInstanceEventWindowCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInstanceEventWindowCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteInternetGatewayCommand
 */
export const de_DeleteInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteInternetGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteInternetGatewayCommandError
 */
const de_DeleteInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteIpamCommand
 */
export const de_DeleteIpamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteIpamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteIpamResult(data, context);
  const response: DeleteIpamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteIpamCommandError
 */
const de_DeleteIpamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteIpamPoolCommand
 */
export const de_DeleteIpamPoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamPoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteIpamPoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteIpamPoolResult(data, context);
  const response: DeleteIpamPoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteIpamPoolCommandError
 */
const de_DeleteIpamPoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamPoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteIpamResourceDiscoveryCommand
 */
export const de_DeleteIpamResourceDiscoveryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamResourceDiscoveryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteIpamResourceDiscoveryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteIpamResourceDiscoveryResult(data, context);
  const response: DeleteIpamResourceDiscoveryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteIpamResourceDiscoveryCommandError
 */
const de_DeleteIpamResourceDiscoveryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamResourceDiscoveryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteIpamScopeCommand
 */
export const de_DeleteIpamScopeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamScopeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteIpamScopeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteIpamScopeResult(data, context);
  const response: DeleteIpamScopeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteIpamScopeCommandError
 */
const de_DeleteIpamScopeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamScopeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteKeyPairCommand
 */
export const de_DeleteKeyPairCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteKeyPairCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteKeyPairCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteKeyPairResult(data, context);
  const response: DeleteKeyPairCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteKeyPairCommandError
 */
const de_DeleteKeyPairCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteKeyPairCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateCommand
 */
export const de_DeleteLaunchTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLaunchTemplateCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteLaunchTemplateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteLaunchTemplateResult(data, context);
  const response: DeleteLaunchTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateCommandError
 */
const de_DeleteLaunchTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLaunchTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsCommand
 */
export const de_DeleteLaunchTemplateVersionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLaunchTemplateVersionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteLaunchTemplateVersionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteLaunchTemplateVersionsResult(data, context);
  const response: DeleteLaunchTemplateVersionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsCommandError
 */
const de_DeleteLaunchTemplateVersionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLaunchTemplateVersionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteCommand
 */
export const de_DeleteLocalGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteLocalGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteLocalGatewayRouteResult(data, context);
  const response: DeleteLocalGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteCommandError
 */
const de_DeleteLocalGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableCommand
 */
export const de_DeleteLocalGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteLocalGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteLocalGatewayRouteTableResult(data, context);
  const response: DeleteLocalGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableCommandError
 */
const de_DeleteLocalGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand
 */
export const de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult(data, context);
  const response: DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError
 */
const de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand
 */
export const de_DeleteLocalGatewayRouteTableVpcAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableVpcAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteLocalGatewayRouteTableVpcAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteLocalGatewayRouteTableVpcAssociationResult(data, context);
  const response: DeleteLocalGatewayRouteTableVpcAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommandError
 */
const de_DeleteLocalGatewayRouteTableVpcAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableVpcAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteManagedPrefixListCommand
 */
export const de_DeleteManagedPrefixListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteManagedPrefixListCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteManagedPrefixListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteManagedPrefixListResult(data, context);
  const response: DeleteManagedPrefixListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteManagedPrefixListCommandError
 */
const de_DeleteManagedPrefixListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteManagedPrefixListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNatGatewayCommand
 */
export const de_DeleteNatGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNatGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNatGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteNatGatewayResult(data, context);
  const response: DeleteNatGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNatGatewayCommandError
 */
const de_DeleteNatGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNatGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkAclCommand
 */
export const de_DeleteNetworkAclCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkAclCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkAclCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteNetworkAclCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkAclCommandError
 */
const de_DeleteNetworkAclCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkAclCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkAclEntryCommand
 */
export const de_DeleteNetworkAclEntryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkAclEntryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkAclEntryCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteNetworkAclEntryCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkAclEntryCommandError
 */
const de_DeleteNetworkAclEntryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkAclEntryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAccessScopeCommand
 */
export const de_DeleteNetworkInsightsAccessScopeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAccessScopeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkInsightsAccessScopeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteNetworkInsightsAccessScopeResult(data, context);
  const response: DeleteNetworkInsightsAccessScopeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAccessScopeCommandError
 */
const de_DeleteNetworkInsightsAccessScopeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAccessScopeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand
 */
export const de_DeleteNetworkInsightsAccessScopeAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAccessScopeAnalysisCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkInsightsAccessScopeAnalysisCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteNetworkInsightsAccessScopeAnalysisResult(data, context);
  const response: DeleteNetworkInsightsAccessScopeAnalysisCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommandError
 */
const de_DeleteNetworkInsightsAccessScopeAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAccessScopeAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAnalysisCommand
 */
export const de_DeleteNetworkInsightsAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAnalysisCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkInsightsAnalysisCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteNetworkInsightsAnalysisResult(data, context);
  const response: DeleteNetworkInsightsAnalysisCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAnalysisCommandError
 */
const de_DeleteNetworkInsightsAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsPathCommand
 */
export const de_DeleteNetworkInsightsPathCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsPathCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkInsightsPathCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteNetworkInsightsPathResult(data, context);
  const response: DeleteNetworkInsightsPathCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsPathCommandError
 */
const de_DeleteNetworkInsightsPathCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsPathCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkInterfaceCommand
 */
export const de_DeleteNetworkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkInterfaceCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteNetworkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkInterfaceCommandError
 */
const de_DeleteNetworkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkInterfacePermissionCommand
 */
export const de_DeleteNetworkInterfacePermissionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInterfacePermissionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkInterfacePermissionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteNetworkInterfacePermissionResult(data, context);
  const response: DeleteNetworkInterfacePermissionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkInterfacePermissionCommandError
 */
const de_DeleteNetworkInterfacePermissionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInterfacePermissionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeletePlacementGroupCommand
 */
export const de_DeletePlacementGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePlacementGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeletePlacementGroupCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeletePlacementGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeletePlacementGroupCommandError
 */
const de_DeletePlacementGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePlacementGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeletePublicIpv4PoolCommand
 */
export const de_DeletePublicIpv4PoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePublicIpv4PoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeletePublicIpv4PoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeletePublicIpv4PoolResult(data, context);
  const response: DeletePublicIpv4PoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeletePublicIpv4PoolCommandError
 */
const de_DeletePublicIpv4PoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePublicIpv4PoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteQueuedReservedInstancesCommand
 */
export const de_DeleteQueuedReservedInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteQueuedReservedInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteQueuedReservedInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteQueuedReservedInstancesResult(data, context);
  const response: DeleteQueuedReservedInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteQueuedReservedInstancesCommandError
 */
const de_DeleteQueuedReservedInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteQueuedReservedInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteRouteCommand
 */
export const de_DeleteRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteRouteCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteRouteCommandError
 */
const de_DeleteRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteRouteTableCommand
 */
export const de_DeleteRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteRouteTableCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteRouteTableCommandError
 */
const de_DeleteRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteSecurityGroupCommand
 */
export const de_DeleteSecurityGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSecurityGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteSecurityGroupCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteSecurityGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteSecurityGroupCommandError
 */
const de_DeleteSecurityGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSecurityGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteSnapshotCommand
 */
export const de_DeleteSnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteSnapshotCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteSnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteSnapshotCommandError
 */
const de_DeleteSnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommand
 */
export const de_DeleteSpotDatafeedSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSpotDatafeedSubscriptionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteSpotDatafeedSubscriptionCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteSpotDatafeedSubscriptionCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommandError
 */
const de_DeleteSpotDatafeedSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSpotDatafeedSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteSubnetCommand
 */
export const de_DeleteSubnetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSubnetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteSubnetCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteSubnetCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteSubnetCommandError
 */
const de_DeleteSubnetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSubnetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteSubnetCidrReservationCommand
 */
export const de_DeleteSubnetCidrReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSubnetCidrReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteSubnetCidrReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteSubnetCidrReservationResult(data, context);
  const response: DeleteSubnetCidrReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteSubnetCidrReservationCommandError
 */
const de_DeleteSubnetCidrReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSubnetCidrReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTagsCommand
 */
export const de_DeleteTagsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTagsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTagsCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteTagsCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTagsCommandError
 */
const de_DeleteTagsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTagsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorFilterCommand
 */
export const de_DeleteTrafficMirrorFilterCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorFilterCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTrafficMirrorFilterCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTrafficMirrorFilterResult(data, context);
  const response: DeleteTrafficMirrorFilterCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorFilterCommandError
 */
const de_DeleteTrafficMirrorFilterCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorFilterCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommand
 */
export const de_DeleteTrafficMirrorFilterRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorFilterRuleCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTrafficMirrorFilterRuleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTrafficMirrorFilterRuleResult(data, context);
  const response: DeleteTrafficMirrorFilterRuleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommandError
 */
const de_DeleteTrafficMirrorFilterRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorFilterRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorSessionCommand
 */
export const de_DeleteTrafficMirrorSessionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorSessionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTrafficMirrorSessionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTrafficMirrorSessionResult(data, context);
  const response: DeleteTrafficMirrorSessionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorSessionCommandError
 */
const de_DeleteTrafficMirrorSessionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorSessionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorTargetCommand
 */
export const de_DeleteTrafficMirrorTargetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorTargetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTrafficMirrorTargetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTrafficMirrorTargetResult(data, context);
  const response: DeleteTrafficMirrorTargetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorTargetCommandError
 */
const de_DeleteTrafficMirrorTargetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorTargetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayCommand
 */
export const de_DeleteTransitGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayResult(data, context);
  const response: DeleteTransitGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayCommandError
 */
const de_DeleteTransitGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayConnectCommand
 */
export const de_DeleteTransitGatewayConnectCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayConnectCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayConnectCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayConnectResult(data, context);
  const response: DeleteTransitGatewayConnectCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayConnectCommandError
 */
const de_DeleteTransitGatewayConnectCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayConnectCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayConnectPeerCommand
 */
export const de_DeleteTransitGatewayConnectPeerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayConnectPeerCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayConnectPeerCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayConnectPeerResult(data, context);
  const response: DeleteTransitGatewayConnectPeerCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayConnectPeerCommandError
 */
const de_DeleteTransitGatewayConnectPeerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayConnectPeerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommand
 */
export const de_DeleteTransitGatewayMulticastDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayMulticastDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayMulticastDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayMulticastDomainResult(data, context);
  const response: DeleteTransitGatewayMulticastDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommandError
 */
const de_DeleteTransitGatewayMulticastDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayMulticastDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand
 */
export const de_DeleteTransitGatewayPeeringAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPeeringAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayPeeringAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayPeeringAttachmentResult(data, context);
  const response: DeleteTransitGatewayPeeringAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommandError
 */
const de_DeleteTransitGatewayPeeringAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPeeringAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPolicyTableCommand
 */
export const de_DeleteTransitGatewayPolicyTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPolicyTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayPolicyTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayPolicyTableResult(data, context);
  const response: DeleteTransitGatewayPolicyTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPolicyTableCommandError
 */
const de_DeleteTransitGatewayPolicyTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPolicyTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand
 */
export const de_DeleteTransitGatewayPrefixListReferenceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPrefixListReferenceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayPrefixListReferenceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayPrefixListReferenceResult(data, context);
  const response: DeleteTransitGatewayPrefixListReferenceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommandError
 */
const de_DeleteTransitGatewayPrefixListReferenceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPrefixListReferenceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteCommand
 */
export const de_DeleteTransitGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayRouteResult(data, context);
  const response: DeleteTransitGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteCommandError
 */
const de_DeleteTransitGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteTableCommand
 */
export const de_DeleteTransitGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayRouteTableResult(data, context);
  const response: DeleteTransitGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteTableCommandError
 */
const de_DeleteTransitGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteTableAnnouncementCommand
 */
export const de_DeleteTransitGatewayRouteTableAnnouncementCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteTableAnnouncementCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayRouteTableAnnouncementCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayRouteTableAnnouncementResult(data, context);
  const response: DeleteTransitGatewayRouteTableAnnouncementCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteTableAnnouncementCommandError
 */
const de_DeleteTransitGatewayRouteTableAnnouncementCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteTableAnnouncementCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand
 */
export const de_DeleteTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayVpcAttachmentResult(data, context);
  const response: DeleteTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommandError
 */
const de_DeleteTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessEndpointCommand
 */
export const de_DeleteVerifiedAccessEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVerifiedAccessEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVerifiedAccessEndpointResult(data, context);
  const response: DeleteVerifiedAccessEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessEndpointCommandError
 */
const de_DeleteVerifiedAccessEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessGroupCommand
 */
export const de_DeleteVerifiedAccessGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVerifiedAccessGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVerifiedAccessGroupResult(data, context);
  const response: DeleteVerifiedAccessGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessGroupCommandError
 */
const de_DeleteVerifiedAccessGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessInstanceCommand
 */
export const de_DeleteVerifiedAccessInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVerifiedAccessInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVerifiedAccessInstanceResult(data, context);
  const response: DeleteVerifiedAccessInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessInstanceCommandError
 */
const de_DeleteVerifiedAccessInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessTrustProviderCommand
 */
export const de_DeleteVerifiedAccessTrustProviderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessTrustProviderCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVerifiedAccessTrustProviderCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVerifiedAccessTrustProviderResult(data, context);
  const response: DeleteVerifiedAccessTrustProviderCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessTrustProviderCommandError
 */
const de_DeleteVerifiedAccessTrustProviderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessTrustProviderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVolumeCommand
 */
export const de_DeleteVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVolumeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVolumeCommandError
 */
const de_DeleteVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpcCommand
 */
export const de_DeleteVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpcCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpcCommandError
 */
const de_DeleteVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand
 */
export const de_DeleteVpcEndpointConnectionNotificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointConnectionNotificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpcEndpointConnectionNotificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVpcEndpointConnectionNotificationsResult(data, context);
  const response: DeleteVpcEndpointConnectionNotificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommandError
 */
const de_DeleteVpcEndpointConnectionNotificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointConnectionNotificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpcEndpointsCommand
 */
export const de_DeleteVpcEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpcEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVpcEndpointsResult(data, context);
  const response: DeleteVpcEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpcEndpointsCommandError
 */
const de_DeleteVpcEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand
 */
export const de_DeleteVpcEndpointServiceConfigurationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointServiceConfigurationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpcEndpointServiceConfigurationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVpcEndpointServiceConfigurationsResult(data, context);
  const response: DeleteVpcEndpointServiceConfigurationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommandError
 */
const de_DeleteVpcEndpointServiceConfigurationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointServiceConfigurationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpcPeeringConnectionCommand
 */
export const de_DeleteVpcPeeringConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcPeeringConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpcPeeringConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVpcPeeringConnectionResult(data, context);
  const response: DeleteVpcPeeringConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpcPeeringConnectionCommandError
 */
const de_DeleteVpcPeeringConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcPeeringConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpnConnectionCommand
 */
export const de_DeleteVpnConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpnConnectionCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVpnConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpnConnectionCommandError
 */
const de_DeleteVpnConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpnConnectionRouteCommand
 */
export const de_DeleteVpnConnectionRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnConnectionRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpnConnectionRouteCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVpnConnectionRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpnConnectionRouteCommandError
 */
const de_DeleteVpnConnectionRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnConnectionRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpnGatewayCommand
 */
export const de_DeleteVpnGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpnGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVpnGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpnGatewayCommandError
 */
const de_DeleteVpnGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeprovisionByoipCidrCommand
 */
export const de_DeprovisionByoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionByoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeprovisionByoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeprovisionByoipCidrResult(data, context);
  const response: DeprovisionByoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeprovisionByoipCidrCommandError
 */
const de_DeprovisionByoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionByoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeprovisionIpamPoolCidrCommand
 */
export const de_DeprovisionIpamPoolCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionIpamPoolCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeprovisionIpamPoolCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeprovisionIpamPoolCidrResult(data, context);
  const response: DeprovisionIpamPoolCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeprovisionIpamPoolCidrCommandError
 */
const de_DeprovisionIpamPoolCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionIpamPoolCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand
 */
export const de_DeprovisionPublicIpv4PoolCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionPublicIpv4PoolCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeprovisionPublicIpv4PoolCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeprovisionPublicIpv4PoolCidrResult(data, context);
  const response: DeprovisionPublicIpv4PoolCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeprovisionPublicIpv4PoolCidrCommandError
 */
const de_DeprovisionPublicIpv4PoolCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionPublicIpv4PoolCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeregisterImageCommand
 */
export const de_DeregisterImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeregisterImageCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeregisterImageCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeregisterImageCommandError
 */
const de_DeregisterImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand
 */
export const de_DeregisterInstanceEventNotificationAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterInstanceEventNotificationAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeregisterInstanceEventNotificationAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeregisterInstanceEventNotificationAttributesResult(data, context);
  const response: DeregisterInstanceEventNotificationAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommandError
 */
const de_DeregisterInstanceEventNotificationAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterInstanceEventNotificationAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand
 */
export const de_DeregisterTransitGatewayMulticastGroupMembersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterTransitGatewayMulticastGroupMembersCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeregisterTransitGatewayMulticastGroupMembersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeregisterTransitGatewayMulticastGroupMembersResult(data, context);
  const response: DeregisterTransitGatewayMulticastGroupMembersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommandError
 */
const de_DeregisterTransitGatewayMulticastGroupMembersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterTransitGatewayMulticastGroupMembersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand
 */
export const de_DeregisterTransitGatewayMulticastGroupSourcesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterTransitGatewayMulticastGroupSourcesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeregisterTransitGatewayMulticastGroupSourcesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeregisterTransitGatewayMulticastGroupSourcesResult(data, context);
  const response: DeregisterTransitGatewayMulticastGroupSourcesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommandError
 */
const de_DeregisterTransitGatewayMulticastGroupSourcesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterTransitGatewayMulticastGroupSourcesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAccountAttributesCommand
 */
export const de_DescribeAccountAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAccountAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAccountAttributesResult(data, context);
  const response: DescribeAccountAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAccountAttributesCommandError
 */
const de_DescribeAccountAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAddressesCommand
 */
export const de_DescribeAddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAddressesResult(data, context);
  const response: DescribeAddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAddressesCommandError
 */
const de_DescribeAddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAddressesAttributeCommand
 */
export const de_DescribeAddressesAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressesAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAddressesAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAddressesAttributeResult(data, context);
  const response: DescribeAddressesAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAddressesAttributeCommandError
 */
const de_DescribeAddressesAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressesAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAddressTransfersCommand
 */
export const de_DescribeAddressTransfersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressTransfersCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAddressTransfersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAddressTransfersResult(data, context);
  const response: DescribeAddressTransfersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAddressTransfersCommandError
 */
const de_DescribeAddressTransfersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressTransfersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAggregateIdFormatCommand
 */
export const de_DescribeAggregateIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAggregateIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAggregateIdFormatCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAggregateIdFormatResult(data, context);
  const response: DescribeAggregateIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAggregateIdFormatCommandError
 */
const de_DescribeAggregateIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAggregateIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAvailabilityZonesCommand
 */
export const de_DescribeAvailabilityZonesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAvailabilityZonesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAvailabilityZonesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAvailabilityZonesResult(data, context);
  const response: DescribeAvailabilityZonesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAvailabilityZonesCommandError
 */
const de_DescribeAvailabilityZonesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAvailabilityZonesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAwsNetworkPerformanceMetricSubscriptionsCommand
 */
export const de_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAwsNetworkPerformanceMetricSubscriptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAwsNetworkPerformanceMetricSubscriptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAwsNetworkPerformanceMetricSubscriptionsResult(data, context);
  const response: DescribeAwsNetworkPerformanceMetricSubscriptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAwsNetworkPerformanceMetricSubscriptionsCommandError
 */
const de_DescribeAwsNetworkPerformanceMetricSubscriptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAwsNetworkPerformanceMetricSubscriptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeBundleTasksCommand
 */
export const de_DescribeBundleTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeBundleTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeBundleTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeBundleTasksResult(data, context);
  const response: DescribeBundleTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeBundleTasksCommandError
 */
const de_DescribeBundleTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeBundleTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeByoipCidrsCommand
 */
export const de_DescribeByoipCidrsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeByoipCidrsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeByoipCidrsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeByoipCidrsResult(data, context);
  const response: DescribeByoipCidrsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeByoipCidrsCommandError
 */
const de_DescribeByoipCidrsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeByoipCidrsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeCapacityReservationFleetsCommand
 */
export const de_DescribeCapacityReservationFleetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCapacityReservationFleetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeCapacityReservationFleetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeCapacityReservationFleetsResult(data, context);
  const response: DescribeCapacityReservationFleetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeCapacityReservationFleetsCommandError
 */
const de_DescribeCapacityReservationFleetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCapacityReservationFleetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeCapacityReservationsCommand
 */
export const de_DescribeCapacityReservationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCapacityReservationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeCapacityReservationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeCapacityReservationsResult(data, context);
  const response: DescribeCapacityReservationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeCapacityReservationsCommandError
 */
const de_DescribeCapacityReservationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCapacityReservationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeCarrierGatewaysCommand
 */
export const de_DescribeCarrierGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCarrierGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeCarrierGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeCarrierGatewaysResult(data, context);
  const response: DescribeCarrierGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeCarrierGatewaysCommandError
 */
const de_DescribeCarrierGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCarrierGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeClassicLinkInstancesCommand
 */
export const de_DescribeClassicLinkInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClassicLinkInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeClassicLinkInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeClassicLinkInstancesResult(data, context);
  const response: DescribeClassicLinkInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeClassicLinkInstancesCommandError
 */
const de_DescribeClassicLinkInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClassicLinkInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommand
 */
export const de_DescribeClientVpnAuthorizationRulesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnAuthorizationRulesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeClientVpnAuthorizationRulesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeClientVpnAuthorizationRulesResult(data, context);
  const response: DescribeClientVpnAuthorizationRulesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommandError
 */
const de_DescribeClientVpnAuthorizationRulesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnAuthorizationRulesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeClientVpnConnectionsCommand
 */
export const de_DescribeClientVpnConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeClientVpnConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeClientVpnConnectionsResult(data, context);
  const response: DescribeClientVpnConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeClientVpnConnectionsCommandError
 */
const de_DescribeClientVpnConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeClientVpnEndpointsCommand
 */
export const de_DescribeClientVpnEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeClientVpnEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeClientVpnEndpointsResult(data, context);
  const response: DescribeClientVpnEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeClientVpnEndpointsCommandError
 */
const de_DescribeClientVpnEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeClientVpnRoutesCommand
 */
export const de_DescribeClientVpnRoutesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnRoutesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeClientVpnRoutesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeClientVpnRoutesResult(data, context);
  const response: DescribeClientVpnRoutesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeClientVpnRoutesCommandError
 */
const de_DescribeClientVpnRoutesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnRoutesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeClientVpnTargetNetworksCommand
 */
export const de_DescribeClientVpnTargetNetworksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnTargetNetworksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeClientVpnTargetNetworksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeClientVpnTargetNetworksResult(data, context);
  const response: DescribeClientVpnTargetNetworksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeClientVpnTargetNetworksCommandError
 */
const de_DescribeClientVpnTargetNetworksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnTargetNetworksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeCoipPoolsCommand
 */
export const de_DescribeCoipPoolsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCoipPoolsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeCoipPoolsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeCoipPoolsResult(data, context);
  const response: DescribeCoipPoolsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeCoipPoolsCommandError
 */
const de_DescribeCoipPoolsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCoipPoolsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeConversionTasksCommand
 */
export const de_DescribeConversionTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeConversionTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeConversionTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeConversionTasksResult(data, context);
  const response: DescribeConversionTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeConversionTasksCommandError
 */
const de_DescribeConversionTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeConversionTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeCustomerGatewaysCommand
 */
export const de_DescribeCustomerGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCustomerGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeCustomerGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeCustomerGatewaysResult(data, context);
  const response: DescribeCustomerGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeCustomerGatewaysCommandError
 */
const de_DescribeCustomerGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCustomerGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeDhcpOptionsCommand
 */
export const de_DescribeDhcpOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDhcpOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeDhcpOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeDhcpOptionsResult(data, context);
  const response: DescribeDhcpOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeDhcpOptionsCommandError
 */
const de_DescribeDhcpOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDhcpOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand
 */
export const de_DescribeEgressOnlyInternetGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEgressOnlyInternetGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeEgressOnlyInternetGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeEgressOnlyInternetGatewaysResult(data, context);
  const response: DescribeEgressOnlyInternetGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommandError
 */
const de_DescribeEgressOnlyInternetGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEgressOnlyInternetGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeElasticGpusCommand
 */
export const de_DescribeElasticGpusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeElasticGpusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeElasticGpusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeElasticGpusResult(data, context);
  const response: DescribeElasticGpusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeElasticGpusCommandError
 */
const de_DescribeElasticGpusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeElasticGpusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeExportImageTasksCommand
 */
export const de_DescribeExportImageTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExportImageTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeExportImageTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeExportImageTasksResult(data, context);
  const response: DescribeExportImageTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeExportImageTasksCommandError
 */
const de_DescribeExportImageTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExportImageTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeExportTasksCommand
 */
export const de_DescribeExportTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExportTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeExportTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeExportTasksResult(data, context);
  const response: DescribeExportTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeExportTasksCommandError
 */
const de_DescribeExportTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExportTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFastLaunchImagesCommand
 */
export const de_DescribeFastLaunchImagesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFastLaunchImagesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFastLaunchImagesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFastLaunchImagesResult(data, context);
  const response: DescribeFastLaunchImagesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFastLaunchImagesCommandError
 */
const de_DescribeFastLaunchImagesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFastLaunchImagesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFastSnapshotRestoresCommand
 */
export const de_DescribeFastSnapshotRestoresCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFastSnapshotRestoresCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFastSnapshotRestoresCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFastSnapshotRestoresResult(data, context);
  const response: DescribeFastSnapshotRestoresCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFastSnapshotRestoresCommandError
 */
const de_DescribeFastSnapshotRestoresCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFastSnapshotRestoresCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFleetHistoryCommand
 */
export const de_DescribeFleetHistoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetHistoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFleetHistoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFleetHistoryResult(data, context);
  const response: DescribeFleetHistoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFleetHistoryCommandError
 */
const de_DescribeFleetHistoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetHistoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFleetInstancesCommand
 */
export const de_DescribeFleetInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFleetInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFleetInstancesResult(data, context);
  const response: DescribeFleetInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFleetInstancesCommandError
 */
const de_DescribeFleetInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFleetsCommand
 */
export const de_DescribeFleetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFleetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFleetsResult(data, context);
  const response: DescribeFleetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFleetsCommandError
 */
const de_DescribeFleetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFlowLogsCommand
 */
export const de_DescribeFlowLogsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFlowLogsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFlowLogsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFlowLogsResult(data, context);
  const response: DescribeFlowLogsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFlowLogsCommandError
 */
const de_DescribeFlowLogsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFlowLogsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFpgaImageAttributeCommand
 */
export const de_DescribeFpgaImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFpgaImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFpgaImageAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFpgaImageAttributeResult(data, context);
  const response: DescribeFpgaImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFpgaImageAttributeCommandError
 */
const de_DescribeFpgaImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFpgaImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFpgaImagesCommand
 */
export const de_DescribeFpgaImagesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFpgaImagesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFpgaImagesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFpgaImagesResult(data, context);
  const response: DescribeFpgaImagesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFpgaImagesCommandError
 */
const de_DescribeFpgaImagesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFpgaImagesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeHostReservationOfferingsCommand
 */
export const de_DescribeHostReservationOfferingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostReservationOfferingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeHostReservationOfferingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeHostReservationOfferingsResult(data, context);
  const response: DescribeHostReservationOfferingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeHostReservationOfferingsCommandError
 */
const de_DescribeHostReservationOfferingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostReservationOfferingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeHostReservationsCommand
 */
export const de_DescribeHostReservationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostReservationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeHostReservationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeHostReservationsResult(data, context);
  const response: DescribeHostReservationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeHostReservationsCommandError
 */
const de_DescribeHostReservationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostReservationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeHostsCommand
 */
export const de_DescribeHostsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeHostsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeHostsResult(data, context);
  const response: DescribeHostsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeHostsCommandError
 */
const de_DescribeHostsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommand
 */
export const de_DescribeIamInstanceProfileAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIamInstanceProfileAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIamInstanceProfileAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIamInstanceProfileAssociationsResult(data, context);
  const response: DescribeIamInstanceProfileAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommandError
 */
const de_DescribeIamInstanceProfileAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIamInstanceProfileAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIdentityIdFormatCommand
 */
export const de_DescribeIdentityIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIdentityIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIdentityIdFormatCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIdentityIdFormatResult(data, context);
  const response: DescribeIdentityIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIdentityIdFormatCommandError
 */
const de_DescribeIdentityIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIdentityIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIdFormatCommand
 */
export const de_DescribeIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIdFormatCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIdFormatResult(data, context);
  const response: DescribeIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIdFormatCommandError
 */
const de_DescribeIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeImageAttributeCommand
 */
export const de_DescribeImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeImageAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImageAttribute(data, context);
  const response: DescribeImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeImageAttributeCommandError
 */
const de_DescribeImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeImagesCommand
 */
export const de_DescribeImagesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImagesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeImagesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeImagesResult(data, context);
  const response: DescribeImagesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeImagesCommandError
 */
const de_DescribeImagesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImagesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeImportImageTasksCommand
 */
export const de_DescribeImportImageTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImportImageTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeImportImageTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeImportImageTasksResult(data, context);
  const response: DescribeImportImageTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeImportImageTasksCommandError
 */
const de_DescribeImportImageTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImportImageTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeImportSnapshotTasksCommand
 */
export const de_DescribeImportSnapshotTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImportSnapshotTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeImportSnapshotTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeImportSnapshotTasksResult(data, context);
  const response: DescribeImportSnapshotTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeImportSnapshotTasksCommandError
 */
const de_DescribeImportSnapshotTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImportSnapshotTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceAttributeCommand
 */
export const de_DescribeInstanceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_InstanceAttribute(data, context);
  const response: DescribeInstanceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceAttributeCommandError
 */
const de_DescribeInstanceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceConnectEndpointsCommand
 */
export const de_DescribeInstanceConnectEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceConnectEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceConnectEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceConnectEndpointsResult(data, context);
  const response: DescribeInstanceConnectEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceConnectEndpointsCommandError
 */
const de_DescribeInstanceConnectEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceConnectEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceCreditSpecificationsCommand
 */
export const de_DescribeInstanceCreditSpecificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceCreditSpecificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceCreditSpecificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceCreditSpecificationsResult(data, context);
  const response: DescribeInstanceCreditSpecificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceCreditSpecificationsCommandError
 */
const de_DescribeInstanceCreditSpecificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceCreditSpecificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommand
 */
export const de_DescribeInstanceEventNotificationAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceEventNotificationAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceEventNotificationAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceEventNotificationAttributesResult(data, context);
  const response: DescribeInstanceEventNotificationAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommandError
 */
const de_DescribeInstanceEventNotificationAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceEventNotificationAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceEventWindowsCommand
 */
export const de_DescribeInstanceEventWindowsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceEventWindowsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceEventWindowsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceEventWindowsResult(data, context);
  const response: DescribeInstanceEventWindowsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceEventWindowsCommandError
 */
const de_DescribeInstanceEventWindowsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceEventWindowsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstancesCommand
 */
export const de_DescribeInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstancesResult(data, context);
  const response: DescribeInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstancesCommandError
 */
const de_DescribeInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceStatusCommand
 */
export const de_DescribeInstanceStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceStatusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceStatusResult(data, context);
  const response: DescribeInstanceStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceStatusCommandError
 */
const de_DescribeInstanceStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceTypeOfferingsCommand
 */
export const de_DescribeInstanceTypeOfferingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTypeOfferingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceTypeOfferingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceTypeOfferingsResult(data, context);
  const response: DescribeInstanceTypeOfferingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceTypeOfferingsCommandError
 */
const de_DescribeInstanceTypeOfferingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTypeOfferingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceTypesCommand
 */
export const de_DescribeInstanceTypesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTypesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceTypesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceTypesResult(data, context);
  const response: DescribeInstanceTypesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceTypesCommandError
 */
const de_DescribeInstanceTypesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTypesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInternetGatewaysCommand
 */
export const de_DescribeInternetGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInternetGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInternetGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInternetGatewaysResult(data, context);
  const response: DescribeInternetGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInternetGatewaysCommandError
 */
const de_DescribeInternetGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInternetGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIpamPoolsCommand
 */
export const de_DescribeIpamPoolsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamPoolsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIpamPoolsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIpamPoolsResult(data, context);
  const response: DescribeIpamPoolsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIpamPoolsCommandError
 */
const de_DescribeIpamPoolsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamPoolsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIpamResourceDiscoveriesCommand
 */
export const de_DescribeIpamResourceDiscoveriesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamResourceDiscoveriesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIpamResourceDiscoveriesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIpamResourceDiscoveriesResult(data, context);
  const response: DescribeIpamResourceDiscoveriesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIpamResourceDiscoveriesCommandError
 */
const de_DescribeIpamResourceDiscoveriesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamResourceDiscoveriesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIpamResourceDiscoveryAssociationsCommand
 */
export const de_DescribeIpamResourceDiscoveryAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamResourceDiscoveryAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIpamResourceDiscoveryAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIpamResourceDiscoveryAssociationsResult(data, context);
  const response: DescribeIpamResourceDiscoveryAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIpamResourceDiscoveryAssociationsCommandError
 */
const de_DescribeIpamResourceDiscoveryAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamResourceDiscoveryAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIpamsCommand
 */
export const de_DescribeIpamsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIpamsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIpamsResult(data, context);
  const response: DescribeIpamsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIpamsCommandError
 */
const de_DescribeIpamsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIpamScopesCommand
 */
export const de_DescribeIpamScopesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamScopesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIpamScopesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIpamScopesResult(data, context);
  const response: DescribeIpamScopesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIpamScopesCommandError
 */
const de_DescribeIpamScopesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamScopesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIpv6PoolsCommand
 */
export const de_DescribeIpv6PoolsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpv6PoolsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIpv6PoolsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIpv6PoolsResult(data, context);
  const response: DescribeIpv6PoolsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIpv6PoolsCommandError
 */
const de_DescribeIpv6PoolsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpv6PoolsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeKeyPairsCommand
 */
export const de_DescribeKeyPairsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeKeyPairsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeKeyPairsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeKeyPairsResult(data, context);
  const response: DescribeKeyPairsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeKeyPairsCommandError
 */
const de_DescribeKeyPairsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeKeyPairsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLaunchTemplatesCommand
 */
export const de_DescribeLaunchTemplatesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLaunchTemplatesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLaunchTemplatesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLaunchTemplatesResult(data, context);
  const response: DescribeLaunchTemplatesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLaunchTemplatesCommandError
 */
const de_DescribeLaunchTemplatesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLaunchTemplatesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLaunchTemplateVersionsCommand
 */
export const de_DescribeLaunchTemplateVersionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLaunchTemplateVersionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLaunchTemplateVersionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLaunchTemplateVersionsResult(data, context);
  const response: DescribeLaunchTemplateVersionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLaunchTemplateVersionsCommandError
 */
const de_DescribeLaunchTemplateVersionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLaunchTemplateVersionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTablesCommand
 */
export const de_DescribeLocalGatewayRouteTablesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTablesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLocalGatewayRouteTablesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLocalGatewayRouteTablesResult(data, context);
  const response: DescribeLocalGatewayRouteTablesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTablesCommandError
 */
const de_DescribeLocalGatewayRouteTablesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTablesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand
 */
export const de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult(data, context);
  const response: DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError
 */
const de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand
 */
export const de_DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTableVpcAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLocalGatewayRouteTableVpcAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLocalGatewayRouteTableVpcAssociationsResult(data, context);
  const response: DescribeLocalGatewayRouteTableVpcAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommandError
 */
const de_DescribeLocalGatewayRouteTableVpcAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTableVpcAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLocalGatewaysCommand
 */
export const de_DescribeLocalGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLocalGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLocalGatewaysResult(data, context);
  const response: DescribeLocalGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLocalGatewaysCommandError
 */
const de_DescribeLocalGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand
 */
export const de_DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayVirtualInterfaceGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLocalGatewayVirtualInterfaceGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLocalGatewayVirtualInterfaceGroupsResult(data, context);
  const response: DescribeLocalGatewayVirtualInterfaceGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommandError
 */
const de_DescribeLocalGatewayVirtualInterfaceGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayVirtualInterfaceGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand
 */
export const de_DescribeLocalGatewayVirtualInterfacesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayVirtualInterfacesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLocalGatewayVirtualInterfacesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLocalGatewayVirtualInterfacesResult(data, context);
  const response: DescribeLocalGatewayVirtualInterfacesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommandError
 */
const de_DescribeLocalGatewayVirtualInterfacesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayVirtualInterfacesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeManagedPrefixListsCommand
 */
export const de_DescribeManagedPrefixListsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeManagedPrefixListsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeManagedPrefixListsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeManagedPrefixListsResult(data, context);
  const response: DescribeManagedPrefixListsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeManagedPrefixListsCommandError
 */
const de_DescribeManagedPrefixListsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeManagedPrefixListsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeMovingAddressesCommand
 */
export const de_DescribeMovingAddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeMovingAddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeMovingAddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeMovingAddressesResult(data, context);
  const response: DescribeMovingAddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeMovingAddressesCommandError
 */
const de_DescribeMovingAddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeMovingAddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNatGatewaysCommand
 */
export const de_DescribeNatGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNatGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNatGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNatGatewaysResult(data, context);
  const response: DescribeNatGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNatGatewaysCommandError
 */
const de_DescribeNatGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNatGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkAclsCommand
 */
export const de_DescribeNetworkAclsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkAclsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkAclsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkAclsResult(data, context);
  const response: DescribeNetworkAclsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkAclsCommandError
 */
const de_DescribeNetworkAclsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkAclsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand
 */
export const de_DescribeNetworkInsightsAccessScopeAnalysesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAccessScopeAnalysesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInsightsAccessScopeAnalysesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInsightsAccessScopeAnalysesResult(data, context);
  const response: DescribeNetworkInsightsAccessScopeAnalysesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommandError
 */
const de_DescribeNetworkInsightsAccessScopeAnalysesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAccessScopeAnalysesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAccessScopesCommand
 */
export const de_DescribeNetworkInsightsAccessScopesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAccessScopesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInsightsAccessScopesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInsightsAccessScopesResult(data, context);
  const response: DescribeNetworkInsightsAccessScopesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAccessScopesCommandError
 */
const de_DescribeNetworkInsightsAccessScopesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAccessScopesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAnalysesCommand
 */
export const de_DescribeNetworkInsightsAnalysesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAnalysesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInsightsAnalysesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInsightsAnalysesResult(data, context);
  const response: DescribeNetworkInsightsAnalysesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAnalysesCommandError
 */
const de_DescribeNetworkInsightsAnalysesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAnalysesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsPathsCommand
 */
export const de_DescribeNetworkInsightsPathsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsPathsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInsightsPathsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInsightsPathsResult(data, context);
  const response: DescribeNetworkInsightsPathsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsPathsCommandError
 */
const de_DescribeNetworkInsightsPathsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsPathsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInterfaceAttributeCommand
 */
export const de_DescribeNetworkInterfaceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfaceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInterfaceAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInterfaceAttributeResult(data, context);
  const response: DescribeNetworkInterfaceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInterfaceAttributeCommandError
 */
const de_DescribeNetworkInterfaceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfaceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInterfacePermissionsCommand
 */
export const de_DescribeNetworkInterfacePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfacePermissionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInterfacePermissionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInterfacePermissionsResult(data, context);
  const response: DescribeNetworkInterfacePermissionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInterfacePermissionsCommandError
 */
const de_DescribeNetworkInterfacePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfacePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInterfacesCommand
 */
export const de_DescribeNetworkInterfacesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfacesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInterfacesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInterfacesResult(data, context);
  const response: DescribeNetworkInterfacesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInterfacesCommandError
 */
const de_DescribeNetworkInterfacesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfacesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribePlacementGroupsCommand
 */
export const de_DescribePlacementGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePlacementGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribePlacementGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribePlacementGroupsResult(data, context);
  const response: DescribePlacementGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribePlacementGroupsCommandError
 */
const de_DescribePlacementGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePlacementGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribePrefixListsCommand
 */
export const de_DescribePrefixListsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePrefixListsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribePrefixListsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribePrefixListsResult(data, context);
  const response: DescribePrefixListsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribePrefixListsCommandError
 */
const de_DescribePrefixListsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePrefixListsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribePrincipalIdFormatCommand
 */
export const de_DescribePrincipalIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePrincipalIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribePrincipalIdFormatCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribePrincipalIdFormatResult(data, context);
  const response: DescribePrincipalIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribePrincipalIdFormatCommandError
 */
const de_DescribePrincipalIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePrincipalIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribePublicIpv4PoolsCommand
 */
export const de_DescribePublicIpv4PoolsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePublicIpv4PoolsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribePublicIpv4PoolsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribePublicIpv4PoolsResult(data, context);
  const response: DescribePublicIpv4PoolsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribePublicIpv4PoolsCommandError
 */
const de_DescribePublicIpv4PoolsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePublicIpv4PoolsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeRegionsCommand
 */
export const de_DescribeRegionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRegionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeRegionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeRegionsResult(data, context);
  const response: DescribeRegionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeRegionsCommandError
 */
const de_DescribeRegionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRegionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeReplaceRootVolumeTasksCommand
 */
export const de_DescribeReplaceRootVolumeTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReplaceRootVolumeTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeReplaceRootVolumeTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeReplaceRootVolumeTasksResult(data, context);
  const response: DescribeReplaceRootVolumeTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeReplaceRootVolumeTasksCommandError
 */
const de_DescribeReplaceRootVolumeTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReplaceRootVolumeTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeReservedInstancesCommand
 */
export const de_DescribeReservedInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeReservedInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeReservedInstancesResult(data, context);
  const response: DescribeReservedInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesCommandError
 */
const de_DescribeReservedInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeReservedInstancesListingsCommand
 */
export const de_DescribeReservedInstancesListingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesListingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeReservedInstancesListingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeReservedInstancesListingsResult(data, context);
  const response: DescribeReservedInstancesListingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesListingsCommandError
 */
const de_DescribeReservedInstancesListingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesListingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeReservedInstancesModificationsCommand
 */
export const de_DescribeReservedInstancesModificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesModificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeReservedInstancesModificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeReservedInstancesModificationsResult(data, context);
  const response: DescribeReservedInstancesModificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesModificationsCommandError
 */
const de_DescribeReservedInstancesModificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesModificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeReservedInstancesOfferingsCommand
 */
export const de_DescribeReservedInstancesOfferingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesOfferingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeReservedInstancesOfferingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeReservedInstancesOfferingsResult(data, context);
  const response: DescribeReservedInstancesOfferingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesOfferingsCommandError
 */
const de_DescribeReservedInstancesOfferingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesOfferingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeRouteTablesCommand
 */
export const de_DescribeRouteTablesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRouteTablesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeRouteTablesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeRouteTablesResult(data, context);
  const response: DescribeRouteTablesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeRouteTablesCommandError
 */
const de_DescribeRouteTablesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRouteTablesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommand
 */
export const de_DescribeScheduledInstanceAvailabilityCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledInstanceAvailabilityCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeScheduledInstanceAvailabilityCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeScheduledInstanceAvailabilityResult(data, context);
  const response: DescribeScheduledInstanceAvailabilityCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommandError
 */
const de_DescribeScheduledInstanceAvailabilityCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledInstanceAvailabilityCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeScheduledInstancesCommand
 */
export const de_DescribeScheduledInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeScheduledInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeScheduledInstancesResult(data, context);
  const response: DescribeScheduledInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeScheduledInstancesCommandError
 */
const de_DescribeScheduledInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSecurityGroupReferencesCommand
 */
export const de_DescribeSecurityGroupReferencesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupReferencesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSecurityGroupReferencesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSecurityGroupReferencesResult(data, context);
  const response: DescribeSecurityGroupReferencesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSecurityGroupReferencesCommandError
 */
const de_DescribeSecurityGroupReferencesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupReferencesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSecurityGroupRulesCommand
 */
export const de_DescribeSecurityGroupRulesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupRulesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSecurityGroupRulesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSecurityGroupRulesResult(data, context);
  const response: DescribeSecurityGroupRulesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSecurityGroupRulesCommandError
 */
const de_DescribeSecurityGroupRulesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupRulesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSecurityGroupsCommand
 */
export const de_DescribeSecurityGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSecurityGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSecurityGroupsResult(data, context);
  const response: DescribeSecurityGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSecurityGroupsCommandError
 */
const de_DescribeSecurityGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSnapshotAttributeCommand
 */
export const de_DescribeSnapshotAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSnapshotAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSnapshotAttributeResult(data, context);
  const response: DescribeSnapshotAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSnapshotAttributeCommandError
 */
const de_DescribeSnapshotAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSnapshotsCommand
 */
export const de_DescribeSnapshotsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSnapshotsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSnapshotsResult(data, context);
  const response: DescribeSnapshotsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSnapshotsCommandError
 */
const de_DescribeSnapshotsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSnapshotTierStatusCommand
 */
export const de_DescribeSnapshotTierStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotTierStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSnapshotTierStatusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSnapshotTierStatusResult(data, context);
  const response: DescribeSnapshotTierStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSnapshotTierStatusCommandError
 */
const de_DescribeSnapshotTierStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotTierStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommand
 */
export const de_DescribeSpotDatafeedSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotDatafeedSubscriptionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSpotDatafeedSubscriptionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSpotDatafeedSubscriptionResult(data, context);
  const response: DescribeSpotDatafeedSubscriptionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommandError
 */
const de_DescribeSpotDatafeedSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotDatafeedSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSpotFleetInstancesCommand
 */
export const de_DescribeSpotFleetInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSpotFleetInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSpotFleetInstancesResponse(data, context);
  const response: DescribeSpotFleetInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSpotFleetInstancesCommandError
 */
const de_DescribeSpotFleetInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSpotFleetRequestHistoryCommand
 */
export const de_DescribeSpotFleetRequestHistoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetRequestHistoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSpotFleetRequestHistoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSpotFleetRequestHistoryResponse(data, context);
  const response: DescribeSpotFleetRequestHistoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSpotFleetRequestHistoryCommandError
 */
const de_DescribeSpotFleetRequestHistoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetRequestHistoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSpotFleetRequestsCommand
 */
export const de_DescribeSpotFleetRequestsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetRequestsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSpotFleetRequestsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSpotFleetRequestsResponse(data, context);
  const response: DescribeSpotFleetRequestsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSpotFleetRequestsCommandError
 */
const de_DescribeSpotFleetRequestsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetRequestsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSpotInstanceRequestsCommand
 */
export const de_DescribeSpotInstanceRequestsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotInstanceRequestsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSpotInstanceRequestsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSpotInstanceRequestsResult(data, context);
  const response: DescribeSpotInstanceRequestsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSpotInstanceRequestsCommandError
 */
const de_DescribeSpotInstanceRequestsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotInstanceRequestsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSpotPriceHistoryCommand
 */
export const de_DescribeSpotPriceHistoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotPriceHistoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSpotPriceHistoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSpotPriceHistoryResult(data, context);
  const response: DescribeSpotPriceHistoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSpotPriceHistoryCommandError
 */
const de_DescribeSpotPriceHistoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotPriceHistoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeStaleSecurityGroupsCommand
 */
export const de_DescribeStaleSecurityGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeStaleSecurityGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeStaleSecurityGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeStaleSecurityGroupsResult(data, context);
  const response: DescribeStaleSecurityGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeStaleSecurityGroupsCommandError
 */
const de_DescribeStaleSecurityGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeStaleSecurityGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeStoreImageTasksCommand
 */
export const de_DescribeStoreImageTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeStoreImageTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeStoreImageTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeStoreImageTasksResult(data, context);
  const response: DescribeStoreImageTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeStoreImageTasksCommandError
 */
const de_DescribeStoreImageTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeStoreImageTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSubnetsCommand
 */
export const de_DescribeSubnetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSubnetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSubnetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSubnetsResult(data, context);
  const response: DescribeSubnetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSubnetsCommandError
 */
const de_DescribeSubnetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSubnetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTagsCommand
 */
export const de_DescribeTagsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTagsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTagsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTagsResult(data, context);
  const response: DescribeTagsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTagsCommandError
 */
const de_DescribeTagsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTagsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorFiltersCommand
 */
export const de_DescribeTrafficMirrorFiltersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorFiltersCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTrafficMirrorFiltersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTrafficMirrorFiltersResult(data, context);
  const response: DescribeTrafficMirrorFiltersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorFiltersCommandError
 */
const de_DescribeTrafficMirrorFiltersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorFiltersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorSessionsCommand
 */
export const de_DescribeTrafficMirrorSessionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorSessionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTrafficMirrorSessionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTrafficMirrorSessionsResult(data, context);
  const response: DescribeTrafficMirrorSessionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorSessionsCommandError
 */
const de_DescribeTrafficMirrorSessionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorSessionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorTargetsCommand
 */
export const de_DescribeTrafficMirrorTargetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorTargetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTrafficMirrorTargetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTrafficMirrorTargetsResult(data, context);
  const response: DescribeTrafficMirrorTargetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorTargetsCommandError
 */
const de_DescribeTrafficMirrorTargetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorTargetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayAttachmentsCommand
 */
export const de_DescribeTransitGatewayAttachmentsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayAttachmentsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayAttachmentsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayAttachmentsResult(data, context);
  const response: DescribeTransitGatewayAttachmentsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayAttachmentsCommandError
 */
const de_DescribeTransitGatewayAttachmentsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayAttachmentsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayConnectPeersCommand
 */
export const de_DescribeTransitGatewayConnectPeersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayConnectPeersCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayConnectPeersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayConnectPeersResult(data, context);
  const response: DescribeTransitGatewayConnectPeersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayConnectPeersCommandError
 */
const de_DescribeTransitGatewayConnectPeersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayConnectPeersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayConnectsCommand
 */
export const de_DescribeTransitGatewayConnectsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayConnectsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayConnectsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayConnectsResult(data, context);
  const response: DescribeTransitGatewayConnectsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayConnectsCommandError
 */
const de_DescribeTransitGatewayConnectsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayConnectsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand
 */
export const de_DescribeTransitGatewayMulticastDomainsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayMulticastDomainsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayMulticastDomainsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayMulticastDomainsResult(data, context);
  const response: DescribeTransitGatewayMulticastDomainsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommandError
 */
const de_DescribeTransitGatewayMulticastDomainsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayMulticastDomainsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand
 */
export const de_DescribeTransitGatewayPeeringAttachmentsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayPeeringAttachmentsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayPeeringAttachmentsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayPeeringAttachmentsResult(data, context);
  const response: DescribeTransitGatewayPeeringAttachmentsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommandError
 */
const de_DescribeTransitGatewayPeeringAttachmentsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayPeeringAttachmentsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayPolicyTablesCommand
 */
export const de_DescribeTransitGatewayPolicyTablesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayPolicyTablesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayPolicyTablesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayPolicyTablesResult(data, context);
  const response: DescribeTransitGatewayPolicyTablesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayPolicyTablesCommandError
 */
const de_DescribeTransitGatewayPolicyTablesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayPolicyTablesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayRouteTableAnnouncementsCommand
 */
export const de_DescribeTransitGatewayRouteTableAnnouncementsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayRouteTableAnnouncementsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayRouteTableAnnouncementsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayRouteTableAnnouncementsResult(data, context);
  const response: DescribeTransitGatewayRouteTableAnnouncementsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayRouteTableAnnouncementsCommandError
 */
const de_DescribeTransitGatewayRouteTableAnnouncementsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayRouteTableAnnouncementsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayRouteTablesCommand
 */
export const de_DescribeTransitGatewayRouteTablesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayRouteTablesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayRouteTablesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayRouteTablesResult(data, context);
  const response: DescribeTransitGatewayRouteTablesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayRouteTablesCommandError
 */
const de_DescribeTransitGatewayRouteTablesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayRouteTablesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewaysCommand
 */
export const de_DescribeTransitGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewaysResult(data, context);
  const response: DescribeTransitGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewaysCommandError
 */
const de_DescribeTransitGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand
 */
export const de_DescribeTransitGatewayVpcAttachmentsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayVpcAttachmentsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayVpcAttachmentsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayVpcAttachmentsResult(data, context);
  const response: DescribeTransitGatewayVpcAttachmentsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommandError
 */
const de_DescribeTransitGatewayVpcAttachmentsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayVpcAttachmentsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTrunkInterfaceAssociationsCommand
 */
export const de_DescribeTrunkInterfaceAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrunkInterfaceAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTrunkInterfaceAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTrunkInterfaceAssociationsResult(data, context);
  const response: DescribeTrunkInterfaceAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTrunkInterfaceAssociationsCommandError
 */
const de_DescribeTrunkInterfaceAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrunkInterfaceAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessEndpointsCommand
 */
export const de_DescribeVerifiedAccessEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVerifiedAccessEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVerifiedAccessEndpointsResult(data, context);
  const response: DescribeVerifiedAccessEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessEndpointsCommandError
 */
const de_DescribeVerifiedAccessEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessGroupsCommand
 */
export const de_DescribeVerifiedAccessGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVerifiedAccessGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVerifiedAccessGroupsResult(data, context);
  const response: DescribeVerifiedAccessGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessGroupsCommandError
 */
const de_DescribeVerifiedAccessGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessInstanceLoggingConfigurationsCommand
 */
export const de_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessInstanceLoggingConfigurationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVerifiedAccessInstanceLoggingConfigurationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVerifiedAccessInstanceLoggingConfigurationsResult(data, context);
  const response: DescribeVerifiedAccessInstanceLoggingConfigurationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessInstanceLoggingConfigurationsCommandError
 */
const de_DescribeVerifiedAccessInstanceLoggingConfigurationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessInstanceLoggingConfigurationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessInstancesCommand
 */
export const de_DescribeVerifiedAccessInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVerifiedAccessInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVerifiedAccessInstancesResult(data, context);
  const response: DescribeVerifiedAccessInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessInstancesCommandError
 */
const de_DescribeVerifiedAccessInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessTrustProvidersCommand
 */
export const de_DescribeVerifiedAccessTrustProvidersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessTrustProvidersCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVerifiedAccessTrustProvidersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVerifiedAccessTrustProvidersResult(data, context);
  const response: DescribeVerifiedAccessTrustProvidersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessTrustProvidersCommandError
 */
const de_DescribeVerifiedAccessTrustProvidersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessTrustProvidersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVolumeAttributeCommand
 */
export const de_DescribeVolumeAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumeAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVolumeAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVolumeAttributeResult(data, context);
  const response: DescribeVolumeAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVolumeAttributeCommandError
 */
const de_DescribeVolumeAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumeAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVolumesCommand
 */
export const de_DescribeVolumesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVolumesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVolumesResult(data, context);
  const response: DescribeVolumesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVolumesCommandError
 */
const de_DescribeVolumesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVolumesModificationsCommand
 */
export const de_DescribeVolumesModificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumesModificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVolumesModificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVolumesModificationsResult(data, context);
  const response: DescribeVolumesModificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVolumesModificationsCommandError
 */
const de_DescribeVolumesModificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumesModificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVolumeStatusCommand
 */
export const de_DescribeVolumeStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumeStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVolumeStatusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVolumeStatusResult(data, context);
  const response: DescribeVolumeStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVolumeStatusCommandError
 */
const de_DescribeVolumeStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumeStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcAttributeCommand
 */
export const de_DescribeVpcAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcAttributeResult(data, context);
  const response: DescribeVpcAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcAttributeCommandError
 */
const de_DescribeVpcAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcClassicLinkCommand
 */
export const de_DescribeVpcClassicLinkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcClassicLinkCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcClassicLinkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcClassicLinkResult(data, context);
  const response: DescribeVpcClassicLinkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcClassicLinkCommandError
 */
const de_DescribeVpcClassicLinkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcClassicLinkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand
 */
export const de_DescribeVpcClassicLinkDnsSupportCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcClassicLinkDnsSupportCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcClassicLinkDnsSupportCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcClassicLinkDnsSupportResult(data, context);
  const response: DescribeVpcClassicLinkDnsSupportCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommandError
 */
const de_DescribeVpcClassicLinkDnsSupportCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcClassicLinkDnsSupportCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand
 */
export const de_DescribeVpcEndpointConnectionNotificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointConnectionNotificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcEndpointConnectionNotificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcEndpointConnectionNotificationsResult(data, context);
  const response: DescribeVpcEndpointConnectionNotificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommandError
 */
const de_DescribeVpcEndpointConnectionNotificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointConnectionNotificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcEndpointConnectionsCommand
 */
export const de_DescribeVpcEndpointConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcEndpointConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcEndpointConnectionsResult(data, context);
  const response: DescribeVpcEndpointConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointConnectionsCommandError
 */
const de_DescribeVpcEndpointConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcEndpointsCommand
 */
export const de_DescribeVpcEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcEndpointsResult(data, context);
  const response: DescribeVpcEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointsCommandError
 */
const de_DescribeVpcEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand
 */
export const de_DescribeVpcEndpointServiceConfigurationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServiceConfigurationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcEndpointServiceConfigurationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcEndpointServiceConfigurationsResult(data, context);
  const response: DescribeVpcEndpointServiceConfigurationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommandError
 */
const de_DescribeVpcEndpointServiceConfigurationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServiceConfigurationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommand
 */
export const de_DescribeVpcEndpointServicePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServicePermissionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcEndpointServicePermissionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcEndpointServicePermissionsResult(data, context);
  const response: DescribeVpcEndpointServicePermissionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommandError
 */
const de_DescribeVpcEndpointServicePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServicePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServicesCommand
 */
export const de_DescribeVpcEndpointServicesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServicesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcEndpointServicesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcEndpointServicesResult(data, context);
  const response: DescribeVpcEndpointServicesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServicesCommandError
 */
const de_DescribeVpcEndpointServicesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServicesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcPeeringConnectionsCommand
 */
export const de_DescribeVpcPeeringConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcPeeringConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcPeeringConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcPeeringConnectionsResult(data, context);
  const response: DescribeVpcPeeringConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcPeeringConnectionsCommandError
 */
const de_DescribeVpcPeeringConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcPeeringConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcsCommand
 */
export const de_DescribeVpcsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcsResult(data, context);
  const response: DescribeVpcsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcsCommandError
 */
const de_DescribeVpcsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpnConnectionsCommand
 */
export const de_DescribeVpnConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpnConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpnConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpnConnectionsResult(data, context);
  const response: DescribeVpnConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpnConnectionsCommandError
 */
const de_DescribeVpnConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpnConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpnGatewaysCommand
 */
export const de_DescribeVpnGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpnGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpnGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpnGatewaysResult(data, context);
  const response: DescribeVpnGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpnGatewaysCommandError
 */
const de_DescribeVpnGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpnGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DetachClassicLinkVpcCommand
 */
export const de_DetachClassicLinkVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachClassicLinkVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DetachClassicLinkVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DetachClassicLinkVpcResult(data, context);
  const response: DetachClassicLinkVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DetachClassicLinkVpcCommandError
 */
const de_DetachClassicLinkVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachClassicLinkVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DetachInternetGatewayCommand
 */
export const de_DetachInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DetachInternetGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DetachInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DetachInternetGatewayCommandError
 */
const de_DetachInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DetachNetworkInterfaceCommand
 */
export const de_DetachNetworkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachNetworkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DetachNetworkInterfaceCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DetachNetworkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DetachNetworkInterfaceCommandError
 */
const de_DetachNetworkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachNetworkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DetachVerifiedAccessTrustProviderCommand
 */
export const de_DetachVerifiedAccessTrustProviderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVerifiedAccessTrustProviderCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DetachVerifiedAccessTrustProviderCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DetachVerifiedAccessTrustProviderResult(data, context);
  const response: DetachVerifiedAccessTrustProviderCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DetachVerifiedAccessTrustProviderCommandError
 */
const de_DetachVerifiedAccessTrustProviderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVerifiedAccessTrustProviderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DetachVolumeCommand
 */
export const de_DetachVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DetachVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_VolumeAttachment(data, context);
  const response: DetachVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DetachVolumeCommandError
 */
const de_DetachVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DetachVpnGatewayCommand
 */
export const de_DetachVpnGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVpnGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DetachVpnGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DetachVpnGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DetachVpnGatewayCommandError
 */
const de_DetachVpnGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVpnGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableAddressTransferCommand
 */
export const de_DisableAddressTransferCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableAddressTransferCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableAddressTransferCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableAddressTransferResult(data, context);
  const response: DisableAddressTransferCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableAddressTransferCommandError
 */
const de_DisableAddressTransferCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableAddressTransferCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableAwsNetworkPerformanceMetricSubscriptionCommand
 */
export const de_DisableAwsNetworkPerformanceMetricSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableAwsNetworkPerformanceMetricSubscriptionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableAwsNetworkPerformanceMetricSubscriptionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableAwsNetworkPerformanceMetricSubscriptionResult(data, context);
  const response: DisableAwsNetworkPerformanceMetricSubscriptionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableAwsNetworkPerformanceMetricSubscriptionCommandError
 */
const de_DisableAwsNetworkPerformanceMetricSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableAwsNetworkPerformanceMetricSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableEbsEncryptionByDefaultCommand
 */
export const de_DisableEbsEncryptionByDefaultCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableEbsEncryptionByDefaultCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableEbsEncryptionByDefaultCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableEbsEncryptionByDefaultResult(data, context);
  const response: DisableEbsEncryptionByDefaultCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableEbsEncryptionByDefaultCommandError
 */
const de_DisableEbsEncryptionByDefaultCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableEbsEncryptionByDefaultCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableFastLaunchCommand
 */
export const de_DisableFastLaunchCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableFastLaunchCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableFastLaunchCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableFastLaunchResult(data, context);
  const response: DisableFastLaunchCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableFastLaunchCommandError
 */
const de_DisableFastLaunchCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableFastLaunchCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoresCommand
 */
export const de_DisableFastSnapshotRestoresCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableFastSnapshotRestoresCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableFastSnapshotRestoresCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableFastSnapshotRestoresResult(data, context);
  const response: DisableFastSnapshotRestoresCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoresCommandError
 */
const de_DisableFastSnapshotRestoresCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableFastSnapshotRestoresCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableImageCommand
 */
export const de_DisableImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableImageResult(data, context);
  const response: DisableImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableImageCommandError
 */
const de_DisableImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableImageBlockPublicAccessCommand
 */
export const de_DisableImageBlockPublicAccessCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableImageBlockPublicAccessCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableImageBlockPublicAccessCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableImageBlockPublicAccessResult(data, context);
  const response: DisableImageBlockPublicAccessCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableImageBlockPublicAccessCommandError
 */
const de_DisableImageBlockPublicAccessCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableImageBlockPublicAccessCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableImageDeprecationCommand
 */
export const de_DisableImageDeprecationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableImageDeprecationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableImageDeprecationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableImageDeprecationResult(data, context);
  const response: DisableImageDeprecationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableImageDeprecationCommandError
 */
const de_DisableImageDeprecationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableImageDeprecationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableIpamOrganizationAdminAccountCommand
 */
export const de_DisableIpamOrganizationAdminAccountCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableIpamOrganizationAdminAccountCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableIpamOrganizationAdminAccountCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableIpamOrganizationAdminAccountResult(data, context);
  const response: DisableIpamOrganizationAdminAccountCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableIpamOrganizationAdminAccountCommandError
 */
const de_DisableIpamOrganizationAdminAccountCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableIpamOrganizationAdminAccountCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableSerialConsoleAccessCommand
 */
export const de_DisableSerialConsoleAccessCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableSerialConsoleAccessCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableSerialConsoleAccessCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableSerialConsoleAccessResult(data, context);
  const response: DisableSerialConsoleAccessCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableSerialConsoleAccessCommandError
 */
const de_DisableSerialConsoleAccessCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableSerialConsoleAccessCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand
 */
export const de_DisableTransitGatewayRouteTablePropagationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableTransitGatewayRouteTablePropagationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableTransitGatewayRouteTablePropagationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableTransitGatewayRouteTablePropagationResult(data, context);
  const response: DisableTransitGatewayRouteTablePropagationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommandError
 */
const de_DisableTransitGatewayRouteTablePropagationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableTransitGatewayRouteTablePropagationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableVgwRoutePropagationCommand
 */
export const de_DisableVgwRoutePropagationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVgwRoutePropagationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableVgwRoutePropagationCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DisableVgwRoutePropagationCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DisableVgwRoutePropagationCommandError
 */
const de_DisableVgwRoutePropagationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVgwRoutePropagationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableVpcClassicLinkCommand
 */
export const de_DisableVpcClassicLinkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVpcClassicLinkCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableVpcClassicLinkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableVpcClassicLinkResult(data, context);
  const response: DisableVpcClassicLinkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableVpcClassicLinkCommandError
 */
const de_DisableVpcClassicLinkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVpcClassicLinkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommand
 */
export const de_DisableVpcClassicLinkDnsSupportCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVpcClassicLinkDnsSupportCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableVpcClassicLinkDnsSupportCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableVpcClassicLinkDnsSupportResult(data, context);
  const response: DisableVpcClassicLinkDnsSupportCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommandError
 */
const de_DisableVpcClassicLinkDnsSupportCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVpcClassicLinkDnsSupportCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateAddressCommand
 */
export const de_DisassociateAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateAddressCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DisassociateAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateAddressCommandError
 */
const de_DisassociateAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateClientVpnTargetNetworkCommand
 */
export const de_DisassociateClientVpnTargetNetworkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateClientVpnTargetNetworkCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateClientVpnTargetNetworkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateClientVpnTargetNetworkResult(data, context);
  const response: DisassociateClientVpnTargetNetworkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateClientVpnTargetNetworkCommandError
 */
const de_DisassociateClientVpnTargetNetworkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateClientVpnTargetNetworkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand
 */
export const de_DisassociateEnclaveCertificateIamRoleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateEnclaveCertificateIamRoleCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateEnclaveCertificateIamRoleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateEnclaveCertificateIamRoleResult(data, context);
  const response: DisassociateEnclaveCertificateIamRoleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommandError
 */
const de_DisassociateEnclaveCertificateIamRoleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateEnclaveCertificateIamRoleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateIamInstanceProfileCommand
 */
export const de_DisassociateIamInstanceProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateIamInstanceProfileCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateIamInstanceProfileCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateIamInstanceProfileResult(data, context);
  const response: DisassociateIamInstanceProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateIamInstanceProfileCommandError
 */
const de_DisassociateIamInstanceProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateIamInstanceProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateInstanceEventWindowCommand
 */
export const de_DisassociateInstanceEventWindowCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateInstanceEventWindowCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateInstanceEventWindowCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateInstanceEventWindowResult(data, context);
  const response: DisassociateInstanceEventWindowCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateInstanceEventWindowCommandError
 */
const de_DisassociateInstanceEventWindowCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateInstanceEventWindowCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateIpamResourceDiscoveryCommand
 */
export const de_DisassociateIpamResourceDiscoveryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateIpamResourceDiscoveryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateIpamResourceDiscoveryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateIpamResourceDiscoveryResult(data, context);
  const response: DisassociateIpamResourceDiscoveryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateIpamResourceDiscoveryCommandError
 */
const de_DisassociateIpamResourceDiscoveryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateIpamResourceDiscoveryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateNatGatewayAddressCommand
 */
export const de_DisassociateNatGatewayAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateNatGatewayAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateNatGatewayAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateNatGatewayAddressResult(data, context);
  const response: DisassociateNatGatewayAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateNatGatewayAddressCommandError
 */
const de_DisassociateNatGatewayAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateNatGatewayAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateRouteTableCommand
 */
export const de_DisassociateRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateRouteTableCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DisassociateRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateRouteTableCommandError
 */
const de_DisassociateRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateSubnetCidrBlockCommand
 */
export const de_DisassociateSubnetCidrBlockCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateSubnetCidrBlockCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateSubnetCidrBlockCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateSubnetCidrBlockResult(data, context);
  const response: DisassociateSubnetCidrBlockCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateSubnetCidrBlockCommandError
 */
const de_DisassociateSubnetCidrBlockCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateSubnetCidrBlockCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand
 */
export const de_DisassociateTransitGatewayMulticastDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayMulticastDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateTransitGatewayMulticastDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateTransitGatewayMulticastDomainResult(data, context);
  const response: DisassociateTransitGatewayMulticastDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommandError
 */
const de_DisassociateTransitGatewayMulticastDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayMulticastDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayPolicyTableCommand
 */
export const de_DisassociateTransitGatewayPolicyTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayPolicyTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateTransitGatewayPolicyTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateTransitGatewayPolicyTableResult(data, context);
  const response: DisassociateTransitGatewayPolicyTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayPolicyTableCommandError
 */
const de_DisassociateTransitGatewayPolicyTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayPolicyTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayRouteTableCommand
 */
export const de_DisassociateTransitGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateTransitGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateTransitGatewayRouteTableResult(data, context);
  const response: DisassociateTransitGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayRouteTableCommandError
 */
const de_DisassociateTransitGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateTrunkInterfaceCommand
 */
export const de_DisassociateTrunkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTrunkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateTrunkInterfaceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateTrunkInterfaceResult(data, context);
  const response: DisassociateTrunkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateTrunkInterfaceCommandError
 */
const de_DisassociateTrunkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTrunkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateVpcCidrBlockCommand
 */
export const de_DisassociateVpcCidrBlockCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateVpcCidrBlockCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateVpcCidrBlockCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateVpcCidrBlockResult(data, context);
  const response: DisassociateVpcCidrBlockCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateVpcCidrBlockCommandError
 */
const de_DisassociateVpcCidrBlockCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateVpcCidrBlockCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableAddressTransferCommand
 */
export const de_EnableAddressTransferCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableAddressTransferCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableAddressTransferCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableAddressTransferResult(data, context);
  const response: EnableAddressTransferCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableAddressTransferCommandError
 */
const de_EnableAddressTransferCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableAddressTransferCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableAwsNetworkPerformanceMetricSubscriptionCommand
 */
export const de_EnableAwsNetworkPerformanceMetricSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableAwsNetworkPerformanceMetricSubscriptionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableAwsNetworkPerformanceMetricSubscriptionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableAwsNetworkPerformanceMetricSubscriptionResult(data, context);
  const response: EnableAwsNetworkPerformanceMetricSubscriptionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableAwsNetworkPerformanceMetricSubscriptionCommandError
 */
const de_EnableAwsNetworkPerformanceMetricSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableAwsNetworkPerformanceMetricSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableEbsEncryptionByDefaultCommand
 */
export const de_EnableEbsEncryptionByDefaultCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableEbsEncryptionByDefaultCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableEbsEncryptionByDefaultCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableEbsEncryptionByDefaultResult(data, context);
  const response: EnableEbsEncryptionByDefaultCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableEbsEncryptionByDefaultCommandError
 */
const de_EnableEbsEncryptionByDefaultCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableEbsEncryptionByDefaultCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableFastLaunchCommand
 */
export const de_EnableFastLaunchCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableFastLaunchCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableFastLaunchCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableFastLaunchResult(data, context);
  const response: EnableFastLaunchCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableFastLaunchCommandError
 */
const de_EnableFastLaunchCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableFastLaunchCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoresCommand
 */
export const de_EnableFastSnapshotRestoresCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableFastSnapshotRestoresCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableFastSnapshotRestoresCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableFastSnapshotRestoresResult(data, context);
  const response: EnableFastSnapshotRestoresCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoresCommandError
 */
const de_EnableFastSnapshotRestoresCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableFastSnapshotRestoresCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableImageCommand
 */
export const de_EnableImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableImageResult(data, context);
  const response: EnableImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableImageCommandError
 */
const de_EnableImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableImageBlockPublicAccessCommand
 */
export const de_EnableImageBlockPublicAccessCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableImageBlockPublicAccessCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableImageBlockPublicAccessCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableImageBlockPublicAccessResult(data, context);
  const response: EnableImageBlockPublicAccessCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableImageBlockPublicAccessCommandError
 */
const de_EnableImageBlockPublicAccessCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableImageBlockPublicAccessCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableImageDeprecationCommand
 */
export const de_EnableImageDeprecationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableImageDeprecationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableImageDeprecationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableImageDeprecationResult(data, context);
  const response: EnableImageDeprecationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableImageDeprecationCommandError
 */
const de_EnableImageDeprecationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableImageDeprecationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableIpamOrganizationAdminAccountCommand
 */
export const de_EnableIpamOrganizationAdminAccountCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableIpamOrganizationAdminAccountCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableIpamOrganizationAdminAccountCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableIpamOrganizationAdminAccountResult(data, context);
  const response: EnableIpamOrganizationAdminAccountCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableIpamOrganizationAdminAccountCommandError
 */
const de_EnableIpamOrganizationAdminAccountCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableIpamOrganizationAdminAccountCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableReachabilityAnalyzerOrganizationSharingCommand
 */
export const de_EnableReachabilityAnalyzerOrganizationSharingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableReachabilityAnalyzerOrganizationSharingCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableReachabilityAnalyzerOrganizationSharingCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableReachabilityAnalyzerOrganizationSharingResult(data, context);
  const response: EnableReachabilityAnalyzerOrganizationSharingCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableReachabilityAnalyzerOrganizationSharingCommandError
 */
const de_EnableReachabilityAnalyzerOrganizationSharingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableReachabilityAnalyzerOrganizationSharingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableSerialConsoleAccessCommand
 */
export const de_EnableSerialConsoleAccessCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableSerialConsoleAccessCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableSerialConsoleAccessCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableSerialConsoleAccessResult(data, context);
  const response: EnableSerialConsoleAccessCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableSerialConsoleAccessCommandError
 */
const de_EnableSerialConsoleAccessCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableSerialConsoleAccessCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand
 */
export const de_EnableTransitGatewayRouteTablePropagationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableTransitGatewayRouteTablePropagationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableTransitGatewayRouteTablePropagationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableTransitGatewayRouteTablePropagationResult(data, context);
  const response: EnableTransitGatewayRouteTablePropagationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommandError
 */
const de_EnableTransitGatewayRouteTablePropagationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableTransitGatewayRouteTablePropagationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableVgwRoutePropagationCommand
 */
export const de_EnableVgwRoutePropagationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVgwRoutePropagationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableVgwRoutePropagationCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: EnableVgwRoutePropagationCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2EnableVgwRoutePropagationCommandError
 */
const de_EnableVgwRoutePropagationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVgwRoutePropagationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableVolumeIOCommand
 */
export const de_EnableVolumeIOCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVolumeIOCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableVolumeIOCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: EnableVolumeIOCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2EnableVolumeIOCommandError
 */
const de_EnableVolumeIOCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVolumeIOCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableVpcClassicLinkCommand
 */
export const de_EnableVpcClassicLinkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVpcClassicLinkCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableVpcClassicLinkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableVpcClassicLinkResult(data, context);
  const response: EnableVpcClassicLinkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableVpcClassicLinkCommandError
 */
const de_EnableVpcClassicLinkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVpcClassicLinkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommand
 */
export const de_EnableVpcClassicLinkDnsSupportCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVpcClassicLinkDnsSupportCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableVpcClassicLinkDnsSupportCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableVpcClassicLinkDnsSupportResult(data, context);
  const response: EnableVpcClassicLinkDnsSupportCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommandError
 */
const de_EnableVpcClassicLinkDnsSupportCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVpcClassicLinkDnsSupportCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand
 */
export const de_ExportClientVpnClientCertificateRevocationListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportClientVpnClientCertificateRevocationListCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ExportClientVpnClientCertificateRevocationListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ExportClientVpnClientCertificateRevocationListResult(data, context);
  const response: ExportClientVpnClientCertificateRevocationListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommandError
 */
const de_ExportClientVpnClientCertificateRevocationListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportClientVpnClientCertificateRevocationListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ExportClientVpnClientConfigurationCommand
 */
export const de_ExportClientVpnClientConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportClientVpnClientConfigurationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ExportClientVpnClientConfigurationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ExportClientVpnClientConfigurationResult(data, context);
  const response: ExportClientVpnClientConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ExportClientVpnClientConfigurationCommandError
 */
const de_ExportClientVpnClientConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportClientVpnClientConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ExportImageCommand
 */
export const de_ExportImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ExportImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ExportImageResult(data, context);
  const response: ExportImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ExportImageCommandError
 */
const de_ExportImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ExportTransitGatewayRoutesCommand
 */
export const de_ExportTransitGatewayRoutesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportTransitGatewayRoutesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ExportTransitGatewayRoutesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ExportTransitGatewayRoutesResult(data, context);
  const response: ExportTransitGatewayRoutesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ExportTransitGatewayRoutesCommandError
 */
const de_ExportTransitGatewayRoutesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportTransitGatewayRoutesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand
 */
export const de_GetAssociatedEnclaveCertificateIamRolesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAssociatedEnclaveCertificateIamRolesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetAssociatedEnclaveCertificateIamRolesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetAssociatedEnclaveCertificateIamRolesResult(data, context);
  const response: GetAssociatedEnclaveCertificateIamRolesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommandError
 */
const de_GetAssociatedEnclaveCertificateIamRolesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAssociatedEnclaveCertificateIamRolesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommand
 */
export const de_GetAssociatedIpv6PoolCidrsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAssociatedIpv6PoolCidrsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetAssociatedIpv6PoolCidrsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetAssociatedIpv6PoolCidrsResult(data, context);
  const response: GetAssociatedIpv6PoolCidrsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommandError
 */
const de_GetAssociatedIpv6PoolCidrsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAssociatedIpv6PoolCidrsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetAwsNetworkPerformanceDataCommand
 */
export const de_GetAwsNetworkPerformanceDataCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAwsNetworkPerformanceDataCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetAwsNetworkPerformanceDataCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetAwsNetworkPerformanceDataResult(data, context);
  const response: GetAwsNetworkPerformanceDataCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetAwsNetworkPerformanceDataCommandError
 */
const de_GetAwsNetworkPerformanceDataCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAwsNetworkPerformanceDataCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetCapacityReservationUsageCommand
 */
export const de_GetCapacityReservationUsageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCapacityReservationUsageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetCapacityReservationUsageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetCapacityReservationUsageResult(data, context);
  const response: GetCapacityReservationUsageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetCapacityReservationUsageCommandError
 */
const de_GetCapacityReservationUsageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCapacityReservationUsageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetCoipPoolUsageCommand
 */
export const de_GetCoipPoolUsageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCoipPoolUsageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetCoipPoolUsageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetCoipPoolUsageResult(data, context);
  const response: GetCoipPoolUsageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetCoipPoolUsageCommandError
 */
const de_GetCoipPoolUsageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCoipPoolUsageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetConsoleOutputCommand
 */
export const de_GetConsoleOutputCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetConsoleOutputCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetConsoleOutputCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetConsoleOutputResult(data, context);
  const response: GetConsoleOutputCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetConsoleOutputCommandError
 */
const de_GetConsoleOutputCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetConsoleOutputCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetConsoleScreenshotCommand
 */
export const de_GetConsoleScreenshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetConsoleScreenshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetConsoleScreenshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetConsoleScreenshotResult(data, context);
  const response: GetConsoleScreenshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetConsoleScreenshotCommandError
 */
const de_GetConsoleScreenshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetConsoleScreenshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetDefaultCreditSpecificationCommand
 */
export const de_GetDefaultCreditSpecificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetDefaultCreditSpecificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetDefaultCreditSpecificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetDefaultCreditSpecificationResult(data, context);
  const response: GetDefaultCreditSpecificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetDefaultCreditSpecificationCommandError
 */
const de_GetDefaultCreditSpecificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetDefaultCreditSpecificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetEbsDefaultKmsKeyIdCommand
 */
export const de_GetEbsDefaultKmsKeyIdCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEbsDefaultKmsKeyIdCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetEbsDefaultKmsKeyIdCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetEbsDefaultKmsKeyIdResult(data, context);
  const response: GetEbsDefaultKmsKeyIdCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetEbsDefaultKmsKeyIdCommandError
 */
const de_GetEbsDefaultKmsKeyIdCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEbsDefaultKmsKeyIdCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetEbsEncryptionByDefaultCommand
 */
export const de_GetEbsEncryptionByDefaultCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEbsEncryptionByDefaultCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetEbsEncryptionByDefaultCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetEbsEncryptionByDefaultResult(data, context);
  const response: GetEbsEncryptionByDefaultCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetEbsEncryptionByDefaultCommandError
 */
const de_GetEbsEncryptionByDefaultCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEbsEncryptionByDefaultCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetFlowLogsIntegrationTemplateCommand
 */
export const de_GetFlowLogsIntegrationTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetFlowLogsIntegrationTemplateCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetFlowLogsIntegrationTemplateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetFlowLogsIntegrationTemplateResult(data, context);
  const response: GetFlowLogsIntegrationTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetFlowLogsIntegrationTemplateCommandError
 */
const de_GetFlowLogsIntegrationTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetFlowLogsIntegrationTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetGroupsForCapacityReservationCommand
 */
export const de_GetGroupsForCapacityReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetGroupsForCapacityReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetGroupsForCapacityReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetGroupsForCapacityReservationResult(data, context);
  const response: GetGroupsForCapacityReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetGroupsForCapacityReservationCommandError
 */
const de_GetGroupsForCapacityReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetGroupsForCapacityReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetHostReservationPurchasePreviewCommand
 */
export const de_GetHostReservationPurchasePreviewCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetHostReservationPurchasePreviewCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetHostReservationPurchasePreviewCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetHostReservationPurchasePreviewResult(data, context);
  const response: GetHostReservationPurchasePreviewCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetHostReservationPurchasePreviewCommandError
 */
const de_GetHostReservationPurchasePreviewCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetHostReservationPurchasePreviewCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetImageBlockPublicAccessStateCommand
 */
export const de_GetImageBlockPublicAccessStateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetImageBlockPublicAccessStateCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetImageBlockPublicAccessStateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetImageBlockPublicAccessStateResult(data, context);
  const response: GetImageBlockPublicAccessStateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetImageBlockPublicAccessStateCommandError
 */
const de_GetImageBlockPublicAccessStateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetImageBlockPublicAccessStateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand
 */
export const de_GetInstanceTypesFromInstanceRequirementsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetInstanceTypesFromInstanceRequirementsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetInstanceTypesFromInstanceRequirementsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetInstanceTypesFromInstanceRequirementsResult(data, context);
  const response: GetInstanceTypesFromInstanceRequirementsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommandError
 */
const de_GetInstanceTypesFromInstanceRequirementsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetInstanceTypesFromInstanceRequirementsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetInstanceUefiDataCommand
 */
export const de_GetInstanceUefiDataCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetInstanceUefiDataCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetInstanceUefiDataCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetInstanceUefiDataResult(data, context);
  const response: GetInstanceUefiDataCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetInstanceUefiDataCommandError
 */
const de_GetInstanceUefiDataCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetInstanceUefiDataCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetIpamAddressHistoryCommand
 */
export const de_GetIpamAddressHistoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamAddressHistoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetIpamAddressHistoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetIpamAddressHistoryResult(data, context);
  const response: GetIpamAddressHistoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetIpamAddressHistoryCommandError
 */
const de_GetIpamAddressHistoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamAddressHistoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetIpamDiscoveredAccountsCommand
 */
export const de_GetIpamDiscoveredAccountsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamDiscoveredAccountsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetIpamDiscoveredAccountsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetIpamDiscoveredAccountsResult(data, context);
  const response: GetIpamDiscoveredAccountsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetIpamDiscoveredAccountsCommandError
 */
const de_GetIpamDiscoveredAccountsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamDiscoveredAccountsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetIpamDiscoveredResourceCidrsCommand
 */
export const de_GetIpamDiscoveredResourceCidrsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamDiscoveredResourceCidrsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetIpamDiscoveredResourceCidrsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetIpamDiscoveredResourceCidrsResult(data, context);
  const response: GetIpamDiscoveredResourceCidrsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetIpamDiscoveredResourceCidrsCommandError
 */
const de_GetIpamDiscoveredResourceCidrsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamDiscoveredResourceCidrsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetIpamPoolAllocationsCommand
 */
export const de_GetIpamPoolAllocationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamPoolAllocationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetIpamPoolAllocationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetIpamPoolAllocationsResult(data, context);
  const response: GetIpamPoolAllocationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetIpamPoolAllocationsCommandError
 */
const de_GetIpamPoolAllocationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamPoolAllocationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetIpamPoolCidrsCommand
 */
export const de_GetIpamPoolCidrsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamPoolCidrsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetIpamPoolCidrsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetIpamPoolCidrsResult(data, context);
  const response: GetIpamPoolCidrsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetIpamPoolCidrsCommandError
 */
const de_GetIpamPoolCidrsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamPoolCidrsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetIpamResourceCidrsCommand
 */
export const de_GetIpamResourceCidrsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamResourceCidrsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetIpamResourceCidrsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetIpamResourceCidrsResult(data, context);
  const response: GetIpamResourceCidrsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetIpamResourceCidrsCommandError
 */
const de_GetIpamResourceCidrsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamResourceCidrsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetLaunchTemplateDataCommand
 */
export const de_GetLaunchTemplateDataCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetLaunchTemplateDataCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetLaunchTemplateDataCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetLaunchTemplateDataResult(data, context);
  const response: GetLaunchTemplateDataCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetLaunchTemplateDataCommandError
 */
const de_GetLaunchTemplateDataCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetLaunchTemplateDataCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetManagedPrefixListAssociationsCommand
 */
export const de_GetManagedPrefixListAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetManagedPrefixListAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetManagedPrefixListAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetManagedPrefixListAssociationsResult(data, context);
  const response: GetManagedPrefixListAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetManagedPrefixListAssociationsCommandError
 */
const de_GetManagedPrefixListAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetManagedPrefixListAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetManagedPrefixListEntriesCommand
 */
export const de_GetManagedPrefixListEntriesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetManagedPrefixListEntriesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetManagedPrefixListEntriesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetManagedPrefixListEntriesResult(data, context);
  const response: GetManagedPrefixListEntriesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetManagedPrefixListEntriesCommandError
 */
const de_GetManagedPrefixListEntriesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetManagedPrefixListEntriesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand
 */
export const de_GetNetworkInsightsAccessScopeAnalysisFindingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetNetworkInsightsAccessScopeAnalysisFindingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetNetworkInsightsAccessScopeAnalysisFindingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetNetworkInsightsAccessScopeAnalysisFindingsResult(data, context);
  const response: GetNetworkInsightsAccessScopeAnalysisFindingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommandError
 */
const de_GetNetworkInsightsAccessScopeAnalysisFindingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetNetworkInsightsAccessScopeAnalysisFindingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetNetworkInsightsAccessScopeContentCommand
 */
export const de_GetNetworkInsightsAccessScopeContentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetNetworkInsightsAccessScopeContentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetNetworkInsightsAccessScopeContentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetNetworkInsightsAccessScopeContentResult(data, context);
  const response: GetNetworkInsightsAccessScopeContentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetNetworkInsightsAccessScopeContentCommandError
 */
const de_GetNetworkInsightsAccessScopeContentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetNetworkInsightsAccessScopeContentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetPasswordDataCommand
 */
export const de_GetPasswordDataCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetPasswordDataCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetPasswordDataCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetPasswordDataResult(data, context);
  const response: GetPasswordDataCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetPasswordDataCommandError
 */
const de_GetPasswordDataCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetPasswordDataCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetReservedInstancesExchangeQuoteCommand
 */
export const de_GetReservedInstancesExchangeQuoteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetReservedInstancesExchangeQuoteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetReservedInstancesExchangeQuoteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetReservedInstancesExchangeQuoteResult(data, context);
  const response: GetReservedInstancesExchangeQuoteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetReservedInstancesExchangeQuoteCommandError
 */
const de_GetReservedInstancesExchangeQuoteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetReservedInstancesExchangeQuoteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetSerialConsoleAccessStatusCommand
 */
export const de_GetSerialConsoleAccessStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSerialConsoleAccessStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetSerialConsoleAccessStatusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetSerialConsoleAccessStatusResult(data, context);
  const response: GetSerialConsoleAccessStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetSerialConsoleAccessStatusCommandError
 */
const de_GetSerialConsoleAccessStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSerialConsoleAccessStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetSpotPlacementScoresCommand
 */
export const de_GetSpotPlacementScoresCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSpotPlacementScoresCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetSpotPlacementScoresCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetSpotPlacementScoresResult(data, context);
  const response: GetSpotPlacementScoresCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetSpotPlacementScoresCommandError
 */
const de_GetSpotPlacementScoresCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSpotPlacementScoresCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetSubnetCidrReservationsCommand
 */
export const de_GetSubnetCidrReservationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSubnetCidrReservationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetSubnetCidrReservationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetSubnetCidrReservationsResult(data, context);
  const response: GetSubnetCidrReservationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetSubnetCidrReservationsCommandError
 */
const de_GetSubnetCidrReservationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSubnetCidrReservationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand
 */
export const de_GetTransitGatewayAttachmentPropagationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayAttachmentPropagationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayAttachmentPropagationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayAttachmentPropagationsResult(data, context);
  const response: GetTransitGatewayAttachmentPropagationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommandError
 */
const de_GetTransitGatewayAttachmentPropagationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayAttachmentPropagationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand
 */
export const de_GetTransitGatewayMulticastDomainAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayMulticastDomainAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayMulticastDomainAssociationsResult(data, context);
  const response: GetTransitGatewayMulticastDomainAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommandError
 */
const de_GetTransitGatewayMulticastDomainAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayPolicyTableAssociationsCommand
 */
export const de_GetTransitGatewayPolicyTableAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPolicyTableAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayPolicyTableAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayPolicyTableAssociationsResult(data, context);
  const response: GetTransitGatewayPolicyTableAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayPolicyTableAssociationsCommandError
 */
const de_GetTransitGatewayPolicyTableAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPolicyTableAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayPolicyTableEntriesCommand
 */
export const de_GetTransitGatewayPolicyTableEntriesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPolicyTableEntriesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayPolicyTableEntriesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayPolicyTableEntriesResult(data, context);
  const response: GetTransitGatewayPolicyTableEntriesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayPolicyTableEntriesCommandError
 */
const de_GetTransitGatewayPolicyTableEntriesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPolicyTableEntriesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommand
 */
export const de_GetTransitGatewayPrefixListReferencesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPrefixListReferencesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayPrefixListReferencesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayPrefixListReferencesResult(data, context);
  const response: GetTransitGatewayPrefixListReferencesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommandError
 */
const de_GetTransitGatewayPrefixListReferencesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPrefixListReferencesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand
 */
export const de_GetTransitGatewayRouteTableAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayRouteTableAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayRouteTableAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayRouteTableAssociationsResult(data, context);
  const response: GetTransitGatewayRouteTableAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommandError
 */
const de_GetTransitGatewayRouteTableAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayRouteTableAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand
 */
export const de_GetTransitGatewayRouteTablePropagationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayRouteTablePropagationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayRouteTablePropagationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayRouteTablePropagationsResult(data, context);
  const response: GetTransitGatewayRouteTablePropagationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommandError
 */
const de_GetTransitGatewayRouteTablePropagationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayRouteTablePropagationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetVerifiedAccessEndpointPolicyCommand
 */
export const de_GetVerifiedAccessEndpointPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVerifiedAccessEndpointPolicyCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetVerifiedAccessEndpointPolicyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetVerifiedAccessEndpointPolicyResult(data, context);
  const response: GetVerifiedAccessEndpointPolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetVerifiedAccessEndpointPolicyCommandError
 */
const de_GetVerifiedAccessEndpointPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVerifiedAccessEndpointPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetVerifiedAccessGroupPolicyCommand
 */
export const de_GetVerifiedAccessGroupPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVerifiedAccessGroupPolicyCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetVerifiedAccessGroupPolicyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetVerifiedAccessGroupPolicyResult(data, context);
  const response: GetVerifiedAccessGroupPolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetVerifiedAccessGroupPolicyCommandError
 */
const de_GetVerifiedAccessGroupPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVerifiedAccessGroupPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand
 */
export const de_GetVpnConnectionDeviceSampleConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVpnConnectionDeviceSampleConfigurationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetVpnConnectionDeviceSampleConfigurationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetVpnConnectionDeviceSampleConfigurationResult(data, context);
  const response: GetVpnConnectionDeviceSampleConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommandError
 */
const de_GetVpnConnectionDeviceSampleConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVpnConnectionDeviceSampleConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetVpnConnectionDeviceTypesCommand
 */
export const de_GetVpnConnectionDeviceTypesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVpnConnectionDeviceTypesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetVpnConnectionDeviceTypesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetVpnConnectionDeviceTypesResult(data, context);
  const response: GetVpnConnectionDeviceTypesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetVpnConnectionDeviceTypesCommandError
 */
const de_GetVpnConnectionDeviceTypesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVpnConnectionDeviceTypesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetVpnTunnelReplacementStatusCommand
 */
export const de_GetVpnTunnelReplacementStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVpnTunnelReplacementStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetVpnTunnelReplacementStatusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetVpnTunnelReplacementStatusResult(data, context);
  const response: GetVpnTunnelReplacementStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetVpnTunnelReplacementStatusCommandError
 */
const de_GetVpnTunnelReplacementStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVpnTunnelReplacementStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand
 */
export const de_ImportClientVpnClientCertificateRevocationListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportClientVpnClientCertificateRevocationListCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ImportClientVpnClientCertificateRevocationListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImportClientVpnClientCertificateRevocationListResult(data, context);
  const response: ImportClientVpnClientCertificateRevocationListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommandError
 */
const de_ImportClientVpnClientCertificateRevocationListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportClientVpnClientCertificateRevocationListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ImportImageCommand
 */
export const de_ImportImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ImportImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImportImageResult(data, context);
  const response: ImportImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ImportImageCommandError
 */
const de_ImportImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ImportInstanceCommand
 */
export const de_ImportInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ImportInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImportInstanceResult(data, context);
  const response: ImportInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ImportInstanceCommandError
 */
const de_ImportInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ImportKeyPairCommand
 */
export const de_ImportKeyPairCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportKeyPairCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ImportKeyPairCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImportKeyPairResult(data, context);
  const response: ImportKeyPairCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ImportKeyPairCommandError
 */
const de_ImportKeyPairCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportKeyPairCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ImportSnapshotCommand
 */
export const de_ImportSnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportSnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ImportSnapshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImportSnapshotResult(data, context);
  const response: ImportSnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ImportSnapshotCommandError
 */
const de_ImportSnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportSnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ImportVolumeCommand
 */
export const de_ImportVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ImportVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImportVolumeResult(data, context);
  const response: ImportVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ImportVolumeCommandError
 */
const de_ImportVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ListImagesInRecycleBinCommand
 */
export const de_ListImagesInRecycleBinCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListImagesInRecycleBinCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ListImagesInRecycleBinCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ListImagesInRecycleBinResult(data, context);
  const response: ListImagesInRecycleBinCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ListImagesInRecycleBinCommandError
 */
const de_ListImagesInRecycleBinCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListImagesInRecycleBinCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ListSnapshotsInRecycleBinCommand
 */
export const de_ListSnapshotsInRecycleBinCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListSnapshotsInRecycleBinCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ListSnapshotsInRecycleBinCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ListSnapshotsInRecycleBinResult(data, context);
  const response: ListSnapshotsInRecycleBinCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ListSnapshotsInRecycleBinCommandError
 */
const de_ListSnapshotsInRecycleBinCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListSnapshotsInRecycleBinCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyAddressAttributeCommand
 */
export const de_ModifyAddressAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyAddressAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyAddressAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyAddressAttributeResult(data, context);
  const response: ModifyAddressAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyAddressAttributeCommandError
 */
const de_ModifyAddressAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyAddressAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyAvailabilityZoneGroupCommand
 */
export const de_ModifyAvailabilityZoneGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyAvailabilityZoneGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyAvailabilityZoneGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyAvailabilityZoneGroupResult(data, context);
  const response: ModifyAvailabilityZoneGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyAvailabilityZoneGroupCommandError
 */
const de_ModifyAvailabilityZoneGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyAvailabilityZoneGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyCapacityReservationCommand
 */
export const de_ModifyCapacityReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyCapacityReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyCapacityReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyCapacityReservationResult(data, context);
  const response: ModifyCapacityReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyCapacityReservationCommandError
 */
const de_ModifyCapacityReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyCapacityReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyCapacityReservationFleetCommand
 */
export const de_ModifyCapacityReservationFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyCapacityReservationFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyCapacityReservationFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyCapacityReservationFleetResult(data, context);
  const response: ModifyCapacityReservationFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyCapacityReservationFleetCommandError
 */
const de_ModifyCapacityReservationFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyCapacityReservationFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyClientVpnEndpointCommand
 */
export const de_ModifyClientVpnEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyClientVpnEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyClientVpnEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyClientVpnEndpointResult(data, context);
  const response: ModifyClientVpnEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyClientVpnEndpointCommandError
 */
const de_ModifyClientVpnEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyClientVpnEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyDefaultCreditSpecificationCommand
 */
export const de_ModifyDefaultCreditSpecificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyDefaultCreditSpecificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyDefaultCreditSpecificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyDefaultCreditSpecificationResult(data, context);
  const response: ModifyDefaultCreditSpecificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyDefaultCreditSpecificationCommandError
 */
const de_ModifyDefaultCreditSpecificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyDefaultCreditSpecificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand
 */
export const de_ModifyEbsDefaultKmsKeyIdCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyEbsDefaultKmsKeyIdCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyEbsDefaultKmsKeyIdCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyEbsDefaultKmsKeyIdResult(data, context);
  const response: ModifyEbsDefaultKmsKeyIdCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommandError
 */
const de_ModifyEbsDefaultKmsKeyIdCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyEbsDefaultKmsKeyIdCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyFleetCommand
 */
export const de_ModifyFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyFleetResult(data, context);
  const response: ModifyFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyFleetCommandError
 */
const de_ModifyFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyFpgaImageAttributeCommand
 */
export const de_ModifyFpgaImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyFpgaImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyFpgaImageAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyFpgaImageAttributeResult(data, context);
  const response: ModifyFpgaImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyFpgaImageAttributeCommandError
 */
const de_ModifyFpgaImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyFpgaImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyHostsCommand
 */
export const de_ModifyHostsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyHostsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyHostsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyHostsResult(data, context);
  const response: ModifyHostsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyHostsCommandError
 */
const de_ModifyHostsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyHostsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIdentityIdFormatCommand
 */
export const de_ModifyIdentityIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIdentityIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIdentityIdFormatCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyIdentityIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIdentityIdFormatCommandError
 */
const de_ModifyIdentityIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIdentityIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIdFormatCommand
 */
export const de_ModifyIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIdFormatCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIdFormatCommandError
 */
const de_ModifyIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyImageAttributeCommand
 */
export const de_ModifyImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyImageAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyImageAttributeCommandError
 */
const de_ModifyImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceAttributeCommand
 */
export const de_ModifyInstanceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyInstanceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceAttributeCommandError
 */
const de_ModifyInstanceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand
 */
export const de_ModifyInstanceCapacityReservationAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceCapacityReservationAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceCapacityReservationAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstanceCapacityReservationAttributesResult(data, context);
  const response: ModifyInstanceCapacityReservationAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommandError
 */
const de_ModifyInstanceCapacityReservationAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceCapacityReservationAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceCreditSpecificationCommand
 */
export const de_ModifyInstanceCreditSpecificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceCreditSpecificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceCreditSpecificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstanceCreditSpecificationResult(data, context);
  const response: ModifyInstanceCreditSpecificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceCreditSpecificationCommandError
 */
const de_ModifyInstanceCreditSpecificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceCreditSpecificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceEventStartTimeCommand
 */
export const de_ModifyInstanceEventStartTimeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceEventStartTimeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceEventStartTimeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstanceEventStartTimeResult(data, context);
  const response: ModifyInstanceEventStartTimeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceEventStartTimeCommandError
 */
const de_ModifyInstanceEventStartTimeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceEventStartTimeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceEventWindowCommand
 */
export const de_ModifyInstanceEventWindowCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceEventWindowCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceEventWindowCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstanceEventWindowResult(data, context);
  const response: ModifyInstanceEventWindowCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceEventWindowCommandError
 */
const de_ModifyInstanceEventWindowCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceEventWindowCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceMaintenanceOptionsCommand
 */
export const de_ModifyInstanceMaintenanceOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceMaintenanceOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceMaintenanceOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstanceMaintenanceOptionsResult(data, context);
  const response: ModifyInstanceMaintenanceOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceMaintenanceOptionsCommandError
 */
const de_ModifyInstanceMaintenanceOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceMaintenanceOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceMetadataOptionsCommand
 */
export const de_ModifyInstanceMetadataOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceMetadataOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceMetadataOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstanceMetadataOptionsResult(data, context);
  const response: ModifyInstanceMetadataOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceMetadataOptionsCommandError
 */
const de_ModifyInstanceMetadataOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceMetadataOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstancePlacementCommand
 */
export const de_ModifyInstancePlacementCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstancePlacementCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstancePlacementCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstancePlacementResult(data, context);
  const response: ModifyInstancePlacementCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstancePlacementCommandError
 */
const de_ModifyInstancePlacementCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstancePlacementCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIpamCommand
 */
export const de_ModifyIpamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIpamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyIpamResult(data, context);
  const response: ModifyIpamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIpamCommandError
 */
const de_ModifyIpamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIpamPoolCommand
 */
export const de_ModifyIpamPoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamPoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIpamPoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyIpamPoolResult(data, context);
  const response: ModifyIpamPoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIpamPoolCommandError
 */
const de_ModifyIpamPoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamPoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIpamResourceCidrCommand
 */
export const de_ModifyIpamResourceCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamResourceCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIpamResourceCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyIpamResourceCidrResult(data, context);
  const response: ModifyIpamResourceCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIpamResourceCidrCommandError
 */
const de_ModifyIpamResourceCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamResourceCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIpamResourceDiscoveryCommand
 */
export const de_ModifyIpamResourceDiscoveryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamResourceDiscoveryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIpamResourceDiscoveryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyIpamResourceDiscoveryResult(data, context);
  const response: ModifyIpamResourceDiscoveryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIpamResourceDiscoveryCommandError
 */
const de_ModifyIpamResourceDiscoveryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamResourceDiscoveryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIpamScopeCommand
 */
export const de_ModifyIpamScopeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamScopeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIpamScopeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyIpamScopeResult(data, context);
  const response: ModifyIpamScopeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIpamScopeCommandError
 */
const de_ModifyIpamScopeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamScopeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyLaunchTemplateCommand
 */
export const de_ModifyLaunchTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyLaunchTemplateCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyLaunchTemplateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyLaunchTemplateResult(data, context);
  const response: ModifyLaunchTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyLaunchTemplateCommandError
 */
const de_ModifyLaunchTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyLaunchTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyLocalGatewayRouteCommand
 */
export const de_ModifyLocalGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyLocalGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyLocalGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyLocalGatewayRouteResult(data, context);
  const response: ModifyLocalGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyLocalGatewayRouteCommandError
 */
const de_ModifyLocalGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyLocalGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyManagedPrefixListCommand
 */
export const de_ModifyManagedPrefixListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyManagedPrefixListCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyManagedPrefixListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyManagedPrefixListResult(data, context);
  const response: ModifyManagedPrefixListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyManagedPrefixListCommandError
 */
const de_ModifyManagedPrefixListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyManagedPrefixListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyNetworkInterfaceAttributeCommand
 */
export const de_ModifyNetworkInterfaceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyNetworkInterfaceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyNetworkInterfaceAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyNetworkInterfaceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyNetworkInterfaceAttributeCommandError
 */
const de_ModifyNetworkInterfaceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyNetworkInterfaceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyPrivateDnsNameOptionsCommand
 */
export const de_ModifyPrivateDnsNameOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyPrivateDnsNameOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyPrivateDnsNameOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyPrivateDnsNameOptionsResult(data, context);
  const response: ModifyPrivateDnsNameOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyPrivateDnsNameOptionsCommandError
 */
const de_ModifyPrivateDnsNameOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyPrivateDnsNameOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyReservedInstancesCommand
 */
export const de_ModifyReservedInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyReservedInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyReservedInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyReservedInstancesResult(data, context);
  const response: ModifyReservedInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyReservedInstancesCommandError
 */
const de_ModifyReservedInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyReservedInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifySecurityGroupRulesCommand
 */
export const de_ModifySecurityGroupRulesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySecurityGroupRulesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifySecurityGroupRulesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifySecurityGroupRulesResult(data, context);
  const response: ModifySecurityGroupRulesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifySecurityGroupRulesCommandError
 */
const de_ModifySecurityGroupRulesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySecurityGroupRulesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifySnapshotAttributeCommand
 */
export const de_ModifySnapshotAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySnapshotAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifySnapshotAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifySnapshotAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifySnapshotAttributeCommandError
 */
const de_ModifySnapshotAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySnapshotAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifySnapshotTierCommand
 */
export const de_ModifySnapshotTierCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySnapshotTierCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifySnapshotTierCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifySnapshotTierResult(data, context);
  const response: ModifySnapshotTierCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifySnapshotTierCommandError
 */
const de_ModifySnapshotTierCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySnapshotTierCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifySpotFleetRequestCommand
 */
export const de_ModifySpotFleetRequestCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySpotFleetRequestCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifySpotFleetRequestCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifySpotFleetRequestResponse(data, context);
  const response: ModifySpotFleetRequestCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifySpotFleetRequestCommandError
 */
const de_ModifySpotFleetRequestCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySpotFleetRequestCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifySubnetAttributeCommand
 */
export const de_ModifySubnetAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySubnetAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifySubnetAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifySubnetAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifySubnetAttributeCommandError
 */
const de_ModifySubnetAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySubnetAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand
 */
export const de_ModifyTrafficMirrorFilterNetworkServicesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorFilterNetworkServicesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyTrafficMirrorFilterNetworkServicesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyTrafficMirrorFilterNetworkServicesResult(data, context);
  const response: ModifyTrafficMirrorFilterNetworkServicesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommandError
 */
const de_ModifyTrafficMirrorFilterNetworkServicesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorFilterNetworkServicesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommand
 */
export const de_ModifyTrafficMirrorFilterRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorFilterRuleCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyTrafficMirrorFilterRuleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyTrafficMirrorFilterRuleResult(data, context);
  const response: ModifyTrafficMirrorFilterRuleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommandError
 */
const de_ModifyTrafficMirrorFilterRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorFilterRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorSessionCommand
 */
export const de_ModifyTrafficMirrorSessionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorSessionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyTrafficMirrorSessionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyTrafficMirrorSessionResult(data, context);
  const response: ModifyTrafficMirrorSessionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorSessionCommandError
 */
const de_ModifyTrafficMirrorSessionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorSessionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyTransitGatewayCommand
 */
export const de_ModifyTransitGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyTransitGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyTransitGatewayResult(data, context);
  const response: ModifyTransitGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyTransitGatewayCommandError
 */
const de_ModifyTransitGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand
 */
export const de_ModifyTransitGatewayPrefixListReferenceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayPrefixListReferenceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyTransitGatewayPrefixListReferenceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyTransitGatewayPrefixListReferenceResult(data, context);
  const response: ModifyTransitGatewayPrefixListReferenceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommandError
 */
const de_ModifyTransitGatewayPrefixListReferenceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayPrefixListReferenceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand
 */
export const de_ModifyTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyTransitGatewayVpcAttachmentResult(data, context);
  const response: ModifyTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommandError
 */
const de_ModifyTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessEndpointCommand
 */
export const de_ModifyVerifiedAccessEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessEndpointResult(data, context);
  const response: ModifyVerifiedAccessEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessEndpointCommandError
 */
const de_ModifyVerifiedAccessEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessEndpointPolicyCommand
 */
export const de_ModifyVerifiedAccessEndpointPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessEndpointPolicyCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessEndpointPolicyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessEndpointPolicyResult(data, context);
  const response: ModifyVerifiedAccessEndpointPolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessEndpointPolicyCommandError
 */
const de_ModifyVerifiedAccessEndpointPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessEndpointPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessGroupCommand
 */
export const de_ModifyVerifiedAccessGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessGroupResult(data, context);
  const response: ModifyVerifiedAccessGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessGroupCommandError
 */
const de_ModifyVerifiedAccessGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessGroupPolicyCommand
 */
export const de_ModifyVerifiedAccessGroupPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessGroupPolicyCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessGroupPolicyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessGroupPolicyResult(data, context);
  const response: ModifyVerifiedAccessGroupPolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessGroupPolicyCommandError
 */
const de_ModifyVerifiedAccessGroupPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessGroupPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessInstanceCommand
 */
export const de_ModifyVerifiedAccessInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessInstanceResult(data, context);
  const response: ModifyVerifiedAccessInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessInstanceCommandError
 */
const de_ModifyVerifiedAccessInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessInstanceLoggingConfigurationCommand
 */
export const de_ModifyVerifiedAccessInstanceLoggingConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessInstanceLoggingConfigurationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessInstanceLoggingConfigurationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessInstanceLoggingConfigurationResult(data, context);
  const response: ModifyVerifiedAccessInstanceLoggingConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessInstanceLoggingConfigurationCommandError
 */
const de_ModifyVerifiedAccessInstanceLoggingConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessInstanceLoggingConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessTrustProviderCommand
 */
export const de_ModifyVerifiedAccessTrustProviderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessTrustProviderCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessTrustProviderCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessTrustProviderResult(data, context);
  const response: ModifyVerifiedAccessTrustProviderCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessTrustProviderCommandError
 */
const de_ModifyVerifiedAccessTrustProviderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessTrustProviderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVolumeCommand
 */
export const de_ModifyVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVolumeResult(data, context);
  const response: ModifyVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVolumeCommandError
 */
const de_ModifyVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVolumeAttributeCommand
 */
export const de_ModifyVolumeAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVolumeAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVolumeAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyVolumeAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVolumeAttributeCommandError
 */
const de_ModifyVolumeAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVolumeAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcAttributeCommand
 */
export const de_ModifyVpcAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyVpcAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcAttributeCommandError
 */
const de_ModifyVpcAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcEndpointCommand
 */
export const de_ModifyVpcEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcEndpointResult(data, context);
  const response: ModifyVpcEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointCommandError
 */
const de_ModifyVpcEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand
 */
export const de_ModifyVpcEndpointConnectionNotificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointConnectionNotificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcEndpointConnectionNotificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcEndpointConnectionNotificationResult(data, context);
  const response: ModifyVpcEndpointConnectionNotificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommandError
 */
const de_ModifyVpcEndpointConnectionNotificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointConnectionNotificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand
 */
export const de_ModifyVpcEndpointServiceConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServiceConfigurationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcEndpointServiceConfigurationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcEndpointServiceConfigurationResult(data, context);
  const response: ModifyVpcEndpointServiceConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommandError
 */
const de_ModifyVpcEndpointServiceConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServiceConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand
 */
export const de_ModifyVpcEndpointServicePayerResponsibilityCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServicePayerResponsibilityCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcEndpointServicePayerResponsibilityCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcEndpointServicePayerResponsibilityResult(data, context);
  const response: ModifyVpcEndpointServicePayerResponsibilityCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommandError
 */
const de_ModifyVpcEndpointServicePayerResponsibilityCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServicePayerResponsibilityCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommand
 */
export const de_ModifyVpcEndpointServicePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServicePermissionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcEndpointServicePermissionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcEndpointServicePermissionsResult(data, context);
  const response: ModifyVpcEndpointServicePermissionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommandError
 */
const de_ModifyVpcEndpointServicePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServicePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand
 */
export const de_ModifyVpcPeeringConnectionOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcPeeringConnectionOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcPeeringConnectionOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcPeeringConnectionOptionsResult(data, context);
  const response: ModifyVpcPeeringConnectionOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommandError
 */
const de_ModifyVpcPeeringConnectionOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcPeeringConnectionOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcTenancyCommand
 */
export const de_ModifyVpcTenancyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcTenancyCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcTenancyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcTenancyResult(data, context);
  const response: ModifyVpcTenancyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcTenancyCommandError
 */
const de_ModifyVpcTenancyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcTenancyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpnConnectionCommand
 */
export const de_ModifyVpnConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpnConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpnConnectionResult(data, context);
  const response: ModifyVpnConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpnConnectionCommandError
 */
const de_ModifyVpnConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpnConnectionOptionsCommand
 */
export const de_ModifyVpnConnectionOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnConnectionOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpnConnectionOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpnConnectionOptionsResult(data, context);
  const response: ModifyVpnConnectionOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpnConnectionOptionsCommandError
 */
const de_ModifyVpnConnectionOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnConnectionOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpnTunnelCertificateCommand
 */
export const de_ModifyVpnTunnelCertificateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnTunnelCertificateCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpnTunnelCertificateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpnTunnelCertificateResult(data, context);
  const response: ModifyVpnTunnelCertificateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpnTunnelCertificateCommandError
 */
const de_ModifyVpnTunnelCertificateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnTunnelCertificateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpnTunnelOptionsCommand
 */
export const de_ModifyVpnTunnelOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnTunnelOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpnTunnelOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpnTunnelOptionsResult(data, context);
  const response: ModifyVpnTunnelOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpnTunnelOptionsCommandError
 */
const de_ModifyVpnTunnelOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnTunnelOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2MonitorInstancesCommand
 */
export const de_MonitorInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MonitorInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_MonitorInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_MonitorInstancesResult(data, context);
  const response: MonitorInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2MonitorInstancesCommandError
 */
const de_MonitorInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MonitorInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2MoveAddressToVpcCommand
 */
export const de_MoveAddressToVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MoveAddressToVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_MoveAddressToVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_MoveAddressToVpcResult(data, context);
  const response: MoveAddressToVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2MoveAddressToVpcCommandError
 */
const de_MoveAddressToVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MoveAddressToVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2MoveByoipCidrToIpamCommand
 */
export const de_MoveByoipCidrToIpamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MoveByoipCidrToIpamCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_MoveByoipCidrToIpamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_MoveByoipCidrToIpamResult(data, context);
  const response: MoveByoipCidrToIpamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2MoveByoipCidrToIpamCommandError
 */
const de_MoveByoipCidrToIpamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MoveByoipCidrToIpamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ProvisionByoipCidrCommand
 */
export const de_ProvisionByoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionByoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ProvisionByoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ProvisionByoipCidrResult(data, context);
  const response: ProvisionByoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ProvisionByoipCidrCommandError
 */
const de_ProvisionByoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionByoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ProvisionIpamPoolCidrCommand
 */
export const de_ProvisionIpamPoolCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionIpamPoolCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ProvisionIpamPoolCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ProvisionIpamPoolCidrResult(data, context);
  const response: ProvisionIpamPoolCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ProvisionIpamPoolCidrCommandError
 */
const de_ProvisionIpamPoolCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionIpamPoolCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ProvisionPublicIpv4PoolCidrCommand
 */
export const de_ProvisionPublicIpv4PoolCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionPublicIpv4PoolCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ProvisionPublicIpv4PoolCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ProvisionPublicIpv4PoolCidrResult(data, context);
  const response: ProvisionPublicIpv4PoolCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ProvisionPublicIpv4PoolCidrCommandError
 */
const de_ProvisionPublicIpv4PoolCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionPublicIpv4PoolCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2PurchaseHostReservationCommand
 */
export const de_PurchaseHostReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseHostReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_PurchaseHostReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_PurchaseHostReservationResult(data, context);
  const response: PurchaseHostReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2PurchaseHostReservationCommandError
 */
const de_PurchaseHostReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseHostReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2PurchaseReservedInstancesOfferingCommand
 */
export const de_PurchaseReservedInstancesOfferingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseReservedInstancesOfferingCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_PurchaseReservedInstancesOfferingCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_PurchaseReservedInstancesOfferingResult(data, context);
  const response: PurchaseReservedInstancesOfferingCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2PurchaseReservedInstancesOfferingCommandError
 */
const de_PurchaseReservedInstancesOfferingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseReservedInstancesOfferingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2PurchaseScheduledInstancesCommand
 */
export const de_PurchaseScheduledInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseScheduledInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_PurchaseScheduledInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_PurchaseScheduledInstancesResult(data, context);
  const response: PurchaseScheduledInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2PurchaseScheduledInstancesCommandError
 */
const de_PurchaseScheduledInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseScheduledInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RebootInstancesCommand
 */
export const de_RebootInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RebootInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RebootInstancesCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: RebootInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2RebootInstancesCommandError
 */
const de_RebootInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RebootInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RegisterImageCommand
 */
export const de_RegisterImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RegisterImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RegisterImageResult(data, context);
  const response: RegisterImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RegisterImageCommandError
 */
const de_RegisterImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommand
 */
export const de_RegisterInstanceEventNotificationAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterInstanceEventNotificationAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RegisterInstanceEventNotificationAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RegisterInstanceEventNotificationAttributesResult(data, context);
  const response: RegisterInstanceEventNotificationAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommandError
 */
const de_RegisterInstanceEventNotificationAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterInstanceEventNotificationAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand
 */
export const de_RegisterTransitGatewayMulticastGroupMembersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterTransitGatewayMulticastGroupMembersCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RegisterTransitGatewayMulticastGroupMembersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RegisterTransitGatewayMulticastGroupMembersResult(data, context);
  const response: RegisterTransitGatewayMulticastGroupMembersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommandError
 */
const de_RegisterTransitGatewayMulticastGroupMembersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterTransitGatewayMulticastGroupMembersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand
 */
export const de_RegisterTransitGatewayMulticastGroupSourcesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterTransitGatewayMulticastGroupSourcesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RegisterTransitGatewayMulticastGroupSourcesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RegisterTransitGatewayMulticastGroupSourcesResult(data, context);
  const response: RegisterTransitGatewayMulticastGroupSourcesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommandError
 */
const de_RegisterTransitGatewayMulticastGroupSourcesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterTransitGatewayMulticastGroupSourcesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand
 */
export const de_RejectTransitGatewayMulticastDomainAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RejectTransitGatewayMulticastDomainAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RejectTransitGatewayMulticastDomainAssociationsResult(data, context);
  const response: RejectTransitGatewayMulticastDomainAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommandError
 */
const de_RejectTransitGatewayMulticastDomainAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand
 */
export const de_RejectTransitGatewayPeeringAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayPeeringAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RejectTransitGatewayPeeringAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RejectTransitGatewayPeeringAttachmentResult(data, context);
  const response: RejectTransitGatewayPeeringAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommandError
 */
const de_RejectTransitGatewayPeeringAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayPeeringAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommand
 */
export const de_RejectTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RejectTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RejectTransitGatewayVpcAttachmentResult(data, context);
  const response: RejectTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommandError
 */
const de_RejectTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RejectVpcEndpointConnectionsCommand
 */
export const de_RejectVpcEndpointConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectVpcEndpointConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RejectVpcEndpointConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RejectVpcEndpointConnectionsResult(data, context);
  const response: RejectVpcEndpointConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RejectVpcEndpointConnectionsCommandError
 */
const de_RejectVpcEndpointConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectVpcEndpointConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RejectVpcPeeringConnectionCommand
 */
export const de_RejectVpcPeeringConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectVpcPeeringConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RejectVpcPeeringConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RejectVpcPeeringConnectionResult(data, context);
  const response: RejectVpcPeeringConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RejectVpcPeeringConnectionCommandError
 */
const de_RejectVpcPeeringConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectVpcPeeringConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReleaseAddressCommand
 */
export const de_ReleaseAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReleaseAddressCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ReleaseAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ReleaseAddressCommandError
 */
const de_ReleaseAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReleaseHostsCommand
 */
export const de_ReleaseHostsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseHostsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReleaseHostsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReleaseHostsResult(data, context);
  const response: ReleaseHostsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReleaseHostsCommandError
 */
const de_ReleaseHostsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseHostsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReleaseIpamPoolAllocationCommand
 */
export const de_ReleaseIpamPoolAllocationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseIpamPoolAllocationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReleaseIpamPoolAllocationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReleaseIpamPoolAllocationResult(data, context);
  const response: ReleaseIpamPoolAllocationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReleaseIpamPoolAllocationCommandError
 */
const de_ReleaseIpamPoolAllocationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseIpamPoolAllocationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommand
 */
export const de_ReplaceIamInstanceProfileAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceIamInstanceProfileAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceIamInstanceProfileAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReplaceIamInstanceProfileAssociationResult(data, context);
  const response: ReplaceIamInstanceProfileAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommandError
 */
const de_ReplaceIamInstanceProfileAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceIamInstanceProfileAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceNetworkAclAssociationCommand
 */
export const de_ReplaceNetworkAclAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceNetworkAclAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceNetworkAclAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReplaceNetworkAclAssociationResult(data, context);
  const response: ReplaceNetworkAclAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceNetworkAclAssociationCommandError
 */
const de_ReplaceNetworkAclAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceNetworkAclAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceNetworkAclEntryCommand
 */
export const de_ReplaceNetworkAclEntryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceNetworkAclEntryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceNetworkAclEntryCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ReplaceNetworkAclEntryCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceNetworkAclEntryCommandError
 */
const de_ReplaceNetworkAclEntryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceNetworkAclEntryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceRouteCommand
 */
export const de_ReplaceRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceRouteCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ReplaceRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceRouteCommandError
 */
const de_ReplaceRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceRouteTableAssociationCommand
 */
export const de_ReplaceRouteTableAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceRouteTableAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceRouteTableAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReplaceRouteTableAssociationResult(data, context);
  const response: ReplaceRouteTableAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceRouteTableAssociationCommandError
 */
const de_ReplaceRouteTableAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceRouteTableAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceTransitGatewayRouteCommand
 */
export const de_ReplaceTransitGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceTransitGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceTransitGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReplaceTransitGatewayRouteResult(data, context);
  const response: ReplaceTransitGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceTransitGatewayRouteCommandError
 */
const de_ReplaceTransitGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceTransitGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceVpnTunnelCommand
 */
export const de_ReplaceVpnTunnelCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceVpnTunnelCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceVpnTunnelCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReplaceVpnTunnelResult(data, context);
  const response: ReplaceVpnTunnelCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceVpnTunnelCommandError
 */
const de_ReplaceVpnTunnelCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceVpnTunnelCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReportInstanceStatusCommand
 */
export const de_ReportInstanceStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReportInstanceStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReportInstanceStatusCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ReportInstanceStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ReportInstanceStatusCommandError
 */
const de_ReportInstanceStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReportInstanceStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RequestSpotFleetCommand
 */
export const de_RequestSpotFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RequestSpotFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RequestSpotFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RequestSpotFleetResponse(data, context);
  const response: RequestSpotFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RequestSpotFleetCommandError
 */
const de_RequestSpotFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RequestSpotFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RequestSpotInstancesCommand
 */
export const de_RequestSpotInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RequestSpotInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RequestSpotInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RequestSpotInstancesResult(data, context);
  const response: RequestSpotInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RequestSpotInstancesCommandError
 */
const de_RequestSpotInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RequestSpotInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetAddressAttributeCommand
 */
export const de_ResetAddressAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetAddressAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetAddressAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ResetAddressAttributeResult(data, context);
  const response: ResetAddressAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ResetAddressAttributeCommandError
 */
const de_ResetAddressAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetAddressAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommand
 */
export const de_ResetEbsDefaultKmsKeyIdCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetEbsDefaultKmsKeyIdCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetEbsDefaultKmsKeyIdCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ResetEbsDefaultKmsKeyIdResult(data, context);
  const response: ResetEbsDefaultKmsKeyIdCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommandError
 */
const de_ResetEbsDefaultKmsKeyIdCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetEbsDefaultKmsKeyIdCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetFpgaImageAttributeCommand
 */
export const de_ResetFpgaImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetFpgaImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetFpgaImageAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ResetFpgaImageAttributeResult(data, context);
  const response: ResetFpgaImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ResetFpgaImageAttributeCommandError
 */
const de_ResetFpgaImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetFpgaImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetImageAttributeCommand
 */
export const de_ResetImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetImageAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ResetImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ResetImageAttributeCommandError
 */
const de_ResetImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetInstanceAttributeCommand
 */
export const de_ResetInstanceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetInstanceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetInstanceAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ResetInstanceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ResetInstanceAttributeCommandError
 */
const de_ResetInstanceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetInstanceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetNetworkInterfaceAttributeCommand
 */
export const de_ResetNetworkInterfaceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetNetworkInterfaceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetNetworkInterfaceAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ResetNetworkInterfaceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ResetNetworkInterfaceAttributeCommandError
 */
const de_ResetNetworkInterfaceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetNetworkInterfaceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetSnapshotAttributeCommand
 */
export const de_ResetSnapshotAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetSnapshotAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetSnapshotAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ResetSnapshotAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ResetSnapshotAttributeCommandError
 */
const de_ResetSnapshotAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetSnapshotAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RestoreAddressToClassicCommand
 */
export const de_RestoreAddressToClassicCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreAddressToClassicCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RestoreAddressToClassicCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RestoreAddressToClassicResult(data, context);
  const response: RestoreAddressToClassicCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RestoreAddressToClassicCommandError
 */
const de_RestoreAddressToClassicCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreAddressToClassicCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RestoreImageFromRecycleBinCommand
 */
export const de_RestoreImageFromRecycleBinCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreImageFromRecycleBinCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RestoreImageFromRecycleBinCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RestoreImageFromRecycleBinResult(data, context);
  const response: RestoreImageFromRecycleBinCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RestoreImageFromRecycleBinCommandError
 */
const de_RestoreImageFromRecycleBinCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreImageFromRecycleBinCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RestoreManagedPrefixListVersionCommand
 */
export const de_RestoreManagedPrefixListVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreManagedPrefixListVersionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RestoreManagedPrefixListVersionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RestoreManagedPrefixListVersionResult(data, context);
  const response: RestoreManagedPrefixListVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RestoreManagedPrefixListVersionCommandError
 */
const de_RestoreManagedPrefixListVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreManagedPrefixListVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RestoreSnapshotFromRecycleBinCommand
 */
export const de_RestoreSnapshotFromRecycleBinCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreSnapshotFromRecycleBinCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RestoreSnapshotFromRecycleBinCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RestoreSnapshotFromRecycleBinResult(data, context);
  const response: RestoreSnapshotFromRecycleBinCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RestoreSnapshotFromRecycleBinCommandError
 */
const de_RestoreSnapshotFromRecycleBinCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreSnapshotFromRecycleBinCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RestoreSnapshotTierCommand
 */
export const de_RestoreSnapshotTierCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreSnapshotTierCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RestoreSnapshotTierCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RestoreSnapshotTierResult(data, context);
  const response: RestoreSnapshotTierCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RestoreSnapshotTierCommandError
 */
const de_RestoreSnapshotTierCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreSnapshotTierCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RevokeClientVpnIngressCommand
 */
export const de_RevokeClientVpnIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeClientVpnIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RevokeClientVpnIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RevokeClientVpnIngressResult(data, context);
  const response: RevokeClientVpnIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RevokeClientVpnIngressCommandError
 */
const de_RevokeClientVpnIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeClientVpnIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RevokeSecurityGroupEgressCommand
 */
export const de_RevokeSecurityGroupEgressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeSecurityGroupEgressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RevokeSecurityGroupEgressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RevokeSecurityGroupEgressResult(data, context);
  const response: RevokeSecurityGroupEgressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RevokeSecurityGroupEgressCommandError
 */
const de_RevokeSecurityGroupEgressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeSecurityGroupEgressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RevokeSecurityGroupIngressCommand
 */
export const de_RevokeSecurityGroupIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeSecurityGroupIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RevokeSecurityGroupIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RevokeSecurityGroupIngressResult(data, context);
  const response: RevokeSecurityGroupIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RevokeSecurityGroupIngressCommandError
 */
const de_RevokeSecurityGroupIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeSecurityGroupIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RunInstancesCommand
 */
export const de_RunInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RunInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RunInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_Reservation(data, context);
  const response: RunInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RunInstancesCommandError
 */
const de_RunInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RunInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RunScheduledInstancesCommand
 */
export const de_RunScheduledInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RunScheduledInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RunScheduledInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RunScheduledInstancesResult(data, context);
  const response: RunScheduledInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RunScheduledInstancesCommandError
 */
const de_RunScheduledInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RunScheduledInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2SearchLocalGatewayRoutesCommand
 */
export const de_SearchLocalGatewayRoutesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchLocalGatewayRoutesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_SearchLocalGatewayRoutesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_SearchLocalGatewayRoutesResult(data, context);
  const response: SearchLocalGatewayRoutesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2SearchLocalGatewayRoutesCommandError
 */
const de_SearchLocalGatewayRoutesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchLocalGatewayRoutesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommand
 */
export const de_SearchTransitGatewayMulticastGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchTransitGatewayMulticastGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_SearchTransitGatewayMulticastGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_SearchTransitGatewayMulticastGroupsResult(data, context);
  const response: SearchTransitGatewayMulticastGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommandError
 */
const de_SearchTransitGatewayMulticastGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchTransitGatewayMulticastGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2SearchTransitGatewayRoutesCommand
 */
export const de_SearchTransitGatewayRoutesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchTransitGatewayRoutesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_SearchTransitGatewayRoutesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_SearchTransitGatewayRoutesResult(data, context);
  const response: SearchTransitGatewayRoutesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2SearchTransitGatewayRoutesCommandError
 */
const de_SearchTransitGatewayRoutesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchTransitGatewayRoutesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2SendDiagnosticInterruptCommand
 */
export const de_SendDiagnosticInterruptCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SendDiagnosticInterruptCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_SendDiagnosticInterruptCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: SendDiagnosticInterruptCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2SendDiagnosticInterruptCommandError
 */
const de_SendDiagnosticInterruptCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SendDiagnosticInterruptCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2StartInstancesCommand
 */
export const de_StartInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_StartInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_StartInstancesResult(data, context);
  const response: StartInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2StartInstancesCommandError
 */
const de_StartInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand
 */
export const de_StartNetworkInsightsAccessScopeAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartNetworkInsightsAccessScopeAnalysisCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_StartNetworkInsightsAccessScopeAnalysisCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_StartNetworkInsightsAccessScopeAnalysisResult(data, context);
  const response: StartNetworkInsightsAccessScopeAnalysisCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommandError
 */
const de_StartNetworkInsightsAccessScopeAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartNetworkInsightsAccessScopeAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2StartNetworkInsightsAnalysisCommand
 */
export const de_StartNetworkInsightsAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartNetworkInsightsAnalysisCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_StartNetworkInsightsAnalysisCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_StartNetworkInsightsAnalysisResult(data, context);
  const response: StartNetworkInsightsAnalysisCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2StartNetworkInsightsAnalysisCommandError
 */
const de_StartNetworkInsightsAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartNetworkInsightsAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand
 */
export const de_StartVpcEndpointServicePrivateDnsVerificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartVpcEndpointServicePrivateDnsVerificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_StartVpcEndpointServicePrivateDnsVerificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_StartVpcEndpointServicePrivateDnsVerificationResult(data, context);
  const response: StartVpcEndpointServicePrivateDnsVerificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommandError
 */
const de_StartVpcEndpointServicePrivateDnsVerificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartVpcEndpointServicePrivateDnsVerificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2StopInstancesCommand
 */
export const de_StopInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_StopInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_StopInstancesResult(data, context);
  const response: StopInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2StopInstancesCommandError
 */
const de_StopInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2TerminateClientVpnConnectionsCommand
 */
export const de_TerminateClientVpnConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TerminateClientVpnConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_TerminateClientVpnConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_TerminateClientVpnConnectionsResult(data, context);
  const response: TerminateClientVpnConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2TerminateClientVpnConnectionsCommandError
 */
const de_TerminateClientVpnConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TerminateClientVpnConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2TerminateInstancesCommand
 */
export const de_TerminateInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TerminateInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_TerminateInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_TerminateInstancesResult(data, context);
  const response: TerminateInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2TerminateInstancesCommandError
 */
const de_TerminateInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TerminateInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2UnassignIpv6AddressesCommand
 */
export const de_UnassignIpv6AddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignIpv6AddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_UnassignIpv6AddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_UnassignIpv6AddressesResult(data, context);
  const response: UnassignIpv6AddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2UnassignIpv6AddressesCommandError
 */
const de_UnassignIpv6AddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignIpv6AddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2UnassignPrivateIpAddressesCommand
 */
export const de_UnassignPrivateIpAddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignPrivateIpAddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_UnassignPrivateIpAddressesCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: UnassignPrivateIpAddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2UnassignPrivateIpAddressesCommandError
 */
const de_UnassignPrivateIpAddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignPrivateIpAddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2UnassignPrivateNatGatewayAddressCommand
 */
export const de_UnassignPrivateNatGatewayAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignPrivateNatGatewayAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_UnassignPrivateNatGatewayAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_UnassignPrivateNatGatewayAddressResult(data, context);
  const response: UnassignPrivateNatGatewayAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2UnassignPrivateNatGatewayAddressCommandError
 */
const de_UnassignPrivateNatGatewayAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignPrivateNatGatewayAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2UnmonitorInstancesCommand
 */
export const de_UnmonitorInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnmonitorInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_UnmonitorInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_UnmonitorInstancesResult(data, context);
  const response: UnmonitorInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2UnmonitorInstancesCommandError
 */
const de_UnmonitorInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnmonitorInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand
 */
export const de_UpdateSecurityGroupRuleDescriptionsEgressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityGroupRuleDescriptionsEgressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_UpdateSecurityGroupRuleDescriptionsEgressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_UpdateSecurityGroupRuleDescriptionsEgressResult(data, context);
  const response: UpdateSecurityGroupRuleDescriptionsEgressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommandError
 */
const de_UpdateSecurityGroupRuleDescriptionsEgressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityGroupRuleDescriptionsEgressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand
 */
export const de_UpdateSecurityGroupRuleDescriptionsIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityGroupRuleDescriptionsIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_UpdateSecurityGroupRuleDescriptionsIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_UpdateSecurityGroupRuleDescriptionsIngressResult(data, context);
  const response: UpdateSecurityGroupRuleDescriptionsIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommandError
 */
const de_UpdateSecurityGroupRuleDescriptionsIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityGroupRuleDescriptionsIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2WithdrawByoipCidrCommand
 */
export const de_WithdrawByoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<WithdrawByoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_WithdrawByoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_WithdrawByoipCidrResult(data, context);
  const response: WithdrawByoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2WithdrawByoipCidrCommandError
 */
const de_WithdrawByoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<WithdrawByoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * serializeAws_ec2AcceleratorCount
 */
const se_AcceleratorCount = (input: AcceleratorCount, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = input.Min;
  }
  if (input.Max != null) {
    entries["Max"] = input.Max;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceleratorCountRequest
 */
const se_AcceleratorCountRequest = (input: AcceleratorCountRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = input.Min;
  }
  if (input.Max != null) {
    entries["Max"] = input.Max;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceleratorManufacturerSet
 */
const se_AcceleratorManufacturerSet = (input: AcceleratorManufacturer[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceleratorNameSet
 */
const se_AcceleratorNameSet = (input: AcceleratorName[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceleratorTotalMemoryMiB
 */
const se_AcceleratorTotalMemoryMiB = (input: AcceleratorTotalMemoryMiB, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = input.Min;
  }
  if (input.Max != null) {
    entries["Max"] = input.Max;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceleratorTotalMemoryMiBRequest
 */
const se_AcceleratorTotalMemoryMiBRequest = (input: AcceleratorTotalMemoryMiBRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = input.Min;
  }
  if (input.Max != null) {
    entries["Max"] = input.Max;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceleratorTypeSet
 */
const se_AcceleratorTypeSet = (input: AcceleratorType[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptAddressTransferRequest
 */
const se_AcceptAddressTransferRequest = (input: AcceptAddressTransferRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Address != null) {
    entries["Address"] = input.Address;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptReservedInstancesExchangeQuoteRequest
 */
const se_AcceptReservedInstancesExchangeQuoteRequest = (
  input: AcceptReservedInstancesExchangeQuoteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ReservedInstanceIds != null) {
    const memberEntries = se_ReservedInstanceIdSet(input.ReservedInstanceIds, context);
    if (input.ReservedInstanceIds?.length === 0) {
      entries.ReservedInstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TargetConfigurations != null) {
    const memberEntries = se_TargetConfigurationRequestSet(input.TargetConfigurations, context);
    if (input.TargetConfigurations?.length === 0) {
      entries.TargetConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsRequest
 */
const se_AcceptTransitGatewayMulticastDomainAssociationsRequest = (
  input: AcceptTransitGatewayMulticastDomainAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId != null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.SubnetIds != null) {
    const memberEntries = se_ValueStringList(input.SubnetIds, context);
    if (input.SubnetIds?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptTransitGatewayPeeringAttachmentRequest
 */
const se_AcceptTransitGatewayPeeringAttachmentRequest = (
  input: AcceptTransitGatewayPeeringAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptTransitGatewayVpcAttachmentRequest
 */
const se_AcceptTransitGatewayVpcAttachmentRequest = (
  input: AcceptTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptVpcEndpointConnectionsRequest
 */
const se_AcceptVpcEndpointConnectionsRequest = (
  input: AcceptVpcEndpointConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId != null) {
    entries["ServiceId"] = input.ServiceId;
  }
  if (input.VpcEndpointIds != null) {
    const memberEntries = se_VpcEndpointIdList(input.VpcEndpointIds, context);
    if (input.VpcEndpointIds?.length === 0) {
      entries.VpcEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptVpcPeeringConnectionRequest
 */
const se_AcceptVpcPeeringConnectionRequest = (
  input: AcceptVpcPeeringConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcPeeringConnectionId != null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  return entries;
};

/**
 * serializeAws_ec2AccessScopePathListRequest
 */
const se_AccessScopePathListRequest = (input: AccessScopePathRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_AccessScopePathRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AccessScopePathRequest
 */
const se_AccessScopePathRequest = (input: AccessScopePathRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Source != null) {
    const memberEntries = se_PathStatementRequest(input.Source, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Source.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Destination != null) {
    const memberEntries = se_PathStatementRequest(input.Destination, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Destination.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ThroughResources != null) {
    const memberEntries = se_ThroughResourcesStatementRequestList(input.ThroughResources, context);
    if (input.ThroughResources?.length === 0) {
      entries.ThroughResource = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ThroughResource.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AccountAttributeNameStringList
 */
const se_AccountAttributeNameStringList = (input: AccountAttributeName[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AttributeName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AddIpamOperatingRegion
 */
const se_AddIpamOperatingRegion = (input: AddIpamOperatingRegion, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.RegionName != null) {
    entries["RegionName"] = input.RegionName;
  }
  return entries;
};

/**
 * serializeAws_ec2AddIpamOperatingRegionSet
 */
const se_AddIpamOperatingRegionSet = (input: AddIpamOperatingRegion[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_AddIpamOperatingRegion(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AddPrefixListEntries
 */
const se_AddPrefixListEntries = (input: AddPrefixListEntry[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_AddPrefixListEntry(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AddPrefixListEntry
 */
const se_AddPrefixListEntry = (input: AddPrefixListEntry, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  return entries;
};

/**
 * serializeAws_ec2AdvertiseByoipCidrRequest
 */
const se_AdvertiseByoipCidrRequest = (input: AdvertiseByoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AllocateAddressRequest
 */
const se_AllocateAddressRequest = (input: AllocateAddressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Domain != null) {
    entries["Domain"] = input.Domain;
  }
  if (input.Address != null) {
    entries["Address"] = input.Address;
  }
  if (input.PublicIpv4Pool != null) {
    entries["PublicIpv4Pool"] = input.PublicIpv4Pool;
  }
  if (input.NetworkBorderGroup != null) {
    entries["NetworkBorderGroup"] = input.NetworkBorderGroup;
  }
  if (input.CustomerOwnedIpv4Pool != null) {
    entries["CustomerOwnedIpv4Pool"] = input.CustomerOwnedIpv4Pool;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AllocateHostsRequest
 */
const se_AllocateHostsRequest = (input: AllocateHostsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AutoPlacement != null) {
    entries["AutoPlacement"] = input.AutoPlacement;
  }
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.InstanceFamily != null) {
    entries["InstanceFamily"] = input.InstanceFamily;
  }
  if (input.Quantity != null) {
    entries["Quantity"] = input.Quantity;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.HostRecovery != null) {
    entries["HostRecovery"] = input.HostRecovery;
  }
  if (input.OutpostArn != null) {
    entries["OutpostArn"] = input.OutpostArn;
  }
  if (input.HostMaintenance != null) {
    entries["HostMaintenance"] = input.HostMaintenance;
  }
  if (input.AssetIds != null) {
    const memberEntries = se_AssetIdList(input.AssetIds, context);
    if (input.AssetIds?.length === 0) {
      entries.AssetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AllocateIpamPoolCidrRequest
 */
const se_AllocateIpamPoolCidrRequest = (input: AllocateIpamPoolCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamPoolId != null) {
    entries["IpamPoolId"] = input.IpamPoolId;
  }
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.NetmaskLength != null) {
    entries["NetmaskLength"] = input.NetmaskLength;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.PreviewNextCidr != null) {
    entries["PreviewNextCidr"] = input.PreviewNextCidr;
  }
  if (input.DisallowedCidrs != null) {
    const memberEntries = se_IpamPoolAllocationDisallowedCidrs(input.DisallowedCidrs, context);
    if (input.DisallowedCidrs?.length === 0) {
      entries.DisallowedCidr = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisallowedCidr.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AllocationIdList
 */
const se_AllocationIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AllocationId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AllocationIds
 */
const se_AllocationIds = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AllowedInstanceTypeSet
 */
const se_AllowedInstanceTypeSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest
 */
const se_ApplySecurityGroupsToClientVpnTargetNetworkRequest = (
  input: ApplySecurityGroupsToClientVpnTargetNetworkRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.SecurityGroupIds != null) {
    const memberEntries = se_ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
    if (input.SecurityGroupIds?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ArchitectureTypeSet
 */
const se_ArchitectureTypeSet = (input: ArchitectureType[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ArnList
 */
const se_ArnList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AssetIdList
 */
const se_AssetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AssignIpv6AddressesRequest
 */
const se_AssignIpv6AddressesRequest = (input: AssignIpv6AddressesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Ipv6AddressCount != null) {
    entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
  }
  if (input.Ipv6Addresses != null) {
    const memberEntries = se_Ipv6AddressList(input.Ipv6Addresses, context);
    if (input.Ipv6Addresses?.length === 0) {
      entries.Ipv6Addresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6PrefixCount != null) {
    entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
  }
  if (input.Ipv6Prefixes != null) {
    const memberEntries = se_IpPrefixList(input.Ipv6Prefixes, context);
    if (input.Ipv6Prefixes?.length === 0) {
      entries.Ipv6Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  return entries;
};

/**
 * serializeAws_ec2AssignPrivateIpAddressesRequest
 */
const se_AssignPrivateIpAddressesRequest = (input: AssignPrivateIpAddressesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllowReassignment != null) {
    entries["AllowReassignment"] = input.AllowReassignment;
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.PrivateIpAddresses != null) {
    const memberEntries = se_PrivateIpAddressStringList(input.PrivateIpAddresses, context);
    if (input.PrivateIpAddresses?.length === 0) {
      entries.PrivateIpAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecondaryPrivateIpAddressCount != null) {
    entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
  }
  if (input.Ipv4Prefixes != null) {
    const memberEntries = se_IpPrefixList(input.Ipv4Prefixes, context);
    if (input.Ipv4Prefixes?.length === 0) {
      entries.Ipv4Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv4PrefixCount != null) {
    entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
  }
  return entries;
};

/**
 * serializeAws_ec2AssignPrivateNatGatewayAddressRequest
 */
const se_AssignPrivateNatGatewayAddressRequest = (
  input: AssignPrivateNatGatewayAddressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NatGatewayId != null) {
    entries["NatGatewayId"] = input.NatGatewayId;
  }
  if (input.PrivateIpAddresses != null) {
    const memberEntries = se_IpList(input.PrivateIpAddresses, context);
    if (input.PrivateIpAddresses?.length === 0) {
      entries.PrivateIpAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.PrivateIpAddressCount != null) {
    entries["PrivateIpAddressCount"] = input.PrivateIpAddressCount;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateAddressRequest
 */
const se_AssociateAddressRequest = (input: AssociateAddressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationId != null) {
    entries["AllocationId"] = input.AllocationId;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.PublicIp != null) {
    entries["PublicIp"] = input.PublicIp;
  }
  if (input.AllowReassociation != null) {
    entries["AllowReassociation"] = input.AllowReassociation;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.PrivateIpAddress != null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateClientVpnTargetNetworkRequest
 */
const se_AssociateClientVpnTargetNetworkRequest = (
  input: AssociateClientVpnTargetNetworkRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateDhcpOptionsRequest
 */
const se_AssociateDhcpOptionsRequest = (input: AssociateDhcpOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DhcpOptionsId != null) {
    entries["DhcpOptionsId"] = input.DhcpOptionsId;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateEnclaveCertificateIamRoleRequest
 */
const se_AssociateEnclaveCertificateIamRoleRequest = (
  input: AssociateEnclaveCertificateIamRoleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CertificateArn != null) {
    entries["CertificateArn"] = input.CertificateArn;
  }
  if (input.RoleArn != null) {
    entries["RoleArn"] = input.RoleArn;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateIamInstanceProfileRequest
 */
const se_AssociateIamInstanceProfileRequest = (
  input: AssociateIamInstanceProfileRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.IamInstanceProfile != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input.IamInstanceProfile, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateInstanceEventWindowRequest
 */
const se_AssociateInstanceEventWindowRequest = (
  input: AssociateInstanceEventWindowRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceEventWindowId != null) {
    entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
  }
  if (input.AssociationTarget != null) {
    const memberEntries = se_InstanceEventWindowAssociationRequest(input.AssociationTarget, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateIpamResourceDiscoveryRequest
 */
const se_AssociateIpamResourceDiscoveryRequest = (
  input: AssociateIpamResourceDiscoveryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamId != null) {
    entries["IpamId"] = input.IpamId;
  }
  if (input.IpamResourceDiscoveryId != null) {
    entries["IpamResourceDiscoveryId"] = input.IpamResourceDiscoveryId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateNatGatewayAddressRequest
 */
const se_AssociateNatGatewayAddressRequest = (
  input: AssociateNatGatewayAddressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NatGatewayId != null) {
    entries["NatGatewayId"] = input.NatGatewayId;
  }
  if (input.AllocationIds != null) {
    const memberEntries = se_AllocationIdList(input.AllocationIds, context);
    if (input.AllocationIds?.length === 0) {
      entries.AllocationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.PrivateIpAddresses != null) {
    const memberEntries = se_IpList(input.PrivateIpAddresses, context);
    if (input.PrivateIpAddresses?.length === 0) {
      entries.PrivateIpAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateRouteTableRequest
 */
const se_AssociateRouteTableRequest = (input: AssociateRouteTableRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.RouteTableId != null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.GatewayId != null) {
    entries["GatewayId"] = input.GatewayId;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateSubnetCidrBlockRequest
 */
const se_AssociateSubnetCidrBlockRequest = (input: AssociateSubnetCidrBlockRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Ipv6CidrBlock != null) {
    entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateTransitGatewayMulticastDomainRequest
 */
const se_AssociateTransitGatewayMulticastDomainRequest = (
  input: AssociateTransitGatewayMulticastDomainRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId != null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.SubnetIds != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input.SubnetIds, context);
    if (input.SubnetIds?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateTransitGatewayPolicyTableRequest
 */
const se_AssociateTransitGatewayPolicyTableRequest = (
  input: AssociateTransitGatewayPolicyTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayPolicyTableId != null) {
    entries["TransitGatewayPolicyTableId"] = input.TransitGatewayPolicyTableId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateTransitGatewayRouteTableRequest
 */
const se_AssociateTransitGatewayRouteTableRequest = (
  input: AssociateTransitGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateTrunkInterfaceRequest
 */
const se_AssociateTrunkInterfaceRequest = (input: AssociateTrunkInterfaceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.BranchInterfaceId != null) {
    entries["BranchInterfaceId"] = input.BranchInterfaceId;
  }
  if (input.TrunkInterfaceId != null) {
    entries["TrunkInterfaceId"] = input.TrunkInterfaceId;
  }
  if (input.VlanId != null) {
    entries["VlanId"] = input.VlanId;
  }
  if (input.GreKey != null) {
    entries["GreKey"] = input.GreKey;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateVpcCidrBlockRequest
 */
const se_AssociateVpcCidrBlockRequest = (input: AssociateVpcCidrBlockRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AmazonProvidedIpv6CidrBlock != null) {
    entries["AmazonProvidedIpv6CidrBlock"] = input.AmazonProvidedIpv6CidrBlock;
  }
  if (input.CidrBlock != null) {
    entries["CidrBlock"] = input.CidrBlock;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.Ipv6CidrBlockNetworkBorderGroup != null) {
    entries["Ipv6CidrBlockNetworkBorderGroup"] = input.Ipv6CidrBlockNetworkBorderGroup;
  }
  if (input.Ipv6Pool != null) {
    entries["Ipv6Pool"] = input.Ipv6Pool;
  }
  if (input.Ipv6CidrBlock != null) {
    entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
  }
  if (input.Ipv4IpamPoolId != null) {
    entries["Ipv4IpamPoolId"] = input.Ipv4IpamPoolId;
  }
  if (input.Ipv4NetmaskLength != null) {
    entries["Ipv4NetmaskLength"] = input.Ipv4NetmaskLength;
  }
  if (input.Ipv6IpamPoolId != null) {
    entries["Ipv6IpamPoolId"] = input.Ipv6IpamPoolId;
  }
  if (input.Ipv6NetmaskLength != null) {
    entries["Ipv6NetmaskLength"] = input.Ipv6NetmaskLength;
  }
  return entries;
};

/**
 * serializeAws_ec2AssociationIdList
 */
const se_AssociationIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AssociationId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AthenaIntegration
 */
const se_AthenaIntegration = (input: AthenaIntegration, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.IntegrationResultS3DestinationArn != null) {
    entries["IntegrationResultS3DestinationArn"] = input.IntegrationResultS3DestinationArn;
  }
  if (input.PartitionLoadFrequency != null) {
    entries["PartitionLoadFrequency"] = input.PartitionLoadFrequency;
  }
  if (input.PartitionStartDate != null) {
    entries["PartitionStartDate"] = input.PartitionStartDate.toISOString().split(".")[0] + "Z";
  }
  if (input.PartitionEndDate != null) {
    entries["PartitionEndDate"] = input.PartitionEndDate.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2AthenaIntegrationsSet
 */
const se_AthenaIntegrationsSet = (input: AthenaIntegration[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_AthenaIntegration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AttachClassicLinkVpcRequest
 */
const se_AttachClassicLinkVpcRequest = (input: AttachClassicLinkVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Groups != null) {
    const memberEntries = se_GroupIdStringList(input.Groups, context);
    if (input.Groups?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

/**
 * serializeAws_ec2AttachInternetGatewayRequest
 */
const se_AttachInternetGatewayRequest = (input: AttachInternetGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InternetGatewayId != null) {
    entries["InternetGatewayId"] = input.InternetGatewayId;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

/**
 * serializeAws_ec2AttachNetworkInterfaceRequest
 */
const se_AttachNetworkInterfaceRequest = (input: AttachNetworkInterfaceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DeviceIndex != null) {
    entries["DeviceIndex"] = input.DeviceIndex;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.NetworkCardIndex != null) {
    entries["NetworkCardIndex"] = input.NetworkCardIndex;
  }
  if (input.EnaSrdSpecification != null) {
    const memberEntries = se_EnaSrdSpecification(input.EnaSrdSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AttachVerifiedAccessTrustProviderRequest
 */
const se_AttachVerifiedAccessTrustProviderRequest = (
  input: AttachVerifiedAccessTrustProviderRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessInstanceId != null) {
    entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
  }
  if (input.VerifiedAccessTrustProviderId != null) {
    entries["VerifiedAccessTrustProviderId"] = input.VerifiedAccessTrustProviderId;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AttachVolumeRequest
 */
const se_AttachVolumeRequest = (input: AttachVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Device != null) {
    entries["Device"] = input.Device;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.VolumeId != null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AttachVpnGatewayRequest
 */
const se_AttachVpnGatewayRequest = (input: AttachVpnGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.VpnGatewayId != null) {
    entries["VpnGatewayId"] = input.VpnGatewayId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AttributeBooleanValue
 */
const se_AttributeBooleanValue = (input: AttributeBooleanValue, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

/**
 * serializeAws_ec2AttributeValue
 */
const se_AttributeValue = (input: AttributeValue, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

/**
 * serializeAws_ec2AuthorizeClientVpnIngressRequest
 */
const se_AuthorizeClientVpnIngressRequest = (input: AuthorizeClientVpnIngressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.TargetNetworkCidr != null) {
    entries["TargetNetworkCidr"] = input.TargetNetworkCidr;
  }
  if (input.AccessGroupId != null) {
    entries["AccessGroupId"] = input.AccessGroupId;
  }
  if (input.AuthorizeAllGroups != null) {
    entries["AuthorizeAllGroups"] = input.AuthorizeAllGroups;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2AuthorizeSecurityGroupEgressRequest
 */
const se_AuthorizeSecurityGroupEgressRequest = (
  input: AuthorizeSecurityGroupEgressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupId != null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.IpPermissions != null) {
    const memberEntries = se_IpPermissionList(input.IpPermissions, context);
    if (input.IpPermissions?.length === 0) {
      entries.IpPermissions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.CidrIp != null) {
    entries["CidrIp"] = input.CidrIp;
  }
  if (input.FromPort != null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.IpProtocol != null) {
    entries["IpProtocol"] = input.IpProtocol;
  }
  if (input.ToPort != null) {
    entries["ToPort"] = input.ToPort;
  }
  if (input.SourceSecurityGroupName != null) {
    entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
  }
  if (input.SourceSecurityGroupOwnerId != null) {
    entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
  }
  return entries;
};

/**
 * serializeAws_ec2AuthorizeSecurityGroupIngressRequest
 */
const se_AuthorizeSecurityGroupIngressRequest = (
  input: AuthorizeSecurityGroupIngressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CidrIp != null) {
    entries["CidrIp"] = input.CidrIp;
  }
  if (input.FromPort != null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.GroupId != null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.IpPermissions != null) {
    const memberEntries = se_IpPermissionList(input.IpPermissions, context);
    if (input.IpPermissions?.length === 0) {
      entries.IpPermissions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.IpProtocol != null) {
    entries["IpProtocol"] = input.IpProtocol;
  }
  if (input.SourceSecurityGroupName != null) {
    entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
  }
  if (input.SourceSecurityGroupOwnerId != null) {
    entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
  }
  if (input.ToPort != null) {
    entries["ToPort"] = input.ToPort;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AvailabilityZoneStringList
 */
const se_AvailabilityZoneStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AvailabilityZone.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2BaselineEbsBandwidthMbps
 */
const se_BaselineEbsBandwidthMbps = (input: BaselineEbsBandwidthMbps, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = input.Min;
  }
  if (input.Max != null) {
    entries["Max"] = input.Max;
  }
  return entries;
};

/**
 * serializeAws_ec2BaselineEbsBandwidthMbpsRequest
 */
const se_BaselineEbsBandwidthMbpsRequest = (input: BaselineEbsBandwidthMbpsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = input.Min;
  }
  if (input.Max != null) {
    entries["Max"] = input.Max;
  }
  return entries;
};

/**
 * serializeAws_ec2BillingProductList
 */
const se_BillingProductList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2BlobAttributeValue
 */
const se_BlobAttributeValue = (input: BlobAttributeValue, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Value != null) {
    entries["Value"] = context.base64Encoder(input.Value);
  }
  return entries;
};

/**
 * serializeAws_ec2BlockDeviceMapping
 */
const se_BlockDeviceMapping = (input: BlockDeviceMapping, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DeviceName != null) {
    entries["DeviceName"] = input.DeviceName;
  }
  if (input.VirtualName != null) {
    entries["VirtualName"] = input.VirtualName;
  }
  if (input.Ebs != null) {
    const memberEntries = se_EbsBlockDevice(input.Ebs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NoDevice != null) {
    entries["NoDevice"] = input.NoDevice;
  }
  return entries;
};

/**
 * serializeAws_ec2BlockDeviceMappingList
 */
const se_BlockDeviceMappingList = (input: BlockDeviceMapping[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_BlockDeviceMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2BlockDeviceMappingRequestList
 */
const se_BlockDeviceMappingRequestList = (input: BlockDeviceMapping[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_BlockDeviceMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`BlockDeviceMapping.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2BundleIdStringList
 */
const se_BundleIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`BundleId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2BundleInstanceRequest
 */
const se_BundleInstanceRequest = (input: BundleInstanceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.Storage != null) {
    const memberEntries = se_Storage(input.Storage, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Storage.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CancelBundleTaskRequest
 */
const se_CancelBundleTaskRequest = (input: CancelBundleTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.BundleId != null) {
    entries["BundleId"] = input.BundleId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CancelCapacityReservationFleetsRequest
 */
const se_CancelCapacityReservationFleetsRequest = (
  input: CancelCapacityReservationFleetsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.CapacityReservationFleetIds != null) {
    const memberEntries = se_CapacityReservationFleetIdSet(input.CapacityReservationFleetIds, context);
    if (input.CapacityReservationFleetIds?.length === 0) {
      entries.CapacityReservationFleetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationFleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CancelCapacityReservationRequest
 */
const se_CancelCapacityReservationRequest = (input: CancelCapacityReservationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CapacityReservationId != null) {
    entries["CapacityReservationId"] = input.CapacityReservationId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CancelConversionRequest
 */
const se_CancelConversionRequest = (input: CancelConversionRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ConversionTaskId != null) {
    entries["ConversionTaskId"] = input.ConversionTaskId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ReasonMessage != null) {
    entries["ReasonMessage"] = input.ReasonMessage;
  }
  return entries;
};

/**
 * serializeAws_ec2CancelExportTaskRequest
 */
const se_CancelExportTaskRequest = (input: CancelExportTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ExportTaskId != null) {
    entries["ExportTaskId"] = input.ExportTaskId;
  }
  return entries;
};

/**
 * serializeAws_ec2CancelImageLaunchPermissionRequest
 */
const se_CancelImageLaunchPermissionRequest = (
  input: CancelImageLaunchPermissionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CancelImportTaskRequest
 */
const se_CancelImportTaskRequest = (input: CancelImportTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CancelReason != null) {
    entries["CancelReason"] = input.CancelReason;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ImportTaskId != null) {
    entries["ImportTaskId"] = input.ImportTaskId;
  }
  return entries;
};

/**
 * serializeAws_ec2CancelReservedInstancesListingRequest
 */
const se_CancelReservedInstancesListingRequest = (
  input: CancelReservedInstancesListingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ReservedInstancesListingId != null) {
    entries["ReservedInstancesListingId"] = input.ReservedInstancesListingId;
  }
  return entries;
};

/**
 * serializeAws_ec2CancelSpotFleetRequestsRequest
 */
const se_CancelSpotFleetRequestsRequest = (input: CancelSpotFleetRequestsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SpotFleetRequestIds != null) {
    const memberEntries = se_SpotFleetRequestIdList(input.SpotFleetRequestIds, context);
    if (input.SpotFleetRequestIds?.length === 0) {
      entries.SpotFleetRequestId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TerminateInstances != null) {
    entries["TerminateInstances"] = input.TerminateInstances;
  }
  return entries;
};

/**
 * serializeAws_ec2CancelSpotInstanceRequestsRequest
 */
const se_CancelSpotInstanceRequestsRequest = (
  input: CancelSpotInstanceRequestsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SpotInstanceRequestIds != null) {
    const memberEntries = se_SpotInstanceRequestIdList(input.SpotInstanceRequestIds, context);
    if (input.SpotInstanceRequestIds?.length === 0) {
      entries.SpotInstanceRequestId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CapacityReservationFleetIdSet
 */
const se_CapacityReservationFleetIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CapacityReservationIdSet
 */
const se_CapacityReservationIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CapacityReservationOptionsRequest
 */
const se_CapacityReservationOptionsRequest = (
  input: CapacityReservationOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.UsageStrategy != null) {
    entries["UsageStrategy"] = input.UsageStrategy;
  }
  return entries;
};

/**
 * serializeAws_ec2CapacityReservationSpecification
 */
const se_CapacityReservationSpecification = (input: CapacityReservationSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CapacityReservationPreference != null) {
    entries["CapacityReservationPreference"] = input.CapacityReservationPreference;
  }
  if (input.CapacityReservationTarget != null) {
    const memberEntries = se_CapacityReservationTarget(input.CapacityReservationTarget, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CapacityReservationTarget
 */
const se_CapacityReservationTarget = (input: CapacityReservationTarget, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CapacityReservationId != null) {
    entries["CapacityReservationId"] = input.CapacityReservationId;
  }
  if (input.CapacityReservationResourceGroupArn != null) {
    entries["CapacityReservationResourceGroupArn"] = input.CapacityReservationResourceGroupArn;
  }
  return entries;
};

/**
 * serializeAws_ec2CarrierGatewayIdSet
 */
const se_CarrierGatewayIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CertificateAuthenticationRequest
 */
const se_CertificateAuthenticationRequest = (input: CertificateAuthenticationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientRootCertificateChainArn != null) {
    entries["ClientRootCertificateChainArn"] = input.ClientRootCertificateChainArn;
  }
  return entries;
};

/**
 * serializeAws_ec2CidrAuthorizationContext
 */
const se_CidrAuthorizationContext = (input: CidrAuthorizationContext, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Message != null) {
    entries["Message"] = input.Message;
  }
  if (input.Signature != null) {
    entries["Signature"] = input.Signature;
  }
  return entries;
};

/**
 * serializeAws_ec2ClassicLoadBalancer
 */
const se_ClassicLoadBalancer = (input: ClassicLoadBalancer, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  return entries;
};

/**
 * serializeAws_ec2ClassicLoadBalancers
 */
const se_ClassicLoadBalancers = (input: ClassicLoadBalancer[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ClassicLoadBalancer(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ClassicLoadBalancersConfig
 */
const se_ClassicLoadBalancersConfig = (input: ClassicLoadBalancersConfig, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClassicLoadBalancers != null) {
    const memberEntries = se_ClassicLoadBalancers(input.ClassicLoadBalancers, context);
    if (input.ClassicLoadBalancers?.length === 0) {
      entries.ClassicLoadBalancers = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClassicLoadBalancers.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ClientConnectOptions
 */
const se_ClientConnectOptions = (input: ClientConnectOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Enabled != null) {
    entries["Enabled"] = input.Enabled;
  }
  if (input.LambdaFunctionArn != null) {
    entries["LambdaFunctionArn"] = input.LambdaFunctionArn;
  }
  return entries;
};

/**
 * serializeAws_ec2ClientData
 */
const se_ClientData = (input: ClientData, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Comment != null) {
    entries["Comment"] = input.Comment;
  }
  if (input.UploadEnd != null) {
    entries["UploadEnd"] = input.UploadEnd.toISOString().split(".")[0] + "Z";
  }
  if (input.UploadSize != null) {
    entries["UploadSize"] = __serializeFloat(input.UploadSize);
  }
  if (input.UploadStart != null) {
    entries["UploadStart"] = input.UploadStart.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2ClientLoginBannerOptions
 */
const se_ClientLoginBannerOptions = (input: ClientLoginBannerOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Enabled != null) {
    entries["Enabled"] = input.Enabled;
  }
  if (input.BannerText != null) {
    entries["BannerText"] = input.BannerText;
  }
  return entries;
};

/**
 * serializeAws_ec2ClientVpnAuthenticationRequest
 */
const se_ClientVpnAuthenticationRequest = (input: ClientVpnAuthenticationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Type != null) {
    entries["Type"] = input.Type;
  }
  if (input.ActiveDirectory != null) {
    const memberEntries = se_DirectoryServiceAuthenticationRequest(input.ActiveDirectory, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ActiveDirectory.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MutualAuthentication != null) {
    const memberEntries = se_CertificateAuthenticationRequest(input.MutualAuthentication, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MutualAuthentication.${key}`;
      entries[loc] = value;
    });
  }
  if (input.FederatedAuthentication != null) {
    const memberEntries = se_FederatedAuthenticationRequest(input.FederatedAuthentication, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FederatedAuthentication.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ClientVpnAuthenticationRequestList
 */
const se_ClientVpnAuthenticationRequestList = (
  input: ClientVpnAuthenticationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ClientVpnAuthenticationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ClientVpnEndpointIdList
 */
const se_ClientVpnEndpointIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ClientVpnSecurityGroupIdSet
 */
const se_ClientVpnSecurityGroupIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CloudWatchLogOptionsSpecification
 */
const se_CloudWatchLogOptionsSpecification = (
  input: CloudWatchLogOptionsSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LogEnabled != null) {
    entries["LogEnabled"] = input.LogEnabled;
  }
  if (input.LogGroupArn != null) {
    entries["LogGroupArn"] = input.LogGroupArn;
  }
  if (input.LogOutputFormat != null) {
    entries["LogOutputFormat"] = input.LogOutputFormat;
  }
  return entries;
};

/**
 * serializeAws_ec2CoipPoolIdSet
 */
const se_CoipPoolIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ConfirmProductInstanceRequest
 */
const se_ConfirmProductInstanceRequest = (input: ConfirmProductInstanceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.ProductCode != null) {
    entries["ProductCode"] = input.ProductCode;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ConnectionLogOptions
 */
const se_ConnectionLogOptions = (input: ConnectionLogOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Enabled != null) {
    entries["Enabled"] = input.Enabled;
  }
  if (input.CloudwatchLogGroup != null) {
    entries["CloudwatchLogGroup"] = input.CloudwatchLogGroup;
  }
  if (input.CloudwatchLogStream != null) {
    entries["CloudwatchLogStream"] = input.CloudwatchLogStream;
  }
  return entries;
};

/**
 * serializeAws_ec2ConnectionNotificationIdsList
 */
const se_ConnectionNotificationIdsList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ConversionIdStringList
 */
const se_ConversionIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CopyFpgaImageRequest
 */
const se_CopyFpgaImageRequest = (input: CopyFpgaImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SourceFpgaImageId != null) {
    entries["SourceFpgaImageId"] = input.SourceFpgaImageId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  if (input.SourceRegion != null) {
    entries["SourceRegion"] = input.SourceRegion;
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2CopyImageRequest
 */
const se_CopyImageRequest = (input: CopyImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.Encrypted != null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.KmsKeyId != null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  if (input.SourceImageId != null) {
    entries["SourceImageId"] = input.SourceImageId;
  }
  if (input.SourceRegion != null) {
    entries["SourceRegion"] = input.SourceRegion;
  }
  if (input.DestinationOutpostArn != null) {
    entries["DestinationOutpostArn"] = input.DestinationOutpostArn;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.CopyImageTags != null) {
    entries["CopyImageTags"] = input.CopyImageTags;
  }
  return entries;
};

/**
 * serializeAws_ec2CopySnapshotRequest
 */
const se_CopySnapshotRequest = (input: CopySnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DestinationOutpostArn != null) {
    entries["DestinationOutpostArn"] = input.DestinationOutpostArn;
  }
  if (input.DestinationRegion != null) {
    entries["DestinationRegion"] = input.DestinationRegion;
  }
  if (input.Encrypted != null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.KmsKeyId != null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.PresignedUrl != null) {
    entries["PresignedUrl"] = input.PresignedUrl;
  }
  if (input.SourceRegion != null) {
    entries["SourceRegion"] = input.SourceRegion;
  }
  if (input.SourceSnapshotId != null) {
    entries["SourceSnapshotId"] = input.SourceSnapshotId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CpuManufacturerSet
 */
const se_CpuManufacturerSet = (input: CpuManufacturer[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CpuOptionsRequest
 */
const se_CpuOptionsRequest = (input: CpuOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CoreCount != null) {
    entries["CoreCount"] = input.CoreCount;
  }
  if (input.ThreadsPerCore != null) {
    entries["ThreadsPerCore"] = input.ThreadsPerCore;
  }
  if (input.AmdSevSnp != null) {
    entries["AmdSevSnp"] = input.AmdSevSnp;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateCapacityReservationFleetRequest
 */
const se_CreateCapacityReservationFleetRequest = (
  input: CreateCapacityReservationFleetRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AllocationStrategy != null) {
    entries["AllocationStrategy"] = input.AllocationStrategy;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.InstanceTypeSpecifications != null) {
    const memberEntries = se_ReservationFleetInstanceSpecificationList(input.InstanceTypeSpecifications, context);
    if (input.InstanceTypeSpecifications?.length === 0) {
      entries.InstanceTypeSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTypeSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Tenancy != null) {
    entries["Tenancy"] = input.Tenancy;
  }
  if (input.TotalTargetCapacity != null) {
    entries["TotalTargetCapacity"] = input.TotalTargetCapacity;
  }
  if (input.EndDate != null) {
    entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
  }
  if (input.InstanceMatchCriteria != null) {
    entries["InstanceMatchCriteria"] = input.InstanceMatchCriteria;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateCapacityReservationRequest
 */
const se_CreateCapacityReservationRequest = (input: CreateCapacityReservationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.InstancePlatform != null) {
    entries["InstancePlatform"] = input.InstancePlatform;
  }
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.AvailabilityZoneId != null) {
    entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
  }
  if (input.Tenancy != null) {
    entries["Tenancy"] = input.Tenancy;
  }
  if (input.InstanceCount != null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.EbsOptimized != null) {
    entries["EbsOptimized"] = input.EbsOptimized;
  }
  if (input.EphemeralStorage != null) {
    entries["EphemeralStorage"] = input.EphemeralStorage;
  }
  if (input.EndDate != null) {
    entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
  }
  if (input.EndDateType != null) {
    entries["EndDateType"] = input.EndDateType;
  }
  if (input.InstanceMatchCriteria != null) {
    entries["InstanceMatchCriteria"] = input.InstanceMatchCriteria;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecifications = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.OutpostArn != null) {
    entries["OutpostArn"] = input.OutpostArn;
  }
  if (input.PlacementGroupArn != null) {
    entries["PlacementGroupArn"] = input.PlacementGroupArn;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateCarrierGatewayRequest
 */
const se_CreateCarrierGatewayRequest = (input: CreateCarrierGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateClientVpnEndpointRequest
 */
const se_CreateClientVpnEndpointRequest = (input: CreateClientVpnEndpointRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientCidrBlock != null) {
    entries["ClientCidrBlock"] = input.ClientCidrBlock;
  }
  if (input.ServerCertificateArn != null) {
    entries["ServerCertificateArn"] = input.ServerCertificateArn;
  }
  if (input.AuthenticationOptions != null) {
    const memberEntries = se_ClientVpnAuthenticationRequestList(input.AuthenticationOptions, context);
    if (input.AuthenticationOptions?.length === 0) {
      entries.Authentication = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Authentication.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ConnectionLogOptions != null) {
    const memberEntries = se_ConnectionLogOptions(input.ConnectionLogOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionLogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DnsServers != null) {
    const memberEntries = se_ValueStringList(input.DnsServers, context);
    if (input.DnsServers?.length === 0) {
      entries.DnsServers = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsServers.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TransportProtocol != null) {
    entries["TransportProtocol"] = input.TransportProtocol;
  }
  if (input.VpnPort != null) {
    entries["VpnPort"] = input.VpnPort;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.SplitTunnel != null) {
    entries["SplitTunnel"] = input.SplitTunnel;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroupIds != null) {
    const memberEntries = se_ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
    if (input.SecurityGroupIds?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.SelfServicePortal != null) {
    entries["SelfServicePortal"] = input.SelfServicePortal;
  }
  if (input.ClientConnectOptions != null) {
    const memberEntries = se_ClientConnectOptions(input.ClientConnectOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientConnectOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SessionTimeoutHours != null) {
    entries["SessionTimeoutHours"] = input.SessionTimeoutHours;
  }
  if (input.ClientLoginBannerOptions != null) {
    const memberEntries = se_ClientLoginBannerOptions(input.ClientLoginBannerOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientLoginBannerOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateClientVpnRouteRequest
 */
const se_CreateClientVpnRouteRequest = (input: CreateClientVpnRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.TargetVpcSubnetId != null) {
    entries["TargetVpcSubnetId"] = input.TargetVpcSubnetId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateCoipCidrRequest
 */
const se_CreateCoipCidrRequest = (input: CreateCoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.CoipPoolId != null) {
    entries["CoipPoolId"] = input.CoipPoolId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateCoipPoolRequest
 */
const se_CreateCoipPoolRequest = (input: CreateCoipPoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.LocalGatewayRouteTableId != null) {
    entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateCustomerGatewayRequest
 */
const se_CreateCustomerGatewayRequest = (input: CreateCustomerGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.BgpAsn != null) {
    entries["BgpAsn"] = input.BgpAsn;
  }
  if (input.PublicIp != null) {
    entries["PublicIp"] = input.PublicIp;
  }
  if (input.CertificateArn != null) {
    entries["CertificateArn"] = input.CertificateArn;
  }
  if (input.Type != null) {
    entries["Type"] = input.Type;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DeviceName != null) {
    entries["DeviceName"] = input.DeviceName;
  }
  if (input.IpAddress != null) {
    entries["IpAddress"] = input.IpAddress;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateDefaultSubnetRequest
 */
const se_CreateDefaultSubnetRequest = (input: CreateDefaultSubnetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Ipv6Native != null) {
    entries["Ipv6Native"] = input.Ipv6Native;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateDefaultVpcRequest
 */
const se_CreateDefaultVpcRequest = (input: CreateDefaultVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateDhcpOptionsRequest
 */
const se_CreateDhcpOptionsRequest = (input: CreateDhcpOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DhcpConfigurations != null) {
    const memberEntries = se_NewDhcpConfigurationList(input.DhcpConfigurations, context);
    if (input.DhcpConfigurations?.length === 0) {
      entries.DhcpConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DhcpConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateEgressOnlyInternetGatewayRequest
 */
const se_CreateEgressOnlyInternetGatewayRequest = (
  input: CreateEgressOnlyInternetGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateFleetRequest
 */
const se_CreateFleetRequest = (input: CreateFleetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.SpotOptions != null) {
    const memberEntries = se_SpotOptionsRequest(input.SpotOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.OnDemandOptions != null) {
    const memberEntries = se_OnDemandOptionsRequest(input.OnDemandOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OnDemandOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ExcessCapacityTerminationPolicy != null) {
    entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
  }
  if (input.LaunchTemplateConfigs != null) {
    const memberEntries = se_FleetLaunchTemplateConfigListRequest(input.LaunchTemplateConfigs, context);
    if (input.LaunchTemplateConfigs?.length === 0) {
      entries.LaunchTemplateConfigs = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TargetCapacitySpecification != null) {
    const memberEntries = se_TargetCapacitySpecificationRequest(input.TargetCapacitySpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetCapacitySpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TerminateInstancesWithExpiration != null) {
    entries["TerminateInstancesWithExpiration"] = input.TerminateInstancesWithExpiration;
  }
  if (input.Type != null) {
    entries["Type"] = input.Type;
  }
  if (input.ValidFrom != null) {
    entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
  }
  if (input.ValidUntil != null) {
    entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
  }
  if (input.ReplaceUnhealthyInstances != null) {
    entries["ReplaceUnhealthyInstances"] = input.ReplaceUnhealthyInstances;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Context != null) {
    entries["Context"] = input.Context;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateFlowLogsRequest
 */
const se_CreateFlowLogsRequest = (input: CreateFlowLogsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DeliverLogsPermissionArn != null) {
    entries["DeliverLogsPermissionArn"] = input.DeliverLogsPermissionArn;
  }
  if (input.DeliverCrossAccountRole != null) {
    entries["DeliverCrossAccountRole"] = input.DeliverCrossAccountRole;
  }
  if (input.LogGroupName != null) {
    entries["LogGroupName"] = input.LogGroupName;
  }
  if (input.ResourceIds != null) {
    const memberEntries = se_FlowLogResourceIds(input.ResourceIds, context);
    if (input.ResourceIds?.length === 0) {
      entries.ResourceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ResourceType != null) {
    entries["ResourceType"] = input.ResourceType;
  }
  if (input.TrafficType != null) {
    entries["TrafficType"] = input.TrafficType;
  }
  if (input.LogDestinationType != null) {
    entries["LogDestinationType"] = input.LogDestinationType;
  }
  if (input.LogDestination != null) {
    entries["LogDestination"] = input.LogDestination;
  }
  if (input.LogFormat != null) {
    entries["LogFormat"] = input.LogFormat;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxAggregationInterval != null) {
    entries["MaxAggregationInterval"] = input.MaxAggregationInterval;
  }
  if (input.DestinationOptions != null) {
    const memberEntries = se_DestinationOptionsRequest(input.DestinationOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateFpgaImageRequest
 */
const se_CreateFpgaImageRequest = (input: CreateFpgaImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InputStorageLocation != null) {
    const memberEntries = se_StorageLocation(input.InputStorageLocation, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InputStorageLocation.${key}`;
      entries[loc] = value;
    });
  }
  if (input.LogsStorageLocation != null) {
    const memberEntries = se_StorageLocation(input.LogsStorageLocation, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogsStorageLocation.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateImageRequest
 */
const se_CreateImageRequest = (input: CreateImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.BlockDeviceMappings != null) {
    const memberEntries = se_BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
    if (input.BlockDeviceMappings?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  if (input.NoReboot != null) {
    entries["NoReboot"] = input.NoReboot;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateInstanceConnectEndpointRequest
 */
const se_CreateInstanceConnectEndpointRequest = (
  input: CreateInstanceConnectEndpointRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.SecurityGroupIds != null) {
    const memberEntries = se_SecurityGroupIdStringListRequest(input.SecurityGroupIds, context);
    if (input.SecurityGroupIds?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.PreserveClientIp != null) {
    entries["PreserveClientIp"] = input.PreserveClientIp;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateInstanceEventWindowRequest
 */
const se_CreateInstanceEventWindowRequest = (input: CreateInstanceEventWindowRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  if (input.TimeRanges != null) {
    const memberEntries = se_InstanceEventWindowTimeRangeRequestSet(input.TimeRanges, context);
    if (input.TimeRanges?.length === 0) {
      entries.TimeRange = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TimeRange.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.CronExpression != null) {
    entries["CronExpression"] = input.CronExpression;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateInstanceExportTaskRequest
 */
const se_CreateInstanceExportTaskRequest = (input: CreateInstanceExportTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.ExportToS3Task != null) {
    const memberEntries = se_ExportToS3TaskSpecification(input.ExportToS3Task, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExportToS3.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.TargetEnvironment != null) {
    entries["TargetEnvironment"] = input.TargetEnvironment;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateInternetGatewayRequest
 */
const se_CreateInternetGatewayRequest = (input: CreateInternetGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateIpamPoolRequest
 */
const se_CreateIpamPoolRequest = (input: CreateIpamPoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamScopeId != null) {
    entries["IpamScopeId"] = input.IpamScopeId;
  }
  if (input.Locale != null) {
    entries["Locale"] = input.Locale;
  }
  if (input.SourceIpamPoolId != null) {
    entries["SourceIpamPoolId"] = input.SourceIpamPoolId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.AddressFamily != null) {
    entries["AddressFamily"] = input.AddressFamily;
  }
  if (input.AutoImport != null) {
    entries["AutoImport"] = input.AutoImport;
  }
  if (input.PubliclyAdvertisable != null) {
    entries["PubliclyAdvertisable"] = input.PubliclyAdvertisable;
  }
  if (input.AllocationMinNetmaskLength != null) {
    entries["AllocationMinNetmaskLength"] = input.AllocationMinNetmaskLength;
  }
  if (input.AllocationMaxNetmaskLength != null) {
    entries["AllocationMaxNetmaskLength"] = input.AllocationMaxNetmaskLength;
  }
  if (input.AllocationDefaultNetmaskLength != null) {
    entries["AllocationDefaultNetmaskLength"] = input.AllocationDefaultNetmaskLength;
  }
  if (input.AllocationResourceTags != null) {
    const memberEntries = se_RequestIpamResourceTagList(input.AllocationResourceTags, context);
    if (input.AllocationResourceTags?.length === 0) {
      entries.AllocationResourceTag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.AwsService != null) {
    entries["AwsService"] = input.AwsService;
  }
  if (input.PublicIpSource != null) {
    entries["PublicIpSource"] = input.PublicIpSource;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateIpamRequest
 */
const se_CreateIpamRequest = (input: CreateIpamRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.OperatingRegions != null) {
    const memberEntries = se_AddIpamOperatingRegionSet(input.OperatingRegions, context);
    if (input.OperatingRegions?.length === 0) {
      entries.OperatingRegion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateIpamResourceDiscoveryRequest
 */
const se_CreateIpamResourceDiscoveryRequest = (
  input: CreateIpamResourceDiscoveryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.OperatingRegions != null) {
    const memberEntries = se_AddIpamOperatingRegionSet(input.OperatingRegions, context);
    if (input.OperatingRegions?.length === 0) {
      entries.OperatingRegion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateIpamScopeRequest
 */
const se_CreateIpamScopeRequest = (input: CreateIpamScopeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamId != null) {
    entries["IpamId"] = input.IpamId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateKeyPairRequest
 */
const se_CreateKeyPairRequest = (input: CreateKeyPairRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.KeyName != null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.KeyType != null) {
    entries["KeyType"] = input.KeyType;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.KeyFormat != null) {
    entries["KeyFormat"] = input.KeyFormat;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateLaunchTemplateRequest
 */
const se_CreateLaunchTemplateRequest = (input: CreateLaunchTemplateRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.LaunchTemplateName != null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.VersionDescription != null) {
    entries["VersionDescription"] = input.VersionDescription;
  }
  if (input.LaunchTemplateData != null) {
    const memberEntries = se_RequestLaunchTemplateData(input.LaunchTemplateData, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateData.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateLaunchTemplateVersionRequest
 */
const se_CreateLaunchTemplateVersionRequest = (
  input: CreateLaunchTemplateVersionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.LaunchTemplateId != null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName != null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.SourceVersion != null) {
    entries["SourceVersion"] = input.SourceVersion;
  }
  if (input.VersionDescription != null) {
    entries["VersionDescription"] = input.VersionDescription;
  }
  if (input.LaunchTemplateData != null) {
    const memberEntries = se_RequestLaunchTemplateData(input.LaunchTemplateData, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateData.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ResolveAlias != null) {
    entries["ResolveAlias"] = input.ResolveAlias;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteRequest
 */
const se_CreateLocalGatewayRouteRequest = (input: CreateLocalGatewayRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.LocalGatewayRouteTableId != null) {
    entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
  }
  if (input.LocalGatewayVirtualInterfaceGroupId != null) {
    entries["LocalGatewayVirtualInterfaceGroupId"] = input.LocalGatewayVirtualInterfaceGroupId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.DestinationPrefixListId != null) {
    entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteTableRequest
 */
const se_CreateLocalGatewayRouteTableRequest = (
  input: CreateLocalGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayId != null) {
    entries["LocalGatewayId"] = input.LocalGatewayId;
  }
  if (input.Mode != null) {
    entries["Mode"] = input.Mode;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest
 */
const se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest = (
  input: CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayRouteTableId != null) {
    entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
  }
  if (input.LocalGatewayVirtualInterfaceGroupId != null) {
    entries["LocalGatewayVirtualInterfaceGroupId"] = input.LocalGatewayVirtualInterfaceGroupId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationRequest
 */
const se_CreateLocalGatewayRouteTableVpcAssociationRequest = (
  input: CreateLocalGatewayRouteTableVpcAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayRouteTableId != null) {
    entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateManagedPrefixListRequest
 */
const se_CreateManagedPrefixListRequest = (input: CreateManagedPrefixListRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PrefixListName != null) {
    entries["PrefixListName"] = input.PrefixListName;
  }
  if (input.Entries != null) {
    const memberEntries = se_AddPrefixListEntries(input.Entries, context);
    if (input.Entries?.length === 0) {
      entries.Entry = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Entry.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxEntries != null) {
    entries["MaxEntries"] = input.MaxEntries;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AddressFamily != null) {
    entries["AddressFamily"] = input.AddressFamily;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNatGatewayRequest
 */
const se_CreateNatGatewayRequest = (input: CreateNatGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationId != null) {
    entries["AllocationId"] = input.AllocationId;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ConnectivityType != null) {
    entries["ConnectivityType"] = input.ConnectivityType;
  }
  if (input.PrivateIpAddress != null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  if (input.SecondaryAllocationIds != null) {
    const memberEntries = se_AllocationIdList(input.SecondaryAllocationIds, context);
    if (input.SecondaryAllocationIds?.length === 0) {
      entries.SecondaryAllocationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecondaryAllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecondaryPrivateIpAddresses != null) {
    const memberEntries = se_IpList(input.SecondaryPrivateIpAddresses, context);
    if (input.SecondaryPrivateIpAddresses?.length === 0) {
      entries.SecondaryPrivateIpAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecondaryPrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecondaryPrivateIpAddressCount != null) {
    entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNetworkAclEntryRequest
 */
const se_CreateNetworkAclEntryRequest = (input: CreateNetworkAclEntryRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CidrBlock != null) {
    entries["CidrBlock"] = input.CidrBlock;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Egress != null) {
    entries["Egress"] = input.Egress;
  }
  if (input.IcmpTypeCode != null) {
    const memberEntries = se_IcmpTypeCode(input.IcmpTypeCode, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Icmp.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6CidrBlock != null) {
    entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
  }
  if (input.NetworkAclId != null) {
    entries["NetworkAclId"] = input.NetworkAclId;
  }
  if (input.PortRange != null) {
    const memberEntries = se_PortRange(input.PortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Protocol != null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.RuleAction != null) {
    entries["RuleAction"] = input.RuleAction;
  }
  if (input.RuleNumber != null) {
    entries["RuleNumber"] = input.RuleNumber;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNetworkAclRequest
 */
const se_CreateNetworkAclRequest = (input: CreateNetworkAclRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNetworkInsightsAccessScopeRequest
 */
const se_CreateNetworkInsightsAccessScopeRequest = (
  input: CreateNetworkInsightsAccessScopeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.MatchPaths != null) {
    const memberEntries = se_AccessScopePathListRequest(input.MatchPaths, context);
    if (input.MatchPaths?.length === 0) {
      entries.MatchPath = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MatchPath.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ExcludePaths != null) {
    const memberEntries = se_AccessScopePathListRequest(input.ExcludePaths, context);
    if (input.ExcludePaths?.length === 0) {
      entries.ExcludePath = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludePath.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNetworkInsightsPathRequest
 */
const se_CreateNetworkInsightsPathRequest = (input: CreateNetworkInsightsPathRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SourceIp != null) {
    entries["SourceIp"] = input.SourceIp;
  }
  if (input.DestinationIp != null) {
    entries["DestinationIp"] = input.DestinationIp;
  }
  if (input.Source != null) {
    entries["Source"] = input.Source;
  }
  if (input.Destination != null) {
    entries["Destination"] = input.Destination;
  }
  if (input.Protocol != null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.DestinationPort != null) {
    entries["DestinationPort"] = input.DestinationPort;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.FilterAtSource != null) {
    const memberEntries = se_PathRequestFilter(input.FilterAtSource, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FilterAtSource.${key}`;
      entries[loc] = value;
    });
  }
  if (input.FilterAtDestination != null) {
    const memberEntries = se_PathRequestFilter(input.FilterAtDestination, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FilterAtDestination.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNetworkInterfacePermissionRequest
 */
const se_CreateNetworkInterfacePermissionRequest = (
  input: CreateNetworkInterfacePermissionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.AwsAccountId != null) {
    entries["AwsAccountId"] = input.AwsAccountId;
  }
  if (input.AwsService != null) {
    entries["AwsService"] = input.AwsService;
  }
  if (input.Permission != null) {
    entries["Permission"] = input.Permission;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNetworkInterfaceRequest
 */
const se_CreateNetworkInterfaceRequest = (input: CreateNetworkInterfaceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Groups != null) {
    const memberEntries = se_SecurityGroupIdStringList(input.Groups, context);
    if (input.Groups?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6AddressCount != null) {
    entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
  }
  if (input.Ipv6Addresses != null) {
    const memberEntries = se_InstanceIpv6AddressList(input.Ipv6Addresses, context);
    if (input.Ipv6Addresses?.length === 0) {
      entries.Ipv6Addresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.PrivateIpAddress != null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  if (input.PrivateIpAddresses != null) {
    const memberEntries = se_PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
    if (input.PrivateIpAddresses?.length === 0) {
      entries.PrivateIpAddresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecondaryPrivateIpAddressCount != null) {
    entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
  }
  if (input.Ipv4Prefixes != null) {
    const memberEntries = se_Ipv4PrefixList(input.Ipv4Prefixes, context);
    if (input.Ipv4Prefixes?.length === 0) {
      entries.Ipv4Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv4PrefixCount != null) {
    entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
  }
  if (input.Ipv6Prefixes != null) {
    const memberEntries = se_Ipv6PrefixList(input.Ipv6Prefixes, context);
    if (input.Ipv6Prefixes?.length === 0) {
      entries.Ipv6Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6PrefixCount != null) {
    entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
  }
  if (input.InterfaceType != null) {
    entries["InterfaceType"] = input.InterfaceType;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.EnablePrimaryIpv6 != null) {
    entries["EnablePrimaryIpv6"] = input.EnablePrimaryIpv6;
  }
  return entries;
};

/**
 * serializeAws_ec2CreatePlacementGroupRequest
 */
const se_CreatePlacementGroupRequest = (input: CreatePlacementGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.Strategy != null) {
    entries["Strategy"] = input.Strategy;
  }
  if (input.PartitionCount != null) {
    entries["PartitionCount"] = input.PartitionCount;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SpreadLevel != null) {
    entries["SpreadLevel"] = input.SpreadLevel;
  }
  return entries;
};

/**
 * serializeAws_ec2CreatePublicIpv4PoolRequest
 */
const se_CreatePublicIpv4PoolRequest = (input: CreatePublicIpv4PoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateReplaceRootVolumeTaskRequest
 */
const se_CreateReplaceRootVolumeTaskRequest = (
  input: CreateReplaceRootVolumeTaskRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.SnapshotId != null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.DeleteReplacedRootVolume != null) {
    entries["DeleteReplacedRootVolume"] = input.DeleteReplacedRootVolume;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateReservedInstancesListingRequest
 */
const se_CreateReservedInstancesListingRequest = (
  input: CreateReservedInstancesListingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.InstanceCount != null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.PriceSchedules != null) {
    const memberEntries = se_PriceScheduleSpecificationList(input.PriceSchedules, context);
    if (input.PriceSchedules?.length === 0) {
      entries.PriceSchedules = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PriceSchedules.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ReservedInstancesId != null) {
    entries["ReservedInstancesId"] = input.ReservedInstancesId;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateRestoreImageTaskRequest
 */
const se_CreateRestoreImageTaskRequest = (input: CreateRestoreImageTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Bucket != null) {
    entries["Bucket"] = input.Bucket;
  }
  if (input.ObjectKey != null) {
    entries["ObjectKey"] = input.ObjectKey;
  }
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateRouteRequest
 */
const se_CreateRouteRequest = (input: CreateRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.DestinationIpv6CidrBlock != null) {
    entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
  }
  if (input.DestinationPrefixListId != null) {
    entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcEndpointId != null) {
    entries["VpcEndpointId"] = input.VpcEndpointId;
  }
  if (input.EgressOnlyInternetGatewayId != null) {
    entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
  }
  if (input.GatewayId != null) {
    entries["GatewayId"] = input.GatewayId;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.NatGatewayId != null) {
    entries["NatGatewayId"] = input.NatGatewayId;
  }
  if (input.TransitGatewayId != null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.LocalGatewayId != null) {
    entries["LocalGatewayId"] = input.LocalGatewayId;
  }
  if (input.CarrierGatewayId != null) {
    entries["CarrierGatewayId"] = input.CarrierGatewayId;
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.RouteTableId != null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  if (input.VpcPeeringConnectionId != null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  if (input.CoreNetworkArn != null) {
    entries["CoreNetworkArn"] = input.CoreNetworkArn;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateRouteTableRequest
 */
const se_CreateRouteTableRequest = (input: CreateRouteTableRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateSecurityGroupRequest
 */
const se_CreateSecurityGroupRequest = (input: CreateSecurityGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["GroupDescription"] = input.Description;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateSnapshotRequest
 */
const se_CreateSnapshotRequest = (input: CreateSnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.OutpostArn != null) {
    entries["OutpostArn"] = input.OutpostArn;
  }
  if (input.VolumeId != null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateSnapshotsRequest
 */
const se_CreateSnapshotsRequest = (input: CreateSnapshotsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.InstanceSpecification != null) {
    const memberEntries = se_InstanceSpecification(input.InstanceSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.OutpostArn != null) {
    entries["OutpostArn"] = input.OutpostArn;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.CopyTagsFromSource != null) {
    entries["CopyTagsFromSource"] = input.CopyTagsFromSource;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateSpotDatafeedSubscriptionRequest
 */
const se_CreateSpotDatafeedSubscriptionRequest = (
  input: CreateSpotDatafeedSubscriptionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Bucket != null) {
    entries["Bucket"] = input.Bucket;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Prefix != null) {
    entries["Prefix"] = input.Prefix;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateStoreImageTaskRequest
 */
const se_CreateStoreImageTaskRequest = (input: CreateStoreImageTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.Bucket != null) {
    entries["Bucket"] = input.Bucket;
  }
  if (input.S3ObjectTags != null) {
    const memberEntries = se_S3ObjectTagList(input.S3ObjectTags, context);
    if (input.S3ObjectTags?.length === 0) {
      entries.S3ObjectTag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3ObjectTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateSubnetCidrReservationRequest
 */
const se_CreateSubnetCidrReservationRequest = (
  input: CreateSubnetCidrReservationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.ReservationType != null) {
    entries["ReservationType"] = input.ReservationType;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateSubnetRequest
 */
const se_CreateSubnetRequest = (input: CreateSubnetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.AvailabilityZoneId != null) {
    entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
  }
  if (input.CidrBlock != null) {
    entries["CidrBlock"] = input.CidrBlock;
  }
  if (input.Ipv6CidrBlock != null) {
    entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
  }
  if (input.OutpostArn != null) {
    entries["OutpostArn"] = input.OutpostArn;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Ipv6Native != null) {
    entries["Ipv6Native"] = input.Ipv6Native;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTagsRequest
 */
const se_CreateTagsRequest = (input: CreateTagsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Resources != null) {
    const memberEntries = se_ResourceIdList(input.Resources, context);
    if (input.Resources?.length === 0) {
      entries.ResourceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Tags != null) {
    const memberEntries = se_TagList(input.Tags, context);
    if (input.Tags?.length === 0) {
      entries.Tag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTrafficMirrorFilterRequest
 */
const se_CreateTrafficMirrorFilterRequest = (input: CreateTrafficMirrorFilterRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTrafficMirrorFilterRuleRequest
 */
const se_CreateTrafficMirrorFilterRuleRequest = (
  input: CreateTrafficMirrorFilterRuleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorFilterId != null) {
    entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
  }
  if (input.TrafficDirection != null) {
    entries["TrafficDirection"] = input.TrafficDirection;
  }
  if (input.RuleNumber != null) {
    entries["RuleNumber"] = input.RuleNumber;
  }
  if (input.RuleAction != null) {
    entries["RuleAction"] = input.RuleAction;
  }
  if (input.DestinationPortRange != null) {
    const memberEntries = se_TrafficMirrorPortRangeRequest(input.DestinationPortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SourcePortRange != null) {
    const memberEntries = se_TrafficMirrorPortRangeRequest(input.SourcePortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Protocol != null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.SourceCidrBlock != null) {
    entries["SourceCidrBlock"] = input.SourceCidrBlock;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTrafficMirrorSessionRequest
 */
const se_CreateTrafficMirrorSessionRequest = (
  input: CreateTrafficMirrorSessionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.TrafficMirrorTargetId != null) {
    entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
  }
  if (input.TrafficMirrorFilterId != null) {
    entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
  }
  if (input.PacketLength != null) {
    entries["PacketLength"] = input.PacketLength;
  }
  if (input.SessionNumber != null) {
    entries["SessionNumber"] = input.SessionNumber;
  }
  if (input.VirtualNetworkId != null) {
    entries["VirtualNetworkId"] = input.VirtualNetworkId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTrafficMirrorTargetRequest
 */
const se_CreateTrafficMirrorTargetRequest = (input: CreateTrafficMirrorTargetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.NetworkLoadBalancerArn != null) {
    entries["NetworkLoadBalancerArn"] = input.NetworkLoadBalancerArn;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.GatewayLoadBalancerEndpointId != null) {
    entries["GatewayLoadBalancerEndpointId"] = input.GatewayLoadBalancerEndpointId;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayConnectPeerRequest
 */
const se_CreateTransitGatewayConnectPeerRequest = (
  input: CreateTransitGatewayConnectPeerRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.TransitGatewayAddress != null) {
    entries["TransitGatewayAddress"] = input.TransitGatewayAddress;
  }
  if (input.PeerAddress != null) {
    entries["PeerAddress"] = input.PeerAddress;
  }
  if (input.BgpOptions != null) {
    const memberEntries = se_TransitGatewayConnectRequestBgpOptions(input.BgpOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BgpOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InsideCidrBlocks != null) {
    const memberEntries = se_InsideCidrBlocksStringList(input.InsideCidrBlocks, context);
    if (input.InsideCidrBlocks?.length === 0) {
      entries.InsideCidrBlocks = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InsideCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayConnectRequest
 */
const se_CreateTransitGatewayConnectRequest = (
  input: CreateTransitGatewayConnectRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransportTransitGatewayAttachmentId != null) {
    entries["TransportTransitGatewayAttachmentId"] = input.TransportTransitGatewayAttachmentId;
  }
  if (input.Options != null) {
    const memberEntries = se_CreateTransitGatewayConnectRequestOptions(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayConnectRequestOptions
 */
const se_CreateTransitGatewayConnectRequestOptions = (
  input: CreateTransitGatewayConnectRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Protocol != null) {
    entries["Protocol"] = input.Protocol;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayMulticastDomainRequest
 */
const se_CreateTransitGatewayMulticastDomainRequest = (
  input: CreateTransitGatewayMulticastDomainRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayId != null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.Options != null) {
    const memberEntries = se_CreateTransitGatewayMulticastDomainRequestOptions(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayMulticastDomainRequestOptions
 */
const se_CreateTransitGatewayMulticastDomainRequestOptions = (
  input: CreateTransitGatewayMulticastDomainRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Igmpv2Support != null) {
    entries["Igmpv2Support"] = input.Igmpv2Support;
  }
  if (input.StaticSourcesSupport != null) {
    entries["StaticSourcesSupport"] = input.StaticSourcesSupport;
  }
  if (input.AutoAcceptSharedAssociations != null) {
    entries["AutoAcceptSharedAssociations"] = input.AutoAcceptSharedAssociations;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayPeeringAttachmentRequest
 */
const se_CreateTransitGatewayPeeringAttachmentRequest = (
  input: CreateTransitGatewayPeeringAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayId != null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.PeerTransitGatewayId != null) {
    entries["PeerTransitGatewayId"] = input.PeerTransitGatewayId;
  }
  if (input.PeerAccountId != null) {
    entries["PeerAccountId"] = input.PeerAccountId;
  }
  if (input.PeerRegion != null) {
    entries["PeerRegion"] = input.PeerRegion;
  }
  if (input.Options != null) {
    const memberEntries = se_CreateTransitGatewayPeeringAttachmentRequestOptions(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayPeeringAttachmentRequestOptions
 */
const se_CreateTransitGatewayPeeringAttachmentRequestOptions = (
  input: CreateTransitGatewayPeeringAttachmentRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DynamicRouting != null) {
    entries["DynamicRouting"] = input.DynamicRouting;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayPolicyTableRequest
 */
const se_CreateTransitGatewayPolicyTableRequest = (
  input: CreateTransitGatewayPolicyTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayId != null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecifications = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayPrefixListReferenceRequest
 */
const se_CreateTransitGatewayPrefixListReferenceRequest = (
  input: CreateTransitGatewayPrefixListReferenceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.PrefixListId != null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.Blackhole != null) {
    entries["Blackhole"] = input.Blackhole;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayRequest
 */
const se_CreateTransitGatewayRequest = (input: CreateTransitGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.Options != null) {
    const memberEntries = se_TransitGatewayRequestOptions(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayRouteRequest
 */
const se_CreateTransitGatewayRouteRequest = (input: CreateTransitGatewayRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.Blackhole != null) {
    entries["Blackhole"] = input.Blackhole;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayRouteTableAnnouncementRequest
 */
const se_CreateTransitGatewayRouteTableAnnouncementRequest = (
  input: CreateTransitGatewayRouteTableAnnouncementRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.PeeringAttachmentId != null) {
    entries["PeeringAttachmentId"] = input.PeeringAttachmentId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayRouteTableRequest
 */
const se_CreateTransitGatewayRouteTableRequest = (
  input: CreateTransitGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayId != null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecifications = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayVpcAttachmentRequest
 */
const se_CreateTransitGatewayVpcAttachmentRequest = (
  input: CreateTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayId != null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.SubnetIds != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input.SubnetIds, context);
    if (input.SubnetIds?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Options != null) {
    const memberEntries = se_CreateTransitGatewayVpcAttachmentRequestOptions(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecifications = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayVpcAttachmentRequestOptions
 */
const se_CreateTransitGatewayVpcAttachmentRequestOptions = (
  input: CreateTransitGatewayVpcAttachmentRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DnsSupport != null) {
    entries["DnsSupport"] = input.DnsSupport;
  }
  if (input.Ipv6Support != null) {
    entries["Ipv6Support"] = input.Ipv6Support;
  }
  if (input.ApplianceModeSupport != null) {
    entries["ApplianceModeSupport"] = input.ApplianceModeSupport;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessEndpointEniOptions
 */
const se_CreateVerifiedAccessEndpointEniOptions = (
  input: CreateVerifiedAccessEndpointEniOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.Protocol != null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.Port != null) {
    entries["Port"] = input.Port;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessEndpointLoadBalancerOptions
 */
const se_CreateVerifiedAccessEndpointLoadBalancerOptions = (
  input: CreateVerifiedAccessEndpointLoadBalancerOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Protocol != null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.Port != null) {
    entries["Port"] = input.Port;
  }
  if (input.LoadBalancerArn != null) {
    entries["LoadBalancerArn"] = input.LoadBalancerArn;
  }
  if (input.SubnetIds != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointSubnetIdList(input.SubnetIds, context);
    if (input.SubnetIds?.length === 0) {
      entries.SubnetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessEndpointRequest
 */
const se_CreateVerifiedAccessEndpointRequest = (
  input: CreateVerifiedAccessEndpointRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessGroupId != null) {
    entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
  }
  if (input.EndpointType != null) {
    entries["EndpointType"] = input.EndpointType;
  }
  if (input.AttachmentType != null) {
    entries["AttachmentType"] = input.AttachmentType;
  }
  if (input.DomainCertificateArn != null) {
    entries["DomainCertificateArn"] = input.DomainCertificateArn;
  }
  if (input.ApplicationDomain != null) {
    entries["ApplicationDomain"] = input.ApplicationDomain;
  }
  if (input.EndpointDomainPrefix != null) {
    entries["EndpointDomainPrefix"] = input.EndpointDomainPrefix;
  }
  if (input.SecurityGroupIds != null) {
    const memberEntries = se_SecurityGroupIdList(input.SecurityGroupIds, context);
    if (input.SecurityGroupIds?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.LoadBalancerOptions != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointLoadBalancerOptions(input.LoadBalancerOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancerOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceOptions != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointEniOptions(input.NetworkInterfaceOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.PolicyDocument != null) {
    entries["PolicyDocument"] = input.PolicyDocument;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SseSpecification != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input.SseSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessEndpointSubnetIdList
 */
const se_CreateVerifiedAccessEndpointSubnetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessGroupRequest
 */
const se_CreateVerifiedAccessGroupRequest = (input: CreateVerifiedAccessGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VerifiedAccessInstanceId != null) {
    entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.PolicyDocument != null) {
    entries["PolicyDocument"] = input.PolicyDocument;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SseSpecification != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input.SseSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessInstanceRequest
 */
const se_CreateVerifiedAccessInstanceRequest = (
  input: CreateVerifiedAccessInstanceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FIPSEnabled != null) {
    entries["FIPSEnabled"] = input.FIPSEnabled;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessTrustProviderDeviceOptions
 */
const se_CreateVerifiedAccessTrustProviderDeviceOptions = (
  input: CreateVerifiedAccessTrustProviderDeviceOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TenantId != null) {
    entries["TenantId"] = input.TenantId;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessTrustProviderOidcOptions
 */
const se_CreateVerifiedAccessTrustProviderOidcOptions = (
  input: CreateVerifiedAccessTrustProviderOidcOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Issuer != null) {
    entries["Issuer"] = input.Issuer;
  }
  if (input.AuthorizationEndpoint != null) {
    entries["AuthorizationEndpoint"] = input.AuthorizationEndpoint;
  }
  if (input.TokenEndpoint != null) {
    entries["TokenEndpoint"] = input.TokenEndpoint;
  }
  if (input.UserInfoEndpoint != null) {
    entries["UserInfoEndpoint"] = input.UserInfoEndpoint;
  }
  if (input.ClientId != null) {
    entries["ClientId"] = input.ClientId;
  }
  if (input.ClientSecret != null) {
    entries["ClientSecret"] = input.ClientSecret;
  }
  if (input.Scope != null) {
    entries["Scope"] = input.Scope;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessTrustProviderRequest
 */
const se_CreateVerifiedAccessTrustProviderRequest = (
  input: CreateVerifiedAccessTrustProviderRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrustProviderType != null) {
    entries["TrustProviderType"] = input.TrustProviderType;
  }
  if (input.UserTrustProviderType != null) {
    entries["UserTrustProviderType"] = input.UserTrustProviderType;
  }
  if (input.DeviceTrustProviderType != null) {
    entries["DeviceTrustProviderType"] = input.DeviceTrustProviderType;
  }
  if (input.OidcOptions != null) {
    const memberEntries = se_CreateVerifiedAccessTrustProviderOidcOptions(input.OidcOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OidcOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DeviceOptions != null) {
    const memberEntries = se_CreateVerifiedAccessTrustProviderDeviceOptions(input.DeviceOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DeviceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.PolicyReferenceName != null) {
    entries["PolicyReferenceName"] = input.PolicyReferenceName;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SseSpecification != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input.SseSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVolumePermission
 */
const se_CreateVolumePermission = (input: CreateVolumePermission, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Group != null) {
    entries["Group"] = input.Group;
  }
  if (input.UserId != null) {
    entries["UserId"] = input.UserId;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVolumePermissionList
 */
const se_CreateVolumePermissionList = (input: CreateVolumePermission[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_CreateVolumePermission(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVolumePermissionModifications
 */
const se_CreateVolumePermissionModifications = (
  input: CreateVolumePermissionModifications,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Add != null) {
    const memberEntries = se_CreateVolumePermissionList(input.Add, context);
    if (input.Add?.length === 0) {
      entries.Add = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Remove != null) {
    const memberEntries = se_CreateVolumePermissionList(input.Remove, context);
    if (input.Remove?.length === 0) {
      entries.Remove = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVolumeRequest
 */
const se_CreateVolumeRequest = (input: CreateVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.Encrypted != null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.Iops != null) {
    entries["Iops"] = input.Iops;
  }
  if (input.KmsKeyId != null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.OutpostArn != null) {
    entries["OutpostArn"] = input.OutpostArn;
  }
  if (input.Size != null) {
    entries["Size"] = input.Size;
  }
  if (input.SnapshotId != null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.VolumeType != null) {
    entries["VolumeType"] = input.VolumeType;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MultiAttachEnabled != null) {
    entries["MultiAttachEnabled"] = input.MultiAttachEnabled;
  }
  if (input.Throughput != null) {
    entries["Throughput"] = input.Throughput;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpcEndpointConnectionNotificationRequest
 */
const se_CreateVpcEndpointConnectionNotificationRequest = (
  input: CreateVpcEndpointConnectionNotificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId != null) {
    entries["ServiceId"] = input.ServiceId;
  }
  if (input.VpcEndpointId != null) {
    entries["VpcEndpointId"] = input.VpcEndpointId;
  }
  if (input.ConnectionNotificationArn != null) {
    entries["ConnectionNotificationArn"] = input.ConnectionNotificationArn;
  }
  if (input.ConnectionEvents != null) {
    const memberEntries = se_ValueStringList(input.ConnectionEvents, context);
    if (input.ConnectionEvents?.length === 0) {
      entries.ConnectionEvents = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpcEndpointRequest
 */
const se_CreateVpcEndpointRequest = (input: CreateVpcEndpointRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcEndpointType != null) {
    entries["VpcEndpointType"] = input.VpcEndpointType;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.ServiceName != null) {
    entries["ServiceName"] = input.ServiceName;
  }
  if (input.PolicyDocument != null) {
    entries["PolicyDocument"] = input.PolicyDocument;
  }
  if (input.RouteTableIds != null) {
    const memberEntries = se_VpcEndpointRouteTableIdList(input.RouteTableIds, context);
    if (input.RouteTableIds?.length === 0) {
      entries.RouteTableId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SubnetIds != null) {
    const memberEntries = se_VpcEndpointSubnetIdList(input.SubnetIds, context);
    if (input.SubnetIds?.length === 0) {
      entries.SubnetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroupIds != null) {
    const memberEntries = se_VpcEndpointSecurityGroupIdList(input.SecurityGroupIds, context);
    if (input.SecurityGroupIds?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.IpAddressType != null) {
    entries["IpAddressType"] = input.IpAddressType;
  }
  if (input.DnsOptions != null) {
    const memberEntries = se_DnsOptionsSpecification(input.DnsOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.PrivateDnsEnabled != null) {
    entries["PrivateDnsEnabled"] = input.PrivateDnsEnabled;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SubnetConfigurations != null) {
    const memberEntries = se_SubnetConfigurationsList(input.SubnetConfigurations, context);
    if (input.SubnetConfigurations?.length === 0) {
      entries.SubnetConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpcEndpointServiceConfigurationRequest
 */
const se_CreateVpcEndpointServiceConfigurationRequest = (
  input: CreateVpcEndpointServiceConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.AcceptanceRequired != null) {
    entries["AcceptanceRequired"] = input.AcceptanceRequired;
  }
  if (input.PrivateDnsName != null) {
    entries["PrivateDnsName"] = input.PrivateDnsName;
  }
  if (input.NetworkLoadBalancerArns != null) {
    const memberEntries = se_ValueStringList(input.NetworkLoadBalancerArns, context);
    if (input.NetworkLoadBalancerArns?.length === 0) {
      entries.NetworkLoadBalancerArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.GatewayLoadBalancerArns != null) {
    const memberEntries = se_ValueStringList(input.GatewayLoadBalancerArns, context);
    if (input.GatewayLoadBalancerArns?.length === 0) {
      entries.GatewayLoadBalancerArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SupportedIpAddressTypes != null) {
    const memberEntries = se_ValueStringList(input.SupportedIpAddressTypes, context);
    if (input.SupportedIpAddressTypes?.length === 0) {
      entries.SupportedIpAddressType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpcPeeringConnectionRequest
 */
const se_CreateVpcPeeringConnectionRequest = (
  input: CreateVpcPeeringConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PeerOwnerId != null) {
    entries["PeerOwnerId"] = input.PeerOwnerId;
  }
  if (input.PeerVpcId != null) {
    entries["PeerVpcId"] = input.PeerVpcId;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.PeerRegion != null) {
    entries["PeerRegion"] = input.PeerRegion;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpcRequest
 */
const se_CreateVpcRequest = (input: CreateVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CidrBlock != null) {
    entries["CidrBlock"] = input.CidrBlock;
  }
  if (input.AmazonProvidedIpv6CidrBlock != null) {
    entries["AmazonProvidedIpv6CidrBlock"] = input.AmazonProvidedIpv6CidrBlock;
  }
  if (input.Ipv6Pool != null) {
    entries["Ipv6Pool"] = input.Ipv6Pool;
  }
  if (input.Ipv6CidrBlock != null) {
    entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
  }
  if (input.Ipv4IpamPoolId != null) {
    entries["Ipv4IpamPoolId"] = input.Ipv4IpamPoolId;
  }
  if (input.Ipv4NetmaskLength != null) {
    entries["Ipv4NetmaskLength"] = input.Ipv4NetmaskLength;
  }
  if (input.Ipv6IpamPoolId != null) {
    entries["Ipv6IpamPoolId"] = input.Ipv6IpamPoolId;
  }
  if (input.Ipv6NetmaskLength != null) {
    entries["Ipv6NetmaskLength"] = input.Ipv6NetmaskLength;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceTenancy != null) {
    entries["InstanceTenancy"] = input.InstanceTenancy;
  }
  if (input.Ipv6CidrBlockNetworkBorderGroup != null) {
    entries["Ipv6CidrBlockNetworkBorderGroup"] = input.Ipv6CidrBlockNetworkBorderGroup;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpnConnectionRequest
 */
const se_CreateVpnConnectionRequest = (input: CreateVpnConnectionRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CustomerGatewayId != null) {
    entries["CustomerGatewayId"] = input.CustomerGatewayId;
  }
  if (input.Type != null) {
    entries["Type"] = input.Type;
  }
  if (input.VpnGatewayId != null) {
    entries["VpnGatewayId"] = input.VpnGatewayId;
  }
  if (input.TransitGatewayId != null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Options != null) {
    const memberEntries = se_VpnConnectionOptionsSpecification(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpnConnectionRouteRequest
 */
const se_CreateVpnConnectionRouteRequest = (input: CreateVpnConnectionRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.VpnConnectionId != null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpnGatewayRequest
 */
const se_CreateVpnGatewayRequest = (input: CreateVpnGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.Type != null) {
    entries["Type"] = input.Type;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AmazonSideAsn != null) {
    entries["AmazonSideAsn"] = input.AmazonSideAsn;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2CreditSpecificationRequest
 */
const se_CreditSpecificationRequest = (input: CreditSpecificationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CpuCredits != null) {
    entries["CpuCredits"] = input.CpuCredits;
  }
  return entries;
};

/**
 * serializeAws_ec2CustomerGatewayIdStringList
 */
const se_CustomerGatewayIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`CustomerGatewayId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DataQueries
 */
const se_DataQueries = (input: DataQuery[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_DataQuery(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DataQuery
 */
const se_DataQuery = (input: DataQuery, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Id != null) {
    entries["Id"] = input.Id;
  }
  if (input.Source != null) {
    entries["Source"] = input.Source;
  }
  if (input.Destination != null) {
    entries["Destination"] = input.Destination;
  }
  if (input.Metric != null) {
    entries["Metric"] = input.Metric;
  }
  if (input.Statistic != null) {
    entries["Statistic"] = input.Statistic;
  }
  if (input.Period != null) {
    entries["Period"] = input.Period;
  }
  return entries;
};

/**
 * serializeAws_ec2DedicatedHostIdList
 */
const se_DedicatedHostIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteCarrierGatewayRequest
 */
const se_DeleteCarrierGatewayRequest = (input: DeleteCarrierGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CarrierGatewayId != null) {
    entries["CarrierGatewayId"] = input.CarrierGatewayId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteClientVpnEndpointRequest
 */
const se_DeleteClientVpnEndpointRequest = (input: DeleteClientVpnEndpointRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteClientVpnRouteRequest
 */
const se_DeleteClientVpnRouteRequest = (input: DeleteClientVpnRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.TargetVpcSubnetId != null) {
    entries["TargetVpcSubnetId"] = input.TargetVpcSubnetId;
  }
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteCoipCidrRequest
 */
const se_DeleteCoipCidrRequest = (input: DeleteCoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.CoipPoolId != null) {
    entries["CoipPoolId"] = input.CoipPoolId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteCoipPoolRequest
 */
const se_DeleteCoipPoolRequest = (input: DeleteCoipPoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CoipPoolId != null) {
    entries["CoipPoolId"] = input.CoipPoolId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteCustomerGatewayRequest
 */
const se_DeleteCustomerGatewayRequest = (input: DeleteCustomerGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CustomerGatewayId != null) {
    entries["CustomerGatewayId"] = input.CustomerGatewayId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteDhcpOptionsRequest
 */
const se_DeleteDhcpOptionsRequest = (input: DeleteDhcpOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DhcpOptionsId != null) {
    entries["DhcpOptionsId"] = input.DhcpOptionsId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteEgressOnlyInternetGatewayRequest
 */
const se_DeleteEgressOnlyInternetGatewayRequest = (
  input: DeleteEgressOnlyInternetGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EgressOnlyInternetGatewayId != null) {
    entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteFleetsRequest
 */
const se_DeleteFleetsRequest = (input: DeleteFleetsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FleetIds != null) {
    const memberEntries = se_FleetIdSet(input.FleetIds, context);
    if (input.FleetIds?.length === 0) {
      entries.FleetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TerminateInstances != null) {
    entries["TerminateInstances"] = input.TerminateInstances;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteFlowLogsRequest
 */
const se_DeleteFlowLogsRequest = (input: DeleteFlowLogsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FlowLogIds != null) {
    const memberEntries = se_FlowLogIdList(input.FlowLogIds, context);
    if (input.FlowLogIds?.length === 0) {
      entries.FlowLogId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteFpgaImageRequest
 */
const se_DeleteFpgaImageRequest = (input: DeleteFpgaImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FpgaImageId != null) {
    entries["FpgaImageId"] = input.FpgaImageId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteInstanceConnectEndpointRequest
 */
const se_DeleteInstanceConnectEndpointRequest = (
  input: DeleteInstanceConnectEndpointRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceConnectEndpointId != null) {
    entries["InstanceConnectEndpointId"] = input.InstanceConnectEndpointId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteInstanceEventWindowRequest
 */
const se_DeleteInstanceEventWindowRequest = (input: DeleteInstanceEventWindowRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ForceDelete != null) {
    entries["ForceDelete"] = input.ForceDelete;
  }
  if (input.InstanceEventWindowId != null) {
    entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteInternetGatewayRequest
 */
const se_DeleteInternetGatewayRequest = (input: DeleteInternetGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InternetGatewayId != null) {
    entries["InternetGatewayId"] = input.InternetGatewayId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteIpamPoolRequest
 */
const se_DeleteIpamPoolRequest = (input: DeleteIpamPoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamPoolId != null) {
    entries["IpamPoolId"] = input.IpamPoolId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteIpamRequest
 */
const se_DeleteIpamRequest = (input: DeleteIpamRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamId != null) {
    entries["IpamId"] = input.IpamId;
  }
  if (input.Cascade != null) {
    entries["Cascade"] = input.Cascade;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteIpamResourceDiscoveryRequest
 */
const se_DeleteIpamResourceDiscoveryRequest = (
  input: DeleteIpamResourceDiscoveryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamResourceDiscoveryId != null) {
    entries["IpamResourceDiscoveryId"] = input.IpamResourceDiscoveryId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteIpamScopeRequest
 */
const se_DeleteIpamScopeRequest = (input: DeleteIpamScopeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamScopeId != null) {
    entries["IpamScopeId"] = input.IpamScopeId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteKeyPairRequest
 */
const se_DeleteKeyPairRequest = (input: DeleteKeyPairRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.KeyName != null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.KeyPairId != null) {
    entries["KeyPairId"] = input.KeyPairId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteLaunchTemplateRequest
 */
const se_DeleteLaunchTemplateRequest = (input: DeleteLaunchTemplateRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LaunchTemplateId != null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName != null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteLaunchTemplateVersionsRequest
 */
const se_DeleteLaunchTemplateVersionsRequest = (
  input: DeleteLaunchTemplateVersionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LaunchTemplateId != null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName != null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.Versions != null) {
    const memberEntries = se_VersionStringList(input.Versions, context);
    if (input.Versions?.length === 0) {
      entries.LaunchTemplateVersion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteRequest
 */
const se_DeleteLocalGatewayRouteRequest = (input: DeleteLocalGatewayRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.LocalGatewayRouteTableId != null) {
    entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.DestinationPrefixListId != null) {
    entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteTableRequest
 */
const se_DeleteLocalGatewayRouteTableRequest = (
  input: DeleteLocalGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayRouteTableId != null) {
    entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest
 */
const se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest = (
  input: DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId != null) {
    entries["LocalGatewayRouteTableVirtualInterfaceGroupAssociationId"] =
      input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationRequest
 */
const se_DeleteLocalGatewayRouteTableVpcAssociationRequest = (
  input: DeleteLocalGatewayRouteTableVpcAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayRouteTableVpcAssociationId != null) {
    entries["LocalGatewayRouteTableVpcAssociationId"] = input.LocalGatewayRouteTableVpcAssociationId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteManagedPrefixListRequest
 */
const se_DeleteManagedPrefixListRequest = (input: DeleteManagedPrefixListRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PrefixListId != null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNatGatewayRequest
 */
const se_DeleteNatGatewayRequest = (input: DeleteNatGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NatGatewayId != null) {
    entries["NatGatewayId"] = input.NatGatewayId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkAclEntryRequest
 */
const se_DeleteNetworkAclEntryRequest = (input: DeleteNetworkAclEntryRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Egress != null) {
    entries["Egress"] = input.Egress;
  }
  if (input.NetworkAclId != null) {
    entries["NetworkAclId"] = input.NetworkAclId;
  }
  if (input.RuleNumber != null) {
    entries["RuleNumber"] = input.RuleNumber;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkAclRequest
 */
const se_DeleteNetworkAclRequest = (input: DeleteNetworkAclRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkAclId != null) {
    entries["NetworkAclId"] = input.NetworkAclId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisRequest
 */
const se_DeleteNetworkInsightsAccessScopeAnalysisRequest = (
  input: DeleteNetworkInsightsAccessScopeAnalysisRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInsightsAccessScopeAnalysisId != null) {
    entries["NetworkInsightsAccessScopeAnalysisId"] = input.NetworkInsightsAccessScopeAnalysisId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkInsightsAccessScopeRequest
 */
const se_DeleteNetworkInsightsAccessScopeRequest = (
  input: DeleteNetworkInsightsAccessScopeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInsightsAccessScopeId != null) {
    entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkInsightsAnalysisRequest
 */
const se_DeleteNetworkInsightsAnalysisRequest = (
  input: DeleteNetworkInsightsAnalysisRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInsightsAnalysisId != null) {
    entries["NetworkInsightsAnalysisId"] = input.NetworkInsightsAnalysisId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkInsightsPathRequest
 */
const se_DeleteNetworkInsightsPathRequest = (input: DeleteNetworkInsightsPathRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInsightsPathId != null) {
    entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkInterfacePermissionRequest
 */
const se_DeleteNetworkInterfacePermissionRequest = (
  input: DeleteNetworkInterfacePermissionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInterfacePermissionId != null) {
    entries["NetworkInterfacePermissionId"] = input.NetworkInterfacePermissionId;
  }
  if (input.Force != null) {
    entries["Force"] = input.Force;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkInterfaceRequest
 */
const se_DeleteNetworkInterfaceRequest = (input: DeleteNetworkInterfaceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeletePlacementGroupRequest
 */
const se_DeletePlacementGroupRequest = (input: DeletePlacementGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  return entries;
};

/**
 * serializeAws_ec2DeletePublicIpv4PoolRequest
 */
const se_DeletePublicIpv4PoolRequest = (input: DeletePublicIpv4PoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PoolId != null) {
    entries["PoolId"] = input.PoolId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteQueuedReservedInstancesIdList
 */
const se_DeleteQueuedReservedInstancesIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteQueuedReservedInstancesRequest
 */
const se_DeleteQueuedReservedInstancesRequest = (
  input: DeleteQueuedReservedInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ReservedInstancesIds != null) {
    const memberEntries = se_DeleteQueuedReservedInstancesIdList(input.ReservedInstancesIds, context);
    if (input.ReservedInstancesIds?.length === 0) {
      entries.ReservedInstancesId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteRouteRequest
 */
const se_DeleteRouteRequest = (input: DeleteRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.DestinationIpv6CidrBlock != null) {
    entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
  }
  if (input.DestinationPrefixListId != null) {
    entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.RouteTableId != null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteRouteTableRequest
 */
const se_DeleteRouteTableRequest = (input: DeleteRouteTableRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.RouteTableId != null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteSecurityGroupRequest
 */
const se_DeleteSecurityGroupRequest = (input: DeleteSecurityGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.GroupId != null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteSnapshotRequest
 */
const se_DeleteSnapshotRequest = (input: DeleteSnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SnapshotId != null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteSpotDatafeedSubscriptionRequest
 */
const se_DeleteSpotDatafeedSubscriptionRequest = (
  input: DeleteSpotDatafeedSubscriptionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteSubnetCidrReservationRequest
 */
const se_DeleteSubnetCidrReservationRequest = (
  input: DeleteSubnetCidrReservationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.SubnetCidrReservationId != null) {
    entries["SubnetCidrReservationId"] = input.SubnetCidrReservationId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteSubnetRequest
 */
const se_DeleteSubnetRequest = (input: DeleteSubnetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTagsRequest
 */
const se_DeleteTagsRequest = (input: DeleteTagsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Resources != null) {
    const memberEntries = se_ResourceIdList(input.Resources, context);
    if (input.Resources?.length === 0) {
      entries.ResourceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Tags != null) {
    const memberEntries = se_TagList(input.Tags, context);
    if (input.Tags?.length === 0) {
      entries.Tag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTrafficMirrorFilterRequest
 */
const se_DeleteTrafficMirrorFilterRequest = (input: DeleteTrafficMirrorFilterRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.TrafficMirrorFilterId != null) {
    entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTrafficMirrorFilterRuleRequest
 */
const se_DeleteTrafficMirrorFilterRuleRequest = (
  input: DeleteTrafficMirrorFilterRuleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorFilterRuleId != null) {
    entries["TrafficMirrorFilterRuleId"] = input.TrafficMirrorFilterRuleId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTrafficMirrorSessionRequest
 */
const se_DeleteTrafficMirrorSessionRequest = (
  input: DeleteTrafficMirrorSessionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorSessionId != null) {
    entries["TrafficMirrorSessionId"] = input.TrafficMirrorSessionId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTrafficMirrorTargetRequest
 */
const se_DeleteTrafficMirrorTargetRequest = (input: DeleteTrafficMirrorTargetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.TrafficMirrorTargetId != null) {
    entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayConnectPeerRequest
 */
const se_DeleteTransitGatewayConnectPeerRequest = (
  input: DeleteTransitGatewayConnectPeerRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayConnectPeerId != null) {
    entries["TransitGatewayConnectPeerId"] = input.TransitGatewayConnectPeerId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayConnectRequest
 */
const se_DeleteTransitGatewayConnectRequest = (
  input: DeleteTransitGatewayConnectRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayMulticastDomainRequest
 */
const se_DeleteTransitGatewayMulticastDomainRequest = (
  input: DeleteTransitGatewayMulticastDomainRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId != null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayPeeringAttachmentRequest
 */
const se_DeleteTransitGatewayPeeringAttachmentRequest = (
  input: DeleteTransitGatewayPeeringAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayPolicyTableRequest
 */
const se_DeleteTransitGatewayPolicyTableRequest = (
  input: DeleteTransitGatewayPolicyTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayPolicyTableId != null) {
    entries["TransitGatewayPolicyTableId"] = input.TransitGatewayPolicyTableId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayPrefixListReferenceRequest
 */
const se_DeleteTransitGatewayPrefixListReferenceRequest = (
  input: DeleteTransitGatewayPrefixListReferenceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.PrefixListId != null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayRequest
 */
const se_DeleteTransitGatewayRequest = (input: DeleteTransitGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.TransitGatewayId != null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayRouteRequest
 */
const se_DeleteTransitGatewayRouteRequest = (input: DeleteTransitGatewayRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayRouteTableAnnouncementRequest
 */
const se_DeleteTransitGatewayRouteTableAnnouncementRequest = (
  input: DeleteTransitGatewayRouteTableAnnouncementRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableAnnouncementId != null) {
    entries["TransitGatewayRouteTableAnnouncementId"] = input.TransitGatewayRouteTableAnnouncementId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayRouteTableRequest
 */
const se_DeleteTransitGatewayRouteTableRequest = (
  input: DeleteTransitGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayVpcAttachmentRequest
 */
const se_DeleteTransitGatewayVpcAttachmentRequest = (
  input: DeleteTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVerifiedAccessEndpointRequest
 */
const se_DeleteVerifiedAccessEndpointRequest = (
  input: DeleteVerifiedAccessEndpointRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessEndpointId != null) {
    entries["VerifiedAccessEndpointId"] = input.VerifiedAccessEndpointId;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVerifiedAccessGroupRequest
 */
const se_DeleteVerifiedAccessGroupRequest = (input: DeleteVerifiedAccessGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VerifiedAccessGroupId != null) {
    entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVerifiedAccessInstanceRequest
 */
const se_DeleteVerifiedAccessInstanceRequest = (
  input: DeleteVerifiedAccessInstanceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessInstanceId != null) {
    entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVerifiedAccessTrustProviderRequest
 */
const se_DeleteVerifiedAccessTrustProviderRequest = (
  input: DeleteVerifiedAccessTrustProviderRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessTrustProviderId != null) {
    entries["VerifiedAccessTrustProviderId"] = input.VerifiedAccessTrustProviderId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVolumeRequest
 */
const se_DeleteVolumeRequest = (input: DeleteVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VolumeId != null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpcEndpointConnectionNotificationsRequest
 */
const se_DeleteVpcEndpointConnectionNotificationsRequest = (
  input: DeleteVpcEndpointConnectionNotificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ConnectionNotificationIds != null) {
    const memberEntries = se_ConnectionNotificationIdsList(input.ConnectionNotificationIds, context);
    if (input.ConnectionNotificationIds?.length === 0) {
      entries.ConnectionNotificationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionNotificationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpcEndpointServiceConfigurationsRequest
 */
const se_DeleteVpcEndpointServiceConfigurationsRequest = (
  input: DeleteVpcEndpointServiceConfigurationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceIds != null) {
    const memberEntries = se_VpcEndpointServiceIdList(input.ServiceIds, context);
    if (input.ServiceIds?.length === 0) {
      entries.ServiceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpcEndpointsRequest
 */
const se_DeleteVpcEndpointsRequest = (input: DeleteVpcEndpointsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcEndpointIds != null) {
    const memberEntries = se_VpcEndpointIdList(input.VpcEndpointIds, context);
    if (input.VpcEndpointIds?.length === 0) {
      entries.VpcEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpcPeeringConnectionRequest
 */
const se_DeleteVpcPeeringConnectionRequest = (
  input: DeleteVpcPeeringConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcPeeringConnectionId != null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpcRequest
 */
const se_DeleteVpcRequest = (input: DeleteVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpnConnectionRequest
 */
const se_DeleteVpnConnectionRequest = (input: DeleteVpnConnectionRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpnConnectionId != null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpnConnectionRouteRequest
 */
const se_DeleteVpnConnectionRouteRequest = (input: DeleteVpnConnectionRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.VpnConnectionId != null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpnGatewayRequest
 */
const se_DeleteVpnGatewayRequest = (input: DeleteVpnGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpnGatewayId != null) {
    entries["VpnGatewayId"] = input.VpnGatewayId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeprovisionByoipCidrRequest
 */
const se_DeprovisionByoipCidrRequest = (input: DeprovisionByoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeprovisionIpamPoolCidrRequest
 */
const se_DeprovisionIpamPoolCidrRequest = (input: DeprovisionIpamPoolCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamPoolId != null) {
    entries["IpamPoolId"] = input.IpamPoolId;
  }
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  return entries;
};

/**
 * serializeAws_ec2DeprovisionPublicIpv4PoolCidrRequest
 */
const se_DeprovisionPublicIpv4PoolCidrRequest = (
  input: DeprovisionPublicIpv4PoolCidrRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PoolId != null) {
    entries["PoolId"] = input.PoolId;
  }
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  return entries;
};

/**
 * serializeAws_ec2DeregisterImageRequest
 */
const se_DeregisterImageRequest = (input: DeregisterImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeregisterInstanceEventNotificationAttributesRequest
 */
const se_DeregisterInstanceEventNotificationAttributesRequest = (
  input: DeregisterInstanceEventNotificationAttributesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceTagAttribute != null) {
    const memberEntries = se_DeregisterInstanceTagAttributeRequest(input.InstanceTagAttribute, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagAttribute.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeregisterInstanceTagAttributeRequest
 */
const se_DeregisterInstanceTagAttributeRequest = (
  input: DeregisterInstanceTagAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.IncludeAllTagsOfInstance != null) {
    entries["IncludeAllTagsOfInstance"] = input.IncludeAllTagsOfInstance;
  }
  if (input.InstanceTagKeys != null) {
    const memberEntries = se_InstanceTagKeySet(input.InstanceTagKeys, context);
    if (input.InstanceTagKeys?.length === 0) {
      entries.InstanceTagKey = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersRequest
 */
const se_DeregisterTransitGatewayMulticastGroupMembersRequest = (
  input: DeregisterTransitGatewayMulticastGroupMembersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId != null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.GroupIpAddress != null) {
    entries["GroupIpAddress"] = input.GroupIpAddress;
  }
  if (input.NetworkInterfaceIds != null) {
    const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
    if (input.NetworkInterfaceIds?.length === 0) {
      entries.NetworkInterfaceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesRequest
 */
const se_DeregisterTransitGatewayMulticastGroupSourcesRequest = (
  input: DeregisterTransitGatewayMulticastGroupSourcesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId != null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.GroupIpAddress != null) {
    entries["GroupIpAddress"] = input.GroupIpAddress;
  }
  if (input.NetworkInterfaceIds != null) {
    const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
    if (input.NetworkInterfaceIds?.length === 0) {
      entries.NetworkInterfaceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAccountAttributesRequest
 */
const se_DescribeAccountAttributesRequest = (input: DescribeAccountAttributesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AttributeNames != null) {
    const memberEntries = se_AccountAttributeNameStringList(input.AttributeNames, context);
    if (input.AttributeNames?.length === 0) {
      entries.AttributeName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AttributeName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAddressesAttributeRequest
 */
const se_DescribeAddressesAttributeRequest = (
  input: DescribeAddressesAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AllocationIds != null) {
    const memberEntries = se_AllocationIds(input.AllocationIds, context);
    if (input.AllocationIds?.length === 0) {
      entries.AllocationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAddressesRequest
 */
const se_DescribeAddressesRequest = (input: DescribeAddressesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.PublicIps != null) {
    const memberEntries = se_PublicIpStringList(input.PublicIps, context);
    if (input.PublicIps?.length === 0) {
      entries.PublicIp = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AllocationIds != null) {
    const memberEntries = se_AllocationIdList(input.AllocationIds, context);
    if (input.AllocationIds?.length === 0) {
      entries.AllocationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAddressTransfersRequest
 */
const se_DescribeAddressTransfersRequest = (input: DescribeAddressTransfersRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationIds != null) {
    const memberEntries = se_AllocationIdList(input.AllocationIds, context);
    if (input.AllocationIds?.length === 0) {
      entries.AllocationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAggregateIdFormatRequest
 */
const se_DescribeAggregateIdFormatRequest = (input: DescribeAggregateIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAvailabilityZonesRequest
 */
const se_DescribeAvailabilityZonesRequest = (input: DescribeAvailabilityZonesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ZoneNames != null) {
    const memberEntries = se_ZoneNameStringList(input.ZoneNames, context);
    if (input.ZoneNames?.length === 0) {
      entries.ZoneName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ZoneName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ZoneIds != null) {
    const memberEntries = se_ZoneIdStringList(input.ZoneIds, context);
    if (input.ZoneIds?.length === 0) {
      entries.ZoneId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ZoneId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AllAvailabilityZones != null) {
    entries["AllAvailabilityZones"] = input.AllAvailabilityZones;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAwsNetworkPerformanceMetricSubscriptionsRequest
 */
const se_DescribeAwsNetworkPerformanceMetricSubscriptionsRequest = (
  input: DescribeAwsNetworkPerformanceMetricSubscriptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeBundleTasksRequest
 */
const se_DescribeBundleTasksRequest = (input: DescribeBundleTasksRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.BundleIds != null) {
    const memberEntries = se_BundleIdStringList(input.BundleIds, context);
    if (input.BundleIds?.length === 0) {
      entries.BundleId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BundleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeByoipCidrsRequest
 */
const se_DescribeByoipCidrsRequest = (input: DescribeByoipCidrsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeCapacityReservationFleetsRequest
 */
const se_DescribeCapacityReservationFleetsRequest = (
  input: DescribeCapacityReservationFleetsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityReservationFleetIds != null) {
    const memberEntries = se_CapacityReservationFleetIdSet(input.CapacityReservationFleetIds, context);
    if (input.CapacityReservationFleetIds?.length === 0) {
      entries.CapacityReservationFleetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationFleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeCapacityReservationsRequest
 */
const se_DescribeCapacityReservationsRequest = (
  input: DescribeCapacityReservationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityReservationIds != null) {
    const memberEntries = se_CapacityReservationIdSet(input.CapacityReservationIds, context);
    if (input.CapacityReservationIds?.length === 0) {
      entries.CapacityReservationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeCarrierGatewaysRequest
 */
const se_DescribeCarrierGatewaysRequest = (input: DescribeCarrierGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CarrierGatewayIds != null) {
    const memberEntries = se_CarrierGatewayIdSet(input.CarrierGatewayIds, context);
    if (input.CarrierGatewayIds?.length === 0) {
      entries.CarrierGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CarrierGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeClassicLinkInstancesRequest
 */
const se_DescribeClassicLinkInstancesRequest = (
  input: DescribeClassicLinkInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceIds != null) {
    const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
    if (input.InstanceIds?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeClientVpnAuthorizationRulesRequest
 */
const se_DescribeClientVpnAuthorizationRulesRequest = (
  input: DescribeClientVpnAuthorizationRulesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeClientVpnConnectionsRequest
 */
const se_DescribeClientVpnConnectionsRequest = (
  input: DescribeClientVpnConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeClientVpnEndpointsRequest
 */
const se_DescribeClientVpnEndpointsRequest = (
  input: DescribeClientVpnEndpointsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointIds != null) {
    const memberEntries = se_ClientVpnEndpointIdList(input.ClientVpnEndpointIds, context);
    if (input.ClientVpnEndpointIds?.length === 0) {
      entries.ClientVpnEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientVpnEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeClientVpnRoutesRequest
 */
const se_DescribeClientVpnRoutesRequest = (input: DescribeClientVpnRoutesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeClientVpnTargetNetworksRequest
 */
const se_DescribeClientVpnTargetNetworksRequest = (
  input: DescribeClientVpnTargetNetworksRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.AssociationIds != null) {
    const memberEntries = se_ValueStringList(input.AssociationIds, context);
    if (input.AssociationIds?.length === 0) {
      entries.AssociationIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeCoipPoolsRequest
 */
const se_DescribeCoipPoolsRequest = (input: DescribeCoipPoolsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.PoolIds != null) {
    const memberEntries = se_CoipPoolIdSet(input.PoolIds, context);
    if (input.PoolIds?.length === 0) {
      entries.PoolId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeConversionTasksRequest
 */
const se_DescribeConversionTasksRequest = (input: DescribeConversionTasksRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ConversionTaskIds != null) {
    const memberEntries = se_ConversionIdStringList(input.ConversionTaskIds, context);
    if (input.ConversionTaskIds?.length === 0) {
      entries.ConversionTaskId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConversionTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeCustomerGatewaysRequest
 */
const se_DescribeCustomerGatewaysRequest = (input: DescribeCustomerGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CustomerGatewayIds != null) {
    const memberEntries = se_CustomerGatewayIdStringList(input.CustomerGatewayIds, context);
    if (input.CustomerGatewayIds?.length === 0) {
      entries.CustomerGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomerGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeDhcpOptionsRequest
 */
const se_DescribeDhcpOptionsRequest = (input: DescribeDhcpOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DhcpOptionsIds != null) {
    const memberEntries = se_DhcpOptionsIdStringList(input.DhcpOptionsIds, context);
    if (input.DhcpOptionsIds?.length === 0) {
      entries.DhcpOptionsId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DhcpOptionsId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeEgressOnlyInternetGatewaysRequest
 */
const se_DescribeEgressOnlyInternetGatewaysRequest = (
  input: DescribeEgressOnlyInternetGatewaysRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EgressOnlyInternetGatewayIds != null) {
    const memberEntries = se_EgressOnlyInternetGatewayIdList(input.EgressOnlyInternetGatewayIds, context);
    if (input.EgressOnlyInternetGatewayIds?.length === 0) {
      entries.EgressOnlyInternetGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EgressOnlyInternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeElasticGpusRequest
 */
const se_DescribeElasticGpusRequest = (input: DescribeElasticGpusRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ElasticGpuIds != null) {
    const memberEntries = se_ElasticGpuIdSet(input.ElasticGpuIds, context);
    if (input.ElasticGpuIds?.length === 0) {
      entries.ElasticGpuId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticGpuId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeExportImageTasksRequest
 */
const se_DescribeExportImageTasksRequest = (input: DescribeExportImageTasksRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ExportImageTaskIds != null) {
    const memberEntries = se_ExportImageTaskIdList(input.ExportImageTaskIds, context);
    if (input.ExportImageTaskIds?.length === 0) {
      entries.ExportImageTaskId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExportImageTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeExportTasksRequest
 */
const se_DescribeExportTasksRequest = (input: DescribeExportTasksRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ExportTaskIds != null) {
    const memberEntries = se_ExportTaskIdStringList(input.ExportTaskIds, context);
    if (input.ExportTaskIds?.length === 0) {
      entries.ExportTaskId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExportTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFastLaunchImagesRequest
 */
const se_DescribeFastLaunchImagesRequest = (input: DescribeFastLaunchImagesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageIds != null) {
    const memberEntries = se_FastLaunchImageIdList(input.ImageIds, context);
    if (input.ImageIds?.length === 0) {
      entries.ImageId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFastSnapshotRestoresRequest
 */
const se_DescribeFastSnapshotRestoresRequest = (
  input: DescribeFastSnapshotRestoresRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFleetHistoryRequest
 */
const se_DescribeFleetHistoryRequest = (input: DescribeFleetHistoryRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EventType != null) {
    entries["EventType"] = input.EventType;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.FleetId != null) {
    entries["FleetId"] = input.FleetId;
  }
  if (input.StartTime != null) {
    entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFleetInstancesRequest
 */
const se_DescribeFleetInstancesRequest = (input: DescribeFleetInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.FleetId != null) {
    entries["FleetId"] = input.FleetId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFleetsRequest
 */
const se_DescribeFleetsRequest = (input: DescribeFleetsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.FleetIds != null) {
    const memberEntries = se_FleetIdSet(input.FleetIds, context);
    if (input.FleetIds?.length === 0) {
      entries.FleetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFlowLogsRequest
 */
const se_DescribeFlowLogsRequest = (input: DescribeFlowLogsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filter != null) {
    const memberEntries = se_FilterList(input.Filter, context);
    if (input.Filter?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.FlowLogIds != null) {
    const memberEntries = se_FlowLogIdList(input.FlowLogIds, context);
    if (input.FlowLogIds?.length === 0) {
      entries.FlowLogId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFpgaImageAttributeRequest
 */
const se_DescribeFpgaImageAttributeRequest = (
  input: DescribeFpgaImageAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FpgaImageId != null) {
    entries["FpgaImageId"] = input.FpgaImageId;
  }
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFpgaImagesRequest
 */
const se_DescribeFpgaImagesRequest = (input: DescribeFpgaImagesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FpgaImageIds != null) {
    const memberEntries = se_FpgaImageIdList(input.FpgaImageIds, context);
    if (input.FpgaImageIds?.length === 0) {
      entries.FpgaImageId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FpgaImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Owners != null) {
    const memberEntries = se_OwnerStringList(input.Owners, context);
    if (input.Owners?.length === 0) {
      entries.Owner = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeHostReservationOfferingsRequest
 */
const se_DescribeHostReservationOfferingsRequest = (
  input: DescribeHostReservationOfferingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filter != null) {
    const memberEntries = se_FilterList(input.Filter, context);
    if (input.Filter?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxDuration != null) {
    entries["MaxDuration"] = input.MaxDuration;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.MinDuration != null) {
    entries["MinDuration"] = input.MinDuration;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.OfferingId != null) {
    entries["OfferingId"] = input.OfferingId;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeHostReservationsRequest
 */
const se_DescribeHostReservationsRequest = (input: DescribeHostReservationsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filter != null) {
    const memberEntries = se_FilterList(input.Filter, context);
    if (input.Filter?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.HostReservationIdSet != null) {
    const memberEntries = se_HostReservationIdSet(input.HostReservationIdSet, context);
    if (input.HostReservationIdSet?.length === 0) {
      entries.HostReservationIdSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostReservationIdSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeHostsRequest
 */
const se_DescribeHostsRequest = (input: DescribeHostsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filter != null) {
    const memberEntries = se_FilterList(input.Filter, context);
    if (input.Filter?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.HostIds != null) {
    const memberEntries = se_RequestHostIdList(input.HostIds, context);
    if (input.HostIds?.length === 0) {
      entries.HostId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIamInstanceProfileAssociationsRequest
 */
const se_DescribeIamInstanceProfileAssociationsRequest = (
  input: DescribeIamInstanceProfileAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationIds != null) {
    const memberEntries = se_AssociationIdList(input.AssociationIds, context);
    if (input.AssociationIds?.length === 0) {
      entries.AssociationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIdentityIdFormatRequest
 */
const se_DescribeIdentityIdFormatRequest = (input: DescribeIdentityIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.PrincipalArn != null) {
    entries["PrincipalArn"] = input.PrincipalArn;
  }
  if (input.Resource != null) {
    entries["Resource"] = input.Resource;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIdFormatRequest
 */
const se_DescribeIdFormatRequest = (input: DescribeIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Resource != null) {
    entries["Resource"] = input.Resource;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeImageAttributeRequest
 */
const se_DescribeImageAttributeRequest = (input: DescribeImageAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeImagesRequest
 */
const se_DescribeImagesRequest = (input: DescribeImagesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ExecutableUsers != null) {
    const memberEntries = se_ExecutableByStringList(input.ExecutableUsers, context);
    if (input.ExecutableUsers?.length === 0) {
      entries.ExecutableBy = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExecutableBy.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ImageIds != null) {
    const memberEntries = se_ImageIdStringList(input.ImageIds, context);
    if (input.ImageIds?.length === 0) {
      entries.ImageId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Owners != null) {
    const memberEntries = se_OwnerStringList(input.Owners, context);
    if (input.Owners?.length === 0) {
      entries.Owner = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.IncludeDeprecated != null) {
    entries["IncludeDeprecated"] = input.IncludeDeprecated;
  }
  if (input.IncludeDisabled != null) {
    entries["IncludeDisabled"] = input.IncludeDisabled;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeImportImageTasksRequest
 */
const se_DescribeImportImageTasksRequest = (input: DescribeImportImageTasksRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ImportTaskIds != null) {
    const memberEntries = se_ImportTaskIdList(input.ImportTaskIds, context);
    if (input.ImportTaskIds?.length === 0) {
      entries.ImportTaskId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeImportSnapshotTasksRequest
 */
const se_DescribeImportSnapshotTasksRequest = (
  input: DescribeImportSnapshotTasksRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ImportTaskIds != null) {
    const memberEntries = se_ImportSnapshotTaskIdList(input.ImportTaskIds, context);
    if (input.ImportTaskIds?.length === 0) {
      entries.ImportTaskId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceAttributeRequest
 */
const se_DescribeInstanceAttributeRequest = (input: DescribeInstanceAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceConnectEndpointsRequest
 */
const se_DescribeInstanceConnectEndpointsRequest = (
  input: DescribeInstanceConnectEndpointsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceConnectEndpointIds != null) {
    const memberEntries = se_ValueStringList(input.InstanceConnectEndpointIds, context);
    if (input.InstanceConnectEndpointIds?.length === 0) {
      entries.InstanceConnectEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceConnectEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceCreditSpecificationsRequest
 */
const se_DescribeInstanceCreditSpecificationsRequest = (
  input: DescribeInstanceCreditSpecificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceIds != null) {
    const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
    if (input.InstanceIds?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceEventNotificationAttributesRequest
 */
const se_DescribeInstanceEventNotificationAttributesRequest = (
  input: DescribeInstanceEventNotificationAttributesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceEventWindowsRequest
 */
const se_DescribeInstanceEventWindowsRequest = (
  input: DescribeInstanceEventWindowsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceEventWindowIds != null) {
    const memberEntries = se_InstanceEventWindowIdSet(input.InstanceEventWindowIds, context);
    if (input.InstanceEventWindowIds?.length === 0) {
      entries.InstanceEventWindowId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceEventWindowId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstancesRequest
 */
const se_DescribeInstancesRequest = (input: DescribeInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceIds != null) {
    const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
    if (input.InstanceIds?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceStatusRequest
 */
const se_DescribeInstanceStatusRequest = (input: DescribeInstanceStatusRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceIds != null) {
    const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
    if (input.InstanceIds?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IncludeAllInstances != null) {
    entries["IncludeAllInstances"] = input.IncludeAllInstances;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceTypeOfferingsRequest
 */
const se_DescribeInstanceTypeOfferingsRequest = (
  input: DescribeInstanceTypeOfferingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LocationType != null) {
    entries["LocationType"] = input.LocationType;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceTypesRequest
 */
const se_DescribeInstanceTypesRequest = (input: DescribeInstanceTypesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceTypes != null) {
    const memberEntries = se_RequestInstanceTypeList(input.InstanceTypes, context);
    if (input.InstanceTypes?.length === 0) {
      entries.InstanceType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInternetGatewaysRequest
 */
const se_DescribeInternetGatewaysRequest = (input: DescribeInternetGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InternetGatewayIds != null) {
    const memberEntries = se_InternetGatewayIdList(input.InternetGatewayIds, context);
    if (input.InternetGatewayIds?.length === 0) {
      entries.InternetGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIpamPoolsRequest
 */
const se_DescribeIpamPoolsRequest = (input: DescribeIpamPoolsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.IpamPoolIds != null) {
    const memberEntries = se_ValueStringList(input.IpamPoolIds, context);
    if (input.IpamPoolIds?.length === 0) {
      entries.IpamPoolId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamPoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIpamResourceDiscoveriesRequest
 */
const se_DescribeIpamResourceDiscoveriesRequest = (
  input: DescribeIpamResourceDiscoveriesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamResourceDiscoveryIds != null) {
    const memberEntries = se_ValueStringList(input.IpamResourceDiscoveryIds, context);
    if (input.IpamResourceDiscoveryIds?.length === 0) {
      entries.IpamResourceDiscoveryId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamResourceDiscoveryId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIpamResourceDiscoveryAssociationsRequest
 */
const se_DescribeIpamResourceDiscoveryAssociationsRequest = (
  input: DescribeIpamResourceDiscoveryAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamResourceDiscoveryAssociationIds != null) {
    const memberEntries = se_ValueStringList(input.IpamResourceDiscoveryAssociationIds, context);
    if (input.IpamResourceDiscoveryAssociationIds?.length === 0) {
      entries.IpamResourceDiscoveryAssociationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamResourceDiscoveryAssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIpamScopesRequest
 */
const se_DescribeIpamScopesRequest = (input: DescribeIpamScopesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.IpamScopeIds != null) {
    const memberEntries = se_ValueStringList(input.IpamScopeIds, context);
    if (input.IpamScopeIds?.length === 0) {
      entries.IpamScopeId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamScopeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIpamsRequest
 */
const se_DescribeIpamsRequest = (input: DescribeIpamsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.IpamIds != null) {
    const memberEntries = se_ValueStringList(input.IpamIds, context);
    if (input.IpamIds?.length === 0) {
      entries.IpamId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIpv6PoolsRequest
 */
const se_DescribeIpv6PoolsRequest = (input: DescribeIpv6PoolsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.PoolIds != null) {
    const memberEntries = se_Ipv6PoolIdList(input.PoolIds, context);
    if (input.PoolIds?.length === 0) {
      entries.PoolId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeKeyPairsRequest
 */
const se_DescribeKeyPairsRequest = (input: DescribeKeyPairsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.KeyNames != null) {
    const memberEntries = se_KeyNameStringList(input.KeyNames, context);
    if (input.KeyNames?.length === 0) {
      entries.KeyName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `KeyName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.KeyPairIds != null) {
    const memberEntries = se_KeyPairIdStringList(input.KeyPairIds, context);
    if (input.KeyPairIds?.length === 0) {
      entries.KeyPairId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `KeyPairId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IncludePublicKey != null) {
    entries["IncludePublicKey"] = input.IncludePublicKey;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLaunchTemplatesRequest
 */
const se_DescribeLaunchTemplatesRequest = (input: DescribeLaunchTemplatesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LaunchTemplateIds != null) {
    const memberEntries = se_LaunchTemplateIdStringList(input.LaunchTemplateIds, context);
    if (input.LaunchTemplateIds?.length === 0) {
      entries.LaunchTemplateId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.LaunchTemplateNames != null) {
    const memberEntries = se_LaunchTemplateNameStringList(input.LaunchTemplateNames, context);
    if (input.LaunchTemplateNames?.length === 0) {
      entries.LaunchTemplateName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLaunchTemplateVersionsRequest
 */
const se_DescribeLaunchTemplateVersionsRequest = (
  input: DescribeLaunchTemplateVersionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LaunchTemplateId != null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName != null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.Versions != null) {
    const memberEntries = se_VersionStringList(input.Versions, context);
    if (input.Versions?.length === 0) {
      entries.LaunchTemplateVersion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MinVersion != null) {
    entries["MinVersion"] = input.MinVersion;
  }
  if (input.MaxVersion != null) {
    entries["MaxVersion"] = input.MaxVersion;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ResolveAlias != null) {
    entries["ResolveAlias"] = input.ResolveAlias;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLocalGatewayRouteTablesRequest
 */
const se_DescribeLocalGatewayRouteTablesRequest = (
  input: DescribeLocalGatewayRouteTablesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayRouteTableIds != null) {
    const memberEntries = se_LocalGatewayRouteTableIdSet(input.LocalGatewayRouteTableIds, context);
    if (input.LocalGatewayRouteTableIds?.length === 0) {
      entries.LocalGatewayRouteTableId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest
 */
const se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest = (
  input: DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds != null) {
    const memberEntries = se_LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet(
      input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds,
      context
    );
    if (input.LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds?.length === 0) {
      entries.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayRouteTableVirtualInterfaceGroupAssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest
 */
const se_DescribeLocalGatewayRouteTableVpcAssociationsRequest = (
  input: DescribeLocalGatewayRouteTableVpcAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayRouteTableVpcAssociationIds != null) {
    const memberEntries = se_LocalGatewayRouteTableVpcAssociationIdSet(
      input.LocalGatewayRouteTableVpcAssociationIds,
      context
    );
    if (input.LocalGatewayRouteTableVpcAssociationIds?.length === 0) {
      entries.LocalGatewayRouteTableVpcAssociationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayRouteTableVpcAssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLocalGatewaysRequest
 */
const se_DescribeLocalGatewaysRequest = (input: DescribeLocalGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.LocalGatewayIds != null) {
    const memberEntries = se_LocalGatewayIdSet(input.LocalGatewayIds, context);
    if (input.LocalGatewayIds?.length === 0) {
      entries.LocalGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest
 */
const se_DescribeLocalGatewayVirtualInterfaceGroupsRequest = (
  input: DescribeLocalGatewayVirtualInterfaceGroupsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayVirtualInterfaceGroupIds != null) {
    const memberEntries = se_LocalGatewayVirtualInterfaceGroupIdSet(
      input.LocalGatewayVirtualInterfaceGroupIds,
      context
    );
    if (input.LocalGatewayVirtualInterfaceGroupIds?.length === 0) {
      entries.LocalGatewayVirtualInterfaceGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayVirtualInterfaceGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLocalGatewayVirtualInterfacesRequest
 */
const se_DescribeLocalGatewayVirtualInterfacesRequest = (
  input: DescribeLocalGatewayVirtualInterfacesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LocalGatewayVirtualInterfaceIds != null) {
    const memberEntries = se_LocalGatewayVirtualInterfaceIdSet(input.LocalGatewayVirtualInterfaceIds, context);
    if (input.LocalGatewayVirtualInterfaceIds?.length === 0) {
      entries.LocalGatewayVirtualInterfaceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayVirtualInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeManagedPrefixListsRequest
 */
const se_DescribeManagedPrefixListsRequest = (
  input: DescribeManagedPrefixListsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.PrefixListIds != null) {
    const memberEntries = se_ValueStringList(input.PrefixListIds, context);
    if (input.PrefixListIds?.length === 0) {
      entries.PrefixListId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeMovingAddressesRequest
 */
const se_DescribeMovingAddressesRequest = (input: DescribeMovingAddressesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.PublicIps != null) {
    const memberEntries = se_ValueStringList(input.PublicIps, context);
    if (input.PublicIps?.length === 0) {
      entries.PublicIp = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNatGatewaysRequest
 */
const se_DescribeNatGatewaysRequest = (input: DescribeNatGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filter != null) {
    const memberEntries = se_FilterList(input.Filter, context);
    if (input.Filter?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NatGatewayIds != null) {
    const memberEntries = se_NatGatewayIdStringList(input.NatGatewayIds, context);
    if (input.NatGatewayIds?.length === 0) {
      entries.NatGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NatGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkAclsRequest
 */
const se_DescribeNetworkAclsRequest = (input: DescribeNetworkAclsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkAclIds != null) {
    const memberEntries = se_NetworkAclIdStringList(input.NetworkAclIds, context);
    if (input.NetworkAclIds?.length === 0) {
      entries.NetworkAclId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkAclId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesRequest
 */
const se_DescribeNetworkInsightsAccessScopeAnalysesRequest = (
  input: DescribeNetworkInsightsAccessScopeAnalysesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInsightsAccessScopeAnalysisIds != null) {
    const memberEntries = se_NetworkInsightsAccessScopeAnalysisIdList(
      input.NetworkInsightsAccessScopeAnalysisIds,
      context
    );
    if (input.NetworkInsightsAccessScopeAnalysisIds?.length === 0) {
      entries.NetworkInsightsAccessScopeAnalysisId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsAccessScopeAnalysisId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInsightsAccessScopeId != null) {
    entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
  }
  if (input.AnalysisStartTimeBegin != null) {
    entries["AnalysisStartTimeBegin"] = input.AnalysisStartTimeBegin.toISOString().split(".")[0] + "Z";
  }
  if (input.AnalysisStartTimeEnd != null) {
    entries["AnalysisStartTimeEnd"] = input.AnalysisStartTimeEnd.toISOString().split(".")[0] + "Z";
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInsightsAccessScopesRequest
 */
const se_DescribeNetworkInsightsAccessScopesRequest = (
  input: DescribeNetworkInsightsAccessScopesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInsightsAccessScopeIds != null) {
    const memberEntries = se_NetworkInsightsAccessScopeIdList(input.NetworkInsightsAccessScopeIds, context);
    if (input.NetworkInsightsAccessScopeIds?.length === 0) {
      entries.NetworkInsightsAccessScopeId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsAccessScopeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInsightsAnalysesRequest
 */
const se_DescribeNetworkInsightsAnalysesRequest = (
  input: DescribeNetworkInsightsAnalysesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInsightsAnalysisIds != null) {
    const memberEntries = se_NetworkInsightsAnalysisIdList(input.NetworkInsightsAnalysisIds, context);
    if (input.NetworkInsightsAnalysisIds?.length === 0) {
      entries.NetworkInsightsAnalysisId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsAnalysisId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInsightsPathId != null) {
    entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
  }
  if (input.AnalysisStartTime != null) {
    entries["AnalysisStartTime"] = input.AnalysisStartTime.toISOString().split(".")[0] + "Z";
  }
  if (input.AnalysisEndTime != null) {
    entries["AnalysisEndTime"] = input.AnalysisEndTime.toISOString().split(".")[0] + "Z";
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInsightsPathsRequest
 */
const se_DescribeNetworkInsightsPathsRequest = (
  input: DescribeNetworkInsightsPathsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInsightsPathIds != null) {
    const memberEntries = se_NetworkInsightsPathIdList(input.NetworkInsightsPathIds, context);
    if (input.NetworkInsightsPathIds?.length === 0) {
      entries.NetworkInsightsPathId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsPathId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInterfaceAttributeRequest
 */
const se_DescribeNetworkInterfaceAttributeRequest = (
  input: DescribeNetworkInterfaceAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInterfacePermissionsRequest
 */
const se_DescribeNetworkInterfacePermissionsRequest = (
  input: DescribeNetworkInterfacePermissionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInterfacePermissionIds != null) {
    const memberEntries = se_NetworkInterfacePermissionIdList(input.NetworkInterfacePermissionIds, context);
    if (input.NetworkInterfacePermissionIds?.length === 0) {
      entries.NetworkInterfacePermissionId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfacePermissionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInterfacesRequest
 */
const se_DescribeNetworkInterfacesRequest = (input: DescribeNetworkInterfacesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInterfaceIds != null) {
    const memberEntries = se_NetworkInterfaceIdList(input.NetworkInterfaceIds, context);
    if (input.NetworkInterfaceIds?.length === 0) {
      entries.NetworkInterfaceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribePlacementGroupsRequest
 */
const se_DescribePlacementGroupsRequest = (input: DescribePlacementGroupsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupNames != null) {
    const memberEntries = se_PlacementGroupStringList(input.GroupNames, context);
    if (input.GroupNames?.length === 0) {
      entries.GroupName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.GroupIds != null) {
    const memberEntries = se_PlacementGroupIdStringList(input.GroupIds, context);
    if (input.GroupIds?.length === 0) {
      entries.GroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribePrefixListsRequest
 */
const se_DescribePrefixListsRequest = (input: DescribePrefixListsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.PrefixListIds != null) {
    const memberEntries = se_PrefixListResourceIdStringList(input.PrefixListIds, context);
    if (input.PrefixListIds?.length === 0) {
      entries.PrefixListId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribePrincipalIdFormatRequest
 */
const se_DescribePrincipalIdFormatRequest = (input: DescribePrincipalIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Resources != null) {
    const memberEntries = se_ResourceList(input.Resources, context);
    if (input.Resources?.length === 0) {
      entries.Resource = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Resource.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribePublicIpv4PoolsRequest
 */
const se_DescribePublicIpv4PoolsRequest = (input: DescribePublicIpv4PoolsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.PoolIds != null) {
    const memberEntries = se_PublicIpv4PoolIdStringList(input.PoolIds, context);
    if (input.PoolIds?.length === 0) {
      entries.PoolId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeRegionsRequest
 */
const se_DescribeRegionsRequest = (input: DescribeRegionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RegionNames != null) {
    const memberEntries = se_RegionNameStringList(input.RegionNames, context);
    if (input.RegionNames?.length === 0) {
      entries.RegionName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RegionName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.AllRegions != null) {
    entries["AllRegions"] = input.AllRegions;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeReplaceRootVolumeTasksRequest
 */
const se_DescribeReplaceRootVolumeTasksRequest = (
  input: DescribeReplaceRootVolumeTasksRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ReplaceRootVolumeTaskIds != null) {
    const memberEntries = se_ReplaceRootVolumeTaskIds(input.ReplaceRootVolumeTaskIds, context);
    if (input.ReplaceRootVolumeTaskIds?.length === 0) {
      entries.ReplaceRootVolumeTaskId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReplaceRootVolumeTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeReservedInstancesListingsRequest
 */
const se_DescribeReservedInstancesListingsRequest = (
  input: DescribeReservedInstancesListingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ReservedInstancesId != null) {
    entries["ReservedInstancesId"] = input.ReservedInstancesId;
  }
  if (input.ReservedInstancesListingId != null) {
    entries["ReservedInstancesListingId"] = input.ReservedInstancesListingId;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeReservedInstancesModificationsRequest
 */
const se_DescribeReservedInstancesModificationsRequest = (
  input: DescribeReservedInstancesModificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ReservedInstancesModificationIds != null) {
    const memberEntries = se_ReservedInstancesModificationIdStringList(input.ReservedInstancesModificationIds, context);
    if (input.ReservedInstancesModificationIds?.length === 0) {
      entries.ReservedInstancesModificationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesModificationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeReservedInstancesOfferingsRequest
 */
const se_DescribeReservedInstancesOfferingsRequest = (
  input: DescribeReservedInstancesOfferingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.IncludeMarketplace != null) {
    entries["IncludeMarketplace"] = input.IncludeMarketplace;
  }
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.MaxDuration != null) {
    entries["MaxDuration"] = input.MaxDuration;
  }
  if (input.MaxInstanceCount != null) {
    entries["MaxInstanceCount"] = input.MaxInstanceCount;
  }
  if (input.MinDuration != null) {
    entries["MinDuration"] = input.MinDuration;
  }
  if (input.OfferingClass != null) {
    entries["OfferingClass"] = input.OfferingClass;
  }
  if (input.ProductDescription != null) {
    entries["ProductDescription"] = input.ProductDescription;
  }
  if (input.ReservedInstancesOfferingIds != null) {
    const memberEntries = se_ReservedInstancesOfferingIdStringList(input.ReservedInstancesOfferingIds, context);
    if (input.ReservedInstancesOfferingIds?.length === 0) {
      entries.ReservedInstancesOfferingId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesOfferingId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceTenancy != null) {
    entries["InstanceTenancy"] = input.InstanceTenancy;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.OfferingType != null) {
    entries["OfferingType"] = input.OfferingType;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeReservedInstancesRequest
 */
const se_DescribeReservedInstancesRequest = (input: DescribeReservedInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.OfferingClass != null) {
    entries["OfferingClass"] = input.OfferingClass;
  }
  if (input.ReservedInstancesIds != null) {
    const memberEntries = se_ReservedInstancesIdStringList(input.ReservedInstancesIds, context);
    if (input.ReservedInstancesIds?.length === 0) {
      entries.ReservedInstancesId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.OfferingType != null) {
    entries["OfferingType"] = input.OfferingType;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeRouteTablesRequest
 */
const se_DescribeRouteTablesRequest = (input: DescribeRouteTablesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.RouteTableIds != null) {
    const memberEntries = se_RouteTableIdStringList(input.RouteTableIds, context);
    if (input.RouteTableIds?.length === 0) {
      entries.RouteTableId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeScheduledInstanceAvailabilityRequest
 */
const se_DescribeScheduledInstanceAvailabilityRequest = (
  input: DescribeScheduledInstanceAvailabilityRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.FirstSlotStartTimeRange != null) {
    const memberEntries = se_SlotDateTimeRangeRequest(input.FirstSlotStartTimeRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FirstSlotStartTimeRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.MaxSlotDurationInHours != null) {
    entries["MaxSlotDurationInHours"] = input.MaxSlotDurationInHours;
  }
  if (input.MinSlotDurationInHours != null) {
    entries["MinSlotDurationInHours"] = input.MinSlotDurationInHours;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Recurrence != null) {
    const memberEntries = se_ScheduledInstanceRecurrenceRequest(input.Recurrence, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Recurrence.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeScheduledInstancesRequest
 */
const se_DescribeScheduledInstancesRequest = (
  input: DescribeScheduledInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.ScheduledInstanceIds != null) {
    const memberEntries = se_ScheduledInstanceIdRequestSet(input.ScheduledInstanceIds, context);
    if (input.ScheduledInstanceIds?.length === 0) {
      entries.ScheduledInstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ScheduledInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SlotStartTimeRange != null) {
    const memberEntries = se_SlotStartTimeRangeRequest(input.SlotStartTimeRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SlotStartTimeRange.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSecurityGroupReferencesRequest
 */
const se_DescribeSecurityGroupReferencesRequest = (
  input: DescribeSecurityGroupReferencesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupId != null) {
    const memberEntries = se_GroupIds(input.GroupId, context);
    if (input.GroupId?.length === 0) {
      entries.GroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSecurityGroupRulesRequest
 */
const se_DescribeSecurityGroupRulesRequest = (
  input: DescribeSecurityGroupRulesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroupRuleIds != null) {
    const memberEntries = se_SecurityGroupRuleIdList(input.SecurityGroupRuleIds, context);
    if (input.SecurityGroupRuleIds?.length === 0) {
      entries.SecurityGroupRuleId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSecurityGroupsRequest
 */
const se_DescribeSecurityGroupsRequest = (input: DescribeSecurityGroupsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.GroupIds != null) {
    const memberEntries = se_GroupIdStringList(input.GroupIds, context);
    if (input.GroupIds?.length === 0) {
      entries.GroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.GroupNames != null) {
    const memberEntries = se_GroupNameStringList(input.GroupNames, context);
    if (input.GroupNames?.length === 0) {
      entries.GroupName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSnapshotAttributeRequest
 */
const se_DescribeSnapshotAttributeRequest = (input: DescribeSnapshotAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.SnapshotId != null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSnapshotsRequest
 */
const se_DescribeSnapshotsRequest = (input: DescribeSnapshotsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.OwnerIds != null) {
    const memberEntries = se_OwnerStringList(input.OwnerIds, context);
    if (input.OwnerIds?.length === 0) {
      entries.Owner = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RestorableByUserIds != null) {
    const memberEntries = se_RestorableByStringList(input.RestorableByUserIds, context);
    if (input.RestorableByUserIds?.length === 0) {
      entries.RestorableBy = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RestorableBy.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SnapshotIds != null) {
    const memberEntries = se_SnapshotIdStringList(input.SnapshotIds, context);
    if (input.SnapshotIds?.length === 0) {
      entries.SnapshotId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSnapshotTierStatusRequest
 */
const se_DescribeSnapshotTierStatusRequest = (
  input: DescribeSnapshotTierStatusRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSpotDatafeedSubscriptionRequest
 */
const se_DescribeSpotDatafeedSubscriptionRequest = (
  input: DescribeSpotDatafeedSubscriptionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSpotFleetInstancesRequest
 */
const se_DescribeSpotFleetInstancesRequest = (
  input: DescribeSpotFleetInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.SpotFleetRequestId != null) {
    entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSpotFleetRequestHistoryRequest
 */
const se_DescribeSpotFleetRequestHistoryRequest = (
  input: DescribeSpotFleetRequestHistoryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EventType != null) {
    entries["EventType"] = input.EventType;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.SpotFleetRequestId != null) {
    entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
  }
  if (input.StartTime != null) {
    entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSpotFleetRequestsRequest
 */
const se_DescribeSpotFleetRequestsRequest = (input: DescribeSpotFleetRequestsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.SpotFleetRequestIds != null) {
    const memberEntries = se_SpotFleetRequestIdList(input.SpotFleetRequestIds, context);
    if (input.SpotFleetRequestIds?.length === 0) {
      entries.SpotFleetRequestId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSpotInstanceRequestsRequest
 */
const se_DescribeSpotInstanceRequestsRequest = (
  input: DescribeSpotInstanceRequestsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SpotInstanceRequestIds != null) {
    const memberEntries = se_SpotInstanceRequestIdList(input.SpotInstanceRequestIds, context);
    if (input.SpotInstanceRequestIds?.length === 0) {
      entries.SpotInstanceRequestId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSpotPriceHistoryRequest
 */
const se_DescribeSpotPriceHistoryRequest = (input: DescribeSpotPriceHistoryRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EndTime != null) {
    entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
  }
  if (input.InstanceTypes != null) {
    const memberEntries = se_InstanceTypeList(input.InstanceTypes, context);
    if (input.InstanceTypes?.length === 0) {
      entries.InstanceType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.ProductDescriptions != null) {
    const memberEntries = se_ProductDescriptionList(input.ProductDescriptions, context);
    if (input.ProductDescriptions?.length === 0) {
      entries.ProductDescription = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ProductDescription.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.StartTime != null) {
    entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeStaleSecurityGroupsRequest
 */
const se_DescribeStaleSecurityGroupsRequest = (
  input: DescribeStaleSecurityGroupsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeStoreImageTasksRequest
 */
const se_DescribeStoreImageTasksRequest = (input: DescribeStoreImageTasksRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageIds != null) {
    const memberEntries = se_ImageIdList(input.ImageIds, context);
    if (input.ImageIds?.length === 0) {
      entries.ImageId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSubnetsRequest
 */
const se_DescribeSubnetsRequest = (input: DescribeSubnetsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SubnetIds != null) {
    const memberEntries = se_SubnetIdStringList(input.SubnetIds, context);
    if (input.SubnetIds?.length === 0) {
      entries.SubnetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTagsRequest
 */
const se_DescribeTagsRequest = (input: DescribeTagsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTrafficMirrorFiltersRequest
 */
const se_DescribeTrafficMirrorFiltersRequest = (
  input: DescribeTrafficMirrorFiltersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorFilterIds != null) {
    const memberEntries = se_TrafficMirrorFilterIdList(input.TrafficMirrorFilterIds, context);
    if (input.TrafficMirrorFilterIds?.length === 0) {
      entries.TrafficMirrorFilterId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficMirrorFilterId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTrafficMirrorSessionsRequest
 */
const se_DescribeTrafficMirrorSessionsRequest = (
  input: DescribeTrafficMirrorSessionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorSessionIds != null) {
    const memberEntries = se_TrafficMirrorSessionIdList(input.TrafficMirrorSessionIds, context);
    if (input.TrafficMirrorSessionIds?.length === 0) {
      entries.TrafficMirrorSessionId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficMirrorSessionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTrafficMirrorTargetsRequest
 */
const se_DescribeTrafficMirrorTargetsRequest = (
  input: DescribeTrafficMirrorTargetsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorTargetIds != null) {
    const memberEntries = se_TrafficMirrorTargetIdList(input.TrafficMirrorTargetIds, context);
    if (input.TrafficMirrorTargetIds?.length === 0) {
      entries.TrafficMirrorTargetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficMirrorTargetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayAttachmentsRequest
 */
const se_DescribeTransitGatewayAttachmentsRequest = (
  input: DescribeTransitGatewayAttachmentsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentIds != null) {
    const memberEntries = se_TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
    if (input.TransitGatewayAttachmentIds?.length === 0) {
      entries.TransitGatewayAttachmentIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayConnectPeersRequest
 */
const se_DescribeTransitGatewayConnectPeersRequest = (
  input: DescribeTransitGatewayConnectPeersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayConnectPeerIds != null) {
    const memberEntries = se_TransitGatewayConnectPeerIdStringList(input.TransitGatewayConnectPeerIds, context);
    if (input.TransitGatewayConnectPeerIds?.length === 0) {
      entries.TransitGatewayConnectPeerIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayConnectPeerIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayConnectsRequest
 */
const se_DescribeTransitGatewayConnectsRequest = (
  input: DescribeTransitGatewayConnectsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentIds != null) {
    const memberEntries = se_TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
    if (input.TransitGatewayAttachmentIds?.length === 0) {
      entries.TransitGatewayAttachmentIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayMulticastDomainsRequest
 */
const se_DescribeTransitGatewayMulticastDomainsRequest = (
  input: DescribeTransitGatewayMulticastDomainsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainIds != null) {
    const memberEntries = se_TransitGatewayMulticastDomainIdStringList(input.TransitGatewayMulticastDomainIds, context);
    if (input.TransitGatewayMulticastDomainIds?.length === 0) {
      entries.TransitGatewayMulticastDomainIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayMulticastDomainIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsRequest
 */
const se_DescribeTransitGatewayPeeringAttachmentsRequest = (
  input: DescribeTransitGatewayPeeringAttachmentsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentIds != null) {
    const memberEntries = se_TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
    if (input.TransitGatewayAttachmentIds?.length === 0) {
      entries.TransitGatewayAttachmentIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayPolicyTablesRequest
 */
const se_DescribeTransitGatewayPolicyTablesRequest = (
  input: DescribeTransitGatewayPolicyTablesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayPolicyTableIds != null) {
    const memberEntries = se_TransitGatewayPolicyTableIdStringList(input.TransitGatewayPolicyTableIds, context);
    if (input.TransitGatewayPolicyTableIds?.length === 0) {
      entries.TransitGatewayPolicyTableIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayPolicyTableIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayRouteTableAnnouncementsRequest
 */
const se_DescribeTransitGatewayRouteTableAnnouncementsRequest = (
  input: DescribeTransitGatewayRouteTableAnnouncementsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableAnnouncementIds != null) {
    const memberEntries = se_TransitGatewayRouteTableAnnouncementIdStringList(
      input.TransitGatewayRouteTableAnnouncementIds,
      context
    );
    if (input.TransitGatewayRouteTableAnnouncementIds?.length === 0) {
      entries.TransitGatewayRouteTableAnnouncementIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayRouteTableAnnouncementIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayRouteTablesRequest
 */
const se_DescribeTransitGatewayRouteTablesRequest = (
  input: DescribeTransitGatewayRouteTablesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableIds != null) {
    const memberEntries = se_TransitGatewayRouteTableIdStringList(input.TransitGatewayRouteTableIds, context);
    if (input.TransitGatewayRouteTableIds?.length === 0) {
      entries.TransitGatewayRouteTableIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayRouteTableIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewaysRequest
 */
const se_DescribeTransitGatewaysRequest = (input: DescribeTransitGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.TransitGatewayIds != null) {
    const memberEntries = se_TransitGatewayIdStringList(input.TransitGatewayIds, context);
    if (input.TransitGatewayIds?.length === 0) {
      entries.TransitGatewayIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayVpcAttachmentsRequest
 */
const se_DescribeTransitGatewayVpcAttachmentsRequest = (
  input: DescribeTransitGatewayVpcAttachmentsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentIds != null) {
    const memberEntries = se_TransitGatewayAttachmentIdStringList(input.TransitGatewayAttachmentIds, context);
    if (input.TransitGatewayAttachmentIds?.length === 0) {
      entries.TransitGatewayAttachmentIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTrunkInterfaceAssociationsRequest
 */
const se_DescribeTrunkInterfaceAssociationsRequest = (
  input: DescribeTrunkInterfaceAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationIds != null) {
    const memberEntries = se_TrunkInterfaceAssociationIdList(input.AssociationIds, context);
    if (input.AssociationIds?.length === 0) {
      entries.AssociationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVerifiedAccessEndpointsRequest
 */
const se_DescribeVerifiedAccessEndpointsRequest = (
  input: DescribeVerifiedAccessEndpointsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessEndpointIds != null) {
    const memberEntries = se_VerifiedAccessEndpointIdList(input.VerifiedAccessEndpointIds, context);
    if (input.VerifiedAccessEndpointIds?.length === 0) {
      entries.VerifiedAccessEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VerifiedAccessInstanceId != null) {
    entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
  }
  if (input.VerifiedAccessGroupId != null) {
    entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVerifiedAccessGroupsRequest
 */
const se_DescribeVerifiedAccessGroupsRequest = (
  input: DescribeVerifiedAccessGroupsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessGroupIds != null) {
    const memberEntries = se_VerifiedAccessGroupIdList(input.VerifiedAccessGroupIds, context);
    if (input.VerifiedAccessGroupIds?.length === 0) {
      entries.VerifiedAccessGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VerifiedAccessInstanceId != null) {
    entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVerifiedAccessInstanceLoggingConfigurationsRequest
 */
const se_DescribeVerifiedAccessInstanceLoggingConfigurationsRequest = (
  input: DescribeVerifiedAccessInstanceLoggingConfigurationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessInstanceIds != null) {
    const memberEntries = se_VerifiedAccessInstanceIdList(input.VerifiedAccessInstanceIds, context);
    if (input.VerifiedAccessInstanceIds?.length === 0) {
      entries.VerifiedAccessInstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVerifiedAccessInstancesRequest
 */
const se_DescribeVerifiedAccessInstancesRequest = (
  input: DescribeVerifiedAccessInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessInstanceIds != null) {
    const memberEntries = se_VerifiedAccessInstanceIdList(input.VerifiedAccessInstanceIds, context);
    if (input.VerifiedAccessInstanceIds?.length === 0) {
      entries.VerifiedAccessInstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVerifiedAccessTrustProvidersRequest
 */
const se_DescribeVerifiedAccessTrustProvidersRequest = (
  input: DescribeVerifiedAccessTrustProvidersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessTrustProviderIds != null) {
    const memberEntries = se_VerifiedAccessTrustProviderIdList(input.VerifiedAccessTrustProviderIds, context);
    if (input.VerifiedAccessTrustProviderIds?.length === 0) {
      entries.VerifiedAccessTrustProviderId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessTrustProviderId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVolumeAttributeRequest
 */
const se_DescribeVolumeAttributeRequest = (input: DescribeVolumeAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.VolumeId != null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVolumesModificationsRequest
 */
const se_DescribeVolumesModificationsRequest = (
  input: DescribeVolumesModificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VolumeIds != null) {
    const memberEntries = se_VolumeIdStringList(input.VolumeIds, context);
    if (input.VolumeIds?.length === 0) {
      entries.VolumeId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVolumesRequest
 */
const se_DescribeVolumesRequest = (input: DescribeVolumesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VolumeIds != null) {
    const memberEntries = se_VolumeIdStringList(input.VolumeIds, context);
    if (input.VolumeIds?.length === 0) {
      entries.VolumeId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVolumeStatusRequest
 */
const se_DescribeVolumeStatusRequest = (input: DescribeVolumeStatusRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.VolumeIds != null) {
    const memberEntries = se_VolumeIdStringList(input.VolumeIds, context);
    if (input.VolumeIds?.length === 0) {
      entries.VolumeId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcAttributeRequest
 */
const se_DescribeVpcAttributeRequest = (input: DescribeVpcAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcClassicLinkDnsSupportRequest
 */
const se_DescribeVpcClassicLinkDnsSupportRequest = (
  input: DescribeVpcClassicLinkDnsSupportRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.VpcIds != null) {
    const memberEntries = se_VpcClassicLinkIdList(input.VpcIds, context);
    if (input.VpcIds?.length === 0) {
      entries.VpcIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcClassicLinkRequest
 */
const se_DescribeVpcClassicLinkRequest = (input: DescribeVpcClassicLinkRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcIds != null) {
    const memberEntries = se_VpcClassicLinkIdList(input.VpcIds, context);
    if (input.VpcIds?.length === 0) {
      entries.VpcId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcEndpointConnectionNotificationsRequest
 */
const se_DescribeVpcEndpointConnectionNotificationsRequest = (
  input: DescribeVpcEndpointConnectionNotificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ConnectionNotificationId != null) {
    entries["ConnectionNotificationId"] = input.ConnectionNotificationId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcEndpointConnectionsRequest
 */
const se_DescribeVpcEndpointConnectionsRequest = (
  input: DescribeVpcEndpointConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcEndpointServiceConfigurationsRequest
 */
const se_DescribeVpcEndpointServiceConfigurationsRequest = (
  input: DescribeVpcEndpointServiceConfigurationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceIds != null) {
    const memberEntries = se_VpcEndpointServiceIdList(input.ServiceIds, context);
    if (input.ServiceIds?.length === 0) {
      entries.ServiceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcEndpointServicePermissionsRequest
 */
const se_DescribeVpcEndpointServicePermissionsRequest = (
  input: DescribeVpcEndpointServicePermissionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId != null) {
    entries["ServiceId"] = input.ServiceId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcEndpointServicesRequest
 */
const se_DescribeVpcEndpointServicesRequest = (
  input: DescribeVpcEndpointServicesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceNames != null) {
    const memberEntries = se_ValueStringList(input.ServiceNames, context);
    if (input.ServiceNames?.length === 0) {
      entries.ServiceName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcEndpointsRequest
 */
const se_DescribeVpcEndpointsRequest = (input: DescribeVpcEndpointsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcEndpointIds != null) {
    const memberEntries = se_VpcEndpointIdList(input.VpcEndpointIds, context);
    if (input.VpcEndpointIds?.length === 0) {
      entries.VpcEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcPeeringConnectionsRequest
 */
const se_DescribeVpcPeeringConnectionsRequest = (
  input: DescribeVpcPeeringConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcPeeringConnectionIds != null) {
    const memberEntries = se_VpcPeeringConnectionIdList(input.VpcPeeringConnectionIds, context);
    if (input.VpcPeeringConnectionIds?.length === 0) {
      entries.VpcPeeringConnectionId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcPeeringConnectionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcsRequest
 */
const se_DescribeVpcsRequest = (input: DescribeVpcsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VpcIds != null) {
    const memberEntries = se_VpcIdStringList(input.VpcIds, context);
    if (input.VpcIds?.length === 0) {
      entries.VpcId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpnConnectionsRequest
 */
const se_DescribeVpnConnectionsRequest = (input: DescribeVpnConnectionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VpnConnectionIds != null) {
    const memberEntries = se_VpnConnectionIdStringList(input.VpnConnectionIds, context);
    if (input.VpnConnectionIds?.length === 0) {
      entries.VpnConnectionId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpnConnectionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpnGatewaysRequest
 */
const se_DescribeVpnGatewaysRequest = (input: DescribeVpnGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VpnGatewayIds != null) {
    const memberEntries = se_VpnGatewayIdStringList(input.VpnGatewayIds, context);
    if (input.VpnGatewayIds?.length === 0) {
      entries.VpnGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpnGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DestinationOptionsRequest
 */
const se_DestinationOptionsRequest = (input: DestinationOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.FileFormat != null) {
    entries["FileFormat"] = input.FileFormat;
  }
  if (input.HiveCompatiblePartitions != null) {
    entries["HiveCompatiblePartitions"] = input.HiveCompatiblePartitions;
  }
  if (input.PerHourPartition != null) {
    entries["PerHourPartition"] = input.PerHourPartition;
  }
  return entries;
};

/**
 * serializeAws_ec2DetachClassicLinkVpcRequest
 */
const se_DetachClassicLinkVpcRequest = (input: DetachClassicLinkVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

/**
 * serializeAws_ec2DetachInternetGatewayRequest
 */
const se_DetachInternetGatewayRequest = (input: DetachInternetGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InternetGatewayId != null) {
    entries["InternetGatewayId"] = input.InternetGatewayId;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

/**
 * serializeAws_ec2DetachNetworkInterfaceRequest
 */
const se_DetachNetworkInterfaceRequest = (input: DetachNetworkInterfaceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AttachmentId != null) {
    entries["AttachmentId"] = input.AttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Force != null) {
    entries["Force"] = input.Force;
  }
  return entries;
};

/**
 * serializeAws_ec2DetachVerifiedAccessTrustProviderRequest
 */
const se_DetachVerifiedAccessTrustProviderRequest = (
  input: DetachVerifiedAccessTrustProviderRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessInstanceId != null) {
    entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
  }
  if (input.VerifiedAccessTrustProviderId != null) {
    entries["VerifiedAccessTrustProviderId"] = input.VerifiedAccessTrustProviderId;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DetachVolumeRequest
 */
const se_DetachVolumeRequest = (input: DetachVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Device != null) {
    entries["Device"] = input.Device;
  }
  if (input.Force != null) {
    entries["Force"] = input.Force;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.VolumeId != null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DetachVpnGatewayRequest
 */
const se_DetachVpnGatewayRequest = (input: DetachVpnGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.VpnGatewayId != null) {
    entries["VpnGatewayId"] = input.VpnGatewayId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DhcpOptionsIdStringList
 */
const se_DhcpOptionsIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`DhcpOptionsId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DirectoryServiceAuthenticationRequest
 */
const se_DirectoryServiceAuthenticationRequest = (
  input: DirectoryServiceAuthenticationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DirectoryId != null) {
    entries["DirectoryId"] = input.DirectoryId;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableAddressTransferRequest
 */
const se_DisableAddressTransferRequest = (input: DisableAddressTransferRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationId != null) {
    entries["AllocationId"] = input.AllocationId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableAwsNetworkPerformanceMetricSubscriptionRequest
 */
const se_DisableAwsNetworkPerformanceMetricSubscriptionRequest = (
  input: DisableAwsNetworkPerformanceMetricSubscriptionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Source != null) {
    entries["Source"] = input.Source;
  }
  if (input.Destination != null) {
    entries["Destination"] = input.Destination;
  }
  if (input.Metric != null) {
    entries["Metric"] = input.Metric;
  }
  if (input.Statistic != null) {
    entries["Statistic"] = input.Statistic;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableEbsEncryptionByDefaultRequest
 */
const se_DisableEbsEncryptionByDefaultRequest = (
  input: DisableEbsEncryptionByDefaultRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableFastLaunchRequest
 */
const se_DisableFastLaunchRequest = (input: DisableFastLaunchRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.Force != null) {
    entries["Force"] = input.Force;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableFastSnapshotRestoresRequest
 */
const se_DisableFastSnapshotRestoresRequest = (
  input: DisableFastSnapshotRestoresRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AvailabilityZones != null) {
    const memberEntries = se_AvailabilityZoneStringList(input.AvailabilityZones, context);
    if (input.AvailabilityZones?.length === 0) {
      entries.AvailabilityZone = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SourceSnapshotIds != null) {
    const memberEntries = se_SnapshotIdStringList(input.SourceSnapshotIds, context);
    if (input.SourceSnapshotIds?.length === 0) {
      entries.SourceSnapshotId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableImageBlockPublicAccessRequest
 */
const se_DisableImageBlockPublicAccessRequest = (
  input: DisableImageBlockPublicAccessRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableImageDeprecationRequest
 */
const se_DisableImageDeprecationRequest = (input: DisableImageDeprecationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableImageRequest
 */
const se_DisableImageRequest = (input: DisableImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableIpamOrganizationAdminAccountRequest
 */
const se_DisableIpamOrganizationAdminAccountRequest = (
  input: DisableIpamOrganizationAdminAccountRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.DelegatedAdminAccountId != null) {
    entries["DelegatedAdminAccountId"] = input.DelegatedAdminAccountId;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableSerialConsoleAccessRequest
 */
const se_DisableSerialConsoleAccessRequest = (
  input: DisableSerialConsoleAccessRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableTransitGatewayRouteTablePropagationRequest
 */
const se_DisableTransitGatewayRouteTablePropagationRequest = (
  input: DisableTransitGatewayRouteTablePropagationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TransitGatewayRouteTableAnnouncementId != null) {
    entries["TransitGatewayRouteTableAnnouncementId"] = input.TransitGatewayRouteTableAnnouncementId;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableVgwRoutePropagationRequest
 */
const se_DisableVgwRoutePropagationRequest = (
  input: DisableVgwRoutePropagationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.GatewayId != null) {
    entries["GatewayId"] = input.GatewayId;
  }
  if (input.RouteTableId != null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableVpcClassicLinkDnsSupportRequest
 */
const se_DisableVpcClassicLinkDnsSupportRequest = (
  input: DisableVpcClassicLinkDnsSupportRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

/**
 * serializeAws_ec2DisableVpcClassicLinkRequest
 */
const se_DisableVpcClassicLinkRequest = (input: DisableVpcClassicLinkRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateAddressRequest
 */
const se_DisassociateAddressRequest = (input: DisassociateAddressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AssociationId != null) {
    entries["AssociationId"] = input.AssociationId;
  }
  if (input.PublicIp != null) {
    entries["PublicIp"] = input.PublicIp;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateClientVpnTargetNetworkRequest
 */
const se_DisassociateClientVpnTargetNetworkRequest = (
  input: DisassociateClientVpnTargetNetworkRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.AssociationId != null) {
    entries["AssociationId"] = input.AssociationId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateEnclaveCertificateIamRoleRequest
 */
const se_DisassociateEnclaveCertificateIamRoleRequest = (
  input: DisassociateEnclaveCertificateIamRoleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CertificateArn != null) {
    entries["CertificateArn"] = input.CertificateArn;
  }
  if (input.RoleArn != null) {
    entries["RoleArn"] = input.RoleArn;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateIamInstanceProfileRequest
 */
const se_DisassociateIamInstanceProfileRequest = (
  input: DisassociateIamInstanceProfileRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationId != null) {
    entries["AssociationId"] = input.AssociationId;
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateInstanceEventWindowRequest
 */
const se_DisassociateInstanceEventWindowRequest = (
  input: DisassociateInstanceEventWindowRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceEventWindowId != null) {
    entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
  }
  if (input.AssociationTarget != null) {
    const memberEntries = se_InstanceEventWindowDisassociationRequest(input.AssociationTarget, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateIpamResourceDiscoveryRequest
 */
const se_DisassociateIpamResourceDiscoveryRequest = (
  input: DisassociateIpamResourceDiscoveryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamResourceDiscoveryAssociationId != null) {
    entries["IpamResourceDiscoveryAssociationId"] = input.IpamResourceDiscoveryAssociationId;
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateNatGatewayAddressRequest
 */
const se_DisassociateNatGatewayAddressRequest = (
  input: DisassociateNatGatewayAddressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NatGatewayId != null) {
    entries["NatGatewayId"] = input.NatGatewayId;
  }
  if (input.AssociationIds != null) {
    const memberEntries = se_EipAssociationIdList(input.AssociationIds, context);
    if (input.AssociationIds?.length === 0) {
      entries.AssociationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxDrainDurationSeconds != null) {
    entries["MaxDrainDurationSeconds"] = input.MaxDrainDurationSeconds;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateRouteTableRequest
 */
const se_DisassociateRouteTableRequest = (input: DisassociateRouteTableRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AssociationId != null) {
    entries["AssociationId"] = input.AssociationId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateSubnetCidrBlockRequest
 */
const se_DisassociateSubnetCidrBlockRequest = (
  input: DisassociateSubnetCidrBlockRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationId != null) {
    entries["AssociationId"] = input.AssociationId;
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateTransitGatewayMulticastDomainRequest
 */
const se_DisassociateTransitGatewayMulticastDomainRequest = (
  input: DisassociateTransitGatewayMulticastDomainRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId != null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.SubnetIds != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input.SubnetIds, context);
    if (input.SubnetIds?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateTransitGatewayPolicyTableRequest
 */
const se_DisassociateTransitGatewayPolicyTableRequest = (
  input: DisassociateTransitGatewayPolicyTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayPolicyTableId != null) {
    entries["TransitGatewayPolicyTableId"] = input.TransitGatewayPolicyTableId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateTransitGatewayRouteTableRequest
 */
const se_DisassociateTransitGatewayRouteTableRequest = (
  input: DisassociateTransitGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateTrunkInterfaceRequest
 */
const se_DisassociateTrunkInterfaceRequest = (
  input: DisassociateTrunkInterfaceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationId != null) {
    entries["AssociationId"] = input.AssociationId;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateVpcCidrBlockRequest
 */
const se_DisassociateVpcCidrBlockRequest = (input: DisassociateVpcCidrBlockRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AssociationId != null) {
    entries["AssociationId"] = input.AssociationId;
  }
  return entries;
};

/**
 * serializeAws_ec2DiskImage
 */
const se_DiskImage = (input: DiskImage, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.Image != null) {
    const memberEntries = se_DiskImageDetail(input.Image, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Image.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Volume != null) {
    const memberEntries = se_VolumeDetail(input.Volume, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Volume.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DiskImageDetail
 */
const se_DiskImageDetail = (input: DiskImageDetail, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Bytes != null) {
    entries["Bytes"] = input.Bytes;
  }
  if (input.Format != null) {
    entries["Format"] = input.Format;
  }
  if (input.ImportManifestUrl != null) {
    entries["ImportManifestUrl"] = input.ImportManifestUrl;
  }
  return entries;
};

/**
 * serializeAws_ec2DiskImageList
 */
const se_DiskImageList = (input: DiskImage[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_DiskImage(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DnsOptionsSpecification
 */
const se_DnsOptionsSpecification = (input: DnsOptionsSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DnsRecordIpType != null) {
    entries["DnsRecordIpType"] = input.DnsRecordIpType;
  }
  if (input.PrivateDnsOnlyForInboundResolverEndpoint != null) {
    entries["PrivateDnsOnlyForInboundResolverEndpoint"] = input.PrivateDnsOnlyForInboundResolverEndpoint;
  }
  return entries;
};

/**
 * serializeAws_ec2DnsServersOptionsModifyStructure
 */
const se_DnsServersOptionsModifyStructure = (input: DnsServersOptionsModifyStructure, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CustomDnsServers != null) {
    const memberEntries = se_ValueStringList(input.CustomDnsServers, context);
    if (input.CustomDnsServers?.length === 0) {
      entries.CustomDnsServers = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomDnsServers.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Enabled != null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

/**
 * serializeAws_ec2EbsBlockDevice
 */
const se_EbsBlockDevice = (input: EbsBlockDevice, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DeleteOnTermination != null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.Iops != null) {
    entries["Iops"] = input.Iops;
  }
  if (input.SnapshotId != null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.VolumeSize != null) {
    entries["VolumeSize"] = input.VolumeSize;
  }
  if (input.VolumeType != null) {
    entries["VolumeType"] = input.VolumeType;
  }
  if (input.KmsKeyId != null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.Throughput != null) {
    entries["Throughput"] = input.Throughput;
  }
  if (input.OutpostArn != null) {
    entries["OutpostArn"] = input.OutpostArn;
  }
  if (input.Encrypted != null) {
    entries["Encrypted"] = input.Encrypted;
  }
  return entries;
};

/**
 * serializeAws_ec2EbsInstanceBlockDeviceSpecification
 */
const se_EbsInstanceBlockDeviceSpecification = (
  input: EbsInstanceBlockDeviceSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DeleteOnTermination != null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.VolumeId != null) {
    entries["VolumeId"] = input.VolumeId;
  }
  return entries;
};

/**
 * serializeAws_ec2EgressOnlyInternetGatewayIdList
 */
const se_EgressOnlyInternetGatewayIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2EipAssociationIdList
 */
const se_EipAssociationIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ElasticGpuIdSet
 */
const se_ElasticGpuIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ElasticGpuSpecification
 */
const se_ElasticGpuSpecification = (input: ElasticGpuSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Type != null) {
    entries["Type"] = input.Type;
  }
  return entries;
};

/**
 * serializeAws_ec2ElasticGpuSpecificationList
 */
const se_ElasticGpuSpecificationList = (input: ElasticGpuSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ElasticGpuSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`ElasticGpuSpecification.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ElasticGpuSpecifications
 */
const se_ElasticGpuSpecifications = (input: ElasticGpuSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ElasticGpuSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ElasticInferenceAccelerator
 */
const se_ElasticInferenceAccelerator = (input: ElasticInferenceAccelerator, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Type != null) {
    entries["Type"] = input.Type;
  }
  if (input.Count != null) {
    entries["Count"] = input.Count;
  }
  return entries;
};

/**
 * serializeAws_ec2ElasticInferenceAccelerators
 */
const se_ElasticInferenceAccelerators = (input: ElasticInferenceAccelerator[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ElasticInferenceAccelerator(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableAddressTransferRequest
 */
const se_EnableAddressTransferRequest = (input: EnableAddressTransferRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationId != null) {
    entries["AllocationId"] = input.AllocationId;
  }
  if (input.TransferAccountId != null) {
    entries["TransferAccountId"] = input.TransferAccountId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableAwsNetworkPerformanceMetricSubscriptionRequest
 */
const se_EnableAwsNetworkPerformanceMetricSubscriptionRequest = (
  input: EnableAwsNetworkPerformanceMetricSubscriptionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Source != null) {
    entries["Source"] = input.Source;
  }
  if (input.Destination != null) {
    entries["Destination"] = input.Destination;
  }
  if (input.Metric != null) {
    entries["Metric"] = input.Metric;
  }
  if (input.Statistic != null) {
    entries["Statistic"] = input.Statistic;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableEbsEncryptionByDefaultRequest
 */
const se_EnableEbsEncryptionByDefaultRequest = (
  input: EnableEbsEncryptionByDefaultRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableFastLaunchRequest
 */
const se_EnableFastLaunchRequest = (input: EnableFastLaunchRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.ResourceType != null) {
    entries["ResourceType"] = input.ResourceType;
  }
  if (input.SnapshotConfiguration != null) {
    const memberEntries = se_FastLaunchSnapshotConfigurationRequest(input.SnapshotConfiguration, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input.LaunchTemplate != null) {
    const memberEntries = se_FastLaunchLaunchTemplateSpecificationRequest(input.LaunchTemplate, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplate.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MaxParallelLaunches != null) {
    entries["MaxParallelLaunches"] = input.MaxParallelLaunches;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableFastSnapshotRestoresRequest
 */
const se_EnableFastSnapshotRestoresRequest = (
  input: EnableFastSnapshotRestoresRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AvailabilityZones != null) {
    const memberEntries = se_AvailabilityZoneStringList(input.AvailabilityZones, context);
    if (input.AvailabilityZones?.length === 0) {
      entries.AvailabilityZone = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SourceSnapshotIds != null) {
    const memberEntries = se_SnapshotIdStringList(input.SourceSnapshotIds, context);
    if (input.SourceSnapshotIds?.length === 0) {
      entries.SourceSnapshotId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableImageBlockPublicAccessRequest
 */
const se_EnableImageBlockPublicAccessRequest = (
  input: EnableImageBlockPublicAccessRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ImageBlockPublicAccessState != null) {
    entries["ImageBlockPublicAccessState"] = input.ImageBlockPublicAccessState;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableImageDeprecationRequest
 */
const se_EnableImageDeprecationRequest = (input: EnableImageDeprecationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.DeprecateAt != null) {
    entries["DeprecateAt"] = input.DeprecateAt.toISOString().split(".")[0] + "Z";
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableImageRequest
 */
const se_EnableImageRequest = (input: EnableImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableIpamOrganizationAdminAccountRequest
 */
const se_EnableIpamOrganizationAdminAccountRequest = (
  input: EnableIpamOrganizationAdminAccountRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.DelegatedAdminAccountId != null) {
    entries["DelegatedAdminAccountId"] = input.DelegatedAdminAccountId;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableReachabilityAnalyzerOrganizationSharingRequest
 */
const se_EnableReachabilityAnalyzerOrganizationSharingRequest = (
  input: EnableReachabilityAnalyzerOrganizationSharingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableSerialConsoleAccessRequest
 */
const se_EnableSerialConsoleAccessRequest = (input: EnableSerialConsoleAccessRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableTransitGatewayRouteTablePropagationRequest
 */
const se_EnableTransitGatewayRouteTablePropagationRequest = (
  input: EnableTransitGatewayRouteTablePropagationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TransitGatewayRouteTableAnnouncementId != null) {
    entries["TransitGatewayRouteTableAnnouncementId"] = input.TransitGatewayRouteTableAnnouncementId;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableVgwRoutePropagationRequest
 */
const se_EnableVgwRoutePropagationRequest = (input: EnableVgwRoutePropagationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.GatewayId != null) {
    entries["GatewayId"] = input.GatewayId;
  }
  if (input.RouteTableId != null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableVolumeIORequest
 */
const se_EnableVolumeIORequest = (input: EnableVolumeIORequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VolumeId != null) {
    entries["VolumeId"] = input.VolumeId;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableVpcClassicLinkDnsSupportRequest
 */
const se_EnableVpcClassicLinkDnsSupportRequest = (
  input: EnableVpcClassicLinkDnsSupportRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableVpcClassicLinkRequest
 */
const se_EnableVpcClassicLinkRequest = (input: EnableVpcClassicLinkRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  return entries;
};

/**
 * serializeAws_ec2EnaSrdSpecification
 */
const se_EnaSrdSpecification = (input: EnaSrdSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.EnaSrdEnabled != null) {
    entries["EnaSrdEnabled"] = input.EnaSrdEnabled;
  }
  if (input.EnaSrdUdpSpecification != null) {
    const memberEntries = se_EnaSrdUdpSpecification(input.EnaSrdUdpSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdUdpSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2EnaSrdUdpSpecification
 */
const se_EnaSrdUdpSpecification = (input: EnaSrdUdpSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.EnaSrdUdpEnabled != null) {
    entries["EnaSrdUdpEnabled"] = input.EnaSrdUdpEnabled;
  }
  return entries;
};

/**
 * serializeAws_ec2EnclaveOptionsRequest
 */
const se_EnclaveOptionsRequest = (input: EnclaveOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Enabled != null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

/**
 * serializeAws_ec2ExcludedInstanceTypeSet
 */
const se_ExcludedInstanceTypeSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ExecutableByStringList
 */
const se_ExecutableByStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ExecutableBy.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ExportClientVpnClientCertificateRevocationListRequest
 */
const se_ExportClientVpnClientCertificateRevocationListRequest = (
  input: ExportClientVpnClientCertificateRevocationListRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ExportClientVpnClientConfigurationRequest
 */
const se_ExportClientVpnClientConfigurationRequest = (
  input: ExportClientVpnClientConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ExportImageRequest
 */
const se_ExportImageRequest = (input: ExportImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DiskImageFormat != null) {
    entries["DiskImageFormat"] = input.DiskImageFormat;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.S3ExportLocation != null) {
    const memberEntries = se_ExportTaskS3LocationRequest(input.S3ExportLocation, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3ExportLocation.${key}`;
      entries[loc] = value;
    });
  }
  if (input.RoleName != null) {
    entries["RoleName"] = input.RoleName;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ExportImageTaskIdList
 */
const se_ExportImageTaskIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ExportImageTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ExportTaskIdStringList
 */
const se_ExportTaskIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ExportTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ExportTaskS3LocationRequest
 */
const se_ExportTaskS3LocationRequest = (input: ExportTaskS3LocationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.S3Bucket != null) {
    entries["S3Bucket"] = input.S3Bucket;
  }
  if (input.S3Prefix != null) {
    entries["S3Prefix"] = input.S3Prefix;
  }
  return entries;
};

/**
 * serializeAws_ec2ExportToS3TaskSpecification
 */
const se_ExportToS3TaskSpecification = (input: ExportToS3TaskSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ContainerFormat != null) {
    entries["ContainerFormat"] = input.ContainerFormat;
  }
  if (input.DiskImageFormat != null) {
    entries["DiskImageFormat"] = input.DiskImageFormat;
  }
  if (input.S3Bucket != null) {
    entries["S3Bucket"] = input.S3Bucket;
  }
  if (input.S3Prefix != null) {
    entries["S3Prefix"] = input.S3Prefix;
  }
  return entries;
};

/**
 * serializeAws_ec2ExportTransitGatewayRoutesRequest
 */
const se_ExportTransitGatewayRoutesRequest = (
  input: ExportTransitGatewayRoutesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.S3Bucket != null) {
    entries["S3Bucket"] = input.S3Bucket;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2FastLaunchImageIdList
 */
const se_FastLaunchImageIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImageId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FastLaunchLaunchTemplateSpecificationRequest
 */
const se_FastLaunchLaunchTemplateSpecificationRequest = (
  input: FastLaunchLaunchTemplateSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LaunchTemplateId != null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName != null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.Version != null) {
    entries["Version"] = input.Version;
  }
  return entries;
};

/**
 * serializeAws_ec2FastLaunchSnapshotConfigurationRequest
 */
const se_FastLaunchSnapshotConfigurationRequest = (
  input: FastLaunchSnapshotConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TargetResourceCount != null) {
    entries["TargetResourceCount"] = input.TargetResourceCount;
  }
  return entries;
};

/**
 * serializeAws_ec2FederatedAuthenticationRequest
 */
const se_FederatedAuthenticationRequest = (input: FederatedAuthenticationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SAMLProviderArn != null) {
    entries["SAMLProviderArn"] = input.SAMLProviderArn;
  }
  if (input.SelfServiceSAMLProviderArn != null) {
    entries["SelfServiceSAMLProviderArn"] = input.SelfServiceSAMLProviderArn;
  }
  return entries;
};

/**
 * serializeAws_ec2Filter
 */
const se_Filter = (input: Filter, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  if (input.Values != null) {
    const memberEntries = se_ValueStringList(input.Values, context);
    if (input.Values?.length === 0) {
      entries.Value = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2FilterList
 */
const se_FilterList = (input: Filter[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Filter(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Filter.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FleetIdSet
 */
const se_FleetIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FleetLaunchTemplateConfigListRequest
 */
const se_FleetLaunchTemplateConfigListRequest = (
  input: FleetLaunchTemplateConfigRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_FleetLaunchTemplateConfigRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FleetLaunchTemplateConfigRequest
 */
const se_FleetLaunchTemplateConfigRequest = (input: FleetLaunchTemplateConfigRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.LaunchTemplateSpecification != null) {
    const memberEntries = se_FleetLaunchTemplateSpecificationRequest(input.LaunchTemplateSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Overrides != null) {
    const memberEntries = se_FleetLaunchTemplateOverridesListRequest(input.Overrides, context);
    if (input.Overrides?.length === 0) {
      entries.Overrides = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2FleetLaunchTemplateOverridesListRequest
 */
const se_FleetLaunchTemplateOverridesListRequest = (
  input: FleetLaunchTemplateOverridesRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_FleetLaunchTemplateOverridesRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FleetLaunchTemplateOverridesRequest
 */
const se_FleetLaunchTemplateOverridesRequest = (
  input: FleetLaunchTemplateOverridesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.MaxPrice != null) {
    entries["MaxPrice"] = input.MaxPrice;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.WeightedCapacity != null) {
    entries["WeightedCapacity"] = __serializeFloat(input.WeightedCapacity);
  }
  if (input.Priority != null) {
    entries["Priority"] = __serializeFloat(input.Priority);
  }
  if (input.Placement != null) {
    const memberEntries = se_Placement(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceRequirements != null) {
    const memberEntries = se_InstanceRequirementsRequest(input.InstanceRequirements, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  return entries;
};

/**
 * serializeAws_ec2FleetLaunchTemplateSpecification
 */
const se_FleetLaunchTemplateSpecification = (input: FleetLaunchTemplateSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.LaunchTemplateId != null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName != null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.Version != null) {
    entries["Version"] = input.Version;
  }
  return entries;
};

/**
 * serializeAws_ec2FleetLaunchTemplateSpecificationRequest
 */
const se_FleetLaunchTemplateSpecificationRequest = (
  input: FleetLaunchTemplateSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LaunchTemplateId != null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName != null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.Version != null) {
    entries["Version"] = input.Version;
  }
  return entries;
};

/**
 * serializeAws_ec2FleetSpotCapacityRebalanceRequest
 */
const se_FleetSpotCapacityRebalanceRequest = (
  input: FleetSpotCapacityRebalanceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ReplacementStrategy != null) {
    entries["ReplacementStrategy"] = input.ReplacementStrategy;
  }
  if (input.TerminationDelay != null) {
    entries["TerminationDelay"] = input.TerminationDelay;
  }
  return entries;
};

/**
 * serializeAws_ec2FleetSpotMaintenanceStrategiesRequest
 */
const se_FleetSpotMaintenanceStrategiesRequest = (
  input: FleetSpotMaintenanceStrategiesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityRebalance != null) {
    const memberEntries = se_FleetSpotCapacityRebalanceRequest(input.CapacityRebalance, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityRebalance.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2FlowLogIdList
 */
const se_FlowLogIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FlowLogResourceIds
 */
const se_FlowLogResourceIds = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FpgaImageIdList
 */
const se_FpgaImageIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesRequest
 */
const se_GetAssociatedEnclaveCertificateIamRolesRequest = (
  input: GetAssociatedEnclaveCertificateIamRolesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CertificateArn != null) {
    entries["CertificateArn"] = input.CertificateArn;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetAssociatedIpv6PoolCidrsRequest
 */
const se_GetAssociatedIpv6PoolCidrsRequest = (
  input: GetAssociatedIpv6PoolCidrsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.PoolId != null) {
    entries["PoolId"] = input.PoolId;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetAwsNetworkPerformanceDataRequest
 */
const se_GetAwsNetworkPerformanceDataRequest = (
  input: GetAwsNetworkPerformanceDataRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DataQueries != null) {
    const memberEntries = se_DataQueries(input.DataQueries, context);
    if (input.DataQueries?.length === 0) {
      entries.DataQuery = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DataQuery.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.StartTime != null) {
    entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
  }
  if (input.EndTime != null) {
    entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetCapacityReservationUsageRequest
 */
const se_GetCapacityReservationUsageRequest = (
  input: GetCapacityReservationUsageRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityReservationId != null) {
    entries["CapacityReservationId"] = input.CapacityReservationId;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetCoipPoolUsageRequest
 */
const se_GetCoipPoolUsageRequest = (input: GetCoipPoolUsageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.PoolId != null) {
    entries["PoolId"] = input.PoolId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetConsoleOutputRequest
 */
const se_GetConsoleOutputRequest = (input: GetConsoleOutputRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Latest != null) {
    entries["Latest"] = input.Latest;
  }
  return entries;
};

/**
 * serializeAws_ec2GetConsoleScreenshotRequest
 */
const se_GetConsoleScreenshotRequest = (input: GetConsoleScreenshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.WakeUp != null) {
    entries["WakeUp"] = input.WakeUp;
  }
  return entries;
};

/**
 * serializeAws_ec2GetDefaultCreditSpecificationRequest
 */
const se_GetDefaultCreditSpecificationRequest = (
  input: GetDefaultCreditSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceFamily != null) {
    entries["InstanceFamily"] = input.InstanceFamily;
  }
  return entries;
};

/**
 * serializeAws_ec2GetEbsDefaultKmsKeyIdRequest
 */
const se_GetEbsDefaultKmsKeyIdRequest = (input: GetEbsDefaultKmsKeyIdRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetEbsEncryptionByDefaultRequest
 */
const se_GetEbsEncryptionByDefaultRequest = (input: GetEbsEncryptionByDefaultRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetFlowLogsIntegrationTemplateRequest
 */
const se_GetFlowLogsIntegrationTemplateRequest = (
  input: GetFlowLogsIntegrationTemplateRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FlowLogId != null) {
    entries["FlowLogId"] = input.FlowLogId;
  }
  if (input.ConfigDeliveryS3DestinationArn != null) {
    entries["ConfigDeliveryS3DestinationArn"] = input.ConfigDeliveryS3DestinationArn;
  }
  if (input.IntegrateServices != null) {
    const memberEntries = se_IntegrateServices(input.IntegrateServices, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IntegrateService.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2GetGroupsForCapacityReservationRequest
 */
const se_GetGroupsForCapacityReservationRequest = (
  input: GetGroupsForCapacityReservationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityReservationId != null) {
    entries["CapacityReservationId"] = input.CapacityReservationId;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetHostReservationPurchasePreviewRequest
 */
const se_GetHostReservationPurchasePreviewRequest = (
  input: GetHostReservationPurchasePreviewRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.HostIdSet != null) {
    const memberEntries = se_RequestHostIdSet(input.HostIdSet, context);
    if (input.HostIdSet?.length === 0) {
      entries.HostIdSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.OfferingId != null) {
    entries["OfferingId"] = input.OfferingId;
  }
  return entries;
};

/**
 * serializeAws_ec2GetImageBlockPublicAccessStateRequest
 */
const se_GetImageBlockPublicAccessStateRequest = (
  input: GetImageBlockPublicAccessStateRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetInstanceTypesFromInstanceRequirementsRequest
 */
const se_GetInstanceTypesFromInstanceRequirementsRequest = (
  input: GetInstanceTypesFromInstanceRequirementsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ArchitectureTypes != null) {
    const memberEntries = se_ArchitectureTypeSet(input.ArchitectureTypes, context);
    if (input.ArchitectureTypes?.length === 0) {
      entries.ArchitectureType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ArchitectureType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VirtualizationTypes != null) {
    const memberEntries = se_VirtualizationTypeSet(input.VirtualizationTypes, context);
    if (input.VirtualizationTypes?.length === 0) {
      entries.VirtualizationType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VirtualizationType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceRequirements != null) {
    const memberEntries = se_InstanceRequirementsRequest(input.InstanceRequirements, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2GetInstanceUefiDataRequest
 */
const se_GetInstanceUefiDataRequest = (input: GetInstanceUefiDataRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetIpamAddressHistoryRequest
 */
const se_GetIpamAddressHistoryRequest = (input: GetIpamAddressHistoryRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.IpamScopeId != null) {
    entries["IpamScopeId"] = input.IpamScopeId;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.StartTime != null) {
    entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
  }
  if (input.EndTime != null) {
    entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2GetIpamDiscoveredAccountsRequest
 */
const se_GetIpamDiscoveredAccountsRequest = (input: GetIpamDiscoveredAccountsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamResourceDiscoveryId != null) {
    entries["IpamResourceDiscoveryId"] = input.IpamResourceDiscoveryId;
  }
  if (input.DiscoveryRegion != null) {
    entries["DiscoveryRegion"] = input.DiscoveryRegion;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2GetIpamDiscoveredResourceCidrsRequest
 */
const se_GetIpamDiscoveredResourceCidrsRequest = (
  input: GetIpamDiscoveredResourceCidrsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamResourceDiscoveryId != null) {
    entries["IpamResourceDiscoveryId"] = input.IpamResourceDiscoveryId;
  }
  if (input.ResourceRegion != null) {
    entries["ResourceRegion"] = input.ResourceRegion;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2GetIpamPoolAllocationsRequest
 */
const se_GetIpamPoolAllocationsRequest = (input: GetIpamPoolAllocationsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamPoolId != null) {
    entries["IpamPoolId"] = input.IpamPoolId;
  }
  if (input.IpamPoolAllocationId != null) {
    entries["IpamPoolAllocationId"] = input.IpamPoolAllocationId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2GetIpamPoolCidrsRequest
 */
const se_GetIpamPoolCidrsRequest = (input: GetIpamPoolCidrsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamPoolId != null) {
    entries["IpamPoolId"] = input.IpamPoolId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2GetIpamResourceCidrsRequest
 */
const se_GetIpamResourceCidrsRequest = (input: GetIpamResourceCidrsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.IpamScopeId != null) {
    entries["IpamScopeId"] = input.IpamScopeId;
  }
  if (input.IpamPoolId != null) {
    entries["IpamPoolId"] = input.IpamPoolId;
  }
  if (input.ResourceId != null) {
    entries["ResourceId"] = input.ResourceId;
  }
  if (input.ResourceType != null) {
    entries["ResourceType"] = input.ResourceType;
  }
  if (input.ResourceTag != null) {
    const memberEntries = se_RequestIpamResourceTag(input.ResourceTag, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceTag.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ResourceOwner != null) {
    entries["ResourceOwner"] = input.ResourceOwner;
  }
  return entries;
};

/**
 * serializeAws_ec2GetLaunchTemplateDataRequest
 */
const se_GetLaunchTemplateDataRequest = (input: GetLaunchTemplateDataRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  return entries;
};

/**
 * serializeAws_ec2GetManagedPrefixListAssociationsRequest
 */
const se_GetManagedPrefixListAssociationsRequest = (
  input: GetManagedPrefixListAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PrefixListId != null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2GetManagedPrefixListEntriesRequest
 */
const se_GetManagedPrefixListEntriesRequest = (
  input: GetManagedPrefixListEntriesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PrefixListId != null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.TargetVersion != null) {
    entries["TargetVersion"] = input.TargetVersion;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsRequest
 */
const se_GetNetworkInsightsAccessScopeAnalysisFindingsRequest = (
  input: GetNetworkInsightsAccessScopeAnalysisFindingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInsightsAccessScopeAnalysisId != null) {
    entries["NetworkInsightsAccessScopeAnalysisId"] = input.NetworkInsightsAccessScopeAnalysisId;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetNetworkInsightsAccessScopeContentRequest
 */
const se_GetNetworkInsightsAccessScopeContentRequest = (
  input: GetNetworkInsightsAccessScopeContentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInsightsAccessScopeId != null) {
    entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetPasswordDataRequest
 */
const se_GetPasswordDataRequest = (input: GetPasswordDataRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetReservedInstancesExchangeQuoteRequest
 */
const se_GetReservedInstancesExchangeQuoteRequest = (
  input: GetReservedInstancesExchangeQuoteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ReservedInstanceIds != null) {
    const memberEntries = se_ReservedInstanceIdSet(input.ReservedInstanceIds, context);
    if (input.ReservedInstanceIds?.length === 0) {
      entries.ReservedInstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TargetConfigurations != null) {
    const memberEntries = se_TargetConfigurationRequestSet(input.TargetConfigurations, context);
    if (input.TargetConfigurations?.length === 0) {
      entries.TargetConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2GetSerialConsoleAccessStatusRequest
 */
const se_GetSerialConsoleAccessStatusRequest = (
  input: GetSerialConsoleAccessStatusRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetSpotPlacementScoresRequest
 */
const se_GetSpotPlacementScoresRequest = (input: GetSpotPlacementScoresRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceTypes != null) {
    const memberEntries = se_InstanceTypes(input.InstanceTypes, context);
    if (input.InstanceTypes?.length === 0) {
      entries.InstanceType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TargetCapacity != null) {
    entries["TargetCapacity"] = input.TargetCapacity;
  }
  if (input.TargetCapacityUnitType != null) {
    entries["TargetCapacityUnitType"] = input.TargetCapacityUnitType;
  }
  if (input.SingleAvailabilityZone != null) {
    entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
  }
  if (input.RegionNames != null) {
    const memberEntries = se_RegionNames(input.RegionNames, context);
    if (input.RegionNames?.length === 0) {
      entries.RegionName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RegionName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceRequirementsWithMetadata != null) {
    const memberEntries = se_InstanceRequirementsWithMetadataRequest(input.InstanceRequirementsWithMetadata, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirementsWithMetadata.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  return entries;
};

/**
 * serializeAws_ec2GetSubnetCidrReservationsRequest
 */
const se_GetSubnetCidrReservationsRequest = (input: GetSubnetCidrReservationsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayAttachmentPropagationsRequest
 */
const se_GetTransitGatewayAttachmentPropagationsRequest = (
  input: GetTransitGatewayAttachmentPropagationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsRequest
 */
const se_GetTransitGatewayMulticastDomainAssociationsRequest = (
  input: GetTransitGatewayMulticastDomainAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId != null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayPolicyTableAssociationsRequest
 */
const se_GetTransitGatewayPolicyTableAssociationsRequest = (
  input: GetTransitGatewayPolicyTableAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayPolicyTableId != null) {
    entries["TransitGatewayPolicyTableId"] = input.TransitGatewayPolicyTableId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayPolicyTableEntriesRequest
 */
const se_GetTransitGatewayPolicyTableEntriesRequest = (
  input: GetTransitGatewayPolicyTableEntriesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayPolicyTableId != null) {
    entries["TransitGatewayPolicyTableId"] = input.TransitGatewayPolicyTableId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayPrefixListReferencesRequest
 */
const se_GetTransitGatewayPrefixListReferencesRequest = (
  input: GetTransitGatewayPrefixListReferencesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayRouteTableAssociationsRequest
 */
const se_GetTransitGatewayRouteTableAssociationsRequest = (
  input: GetTransitGatewayRouteTableAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayRouteTablePropagationsRequest
 */
const se_GetTransitGatewayRouteTablePropagationsRequest = (
  input: GetTransitGatewayRouteTablePropagationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetVerifiedAccessEndpointPolicyRequest
 */
const se_GetVerifiedAccessEndpointPolicyRequest = (
  input: GetVerifiedAccessEndpointPolicyRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessEndpointId != null) {
    entries["VerifiedAccessEndpointId"] = input.VerifiedAccessEndpointId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetVerifiedAccessGroupPolicyRequest
 */
const se_GetVerifiedAccessGroupPolicyRequest = (
  input: GetVerifiedAccessGroupPolicyRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessGroupId != null) {
    entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetVpnConnectionDeviceSampleConfigurationRequest
 */
const se_GetVpnConnectionDeviceSampleConfigurationRequest = (
  input: GetVpnConnectionDeviceSampleConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpnConnectionId != null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  if (input.VpnConnectionDeviceTypeId != null) {
    entries["VpnConnectionDeviceTypeId"] = input.VpnConnectionDeviceTypeId;
  }
  if (input.InternetKeyExchangeVersion != null) {
    entries["InternetKeyExchangeVersion"] = input.InternetKeyExchangeVersion;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetVpnConnectionDeviceTypesRequest
 */
const se_GetVpnConnectionDeviceTypesRequest = (
  input: GetVpnConnectionDeviceTypesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GetVpnTunnelReplacementStatusRequest
 */
const se_GetVpnTunnelReplacementStatusRequest = (
  input: GetVpnTunnelReplacementStatusRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpnConnectionId != null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  if (input.VpnTunnelOutsideIpAddress != null) {
    entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2GroupIdentifier
 */
const se_GroupIdentifier = (input: GroupIdentifier, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.GroupId != null) {
    entries["GroupId"] = input.GroupId;
  }
  return entries;
};

/**
 * serializeAws_ec2GroupIdentifierList
 */
const se_GroupIdentifierList = (input: GroupIdentifier[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_GroupIdentifier(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2GroupIds
 */
const se_GroupIds = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2GroupIdStringList
 */
const se_GroupIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`GroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2GroupNameStringList
 */
const se_GroupNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`GroupName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2HibernationOptionsRequest
 */
const se_HibernationOptionsRequest = (input: HibernationOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Configured != null) {
    entries["Configured"] = input.Configured;
  }
  return entries;
};

/**
 * serializeAws_ec2HostReservationIdSet
 */
const se_HostReservationIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IamInstanceProfileSpecification
 */
const se_IamInstanceProfileSpecification = (input: IamInstanceProfileSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Arn != null) {
    entries["Arn"] = input.Arn;
  }
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  return entries;
};

/**
 * serializeAws_ec2IcmpTypeCode
 */
const se_IcmpTypeCode = (input: IcmpTypeCode, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Code != null) {
    entries["Code"] = input.Code;
  }
  if (input.Type != null) {
    entries["Type"] = input.Type;
  }
  return entries;
};

/**
 * serializeAws_ec2IKEVersionsRequestList
 */
const se_IKEVersionsRequestList = (input: IKEVersionsRequestListValue[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_IKEVersionsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IKEVersionsRequestListValue
 */
const se_IKEVersionsRequestListValue = (input: IKEVersionsRequestListValue, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

/**
 * serializeAws_ec2ImageDiskContainer
 */
const se_ImageDiskContainer = (input: ImageDiskContainer, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DeviceName != null) {
    entries["DeviceName"] = input.DeviceName;
  }
  if (input.Format != null) {
    entries["Format"] = input.Format;
  }
  if (input.SnapshotId != null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.Url != null) {
    entries["Url"] = input.Url;
  }
  if (input.UserBucket != null) {
    const memberEntries = se_UserBucket(input.UserBucket, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserBucket.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ImageDiskContainerList
 */
const se_ImageDiskContainerList = (input: ImageDiskContainer[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ImageDiskContainer(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ImageIdList
 */
const se_ImageIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ImageIdStringList
 */
const se_ImageIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImageId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ImportClientVpnClientCertificateRevocationListRequest
 */
const se_ImportClientVpnClientCertificateRevocationListRequest = (
  input: ImportClientVpnClientCertificateRevocationListRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.CertificateRevocationList != null) {
    entries["CertificateRevocationList"] = input.CertificateRevocationList;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ImportImageLicenseConfigurationRequest
 */
const se_ImportImageLicenseConfigurationRequest = (
  input: ImportImageLicenseConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LicenseConfigurationArn != null) {
    entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
  }
  return entries;
};

/**
 * serializeAws_ec2ImportImageLicenseSpecificationListRequest
 */
const se_ImportImageLicenseSpecificationListRequest = (
  input: ImportImageLicenseConfigurationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ImportImageLicenseConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ImportImageRequest
 */
const se_ImportImageRequest = (input: ImportImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Architecture != null) {
    entries["Architecture"] = input.Architecture;
  }
  if (input.ClientData != null) {
    const memberEntries = se_ClientData(input.ClientData, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientData.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DiskContainers != null) {
    const memberEntries = se_ImageDiskContainerList(input.DiskContainers, context);
    if (input.DiskContainers?.length === 0) {
      entries.DiskContainer = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DiskContainer.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Encrypted != null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.Hypervisor != null) {
    entries["Hypervisor"] = input.Hypervisor;
  }
  if (input.KmsKeyId != null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.LicenseType != null) {
    entries["LicenseType"] = input.LicenseType;
  }
  if (input.Platform != null) {
    entries["Platform"] = input.Platform;
  }
  if (input.RoleName != null) {
    entries["RoleName"] = input.RoleName;
  }
  if (input.LicenseSpecifications != null) {
    const memberEntries = se_ImportImageLicenseSpecificationListRequest(input.LicenseSpecifications, context);
    if (input.LicenseSpecifications?.length === 0) {
      entries.LicenseSpecifications = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LicenseSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.UsageOperation != null) {
    entries["UsageOperation"] = input.UsageOperation;
  }
  if (input.BootMode != null) {
    entries["BootMode"] = input.BootMode;
  }
  return entries;
};

/**
 * serializeAws_ec2ImportInstanceLaunchSpecification
 */
const se_ImportInstanceLaunchSpecification = (
  input: ImportInstanceLaunchSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AdditionalInfo != null) {
    entries["AdditionalInfo"] = input.AdditionalInfo;
  }
  if (input.Architecture != null) {
    entries["Architecture"] = input.Architecture;
  }
  if (input.GroupIds != null) {
    const memberEntries = se_SecurityGroupIdStringList(input.GroupIds, context);
    if (input.GroupIds?.length === 0) {
      entries.GroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.GroupNames != null) {
    const memberEntries = se_SecurityGroupStringList(input.GroupNames, context);
    if (input.GroupNames?.length === 0) {
      entries.GroupName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceInitiatedShutdownBehavior != null) {
    entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
  }
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.Monitoring != null) {
    entries["Monitoring"] = input.Monitoring;
  }
  if (input.Placement != null) {
    const memberEntries = se_Placement(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.PrivateIpAddress != null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.UserData != null) {
    const memberEntries = se_UserData(input.UserData, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserData.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ImportInstanceRequest
 */
const se_ImportInstanceRequest = (input: ImportInstanceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DiskImages != null) {
    const memberEntries = se_DiskImageList(input.DiskImages, context);
    if (input.DiskImages?.length === 0) {
      entries.DiskImage = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DiskImage.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LaunchSpecification != null) {
    const memberEntries = se_ImportInstanceLaunchSpecification(input.LaunchSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Platform != null) {
    entries["Platform"] = input.Platform;
  }
  return entries;
};

/**
 * serializeAws_ec2ImportKeyPairRequest
 */
const se_ImportKeyPairRequest = (input: ImportKeyPairRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.KeyName != null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.PublicKeyMaterial != null) {
    entries["PublicKeyMaterial"] = context.base64Encoder(input.PublicKeyMaterial);
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ImportSnapshotRequest
 */
const se_ImportSnapshotRequest = (input: ImportSnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientData != null) {
    const memberEntries = se_ClientData(input.ClientData, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientData.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DiskContainer != null) {
    const memberEntries = se_SnapshotDiskContainer(input.DiskContainer, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DiskContainer.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Encrypted != null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.KmsKeyId != null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.RoleName != null) {
    entries["RoleName"] = input.RoleName;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ImportSnapshotTaskIdList
 */
const se_ImportSnapshotTaskIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImportTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ImportTaskIdList
 */
const se_ImportTaskIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImportTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ImportVolumeRequest
 */
const se_ImportVolumeRequest = (input: ImportVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Image != null) {
    const memberEntries = se_DiskImageDetail(input.Image, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Image.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Volume != null) {
    const memberEntries = se_VolumeDetail(input.Volume, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Volume.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InsideCidrBlocksStringList
 */
const se_InsideCidrBlocksStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceBlockDeviceMappingSpecification
 */
const se_InstanceBlockDeviceMappingSpecification = (
  input: InstanceBlockDeviceMappingSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DeviceName != null) {
    entries["DeviceName"] = input.DeviceName;
  }
  if (input.Ebs != null) {
    const memberEntries = se_EbsInstanceBlockDeviceSpecification(input.Ebs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NoDevice != null) {
    entries["NoDevice"] = input.NoDevice;
  }
  if (input.VirtualName != null) {
    entries["VirtualName"] = input.VirtualName;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceBlockDeviceMappingSpecificationList
 */
const se_InstanceBlockDeviceMappingSpecificationList = (
  input: InstanceBlockDeviceMappingSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceBlockDeviceMappingSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceCreditSpecificationListRequest
 */
const se_InstanceCreditSpecificationListRequest = (
  input: InstanceCreditSpecificationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceCreditSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceCreditSpecificationRequest
 */
const se_InstanceCreditSpecificationRequest = (
  input: InstanceCreditSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.CpuCredits != null) {
    entries["CpuCredits"] = input.CpuCredits;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceEventWindowAssociationRequest
 */
const se_InstanceEventWindowAssociationRequest = (
  input: InstanceEventWindowAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceIds != null) {
    const memberEntries = se_InstanceIdList(input.InstanceIds, context);
    if (input.InstanceIds?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceTags != null) {
    const memberEntries = se_TagList(input.InstanceTags, context);
    if (input.InstanceTags?.length === 0) {
      entries.InstanceTag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DedicatedHostIds != null) {
    const memberEntries = se_DedicatedHostIdList(input.DedicatedHostIds, context);
    if (input.DedicatedHostIds?.length === 0) {
      entries.DedicatedHostId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DedicatedHostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceEventWindowDisassociationRequest
 */
const se_InstanceEventWindowDisassociationRequest = (
  input: InstanceEventWindowDisassociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceIds != null) {
    const memberEntries = se_InstanceIdList(input.InstanceIds, context);
    if (input.InstanceIds?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceTags != null) {
    const memberEntries = se_TagList(input.InstanceTags, context);
    if (input.InstanceTags?.length === 0) {
      entries.InstanceTag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DedicatedHostIds != null) {
    const memberEntries = se_DedicatedHostIdList(input.DedicatedHostIds, context);
    if (input.DedicatedHostIds?.length === 0) {
      entries.DedicatedHostId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DedicatedHostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceEventWindowIdSet
 */
const se_InstanceEventWindowIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`InstanceEventWindowId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceEventWindowTimeRangeRequest
 */
const se_InstanceEventWindowTimeRangeRequest = (
  input: InstanceEventWindowTimeRangeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.StartWeekDay != null) {
    entries["StartWeekDay"] = input.StartWeekDay;
  }
  if (input.StartHour != null) {
    entries["StartHour"] = input.StartHour;
  }
  if (input.EndWeekDay != null) {
    entries["EndWeekDay"] = input.EndWeekDay;
  }
  if (input.EndHour != null) {
    entries["EndHour"] = input.EndHour;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceEventWindowTimeRangeRequestSet
 */
const se_InstanceEventWindowTimeRangeRequestSet = (
  input: InstanceEventWindowTimeRangeRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceEventWindowTimeRangeRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceGenerationSet
 */
const se_InstanceGenerationSet = (input: InstanceGeneration[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceIdList
 */
const se_InstanceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceIdStringList
 */
const se_InstanceIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`InstanceId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceIpv6Address
 */
const se_InstanceIpv6Address = (input: InstanceIpv6Address, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Ipv6Address != null) {
    entries["Ipv6Address"] = input.Ipv6Address;
  }
  if (input.IsPrimaryIpv6 != null) {
    entries["IsPrimaryIpv6"] = input.IsPrimaryIpv6;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceIpv6AddressList
 */
const se_InstanceIpv6AddressList = (input: InstanceIpv6Address[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceIpv6Address(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceIpv6AddressListRequest
 */
const se_InstanceIpv6AddressListRequest = (input: InstanceIpv6AddressRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceIpv6AddressRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`InstanceIpv6Address.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceIpv6AddressRequest
 */
const se_InstanceIpv6AddressRequest = (input: InstanceIpv6AddressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Ipv6Address != null) {
    entries["Ipv6Address"] = input.Ipv6Address;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceMaintenanceOptionsRequest
 */
const se_InstanceMaintenanceOptionsRequest = (
  input: InstanceMaintenanceOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AutoRecovery != null) {
    entries["AutoRecovery"] = input.AutoRecovery;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceMarketOptionsRequest
 */
const se_InstanceMarketOptionsRequest = (input: InstanceMarketOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.MarketType != null) {
    entries["MarketType"] = input.MarketType;
  }
  if (input.SpotOptions != null) {
    const memberEntries = se_SpotMarketOptions(input.SpotOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceMetadataOptionsRequest
 */
const se_InstanceMetadataOptionsRequest = (input: InstanceMetadataOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.HttpTokens != null) {
    entries["HttpTokens"] = input.HttpTokens;
  }
  if (input.HttpPutResponseHopLimit != null) {
    entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
  }
  if (input.HttpEndpoint != null) {
    entries["HttpEndpoint"] = input.HttpEndpoint;
  }
  if (input.HttpProtocolIpv6 != null) {
    entries["HttpProtocolIpv6"] = input.HttpProtocolIpv6;
  }
  if (input.InstanceMetadataTags != null) {
    entries["InstanceMetadataTags"] = input.InstanceMetadataTags;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceNetworkInterfaceSpecification
 */
const se_InstanceNetworkInterfaceSpecification = (
  input: InstanceNetworkInterfaceSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociatePublicIpAddress != null) {
    entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
  }
  if (input.DeleteOnTermination != null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DeviceIndex != null) {
    entries["DeviceIndex"] = input.DeviceIndex;
  }
  if (input.Groups != null) {
    const memberEntries = se_SecurityGroupIdStringList(input.Groups, context);
    if (input.Groups?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6AddressCount != null) {
    entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
  }
  if (input.Ipv6Addresses != null) {
    const memberEntries = se_InstanceIpv6AddressList(input.Ipv6Addresses, context);
    if (input.Ipv6Addresses?.length === 0) {
      entries.Ipv6Addresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.PrivateIpAddress != null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  if (input.PrivateIpAddresses != null) {
    const memberEntries = se_PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
    if (input.PrivateIpAddresses?.length === 0) {
      entries.PrivateIpAddresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecondaryPrivateIpAddressCount != null) {
    entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.AssociateCarrierIpAddress != null) {
    entries["AssociateCarrierIpAddress"] = input.AssociateCarrierIpAddress;
  }
  if (input.InterfaceType != null) {
    entries["InterfaceType"] = input.InterfaceType;
  }
  if (input.NetworkCardIndex != null) {
    entries["NetworkCardIndex"] = input.NetworkCardIndex;
  }
  if (input.Ipv4Prefixes != null) {
    const memberEntries = se_Ipv4PrefixList(input.Ipv4Prefixes, context);
    if (input.Ipv4Prefixes?.length === 0) {
      entries.Ipv4Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv4PrefixCount != null) {
    entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
  }
  if (input.Ipv6Prefixes != null) {
    const memberEntries = se_Ipv6PrefixList(input.Ipv6Prefixes, context);
    if (input.Ipv6Prefixes?.length === 0) {
      entries.Ipv6Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6PrefixCount != null) {
    entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
  }
  if (input.PrimaryIpv6 != null) {
    entries["PrimaryIpv6"] = input.PrimaryIpv6;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceNetworkInterfaceSpecificationList
 */
const se_InstanceNetworkInterfaceSpecificationList = (
  input: InstanceNetworkInterfaceSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceNetworkInterfaceSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceRequirements
 */
const se_InstanceRequirements = (input: InstanceRequirements, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VCpuCount != null) {
    const memberEntries = se_VCpuCountRange(input.VCpuCount, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VCpuCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MemoryMiB != null) {
    const memberEntries = se_MemoryMiB(input.MemoryMiB, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CpuManufacturers != null) {
    const memberEntries = se_CpuManufacturerSet(input.CpuManufacturers, context);
    if (input.CpuManufacturers?.length === 0) {
      entries.CpuManufacturerSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuManufacturerSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MemoryGiBPerVCpu != null) {
    const memberEntries = se_MemoryGiBPerVCpu(input.MemoryGiBPerVCpu, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryGiBPerVCpu.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ExcludedInstanceTypes != null) {
    const memberEntries = se_ExcludedInstanceTypeSet(input.ExcludedInstanceTypes, context);
    if (input.ExcludedInstanceTypes?.length === 0) {
      entries.ExcludedInstanceTypeSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludedInstanceTypeSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceGenerations != null) {
    const memberEntries = se_InstanceGenerationSet(input.InstanceGenerations, context);
    if (input.InstanceGenerations?.length === 0) {
      entries.InstanceGenerationSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceGenerationSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SpotMaxPricePercentageOverLowestPrice != null) {
    entries["SpotMaxPricePercentageOverLowestPrice"] = input.SpotMaxPricePercentageOverLowestPrice;
  }
  if (input.OnDemandMaxPricePercentageOverLowestPrice != null) {
    entries["OnDemandMaxPricePercentageOverLowestPrice"] = input.OnDemandMaxPricePercentageOverLowestPrice;
  }
  if (input.BareMetal != null) {
    entries["BareMetal"] = input.BareMetal;
  }
  if (input.BurstablePerformance != null) {
    entries["BurstablePerformance"] = input.BurstablePerformance;
  }
  if (input.RequireHibernateSupport != null) {
    entries["RequireHibernateSupport"] = input.RequireHibernateSupport;
  }
  if (input.NetworkInterfaceCount != null) {
    const memberEntries = se_NetworkInterfaceCount(input.NetworkInterfaceCount, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input.LocalStorage != null) {
    entries["LocalStorage"] = input.LocalStorage;
  }
  if (input.LocalStorageTypes != null) {
    const memberEntries = se_LocalStorageTypeSet(input.LocalStorageTypes, context);
    if (input.LocalStorageTypes?.length === 0) {
      entries.LocalStorageTypeSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalStorageTypeSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TotalLocalStorageGB != null) {
    const memberEntries = se_TotalLocalStorageGB(input.TotalLocalStorageGB, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TotalLocalStorageGB.${key}`;
      entries[loc] = value;
    });
  }
  if (input.BaselineEbsBandwidthMbps != null) {
    const memberEntries = se_BaselineEbsBandwidthMbps(input.BaselineEbsBandwidthMbps, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BaselineEbsBandwidthMbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input.AcceleratorTypes != null) {
    const memberEntries = se_AcceleratorTypeSet(input.AcceleratorTypes, context);
    if (input.AcceleratorTypes?.length === 0) {
      entries.AcceleratorTypeSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorTypeSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AcceleratorCount != null) {
    const memberEntries = se_AcceleratorCount(input.AcceleratorCount, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input.AcceleratorManufacturers != null) {
    const memberEntries = se_AcceleratorManufacturerSet(input.AcceleratorManufacturers, context);
    if (input.AcceleratorManufacturers?.length === 0) {
      entries.AcceleratorManufacturerSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorManufacturerSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AcceleratorNames != null) {
    const memberEntries = se_AcceleratorNameSet(input.AcceleratorNames, context);
    if (input.AcceleratorNames?.length === 0) {
      entries.AcceleratorNameSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorNameSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AcceleratorTotalMemoryMiB != null) {
    const memberEntries = se_AcceleratorTotalMemoryMiB(input.AcceleratorTotalMemoryMiB, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorTotalMemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkBandwidthGbps != null) {
    const memberEntries = se_NetworkBandwidthGbps(input.NetworkBandwidthGbps, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkBandwidthGbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input.AllowedInstanceTypes != null) {
    const memberEntries = se_AllowedInstanceTypeSet(input.AllowedInstanceTypes, context);
    if (input.AllowedInstanceTypes?.length === 0) {
      entries.AllowedInstanceTypeSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllowedInstanceTypeSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceRequirementsRequest
 */
const se_InstanceRequirementsRequest = (input: InstanceRequirementsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VCpuCount != null) {
    const memberEntries = se_VCpuCountRangeRequest(input.VCpuCount, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VCpuCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MemoryMiB != null) {
    const memberEntries = se_MemoryMiBRequest(input.MemoryMiB, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CpuManufacturers != null) {
    const memberEntries = se_CpuManufacturerSet(input.CpuManufacturers, context);
    if (input.CpuManufacturers?.length === 0) {
      entries.CpuManufacturer = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuManufacturer.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MemoryGiBPerVCpu != null) {
    const memberEntries = se_MemoryGiBPerVCpuRequest(input.MemoryGiBPerVCpu, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryGiBPerVCpu.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ExcludedInstanceTypes != null) {
    const memberEntries = se_ExcludedInstanceTypeSet(input.ExcludedInstanceTypes, context);
    if (input.ExcludedInstanceTypes?.length === 0) {
      entries.ExcludedInstanceType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludedInstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceGenerations != null) {
    const memberEntries = se_InstanceGenerationSet(input.InstanceGenerations, context);
    if (input.InstanceGenerations?.length === 0) {
      entries.InstanceGeneration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceGeneration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SpotMaxPricePercentageOverLowestPrice != null) {
    entries["SpotMaxPricePercentageOverLowestPrice"] = input.SpotMaxPricePercentageOverLowestPrice;
  }
  if (input.OnDemandMaxPricePercentageOverLowestPrice != null) {
    entries["OnDemandMaxPricePercentageOverLowestPrice"] = input.OnDemandMaxPricePercentageOverLowestPrice;
  }
  if (input.BareMetal != null) {
    entries["BareMetal"] = input.BareMetal;
  }
  if (input.BurstablePerformance != null) {
    entries["BurstablePerformance"] = input.BurstablePerformance;
  }
  if (input.RequireHibernateSupport != null) {
    entries["RequireHibernateSupport"] = input.RequireHibernateSupport;
  }
  if (input.NetworkInterfaceCount != null) {
    const memberEntries = se_NetworkInterfaceCountRequest(input.NetworkInterfaceCount, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input.LocalStorage != null) {
    entries["LocalStorage"] = input.LocalStorage;
  }
  if (input.LocalStorageTypes != null) {
    const memberEntries = se_LocalStorageTypeSet(input.LocalStorageTypes, context);
    if (input.LocalStorageTypes?.length === 0) {
      entries.LocalStorageType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalStorageType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TotalLocalStorageGB != null) {
    const memberEntries = se_TotalLocalStorageGBRequest(input.TotalLocalStorageGB, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TotalLocalStorageGB.${key}`;
      entries[loc] = value;
    });
  }
  if (input.BaselineEbsBandwidthMbps != null) {
    const memberEntries = se_BaselineEbsBandwidthMbpsRequest(input.BaselineEbsBandwidthMbps, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BaselineEbsBandwidthMbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input.AcceleratorTypes != null) {
    const memberEntries = se_AcceleratorTypeSet(input.AcceleratorTypes, context);
    if (input.AcceleratorTypes?.length === 0) {
      entries.AcceleratorType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AcceleratorCount != null) {
    const memberEntries = se_AcceleratorCountRequest(input.AcceleratorCount, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input.AcceleratorManufacturers != null) {
    const memberEntries = se_AcceleratorManufacturerSet(input.AcceleratorManufacturers, context);
    if (input.AcceleratorManufacturers?.length === 0) {
      entries.AcceleratorManufacturer = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorManufacturer.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AcceleratorNames != null) {
    const memberEntries = se_AcceleratorNameSet(input.AcceleratorNames, context);
    if (input.AcceleratorNames?.length === 0) {
      entries.AcceleratorName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AcceleratorTotalMemoryMiB != null) {
    const memberEntries = se_AcceleratorTotalMemoryMiBRequest(input.AcceleratorTotalMemoryMiB, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorTotalMemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkBandwidthGbps != null) {
    const memberEntries = se_NetworkBandwidthGbpsRequest(input.NetworkBandwidthGbps, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkBandwidthGbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input.AllowedInstanceTypes != null) {
    const memberEntries = se_AllowedInstanceTypeSet(input.AllowedInstanceTypes, context);
    if (input.AllowedInstanceTypes?.length === 0) {
      entries.AllowedInstanceType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllowedInstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceRequirementsWithMetadataRequest
 */
const se_InstanceRequirementsWithMetadataRequest = (
  input: InstanceRequirementsWithMetadataRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ArchitectureTypes != null) {
    const memberEntries = se_ArchitectureTypeSet(input.ArchitectureTypes, context);
    if (input.ArchitectureTypes?.length === 0) {
      entries.ArchitectureType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ArchitectureType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VirtualizationTypes != null) {
    const memberEntries = se_VirtualizationTypeSet(input.VirtualizationTypes, context);
    if (input.VirtualizationTypes?.length === 0) {
      entries.VirtualizationType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VirtualizationType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceRequirements != null) {
    const memberEntries = se_InstanceRequirementsRequest(input.InstanceRequirements, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceSpecification
 */
const se_InstanceSpecification = (input: InstanceSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.ExcludeBootVolume != null) {
    entries["ExcludeBootVolume"] = input.ExcludeBootVolume;
  }
  if (input.ExcludeDataVolumeIds != null) {
    const memberEntries = se_VolumeIdStringList(input.ExcludeDataVolumeIds, context);
    if (input.ExcludeDataVolumeIds?.length === 0) {
      entries.ExcludeDataVolumeId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludeDataVolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceTagKeySet
 */
const se_InstanceTagKeySet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceTypeList
 */
const se_InstanceTypeList = (input: _InstanceType[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceTypes
 */
const se_InstanceTypes = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IntegrateServices
 */
const se_IntegrateServices = (input: IntegrateServices, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AthenaIntegrations != null) {
    const memberEntries = se_AthenaIntegrationsSet(input.AthenaIntegrations, context);
    if (input.AthenaIntegrations?.length === 0) {
      entries.AthenaIntegration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AthenaIntegration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InternetGatewayIdList
 */
const se_InternetGatewayIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IpamCidrAuthorizationContext
 */
const se_IpamCidrAuthorizationContext = (input: IpamCidrAuthorizationContext, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Message != null) {
    entries["Message"] = input.Message;
  }
  if (input.Signature != null) {
    entries["Signature"] = input.Signature;
  }
  return entries;
};

/**
 * serializeAws_ec2IpamPoolAllocationDisallowedCidrs
 */
const se_IpamPoolAllocationDisallowedCidrs = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IpList
 */
const se_IpList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IpPermission
 */
const se_IpPermission = (input: IpPermission, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.FromPort != null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.IpProtocol != null) {
    entries["IpProtocol"] = input.IpProtocol;
  }
  if (input.IpRanges != null) {
    const memberEntries = se_IpRangeList(input.IpRanges, context);
    if (input.IpRanges?.length === 0) {
      entries.IpRanges = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpRanges.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6Ranges != null) {
    const memberEntries = se_Ipv6RangeList(input.Ipv6Ranges, context);
    if (input.Ipv6Ranges?.length === 0) {
      entries.Ipv6Ranges = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Ranges.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.PrefixListIds != null) {
    const memberEntries = se_PrefixListIdList(input.PrefixListIds, context);
    if (input.PrefixListIds?.length === 0) {
      entries.PrefixListIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrefixListIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ToPort != null) {
    entries["ToPort"] = input.ToPort;
  }
  if (input.UserIdGroupPairs != null) {
    const memberEntries = se_UserIdGroupPairList(input.UserIdGroupPairs, context);
    if (input.UserIdGroupPairs?.length === 0) {
      entries.Groups = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Groups.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2IpPermissionList
 */
const se_IpPermissionList = (input: IpPermission[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_IpPermission(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IpPrefixList
 */
const se_IpPrefixList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IpRange
 */
const se_IpRange = (input: IpRange, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CidrIp != null) {
    entries["CidrIp"] = input.CidrIp;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  return entries;
};

/**
 * serializeAws_ec2IpRangeList
 */
const se_IpRangeList = (input: IpRange[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_IpRange(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv4PrefixList
 */
const se_Ipv4PrefixList = (input: Ipv4PrefixSpecificationRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Ipv4PrefixSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv4PrefixSpecificationRequest
 */
const se_Ipv4PrefixSpecificationRequest = (input: Ipv4PrefixSpecificationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Ipv4Prefix != null) {
    entries["Ipv4Prefix"] = input.Ipv4Prefix;
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv6AddressList
 */
const se_Ipv6AddressList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv6PoolIdList
 */
const se_Ipv6PoolIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv6PrefixList
 */
const se_Ipv6PrefixList = (input: Ipv6PrefixSpecificationRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Ipv6PrefixSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv6PrefixSpecificationRequest
 */
const se_Ipv6PrefixSpecificationRequest = (input: Ipv6PrefixSpecificationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Ipv6Prefix != null) {
    entries["Ipv6Prefix"] = input.Ipv6Prefix;
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv6Range
 */
const se_Ipv6Range = (input: Ipv6Range, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CidrIpv6 != null) {
    entries["CidrIpv6"] = input.CidrIpv6;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv6RangeList
 */
const se_Ipv6RangeList = (input: Ipv6Range[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Ipv6Range(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2KeyNameStringList
 */
const se_KeyNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`KeyName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2KeyPairIdStringList
 */
const se_KeyPairIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`KeyPairId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchPermission
 */
const se_LaunchPermission = (input: LaunchPermission, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Group != null) {
    entries["Group"] = input.Group;
  }
  if (input.UserId != null) {
    entries["UserId"] = input.UserId;
  }
  if (input.OrganizationArn != null) {
    entries["OrganizationArn"] = input.OrganizationArn;
  }
  if (input.OrganizationalUnitArn != null) {
    entries["OrganizationalUnitArn"] = input.OrganizationalUnitArn;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchPermissionList
 */
const se_LaunchPermissionList = (input: LaunchPermission[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchPermission(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchPermissionModifications
 */
const se_LaunchPermissionModifications = (input: LaunchPermissionModifications, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Add != null) {
    const memberEntries = se_LaunchPermissionList(input.Add, context);
    if (input.Add?.length === 0) {
      entries.Add = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Remove != null) {
    const memberEntries = se_LaunchPermissionList(input.Remove, context);
    if (input.Remove?.length === 0) {
      entries.Remove = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchSpecsList
 */
const se_LaunchSpecsList = (input: SpotFleetLaunchSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SpotFleetLaunchSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateBlockDeviceMappingRequest
 */
const se_LaunchTemplateBlockDeviceMappingRequest = (
  input: LaunchTemplateBlockDeviceMappingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DeviceName != null) {
    entries["DeviceName"] = input.DeviceName;
  }
  if (input.VirtualName != null) {
    entries["VirtualName"] = input.VirtualName;
  }
  if (input.Ebs != null) {
    const memberEntries = se_LaunchTemplateEbsBlockDeviceRequest(input.Ebs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NoDevice != null) {
    entries["NoDevice"] = input.NoDevice;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateBlockDeviceMappingRequestList
 */
const se_LaunchTemplateBlockDeviceMappingRequestList = (
  input: LaunchTemplateBlockDeviceMappingRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateBlockDeviceMappingRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`BlockDeviceMapping.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateCapacityReservationSpecificationRequest
 */
const se_LaunchTemplateCapacityReservationSpecificationRequest = (
  input: LaunchTemplateCapacityReservationSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityReservationPreference != null) {
    entries["CapacityReservationPreference"] = input.CapacityReservationPreference;
  }
  if (input.CapacityReservationTarget != null) {
    const memberEntries = se_CapacityReservationTarget(input.CapacityReservationTarget, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateConfig
 */
const se_LaunchTemplateConfig = (input: LaunchTemplateConfig, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.LaunchTemplateSpecification != null) {
    const memberEntries = se_FleetLaunchTemplateSpecification(input.LaunchTemplateSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Overrides != null) {
    const memberEntries = se_LaunchTemplateOverridesList(input.Overrides, context);
    if (input.Overrides?.length === 0) {
      entries.Overrides = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateConfigList
 */
const se_LaunchTemplateConfigList = (input: LaunchTemplateConfig[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateConfig(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateCpuOptionsRequest
 */
const se_LaunchTemplateCpuOptionsRequest = (input: LaunchTemplateCpuOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CoreCount != null) {
    entries["CoreCount"] = input.CoreCount;
  }
  if (input.ThreadsPerCore != null) {
    entries["ThreadsPerCore"] = input.ThreadsPerCore;
  }
  if (input.AmdSevSnp != null) {
    entries["AmdSevSnp"] = input.AmdSevSnp;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateEbsBlockDeviceRequest
 */
const se_LaunchTemplateEbsBlockDeviceRequest = (
  input: LaunchTemplateEbsBlockDeviceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Encrypted != null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.DeleteOnTermination != null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.Iops != null) {
    entries["Iops"] = input.Iops;
  }
  if (input.KmsKeyId != null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.SnapshotId != null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.VolumeSize != null) {
    entries["VolumeSize"] = input.VolumeSize;
  }
  if (input.VolumeType != null) {
    entries["VolumeType"] = input.VolumeType;
  }
  if (input.Throughput != null) {
    entries["Throughput"] = input.Throughput;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateElasticInferenceAccelerator
 */
const se_LaunchTemplateElasticInferenceAccelerator = (
  input: LaunchTemplateElasticInferenceAccelerator,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Type != null) {
    entries["Type"] = input.Type;
  }
  if (input.Count != null) {
    entries["Count"] = input.Count;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateElasticInferenceAcceleratorList
 */
const se_LaunchTemplateElasticInferenceAcceleratorList = (
  input: LaunchTemplateElasticInferenceAccelerator[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateElasticInferenceAccelerator(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateEnclaveOptionsRequest
 */
const se_LaunchTemplateEnclaveOptionsRequest = (
  input: LaunchTemplateEnclaveOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Enabled != null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateHibernationOptionsRequest
 */
const se_LaunchTemplateHibernationOptionsRequest = (
  input: LaunchTemplateHibernationOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Configured != null) {
    entries["Configured"] = input.Configured;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateIamInstanceProfileSpecificationRequest
 */
const se_LaunchTemplateIamInstanceProfileSpecificationRequest = (
  input: LaunchTemplateIamInstanceProfileSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Arn != null) {
    entries["Arn"] = input.Arn;
  }
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateIdStringList
 */
const se_LaunchTemplateIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateInstanceMaintenanceOptionsRequest
 */
const se_LaunchTemplateInstanceMaintenanceOptionsRequest = (
  input: LaunchTemplateInstanceMaintenanceOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AutoRecovery != null) {
    entries["AutoRecovery"] = input.AutoRecovery;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateInstanceMarketOptionsRequest
 */
const se_LaunchTemplateInstanceMarketOptionsRequest = (
  input: LaunchTemplateInstanceMarketOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.MarketType != null) {
    entries["MarketType"] = input.MarketType;
  }
  if (input.SpotOptions != null) {
    const memberEntries = se_LaunchTemplateSpotMarketOptionsRequest(input.SpotOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateInstanceMetadataOptionsRequest
 */
const se_LaunchTemplateInstanceMetadataOptionsRequest = (
  input: LaunchTemplateInstanceMetadataOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.HttpTokens != null) {
    entries["HttpTokens"] = input.HttpTokens;
  }
  if (input.HttpPutResponseHopLimit != null) {
    entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
  }
  if (input.HttpEndpoint != null) {
    entries["HttpEndpoint"] = input.HttpEndpoint;
  }
  if (input.HttpProtocolIpv6 != null) {
    entries["HttpProtocolIpv6"] = input.HttpProtocolIpv6;
  }
  if (input.InstanceMetadataTags != null) {
    entries["InstanceMetadataTags"] = input.InstanceMetadataTags;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
 */
const se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequest = (
  input: LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociateCarrierIpAddress != null) {
    entries["AssociateCarrierIpAddress"] = input.AssociateCarrierIpAddress;
  }
  if (input.AssociatePublicIpAddress != null) {
    entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
  }
  if (input.DeleteOnTermination != null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DeviceIndex != null) {
    entries["DeviceIndex"] = input.DeviceIndex;
  }
  if (input.Groups != null) {
    const memberEntries = se_SecurityGroupIdStringList(input.Groups, context);
    if (input.Groups?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InterfaceType != null) {
    entries["InterfaceType"] = input.InterfaceType;
  }
  if (input.Ipv6AddressCount != null) {
    entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
  }
  if (input.Ipv6Addresses != null) {
    const memberEntries = se_InstanceIpv6AddressListRequest(input.Ipv6Addresses, context);
    if (input.Ipv6Addresses?.length === 0) {
      entries.Ipv6Addresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.PrivateIpAddress != null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  if (input.PrivateIpAddresses != null) {
    const memberEntries = se_PrivateIpAddressSpecificationList(input.PrivateIpAddresses, context);
    if (input.PrivateIpAddresses?.length === 0) {
      entries.PrivateIpAddresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecondaryPrivateIpAddressCount != null) {
    entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.NetworkCardIndex != null) {
    entries["NetworkCardIndex"] = input.NetworkCardIndex;
  }
  if (input.Ipv4Prefixes != null) {
    const memberEntries = se_Ipv4PrefixList(input.Ipv4Prefixes, context);
    if (input.Ipv4Prefixes?.length === 0) {
      entries.Ipv4Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv4PrefixCount != null) {
    entries["Ipv4PrefixCount"] = input.Ipv4PrefixCount;
  }
  if (input.Ipv6Prefixes != null) {
    const memberEntries = se_Ipv6PrefixList(input.Ipv6Prefixes, context);
    if (input.Ipv6Prefixes?.length === 0) {
      entries.Ipv6Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6PrefixCount != null) {
    entries["Ipv6PrefixCount"] = input.Ipv6PrefixCount;
  }
  if (input.PrimaryIpv6 != null) {
    entries["PrimaryIpv6"] = input.PrimaryIpv6;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList
 */
const se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList = (
  input: LaunchTemplateInstanceNetworkInterfaceSpecificationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`InstanceNetworkInterfaceSpecification.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateLicenseConfigurationRequest
 */
const se_LaunchTemplateLicenseConfigurationRequest = (
  input: LaunchTemplateLicenseConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.LicenseConfigurationArn != null) {
    entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateLicenseSpecificationListRequest
 */
const se_LaunchTemplateLicenseSpecificationListRequest = (
  input: LaunchTemplateLicenseConfigurationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateLicenseConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateNameStringList
 */
const se_LaunchTemplateNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateOverrides
 */
const se_LaunchTemplateOverrides = (input: LaunchTemplateOverrides, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.SpotPrice != null) {
    entries["SpotPrice"] = input.SpotPrice;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.WeightedCapacity != null) {
    entries["WeightedCapacity"] = __serializeFloat(input.WeightedCapacity);
  }
  if (input.Priority != null) {
    entries["Priority"] = __serializeFloat(input.Priority);
  }
  if (input.InstanceRequirements != null) {
    const memberEntries = se_InstanceRequirements(input.InstanceRequirements, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateOverridesList
 */
const se_LaunchTemplateOverridesList = (input: LaunchTemplateOverrides[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateOverrides(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplatePlacementRequest
 */
const se_LaunchTemplatePlacementRequest = (input: LaunchTemplatePlacementRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.Affinity != null) {
    entries["Affinity"] = input.Affinity;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.HostId != null) {
    entries["HostId"] = input.HostId;
  }
  if (input.Tenancy != null) {
    entries["Tenancy"] = input.Tenancy;
  }
  if (input.SpreadDomain != null) {
    entries["SpreadDomain"] = input.SpreadDomain;
  }
  if (input.HostResourceGroupArn != null) {
    entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
  }
  if (input.PartitionNumber != null) {
    entries["PartitionNumber"] = input.PartitionNumber;
  }
  if (input.GroupId != null) {
    entries["GroupId"] = input.GroupId;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplatePrivateDnsNameOptionsRequest
 */
const se_LaunchTemplatePrivateDnsNameOptionsRequest = (
  input: LaunchTemplatePrivateDnsNameOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.HostnameType != null) {
    entries["HostnameType"] = input.HostnameType;
  }
  if (input.EnableResourceNameDnsARecord != null) {
    entries["EnableResourceNameDnsARecord"] = input.EnableResourceNameDnsARecord;
  }
  if (input.EnableResourceNameDnsAAAARecord != null) {
    entries["EnableResourceNameDnsAAAARecord"] = input.EnableResourceNameDnsAAAARecord;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplatesMonitoringRequest
 */
const se_LaunchTemplatesMonitoringRequest = (input: LaunchTemplatesMonitoringRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Enabled != null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateSpecification
 */
const se_LaunchTemplateSpecification = (input: LaunchTemplateSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.LaunchTemplateId != null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName != null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.Version != null) {
    entries["Version"] = input.Version;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateSpotMarketOptionsRequest
 */
const se_LaunchTemplateSpotMarketOptionsRequest = (
  input: LaunchTemplateSpotMarketOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.MaxPrice != null) {
    entries["MaxPrice"] = input.MaxPrice;
  }
  if (input.SpotInstanceType != null) {
    entries["SpotInstanceType"] = input.SpotInstanceType;
  }
  if (input.BlockDurationMinutes != null) {
    entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
  }
  if (input.ValidUntil != null) {
    entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
  }
  if (input.InstanceInterruptionBehavior != null) {
    entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateTagSpecificationRequest
 */
const se_LaunchTemplateTagSpecificationRequest = (
  input: LaunchTemplateTagSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ResourceType != null) {
    entries["ResourceType"] = input.ResourceType;
  }
  if (input.Tags != null) {
    const memberEntries = se_TagList(input.Tags, context);
    if (input.Tags?.length === 0) {
      entries.Tag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateTagSpecificationRequestList
 */
const se_LaunchTemplateTagSpecificationRequestList = (
  input: LaunchTemplateTagSpecificationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateTagSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`LaunchTemplateTagSpecificationRequest.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LicenseConfigurationRequest
 */
const se_LicenseConfigurationRequest = (input: LicenseConfigurationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.LicenseConfigurationArn != null) {
    entries["LicenseConfigurationArn"] = input.LicenseConfigurationArn;
  }
  return entries;
};

/**
 * serializeAws_ec2LicenseSpecificationListRequest
 */
const se_LicenseSpecificationListRequest = (input: LicenseConfigurationRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LicenseConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ListImagesInRecycleBinRequest
 */
const se_ListImagesInRecycleBinRequest = (input: ListImagesInRecycleBinRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageIds != null) {
    const memberEntries = se_ImageIdStringList(input.ImageIds, context);
    if (input.ImageIds?.length === 0) {
      entries.ImageId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ListSnapshotsInRecycleBinRequest
 */
const se_ListSnapshotsInRecycleBinRequest = (input: ListSnapshotsInRecycleBinRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.SnapshotIds != null) {
    const memberEntries = se_SnapshotIdStringList(input.SnapshotIds, context);
    if (input.SnapshotIds?.length === 0) {
      entries.SnapshotId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2LoadBalancersConfig
 */
const se_LoadBalancersConfig = (input: LoadBalancersConfig, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClassicLoadBalancersConfig != null) {
    const memberEntries = se_ClassicLoadBalancersConfig(input.ClassicLoadBalancersConfig, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClassicLoadBalancersConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input.TargetGroupsConfig != null) {
    const memberEntries = se_TargetGroupsConfig(input.TargetGroupsConfig, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroupsConfig.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LoadPermissionListRequest
 */
const se_LoadPermissionListRequest = (input: LoadPermissionRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LoadPermissionRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LoadPermissionModifications
 */
const se_LoadPermissionModifications = (input: LoadPermissionModifications, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Add != null) {
    const memberEntries = se_LoadPermissionListRequest(input.Add, context);
    if (input.Add?.length === 0) {
      entries.Add = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Remove != null) {
    const memberEntries = se_LoadPermissionListRequest(input.Remove, context);
    if (input.Remove?.length === 0) {
      entries.Remove = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LoadPermissionRequest
 */
const se_LoadPermissionRequest = (input: LoadPermissionRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Group != null) {
    entries["Group"] = input.Group;
  }
  if (input.UserId != null) {
    entries["UserId"] = input.UserId;
  }
  return entries;
};

/**
 * serializeAws_ec2LocalGatewayIdSet
 */
const se_LocalGatewayIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LocalGatewayRouteTableIdSet
 */
const se_LocalGatewayRouteTableIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet
 */
const se_LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet = (
  input: string[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LocalGatewayRouteTableVpcAssociationIdSet
 */
const se_LocalGatewayRouteTableVpcAssociationIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LocalGatewayVirtualInterfaceGroupIdSet
 */
const se_LocalGatewayVirtualInterfaceGroupIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LocalGatewayVirtualInterfaceIdSet
 */
const se_LocalGatewayVirtualInterfaceIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LocalStorageTypeSet
 */
const se_LocalStorageTypeSet = (input: LocalStorageType[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2MemoryGiBPerVCpu
 */
const se_MemoryGiBPerVCpu = (input: MemoryGiBPerVCpu, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = __serializeFloat(input.Min);
  }
  if (input.Max != null) {
    entries["Max"] = __serializeFloat(input.Max);
  }
  return entries;
};

/**
 * serializeAws_ec2MemoryGiBPerVCpuRequest
 */
const se_MemoryGiBPerVCpuRequest = (input: MemoryGiBPerVCpuRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = __serializeFloat(input.Min);
  }
  if (input.Max != null) {
    entries["Max"] = __serializeFloat(input.Max);
  }
  return entries;
};

/**
 * serializeAws_ec2MemoryMiB
 */
const se_MemoryMiB = (input: MemoryMiB, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = input.Min;
  }
  if (input.Max != null) {
    entries["Max"] = input.Max;
  }
  return entries;
};

/**
 * serializeAws_ec2MemoryMiBRequest
 */
const se_MemoryMiBRequest = (input: MemoryMiBRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = input.Min;
  }
  if (input.Max != null) {
    entries["Max"] = input.Max;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyAddressAttributeRequest
 */
const se_ModifyAddressAttributeRequest = (input: ModifyAddressAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationId != null) {
    entries["AllocationId"] = input.AllocationId;
  }
  if (input.DomainName != null) {
    entries["DomainName"] = input.DomainName;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyAvailabilityZoneGroupRequest
 */
const se_ModifyAvailabilityZoneGroupRequest = (
  input: ModifyAvailabilityZoneGroupRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.OptInStatus != null) {
    entries["OptInStatus"] = input.OptInStatus;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyCapacityReservationFleetRequest
 */
const se_ModifyCapacityReservationFleetRequest = (
  input: ModifyCapacityReservationFleetRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CapacityReservationFleetId != null) {
    entries["CapacityReservationFleetId"] = input.CapacityReservationFleetId;
  }
  if (input.TotalTargetCapacity != null) {
    entries["TotalTargetCapacity"] = input.TotalTargetCapacity;
  }
  if (input.EndDate != null) {
    entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.RemoveEndDate != null) {
    entries["RemoveEndDate"] = input.RemoveEndDate;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyCapacityReservationRequest
 */
const se_ModifyCapacityReservationRequest = (input: ModifyCapacityReservationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CapacityReservationId != null) {
    entries["CapacityReservationId"] = input.CapacityReservationId;
  }
  if (input.InstanceCount != null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.EndDate != null) {
    entries["EndDate"] = input.EndDate.toISOString().split(".")[0] + "Z";
  }
  if (input.EndDateType != null) {
    entries["EndDateType"] = input.EndDateType;
  }
  if (input.Accept != null) {
    entries["Accept"] = input.Accept;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.AdditionalInfo != null) {
    entries["AdditionalInfo"] = input.AdditionalInfo;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyClientVpnEndpointRequest
 */
const se_ModifyClientVpnEndpointRequest = (input: ModifyClientVpnEndpointRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.ServerCertificateArn != null) {
    entries["ServerCertificateArn"] = input.ServerCertificateArn;
  }
  if (input.ConnectionLogOptions != null) {
    const memberEntries = se_ConnectionLogOptions(input.ConnectionLogOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionLogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DnsServers != null) {
    const memberEntries = se_DnsServersOptionsModifyStructure(input.DnsServers, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsServers.${key}`;
      entries[loc] = value;
    });
  }
  if (input.VpnPort != null) {
    entries["VpnPort"] = input.VpnPort;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.SplitTunnel != null) {
    entries["SplitTunnel"] = input.SplitTunnel;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SecurityGroupIds != null) {
    const memberEntries = se_ClientVpnSecurityGroupIdSet(input.SecurityGroupIds, context);
    if (input.SecurityGroupIds?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.SelfServicePortal != null) {
    entries["SelfServicePortal"] = input.SelfServicePortal;
  }
  if (input.ClientConnectOptions != null) {
    const memberEntries = se_ClientConnectOptions(input.ClientConnectOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientConnectOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SessionTimeoutHours != null) {
    entries["SessionTimeoutHours"] = input.SessionTimeoutHours;
  }
  if (input.ClientLoginBannerOptions != null) {
    const memberEntries = se_ClientLoginBannerOptions(input.ClientLoginBannerOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientLoginBannerOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyDefaultCreditSpecificationRequest
 */
const se_ModifyDefaultCreditSpecificationRequest = (
  input: ModifyDefaultCreditSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceFamily != null) {
    entries["InstanceFamily"] = input.InstanceFamily;
  }
  if (input.CpuCredits != null) {
    entries["CpuCredits"] = input.CpuCredits;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyEbsDefaultKmsKeyIdRequest
 */
const se_ModifyEbsDefaultKmsKeyIdRequest = (input: ModifyEbsDefaultKmsKeyIdRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.KmsKeyId != null) {
    entries["KmsKeyId"] = input.KmsKeyId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyFleetRequest
 */
const se_ModifyFleetRequest = (input: ModifyFleetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ExcessCapacityTerminationPolicy != null) {
    entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
  }
  if (input.LaunchTemplateConfigs != null) {
    const memberEntries = se_FleetLaunchTemplateConfigListRequest(input.LaunchTemplateConfigs, context);
    if (input.LaunchTemplateConfigs?.length === 0) {
      entries.LaunchTemplateConfig = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.FleetId != null) {
    entries["FleetId"] = input.FleetId;
  }
  if (input.TargetCapacitySpecification != null) {
    const memberEntries = se_TargetCapacitySpecificationRequest(input.TargetCapacitySpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetCapacitySpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Context != null) {
    entries["Context"] = input.Context;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyFpgaImageAttributeRequest
 */
const se_ModifyFpgaImageAttributeRequest = (input: ModifyFpgaImageAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FpgaImageId != null) {
    entries["FpgaImageId"] = input.FpgaImageId;
  }
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.OperationType != null) {
    entries["OperationType"] = input.OperationType;
  }
  if (input.UserIds != null) {
    const memberEntries = se_UserIdStringList(input.UserIds, context);
    if (input.UserIds?.length === 0) {
      entries.UserId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.UserGroups != null) {
    const memberEntries = se_UserGroupStringList(input.UserGroups, context);
    if (input.UserGroups?.length === 0) {
      entries.UserGroup = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ProductCodes != null) {
    const memberEntries = se_ProductCodeStringList(input.ProductCodes, context);
    if (input.ProductCodes?.length === 0) {
      entries.ProductCode = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.LoadPermission != null) {
    const memberEntries = se_LoadPermissionModifications(input.LoadPermission, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadPermission.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyHostsRequest
 */
const se_ModifyHostsRequest = (input: ModifyHostsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AutoPlacement != null) {
    entries["AutoPlacement"] = input.AutoPlacement;
  }
  if (input.HostIds != null) {
    const memberEntries = se_RequestHostIdList(input.HostIds, context);
    if (input.HostIds?.length === 0) {
      entries.HostId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.HostRecovery != null) {
    entries["HostRecovery"] = input.HostRecovery;
  }
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.InstanceFamily != null) {
    entries["InstanceFamily"] = input.InstanceFamily;
  }
  if (input.HostMaintenance != null) {
    entries["HostMaintenance"] = input.HostMaintenance;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIdentityIdFormatRequest
 */
const se_ModifyIdentityIdFormatRequest = (input: ModifyIdentityIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.PrincipalArn != null) {
    entries["PrincipalArn"] = input.PrincipalArn;
  }
  if (input.Resource != null) {
    entries["Resource"] = input.Resource;
  }
  if (input.UseLongIds != null) {
    entries["UseLongIds"] = input.UseLongIds;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIdFormatRequest
 */
const se_ModifyIdFormatRequest = (input: ModifyIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Resource != null) {
    entries["Resource"] = input.Resource;
  }
  if (input.UseLongIds != null) {
    entries["UseLongIds"] = input.UseLongIds;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyImageAttributeRequest
 */
const se_ModifyImageAttributeRequest = (input: ModifyImageAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.Description != null) {
    const memberEntries = se_AttributeValue(input.Description, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Description.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.LaunchPermission != null) {
    const memberEntries = se_LaunchPermissionModifications(input.LaunchPermission, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchPermission.${key}`;
      entries[loc] = value;
    });
  }
  if (input.OperationType != null) {
    entries["OperationType"] = input.OperationType;
  }
  if (input.ProductCodes != null) {
    const memberEntries = se_ProductCodeStringList(input.ProductCodes, context);
    if (input.ProductCodes?.length === 0) {
      entries.ProductCode = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.UserGroups != null) {
    const memberEntries = se_UserGroupStringList(input.UserGroups, context);
    if (input.UserGroups?.length === 0) {
      entries.UserGroup = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.UserIds != null) {
    const memberEntries = se_UserIdStringList(input.UserIds, context);
    if (input.UserIds?.length === 0) {
      entries.UserId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.OrganizationArns != null) {
    const memberEntries = se_OrganizationArnStringList(input.OrganizationArns, context);
    if (input.OrganizationArns?.length === 0) {
      entries.OrganizationArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OrganizationArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.OrganizationalUnitArns != null) {
    const memberEntries = se_OrganizationalUnitArnStringList(input.OrganizationalUnitArns, context);
    if (input.OrganizationalUnitArns?.length === 0) {
      entries.OrganizationalUnitArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OrganizationalUnitArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ImdsSupport != null) {
    const memberEntries = se_AttributeValue(input.ImdsSupport, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImdsSupport.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceAttributeRequest
 */
const se_ModifyInstanceAttributeRequest = (input: ModifyInstanceAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SourceDestCheck != null) {
    const memberEntries = se_AttributeBooleanValue(input.SourceDestCheck, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceDestCheck.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.BlockDeviceMappings != null) {
    const memberEntries = se_InstanceBlockDeviceMappingSpecificationList(input.BlockDeviceMappings, context);
    if (input.BlockDeviceMappings?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DisableApiTermination != null) {
    const memberEntries = se_AttributeBooleanValue(input.DisableApiTermination, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisableApiTermination.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EbsOptimized != null) {
    const memberEntries = se_AttributeBooleanValue(input.EbsOptimized, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EbsOptimized.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnaSupport != null) {
    const memberEntries = se_AttributeBooleanValue(input.EnaSupport, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSupport.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Groups != null) {
    const memberEntries = se_GroupIdStringList(input.Groups, context);
    if (input.Groups?.length === 0) {
      entries.GroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.InstanceInitiatedShutdownBehavior != null) {
    const memberEntries = se_AttributeValue(input.InstanceInitiatedShutdownBehavior, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceInitiatedShutdownBehavior.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceType != null) {
    const memberEntries = se_AttributeValue(input.InstanceType, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Kernel != null) {
    const memberEntries = se_AttributeValue(input.Kernel, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Kernel.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Ramdisk != null) {
    const memberEntries = se_AttributeValue(input.Ramdisk, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ramdisk.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SriovNetSupport != null) {
    const memberEntries = se_AttributeValue(input.SriovNetSupport, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SriovNetSupport.${key}`;
      entries[loc] = value;
    });
  }
  if (input.UserData != null) {
    const memberEntries = se_BlobAttributeValue(input.UserData, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserData.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  if (input.DisableApiStop != null) {
    const memberEntries = se_AttributeBooleanValue(input.DisableApiStop, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisableApiStop.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceCapacityReservationAttributesRequest
 */
const se_ModifyInstanceCapacityReservationAttributesRequest = (
  input: ModifyInstanceCapacityReservationAttributesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.CapacityReservationSpecification != null) {
    const memberEntries = se_CapacityReservationSpecification(input.CapacityReservationSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceCreditSpecificationRequest
 */
const se_ModifyInstanceCreditSpecificationRequest = (
  input: ModifyInstanceCreditSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.InstanceCreditSpecifications != null) {
    const memberEntries = se_InstanceCreditSpecificationListRequest(input.InstanceCreditSpecifications, context);
    if (input.InstanceCreditSpecifications?.length === 0) {
      entries.InstanceCreditSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceCreditSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceEventStartTimeRequest
 */
const se_ModifyInstanceEventStartTimeRequest = (
  input: ModifyInstanceEventStartTimeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.InstanceEventId != null) {
    entries["InstanceEventId"] = input.InstanceEventId;
  }
  if (input.NotBefore != null) {
    entries["NotBefore"] = input.NotBefore.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceEventWindowRequest
 */
const se_ModifyInstanceEventWindowRequest = (input: ModifyInstanceEventWindowRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  if (input.InstanceEventWindowId != null) {
    entries["InstanceEventWindowId"] = input.InstanceEventWindowId;
  }
  if (input.TimeRanges != null) {
    const memberEntries = se_InstanceEventWindowTimeRangeRequestSet(input.TimeRanges, context);
    if (input.TimeRanges?.length === 0) {
      entries.TimeRange = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TimeRange.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.CronExpression != null) {
    entries["CronExpression"] = input.CronExpression;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceMaintenanceOptionsRequest
 */
const se_ModifyInstanceMaintenanceOptionsRequest = (
  input: ModifyInstanceMaintenanceOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.AutoRecovery != null) {
    entries["AutoRecovery"] = input.AutoRecovery;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceMetadataOptionsRequest
 */
const se_ModifyInstanceMetadataOptionsRequest = (
  input: ModifyInstanceMetadataOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.HttpTokens != null) {
    entries["HttpTokens"] = input.HttpTokens;
  }
  if (input.HttpPutResponseHopLimit != null) {
    entries["HttpPutResponseHopLimit"] = input.HttpPutResponseHopLimit;
  }
  if (input.HttpEndpoint != null) {
    entries["HttpEndpoint"] = input.HttpEndpoint;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.HttpProtocolIpv6 != null) {
    entries["HttpProtocolIpv6"] = input.HttpProtocolIpv6;
  }
  if (input.InstanceMetadataTags != null) {
    entries["InstanceMetadataTags"] = input.InstanceMetadataTags;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstancePlacementRequest
 */
const se_ModifyInstancePlacementRequest = (input: ModifyInstancePlacementRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Affinity != null) {
    entries["Affinity"] = input.Affinity;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.HostId != null) {
    entries["HostId"] = input.HostId;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.Tenancy != null) {
    entries["Tenancy"] = input.Tenancy;
  }
  if (input.PartitionNumber != null) {
    entries["PartitionNumber"] = input.PartitionNumber;
  }
  if (input.HostResourceGroupArn != null) {
    entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
  }
  if (input.GroupId != null) {
    entries["GroupId"] = input.GroupId;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIpamPoolRequest
 */
const se_ModifyIpamPoolRequest = (input: ModifyIpamPoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamPoolId != null) {
    entries["IpamPoolId"] = input.IpamPoolId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.AutoImport != null) {
    entries["AutoImport"] = input.AutoImport;
  }
  if (input.AllocationMinNetmaskLength != null) {
    entries["AllocationMinNetmaskLength"] = input.AllocationMinNetmaskLength;
  }
  if (input.AllocationMaxNetmaskLength != null) {
    entries["AllocationMaxNetmaskLength"] = input.AllocationMaxNetmaskLength;
  }
  if (input.AllocationDefaultNetmaskLength != null) {
    entries["AllocationDefaultNetmaskLength"] = input.AllocationDefaultNetmaskLength;
  }
  if (input.ClearAllocationDefaultNetmaskLength != null) {
    entries["ClearAllocationDefaultNetmaskLength"] = input.ClearAllocationDefaultNetmaskLength;
  }
  if (input.AddAllocationResourceTags != null) {
    const memberEntries = se_RequestIpamResourceTagList(input.AddAllocationResourceTags, context);
    if (input.AddAllocationResourceTags?.length === 0) {
      entries.AddAllocationResourceTag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddAllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveAllocationResourceTags != null) {
    const memberEntries = se_RequestIpamResourceTagList(input.RemoveAllocationResourceTags, context);
    if (input.RemoveAllocationResourceTags?.length === 0) {
      entries.RemoveAllocationResourceTag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveAllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIpamRequest
 */
const se_ModifyIpamRequest = (input: ModifyIpamRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamId != null) {
    entries["IpamId"] = input.IpamId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.AddOperatingRegions != null) {
    const memberEntries = se_AddIpamOperatingRegionSet(input.AddOperatingRegions, context);
    if (input.AddOperatingRegions?.length === 0) {
      entries.AddOperatingRegion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveOperatingRegions != null) {
    const memberEntries = se_RemoveIpamOperatingRegionSet(input.RemoveOperatingRegions, context);
    if (input.RemoveOperatingRegions?.length === 0) {
      entries.RemoveOperatingRegion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIpamResourceCidrRequest
 */
const se_ModifyIpamResourceCidrRequest = (input: ModifyIpamResourceCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ResourceId != null) {
    entries["ResourceId"] = input.ResourceId;
  }
  if (input.ResourceCidr != null) {
    entries["ResourceCidr"] = input.ResourceCidr;
  }
  if (input.ResourceRegion != null) {
    entries["ResourceRegion"] = input.ResourceRegion;
  }
  if (input.CurrentIpamScopeId != null) {
    entries["CurrentIpamScopeId"] = input.CurrentIpamScopeId;
  }
  if (input.DestinationIpamScopeId != null) {
    entries["DestinationIpamScopeId"] = input.DestinationIpamScopeId;
  }
  if (input.Monitored != null) {
    entries["Monitored"] = input.Monitored;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIpamResourceDiscoveryRequest
 */
const se_ModifyIpamResourceDiscoveryRequest = (
  input: ModifyIpamResourceDiscoveryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamResourceDiscoveryId != null) {
    entries["IpamResourceDiscoveryId"] = input.IpamResourceDiscoveryId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.AddOperatingRegions != null) {
    const memberEntries = se_AddIpamOperatingRegionSet(input.AddOperatingRegions, context);
    if (input.AddOperatingRegions?.length === 0) {
      entries.AddOperatingRegion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveOperatingRegions != null) {
    const memberEntries = se_RemoveIpamOperatingRegionSet(input.RemoveOperatingRegions, context);
    if (input.RemoveOperatingRegions?.length === 0) {
      entries.RemoveOperatingRegion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIpamScopeRequest
 */
const se_ModifyIpamScopeRequest = (input: ModifyIpamScopeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamScopeId != null) {
    entries["IpamScopeId"] = input.IpamScopeId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyLaunchTemplateRequest
 */
const se_ModifyLaunchTemplateRequest = (input: ModifyLaunchTemplateRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.LaunchTemplateId != null) {
    entries["LaunchTemplateId"] = input.LaunchTemplateId;
  }
  if (input.LaunchTemplateName != null) {
    entries["LaunchTemplateName"] = input.LaunchTemplateName;
  }
  if (input.DefaultVersion != null) {
    entries["SetDefaultVersion"] = input.DefaultVersion;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyLocalGatewayRouteRequest
 */
const se_ModifyLocalGatewayRouteRequest = (input: ModifyLocalGatewayRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.LocalGatewayRouteTableId != null) {
    entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
  }
  if (input.LocalGatewayVirtualInterfaceGroupId != null) {
    entries["LocalGatewayVirtualInterfaceGroupId"] = input.LocalGatewayVirtualInterfaceGroupId;
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.DestinationPrefixListId != null) {
    entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyManagedPrefixListRequest
 */
const se_ModifyManagedPrefixListRequest = (input: ModifyManagedPrefixListRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PrefixListId != null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.CurrentVersion != null) {
    entries["CurrentVersion"] = input.CurrentVersion;
  }
  if (input.PrefixListName != null) {
    entries["PrefixListName"] = input.PrefixListName;
  }
  if (input.AddEntries != null) {
    const memberEntries = se_AddPrefixListEntries(input.AddEntries, context);
    if (input.AddEntries?.length === 0) {
      entries.AddEntry = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddEntry.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveEntries != null) {
    const memberEntries = se_RemovePrefixListEntries(input.RemoveEntries, context);
    if (input.RemoveEntries?.length === 0) {
      entries.RemoveEntry = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveEntry.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxEntries != null) {
    entries["MaxEntries"] = input.MaxEntries;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyNetworkInterfaceAttributeRequest
 */
const se_ModifyNetworkInterfaceAttributeRequest = (
  input: ModifyNetworkInterfaceAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Attachment != null) {
    const memberEntries = se_NetworkInterfaceAttachmentChanges(input.Attachment, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Attachment.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Description != null) {
    const memberEntries = se_AttributeValue(input.Description, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Description.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Groups != null) {
    const memberEntries = se_SecurityGroupIdStringList(input.Groups, context);
    if (input.Groups?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.SourceDestCheck != null) {
    const memberEntries = se_AttributeBooleanValue(input.SourceDestCheck, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceDestCheck.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnaSrdSpecification != null) {
    const memberEntries = se_EnaSrdSpecification(input.EnaSrdSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnablePrimaryIpv6 != null) {
    entries["EnablePrimaryIpv6"] = input.EnablePrimaryIpv6;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyPrivateDnsNameOptionsRequest
 */
const se_ModifyPrivateDnsNameOptionsRequest = (
  input: ModifyPrivateDnsNameOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.PrivateDnsHostnameType != null) {
    entries["PrivateDnsHostnameType"] = input.PrivateDnsHostnameType;
  }
  if (input.EnableResourceNameDnsARecord != null) {
    entries["EnableResourceNameDnsARecord"] = input.EnableResourceNameDnsARecord;
  }
  if (input.EnableResourceNameDnsAAAARecord != null) {
    entries["EnableResourceNameDnsAAAARecord"] = input.EnableResourceNameDnsAAAARecord;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyReservedInstancesRequest
 */
const se_ModifyReservedInstancesRequest = (input: ModifyReservedInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ReservedInstancesIds != null) {
    const memberEntries = se_ReservedInstancesIdStringList(input.ReservedInstancesIds, context);
    if (input.ReservedInstancesIds?.length === 0) {
      entries.ReservedInstancesId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.TargetConfigurations != null) {
    const memberEntries = se_ReservedInstancesConfigurationList(input.TargetConfigurations, context);
    if (input.TargetConfigurations?.length === 0) {
      entries.ReservedInstancesConfigurationSetItemType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesConfigurationSetItemType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifySecurityGroupRulesRequest
 */
const se_ModifySecurityGroupRulesRequest = (input: ModifySecurityGroupRulesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.GroupId != null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.SecurityGroupRules != null) {
    const memberEntries = se_SecurityGroupRuleUpdateList(input.SecurityGroupRules, context);
    if (input.SecurityGroupRules?.length === 0) {
      entries.SecurityGroupRule = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRule.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifySnapshotAttributeRequest
 */
const se_ModifySnapshotAttributeRequest = (input: ModifySnapshotAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.CreateVolumePermission != null) {
    const memberEntries = se_CreateVolumePermissionModifications(input.CreateVolumePermission, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CreateVolumePermission.${key}`;
      entries[loc] = value;
    });
  }
  if (input.GroupNames != null) {
    const memberEntries = se_GroupNameStringList(input.GroupNames, context);
    if (input.GroupNames?.length === 0) {
      entries.UserGroup = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.OperationType != null) {
    entries["OperationType"] = input.OperationType;
  }
  if (input.SnapshotId != null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.UserIds != null) {
    const memberEntries = se_UserIdStringList(input.UserIds, context);
    if (input.UserIds?.length === 0) {
      entries.UserId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifySnapshotTierRequest
 */
const se_ModifySnapshotTierRequest = (input: ModifySnapshotTierRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SnapshotId != null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.StorageTier != null) {
    entries["StorageTier"] = input.StorageTier;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifySpotFleetRequestRequest
 */
const se_ModifySpotFleetRequestRequest = (input: ModifySpotFleetRequestRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ExcessCapacityTerminationPolicy != null) {
    entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
  }
  if (input.LaunchTemplateConfigs != null) {
    const memberEntries = se_LaunchTemplateConfigList(input.LaunchTemplateConfigs, context);
    if (input.LaunchTemplateConfigs?.length === 0) {
      entries.LaunchTemplateConfig = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SpotFleetRequestId != null) {
    entries["SpotFleetRequestId"] = input.SpotFleetRequestId;
  }
  if (input.TargetCapacity != null) {
    entries["TargetCapacity"] = input.TargetCapacity;
  }
  if (input.OnDemandTargetCapacity != null) {
    entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
  }
  if (input.Context != null) {
    entries["Context"] = input.Context;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifySubnetAttributeRequest
 */
const se_ModifySubnetAttributeRequest = (input: ModifySubnetAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AssignIpv6AddressOnCreation != null) {
    const memberEntries = se_AttributeBooleanValue(input.AssignIpv6AddressOnCreation, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssignIpv6AddressOnCreation.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MapPublicIpOnLaunch != null) {
    const memberEntries = se_AttributeBooleanValue(input.MapPublicIpOnLaunch, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MapPublicIpOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.MapCustomerOwnedIpOnLaunch != null) {
    const memberEntries = se_AttributeBooleanValue(input.MapCustomerOwnedIpOnLaunch, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MapCustomerOwnedIpOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CustomerOwnedIpv4Pool != null) {
    entries["CustomerOwnedIpv4Pool"] = input.CustomerOwnedIpv4Pool;
  }
  if (input.EnableDns64 != null) {
    const memberEntries = se_AttributeBooleanValue(input.EnableDns64, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableDns64.${key}`;
      entries[loc] = value;
    });
  }
  if (input.PrivateDnsHostnameTypeOnLaunch != null) {
    entries["PrivateDnsHostnameTypeOnLaunch"] = input.PrivateDnsHostnameTypeOnLaunch;
  }
  if (input.EnableResourceNameDnsARecordOnLaunch != null) {
    const memberEntries = se_AttributeBooleanValue(input.EnableResourceNameDnsARecordOnLaunch, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableResourceNameDnsARecordOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnableResourceNameDnsAAAARecordOnLaunch != null) {
    const memberEntries = se_AttributeBooleanValue(input.EnableResourceNameDnsAAAARecordOnLaunch, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableResourceNameDnsAAAARecordOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnableLniAtDeviceIndex != null) {
    entries["EnableLniAtDeviceIndex"] = input.EnableLniAtDeviceIndex;
  }
  if (input.DisableLniAtDeviceIndex != null) {
    const memberEntries = se_AttributeBooleanValue(input.DisableLniAtDeviceIndex, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisableLniAtDeviceIndex.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesRequest
 */
const se_ModifyTrafficMirrorFilterNetworkServicesRequest = (
  input: ModifyTrafficMirrorFilterNetworkServicesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorFilterId != null) {
    entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
  }
  if (input.AddNetworkServices != null) {
    const memberEntries = se_TrafficMirrorNetworkServiceList(input.AddNetworkServices, context);
    if (input.AddNetworkServices?.length === 0) {
      entries.AddNetworkService = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddNetworkService.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveNetworkServices != null) {
    const memberEntries = se_TrafficMirrorNetworkServiceList(input.RemoveNetworkServices, context);
    if (input.RemoveNetworkServices?.length === 0) {
      entries.RemoveNetworkService = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveNetworkService.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTrafficMirrorFilterRuleRequest
 */
const se_ModifyTrafficMirrorFilterRuleRequest = (
  input: ModifyTrafficMirrorFilterRuleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorFilterRuleId != null) {
    entries["TrafficMirrorFilterRuleId"] = input.TrafficMirrorFilterRuleId;
  }
  if (input.TrafficDirection != null) {
    entries["TrafficDirection"] = input.TrafficDirection;
  }
  if (input.RuleNumber != null) {
    entries["RuleNumber"] = input.RuleNumber;
  }
  if (input.RuleAction != null) {
    entries["RuleAction"] = input.RuleAction;
  }
  if (input.DestinationPortRange != null) {
    const memberEntries = se_TrafficMirrorPortRangeRequest(input.DestinationPortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SourcePortRange != null) {
    const memberEntries = se_TrafficMirrorPortRangeRequest(input.SourcePortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Protocol != null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.SourceCidrBlock != null) {
    entries["SourceCidrBlock"] = input.SourceCidrBlock;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.RemoveFields != null) {
    const memberEntries = se_TrafficMirrorFilterRuleFieldList(input.RemoveFields, context);
    if (input.RemoveFields?.length === 0) {
      entries.RemoveField = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTrafficMirrorSessionRequest
 */
const se_ModifyTrafficMirrorSessionRequest = (
  input: ModifyTrafficMirrorSessionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TrafficMirrorSessionId != null) {
    entries["TrafficMirrorSessionId"] = input.TrafficMirrorSessionId;
  }
  if (input.TrafficMirrorTargetId != null) {
    entries["TrafficMirrorTargetId"] = input.TrafficMirrorTargetId;
  }
  if (input.TrafficMirrorFilterId != null) {
    entries["TrafficMirrorFilterId"] = input.TrafficMirrorFilterId;
  }
  if (input.PacketLength != null) {
    entries["PacketLength"] = input.PacketLength;
  }
  if (input.SessionNumber != null) {
    entries["SessionNumber"] = input.SessionNumber;
  }
  if (input.VirtualNetworkId != null) {
    entries["VirtualNetworkId"] = input.VirtualNetworkId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.RemoveFields != null) {
    const memberEntries = se_TrafficMirrorSessionFieldList(input.RemoveFields, context);
    if (input.RemoveFields?.length === 0) {
      entries.RemoveField = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTransitGatewayOptions
 */
const se_ModifyTransitGatewayOptions = (input: ModifyTransitGatewayOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AddTransitGatewayCidrBlocks != null) {
    const memberEntries = se_TransitGatewayCidrBlockStringList(input.AddTransitGatewayCidrBlocks, context);
    if (input.AddTransitGatewayCidrBlocks?.length === 0) {
      entries.AddTransitGatewayCidrBlocks = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveTransitGatewayCidrBlocks != null) {
    const memberEntries = se_TransitGatewayCidrBlockStringList(input.RemoveTransitGatewayCidrBlocks, context);
    if (input.RemoveTransitGatewayCidrBlocks?.length === 0) {
      entries.RemoveTransitGatewayCidrBlocks = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.VpnEcmpSupport != null) {
    entries["VpnEcmpSupport"] = input.VpnEcmpSupport;
  }
  if (input.DnsSupport != null) {
    entries["DnsSupport"] = input.DnsSupport;
  }
  if (input.AutoAcceptSharedAttachments != null) {
    entries["AutoAcceptSharedAttachments"] = input.AutoAcceptSharedAttachments;
  }
  if (input.DefaultRouteTableAssociation != null) {
    entries["DefaultRouteTableAssociation"] = input.DefaultRouteTableAssociation;
  }
  if (input.AssociationDefaultRouteTableId != null) {
    entries["AssociationDefaultRouteTableId"] = input.AssociationDefaultRouteTableId;
  }
  if (input.DefaultRouteTablePropagation != null) {
    entries["DefaultRouteTablePropagation"] = input.DefaultRouteTablePropagation;
  }
  if (input.PropagationDefaultRouteTableId != null) {
    entries["PropagationDefaultRouteTableId"] = input.PropagationDefaultRouteTableId;
  }
  if (input.AmazonSideAsn != null) {
    entries["AmazonSideAsn"] = input.AmazonSideAsn;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTransitGatewayPrefixListReferenceRequest
 */
const se_ModifyTransitGatewayPrefixListReferenceRequest = (
  input: ModifyTransitGatewayPrefixListReferenceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.PrefixListId != null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.Blackhole != null) {
    entries["Blackhole"] = input.Blackhole;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTransitGatewayRequest
 */
const se_ModifyTransitGatewayRequest = (input: ModifyTransitGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.TransitGatewayId != null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.Options != null) {
    const memberEntries = se_ModifyTransitGatewayOptions(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequest
 */
const se_ModifyTransitGatewayVpcAttachmentRequest = (
  input: ModifyTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.AddSubnetIds != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input.AddSubnetIds, context);
    if (input.AddSubnetIds?.length === 0) {
      entries.AddSubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveSubnetIds != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input.RemoveSubnetIds, context);
    if (input.RemoveSubnetIds?.length === 0) {
      entries.RemoveSubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Options != null) {
    const memberEntries = se_ModifyTransitGatewayVpcAttachmentRequestOptions(input.Options, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequestOptions
 */
const se_ModifyTransitGatewayVpcAttachmentRequestOptions = (
  input: ModifyTransitGatewayVpcAttachmentRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DnsSupport != null) {
    entries["DnsSupport"] = input.DnsSupport;
  }
  if (input.Ipv6Support != null) {
    entries["Ipv6Support"] = input.Ipv6Support;
  }
  if (input.ApplianceModeSupport != null) {
    entries["ApplianceModeSupport"] = input.ApplianceModeSupport;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointEniOptions
 */
const se_ModifyVerifiedAccessEndpointEniOptions = (
  input: ModifyVerifiedAccessEndpointEniOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Protocol != null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.Port != null) {
    entries["Port"] = input.Port;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointLoadBalancerOptions
 */
const se_ModifyVerifiedAccessEndpointLoadBalancerOptions = (
  input: ModifyVerifiedAccessEndpointLoadBalancerOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.SubnetIds != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointSubnetIdList(input.SubnetIds, context);
    if (input.SubnetIds?.length === 0) {
      entries.SubnetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Protocol != null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.Port != null) {
    entries["Port"] = input.Port;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointPolicyRequest
 */
const se_ModifyVerifiedAccessEndpointPolicyRequest = (
  input: ModifyVerifiedAccessEndpointPolicyRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessEndpointId != null) {
    entries["VerifiedAccessEndpointId"] = input.VerifiedAccessEndpointId;
  }
  if (input.PolicyEnabled != null) {
    entries["PolicyEnabled"] = input.PolicyEnabled;
  }
  if (input.PolicyDocument != null) {
    entries["PolicyDocument"] = input.PolicyDocument;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SseSpecification != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input.SseSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointRequest
 */
const se_ModifyVerifiedAccessEndpointRequest = (
  input: ModifyVerifiedAccessEndpointRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessEndpointId != null) {
    entries["VerifiedAccessEndpointId"] = input.VerifiedAccessEndpointId;
  }
  if (input.VerifiedAccessGroupId != null) {
    entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
  }
  if (input.LoadBalancerOptions != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointLoadBalancerOptions(input.LoadBalancerOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancerOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceOptions != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointEniOptions(input.NetworkInterfaceOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointSubnetIdList
 */
const se_ModifyVerifiedAccessEndpointSubnetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessGroupPolicyRequest
 */
const se_ModifyVerifiedAccessGroupPolicyRequest = (
  input: ModifyVerifiedAccessGroupPolicyRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessGroupId != null) {
    entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
  }
  if (input.PolicyEnabled != null) {
    entries["PolicyEnabled"] = input.PolicyEnabled;
  }
  if (input.PolicyDocument != null) {
    entries["PolicyDocument"] = input.PolicyDocument;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SseSpecification != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input.SseSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessGroupRequest
 */
const se_ModifyVerifiedAccessGroupRequest = (input: ModifyVerifiedAccessGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VerifiedAccessGroupId != null) {
    entries["VerifiedAccessGroupId"] = input.VerifiedAccessGroupId;
  }
  if (input.VerifiedAccessInstanceId != null) {
    entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessInstanceLoggingConfigurationRequest
 */
const se_ModifyVerifiedAccessInstanceLoggingConfigurationRequest = (
  input: ModifyVerifiedAccessInstanceLoggingConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessInstanceId != null) {
    entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
  }
  if (input.AccessLogs != null) {
    const memberEntries = se_VerifiedAccessLogOptions(input.AccessLogs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AccessLogs.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessInstanceRequest
 */
const se_ModifyVerifiedAccessInstanceRequest = (
  input: ModifyVerifiedAccessInstanceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessInstanceId != null) {
    entries["VerifiedAccessInstanceId"] = input.VerifiedAccessInstanceId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessTrustProviderOidcOptions
 */
const se_ModifyVerifiedAccessTrustProviderOidcOptions = (
  input: ModifyVerifiedAccessTrustProviderOidcOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Issuer != null) {
    entries["Issuer"] = input.Issuer;
  }
  if (input.AuthorizationEndpoint != null) {
    entries["AuthorizationEndpoint"] = input.AuthorizationEndpoint;
  }
  if (input.TokenEndpoint != null) {
    entries["TokenEndpoint"] = input.TokenEndpoint;
  }
  if (input.UserInfoEndpoint != null) {
    entries["UserInfoEndpoint"] = input.UserInfoEndpoint;
  }
  if (input.ClientId != null) {
    entries["ClientId"] = input.ClientId;
  }
  if (input.ClientSecret != null) {
    entries["ClientSecret"] = input.ClientSecret;
  }
  if (input.Scope != null) {
    entries["Scope"] = input.Scope;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessTrustProviderRequest
 */
const se_ModifyVerifiedAccessTrustProviderRequest = (
  input: ModifyVerifiedAccessTrustProviderRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VerifiedAccessTrustProviderId != null) {
    entries["VerifiedAccessTrustProviderId"] = input.VerifiedAccessTrustProviderId;
  }
  if (input.OidcOptions != null) {
    const memberEntries = se_ModifyVerifiedAccessTrustProviderOidcOptions(input.OidcOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OidcOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.SseSpecification != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input.SseSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVolumeAttributeRequest
 */
const se_ModifyVolumeAttributeRequest = (input: ModifyVolumeAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AutoEnableIO != null) {
    const memberEntries = se_AttributeBooleanValue(input.AutoEnableIO, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AutoEnableIO.${key}`;
      entries[loc] = value;
    });
  }
  if (input.VolumeId != null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVolumeRequest
 */
const se_ModifyVolumeRequest = (input: ModifyVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VolumeId != null) {
    entries["VolumeId"] = input.VolumeId;
  }
  if (input.Size != null) {
    entries["Size"] = input.Size;
  }
  if (input.VolumeType != null) {
    entries["VolumeType"] = input.VolumeType;
  }
  if (input.Iops != null) {
    entries["Iops"] = input.Iops;
  }
  if (input.Throughput != null) {
    entries["Throughput"] = input.Throughput;
  }
  if (input.MultiAttachEnabled != null) {
    entries["MultiAttachEnabled"] = input.MultiAttachEnabled;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcAttributeRequest
 */
const se_ModifyVpcAttributeRequest = (input: ModifyVpcAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.EnableDnsHostnames != null) {
    const memberEntries = se_AttributeBooleanValue(input.EnableDnsHostnames, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableDnsHostnames.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnableDnsSupport != null) {
    const memberEntries = se_AttributeBooleanValue(input.EnableDnsSupport, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableDnsSupport.${key}`;
      entries[loc] = value;
    });
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.EnableNetworkAddressUsageMetrics != null) {
    const memberEntries = se_AttributeBooleanValue(input.EnableNetworkAddressUsageMetrics, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableNetworkAddressUsageMetrics.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcEndpointConnectionNotificationRequest
 */
const se_ModifyVpcEndpointConnectionNotificationRequest = (
  input: ModifyVpcEndpointConnectionNotificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ConnectionNotificationId != null) {
    entries["ConnectionNotificationId"] = input.ConnectionNotificationId;
  }
  if (input.ConnectionNotificationArn != null) {
    entries["ConnectionNotificationArn"] = input.ConnectionNotificationArn;
  }
  if (input.ConnectionEvents != null) {
    const memberEntries = se_ValueStringList(input.ConnectionEvents, context);
    if (input.ConnectionEvents?.length === 0) {
      entries.ConnectionEvents = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcEndpointRequest
 */
const se_ModifyVpcEndpointRequest = (input: ModifyVpcEndpointRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcEndpointId != null) {
    entries["VpcEndpointId"] = input.VpcEndpointId;
  }
  if (input.ResetPolicy != null) {
    entries["ResetPolicy"] = input.ResetPolicy;
  }
  if (input.PolicyDocument != null) {
    entries["PolicyDocument"] = input.PolicyDocument;
  }
  if (input.AddRouteTableIds != null) {
    const memberEntries = se_VpcEndpointRouteTableIdList(input.AddRouteTableIds, context);
    if (input.AddRouteTableIds?.length === 0) {
      entries.AddRouteTableId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveRouteTableIds != null) {
    const memberEntries = se_VpcEndpointRouteTableIdList(input.RemoveRouteTableIds, context);
    if (input.RemoveRouteTableIds?.length === 0) {
      entries.RemoveRouteTableId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AddSubnetIds != null) {
    const memberEntries = se_VpcEndpointSubnetIdList(input.AddSubnetIds, context);
    if (input.AddSubnetIds?.length === 0) {
      entries.AddSubnetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveSubnetIds != null) {
    const memberEntries = se_VpcEndpointSubnetIdList(input.RemoveSubnetIds, context);
    if (input.RemoveSubnetIds?.length === 0) {
      entries.RemoveSubnetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AddSecurityGroupIds != null) {
    const memberEntries = se_VpcEndpointSecurityGroupIdList(input.AddSecurityGroupIds, context);
    if (input.AddSecurityGroupIds?.length === 0) {
      entries.AddSecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveSecurityGroupIds != null) {
    const memberEntries = se_VpcEndpointSecurityGroupIdList(input.RemoveSecurityGroupIds, context);
    if (input.RemoveSecurityGroupIds?.length === 0) {
      entries.RemoveSecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.IpAddressType != null) {
    entries["IpAddressType"] = input.IpAddressType;
  }
  if (input.DnsOptions != null) {
    const memberEntries = se_DnsOptionsSpecification(input.DnsOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.PrivateDnsEnabled != null) {
    entries["PrivateDnsEnabled"] = input.PrivateDnsEnabled;
  }
  if (input.SubnetConfigurations != null) {
    const memberEntries = se_SubnetConfigurationsList(input.SubnetConfigurations, context);
    if (input.SubnetConfigurations?.length === 0) {
      entries.SubnetConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcEndpointServiceConfigurationRequest
 */
const se_ModifyVpcEndpointServiceConfigurationRequest = (
  input: ModifyVpcEndpointServiceConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId != null) {
    entries["ServiceId"] = input.ServiceId;
  }
  if (input.PrivateDnsName != null) {
    entries["PrivateDnsName"] = input.PrivateDnsName;
  }
  if (input.RemovePrivateDnsName != null) {
    entries["RemovePrivateDnsName"] = input.RemovePrivateDnsName;
  }
  if (input.AcceptanceRequired != null) {
    entries["AcceptanceRequired"] = input.AcceptanceRequired;
  }
  if (input.AddNetworkLoadBalancerArns != null) {
    const memberEntries = se_ValueStringList(input.AddNetworkLoadBalancerArns, context);
    if (input.AddNetworkLoadBalancerArns?.length === 0) {
      entries.AddNetworkLoadBalancerArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveNetworkLoadBalancerArns != null) {
    const memberEntries = se_ValueStringList(input.RemoveNetworkLoadBalancerArns, context);
    if (input.RemoveNetworkLoadBalancerArns?.length === 0) {
      entries.RemoveNetworkLoadBalancerArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AddGatewayLoadBalancerArns != null) {
    const memberEntries = se_ValueStringList(input.AddGatewayLoadBalancerArns, context);
    if (input.AddGatewayLoadBalancerArns?.length === 0) {
      entries.AddGatewayLoadBalancerArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveGatewayLoadBalancerArns != null) {
    const memberEntries = se_ValueStringList(input.RemoveGatewayLoadBalancerArns, context);
    if (input.RemoveGatewayLoadBalancerArns?.length === 0) {
      entries.RemoveGatewayLoadBalancerArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AddSupportedIpAddressTypes != null) {
    const memberEntries = se_ValueStringList(input.AddSupportedIpAddressTypes, context);
    if (input.AddSupportedIpAddressTypes?.length === 0) {
      entries.AddSupportedIpAddressType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveSupportedIpAddressTypes != null) {
    const memberEntries = se_ValueStringList(input.RemoveSupportedIpAddressTypes, context);
    if (input.RemoveSupportedIpAddressTypes?.length === 0) {
      entries.RemoveSupportedIpAddressType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityRequest
 */
const se_ModifyVpcEndpointServicePayerResponsibilityRequest = (
  input: ModifyVpcEndpointServicePayerResponsibilityRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId != null) {
    entries["ServiceId"] = input.ServiceId;
  }
  if (input.PayerResponsibility != null) {
    entries["PayerResponsibility"] = input.PayerResponsibility;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcEndpointServicePermissionsRequest
 */
const se_ModifyVpcEndpointServicePermissionsRequest = (
  input: ModifyVpcEndpointServicePermissionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId != null) {
    entries["ServiceId"] = input.ServiceId;
  }
  if (input.AddAllowedPrincipals != null) {
    const memberEntries = se_ValueStringList(input.AddAllowedPrincipals, context);
    if (input.AddAllowedPrincipals?.length === 0) {
      entries.AddAllowedPrincipals = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RemoveAllowedPrincipals != null) {
    const memberEntries = se_ValueStringList(input.RemoveAllowedPrincipals, context);
    if (input.RemoveAllowedPrincipals?.length === 0) {
      entries.RemoveAllowedPrincipals = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcPeeringConnectionOptionsRequest
 */
const se_ModifyVpcPeeringConnectionOptionsRequest = (
  input: ModifyVpcPeeringConnectionOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AccepterPeeringConnectionOptions != null) {
    const memberEntries = se_PeeringConnectionOptionsRequest(input.AccepterPeeringConnectionOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AccepterPeeringConnectionOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.RequesterPeeringConnectionOptions != null) {
    const memberEntries = se_PeeringConnectionOptionsRequest(input.RequesterPeeringConnectionOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RequesterPeeringConnectionOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.VpcPeeringConnectionId != null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcTenancyRequest
 */
const se_ModifyVpcTenancyRequest = (input: ModifyVpcTenancyRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.InstanceTenancy != null) {
    entries["InstanceTenancy"] = input.InstanceTenancy;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpnConnectionOptionsRequest
 */
const se_ModifyVpnConnectionOptionsRequest = (
  input: ModifyVpnConnectionOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpnConnectionId != null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  if (input.LocalIpv4NetworkCidr != null) {
    entries["LocalIpv4NetworkCidr"] = input.LocalIpv4NetworkCidr;
  }
  if (input.RemoteIpv4NetworkCidr != null) {
    entries["RemoteIpv4NetworkCidr"] = input.RemoteIpv4NetworkCidr;
  }
  if (input.LocalIpv6NetworkCidr != null) {
    entries["LocalIpv6NetworkCidr"] = input.LocalIpv6NetworkCidr;
  }
  if (input.RemoteIpv6NetworkCidr != null) {
    entries["RemoteIpv6NetworkCidr"] = input.RemoteIpv6NetworkCidr;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpnConnectionRequest
 */
const se_ModifyVpnConnectionRequest = (input: ModifyVpnConnectionRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpnConnectionId != null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  if (input.TransitGatewayId != null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.CustomerGatewayId != null) {
    entries["CustomerGatewayId"] = input.CustomerGatewayId;
  }
  if (input.VpnGatewayId != null) {
    entries["VpnGatewayId"] = input.VpnGatewayId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpnTunnelCertificateRequest
 */
const se_ModifyVpnTunnelCertificateRequest = (
  input: ModifyVpnTunnelCertificateRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.VpnConnectionId != null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  if (input.VpnTunnelOutsideIpAddress != null) {
    entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpnTunnelOptionsRequest
 */
const se_ModifyVpnTunnelOptionsRequest = (input: ModifyVpnTunnelOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpnConnectionId != null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  if (input.VpnTunnelOutsideIpAddress != null) {
    entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
  }
  if (input.TunnelOptions != null) {
    const memberEntries = se_ModifyVpnTunnelOptionsSpecification(input.TunnelOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TunnelOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SkipTunnelReplacement != null) {
    entries["SkipTunnelReplacement"] = input.SkipTunnelReplacement;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpnTunnelOptionsSpecification
 */
const se_ModifyVpnTunnelOptionsSpecification = (
  input: ModifyVpnTunnelOptionsSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TunnelInsideCidr != null) {
    entries["TunnelInsideCidr"] = input.TunnelInsideCidr;
  }
  if (input.TunnelInsideIpv6Cidr != null) {
    entries["TunnelInsideIpv6Cidr"] = input.TunnelInsideIpv6Cidr;
  }
  if (input.PreSharedKey != null) {
    entries["PreSharedKey"] = input.PreSharedKey;
  }
  if (input.Phase1LifetimeSeconds != null) {
    entries["Phase1LifetimeSeconds"] = input.Phase1LifetimeSeconds;
  }
  if (input.Phase2LifetimeSeconds != null) {
    entries["Phase2LifetimeSeconds"] = input.Phase2LifetimeSeconds;
  }
  if (input.RekeyMarginTimeSeconds != null) {
    entries["RekeyMarginTimeSeconds"] = input.RekeyMarginTimeSeconds;
  }
  if (input.RekeyFuzzPercentage != null) {
    entries["RekeyFuzzPercentage"] = input.RekeyFuzzPercentage;
  }
  if (input.ReplayWindowSize != null) {
    entries["ReplayWindowSize"] = input.ReplayWindowSize;
  }
  if (input.DPDTimeoutSeconds != null) {
    entries["DPDTimeoutSeconds"] = input.DPDTimeoutSeconds;
  }
  if (input.DPDTimeoutAction != null) {
    entries["DPDTimeoutAction"] = input.DPDTimeoutAction;
  }
  if (input.Phase1EncryptionAlgorithms != null) {
    const memberEntries = se_Phase1EncryptionAlgorithmsRequestList(input.Phase1EncryptionAlgorithms, context);
    if (input.Phase1EncryptionAlgorithms?.length === 0) {
      entries.Phase1EncryptionAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase2EncryptionAlgorithms != null) {
    const memberEntries = se_Phase2EncryptionAlgorithmsRequestList(input.Phase2EncryptionAlgorithms, context);
    if (input.Phase2EncryptionAlgorithms?.length === 0) {
      entries.Phase2EncryptionAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase1IntegrityAlgorithms != null) {
    const memberEntries = se_Phase1IntegrityAlgorithmsRequestList(input.Phase1IntegrityAlgorithms, context);
    if (input.Phase1IntegrityAlgorithms?.length === 0) {
      entries.Phase1IntegrityAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase2IntegrityAlgorithms != null) {
    const memberEntries = se_Phase2IntegrityAlgorithmsRequestList(input.Phase2IntegrityAlgorithms, context);
    if (input.Phase2IntegrityAlgorithms?.length === 0) {
      entries.Phase2IntegrityAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase1DHGroupNumbers != null) {
    const memberEntries = se_Phase1DHGroupNumbersRequestList(input.Phase1DHGroupNumbers, context);
    if (input.Phase1DHGroupNumbers?.length === 0) {
      entries.Phase1DHGroupNumber = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase2DHGroupNumbers != null) {
    const memberEntries = se_Phase2DHGroupNumbersRequestList(input.Phase2DHGroupNumbers, context);
    if (input.Phase2DHGroupNumbers?.length === 0) {
      entries.Phase2DHGroupNumber = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.IKEVersions != null) {
    const memberEntries = se_IKEVersionsRequestList(input.IKEVersions, context);
    if (input.IKEVersions?.length === 0) {
      entries.IKEVersion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.StartupAction != null) {
    entries["StartupAction"] = input.StartupAction;
  }
  if (input.LogOptions != null) {
    const memberEntries = se_VpnTunnelLogOptionsSpecification(input.LogOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnableTunnelLifecycleControl != null) {
    entries["EnableTunnelLifecycleControl"] = input.EnableTunnelLifecycleControl;
  }
  return entries;
};

/**
 * serializeAws_ec2MonitorInstancesRequest
 */
const se_MonitorInstancesRequest = (input: MonitorInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceIds != null) {
    const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
    if (input.InstanceIds?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2MoveAddressToVpcRequest
 */
const se_MoveAddressToVpcRequest = (input: MoveAddressToVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PublicIp != null) {
    entries["PublicIp"] = input.PublicIp;
  }
  return entries;
};

/**
 * serializeAws_ec2MoveByoipCidrToIpamRequest
 */
const se_MoveByoipCidrToIpamRequest = (input: MoveByoipCidrToIpamRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.IpamPoolId != null) {
    entries["IpamPoolId"] = input.IpamPoolId;
  }
  if (input.IpamPoolOwner != null) {
    entries["IpamPoolOwner"] = input.IpamPoolOwner;
  }
  return entries;
};

/**
 * serializeAws_ec2NatGatewayIdStringList
 */
const se_NatGatewayIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkAclIdStringList
 */
const se_NetworkAclIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkBandwidthGbps
 */
const se_NetworkBandwidthGbps = (input: NetworkBandwidthGbps, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = __serializeFloat(input.Min);
  }
  if (input.Max != null) {
    entries["Max"] = __serializeFloat(input.Max);
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkBandwidthGbpsRequest
 */
const se_NetworkBandwidthGbpsRequest = (input: NetworkBandwidthGbpsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = __serializeFloat(input.Min);
  }
  if (input.Max != null) {
    entries["Max"] = __serializeFloat(input.Max);
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInsightsAccessScopeAnalysisIdList
 */
const se_NetworkInsightsAccessScopeAnalysisIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInsightsAccessScopeIdList
 */
const se_NetworkInsightsAccessScopeIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInsightsAnalysisIdList
 */
const se_NetworkInsightsAnalysisIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInsightsPathIdList
 */
const se_NetworkInsightsPathIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInterfaceAttachmentChanges
 */
const se_NetworkInterfaceAttachmentChanges = (
  input: NetworkInterfaceAttachmentChanges,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AttachmentId != null) {
    entries["AttachmentId"] = input.AttachmentId;
  }
  if (input.DeleteOnTermination != null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInterfaceCount
 */
const se_NetworkInterfaceCount = (input: NetworkInterfaceCount, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = input.Min;
  }
  if (input.Max != null) {
    entries["Max"] = input.Max;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInterfaceCountRequest
 */
const se_NetworkInterfaceCountRequest = (input: NetworkInterfaceCountRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = input.Min;
  }
  if (input.Max != null) {
    entries["Max"] = input.Max;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInterfaceIdList
 */
const se_NetworkInterfaceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInterfacePermissionIdList
 */
const se_NetworkInterfacePermissionIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NewDhcpConfiguration
 */
const se_NewDhcpConfiguration = (input: NewDhcpConfiguration, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Key != null) {
    entries["Key"] = input.Key;
  }
  if (input.Values != null) {
    const memberEntries = se_ValueStringList(input.Values, context);
    if (input.Values?.length === 0) {
      entries.Value = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2NewDhcpConfigurationList
 */
const se_NewDhcpConfigurationList = (input: NewDhcpConfiguration[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_NewDhcpConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2OccurrenceDayRequestSet
 */
const se_OccurrenceDayRequestSet = (input: number[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`OccurenceDay.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2OnDemandOptionsRequest
 */
const se_OnDemandOptionsRequest = (input: OnDemandOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationStrategy != null) {
    entries["AllocationStrategy"] = input.AllocationStrategy;
  }
  if (input.CapacityReservationOptions != null) {
    const memberEntries = se_CapacityReservationOptionsRequest(input.CapacityReservationOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SingleInstanceType != null) {
    entries["SingleInstanceType"] = input.SingleInstanceType;
  }
  if (input.SingleAvailabilityZone != null) {
    entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
  }
  if (input.MinTargetCapacity != null) {
    entries["MinTargetCapacity"] = input.MinTargetCapacity;
  }
  if (input.MaxTotalPrice != null) {
    entries["MaxTotalPrice"] = input.MaxTotalPrice;
  }
  return entries;
};

/**
 * serializeAws_ec2OrganizationalUnitArnStringList
 */
const se_OrganizationalUnitArnStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`OrganizationalUnitArn.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2OrganizationArnStringList
 */
const se_OrganizationArnStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`OrganizationArn.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2OwnerStringList
 */
const se_OwnerStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Owner.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PacketHeaderStatementRequest
 */
const se_PacketHeaderStatementRequest = (input: PacketHeaderStatementRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SourceAddresses != null) {
    const memberEntries = se_ValueStringList(input.SourceAddresses, context);
    if (input.SourceAddresses?.length === 0) {
      entries.SourceAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DestinationAddresses != null) {
    const memberEntries = se_ValueStringList(input.DestinationAddresses, context);
    if (input.DestinationAddresses?.length === 0) {
      entries.DestinationAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SourcePorts != null) {
    const memberEntries = se_ValueStringList(input.SourcePorts, context);
    if (input.SourcePorts?.length === 0) {
      entries.SourcePort = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePort.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DestinationPorts != null) {
    const memberEntries = se_ValueStringList(input.DestinationPorts, context);
    if (input.DestinationPorts?.length === 0) {
      entries.DestinationPort = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPort.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SourcePrefixLists != null) {
    const memberEntries = se_ValueStringList(input.SourcePrefixLists, context);
    if (input.SourcePrefixLists?.length === 0) {
      entries.SourcePrefixList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePrefixList.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DestinationPrefixLists != null) {
    const memberEntries = se_ValueStringList(input.DestinationPrefixLists, context);
    if (input.DestinationPrefixLists?.length === 0) {
      entries.DestinationPrefixList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPrefixList.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Protocols != null) {
    const memberEntries = se_ProtocolList(input.Protocols, context);
    if (input.Protocols?.length === 0) {
      entries.Protocol = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Protocol.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2PathRequestFilter
 */
const se_PathRequestFilter = (input: PathRequestFilter, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SourceAddress != null) {
    entries["SourceAddress"] = input.SourceAddress;
  }
  if (input.SourcePortRange != null) {
    const memberEntries = se_RequestFilterPortRange(input.SourcePortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DestinationAddress != null) {
    entries["DestinationAddress"] = input.DestinationAddress;
  }
  if (input.DestinationPortRange != null) {
    const memberEntries = se_RequestFilterPortRange(input.DestinationPortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPortRange.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2PathStatementRequest
 */
const se_PathStatementRequest = (input: PathStatementRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.PacketHeaderStatement != null) {
    const memberEntries = se_PacketHeaderStatementRequest(input.PacketHeaderStatement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PacketHeaderStatement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ResourceStatement != null) {
    const memberEntries = se_ResourceStatementRequest(input.ResourceStatement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceStatement.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2PeeringConnectionOptionsRequest
 */
const se_PeeringConnectionOptionsRequest = (input: PeeringConnectionOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllowDnsResolutionFromRemoteVpc != null) {
    entries["AllowDnsResolutionFromRemoteVpc"] = input.AllowDnsResolutionFromRemoteVpc;
  }
  if (input.AllowEgressFromLocalClassicLinkToRemoteVpc != null) {
    entries["AllowEgressFromLocalClassicLinkToRemoteVpc"] = input.AllowEgressFromLocalClassicLinkToRemoteVpc;
  }
  if (input.AllowEgressFromLocalVpcToRemoteClassicLink != null) {
    entries["AllowEgressFromLocalVpcToRemoteClassicLink"] = input.AllowEgressFromLocalVpcToRemoteClassicLink;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase1DHGroupNumbersRequestList
 */
const se_Phase1DHGroupNumbersRequestList = (
  input: Phase1DHGroupNumbersRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase1DHGroupNumbersRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase1DHGroupNumbersRequestListValue
 */
const se_Phase1DHGroupNumbersRequestListValue = (
  input: Phase1DHGroupNumbersRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase1EncryptionAlgorithmsRequestList
 */
const se_Phase1EncryptionAlgorithmsRequestList = (
  input: Phase1EncryptionAlgorithmsRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase1EncryptionAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase1EncryptionAlgorithmsRequestListValue
 */
const se_Phase1EncryptionAlgorithmsRequestListValue = (
  input: Phase1EncryptionAlgorithmsRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase1IntegrityAlgorithmsRequestList
 */
const se_Phase1IntegrityAlgorithmsRequestList = (
  input: Phase1IntegrityAlgorithmsRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase1IntegrityAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase1IntegrityAlgorithmsRequestListValue
 */
const se_Phase1IntegrityAlgorithmsRequestListValue = (
  input: Phase1IntegrityAlgorithmsRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase2DHGroupNumbersRequestList
 */
const se_Phase2DHGroupNumbersRequestList = (
  input: Phase2DHGroupNumbersRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase2DHGroupNumbersRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase2DHGroupNumbersRequestListValue
 */
const se_Phase2DHGroupNumbersRequestListValue = (
  input: Phase2DHGroupNumbersRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase2EncryptionAlgorithmsRequestList
 */
const se_Phase2EncryptionAlgorithmsRequestList = (
  input: Phase2EncryptionAlgorithmsRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase2EncryptionAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase2EncryptionAlgorithmsRequestListValue
 */
const se_Phase2EncryptionAlgorithmsRequestListValue = (
  input: Phase2EncryptionAlgorithmsRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase2IntegrityAlgorithmsRequestList
 */
const se_Phase2IntegrityAlgorithmsRequestList = (
  input: Phase2IntegrityAlgorithmsRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase2IntegrityAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase2IntegrityAlgorithmsRequestListValue
 */
const se_Phase2IntegrityAlgorithmsRequestListValue = (
  input: Phase2IntegrityAlgorithmsRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

/**
 * serializeAws_ec2Placement
 */
const se_Placement = (input: Placement, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.Affinity != null) {
    entries["Affinity"] = input.Affinity;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.PartitionNumber != null) {
    entries["PartitionNumber"] = input.PartitionNumber;
  }
  if (input.HostId != null) {
    entries["HostId"] = input.HostId;
  }
  if (input.Tenancy != null) {
    entries["Tenancy"] = input.Tenancy;
  }
  if (input.SpreadDomain != null) {
    entries["SpreadDomain"] = input.SpreadDomain;
  }
  if (input.HostResourceGroupArn != null) {
    entries["HostResourceGroupArn"] = input.HostResourceGroupArn;
  }
  if (input.GroupId != null) {
    entries["GroupId"] = input.GroupId;
  }
  return entries;
};

/**
 * serializeAws_ec2PlacementGroupIdStringList
 */
const se_PlacementGroupIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`GroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PlacementGroupStringList
 */
const se_PlacementGroupStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PortRange
 */
const se_PortRange = (input: PortRange, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.From != null) {
    entries["From"] = input.From;
  }
  if (input.To != null) {
    entries["To"] = input.To;
  }
  return entries;
};

/**
 * serializeAws_ec2PrefixListId
 */
const se_PrefixListId = (input: PrefixListId, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.PrefixListId != null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  return entries;
};

/**
 * serializeAws_ec2PrefixListIdList
 */
const se_PrefixListIdList = (input: PrefixListId[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PrefixListId(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PrefixListResourceIdStringList
 */
const se_PrefixListResourceIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PriceScheduleSpecification
 */
const se_PriceScheduleSpecification = (input: PriceScheduleSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CurrencyCode != null) {
    entries["CurrencyCode"] = input.CurrencyCode;
  }
  if (input.Price != null) {
    entries["Price"] = __serializeFloat(input.Price);
  }
  if (input.Term != null) {
    entries["Term"] = input.Term;
  }
  return entries;
};

/**
 * serializeAws_ec2PriceScheduleSpecificationList
 */
const se_PriceScheduleSpecificationList = (input: PriceScheduleSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PriceScheduleSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PrivateDnsNameOptionsRequest
 */
const se_PrivateDnsNameOptionsRequest = (input: PrivateDnsNameOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.HostnameType != null) {
    entries["HostnameType"] = input.HostnameType;
  }
  if (input.EnableResourceNameDnsARecord != null) {
    entries["EnableResourceNameDnsARecord"] = input.EnableResourceNameDnsARecord;
  }
  if (input.EnableResourceNameDnsAAAARecord != null) {
    entries["EnableResourceNameDnsAAAARecord"] = input.EnableResourceNameDnsAAAARecord;
  }
  return entries;
};

/**
 * serializeAws_ec2PrivateIpAddressConfigSet
 */
const se_PrivateIpAddressConfigSet = (
  input: ScheduledInstancesPrivateIpAddressConfig[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ScheduledInstancesPrivateIpAddressConfig(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`PrivateIpAddressConfigSet.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PrivateIpAddressSpecification
 */
const se_PrivateIpAddressSpecification = (input: PrivateIpAddressSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Primary != null) {
    entries["Primary"] = input.Primary;
  }
  if (input.PrivateIpAddress != null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  return entries;
};

/**
 * serializeAws_ec2PrivateIpAddressSpecificationList
 */
const se_PrivateIpAddressSpecificationList = (input: PrivateIpAddressSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PrivateIpAddressSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PrivateIpAddressStringList
 */
const se_PrivateIpAddressStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`PrivateIpAddress.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ProductCodeStringList
 */
const se_ProductCodeStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ProductCode.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ProductDescriptionList
 */
const se_ProductDescriptionList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ProtocolList
 */
const se_ProtocolList = (input: Protocol[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ProvisionByoipCidrRequest
 */
const se_ProvisionByoipCidrRequest = (input: ProvisionByoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.CidrAuthorizationContext != null) {
    const memberEntries = se_CidrAuthorizationContext(input.CidrAuthorizationContext, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CidrAuthorizationContext.${key}`;
      entries[loc] = value;
    });
  }
  if (input.PubliclyAdvertisable != null) {
    entries["PubliclyAdvertisable"] = input.PubliclyAdvertisable;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PoolTagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.PoolTagSpecifications, context);
    if (input.PoolTagSpecifications?.length === 0) {
      entries.PoolTagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolTagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MultiRegion != null) {
    entries["MultiRegion"] = input.MultiRegion;
  }
  return entries;
};

/**
 * serializeAws_ec2ProvisionIpamPoolCidrRequest
 */
const se_ProvisionIpamPoolCidrRequest = (input: ProvisionIpamPoolCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamPoolId != null) {
    entries["IpamPoolId"] = input.IpamPoolId;
  }
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.CidrAuthorizationContext != null) {
    const memberEntries = se_IpamCidrAuthorizationContext(input.CidrAuthorizationContext, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CidrAuthorizationContext.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NetmaskLength != null) {
    entries["NetmaskLength"] = input.NetmaskLength;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2ProvisionPublicIpv4PoolCidrRequest
 */
const se_ProvisionPublicIpv4PoolCidrRequest = (
  input: ProvisionPublicIpv4PoolCidrRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamPoolId != null) {
    entries["IpamPoolId"] = input.IpamPoolId;
  }
  if (input.PoolId != null) {
    entries["PoolId"] = input.PoolId;
  }
  if (input.NetmaskLength != null) {
    entries["NetmaskLength"] = input.NetmaskLength;
  }
  return entries;
};

/**
 * serializeAws_ec2PublicIpStringList
 */
const se_PublicIpStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`PublicIp.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PublicIpv4PoolIdStringList
 */
const se_PublicIpv4PoolIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PurchaseHostReservationRequest
 */
const se_PurchaseHostReservationRequest = (input: PurchaseHostReservationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.CurrencyCode != null) {
    entries["CurrencyCode"] = input.CurrencyCode;
  }
  if (input.HostIdSet != null) {
    const memberEntries = se_RequestHostIdSet(input.HostIdSet, context);
    if (input.HostIdSet?.length === 0) {
      entries.HostIdSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.LimitPrice != null) {
    entries["LimitPrice"] = input.LimitPrice;
  }
  if (input.OfferingId != null) {
    entries["OfferingId"] = input.OfferingId;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2PurchaseRequest
 */
const se_PurchaseRequest = (input: PurchaseRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceCount != null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.PurchaseToken != null) {
    entries["PurchaseToken"] = input.PurchaseToken;
  }
  return entries;
};

/**
 * serializeAws_ec2PurchaseRequestSet
 */
const se_PurchaseRequestSet = (input: PurchaseRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PurchaseRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`PurchaseRequest.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PurchaseReservedInstancesOfferingRequest
 */
const se_PurchaseReservedInstancesOfferingRequest = (
  input: PurchaseReservedInstancesOfferingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceCount != null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.ReservedInstancesOfferingId != null) {
    entries["ReservedInstancesOfferingId"] = input.ReservedInstancesOfferingId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.LimitPrice != null) {
    const memberEntries = se_ReservedInstanceLimitPrice(input.LimitPrice, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LimitPrice.${key}`;
      entries[loc] = value;
    });
  }
  if (input.PurchaseTime != null) {
    entries["PurchaseTime"] = input.PurchaseTime.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2PurchaseScheduledInstancesRequest
 */
const se_PurchaseScheduledInstancesRequest = (
  input: PurchaseScheduledInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PurchaseRequests != null) {
    const memberEntries = se_PurchaseRequestSet(input.PurchaseRequests, context);
    if (input.PurchaseRequests?.length === 0) {
      entries.PurchaseRequest = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PurchaseRequest.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ReasonCodesList
 */
const se_ReasonCodesList = (input: ReportInstanceReasonCodes[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RebootInstancesRequest
 */
const se_RebootInstancesRequest = (input: RebootInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceIds != null) {
    const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
    if (input.InstanceIds?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2RegionNames
 */
const se_RegionNames = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RegionNameStringList
 */
const se_RegionNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`RegionName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RegisterImageRequest
 */
const se_RegisterImageRequest = (input: RegisterImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ImageLocation != null) {
    entries["ImageLocation"] = input.ImageLocation;
  }
  if (input.Architecture != null) {
    entries["Architecture"] = input.Architecture;
  }
  if (input.BlockDeviceMappings != null) {
    const memberEntries = se_BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
    if (input.BlockDeviceMappings?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EnaSupport != null) {
    entries["EnaSupport"] = input.EnaSupport;
  }
  if (input.KernelId != null) {
    entries["KernelId"] = input.KernelId;
  }
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  if (input.BillingProducts != null) {
    const memberEntries = se_BillingProductList(input.BillingProducts, context);
    if (input.BillingProducts?.length === 0) {
      entries.BillingProduct = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BillingProduct.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.RamdiskId != null) {
    entries["RamdiskId"] = input.RamdiskId;
  }
  if (input.RootDeviceName != null) {
    entries["RootDeviceName"] = input.RootDeviceName;
  }
  if (input.SriovNetSupport != null) {
    entries["SriovNetSupport"] = input.SriovNetSupport;
  }
  if (input.VirtualizationType != null) {
    entries["VirtualizationType"] = input.VirtualizationType;
  }
  if (input.BootMode != null) {
    entries["BootMode"] = input.BootMode;
  }
  if (input.TpmSupport != null) {
    entries["TpmSupport"] = input.TpmSupport;
  }
  if (input.UefiData != null) {
    entries["UefiData"] = input.UefiData;
  }
  if (input.ImdsSupport != null) {
    entries["ImdsSupport"] = input.ImdsSupport;
  }
  return entries;
};

/**
 * serializeAws_ec2RegisterInstanceEventNotificationAttributesRequest
 */
const se_RegisterInstanceEventNotificationAttributesRequest = (
  input: RegisterInstanceEventNotificationAttributesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceTagAttribute != null) {
    const memberEntries = se_RegisterInstanceTagAttributeRequest(input.InstanceTagAttribute, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagAttribute.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2RegisterInstanceTagAttributeRequest
 */
const se_RegisterInstanceTagAttributeRequest = (
  input: RegisterInstanceTagAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.IncludeAllTagsOfInstance != null) {
    entries["IncludeAllTagsOfInstance"] = input.IncludeAllTagsOfInstance;
  }
  if (input.InstanceTagKeys != null) {
    const memberEntries = se_InstanceTagKeySet(input.InstanceTagKeys, context);
    if (input.InstanceTagKeys?.length === 0) {
      entries.InstanceTagKey = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersRequest
 */
const se_RegisterTransitGatewayMulticastGroupMembersRequest = (
  input: RegisterTransitGatewayMulticastGroupMembersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId != null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.GroupIpAddress != null) {
    entries["GroupIpAddress"] = input.GroupIpAddress;
  }
  if (input.NetworkInterfaceIds != null) {
    const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
    if (input.NetworkInterfaceIds?.length === 0) {
      entries.NetworkInterfaceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesRequest
 */
const se_RegisterTransitGatewayMulticastGroupSourcesRequest = (
  input: RegisterTransitGatewayMulticastGroupSourcesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId != null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.GroupIpAddress != null) {
    entries["GroupIpAddress"] = input.GroupIpAddress;
  }
  if (input.NetworkInterfaceIds != null) {
    const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input.NetworkInterfaceIds, context);
    if (input.NetworkInterfaceIds?.length === 0) {
      entries.NetworkInterfaceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsRequest
 */
const se_RejectTransitGatewayMulticastDomainAssociationsRequest = (
  input: RejectTransitGatewayMulticastDomainAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId != null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.SubnetIds != null) {
    const memberEntries = se_ValueStringList(input.SubnetIds, context);
    if (input.SubnetIds?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2RejectTransitGatewayPeeringAttachmentRequest
 */
const se_RejectTransitGatewayPeeringAttachmentRequest = (
  input: RejectTransitGatewayPeeringAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2RejectTransitGatewayVpcAttachmentRequest
 */
const se_RejectTransitGatewayVpcAttachmentRequest = (
  input: RejectTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2RejectVpcEndpointConnectionsRequest
 */
const se_RejectVpcEndpointConnectionsRequest = (
  input: RejectVpcEndpointConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId != null) {
    entries["ServiceId"] = input.ServiceId;
  }
  if (input.VpcEndpointIds != null) {
    const memberEntries = se_VpcEndpointIdList(input.VpcEndpointIds, context);
    if (input.VpcEndpointIds?.length === 0) {
      entries.VpcEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2RejectVpcPeeringConnectionRequest
 */
const se_RejectVpcPeeringConnectionRequest = (
  input: RejectVpcPeeringConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcPeeringConnectionId != null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  return entries;
};

/**
 * serializeAws_ec2ReleaseAddressRequest
 */
const se_ReleaseAddressRequest = (input: ReleaseAddressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationId != null) {
    entries["AllocationId"] = input.AllocationId;
  }
  if (input.PublicIp != null) {
    entries["PublicIp"] = input.PublicIp;
  }
  if (input.NetworkBorderGroup != null) {
    entries["NetworkBorderGroup"] = input.NetworkBorderGroup;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ReleaseHostsRequest
 */
const se_ReleaseHostsRequest = (input: ReleaseHostsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.HostIds != null) {
    const memberEntries = se_RequestHostIdList(input.HostIds, context);
    if (input.HostIds?.length === 0) {
      entries.HostId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ReleaseIpamPoolAllocationRequest
 */
const se_ReleaseIpamPoolAllocationRequest = (input: ReleaseIpamPoolAllocationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.IpamPoolId != null) {
    entries["IpamPoolId"] = input.IpamPoolId;
  }
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.IpamPoolAllocationId != null) {
    entries["IpamPoolAllocationId"] = input.IpamPoolAllocationId;
  }
  return entries;
};

/**
 * serializeAws_ec2RemoveIpamOperatingRegion
 */
const se_RemoveIpamOperatingRegion = (input: RemoveIpamOperatingRegion, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.RegionName != null) {
    entries["RegionName"] = input.RegionName;
  }
  return entries;
};

/**
 * serializeAws_ec2RemoveIpamOperatingRegionSet
 */
const se_RemoveIpamOperatingRegionSet = (input: RemoveIpamOperatingRegion[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RemoveIpamOperatingRegion(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RemovePrefixListEntries
 */
const se_RemovePrefixListEntries = (input: RemovePrefixListEntry[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RemovePrefixListEntry(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RemovePrefixListEntry
 */
const se_RemovePrefixListEntry = (input: RemovePrefixListEntry, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceIamInstanceProfileAssociationRequest
 */
const se_ReplaceIamInstanceProfileAssociationRequest = (
  input: ReplaceIamInstanceProfileAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.IamInstanceProfile != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input.IamInstanceProfile, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.AssociationId != null) {
    entries["AssociationId"] = input.AssociationId;
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceNetworkAclAssociationRequest
 */
const se_ReplaceNetworkAclAssociationRequest = (
  input: ReplaceNetworkAclAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationId != null) {
    entries["AssociationId"] = input.AssociationId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkAclId != null) {
    entries["NetworkAclId"] = input.NetworkAclId;
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceNetworkAclEntryRequest
 */
const se_ReplaceNetworkAclEntryRequest = (input: ReplaceNetworkAclEntryRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CidrBlock != null) {
    entries["CidrBlock"] = input.CidrBlock;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Egress != null) {
    entries["Egress"] = input.Egress;
  }
  if (input.IcmpTypeCode != null) {
    const memberEntries = se_IcmpTypeCode(input.IcmpTypeCode, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Icmp.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6CidrBlock != null) {
    entries["Ipv6CidrBlock"] = input.Ipv6CidrBlock;
  }
  if (input.NetworkAclId != null) {
    entries["NetworkAclId"] = input.NetworkAclId;
  }
  if (input.PortRange != null) {
    const memberEntries = se_PortRange(input.PortRange, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Protocol != null) {
    entries["Protocol"] = input.Protocol;
  }
  if (input.RuleAction != null) {
    entries["RuleAction"] = input.RuleAction;
  }
  if (input.RuleNumber != null) {
    entries["RuleNumber"] = input.RuleNumber;
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceRootVolumeTaskIds
 */
const se_ReplaceRootVolumeTaskIds = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReplaceRootVolumeTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceRouteRequest
 */
const se_ReplaceRouteRequest = (input: ReplaceRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.DestinationIpv6CidrBlock != null) {
    entries["DestinationIpv6CidrBlock"] = input.DestinationIpv6CidrBlock;
  }
  if (input.DestinationPrefixListId != null) {
    entries["DestinationPrefixListId"] = input.DestinationPrefixListId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.VpcEndpointId != null) {
    entries["VpcEndpointId"] = input.VpcEndpointId;
  }
  if (input.EgressOnlyInternetGatewayId != null) {
    entries["EgressOnlyInternetGatewayId"] = input.EgressOnlyInternetGatewayId;
  }
  if (input.GatewayId != null) {
    entries["GatewayId"] = input.GatewayId;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.LocalTarget != null) {
    entries["LocalTarget"] = input.LocalTarget;
  }
  if (input.NatGatewayId != null) {
    entries["NatGatewayId"] = input.NatGatewayId;
  }
  if (input.TransitGatewayId != null) {
    entries["TransitGatewayId"] = input.TransitGatewayId;
  }
  if (input.LocalGatewayId != null) {
    entries["LocalGatewayId"] = input.LocalGatewayId;
  }
  if (input.CarrierGatewayId != null) {
    entries["CarrierGatewayId"] = input.CarrierGatewayId;
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.RouteTableId != null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  if (input.VpcPeeringConnectionId != null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  if (input.CoreNetworkArn != null) {
    entries["CoreNetworkArn"] = input.CoreNetworkArn;
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceRouteTableAssociationRequest
 */
const se_ReplaceRouteTableAssociationRequest = (
  input: ReplaceRouteTableAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociationId != null) {
    entries["AssociationId"] = input.AssociationId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.RouteTableId != null) {
    entries["RouteTableId"] = input.RouteTableId;
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceTransitGatewayRouteRequest
 */
const se_ReplaceTransitGatewayRouteRequest = (
  input: ReplaceTransitGatewayRouteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DestinationCidrBlock != null) {
    entries["DestinationCidrBlock"] = input.DestinationCidrBlock;
  }
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.TransitGatewayAttachmentId != null) {
    entries["TransitGatewayAttachmentId"] = input.TransitGatewayAttachmentId;
  }
  if (input.Blackhole != null) {
    entries["Blackhole"] = input.Blackhole;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceVpnTunnelRequest
 */
const se_ReplaceVpnTunnelRequest = (input: ReplaceVpnTunnelRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.VpnConnectionId != null) {
    entries["VpnConnectionId"] = input.VpnConnectionId;
  }
  if (input.VpnTunnelOutsideIpAddress != null) {
    entries["VpnTunnelOutsideIpAddress"] = input.VpnTunnelOutsideIpAddress;
  }
  if (input.ApplyPendingMaintenance != null) {
    entries["ApplyPendingMaintenance"] = input.ApplyPendingMaintenance;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ReportInstanceStatusRequest
 */
const se_ReportInstanceStatusRequest = (input: ReportInstanceStatusRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EndTime != null) {
    entries["EndTime"] = input.EndTime.toISOString().split(".")[0] + "Z";
  }
  if (input.Instances != null) {
    const memberEntries = se_InstanceIdStringList(input.Instances, context);
    if (input.Instances?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ReasonCodes != null) {
    const memberEntries = se_ReasonCodesList(input.ReasonCodes, context);
    if (input.ReasonCodes?.length === 0) {
      entries.ReasonCode = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReasonCode.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.StartTime != null) {
    entries["StartTime"] = input.StartTime.toISOString().split(".")[0] + "Z";
  }
  if (input.Status != null) {
    entries["Status"] = input.Status;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestFilterPortRange
 */
const se_RequestFilterPortRange = (input: RequestFilterPortRange, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.FromPort != null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.ToPort != null) {
    entries["ToPort"] = input.ToPort;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestHostIdList
 */
const se_RequestHostIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestHostIdSet
 */
const se_RequestHostIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestInstanceTypeList
 */
const se_RequestInstanceTypeList = (input: _InstanceType[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestIpamResourceTag
 */
const se_RequestIpamResourceTag = (input: RequestIpamResourceTag, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Key != null) {
    entries["Key"] = input.Key;
  }
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestIpamResourceTagList
 */
const se_RequestIpamResourceTagList = (input: RequestIpamResourceTag[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RequestIpamResourceTag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestLaunchTemplateData
 */
const se_RequestLaunchTemplateData = (input: RequestLaunchTemplateData, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.KernelId != null) {
    entries["KernelId"] = input.KernelId;
  }
  if (input.EbsOptimized != null) {
    entries["EbsOptimized"] = input.EbsOptimized;
  }
  if (input.IamInstanceProfile != null) {
    const memberEntries = se_LaunchTemplateIamInstanceProfileSpecificationRequest(input.IamInstanceProfile, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.BlockDeviceMappings != null) {
    const memberEntries = se_LaunchTemplateBlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
    if (input.BlockDeviceMappings?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaces != null) {
    const memberEntries = se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList(
      input.NetworkInterfaces,
      context
    );
    if (input.NetworkInterfaces?.length === 0) {
      entries.NetworkInterface = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.KeyName != null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.Monitoring != null) {
    const memberEntries = se_LaunchTemplatesMonitoringRequest(input.Monitoring, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Placement != null) {
    const memberEntries = se_LaunchTemplatePlacementRequest(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.RamDiskId != null) {
    entries["RamDiskId"] = input.RamDiskId;
  }
  if (input.DisableApiTermination != null) {
    entries["DisableApiTermination"] = input.DisableApiTermination;
  }
  if (input.InstanceInitiatedShutdownBehavior != null) {
    entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
  }
  if (input.UserData != null) {
    entries["UserData"] = input.UserData;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_LaunchTemplateTagSpecificationRequestList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ElasticGpuSpecifications != null) {
    const memberEntries = se_ElasticGpuSpecificationList(input.ElasticGpuSpecifications, context);
    if (input.ElasticGpuSpecifications?.length === 0) {
      entries.ElasticGpuSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ElasticInferenceAccelerators != null) {
    const memberEntries = se_LaunchTemplateElasticInferenceAcceleratorList(input.ElasticInferenceAccelerators, context);
    if (input.ElasticInferenceAccelerators?.length === 0) {
      entries.ElasticInferenceAccelerator = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroupIds != null) {
    const memberEntries = se_SecurityGroupIdStringList(input.SecurityGroupIds, context);
    if (input.SecurityGroupIds?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroups != null) {
    const memberEntries = se_SecurityGroupStringList(input.SecurityGroups, context);
    if (input.SecurityGroups?.length === 0) {
      entries.SecurityGroup = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceMarketOptions != null) {
    const memberEntries = se_LaunchTemplateInstanceMarketOptionsRequest(input.InstanceMarketOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceMarketOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CreditSpecification != null) {
    const memberEntries = se_CreditSpecificationRequest(input.CreditSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CreditSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CpuOptions != null) {
    const memberEntries = se_LaunchTemplateCpuOptionsRequest(input.CpuOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CapacityReservationSpecification != null) {
    const memberEntries = se_LaunchTemplateCapacityReservationSpecificationRequest(
      input.CapacityReservationSpecification,
      context
    );
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.LicenseSpecifications != null) {
    const memberEntries = se_LaunchTemplateLicenseSpecificationListRequest(input.LicenseSpecifications, context);
    if (input.LicenseSpecifications?.length === 0) {
      entries.LicenseSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.HibernationOptions != null) {
    const memberEntries = se_LaunchTemplateHibernationOptionsRequest(input.HibernationOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HibernationOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MetadataOptions != null) {
    const memberEntries = se_LaunchTemplateInstanceMetadataOptionsRequest(input.MetadataOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetadataOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnclaveOptions != null) {
    const memberEntries = se_LaunchTemplateEnclaveOptionsRequest(input.EnclaveOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnclaveOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceRequirements != null) {
    const memberEntries = se_InstanceRequirementsRequest(input.InstanceRequirements, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  if (input.PrivateDnsNameOptions != null) {
    const memberEntries = se_LaunchTemplatePrivateDnsNameOptionsRequest(input.PrivateDnsNameOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateDnsNameOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MaintenanceOptions != null) {
    const memberEntries = se_LaunchTemplateInstanceMaintenanceOptionsRequest(input.MaintenanceOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MaintenanceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DisableApiStop != null) {
    entries["DisableApiStop"] = input.DisableApiStop;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestSpotFleetRequest
 */
const se_RequestSpotFleetRequest = (input: RequestSpotFleetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SpotFleetRequestConfig != null) {
    const memberEntries = se_SpotFleetRequestConfigData(input.SpotFleetRequestConfig, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotFleetRequestConfig.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2RequestSpotInstancesRequest
 */
const se_RequestSpotInstancesRequest = (input: RequestSpotInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZoneGroup != null) {
    entries["AvailabilityZoneGroup"] = input.AvailabilityZoneGroup;
  }
  if (input.BlockDurationMinutes != null) {
    entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceCount != null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.LaunchGroup != null) {
    entries["LaunchGroup"] = input.LaunchGroup;
  }
  if (input.LaunchSpecification != null) {
    const memberEntries = se_RequestSpotLaunchSpecification(input.LaunchSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.SpotPrice != null) {
    entries["SpotPrice"] = input.SpotPrice;
  }
  if (input.Type != null) {
    entries["Type"] = input.Type;
  }
  if (input.ValidFrom != null) {
    entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
  }
  if (input.ValidUntil != null) {
    entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceInterruptionBehavior != null) {
    entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestSpotLaunchSpecification
 */
const se_RequestSpotLaunchSpecification = (input: RequestSpotLaunchSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SecurityGroupIds != null) {
    const memberEntries = se_RequestSpotLaunchSpecificationSecurityGroupIdList(input.SecurityGroupIds, context);
    if (input.SecurityGroupIds?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroups != null) {
    const memberEntries = se_RequestSpotLaunchSpecificationSecurityGroupList(input.SecurityGroups, context);
    if (input.SecurityGroups?.length === 0) {
      entries.SecurityGroup = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AddressingType != null) {
    entries["AddressingType"] = input.AddressingType;
  }
  if (input.BlockDeviceMappings != null) {
    const memberEntries = se_BlockDeviceMappingList(input.BlockDeviceMappings, context);
    if (input.BlockDeviceMappings?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.EbsOptimized != null) {
    entries["EbsOptimized"] = input.EbsOptimized;
  }
  if (input.IamInstanceProfile != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input.IamInstanceProfile, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.KernelId != null) {
    entries["KernelId"] = input.KernelId;
  }
  if (input.KeyName != null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.Monitoring != null) {
    const memberEntries = se_RunInstancesMonitoringEnabled(input.Monitoring, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaces != null) {
    const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
    if (input.NetworkInterfaces?.length === 0) {
      entries.NetworkInterface = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Placement != null) {
    const memberEntries = se_SpotPlacement(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.RamdiskId != null) {
    entries["RamdiskId"] = input.RamdiskId;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.UserData != null) {
    entries["UserData"] = input.UserData;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupIdList
 */
const se_RequestSpotLaunchSpecificationSecurityGroupIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupList
 */
const se_RequestSpotLaunchSpecificationSecurityGroupList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservationFleetInstanceSpecification
 */
const se_ReservationFleetInstanceSpecification = (
  input: ReservationFleetInstanceSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.InstancePlatform != null) {
    entries["InstancePlatform"] = input.InstancePlatform;
  }
  if (input.Weight != null) {
    entries["Weight"] = __serializeFloat(input.Weight);
  }
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.AvailabilityZoneId != null) {
    entries["AvailabilityZoneId"] = input.AvailabilityZoneId;
  }
  if (input.EbsOptimized != null) {
    entries["EbsOptimized"] = input.EbsOptimized;
  }
  if (input.Priority != null) {
    entries["Priority"] = input.Priority;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservationFleetInstanceSpecificationList
 */
const se_ReservationFleetInstanceSpecificationList = (
  input: ReservationFleetInstanceSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ReservationFleetInstanceSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstanceIdSet
 */
const se_ReservedInstanceIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReservedInstanceId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstanceLimitPrice
 */
const se_ReservedInstanceLimitPrice = (input: ReservedInstanceLimitPrice, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Amount != null) {
    entries["Amount"] = __serializeFloat(input.Amount);
  }
  if (input.CurrencyCode != null) {
    entries["CurrencyCode"] = input.CurrencyCode;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstancesConfiguration
 */
const se_ReservedInstancesConfiguration = (input: ReservedInstancesConfiguration, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.InstanceCount != null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.Platform != null) {
    entries["Platform"] = input.Platform;
  }
  if (input.Scope != null) {
    entries["Scope"] = input.Scope;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstancesConfigurationList
 */
const se_ReservedInstancesConfigurationList = (
  input: ReservedInstancesConfiguration[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ReservedInstancesConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstancesIdStringList
 */
const se_ReservedInstancesIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReservedInstancesId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstancesModificationIdStringList
 */
const se_ReservedInstancesModificationIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReservedInstancesModificationId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstancesOfferingIdStringList
 */
const se_ReservedInstancesOfferingIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ResetAddressAttributeRequest
 */
const se_ResetAddressAttributeRequest = (input: ResetAddressAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationId != null) {
    entries["AllocationId"] = input.AllocationId;
  }
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ResetEbsDefaultKmsKeyIdRequest
 */
const se_ResetEbsDefaultKmsKeyIdRequest = (input: ResetEbsDefaultKmsKeyIdRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ResetFpgaImageAttributeRequest
 */
const se_ResetFpgaImageAttributeRequest = (input: ResetFpgaImageAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.FpgaImageId != null) {
    entries["FpgaImageId"] = input.FpgaImageId;
  }
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  return entries;
};

/**
 * serializeAws_ec2ResetImageAttributeRequest
 */
const se_ResetImageAttributeRequest = (input: ResetImageAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ResetInstanceAttributeRequest
 */
const se_ResetInstanceAttributeRequest = (input: ResetInstanceAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  return entries;
};

/**
 * serializeAws_ec2ResetNetworkInterfaceAttributeRequest
 */
const se_ResetNetworkInterfaceAttributeRequest = (
  input: ResetNetworkInterfaceAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.SourceDestCheck != null) {
    entries["SourceDestCheck"] = input.SourceDestCheck;
  }
  return entries;
};

/**
 * serializeAws_ec2ResetSnapshotAttributeRequest
 */
const se_ResetSnapshotAttributeRequest = (input: ResetSnapshotAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Attribute != null) {
    entries["Attribute"] = input.Attribute;
  }
  if (input.SnapshotId != null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ResourceIdList
 */
const se_ResourceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ResourceList
 */
const se_ResourceList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ResourceStatementRequest
 */
const se_ResourceStatementRequest = (input: ResourceStatementRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Resources != null) {
    const memberEntries = se_ValueStringList(input.Resources, context);
    if (input.Resources?.length === 0) {
      entries.Resource = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Resource.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ResourceTypes != null) {
    const memberEntries = se_ValueStringList(input.ResourceTypes, context);
    if (input.ResourceTypes?.length === 0) {
      entries.ResourceType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2RestorableByStringList
 */
const se_RestorableByStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RestoreAddressToClassicRequest
 */
const se_RestoreAddressToClassicRequest = (input: RestoreAddressToClassicRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PublicIp != null) {
    entries["PublicIp"] = input.PublicIp;
  }
  return entries;
};

/**
 * serializeAws_ec2RestoreImageFromRecycleBinRequest
 */
const se_RestoreImageFromRecycleBinRequest = (
  input: RestoreImageFromRecycleBinRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2RestoreManagedPrefixListVersionRequest
 */
const se_RestoreManagedPrefixListVersionRequest = (
  input: RestoreManagedPrefixListVersionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.PrefixListId != null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.PreviousVersion != null) {
    entries["PreviousVersion"] = input.PreviousVersion;
  }
  if (input.CurrentVersion != null) {
    entries["CurrentVersion"] = input.CurrentVersion;
  }
  return entries;
};

/**
 * serializeAws_ec2RestoreSnapshotFromRecycleBinRequest
 */
const se_RestoreSnapshotFromRecycleBinRequest = (
  input: RestoreSnapshotFromRecycleBinRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.SnapshotId != null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2RestoreSnapshotTierRequest
 */
const se_RestoreSnapshotTierRequest = (input: RestoreSnapshotTierRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SnapshotId != null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.TemporaryRestoreDays != null) {
    entries["TemporaryRestoreDays"] = input.TemporaryRestoreDays;
  }
  if (input.PermanentRestore != null) {
    entries["PermanentRestore"] = input.PermanentRestore;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2RevokeClientVpnIngressRequest
 */
const se_RevokeClientVpnIngressRequest = (input: RevokeClientVpnIngressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.TargetNetworkCidr != null) {
    entries["TargetNetworkCidr"] = input.TargetNetworkCidr;
  }
  if (input.AccessGroupId != null) {
    entries["AccessGroupId"] = input.AccessGroupId;
  }
  if (input.RevokeAllGroups != null) {
    entries["RevokeAllGroups"] = input.RevokeAllGroups;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2RevokeSecurityGroupEgressRequest
 */
const se_RevokeSecurityGroupEgressRequest = (input: RevokeSecurityGroupEgressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupId != null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.IpPermissions != null) {
    const memberEntries = se_IpPermissionList(input.IpPermissions, context);
    if (input.IpPermissions?.length === 0) {
      entries.IpPermissions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroupRuleIds != null) {
    const memberEntries = se_SecurityGroupRuleIdList(input.SecurityGroupRuleIds, context);
    if (input.SecurityGroupRuleIds?.length === 0) {
      entries.SecurityGroupRuleId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.CidrIp != null) {
    entries["CidrIp"] = input.CidrIp;
  }
  if (input.FromPort != null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.IpProtocol != null) {
    entries["IpProtocol"] = input.IpProtocol;
  }
  if (input.ToPort != null) {
    entries["ToPort"] = input.ToPort;
  }
  if (input.SourceSecurityGroupName != null) {
    entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
  }
  if (input.SourceSecurityGroupOwnerId != null) {
    entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
  }
  return entries;
};

/**
 * serializeAws_ec2RevokeSecurityGroupIngressRequest
 */
const se_RevokeSecurityGroupIngressRequest = (
  input: RevokeSecurityGroupIngressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CidrIp != null) {
    entries["CidrIp"] = input.CidrIp;
  }
  if (input.FromPort != null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.GroupId != null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.IpPermissions != null) {
    const memberEntries = se_IpPermissionList(input.IpPermissions, context);
    if (input.IpPermissions?.length === 0) {
      entries.IpPermissions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.IpProtocol != null) {
    entries["IpProtocol"] = input.IpProtocol;
  }
  if (input.SourceSecurityGroupName != null) {
    entries["SourceSecurityGroupName"] = input.SourceSecurityGroupName;
  }
  if (input.SourceSecurityGroupOwnerId != null) {
    entries["SourceSecurityGroupOwnerId"] = input.SourceSecurityGroupOwnerId;
  }
  if (input.ToPort != null) {
    entries["ToPort"] = input.ToPort;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.SecurityGroupRuleIds != null) {
    const memberEntries = se_SecurityGroupRuleIdList(input.SecurityGroupRuleIds, context);
    if (input.SecurityGroupRuleIds?.length === 0) {
      entries.SecurityGroupRuleId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2RouteTableIdStringList
 */
const se_RouteTableIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RunInstancesMonitoringEnabled
 */
const se_RunInstancesMonitoringEnabled = (input: RunInstancesMonitoringEnabled, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Enabled != null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

/**
 * serializeAws_ec2RunInstancesRequest
 */
const se_RunInstancesRequest = (input: RunInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.BlockDeviceMappings != null) {
    const memberEntries = se_BlockDeviceMappingRequestList(input.BlockDeviceMappings, context);
    if (input.BlockDeviceMappings?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.Ipv6AddressCount != null) {
    entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
  }
  if (input.Ipv6Addresses != null) {
    const memberEntries = se_InstanceIpv6AddressList(input.Ipv6Addresses, context);
    if (input.Ipv6Addresses?.length === 0) {
      entries.Ipv6Address = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.KernelId != null) {
    entries["KernelId"] = input.KernelId;
  }
  if (input.KeyName != null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.MaxCount != null) {
    entries["MaxCount"] = input.MaxCount;
  }
  if (input.MinCount != null) {
    entries["MinCount"] = input.MinCount;
  }
  if (input.Monitoring != null) {
    const memberEntries = se_RunInstancesMonitoringEnabled(input.Monitoring, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input.Placement != null) {
    const memberEntries = se_Placement(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.RamdiskId != null) {
    entries["RamdiskId"] = input.RamdiskId;
  }
  if (input.SecurityGroupIds != null) {
    const memberEntries = se_SecurityGroupIdStringList(input.SecurityGroupIds, context);
    if (input.SecurityGroupIds?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroups != null) {
    const memberEntries = se_SecurityGroupStringList(input.SecurityGroups, context);
    if (input.SecurityGroups?.length === 0) {
      entries.SecurityGroup = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.UserData != null) {
    entries["UserData"] = input.UserData;
  }
  if (input.AdditionalInfo != null) {
    entries["AdditionalInfo"] = input.AdditionalInfo;
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DisableApiTermination != null) {
    entries["DisableApiTermination"] = input.DisableApiTermination;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.EbsOptimized != null) {
    entries["EbsOptimized"] = input.EbsOptimized;
  }
  if (input.IamInstanceProfile != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input.IamInstanceProfile, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceInitiatedShutdownBehavior != null) {
    entries["InstanceInitiatedShutdownBehavior"] = input.InstanceInitiatedShutdownBehavior;
  }
  if (input.NetworkInterfaces != null) {
    const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
    if (input.NetworkInterfaces?.length === 0) {
      entries.NetworkInterface = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.PrivateIpAddress != null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  if (input.ElasticGpuSpecification != null) {
    const memberEntries = se_ElasticGpuSpecifications(input.ElasticGpuSpecification, context);
    if (input.ElasticGpuSpecification?.length === 0) {
      entries.ElasticGpuSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ElasticInferenceAccelerators != null) {
    const memberEntries = se_ElasticInferenceAccelerators(input.ElasticInferenceAccelerators, context);
    if (input.ElasticInferenceAccelerators?.length === 0) {
      entries.ElasticInferenceAccelerator = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.LaunchTemplate != null) {
    const memberEntries = se_LaunchTemplateSpecification(input.LaunchTemplate, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplate.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceMarketOptions != null) {
    const memberEntries = se_InstanceMarketOptionsRequest(input.InstanceMarketOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceMarketOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CreditSpecification != null) {
    const memberEntries = se_CreditSpecificationRequest(input.CreditSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CreditSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CpuOptions != null) {
    const memberEntries = se_CpuOptionsRequest(input.CpuOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CapacityReservationSpecification != null) {
    const memberEntries = se_CapacityReservationSpecification(input.CapacityReservationSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.HibernationOptions != null) {
    const memberEntries = se_HibernationOptionsRequest(input.HibernationOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HibernationOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.LicenseSpecifications != null) {
    const memberEntries = se_LicenseSpecificationListRequest(input.LicenseSpecifications, context);
    if (input.LicenseSpecifications?.length === 0) {
      entries.LicenseSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MetadataOptions != null) {
    const memberEntries = se_InstanceMetadataOptionsRequest(input.MetadataOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetadataOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnclaveOptions != null) {
    const memberEntries = se_EnclaveOptionsRequest(input.EnclaveOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnclaveOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.PrivateDnsNameOptions != null) {
    const memberEntries = se_PrivateDnsNameOptionsRequest(input.PrivateDnsNameOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateDnsNameOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.MaintenanceOptions != null) {
    const memberEntries = se_InstanceMaintenanceOptionsRequest(input.MaintenanceOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MaintenanceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.DisableApiStop != null) {
    entries["DisableApiStop"] = input.DisableApiStop;
  }
  if (input.EnablePrimaryIpv6 != null) {
    entries["EnablePrimaryIpv6"] = input.EnablePrimaryIpv6;
  }
  return entries;
};

/**
 * serializeAws_ec2RunScheduledInstancesRequest
 */
const se_RunScheduledInstancesRequest = (input: RunScheduledInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.InstanceCount != null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.LaunchSpecification != null) {
    const memberEntries = se_ScheduledInstancesLaunchSpecification(input.LaunchSpecification, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ScheduledInstanceId != null) {
    entries["ScheduledInstanceId"] = input.ScheduledInstanceId;
  }
  return entries;
};

/**
 * serializeAws_ec2S3ObjectTag
 */
const se_S3ObjectTag = (input: S3ObjectTag, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Key != null) {
    entries["Key"] = input.Key;
  }
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

/**
 * serializeAws_ec2S3ObjectTagList
 */
const se_S3ObjectTagList = (input: S3ObjectTag[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_S3ObjectTag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2S3Storage
 */
const se_S3Storage = (input: S3Storage, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AWSAccessKeyId != null) {
    entries["AWSAccessKeyId"] = input.AWSAccessKeyId;
  }
  if (input.Bucket != null) {
    entries["Bucket"] = input.Bucket;
  }
  if (input.Prefix != null) {
    entries["Prefix"] = input.Prefix;
  }
  if (input.UploadPolicy != null) {
    entries["UploadPolicy"] = context.base64Encoder(input.UploadPolicy);
  }
  if (input.UploadPolicySignature != null) {
    entries["UploadPolicySignature"] = input.UploadPolicySignature;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstanceIdRequestSet
 */
const se_ScheduledInstanceIdRequestSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ScheduledInstanceId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstanceRecurrenceRequest
 */
const se_ScheduledInstanceRecurrenceRequest = (
  input: ScheduledInstanceRecurrenceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Frequency != null) {
    entries["Frequency"] = input.Frequency;
  }
  if (input.Interval != null) {
    entries["Interval"] = input.Interval;
  }
  if (input.OccurrenceDays != null) {
    const memberEntries = se_OccurrenceDayRequestSet(input.OccurrenceDays, context);
    if (input.OccurrenceDays?.length === 0) {
      entries.OccurrenceDay = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OccurrenceDay.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.OccurrenceRelativeToEnd != null) {
    entries["OccurrenceRelativeToEnd"] = input.OccurrenceRelativeToEnd;
  }
  if (input.OccurrenceUnit != null) {
    entries["OccurrenceUnit"] = input.OccurrenceUnit;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesBlockDeviceMapping
 */
const se_ScheduledInstancesBlockDeviceMapping = (
  input: ScheduledInstancesBlockDeviceMapping,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DeviceName != null) {
    entries["DeviceName"] = input.DeviceName;
  }
  if (input.Ebs != null) {
    const memberEntries = se_ScheduledInstancesEbs(input.Ebs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NoDevice != null) {
    entries["NoDevice"] = input.NoDevice;
  }
  if (input.VirtualName != null) {
    entries["VirtualName"] = input.VirtualName;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesBlockDeviceMappingSet
 */
const se_ScheduledInstancesBlockDeviceMappingSet = (
  input: ScheduledInstancesBlockDeviceMapping[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ScheduledInstancesBlockDeviceMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`BlockDeviceMapping.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesEbs
 */
const se_ScheduledInstancesEbs = (input: ScheduledInstancesEbs, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.DeleteOnTermination != null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.Encrypted != null) {
    entries["Encrypted"] = input.Encrypted;
  }
  if (input.Iops != null) {
    entries["Iops"] = input.Iops;
  }
  if (input.SnapshotId != null) {
    entries["SnapshotId"] = input.SnapshotId;
  }
  if (input.VolumeSize != null) {
    entries["VolumeSize"] = input.VolumeSize;
  }
  if (input.VolumeType != null) {
    entries["VolumeType"] = input.VolumeType;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesIamInstanceProfile
 */
const se_ScheduledInstancesIamInstanceProfile = (
  input: ScheduledInstancesIamInstanceProfile,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Arn != null) {
    entries["Arn"] = input.Arn;
  }
  if (input.Name != null) {
    entries["Name"] = input.Name;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesIpv6Address
 */
const se_ScheduledInstancesIpv6Address = (input: ScheduledInstancesIpv6Address, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Ipv6Address != null) {
    entries["Ipv6Address"] = input.Ipv6Address;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesIpv6AddressList
 */
const se_ScheduledInstancesIpv6AddressList = (input: ScheduledInstancesIpv6Address[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ScheduledInstancesIpv6Address(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Ipv6Address.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesLaunchSpecification
 */
const se_ScheduledInstancesLaunchSpecification = (
  input: ScheduledInstancesLaunchSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.BlockDeviceMappings != null) {
    const memberEntries = se_ScheduledInstancesBlockDeviceMappingSet(input.BlockDeviceMappings, context);
    if (input.BlockDeviceMappings?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.EbsOptimized != null) {
    entries["EbsOptimized"] = input.EbsOptimized;
  }
  if (input.IamInstanceProfile != null) {
    const memberEntries = se_ScheduledInstancesIamInstanceProfile(input.IamInstanceProfile, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.KernelId != null) {
    entries["KernelId"] = input.KernelId;
  }
  if (input.KeyName != null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.Monitoring != null) {
    const memberEntries = se_ScheduledInstancesMonitoring(input.Monitoring, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaces != null) {
    const memberEntries = se_ScheduledInstancesNetworkInterfaceSet(input.NetworkInterfaces, context);
    if (input.NetworkInterfaces?.length === 0) {
      entries.NetworkInterface = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Placement != null) {
    const memberEntries = se_ScheduledInstancesPlacement(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.RamdiskId != null) {
    entries["RamdiskId"] = input.RamdiskId;
  }
  if (input.SecurityGroupIds != null) {
    const memberEntries = se_ScheduledInstancesSecurityGroupIdSet(input.SecurityGroupIds, context);
    if (input.SecurityGroupIds?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.UserData != null) {
    entries["UserData"] = input.UserData;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesMonitoring
 */
const se_ScheduledInstancesMonitoring = (input: ScheduledInstancesMonitoring, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Enabled != null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesNetworkInterface
 */
const se_ScheduledInstancesNetworkInterface = (
  input: ScheduledInstancesNetworkInterface,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.AssociatePublicIpAddress != null) {
    entries["AssociatePublicIpAddress"] = input.AssociatePublicIpAddress;
  }
  if (input.DeleteOnTermination != null) {
    entries["DeleteOnTermination"] = input.DeleteOnTermination;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.DeviceIndex != null) {
    entries["DeviceIndex"] = input.DeviceIndex;
  }
  if (input.Groups != null) {
    const memberEntries = se_ScheduledInstancesSecurityGroupIdSet(input.Groups, context);
    if (input.Groups?.length === 0) {
      entries.Group = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Group.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6AddressCount != null) {
    entries["Ipv6AddressCount"] = input.Ipv6AddressCount;
  }
  if (input.Ipv6Addresses != null) {
    const memberEntries = se_ScheduledInstancesIpv6AddressList(input.Ipv6Addresses, context);
    if (input.Ipv6Addresses?.length === 0) {
      entries.Ipv6Address = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.PrivateIpAddress != null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  if (input.PrivateIpAddressConfigs != null) {
    const memberEntries = se_PrivateIpAddressConfigSet(input.PrivateIpAddressConfigs, context);
    if (input.PrivateIpAddressConfigs?.length === 0) {
      entries.PrivateIpAddressConfig = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddressConfig.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecondaryPrivateIpAddressCount != null) {
    entries["SecondaryPrivateIpAddressCount"] = input.SecondaryPrivateIpAddressCount;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesNetworkInterfaceSet
 */
const se_ScheduledInstancesNetworkInterfaceSet = (
  input: ScheduledInstancesNetworkInterface[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ScheduledInstancesNetworkInterface(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`NetworkInterface.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesPlacement
 */
const se_ScheduledInstancesPlacement = (input: ScheduledInstancesPlacement, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesPrivateIpAddressConfig
 */
const se_ScheduledInstancesPrivateIpAddressConfig = (
  input: ScheduledInstancesPrivateIpAddressConfig,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Primary != null) {
    entries["Primary"] = input.Primary;
  }
  if (input.PrivateIpAddress != null) {
    entries["PrivateIpAddress"] = input.PrivateIpAddress;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesSecurityGroupIdSet
 */
const se_ScheduledInstancesSecurityGroupIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SearchLocalGatewayRoutesRequest
 */
const se_SearchLocalGatewayRoutesRequest = (input: SearchLocalGatewayRoutesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.LocalGatewayRouteTableId != null) {
    entries["LocalGatewayRouteTableId"] = input.LocalGatewayRouteTableId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2SearchTransitGatewayMulticastGroupsRequest
 */
const se_SearchTransitGatewayMulticastGroupsRequest = (
  input: SearchTransitGatewayMulticastGroupsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayMulticastDomainId != null) {
    entries["TransitGatewayMulticastDomainId"] = input.TransitGatewayMulticastDomainId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.NextToken != null) {
    entries["NextToken"] = input.NextToken;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2SearchTransitGatewayRoutesRequest
 */
const se_SearchTransitGatewayRoutesRequest = (
  input: SearchTransitGatewayRoutesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TransitGatewayRouteTableId != null) {
    entries["TransitGatewayRouteTableId"] = input.TransitGatewayRouteTableId;
  }
  if (input.Filters != null) {
    const memberEntries = se_FilterList(input.Filters, context);
    if (input.Filters?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxResults != null) {
    entries["MaxResults"] = input.MaxResults;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupIdList
 */
const se_SecurityGroupIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupIdStringList
 */
const se_SecurityGroupIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupIdStringListRequest
 */
const se_SecurityGroupIdStringListRequest = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupRuleDescription
 */
const se_SecurityGroupRuleDescription = (input: SecurityGroupRuleDescription, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SecurityGroupRuleId != null) {
    entries["SecurityGroupRuleId"] = input.SecurityGroupRuleId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupRuleDescriptionList
 */
const se_SecurityGroupRuleDescriptionList = (input: SecurityGroupRuleDescription[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SecurityGroupRuleDescription(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupRuleIdList
 */
const se_SecurityGroupRuleIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupRuleRequest
 */
const se_SecurityGroupRuleRequest = (input: SecurityGroupRuleRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.IpProtocol != null) {
    entries["IpProtocol"] = input.IpProtocol;
  }
  if (input.FromPort != null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.ToPort != null) {
    entries["ToPort"] = input.ToPort;
  }
  if (input.CidrIpv4 != null) {
    entries["CidrIpv4"] = input.CidrIpv4;
  }
  if (input.CidrIpv6 != null) {
    entries["CidrIpv6"] = input.CidrIpv6;
  }
  if (input.PrefixListId != null) {
    entries["PrefixListId"] = input.PrefixListId;
  }
  if (input.ReferencedGroupId != null) {
    entries["ReferencedGroupId"] = input.ReferencedGroupId;
  }
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupRuleUpdate
 */
const se_SecurityGroupRuleUpdate = (input: SecurityGroupRuleUpdate, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SecurityGroupRuleId != null) {
    entries["SecurityGroupRuleId"] = input.SecurityGroupRuleId;
  }
  if (input.SecurityGroupRule != null) {
    const memberEntries = se_SecurityGroupRuleRequest(input.SecurityGroupRule, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRule.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupRuleUpdateList
 */
const se_SecurityGroupRuleUpdateList = (input: SecurityGroupRuleUpdate[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SecurityGroupRuleUpdate(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupStringList
 */
const se_SecurityGroupStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroup.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SendDiagnosticInterruptRequest
 */
const se_SendDiagnosticInterruptRequest = (input: SendDiagnosticInterruptRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceId != null) {
    entries["InstanceId"] = input.InstanceId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2SlotDateTimeRangeRequest
 */
const se_SlotDateTimeRangeRequest = (input: SlotDateTimeRangeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.EarliestTime != null) {
    entries["EarliestTime"] = input.EarliestTime.toISOString().split(".")[0] + "Z";
  }
  if (input.LatestTime != null) {
    entries["LatestTime"] = input.LatestTime.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2SlotStartTimeRangeRequest
 */
const se_SlotStartTimeRangeRequest = (input: SlotStartTimeRangeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.EarliestTime != null) {
    entries["EarliestTime"] = input.EarliestTime.toISOString().split(".")[0] + "Z";
  }
  if (input.LatestTime != null) {
    entries["LatestTime"] = input.LatestTime.toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2SnapshotDiskContainer
 */
const se_SnapshotDiskContainer = (input: SnapshotDiskContainer, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.Format != null) {
    entries["Format"] = input.Format;
  }
  if (input.Url != null) {
    entries["Url"] = input.Url;
  }
  if (input.UserBucket != null) {
    const memberEntries = se_UserBucket(input.UserBucket, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserBucket.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2SnapshotIdStringList
 */
const se_SnapshotIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SnapshotId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SpotCapacityRebalance
 */
const se_SpotCapacityRebalance = (input: SpotCapacityRebalance, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ReplacementStrategy != null) {
    entries["ReplacementStrategy"] = input.ReplacementStrategy;
  }
  if (input.TerminationDelay != null) {
    entries["TerminationDelay"] = input.TerminationDelay;
  }
  return entries;
};

/**
 * serializeAws_ec2SpotFleetLaunchSpecification
 */
const se_SpotFleetLaunchSpecification = (input: SpotFleetLaunchSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SecurityGroups != null) {
    const memberEntries = se_GroupIdentifierList(input.SecurityGroups, context);
    if (input.SecurityGroups?.length === 0) {
      entries.GroupSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AddressingType != null) {
    entries["AddressingType"] = input.AddressingType;
  }
  if (input.BlockDeviceMappings != null) {
    const memberEntries = se_BlockDeviceMappingList(input.BlockDeviceMappings, context);
    if (input.BlockDeviceMappings?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.EbsOptimized != null) {
    entries["EbsOptimized"] = input.EbsOptimized;
  }
  if (input.IamInstanceProfile != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input.IamInstanceProfile, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ImageId != null) {
    entries["ImageId"] = input.ImageId;
  }
  if (input.InstanceType != null) {
    entries["InstanceType"] = input.InstanceType;
  }
  if (input.KernelId != null) {
    entries["KernelId"] = input.KernelId;
  }
  if (input.KeyName != null) {
    entries["KeyName"] = input.KeyName;
  }
  if (input.Monitoring != null) {
    const memberEntries = se_SpotFleetMonitoring(input.Monitoring, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaces != null) {
    const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input.NetworkInterfaces, context);
    if (input.NetworkInterfaces?.length === 0) {
      entries.NetworkInterfaceSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Placement != null) {
    const memberEntries = se_SpotPlacement(input.Placement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input.RamdiskId != null) {
    entries["RamdiskId"] = input.RamdiskId;
  }
  if (input.SpotPrice != null) {
    entries["SpotPrice"] = input.SpotPrice;
  }
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.UserData != null) {
    entries["UserData"] = input.UserData;
  }
  if (input.WeightedCapacity != null) {
    entries["WeightedCapacity"] = __serializeFloat(input.WeightedCapacity);
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_SpotFleetTagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecificationSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecificationSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceRequirements != null) {
    const memberEntries = se_InstanceRequirements(input.InstanceRequirements, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2SpotFleetMonitoring
 */
const se_SpotFleetMonitoring = (input: SpotFleetMonitoring, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Enabled != null) {
    entries["Enabled"] = input.Enabled;
  }
  return entries;
};

/**
 * serializeAws_ec2SpotFleetRequestConfigData
 */
const se_SpotFleetRequestConfigData = (input: SpotFleetRequestConfigData, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationStrategy != null) {
    entries["AllocationStrategy"] = input.AllocationStrategy;
  }
  if (input.OnDemandAllocationStrategy != null) {
    entries["OnDemandAllocationStrategy"] = input.OnDemandAllocationStrategy;
  }
  if (input.SpotMaintenanceStrategies != null) {
    const memberEntries = se_SpotMaintenanceStrategies(input.SpotMaintenanceStrategies, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotMaintenanceStrategies.${key}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  if (input.ExcessCapacityTerminationPolicy != null) {
    entries["ExcessCapacityTerminationPolicy"] = input.ExcessCapacityTerminationPolicy;
  }
  if (input.FulfilledCapacity != null) {
    entries["FulfilledCapacity"] = __serializeFloat(input.FulfilledCapacity);
  }
  if (input.OnDemandFulfilledCapacity != null) {
    entries["OnDemandFulfilledCapacity"] = __serializeFloat(input.OnDemandFulfilledCapacity);
  }
  if (input.IamFleetRole != null) {
    entries["IamFleetRole"] = input.IamFleetRole;
  }
  if (input.LaunchSpecifications != null) {
    const memberEntries = se_LaunchSpecsList(input.LaunchSpecifications, context);
    if (input.LaunchSpecifications?.length === 0) {
      entries.LaunchSpecifications = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.LaunchTemplateConfigs != null) {
    const memberEntries = se_LaunchTemplateConfigList(input.LaunchTemplateConfigs, context);
    if (input.LaunchTemplateConfigs?.length === 0) {
      entries.LaunchTemplateConfigs = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SpotPrice != null) {
    entries["SpotPrice"] = input.SpotPrice;
  }
  if (input.TargetCapacity != null) {
    entries["TargetCapacity"] = input.TargetCapacity;
  }
  if (input.OnDemandTargetCapacity != null) {
    entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
  }
  if (input.OnDemandMaxTotalPrice != null) {
    entries["OnDemandMaxTotalPrice"] = input.OnDemandMaxTotalPrice;
  }
  if (input.SpotMaxTotalPrice != null) {
    entries["SpotMaxTotalPrice"] = input.SpotMaxTotalPrice;
  }
  if (input.TerminateInstancesWithExpiration != null) {
    entries["TerminateInstancesWithExpiration"] = input.TerminateInstancesWithExpiration;
  }
  if (input.Type != null) {
    entries["Type"] = input.Type;
  }
  if (input.ValidFrom != null) {
    entries["ValidFrom"] = input.ValidFrom.toISOString().split(".")[0] + "Z";
  }
  if (input.ValidUntil != null) {
    entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
  }
  if (input.ReplaceUnhealthyInstances != null) {
    entries["ReplaceUnhealthyInstances"] = input.ReplaceUnhealthyInstances;
  }
  if (input.InstanceInterruptionBehavior != null) {
    entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
  }
  if (input.LoadBalancersConfig != null) {
    const memberEntries = se_LoadBalancersConfig(input.LoadBalancersConfig, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancersConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstancePoolsToUseCount != null) {
    entries["InstancePoolsToUseCount"] = input.InstancePoolsToUseCount;
  }
  if (input.Context != null) {
    entries["Context"] = input.Context;
  }
  if (input.TargetCapacityUnitType != null) {
    entries["TargetCapacityUnitType"] = input.TargetCapacityUnitType;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2SpotFleetRequestIdList
 */
const se_SpotFleetRequestIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SpotFleetTagSpecification
 */
const se_SpotFleetTagSpecification = (input: SpotFleetTagSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ResourceType != null) {
    entries["ResourceType"] = input.ResourceType;
  }
  if (input.Tags != null) {
    const memberEntries = se_TagList(input.Tags, context);
    if (input.Tags?.length === 0) {
      entries.Tag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2SpotFleetTagSpecificationList
 */
const se_SpotFleetTagSpecificationList = (input: SpotFleetTagSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SpotFleetTagSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SpotInstanceRequestIdList
 */
const se_SpotInstanceRequestIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SpotInstanceRequestId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SpotMaintenanceStrategies
 */
const se_SpotMaintenanceStrategies = (input: SpotMaintenanceStrategies, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CapacityRebalance != null) {
    const memberEntries = se_SpotCapacityRebalance(input.CapacityRebalance, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityRebalance.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2SpotMarketOptions
 */
const se_SpotMarketOptions = (input: SpotMarketOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.MaxPrice != null) {
    entries["MaxPrice"] = input.MaxPrice;
  }
  if (input.SpotInstanceType != null) {
    entries["SpotInstanceType"] = input.SpotInstanceType;
  }
  if (input.BlockDurationMinutes != null) {
    entries["BlockDurationMinutes"] = input.BlockDurationMinutes;
  }
  if (input.ValidUntil != null) {
    entries["ValidUntil"] = input.ValidUntil.toISOString().split(".")[0] + "Z";
  }
  if (input.InstanceInterruptionBehavior != null) {
    entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
  }
  return entries;
};

/**
 * serializeAws_ec2SpotOptionsRequest
 */
const se_SpotOptionsRequest = (input: SpotOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AllocationStrategy != null) {
    entries["AllocationStrategy"] = input.AllocationStrategy;
  }
  if (input.MaintenanceStrategies != null) {
    const memberEntries = se_FleetSpotMaintenanceStrategiesRequest(input.MaintenanceStrategies, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MaintenanceStrategies.${key}`;
      entries[loc] = value;
    });
  }
  if (input.InstanceInterruptionBehavior != null) {
    entries["InstanceInterruptionBehavior"] = input.InstanceInterruptionBehavior;
  }
  if (input.InstancePoolsToUseCount != null) {
    entries["InstancePoolsToUseCount"] = input.InstancePoolsToUseCount;
  }
  if (input.SingleInstanceType != null) {
    entries["SingleInstanceType"] = input.SingleInstanceType;
  }
  if (input.SingleAvailabilityZone != null) {
    entries["SingleAvailabilityZone"] = input.SingleAvailabilityZone;
  }
  if (input.MinTargetCapacity != null) {
    entries["MinTargetCapacity"] = input.MinTargetCapacity;
  }
  if (input.MaxTotalPrice != null) {
    entries["MaxTotalPrice"] = input.MaxTotalPrice;
  }
  return entries;
};

/**
 * serializeAws_ec2SpotPlacement
 */
const se_SpotPlacement = (input: SpotPlacement, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AvailabilityZone != null) {
    entries["AvailabilityZone"] = input.AvailabilityZone;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.Tenancy != null) {
    entries["Tenancy"] = input.Tenancy;
  }
  return entries;
};

/**
 * serializeAws_ec2StartInstancesRequest
 */
const se_StartInstancesRequest = (input: StartInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceIds != null) {
    const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
    if (input.InstanceIds?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.AdditionalInfo != null) {
    entries["AdditionalInfo"] = input.AdditionalInfo;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2StartNetworkInsightsAccessScopeAnalysisRequest
 */
const se_StartNetworkInsightsAccessScopeAnalysisRequest = (
  input: StartNetworkInsightsAccessScopeAnalysisRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInsightsAccessScopeId != null) {
    entries["NetworkInsightsAccessScopeId"] = input.NetworkInsightsAccessScopeId;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2StartNetworkInsightsAnalysisRequest
 */
const se_StartNetworkInsightsAnalysisRequest = (
  input: StartNetworkInsightsAnalysisRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInsightsPathId != null) {
    entries["NetworkInsightsPathId"] = input.NetworkInsightsPathId;
  }
  if (input.AdditionalAccounts != null) {
    const memberEntries = se_ValueStringList(input.AdditionalAccounts, context);
    if (input.AdditionalAccounts?.length === 0) {
      entries.AdditionalAccount = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AdditionalAccount.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.FilterInArns != null) {
    const memberEntries = se_ArnList(input.FilterInArns, context);
    if (input.FilterInArns?.length === 0) {
      entries.FilterInArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FilterInArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.TagSpecifications != null) {
    const memberEntries = se_TagSpecificationList(input.TagSpecifications, context);
    if (input.TagSpecifications?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.ClientToken === undefined) {
    input.ClientToken = generateIdempotencyToken();
  }
  if (input.ClientToken != null) {
    entries["ClientToken"] = input.ClientToken;
  }
  return entries;
};

/**
 * serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationRequest
 */
const se_StartVpcEndpointServicePrivateDnsVerificationRequest = (
  input: StartVpcEndpointServicePrivateDnsVerificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.ServiceId != null) {
    entries["ServiceId"] = input.ServiceId;
  }
  return entries;
};

/**
 * serializeAws_ec2StopInstancesRequest
 */
const se_StopInstancesRequest = (input: StopInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceIds != null) {
    const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
    if (input.InstanceIds?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Hibernate != null) {
    entries["Hibernate"] = input.Hibernate;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.Force != null) {
    entries["Force"] = input.Force;
  }
  return entries;
};

/**
 * serializeAws_ec2Storage
 */
const se_Storage = (input: Storage, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.S3 != null) {
    const memberEntries = se_S3Storage(input.S3, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2StorageLocation
 */
const se_StorageLocation = (input: StorageLocation, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Bucket != null) {
    entries["Bucket"] = input.Bucket;
  }
  if (input.Key != null) {
    entries["Key"] = input.Key;
  }
  return entries;
};

/**
 * serializeAws_ec2SubnetConfiguration
 */
const se_SubnetConfiguration = (input: SubnetConfiguration, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.SubnetId != null) {
    entries["SubnetId"] = input.SubnetId;
  }
  if (input.Ipv4 != null) {
    entries["Ipv4"] = input.Ipv4;
  }
  if (input.Ipv6 != null) {
    entries["Ipv6"] = input.Ipv6;
  }
  return entries;
};

/**
 * serializeAws_ec2SubnetConfigurationsList
 */
const se_SubnetConfigurationsList = (input: SubnetConfiguration[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SubnetConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SubnetIdStringList
 */
const se_SubnetIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SubnetId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Tag
 */
const se_Tag = (input: Tag, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Key != null) {
    entries["Key"] = input.Key;
  }
  if (input.Value != null) {
    entries["Value"] = input.Value;
  }
  return entries;
};

/**
 * serializeAws_ec2TagList
 */
const se_TagList = (input: Tag[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Tag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TagSpecification
 */
const se_TagSpecification = (input: TagSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ResourceType != null) {
    entries["ResourceType"] = input.ResourceType;
  }
  if (input.Tags != null) {
    const memberEntries = se_TagList(input.Tags, context);
    if (input.Tags?.length === 0) {
      entries.Tag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2TagSpecificationList
 */
const se_TagSpecificationList = (input: TagSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TagSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TargetCapacitySpecificationRequest
 */
const se_TargetCapacitySpecificationRequest = (
  input: TargetCapacitySpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.TotalTargetCapacity != null) {
    entries["TotalTargetCapacity"] = input.TotalTargetCapacity;
  }
  if (input.OnDemandTargetCapacity != null) {
    entries["OnDemandTargetCapacity"] = input.OnDemandTargetCapacity;
  }
  if (input.SpotTargetCapacity != null) {
    entries["SpotTargetCapacity"] = input.SpotTargetCapacity;
  }
  if (input.DefaultTargetCapacityType != null) {
    entries["DefaultTargetCapacityType"] = input.DefaultTargetCapacityType;
  }
  if (input.TargetCapacityUnitType != null) {
    entries["TargetCapacityUnitType"] = input.TargetCapacityUnitType;
  }
  return entries;
};

/**
 * serializeAws_ec2TargetConfigurationRequest
 */
const se_TargetConfigurationRequest = (input: TargetConfigurationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceCount != null) {
    entries["InstanceCount"] = input.InstanceCount;
  }
  if (input.OfferingId != null) {
    entries["OfferingId"] = input.OfferingId;
  }
  return entries;
};

/**
 * serializeAws_ec2TargetConfigurationRequestSet
 */
const se_TargetConfigurationRequestSet = (input: TargetConfigurationRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TargetConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`TargetConfigurationRequest.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TargetGroup
 */
const se_TargetGroup = (input: TargetGroup, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Arn != null) {
    entries["Arn"] = input.Arn;
  }
  return entries;
};

/**
 * serializeAws_ec2TargetGroups
 */
const se_TargetGroups = (input: TargetGroup[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TargetGroup(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TargetGroupsConfig
 */
const se_TargetGroupsConfig = (input: TargetGroupsConfig, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.TargetGroups != null) {
    const memberEntries = se_TargetGroups(input.TargetGroups, context);
    if (input.TargetGroups?.length === 0) {
      entries.TargetGroups = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroups.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2TerminateClientVpnConnectionsRequest
 */
const se_TerminateClientVpnConnectionsRequest = (
  input: TerminateClientVpnConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.ClientVpnEndpointId != null) {
    entries["ClientVpnEndpointId"] = input.ClientVpnEndpointId;
  }
  if (input.ConnectionId != null) {
    entries["ConnectionId"] = input.ConnectionId;
  }
  if (input.Username != null) {
    entries["Username"] = input.Username;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2TerminateInstancesRequest
 */
const se_TerminateInstancesRequest = (input: TerminateInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceIds != null) {
    const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
    if (input.InstanceIds?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ThroughResourcesStatementRequest
 */
const se_ThroughResourcesStatementRequest = (input: ThroughResourcesStatementRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.ResourceStatement != null) {
    const memberEntries = se_ResourceStatementRequest(input.ResourceStatement, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceStatement.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ThroughResourcesStatementRequestList
 */
const se_ThroughResourcesStatementRequestList = (
  input: ThroughResourcesStatementRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ThroughResourcesStatementRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TotalLocalStorageGB
 */
const se_TotalLocalStorageGB = (input: TotalLocalStorageGB, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = __serializeFloat(input.Min);
  }
  if (input.Max != null) {
    entries["Max"] = __serializeFloat(input.Max);
  }
  return entries;
};

/**
 * serializeAws_ec2TotalLocalStorageGBRequest
 */
const se_TotalLocalStorageGBRequest = (input: TotalLocalStorageGBRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = __serializeFloat(input.Min);
  }
  if (input.Max != null) {
    entries["Max"] = __serializeFloat(input.Max);
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorFilterIdList
 */
const se_TrafficMirrorFilterIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorFilterRuleFieldList
 */
const se_TrafficMirrorFilterRuleFieldList = (input: TrafficMirrorFilterRuleField[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorNetworkServiceList
 */
const se_TrafficMirrorNetworkServiceList = (input: TrafficMirrorNetworkService[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorPortRangeRequest
 */
const se_TrafficMirrorPortRangeRequest = (input: TrafficMirrorPortRangeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.FromPort != null) {
    entries["FromPort"] = input.FromPort;
  }
  if (input.ToPort != null) {
    entries["ToPort"] = input.ToPort;
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorSessionFieldList
 */
const se_TrafficMirrorSessionFieldList = (input: TrafficMirrorSessionField[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorSessionIdList
 */
const se_TrafficMirrorSessionIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorTargetIdList
 */
const se_TrafficMirrorTargetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayAttachmentIdStringList
 */
const se_TransitGatewayAttachmentIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayCidrBlockStringList
 */
const se_TransitGatewayCidrBlockStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayConnectPeerIdStringList
 */
const se_TransitGatewayConnectPeerIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayConnectRequestBgpOptions
 */
const se_TransitGatewayConnectRequestBgpOptions = (
  input: TransitGatewayConnectRequestBgpOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.PeerAsn != null) {
    entries["PeerAsn"] = input.PeerAsn;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayIdStringList
 */
const se_TransitGatewayIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayMulticastDomainIdStringList
 */
const se_TransitGatewayMulticastDomainIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayNetworkInterfaceIdList
 */
const se_TransitGatewayNetworkInterfaceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayPolicyTableIdStringList
 */
const se_TransitGatewayPolicyTableIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayRequestOptions
 */
const se_TransitGatewayRequestOptions = (input: TransitGatewayRequestOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.AmazonSideAsn != null) {
    entries["AmazonSideAsn"] = input.AmazonSideAsn;
  }
  if (input.AutoAcceptSharedAttachments != null) {
    entries["AutoAcceptSharedAttachments"] = input.AutoAcceptSharedAttachments;
  }
  if (input.DefaultRouteTableAssociation != null) {
    entries["DefaultRouteTableAssociation"] = input.DefaultRouteTableAssociation;
  }
  if (input.DefaultRouteTablePropagation != null) {
    entries["DefaultRouteTablePropagation"] = input.DefaultRouteTablePropagation;
  }
  if (input.VpnEcmpSupport != null) {
    entries["VpnEcmpSupport"] = input.VpnEcmpSupport;
  }
  if (input.DnsSupport != null) {
    entries["DnsSupport"] = input.DnsSupport;
  }
  if (input.MulticastSupport != null) {
    entries["MulticastSupport"] = input.MulticastSupport;
  }
  if (input.TransitGatewayCidrBlocks != null) {
    const memberEntries = se_TransitGatewayCidrBlockStringList(input.TransitGatewayCidrBlocks, context);
    if (input.TransitGatewayCidrBlocks?.length === 0) {
      entries.TransitGatewayCidrBlocks = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayRouteTableAnnouncementIdStringList
 */
const se_TransitGatewayRouteTableAnnouncementIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayRouteTableIdStringList
 */
const se_TransitGatewayRouteTableIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewaySubnetIdList
 */
const se_TransitGatewaySubnetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TrunkInterfaceAssociationIdList
 */
const se_TrunkInterfaceAssociationIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2UnassignIpv6AddressesRequest
 */
const se_UnassignIpv6AddressesRequest = (input: UnassignIpv6AddressesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Ipv6Addresses != null) {
    const memberEntries = se_Ipv6AddressList(input.Ipv6Addresses, context);
    if (input.Ipv6Addresses?.length === 0) {
      entries.Ipv6Addresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv6Prefixes != null) {
    const memberEntries = se_IpPrefixList(input.Ipv6Prefixes, context);
    if (input.Ipv6Prefixes?.length === 0) {
      entries.Ipv6Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  return entries;
};

/**
 * serializeAws_ec2UnassignPrivateIpAddressesRequest
 */
const se_UnassignPrivateIpAddressesRequest = (
  input: UnassignPrivateIpAddressesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NetworkInterfaceId != null) {
    entries["NetworkInterfaceId"] = input.NetworkInterfaceId;
  }
  if (input.PrivateIpAddresses != null) {
    const memberEntries = se_PrivateIpAddressStringList(input.PrivateIpAddresses, context);
    if (input.PrivateIpAddresses?.length === 0) {
      entries.PrivateIpAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Ipv4Prefixes != null) {
    const memberEntries = se_IpPrefixList(input.Ipv4Prefixes, context);
    if (input.Ipv4Prefixes?.length === 0) {
      entries.Ipv4Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2UnassignPrivateNatGatewayAddressRequest
 */
const se_UnassignPrivateNatGatewayAddressRequest = (
  input: UnassignPrivateNatGatewayAddressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.NatGatewayId != null) {
    entries["NatGatewayId"] = input.NatGatewayId;
  }
  if (input.PrivateIpAddresses != null) {
    const memberEntries = se_IpList(input.PrivateIpAddresses, context);
    if (input.PrivateIpAddresses?.length === 0) {
      entries.PrivateIpAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.MaxDrainDurationSeconds != null) {
    entries["MaxDrainDurationSeconds"] = input.MaxDrainDurationSeconds;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2UnmonitorInstancesRequest
 */
const se_UnmonitorInstancesRequest = (input: UnmonitorInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.InstanceIds != null) {
    const memberEntries = se_InstanceIdStringList(input.InstanceIds, context);
    if (input.InstanceIds?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressRequest
 */
const se_UpdateSecurityGroupRuleDescriptionsEgressRequest = (
  input: UpdateSecurityGroupRuleDescriptionsEgressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupId != null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.IpPermissions != null) {
    const memberEntries = se_IpPermissionList(input.IpPermissions, context);
    if (input.IpPermissions?.length === 0) {
      entries.IpPermissions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroupRuleDescriptions != null) {
    const memberEntries = se_SecurityGroupRuleDescriptionList(input.SecurityGroupRuleDescriptions, context);
    if (input.SecurityGroupRuleDescriptions?.length === 0) {
      entries.SecurityGroupRuleDescription = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleDescription.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressRequest
 */
const se_UpdateSecurityGroupRuleDescriptionsIngressRequest = (
  input: UpdateSecurityGroupRuleDescriptionsIngressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  if (input.GroupId != null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.IpPermissions != null) {
    const memberEntries = se_IpPermissionList(input.IpPermissions, context);
    if (input.IpPermissions?.length === 0) {
      entries.IpPermissions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.SecurityGroupRuleDescriptions != null) {
    const memberEntries = se_SecurityGroupRuleDescriptionList(input.SecurityGroupRuleDescriptions, context);
    if (input.SecurityGroupRuleDescriptions?.length === 0) {
      entries.SecurityGroupRuleDescription = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleDescription.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2UserBucket
 */
const se_UserBucket = (input: UserBucket, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.S3Bucket != null) {
    entries["S3Bucket"] = input.S3Bucket;
  }
  if (input.S3Key != null) {
    entries["S3Key"] = input.S3Key;
  }
  return entries;
};

/**
 * serializeAws_ec2UserData
 */
const se_UserData = (input: UserData, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Data != null) {
    entries["Data"] = input.Data;
  }
  return entries;
};

/**
 * serializeAws_ec2UserGroupStringList
 */
const se_UserGroupStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`UserGroup.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2UserIdGroupPair
 */
const se_UserIdGroupPair = (input: UserIdGroupPair, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Description != null) {
    entries["Description"] = input.Description;
  }
  if (input.GroupId != null) {
    entries["GroupId"] = input.GroupId;
  }
  if (input.GroupName != null) {
    entries["GroupName"] = input.GroupName;
  }
  if (input.PeeringStatus != null) {
    entries["PeeringStatus"] = input.PeeringStatus;
  }
  if (input.UserId != null) {
    entries["UserId"] = input.UserId;
  }
  if (input.VpcId != null) {
    entries["VpcId"] = input.VpcId;
  }
  if (input.VpcPeeringConnectionId != null) {
    entries["VpcPeeringConnectionId"] = input.VpcPeeringConnectionId;
  }
  return entries;
};

/**
 * serializeAws_ec2UserIdGroupPairList
 */
const se_UserIdGroupPairList = (input: UserIdGroupPair[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_UserIdGroupPair(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2UserIdStringList
 */
const se_UserIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`UserId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ValueStringList
 */
const se_ValueStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VCpuCountRange
 */
const se_VCpuCountRange = (input: VCpuCountRange, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = input.Min;
  }
  if (input.Max != null) {
    entries["Max"] = input.Max;
  }
  return entries;
};

/**
 * serializeAws_ec2VCpuCountRangeRequest
 */
const se_VCpuCountRangeRequest = (input: VCpuCountRangeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Min != null) {
    entries["Min"] = input.Min;
  }
  if (input.Max != null) {
    entries["Max"] = input.Max;
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessEndpointIdList
 */
const se_VerifiedAccessEndpointIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessGroupIdList
 */
const se_VerifiedAccessGroupIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessInstanceIdList
 */
const se_VerifiedAccessInstanceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessLogCloudWatchLogsDestinationOptions
 */
const se_VerifiedAccessLogCloudWatchLogsDestinationOptions = (
  input: VerifiedAccessLogCloudWatchLogsDestinationOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Enabled != null) {
    entries["Enabled"] = input.Enabled;
  }
  if (input.LogGroup != null) {
    entries["LogGroup"] = input.LogGroup;
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessLogKinesisDataFirehoseDestinationOptions
 */
const se_VerifiedAccessLogKinesisDataFirehoseDestinationOptions = (
  input: VerifiedAccessLogKinesisDataFirehoseDestinationOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Enabled != null) {
    entries["Enabled"] = input.Enabled;
  }
  if (input.DeliveryStream != null) {
    entries["DeliveryStream"] = input.DeliveryStream;
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessLogOptions
 */
const se_VerifiedAccessLogOptions = (input: VerifiedAccessLogOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.S3 != null) {
    const memberEntries = se_VerifiedAccessLogS3DestinationOptions(input.S3, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3.${key}`;
      entries[loc] = value;
    });
  }
  if (input.CloudWatchLogs != null) {
    const memberEntries = se_VerifiedAccessLogCloudWatchLogsDestinationOptions(input.CloudWatchLogs, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CloudWatchLogs.${key}`;
      entries[loc] = value;
    });
  }
  if (input.KinesisDataFirehose != null) {
    const memberEntries = se_VerifiedAccessLogKinesisDataFirehoseDestinationOptions(input.KinesisDataFirehose, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `KinesisDataFirehose.${key}`;
      entries[loc] = value;
    });
  }
  if (input.LogVersion != null) {
    entries["LogVersion"] = input.LogVersion;
  }
  if (input.IncludeTrustContext != null) {
    entries["IncludeTrustContext"] = input.IncludeTrustContext;
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessLogS3DestinationOptions
 */
const se_VerifiedAccessLogS3DestinationOptions = (
  input: VerifiedAccessLogS3DestinationOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.Enabled != null) {
    entries["Enabled"] = input.Enabled;
  }
  if (input.BucketName != null) {
    entries["BucketName"] = input.BucketName;
  }
  if (input.Prefix != null) {
    entries["Prefix"] = input.Prefix;
  }
  if (input.BucketOwner != null) {
    entries["BucketOwner"] = input.BucketOwner;
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessSseSpecificationRequest
 */
const se_VerifiedAccessSseSpecificationRequest = (
  input: VerifiedAccessSseSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.CustomerManagedKeyEnabled != null) {
    entries["CustomerManagedKeyEnabled"] = input.CustomerManagedKeyEnabled;
  }
  if (input.KmsKeyArn != null) {
    entries["KmsKeyArn"] = input.KmsKeyArn;
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessTrustProviderIdList
 */
const se_VerifiedAccessTrustProviderIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VersionStringList
 */
const se_VersionStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VirtualizationTypeSet
 */
const se_VirtualizationTypeSet = (input: VirtualizationType[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VolumeDetail
 */
const se_VolumeDetail = (input: VolumeDetail, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Size != null) {
    entries["Size"] = input.Size;
  }
  return entries;
};

/**
 * serializeAws_ec2VolumeIdStringList
 */
const se_VolumeIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VolumeId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcClassicLinkIdList
 */
const se_VpcClassicLinkIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpcId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcEndpointIdList
 */
const se_VpcEndpointIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcEndpointRouteTableIdList
 */
const se_VpcEndpointRouteTableIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcEndpointSecurityGroupIdList
 */
const se_VpcEndpointSecurityGroupIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcEndpointServiceIdList
 */
const se_VpcEndpointServiceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcEndpointSubnetIdList
 */
const se_VpcEndpointSubnetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcIdStringList
 */
const se_VpcIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpcId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcPeeringConnectionIdList
 */
const se_VpcPeeringConnectionIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpnConnectionIdStringList
 */
const se_VpnConnectionIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpnConnectionId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpnConnectionOptionsSpecification
 */
const se_VpnConnectionOptionsSpecification = (
  input: VpnConnectionOptionsSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input.EnableAcceleration != null) {
    entries["EnableAcceleration"] = input.EnableAcceleration;
  }
  if (input.StaticRoutesOnly != null) {
    entries["StaticRoutesOnly"] = input.StaticRoutesOnly;
  }
  if (input.TunnelInsideIpVersion != null) {
    entries["TunnelInsideIpVersion"] = input.TunnelInsideIpVersion;
  }
  if (input.TunnelOptions != null) {
    const memberEntries = se_VpnTunnelOptionsSpecificationsList(input.TunnelOptions, context);
    if (input.TunnelOptions?.length === 0) {
      entries.TunnelOptions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TunnelOptions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.LocalIpv4NetworkCidr != null) {
    entries["LocalIpv4NetworkCidr"] = input.LocalIpv4NetworkCidr;
  }
  if (input.RemoteIpv4NetworkCidr != null) {
    entries["RemoteIpv4NetworkCidr"] = input.RemoteIpv4NetworkCidr;
  }
  if (input.LocalIpv6NetworkCidr != null) {
    entries["LocalIpv6NetworkCidr"] = input.LocalIpv6NetworkCidr;
  }
  if (input.RemoteIpv6NetworkCidr != null) {
    entries["RemoteIpv6NetworkCidr"] = input.RemoteIpv6NetworkCidr;
  }
  if (input.OutsideIpAddressType != null) {
    entries["OutsideIpAddressType"] = input.OutsideIpAddressType;
  }
  if (input.TransportTransitGatewayAttachmentId != null) {
    entries["TransportTransitGatewayAttachmentId"] = input.TransportTransitGatewayAttachmentId;
  }
  return entries;
};

/**
 * serializeAws_ec2VpnGatewayIdStringList
 */
const se_VpnGatewayIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpnGatewayId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpnTunnelLogOptionsSpecification
 */
const se_VpnTunnelLogOptionsSpecification = (input: VpnTunnelLogOptionsSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.CloudWatchLogOptions != null) {
    const memberEntries = se_CloudWatchLogOptionsSpecification(input.CloudWatchLogOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CloudWatchLogOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2VpnTunnelOptionsSpecification
 */
const se_VpnTunnelOptionsSpecification = (input: VpnTunnelOptionsSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.TunnelInsideCidr != null) {
    entries["TunnelInsideCidr"] = input.TunnelInsideCidr;
  }
  if (input.TunnelInsideIpv6Cidr != null) {
    entries["TunnelInsideIpv6Cidr"] = input.TunnelInsideIpv6Cidr;
  }
  if (input.PreSharedKey != null) {
    entries["PreSharedKey"] = input.PreSharedKey;
  }
  if (input.Phase1LifetimeSeconds != null) {
    entries["Phase1LifetimeSeconds"] = input.Phase1LifetimeSeconds;
  }
  if (input.Phase2LifetimeSeconds != null) {
    entries["Phase2LifetimeSeconds"] = input.Phase2LifetimeSeconds;
  }
  if (input.RekeyMarginTimeSeconds != null) {
    entries["RekeyMarginTimeSeconds"] = input.RekeyMarginTimeSeconds;
  }
  if (input.RekeyFuzzPercentage != null) {
    entries["RekeyFuzzPercentage"] = input.RekeyFuzzPercentage;
  }
  if (input.ReplayWindowSize != null) {
    entries["ReplayWindowSize"] = input.ReplayWindowSize;
  }
  if (input.DPDTimeoutSeconds != null) {
    entries["DPDTimeoutSeconds"] = input.DPDTimeoutSeconds;
  }
  if (input.DPDTimeoutAction != null) {
    entries["DPDTimeoutAction"] = input.DPDTimeoutAction;
  }
  if (input.Phase1EncryptionAlgorithms != null) {
    const memberEntries = se_Phase1EncryptionAlgorithmsRequestList(input.Phase1EncryptionAlgorithms, context);
    if (input.Phase1EncryptionAlgorithms?.length === 0) {
      entries.Phase1EncryptionAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase2EncryptionAlgorithms != null) {
    const memberEntries = se_Phase2EncryptionAlgorithmsRequestList(input.Phase2EncryptionAlgorithms, context);
    if (input.Phase2EncryptionAlgorithms?.length === 0) {
      entries.Phase2EncryptionAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase1IntegrityAlgorithms != null) {
    const memberEntries = se_Phase1IntegrityAlgorithmsRequestList(input.Phase1IntegrityAlgorithms, context);
    if (input.Phase1IntegrityAlgorithms?.length === 0) {
      entries.Phase1IntegrityAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase2IntegrityAlgorithms != null) {
    const memberEntries = se_Phase2IntegrityAlgorithmsRequestList(input.Phase2IntegrityAlgorithms, context);
    if (input.Phase2IntegrityAlgorithms?.length === 0) {
      entries.Phase2IntegrityAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase1DHGroupNumbers != null) {
    const memberEntries = se_Phase1DHGroupNumbersRequestList(input.Phase1DHGroupNumbers, context);
    if (input.Phase1DHGroupNumbers?.length === 0) {
      entries.Phase1DHGroupNumber = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.Phase2DHGroupNumbers != null) {
    const memberEntries = se_Phase2DHGroupNumbersRequestList(input.Phase2DHGroupNumbers, context);
    if (input.Phase2DHGroupNumbers?.length === 0) {
      entries.Phase2DHGroupNumber = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.IKEVersions != null) {
    const memberEntries = se_IKEVersionsRequestList(input.IKEVersions, context);
    if (input.IKEVersions?.length === 0) {
      entries.IKEVersion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input.StartupAction != null) {
    entries["StartupAction"] = input.StartupAction;
  }
  if (input.LogOptions != null) {
    const memberEntries = se_VpnTunnelLogOptionsSpecification(input.LogOptions, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input.EnableTunnelLifecycleControl != null) {
    entries["EnableTunnelLifecycleControl"] = input.EnableTunnelLifecycleControl;
  }
  return entries;
};

/**
 * serializeAws_ec2VpnTunnelOptionsSpecificationsList
 */
const se_VpnTunnelOptionsSpecificationsList = (
  input: VpnTunnelOptionsSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_VpnTunnelOptionsSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2WithdrawByoipCidrRequest
 */
const se_WithdrawByoipCidrRequest = (input: WithdrawByoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input.Cidr != null) {
    entries["Cidr"] = input.Cidr;
  }
  if (input.DryRun != null) {
    entries["DryRun"] = input.DryRun;
  }
  return entries;
};

/**
 * serializeAws_ec2ZoneIdStringList
 */
const se_ZoneIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ZoneId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ZoneNameStringList
 */
const se_ZoneNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ZoneName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * deserializeAws_ec2AcceleratorCount
 */
const de_AcceleratorCount = (output: any, context: __SerdeContext): AcceleratorCount => {
  const contents: any = {};
  if (output["min"] !== undefined) {
    contents.Min = __strictParseInt32(output["min"]) as number;
  }
  if (output["max"] !== undefined) {
    contents.Max = __strictParseInt32(output["max"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceleratorManufacturerSet
 */
const de_AcceleratorManufacturerSet = (output: any, context: __SerdeContext): AcceleratorManufacturer[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2AcceleratorNameSet
 */
const de_AcceleratorNameSet = (output: any, context: __SerdeContext): AcceleratorName[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2AcceleratorTotalMemoryMiB
 */
const de_AcceleratorTotalMemoryMiB = (output: any, context: __SerdeContext): AcceleratorTotalMemoryMiB => {
  const contents: any = {};
  if (output["min"] !== undefined) {
    contents.Min = __strictParseInt32(output["min"]) as number;
  }
  if (output["max"] !== undefined) {
    contents.Max = __strictParseInt32(output["max"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceleratorTypeSet
 */
const de_AcceleratorTypeSet = (output: any, context: __SerdeContext): AcceleratorType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2AcceptAddressTransferResult
 */
const de_AcceptAddressTransferResult = (output: any, context: __SerdeContext): AcceptAddressTransferResult => {
  const contents: any = {};
  if (output["addressTransfer"] !== undefined) {
    contents.AddressTransfer = de_AddressTransfer(output["addressTransfer"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceptReservedInstancesExchangeQuoteResult
 */
const de_AcceptReservedInstancesExchangeQuoteResult = (
  output: any,
  context: __SerdeContext
): AcceptReservedInstancesExchangeQuoteResult => {
  const contents: any = {};
  if (output["exchangeId"] !== undefined) {
    contents.ExchangeId = __expectString(output["exchangeId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsResult
 */
const de_AcceptTransitGatewayMulticastDomainAssociationsResult = (
  output: any,
  context: __SerdeContext
): AcceptTransitGatewayMulticastDomainAssociationsResult => {
  const contents: any = {};
  if (output["associations"] !== undefined) {
    contents.Associations = de_TransitGatewayMulticastDomainAssociations(output["associations"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentResult
 */
const de_AcceptTransitGatewayPeeringAttachmentResult = (
  output: any,
  context: __SerdeContext
): AcceptTransitGatewayPeeringAttachmentResult => {
  const contents: any = {};
  if (output["transitGatewayPeeringAttachment"] !== undefined) {
    contents.TransitGatewayPeeringAttachment = de_TransitGatewayPeeringAttachment(
      output["transitGatewayPeeringAttachment"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceptTransitGatewayVpcAttachmentResult
 */
const de_AcceptTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): AcceptTransitGatewayVpcAttachmentResult => {
  const contents: any = {};
  if (output["transitGatewayVpcAttachment"] !== undefined) {
    contents.TransitGatewayVpcAttachment = de_TransitGatewayVpcAttachment(
      output["transitGatewayVpcAttachment"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceptVpcEndpointConnectionsResult
 */
const de_AcceptVpcEndpointConnectionsResult = (
  output: any,
  context: __SerdeContext
): AcceptVpcEndpointConnectionsResult => {
  const contents: any = {};
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  } else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceptVpcPeeringConnectionResult
 */
const de_AcceptVpcPeeringConnectionResult = (
  output: any,
  context: __SerdeContext
): AcceptVpcPeeringConnectionResult => {
  const contents: any = {};
  if (output["vpcPeeringConnection"] !== undefined) {
    contents.VpcPeeringConnection = de_VpcPeeringConnection(output["vpcPeeringConnection"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AccessScopeAnalysisFinding
 */
const de_AccessScopeAnalysisFinding = (output: any, context: __SerdeContext): AccessScopeAnalysisFinding => {
  const contents: any = {};
  if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
    contents.NetworkInsightsAccessScopeAnalysisId = __expectString(output["networkInsightsAccessScopeAnalysisId"]);
  }
  if (output["networkInsightsAccessScopeId"] !== undefined) {
    contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
  }
  if (output["findingId"] !== undefined) {
    contents.FindingId = __expectString(output["findingId"]);
  }
  if (output.findingComponentSet === "") {
    contents.FindingComponents = [];
  } else if (output["findingComponentSet"] !== undefined && output["findingComponentSet"]["item"] !== undefined) {
    contents.FindingComponents = de_PathComponentList(
      __getArrayIfSingleItem(output["findingComponentSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2AccessScopeAnalysisFindingList
 */
const de_AccessScopeAnalysisFindingList = (output: any, context: __SerdeContext): AccessScopeAnalysisFinding[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AccessScopeAnalysisFinding(entry, context);
    });
};

/**
 * deserializeAws_ec2AccessScopePath
 */
const de_AccessScopePath = (output: any, context: __SerdeContext): AccessScopePath => {
  const contents: any = {};
  if (output["source"] !== undefined) {
    contents.Source = de_PathStatement(output["source"], context);
  }
  if (output["destination"] !== undefined) {
    contents.Destination = de_PathStatement(output["destination"], context);
  }
  if (output.throughResourceSet === "") {
    contents.ThroughResources = [];
  } else if (output["throughResourceSet"] !== undefined && output["throughResourceSet"]["item"] !== undefined) {
    contents.ThroughResources = de_ThroughResourcesStatementList(
      __getArrayIfSingleItem(output["throughResourceSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2AccessScopePathList
 */
const de_AccessScopePathList = (output: any, context: __SerdeContext): AccessScopePath[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AccessScopePath(entry, context);
    });
};

/**
 * deserializeAws_ec2AccountAttribute
 */
const de_AccountAttribute = (output: any, context: __SerdeContext): AccountAttribute => {
  const contents: any = {};
  if (output["attributeName"] !== undefined) {
    contents.AttributeName = __expectString(output["attributeName"]);
  }
  if (output.attributeValueSet === "") {
    contents.AttributeValues = [];
  } else if (output["attributeValueSet"] !== undefined && output["attributeValueSet"]["item"] !== undefined) {
    contents.AttributeValues = de_AccountAttributeValueList(
      __getArrayIfSingleItem(output["attributeValueSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2AccountAttributeList
 */
const de_AccountAttributeList = (output: any, context: __SerdeContext): AccountAttribute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AccountAttribute(entry, context);
    });
};

/**
 * deserializeAws_ec2AccountAttributeValue
 */
const de_AccountAttributeValue = (output: any, context: __SerdeContext): AccountAttributeValue => {
  const contents: any = {};
  if (output["attributeValue"] !== undefined) {
    contents.AttributeValue = __expectString(output["attributeValue"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AccountAttributeValueList
 */
const de_AccountAttributeValueList = (output: any, context: __SerdeContext): AccountAttributeValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AccountAttributeValue(entry, context);
    });
};

/**
 * deserializeAws_ec2ActiveInstance
 */
const de_ActiveInstance = (output: any, context: __SerdeContext): ActiveInstance => {
  const contents: any = {};
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["spotInstanceRequestId"] !== undefined) {
    contents.SpotInstanceRequestId = __expectString(output["spotInstanceRequestId"]);
  }
  if (output["instanceHealth"] !== undefined) {
    contents.InstanceHealth = __expectString(output["instanceHealth"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ActiveInstanceSet
 */
const de_ActiveInstanceSet = (output: any, context: __SerdeContext): ActiveInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ActiveInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2AddedPrincipal
 */
const de_AddedPrincipal = (output: any, context: __SerdeContext): AddedPrincipal => {
  const contents: any = {};
  if (output["principalType"] !== undefined) {
    contents.PrincipalType = __expectString(output["principalType"]);
  }
  if (output["principal"] !== undefined) {
    contents.Principal = __expectString(output["principal"]);
  }
  if (output["servicePermissionId"] !== undefined) {
    contents.ServicePermissionId = __expectString(output["servicePermissionId"]);
  }
  if (output["serviceId"] !== undefined) {
    contents.ServiceId = __expectString(output["serviceId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AddedPrincipalSet
 */
const de_AddedPrincipalSet = (output: any, context: __SerdeContext): AddedPrincipal[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AddedPrincipal(entry, context);
    });
};

/**
 * deserializeAws_ec2AdditionalDetail
 */
const de_AdditionalDetail = (output: any, context: __SerdeContext): AdditionalDetail => {
  const contents: any = {};
  if (output["additionalDetailType"] !== undefined) {
    contents.AdditionalDetailType = __expectString(output["additionalDetailType"]);
  }
  if (output["component"] !== undefined) {
    contents.Component = de_AnalysisComponent(output["component"], context);
  }
  if (output["vpcEndpointService"] !== undefined) {
    contents.VpcEndpointService = de_AnalysisComponent(output["vpcEndpointService"], context);
  }
  if (output.ruleOptionSet === "") {
    contents.RuleOptions = [];
  } else if (output["ruleOptionSet"] !== undefined && output["ruleOptionSet"]["item"] !== undefined) {
    contents.RuleOptions = de_RuleOptionList(__getArrayIfSingleItem(output["ruleOptionSet"]["item"]), context);
  }
  if (output.ruleGroupTypePairSet === "") {
    contents.RuleGroupTypePairs = [];
  } else if (output["ruleGroupTypePairSet"] !== undefined && output["ruleGroupTypePairSet"]["item"] !== undefined) {
    contents.RuleGroupTypePairs = de_RuleGroupTypePairList(
      __getArrayIfSingleItem(output["ruleGroupTypePairSet"]["item"]),
      context
    );
  }
  if (output.ruleGroupRuleOptionsPairSet === "") {
    contents.RuleGroupRuleOptionsPairs = [];
  } else if (
    output["ruleGroupRuleOptionsPairSet"] !== undefined &&
    output["ruleGroupRuleOptionsPairSet"]["item"] !== undefined
  ) {
    contents.RuleGroupRuleOptionsPairs = de_RuleGroupRuleOptionsPairList(
      __getArrayIfSingleItem(output["ruleGroupRuleOptionsPairSet"]["item"]),
      context
    );
  }
  if (output["serviceName"] !== undefined) {
    contents.ServiceName = __expectString(output["serviceName"]);
  }
  if (output.loadBalancerSet === "") {
    contents.LoadBalancers = [];
  } else if (output["loadBalancerSet"] !== undefined && output["loadBalancerSet"]["item"] !== undefined) {
    contents.LoadBalancers = de_AnalysisComponentList(
      __getArrayIfSingleItem(output["loadBalancerSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2AdditionalDetailList
 */
const de_AdditionalDetailList = (output: any, context: __SerdeContext): AdditionalDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AdditionalDetail(entry, context);
    });
};

/**
 * deserializeAws_ec2Address
 */
const de_Address = (output: any, context: __SerdeContext): Address => {
  const contents: any = {};
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = __expectString(output["publicIp"]);
  }
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = __expectString(output["allocationId"]);
  }
  if (output["associationId"] !== undefined) {
    contents.AssociationId = __expectString(output["associationId"]);
  }
  if (output["domain"] !== undefined) {
    contents.Domain = __expectString(output["domain"]);
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["networkInterfaceOwnerId"] !== undefined) {
    contents.NetworkInterfaceOwnerId = __expectString(output["networkInterfaceOwnerId"]);
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["publicIpv4Pool"] !== undefined) {
    contents.PublicIpv4Pool = __expectString(output["publicIpv4Pool"]);
  }
  if (output["networkBorderGroup"] !== undefined) {
    contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
  }
  if (output["customerOwnedIp"] !== undefined) {
    contents.CustomerOwnedIp = __expectString(output["customerOwnedIp"]);
  }
  if (output["customerOwnedIpv4Pool"] !== undefined) {
    contents.CustomerOwnedIpv4Pool = __expectString(output["customerOwnedIpv4Pool"]);
  }
  if (output["carrierIp"] !== undefined) {
    contents.CarrierIp = __expectString(output["carrierIp"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AddressAttribute
 */
const de_AddressAttribute = (output: any, context: __SerdeContext): AddressAttribute => {
  const contents: any = {};
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = __expectString(output["publicIp"]);
  }
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = __expectString(output["allocationId"]);
  }
  if (output["ptrRecord"] !== undefined) {
    contents.PtrRecord = __expectString(output["ptrRecord"]);
  }
  if (output["ptrRecordUpdate"] !== undefined) {
    contents.PtrRecordUpdate = de_PtrUpdateStatus(output["ptrRecordUpdate"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AddressList
 */
const de_AddressList = (output: any, context: __SerdeContext): Address[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Address(entry, context);
    });
};

/**
 * deserializeAws_ec2AddressSet
 */
const de_AddressSet = (output: any, context: __SerdeContext): AddressAttribute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AddressAttribute(entry, context);
    });
};

/**
 * deserializeAws_ec2AddressTransfer
 */
const de_AddressTransfer = (output: any, context: __SerdeContext): AddressTransfer => {
  const contents: any = {};
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = __expectString(output["publicIp"]);
  }
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = __expectString(output["allocationId"]);
  }
  if (output["transferAccountId"] !== undefined) {
    contents.TransferAccountId = __expectString(output["transferAccountId"]);
  }
  if (output["transferOfferExpirationTimestamp"] !== undefined) {
    contents.TransferOfferExpirationTimestamp = __expectNonNull(
      __parseRfc3339DateTimeWithOffset(output["transferOfferExpirationTimestamp"])
    );
  }
  if (output["transferOfferAcceptedTimestamp"] !== undefined) {
    contents.TransferOfferAcceptedTimestamp = __expectNonNull(
      __parseRfc3339DateTimeWithOffset(output["transferOfferAcceptedTimestamp"])
    );
  }
  if (output["addressTransferStatus"] !== undefined) {
    contents.AddressTransferStatus = __expectString(output["addressTransferStatus"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AddressTransferList
 */
const de_AddressTransferList = (output: any, context: __SerdeContext): AddressTransfer[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AddressTransfer(entry, context);
    });
};

/**
 * deserializeAws_ec2AdvertiseByoipCidrResult
 */
const de_AdvertiseByoipCidrResult = (output: any, context: __SerdeContext): AdvertiseByoipCidrResult => {
  const contents: any = {};
  if (output["byoipCidr"] !== undefined) {
    contents.ByoipCidr = de_ByoipCidr(output["byoipCidr"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AllocateAddressResult
 */
const de_AllocateAddressResult = (output: any, context: __SerdeContext): AllocateAddressResult => {
  const contents: any = {};
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = __expectString(output["publicIp"]);
  }
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = __expectString(output["allocationId"]);
  }
  if (output["publicIpv4Pool"] !== undefined) {
    contents.PublicIpv4Pool = __expectString(output["publicIpv4Pool"]);
  }
  if (output["networkBorderGroup"] !== undefined) {
    contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
  }
  if (output["domain"] !== undefined) {
    contents.Domain = __expectString(output["domain"]);
  }
  if (output["customerOwnedIp"] !== undefined) {
    contents.CustomerOwnedIp = __expectString(output["customerOwnedIp"]);
  }
  if (output["customerOwnedIpv4Pool"] !== undefined) {
    contents.CustomerOwnedIpv4Pool = __expectString(output["customerOwnedIpv4Pool"]);
  }
  if (output["carrierIp"] !== undefined) {
    contents.CarrierIp = __expectString(output["carrierIp"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AllocateHostsResult
 */
const de_AllocateHostsResult = (output: any, context: __SerdeContext): AllocateHostsResult => {
  const contents: any = {};
  if (output.hostIdSet === "") {
    contents.HostIds = [];
  } else if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
    contents.HostIds = de_ResponseHostIdList(__getArrayIfSingleItem(output["hostIdSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AllocateIpamPoolCidrResult
 */
const de_AllocateIpamPoolCidrResult = (output: any, context: __SerdeContext): AllocateIpamPoolCidrResult => {
  const contents: any = {};
  if (output["ipamPoolAllocation"] !== undefined) {
    contents.IpamPoolAllocation = de_IpamPoolAllocation(output["ipamPoolAllocation"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AllowedInstanceTypeSet
 */
const de_AllowedInstanceTypeSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2AllowedPrincipal
 */
const de_AllowedPrincipal = (output: any, context: __SerdeContext): AllowedPrincipal => {
  const contents: any = {};
  if (output["principalType"] !== undefined) {
    contents.PrincipalType = __expectString(output["principalType"]);
  }
  if (output["principal"] !== undefined) {
    contents.Principal = __expectString(output["principal"]);
  }
  if (output["servicePermissionId"] !== undefined) {
    contents.ServicePermissionId = __expectString(output["servicePermissionId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["serviceId"] !== undefined) {
    contents.ServiceId = __expectString(output["serviceId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AllowedPrincipalSet
 */
const de_AllowedPrincipalSet = (output: any, context: __SerdeContext): AllowedPrincipal[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AllowedPrincipal(entry, context);
    });
};

/**
 * deserializeAws_ec2AlternatePathHint
 */
const de_AlternatePathHint = (output: any, context: __SerdeContext): AlternatePathHint => {
  const contents: any = {};
  if (output["componentId"] !== undefined) {
    contents.ComponentId = __expectString(output["componentId"]);
  }
  if (output["componentArn"] !== undefined) {
    contents.ComponentArn = __expectString(output["componentArn"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AlternatePathHintList
 */
const de_AlternatePathHintList = (output: any, context: __SerdeContext): AlternatePathHint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AlternatePathHint(entry, context);
    });
};

/**
 * deserializeAws_ec2AnalysisAclRule
 */
const de_AnalysisAclRule = (output: any, context: __SerdeContext): AnalysisAclRule => {
  const contents: any = {};
  if (output["cidr"] !== undefined) {
    contents.Cidr = __expectString(output["cidr"]);
  }
  if (output["egress"] !== undefined) {
    contents.Egress = __parseBoolean(output["egress"]);
  }
  if (output["portRange"] !== undefined) {
    contents.PortRange = de_PortRange(output["portRange"], context);
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = __expectString(output["protocol"]);
  }
  if (output["ruleAction"] !== undefined) {
    contents.RuleAction = __expectString(output["ruleAction"]);
  }
  if (output["ruleNumber"] !== undefined) {
    contents.RuleNumber = __strictParseInt32(output["ruleNumber"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AnalysisComponent
 */
const de_AnalysisComponent = (output: any, context: __SerdeContext): AnalysisComponent => {
  const contents: any = {};
  if (output["id"] !== undefined) {
    contents.Id = __expectString(output["id"]);
  }
  if (output["arn"] !== undefined) {
    contents.Arn = __expectString(output["arn"]);
  }
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AnalysisComponentList
 */
const de_AnalysisComponentList = (output: any, context: __SerdeContext): AnalysisComponent[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AnalysisComponent(entry, context);
    });
};

/**
 * deserializeAws_ec2AnalysisLoadBalancerListener
 */
const de_AnalysisLoadBalancerListener = (output: any, context: __SerdeContext): AnalysisLoadBalancerListener => {
  const contents: any = {};
  if (output["loadBalancerPort"] !== undefined) {
    contents.LoadBalancerPort = __strictParseInt32(output["loadBalancerPort"]) as number;
  }
  if (output["instancePort"] !== undefined) {
    contents.InstancePort = __strictParseInt32(output["instancePort"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AnalysisLoadBalancerTarget
 */
const de_AnalysisLoadBalancerTarget = (output: any, context: __SerdeContext): AnalysisLoadBalancerTarget => {
  const contents: any = {};
  if (output["address"] !== undefined) {
    contents.Address = __expectString(output["address"]);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["instance"] !== undefined) {
    contents.Instance = de_AnalysisComponent(output["instance"], context);
  }
  if (output["port"] !== undefined) {
    contents.Port = __strictParseInt32(output["port"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AnalysisPacketHeader
 */
const de_AnalysisPacketHeader = (output: any, context: __SerdeContext): AnalysisPacketHeader => {
  const contents: any = {};
  if (output.destinationAddressSet === "") {
    contents.DestinationAddresses = [];
  } else if (output["destinationAddressSet"] !== undefined && output["destinationAddressSet"]["item"] !== undefined) {
    contents.DestinationAddresses = de_IpAddressList(
      __getArrayIfSingleItem(output["destinationAddressSet"]["item"]),
      context
    );
  }
  if (output.destinationPortRangeSet === "") {
    contents.DestinationPortRanges = [];
  } else if (
    output["destinationPortRangeSet"] !== undefined &&
    output["destinationPortRangeSet"]["item"] !== undefined
  ) {
    contents.DestinationPortRanges = de_PortRangeList(
      __getArrayIfSingleItem(output["destinationPortRangeSet"]["item"]),
      context
    );
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = __expectString(output["protocol"]);
  }
  if (output.sourceAddressSet === "") {
    contents.SourceAddresses = [];
  } else if (output["sourceAddressSet"] !== undefined && output["sourceAddressSet"]["item"] !== undefined) {
    contents.SourceAddresses = de_IpAddressList(__getArrayIfSingleItem(output["sourceAddressSet"]["item"]), context);
  }
  if (output.sourcePortRangeSet === "") {
    contents.SourcePortRanges = [];
  } else if (output["sourcePortRangeSet"] !== undefined && output["sourcePortRangeSet"]["item"] !== undefined) {
    contents.SourcePortRanges = de_PortRangeList(__getArrayIfSingleItem(output["sourcePortRangeSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AnalysisRouteTableRoute
 */
const de_AnalysisRouteTableRoute = (output: any, context: __SerdeContext): AnalysisRouteTableRoute => {
  const contents: any = {};
  if (output["destinationCidr"] !== undefined) {
    contents.DestinationCidr = __expectString(output["destinationCidr"]);
  }
  if (output["destinationPrefixListId"] !== undefined) {
    contents.DestinationPrefixListId = __expectString(output["destinationPrefixListId"]);
  }
  if (output["egressOnlyInternetGatewayId"] !== undefined) {
    contents.EgressOnlyInternetGatewayId = __expectString(output["egressOnlyInternetGatewayId"]);
  }
  if (output["gatewayId"] !== undefined) {
    contents.GatewayId = __expectString(output["gatewayId"]);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["natGatewayId"] !== undefined) {
    contents.NatGatewayId = __expectString(output["natGatewayId"]);
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["origin"] !== undefined) {
    contents.Origin = __expectString(output["origin"]);
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
  }
  if (output["vpcPeeringConnectionId"] !== undefined) {
    contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["carrierGatewayId"] !== undefined) {
    contents.CarrierGatewayId = __expectString(output["carrierGatewayId"]);
  }
  if (output["coreNetworkArn"] !== undefined) {
    contents.CoreNetworkArn = __expectString(output["coreNetworkArn"]);
  }
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = __expectString(output["localGatewayId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AnalysisSecurityGroupRule
 */
const de_AnalysisSecurityGroupRule = (output: any, context: __SerdeContext): AnalysisSecurityGroupRule => {
  const contents: any = {};
  if (output["cidr"] !== undefined) {
    contents.Cidr = __expectString(output["cidr"]);
  }
  if (output["direction"] !== undefined) {
    contents.Direction = __expectString(output["direction"]);
  }
  if (output["securityGroupId"] !== undefined) {
    contents.SecurityGroupId = __expectString(output["securityGroupId"]);
  }
  if (output["portRange"] !== undefined) {
    contents.PortRange = de_PortRange(output["portRange"], context);
  }
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = __expectString(output["prefixListId"]);
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = __expectString(output["protocol"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkResult
 */
const de_ApplySecurityGroupsToClientVpnTargetNetworkResult = (
  output: any,
  context: __SerdeContext
): ApplySecurityGroupsToClientVpnTargetNetworkResult => {
  const contents: any = {};
  if (output.securityGroupIds === "") {
    contents.SecurityGroupIds = [];
  } else if (output["securityGroupIds"] !== undefined && output["securityGroupIds"]["item"] !== undefined) {
    contents.SecurityGroupIds = de_ClientVpnSecurityGroupIdSet(
      __getArrayIfSingleItem(output["securityGroupIds"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ArchitectureTypeList
 */
const de_ArchitectureTypeList = (output: any, context: __SerdeContext): ArchitectureType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2ArnList
 */
const de_ArnList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2AssignedPrivateIpAddress
 */
const de_AssignedPrivateIpAddress = (output: any, context: __SerdeContext): AssignedPrivateIpAddress => {
  const contents: any = {};
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssignedPrivateIpAddressList
 */
const de_AssignedPrivateIpAddressList = (output: any, context: __SerdeContext): AssignedPrivateIpAddress[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AssignedPrivateIpAddress(entry, context);
    });
};

/**
 * deserializeAws_ec2AssignIpv6AddressesResult
 */
const de_AssignIpv6AddressesResult = (output: any, context: __SerdeContext): AssignIpv6AddressesResult => {
  const contents: any = {};
  if (output.assignedIpv6Addresses === "") {
    contents.AssignedIpv6Addresses = [];
  } else if (output["assignedIpv6Addresses"] !== undefined && output["assignedIpv6Addresses"]["item"] !== undefined) {
    contents.AssignedIpv6Addresses = de_Ipv6AddressList(
      __getArrayIfSingleItem(output["assignedIpv6Addresses"]["item"]),
      context
    );
  }
  if (output.assignedIpv6PrefixSet === "") {
    contents.AssignedIpv6Prefixes = [];
  } else if (output["assignedIpv6PrefixSet"] !== undefined && output["assignedIpv6PrefixSet"]["item"] !== undefined) {
    contents.AssignedIpv6Prefixes = de_IpPrefixList(
      __getArrayIfSingleItem(output["assignedIpv6PrefixSet"]["item"]),
      context
    );
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssignPrivateIpAddressesResult
 */
const de_AssignPrivateIpAddressesResult = (output: any, context: __SerdeContext): AssignPrivateIpAddressesResult => {
  const contents: any = {};
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output.assignedPrivateIpAddressesSet === "") {
    contents.AssignedPrivateIpAddresses = [];
  } else if (
    output["assignedPrivateIpAddressesSet"] !== undefined &&
    output["assignedPrivateIpAddressesSet"]["item"] !== undefined
  ) {
    contents.AssignedPrivateIpAddresses = de_AssignedPrivateIpAddressList(
      __getArrayIfSingleItem(output["assignedPrivateIpAddressesSet"]["item"]),
      context
    );
  }
  if (output.assignedIpv4PrefixSet === "") {
    contents.AssignedIpv4Prefixes = [];
  } else if (output["assignedIpv4PrefixSet"] !== undefined && output["assignedIpv4PrefixSet"]["item"] !== undefined) {
    contents.AssignedIpv4Prefixes = de_Ipv4PrefixesList(
      __getArrayIfSingleItem(output["assignedIpv4PrefixSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2AssignPrivateNatGatewayAddressResult
 */
const de_AssignPrivateNatGatewayAddressResult = (
  output: any,
  context: __SerdeContext
): AssignPrivateNatGatewayAddressResult => {
  const contents: any = {};
  if (output["natGatewayId"] !== undefined) {
    contents.NatGatewayId = __expectString(output["natGatewayId"]);
  }
  if (output.natGatewayAddressSet === "") {
    contents.NatGatewayAddresses = [];
  } else if (output["natGatewayAddressSet"] !== undefined && output["natGatewayAddressSet"]["item"] !== undefined) {
    contents.NatGatewayAddresses = de_NatGatewayAddressList(
      __getArrayIfSingleItem(output["natGatewayAddressSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateAddressResult
 */
const de_AssociateAddressResult = (output: any, context: __SerdeContext): AssociateAddressResult => {
  const contents: any = {};
  if (output["associationId"] !== undefined) {
    contents.AssociationId = __expectString(output["associationId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateClientVpnTargetNetworkResult
 */
const de_AssociateClientVpnTargetNetworkResult = (
  output: any,
  context: __SerdeContext
): AssociateClientVpnTargetNetworkResult => {
  const contents: any = {};
  if (output["associationId"] !== undefined) {
    contents.AssociationId = __expectString(output["associationId"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_AssociationStatus(output["status"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociatedRole
 */
const de_AssociatedRole = (output: any, context: __SerdeContext): AssociatedRole => {
  const contents: any = {};
  if (output["associatedRoleArn"] !== undefined) {
    contents.AssociatedRoleArn = __expectString(output["associatedRoleArn"]);
  }
  if (output["certificateS3BucketName"] !== undefined) {
    contents.CertificateS3BucketName = __expectString(output["certificateS3BucketName"]);
  }
  if (output["certificateS3ObjectKey"] !== undefined) {
    contents.CertificateS3ObjectKey = __expectString(output["certificateS3ObjectKey"]);
  }
  if (output["encryptionKmsKeyId"] !== undefined) {
    contents.EncryptionKmsKeyId = __expectString(output["encryptionKmsKeyId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociatedRolesList
 */
const de_AssociatedRolesList = (output: any, context: __SerdeContext): AssociatedRole[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AssociatedRole(entry, context);
    });
};

/**
 * deserializeAws_ec2AssociatedTargetNetwork
 */
const de_AssociatedTargetNetwork = (output: any, context: __SerdeContext): AssociatedTargetNetwork => {
  const contents: any = {};
  if (output["networkId"] !== undefined) {
    contents.NetworkId = __expectString(output["networkId"]);
  }
  if (output["networkType"] !== undefined) {
    contents.NetworkType = __expectString(output["networkType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociatedTargetNetworkSet
 */
const de_AssociatedTargetNetworkSet = (output: any, context: __SerdeContext): AssociatedTargetNetwork[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AssociatedTargetNetwork(entry, context);
    });
};

/**
 * deserializeAws_ec2AssociateEnclaveCertificateIamRoleResult
 */
const de_AssociateEnclaveCertificateIamRoleResult = (
  output: any,
  context: __SerdeContext
): AssociateEnclaveCertificateIamRoleResult => {
  const contents: any = {};
  if (output["certificateS3BucketName"] !== undefined) {
    contents.CertificateS3BucketName = __expectString(output["certificateS3BucketName"]);
  }
  if (output["certificateS3ObjectKey"] !== undefined) {
    contents.CertificateS3ObjectKey = __expectString(output["certificateS3ObjectKey"]);
  }
  if (output["encryptionKmsKeyId"] !== undefined) {
    contents.EncryptionKmsKeyId = __expectString(output["encryptionKmsKeyId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateIamInstanceProfileResult
 */
const de_AssociateIamInstanceProfileResult = (
  output: any,
  context: __SerdeContext
): AssociateIamInstanceProfileResult => {
  const contents: any = {};
  if (output["iamInstanceProfileAssociation"] !== undefined) {
    contents.IamInstanceProfileAssociation = de_IamInstanceProfileAssociation(
      output["iamInstanceProfileAssociation"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateInstanceEventWindowResult
 */
const de_AssociateInstanceEventWindowResult = (
  output: any,
  context: __SerdeContext
): AssociateInstanceEventWindowResult => {
  const contents: any = {};
  if (output["instanceEventWindow"] !== undefined) {
    contents.InstanceEventWindow = de_InstanceEventWindow(output["instanceEventWindow"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateIpamResourceDiscoveryResult
 */
const de_AssociateIpamResourceDiscoveryResult = (
  output: any,
  context: __SerdeContext
): AssociateIpamResourceDiscoveryResult => {
  const contents: any = {};
  if (output["ipamResourceDiscoveryAssociation"] !== undefined) {
    contents.IpamResourceDiscoveryAssociation = de_IpamResourceDiscoveryAssociation(
      output["ipamResourceDiscoveryAssociation"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateNatGatewayAddressResult
 */
const de_AssociateNatGatewayAddressResult = (
  output: any,
  context: __SerdeContext
): AssociateNatGatewayAddressResult => {
  const contents: any = {};
  if (output["natGatewayId"] !== undefined) {
    contents.NatGatewayId = __expectString(output["natGatewayId"]);
  }
  if (output.natGatewayAddressSet === "") {
    contents.NatGatewayAddresses = [];
  } else if (output["natGatewayAddressSet"] !== undefined && output["natGatewayAddressSet"]["item"] !== undefined) {
    contents.NatGatewayAddresses = de_NatGatewayAddressList(
      __getArrayIfSingleItem(output["natGatewayAddressSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateRouteTableResult
 */
const de_AssociateRouteTableResult = (output: any, context: __SerdeContext): AssociateRouteTableResult => {
  const contents: any = {};
  if (output["associationId"] !== undefined) {
    contents.AssociationId = __expectString(output["associationId"]);
  }
  if (output["associationState"] !== undefined) {
    contents.AssociationState = de_RouteTableAssociationState(output["associationState"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateSubnetCidrBlockResult
 */
const de_AssociateSubnetCidrBlockResult = (output: any, context: __SerdeContext): AssociateSubnetCidrBlockResult => {
  const contents: any = {};
  if (output["ipv6CidrBlockAssociation"] !== undefined) {
    contents.Ipv6CidrBlockAssociation = de_SubnetIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateTransitGatewayMulticastDomainResult
 */
const de_AssociateTransitGatewayMulticastDomainResult = (
  output: any,
  context: __SerdeContext
): AssociateTransitGatewayMulticastDomainResult => {
  const contents: any = {};
  if (output["associations"] !== undefined) {
    contents.Associations = de_TransitGatewayMulticastDomainAssociations(output["associations"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateTransitGatewayPolicyTableResult
 */
const de_AssociateTransitGatewayPolicyTableResult = (
  output: any,
  context: __SerdeContext
): AssociateTransitGatewayPolicyTableResult => {
  const contents: any = {};
  if (output["association"] !== undefined) {
    contents.Association = de_TransitGatewayPolicyTableAssociation(output["association"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateTransitGatewayRouteTableResult
 */
const de_AssociateTransitGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): AssociateTransitGatewayRouteTableResult => {
  const contents: any = {};
  if (output["association"] !== undefined) {
    contents.Association = de_TransitGatewayAssociation(output["association"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateTrunkInterfaceResult
 */
const de_AssociateTrunkInterfaceResult = (output: any, context: __SerdeContext): AssociateTrunkInterfaceResult => {
  const contents: any = {};
  if (output["interfaceAssociation"] !== undefined) {
    contents.InterfaceAssociation = de_TrunkInterfaceAssociation(output["interfaceAssociation"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateVpcCidrBlockResult
 */
const de_AssociateVpcCidrBlockResult = (output: any, context: __SerdeContext): AssociateVpcCidrBlockResult => {
  const contents: any = {};
  if (output["ipv6CidrBlockAssociation"] !== undefined) {
    contents.Ipv6CidrBlockAssociation = de_VpcIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
  }
  if (output["cidrBlockAssociation"] !== undefined) {
    contents.CidrBlockAssociation = de_VpcCidrBlockAssociation(output["cidrBlockAssociation"], context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociationStatus
 */
const de_AssociationStatus = (output: any, context: __SerdeContext): AssociationStatus => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttachClassicLinkVpcResult
 */
const de_AttachClassicLinkVpcResult = (output: any, context: __SerdeContext): AttachClassicLinkVpcResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttachmentEnaSrdSpecification
 */
const de_AttachmentEnaSrdSpecification = (output: any, context: __SerdeContext): AttachmentEnaSrdSpecification => {
  const contents: any = {};
  if (output["enaSrdEnabled"] !== undefined) {
    contents.EnaSrdEnabled = __parseBoolean(output["enaSrdEnabled"]);
  }
  if (output["enaSrdUdpSpecification"] !== undefined) {
    contents.EnaSrdUdpSpecification = de_AttachmentEnaSrdUdpSpecification(output["enaSrdUdpSpecification"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttachmentEnaSrdUdpSpecification
 */
const de_AttachmentEnaSrdUdpSpecification = (
  output: any,
  context: __SerdeContext
): AttachmentEnaSrdUdpSpecification => {
  const contents: any = {};
  if (output["enaSrdUdpEnabled"] !== undefined) {
    contents.EnaSrdUdpEnabled = __parseBoolean(output["enaSrdUdpEnabled"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttachNetworkInterfaceResult
 */
const de_AttachNetworkInterfaceResult = (output: any, context: __SerdeContext): AttachNetworkInterfaceResult => {
  const contents: any = {};
  if (output["attachmentId"] !== undefined) {
    contents.AttachmentId = __expectString(output["attachmentId"]);
  }
  if (output["networkCardIndex"] !== undefined) {
    contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AttachVerifiedAccessTrustProviderResult
 */
const de_AttachVerifiedAccessTrustProviderResult = (
  output: any,
  context: __SerdeContext
): AttachVerifiedAccessTrustProviderResult => {
  const contents: any = {};
  if (output["verifiedAccessTrustProvider"] !== undefined) {
    contents.VerifiedAccessTrustProvider = de_VerifiedAccessTrustProvider(
      output["verifiedAccessTrustProvider"],
      context
    );
  }
  if (output["verifiedAccessInstance"] !== undefined) {
    contents.VerifiedAccessInstance = de_VerifiedAccessInstance(output["verifiedAccessInstance"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttachVpnGatewayResult
 */
const de_AttachVpnGatewayResult = (output: any, context: __SerdeContext): AttachVpnGatewayResult => {
  const contents: any = {};
  if (output["attachment"] !== undefined) {
    contents.VpcAttachment = de_VpcAttachment(output["attachment"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttributeBooleanValue
 */
const de_AttributeBooleanValue = (output: any, context: __SerdeContext): AttributeBooleanValue => {
  const contents: any = {};
  if (output["value"] !== undefined) {
    contents.Value = __parseBoolean(output["value"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttributeValue
 */
const de_AttributeValue = (output: any, context: __SerdeContext): AttributeValue => {
  const contents: any = {};
  if (output["value"] !== undefined) {
    contents.Value = __expectString(output["value"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AuthorizationRule
 */
const de_AuthorizationRule = (output: any, context: __SerdeContext): AuthorizationRule => {
  const contents: any = {};
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = __expectString(output["groupId"]);
  }
  if (output["accessAll"] !== undefined) {
    contents.AccessAll = __parseBoolean(output["accessAll"]);
  }
  if (output["destinationCidr"] !== undefined) {
    contents.DestinationCidr = __expectString(output["destinationCidr"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_ClientVpnAuthorizationRuleStatus(output["status"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AuthorizationRuleSet
 */
const de_AuthorizationRuleSet = (output: any, context: __SerdeContext): AuthorizationRule[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AuthorizationRule(entry, context);
    });
};

/**
 * deserializeAws_ec2AuthorizeClientVpnIngressResult
 */
const de_AuthorizeClientVpnIngressResult = (output: any, context: __SerdeContext): AuthorizeClientVpnIngressResult => {
  const contents: any = {};
  if (output["status"] !== undefined) {
    contents.Status = de_ClientVpnAuthorizationRuleStatus(output["status"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AuthorizeSecurityGroupEgressResult
 */
const de_AuthorizeSecurityGroupEgressResult = (
  output: any,
  context: __SerdeContext
): AuthorizeSecurityGroupEgressResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  if (output.securityGroupRuleSet === "") {
    contents.SecurityGroupRules = [];
  } else if (output["securityGroupRuleSet"] !== undefined && output["securityGroupRuleSet"]["item"] !== undefined) {
    contents.SecurityGroupRules = de_SecurityGroupRuleList(
      __getArrayIfSingleItem(output["securityGroupRuleSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2AuthorizeSecurityGroupIngressResult
 */
const de_AuthorizeSecurityGroupIngressResult = (
  output: any,
  context: __SerdeContext
): AuthorizeSecurityGroupIngressResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  if (output.securityGroupRuleSet === "") {
    contents.SecurityGroupRules = [];
  } else if (output["securityGroupRuleSet"] !== undefined && output["securityGroupRuleSet"]["item"] !== undefined) {
    contents.SecurityGroupRules = de_SecurityGroupRuleList(
      __getArrayIfSingleItem(output["securityGroupRuleSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2AvailabilityZone
 */
const de_AvailabilityZone = (output: any, context: __SerdeContext): AvailabilityZone => {
  const contents: any = {};
  if (output["zoneState"] !== undefined) {
    contents.State = __expectString(output["zoneState"]);
  }
  if (output["optInStatus"] !== undefined) {
    contents.OptInStatus = __expectString(output["optInStatus"]);
  }
  if (output.messageSet === "") {
    contents.Messages = [];
  } else if (output["messageSet"] !== undefined && output["messageSet"]["item"] !== undefined) {
    contents.Messages = de_AvailabilityZoneMessageList(__getArrayIfSingleItem(output["messageSet"]["item"]), context);
  }
  if (output["regionName"] !== undefined) {
    contents.RegionName = __expectString(output["regionName"]);
  }
  if (output["zoneName"] !== undefined) {
    contents.ZoneName = __expectString(output["zoneName"]);
  }
  if (output["zoneId"] !== undefined) {
    contents.ZoneId = __expectString(output["zoneId"]);
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = __expectString(output["groupName"]);
  }
  if (output["networkBorderGroup"] !== undefined) {
    contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
  }
  if (output["zoneType"] !== undefined) {
    contents.ZoneType = __expectString(output["zoneType"]);
  }
  if (output["parentZoneName"] !== undefined) {
    contents.ParentZoneName = __expectString(output["parentZoneName"]);
  }
  if (output["parentZoneId"] !== undefined) {
    contents.ParentZoneId = __expectString(output["parentZoneId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AvailabilityZoneList
 */
const de_AvailabilityZoneList = (output: any, context: __SerdeContext): AvailabilityZone[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AvailabilityZone(entry, context);
    });
};

/**
 * deserializeAws_ec2AvailabilityZoneMessage
 */
const de_AvailabilityZoneMessage = (output: any, context: __SerdeContext): AvailabilityZoneMessage => {
  const contents: any = {};
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AvailabilityZoneMessageList
 */
const de_AvailabilityZoneMessageList = (output: any, context: __SerdeContext): AvailabilityZoneMessage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AvailabilityZoneMessage(entry, context);
    });
};

/**
 * deserializeAws_ec2AvailableCapacity
 */
const de_AvailableCapacity = (output: any, context: __SerdeContext): AvailableCapacity => {
  const contents: any = {};
  if (output.availableInstanceCapacity === "") {
    contents.AvailableInstanceCapacity = [];
  } else if (
    output["availableInstanceCapacity"] !== undefined &&
    output["availableInstanceCapacity"]["item"] !== undefined
  ) {
    contents.AvailableInstanceCapacity = de_AvailableInstanceCapacityList(
      __getArrayIfSingleItem(output["availableInstanceCapacity"]["item"]),
      context
    );
  }
  if (output["availableVCpus"] !== undefined) {
    contents.AvailableVCpus = __strictParseInt32(output["availableVCpus"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AvailableInstanceCapacityList
 */
const de_AvailableInstanceCapacityList = (output: any, context: __SerdeContext): InstanceCapacity[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceCapacity(entry, context);
    });
};

/**
 * deserializeAws_ec2BaselineEbsBandwidthMbps
 */
const de_BaselineEbsBandwidthMbps = (output: any, context: __SerdeContext): BaselineEbsBandwidthMbps => {
  const contents: any = {};
  if (output["min"] !== undefined) {
    contents.Min = __strictParseInt32(output["min"]) as number;
  }
  if (output["max"] !== undefined) {
    contents.Max = __strictParseInt32(output["max"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2BlockDeviceMapping
 */
const de_BlockDeviceMapping = (output: any, context: __SerdeContext): BlockDeviceMapping => {
  const contents: any = {};
  if (output["deviceName"] !== undefined) {
    contents.DeviceName = __expectString(output["deviceName"]);
  }
  if (output["virtualName"] !== undefined) {
    contents.VirtualName = __expectString(output["virtualName"]);
  }
  if (output["ebs"] !== undefined) {
    contents.Ebs = de_EbsBlockDevice(output["ebs"], context);
  }
  if (output["noDevice"] !== undefined) {
    contents.NoDevice = __expectString(output["noDevice"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2BlockDeviceMappingList
 */
const de_BlockDeviceMappingList = (output: any, context: __SerdeContext): BlockDeviceMapping[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_BlockDeviceMapping(entry, context);
    });
};

/**
 * deserializeAws_ec2BootModeTypeList
 */
const de_BootModeTypeList = (output: any, context: __SerdeContext): BootModeType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2BundleInstanceResult
 */
const de_BundleInstanceResult = (output: any, context: __SerdeContext): BundleInstanceResult => {
  const contents: any = {};
  if (output["bundleInstanceTask"] !== undefined) {
    contents.BundleTask = de_BundleTask(output["bundleInstanceTask"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2BundleTask
 */
const de_BundleTask = (output: any, context: __SerdeContext): BundleTask => {
  const contents: any = {};
  if (output["bundleId"] !== undefined) {
    contents.BundleId = __expectString(output["bundleId"]);
  }
  if (output["error"] !== undefined) {
    contents.BundleTaskError = de_BundleTaskError(output["error"], context);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["progress"] !== undefined) {
    contents.Progress = __expectString(output["progress"]);
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["storage"] !== undefined) {
    contents.Storage = de_Storage(output["storage"], context);
  }
  if (output["updateTime"] !== undefined) {
    contents.UpdateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["updateTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2BundleTaskError
 */
const de_BundleTaskError = (output: any, context: __SerdeContext): BundleTaskError => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2BundleTaskList
 */
const de_BundleTaskList = (output: any, context: __SerdeContext): BundleTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_BundleTask(entry, context);
    });
};

/**
 * deserializeAws_ec2ByoipCidr
 */
const de_ByoipCidr = (output: any, context: __SerdeContext): ByoipCidr => {
  const contents: any = {};
  if (output["cidr"] !== undefined) {
    contents.Cidr = __expectString(output["cidr"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ByoipCidrSet
 */
const de_ByoipCidrSet = (output: any, context: __SerdeContext): ByoipCidr[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ByoipCidr(entry, context);
    });
};

/**
 * deserializeAws_ec2CancelBundleTaskResult
 */
const de_CancelBundleTaskResult = (output: any, context: __SerdeContext): CancelBundleTaskResult => {
  const contents: any = {};
  if (output["bundleInstanceTask"] !== undefined) {
    contents.BundleTask = de_BundleTask(output["bundleInstanceTask"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelCapacityReservationFleetError
 */
const de_CancelCapacityReservationFleetError = (
  output: any,
  context: __SerdeContext
): CancelCapacityReservationFleetError => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelCapacityReservationFleetsResult
 */
const de_CancelCapacityReservationFleetsResult = (
  output: any,
  context: __SerdeContext
): CancelCapacityReservationFleetsResult => {
  const contents: any = {};
  if (output.successfulFleetCancellationSet === "") {
    contents.SuccessfulFleetCancellations = [];
  } else if (
    output["successfulFleetCancellationSet"] !== undefined &&
    output["successfulFleetCancellationSet"]["item"] !== undefined
  ) {
    contents.SuccessfulFleetCancellations = de_CapacityReservationFleetCancellationStateSet(
      __getArrayIfSingleItem(output["successfulFleetCancellationSet"]["item"]),
      context
    );
  }
  if (output.failedFleetCancellationSet === "") {
    contents.FailedFleetCancellations = [];
  } else if (
    output["failedFleetCancellationSet"] !== undefined &&
    output["failedFleetCancellationSet"]["item"] !== undefined
  ) {
    contents.FailedFleetCancellations = de_FailedCapacityReservationFleetCancellationResultSet(
      __getArrayIfSingleItem(output["failedFleetCancellationSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelCapacityReservationResult
 */
const de_CancelCapacityReservationResult = (output: any, context: __SerdeContext): CancelCapacityReservationResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelImageLaunchPermissionResult
 */
const de_CancelImageLaunchPermissionResult = (
  output: any,
  context: __SerdeContext
): CancelImageLaunchPermissionResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelImportTaskResult
 */
const de_CancelImportTaskResult = (output: any, context: __SerdeContext): CancelImportTaskResult => {
  const contents: any = {};
  if (output["importTaskId"] !== undefined) {
    contents.ImportTaskId = __expectString(output["importTaskId"]);
  }
  if (output["previousState"] !== undefined) {
    contents.PreviousState = __expectString(output["previousState"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelledSpotInstanceRequest
 */
const de_CancelledSpotInstanceRequest = (output: any, context: __SerdeContext): CancelledSpotInstanceRequest => {
  const contents: any = {};
  if (output["spotInstanceRequestId"] !== undefined) {
    contents.SpotInstanceRequestId = __expectString(output["spotInstanceRequestId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelledSpotInstanceRequestList
 */
const de_CancelledSpotInstanceRequestList = (output: any, context: __SerdeContext): CancelledSpotInstanceRequest[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CancelledSpotInstanceRequest(entry, context);
    });
};

/**
 * deserializeAws_ec2CancelReservedInstancesListingResult
 */
const de_CancelReservedInstancesListingResult = (
  output: any,
  context: __SerdeContext
): CancelReservedInstancesListingResult => {
  const contents: any = {};
  if (output.reservedInstancesListingsSet === "") {
    contents.ReservedInstancesListings = [];
  } else if (
    output["reservedInstancesListingsSet"] !== undefined &&
    output["reservedInstancesListingsSet"]["item"] !== undefined
  ) {
    contents.ReservedInstancesListings = de_ReservedInstancesListingList(
      __getArrayIfSingleItem(output["reservedInstancesListingsSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsError
 */
const de_CancelSpotFleetRequestsError = (output: any, context: __SerdeContext): CancelSpotFleetRequestsError => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsErrorItem
 */
const de_CancelSpotFleetRequestsErrorItem = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsErrorItem => {
  const contents: any = {};
  if (output["error"] !== undefined) {
    contents.Error = de_CancelSpotFleetRequestsError(output["error"], context);
  }
  if (output["spotFleetRequestId"] !== undefined) {
    contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsErrorSet
 */
const de_CancelSpotFleetRequestsErrorSet = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CancelSpotFleetRequestsErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsResponse
 */
const de_CancelSpotFleetRequestsResponse = (output: any, context: __SerdeContext): CancelSpotFleetRequestsResponse => {
  const contents: any = {};
  if (output.successfulFleetRequestSet === "") {
    contents.SuccessfulFleetRequests = [];
  } else if (
    output["successfulFleetRequestSet"] !== undefined &&
    output["successfulFleetRequestSet"]["item"] !== undefined
  ) {
    contents.SuccessfulFleetRequests = de_CancelSpotFleetRequestsSuccessSet(
      __getArrayIfSingleItem(output["successfulFleetRequestSet"]["item"]),
      context
    );
  }
  if (output.unsuccessfulFleetRequestSet === "") {
    contents.UnsuccessfulFleetRequests = [];
  } else if (
    output["unsuccessfulFleetRequestSet"] !== undefined &&
    output["unsuccessfulFleetRequestSet"]["item"] !== undefined
  ) {
    contents.UnsuccessfulFleetRequests = de_CancelSpotFleetRequestsErrorSet(
      __getArrayIfSingleItem(output["unsuccessfulFleetRequestSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsSuccessItem
 */
const de_CancelSpotFleetRequestsSuccessItem = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsSuccessItem => {
  const contents: any = {};
  if (output["currentSpotFleetRequestState"] !== undefined) {
    contents.CurrentSpotFleetRequestState = __expectString(output["currentSpotFleetRequestState"]);
  }
  if (output["previousSpotFleetRequestState"] !== undefined) {
    contents.PreviousSpotFleetRequestState = __expectString(output["previousSpotFleetRequestState"]);
  }
  if (output["spotFleetRequestId"] !== undefined) {
    contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsSuccessSet
 */
const de_CancelSpotFleetRequestsSuccessSet = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CancelSpotFleetRequestsSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2CancelSpotInstanceRequestsResult
 */
const de_CancelSpotInstanceRequestsResult = (
  output: any,
  context: __SerdeContext
): CancelSpotInstanceRequestsResult => {
  const contents: any = {};
  if (output.spotInstanceRequestSet === "") {
    contents.CancelledSpotInstanceRequests = [];
  } else if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
    contents.CancelledSpotInstanceRequests = de_CancelledSpotInstanceRequestList(
      __getArrayIfSingleItem(output["spotInstanceRequestSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityAllocation
 */
const de_CapacityAllocation = (output: any, context: __SerdeContext): CapacityAllocation => {
  const contents: any = {};
  if (output["allocationType"] !== undefined) {
    contents.AllocationType = __expectString(output["allocationType"]);
  }
  if (output["count"] !== undefined) {
    contents.Count = __strictParseInt32(output["count"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityAllocations
 */
const de_CapacityAllocations = (output: any, context: __SerdeContext): CapacityAllocation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CapacityAllocation(entry, context);
    });
};

/**
 * deserializeAws_ec2CapacityReservation
 */
const de_CapacityReservation = (output: any, context: __SerdeContext): CapacityReservation => {
  const contents: any = {};
  if (output["capacityReservationId"] !== undefined) {
    contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["capacityReservationArn"] !== undefined) {
    contents.CapacityReservationArn = __expectString(output["capacityReservationArn"]);
  }
  if (output["availabilityZoneId"] !== undefined) {
    contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["instancePlatform"] !== undefined) {
    contents.InstancePlatform = __expectString(output["instancePlatform"]);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["tenancy"] !== undefined) {
    contents.Tenancy = __expectString(output["tenancy"]);
  }
  if (output["totalInstanceCount"] !== undefined) {
    contents.TotalInstanceCount = __strictParseInt32(output["totalInstanceCount"]) as number;
  }
  if (output["availableInstanceCount"] !== undefined) {
    contents.AvailableInstanceCount = __strictParseInt32(output["availableInstanceCount"]) as number;
  }
  if (output["ebsOptimized"] !== undefined) {
    contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
  }
  if (output["ephemeralStorage"] !== undefined) {
    contents.EphemeralStorage = __parseBoolean(output["ephemeralStorage"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["startDate"] !== undefined) {
    contents.StartDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startDate"]));
  }
  if (output["endDate"] !== undefined) {
    contents.EndDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["endDate"]));
  }
  if (output["endDateType"] !== undefined) {
    contents.EndDateType = __expectString(output["endDateType"]);
  }
  if (output["instanceMatchCriteria"] !== undefined) {
    contents.InstanceMatchCriteria = __expectString(output["instanceMatchCriteria"]);
  }
  if (output["createDate"] !== undefined) {
    contents.CreateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createDate"]));
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output["capacityReservationFleetId"] !== undefined) {
    contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
  }
  if (output["placementGroupArn"] !== undefined) {
    contents.PlacementGroupArn = __expectString(output["placementGroupArn"]);
  }
  if (output.capacityAllocationSet === "") {
    contents.CapacityAllocations = [];
  } else if (output["capacityAllocationSet"] !== undefined && output["capacityAllocationSet"]["item"] !== undefined) {
    contents.CapacityAllocations = de_CapacityAllocations(
      __getArrayIfSingleItem(output["capacityAllocationSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityReservationFleet
 */
const de_CapacityReservationFleet = (output: any, context: __SerdeContext): CapacityReservationFleet => {
  const contents: any = {};
  if (output["capacityReservationFleetId"] !== undefined) {
    contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
  }
  if (output["capacityReservationFleetArn"] !== undefined) {
    contents.CapacityReservationFleetArn = __expectString(output["capacityReservationFleetArn"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["totalTargetCapacity"] !== undefined) {
    contents.TotalTargetCapacity = __strictParseInt32(output["totalTargetCapacity"]) as number;
  }
  if (output["totalFulfilledCapacity"] !== undefined) {
    contents.TotalFulfilledCapacity = __strictParseFloat(output["totalFulfilledCapacity"]) as number;
  }
  if (output["tenancy"] !== undefined) {
    contents.Tenancy = __expectString(output["tenancy"]);
  }
  if (output["endDate"] !== undefined) {
    contents.EndDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["endDate"]));
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
  }
  if (output["instanceMatchCriteria"] !== undefined) {
    contents.InstanceMatchCriteria = __expectString(output["instanceMatchCriteria"]);
  }
  if (output["allocationStrategy"] !== undefined) {
    contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
  }
  if (output.instanceTypeSpecificationSet === "") {
    contents.InstanceTypeSpecifications = [];
  } else if (
    output["instanceTypeSpecificationSet"] !== undefined &&
    output["instanceTypeSpecificationSet"]["item"] !== undefined
  ) {
    contents.InstanceTypeSpecifications = de_FleetCapacityReservationSet(
      __getArrayIfSingleItem(output["instanceTypeSpecificationSet"]["item"]),
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityReservationFleetCancellationState
 */
const de_CapacityReservationFleetCancellationState = (
  output: any,
  context: __SerdeContext
): CapacityReservationFleetCancellationState => {
  const contents: any = {};
  if (output["currentFleetState"] !== undefined) {
    contents.CurrentFleetState = __expectString(output["currentFleetState"]);
  }
  if (output["previousFleetState"] !== undefined) {
    contents.PreviousFleetState = __expectString(output["previousFleetState"]);
  }
  if (output["capacityReservationFleetId"] !== undefined) {
    contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityReservationFleetCancellationStateSet
 */
const de_CapacityReservationFleetCancellationStateSet = (
  output: any,
  context: __SerdeContext
): CapacityReservationFleetCancellationState[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CapacityReservationFleetCancellationState(entry, context);
    });
};

/**
 * deserializeAws_ec2CapacityReservationFleetSet
 */
const de_CapacityReservationFleetSet = (output: any, context: __SerdeContext): CapacityReservationFleet[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CapacityReservationFleet(entry, context);
    });
};

/**
 * deserializeAws_ec2CapacityReservationGroup
 */
const de_CapacityReservationGroup = (output: any, context: __SerdeContext): CapacityReservationGroup => {
  const contents: any = {};
  if (output["groupArn"] !== undefined) {
    contents.GroupArn = __expectString(output["groupArn"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityReservationGroupSet
 */
const de_CapacityReservationGroupSet = (output: any, context: __SerdeContext): CapacityReservationGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CapacityReservationGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2CapacityReservationOptions
 */
const de_CapacityReservationOptions = (output: any, context: __SerdeContext): CapacityReservationOptions => {
  const contents: any = {};
  if (output["usageStrategy"] !== undefined) {
    contents.UsageStrategy = __expectString(output["usageStrategy"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityReservationSet
 */
const de_CapacityReservationSet = (output: any, context: __SerdeContext): CapacityReservation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CapacityReservation(entry, context);
    });
};

/**
 * deserializeAws_ec2CapacityReservationSpecificationResponse
 */
const de_CapacityReservationSpecificationResponse = (
  output: any,
  context: __SerdeContext
): CapacityReservationSpecificationResponse => {
  const contents: any = {};
  if (output["capacityReservationPreference"] !== undefined) {
    contents.CapacityReservationPreference = __expectString(output["capacityReservationPreference"]);
  }
  if (output["capacityReservationTarget"] !== undefined) {
    contents.CapacityReservationTarget = de_CapacityReservationTargetResponse(
      output["capacityReservationTarget"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityReservationTargetResponse
 */
const de_CapacityReservationTargetResponse = (
  output: any,
  context: __SerdeContext
): CapacityReservationTargetResponse => {
  const contents: any = {};
  if (output["capacityReservationId"] !== undefined) {
    contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
  }
  if (output["capacityReservationResourceGroupArn"] !== undefined) {
    contents.CapacityReservationResourceGroupArn = __expectString(output["capacityReservationResourceGroupArn"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CarrierGateway
 */
const de_CarrierGateway = (output: any, context: __SerdeContext): CarrierGateway => {
  const contents: any = {};
  if (output["carrierGatewayId"] !== undefined) {
    contents.CarrierGatewayId = __expectString(output["carrierGatewayId"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CarrierGatewaySet
 */
const de_CarrierGatewaySet = (output: any, context: __SerdeContext): CarrierGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CarrierGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2CertificateAuthentication
 */
const de_CertificateAuthentication = (output: any, context: __SerdeContext): CertificateAuthentication => {
  const contents: any = {};
  if (output["clientRootCertificateChain"] !== undefined) {
    contents.ClientRootCertificateChain = __expectString(output["clientRootCertificateChain"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CidrBlock
 */
const de_CidrBlock = (output: any, context: __SerdeContext): CidrBlock => {
  const contents: any = {};
  if (output["cidrBlock"] !== undefined) {
    contents.CidrBlock = __expectString(output["cidrBlock"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CidrBlockSet
 */
const de_CidrBlockSet = (output: any, context: __SerdeContext): CidrBlock[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CidrBlock(entry, context);
    });
};

/**
 * deserializeAws_ec2ClassicLinkDnsSupport
 */
const de_ClassicLinkDnsSupport = (output: any, context: __SerdeContext): ClassicLinkDnsSupport => {
  const contents: any = {};
  if (output["classicLinkDnsSupported"] !== undefined) {
    contents.ClassicLinkDnsSupported = __parseBoolean(output["classicLinkDnsSupported"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClassicLinkDnsSupportList
 */
const de_ClassicLinkDnsSupportList = (output: any, context: __SerdeContext): ClassicLinkDnsSupport[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClassicLinkDnsSupport(entry, context);
    });
};

/**
 * deserializeAws_ec2ClassicLinkInstance
 */
const de_ClassicLinkInstance = (output: any, context: __SerdeContext): ClassicLinkInstance => {
  const contents: any = {};
  if (output.groupSet === "") {
    contents.Groups = [];
  } else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClassicLinkInstanceList
 */
const de_ClassicLinkInstanceList = (output: any, context: __SerdeContext): ClassicLinkInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClassicLinkInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2ClassicLoadBalancer
 */
const de_ClassicLoadBalancer = (output: any, context: __SerdeContext): ClassicLoadBalancer => {
  const contents: any = {};
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClassicLoadBalancers
 */
const de_ClassicLoadBalancers = (output: any, context: __SerdeContext): ClassicLoadBalancer[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClassicLoadBalancer(entry, context);
    });
};

/**
 * deserializeAws_ec2ClassicLoadBalancersConfig
 */
const de_ClassicLoadBalancersConfig = (output: any, context: __SerdeContext): ClassicLoadBalancersConfig => {
  const contents: any = {};
  if (output.classicLoadBalancers === "") {
    contents.ClassicLoadBalancers = [];
  } else if (output["classicLoadBalancers"] !== undefined && output["classicLoadBalancers"]["item"] !== undefined) {
    contents.ClassicLoadBalancers = de_ClassicLoadBalancers(
      __getArrayIfSingleItem(output["classicLoadBalancers"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientCertificateRevocationListStatus
 */
const de_ClientCertificateRevocationListStatus = (
  output: any,
  context: __SerdeContext
): ClientCertificateRevocationListStatus => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientConnectResponseOptions
 */
const de_ClientConnectResponseOptions = (output: any, context: __SerdeContext): ClientConnectResponseOptions => {
  const contents: any = {};
  if (output["enabled"] !== undefined) {
    contents.Enabled = __parseBoolean(output["enabled"]);
  }
  if (output["lambdaFunctionArn"] !== undefined) {
    contents.LambdaFunctionArn = __expectString(output["lambdaFunctionArn"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_ClientVpnEndpointAttributeStatus(output["status"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientLoginBannerResponseOptions
 */
const de_ClientLoginBannerResponseOptions = (
  output: any,
  context: __SerdeContext
): ClientLoginBannerResponseOptions => {
  const contents: any = {};
  if (output["enabled"] !== undefined) {
    contents.Enabled = __parseBoolean(output["enabled"]);
  }
  if (output["bannerText"] !== undefined) {
    contents.BannerText = __expectString(output["bannerText"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnAuthentication
 */
const de_ClientVpnAuthentication = (output: any, context: __SerdeContext): ClientVpnAuthentication => {
  const contents: any = {};
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  if (output["activeDirectory"] !== undefined) {
    contents.ActiveDirectory = de_DirectoryServiceAuthentication(output["activeDirectory"], context);
  }
  if (output["mutualAuthentication"] !== undefined) {
    contents.MutualAuthentication = de_CertificateAuthentication(output["mutualAuthentication"], context);
  }
  if (output["federatedAuthentication"] !== undefined) {
    contents.FederatedAuthentication = de_FederatedAuthentication(output["federatedAuthentication"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnAuthenticationList
 */
const de_ClientVpnAuthenticationList = (output: any, context: __SerdeContext): ClientVpnAuthentication[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClientVpnAuthentication(entry, context);
    });
};

/**
 * deserializeAws_ec2ClientVpnAuthorizationRuleStatus
 */
const de_ClientVpnAuthorizationRuleStatus = (
  output: any,
  context: __SerdeContext
): ClientVpnAuthorizationRuleStatus => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnConnection
 */
const de_ClientVpnConnection = (output: any, context: __SerdeContext): ClientVpnConnection => {
  const contents: any = {};
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = __expectString(output["timestamp"]);
  }
  if (output["connectionId"] !== undefined) {
    contents.ConnectionId = __expectString(output["connectionId"]);
  }
  if (output["username"] !== undefined) {
    contents.Username = __expectString(output["username"]);
  }
  if (output["connectionEstablishedTime"] !== undefined) {
    contents.ConnectionEstablishedTime = __expectString(output["connectionEstablishedTime"]);
  }
  if (output["ingressBytes"] !== undefined) {
    contents.IngressBytes = __expectString(output["ingressBytes"]);
  }
  if (output["egressBytes"] !== undefined) {
    contents.EgressBytes = __expectString(output["egressBytes"]);
  }
  if (output["ingressPackets"] !== undefined) {
    contents.IngressPackets = __expectString(output["ingressPackets"]);
  }
  if (output["egressPackets"] !== undefined) {
    contents.EgressPackets = __expectString(output["egressPackets"]);
  }
  if (output["clientIp"] !== undefined) {
    contents.ClientIp = __expectString(output["clientIp"]);
  }
  if (output["commonName"] !== undefined) {
    contents.CommonName = __expectString(output["commonName"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_ClientVpnConnectionStatus(output["status"], context);
  }
  if (output["connectionEndTime"] !== undefined) {
    contents.ConnectionEndTime = __expectString(output["connectionEndTime"]);
  }
  if (output.postureComplianceStatusSet === "") {
    contents.PostureComplianceStatuses = [];
  } else if (
    output["postureComplianceStatusSet"] !== undefined &&
    output["postureComplianceStatusSet"]["item"] !== undefined
  ) {
    contents.PostureComplianceStatuses = de_ValueStringList(
      __getArrayIfSingleItem(output["postureComplianceStatusSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnConnectionSet
 */
const de_ClientVpnConnectionSet = (output: any, context: __SerdeContext): ClientVpnConnection[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClientVpnConnection(entry, context);
    });
};

/**
 * deserializeAws_ec2ClientVpnConnectionStatus
 */
const de_ClientVpnConnectionStatus = (output: any, context: __SerdeContext): ClientVpnConnectionStatus => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnEndpoint
 */
const de_ClientVpnEndpoint = (output: any, context: __SerdeContext): ClientVpnEndpoint => {
  const contents: any = {};
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_ClientVpnEndpointStatus(output["status"], context);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectString(output["creationTime"]);
  }
  if (output["deletionTime"] !== undefined) {
    contents.DeletionTime = __expectString(output["deletionTime"]);
  }
  if (output["dnsName"] !== undefined) {
    contents.DnsName = __expectString(output["dnsName"]);
  }
  if (output["clientCidrBlock"] !== undefined) {
    contents.ClientCidrBlock = __expectString(output["clientCidrBlock"]);
  }
  if (output.dnsServer === "") {
    contents.DnsServers = [];
  } else if (output["dnsServer"] !== undefined && output["dnsServer"]["item"] !== undefined) {
    contents.DnsServers = de_ValueStringList(__getArrayIfSingleItem(output["dnsServer"]["item"]), context);
  }
  if (output["splitTunnel"] !== undefined) {
    contents.SplitTunnel = __parseBoolean(output["splitTunnel"]);
  }
  if (output["vpnProtocol"] !== undefined) {
    contents.VpnProtocol = __expectString(output["vpnProtocol"]);
  }
  if (output["transportProtocol"] !== undefined) {
    contents.TransportProtocol = __expectString(output["transportProtocol"]);
  }
  if (output["vpnPort"] !== undefined) {
    contents.VpnPort = __strictParseInt32(output["vpnPort"]) as number;
  }
  if (output.associatedTargetNetwork === "") {
    contents.AssociatedTargetNetworks = [];
  } else if (
    output["associatedTargetNetwork"] !== undefined &&
    output["associatedTargetNetwork"]["item"] !== undefined
  ) {
    contents.AssociatedTargetNetworks = de_AssociatedTargetNetworkSet(
      __getArrayIfSingleItem(output["associatedTargetNetwork"]["item"]),
      context
    );
  }
  if (output["serverCertificateArn"] !== undefined) {
    contents.ServerCertificateArn = __expectString(output["serverCertificateArn"]);
  }
  if (output.authenticationOptions === "") {
    contents.AuthenticationOptions = [];
  } else if (output["authenticationOptions"] !== undefined && output["authenticationOptions"]["item"] !== undefined) {
    contents.AuthenticationOptions = de_ClientVpnAuthenticationList(
      __getArrayIfSingleItem(output["authenticationOptions"]["item"]),
      context
    );
  }
  if (output["connectionLogOptions"] !== undefined) {
    contents.ConnectionLogOptions = de_ConnectionLogResponseOptions(output["connectionLogOptions"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output.securityGroupIdSet === "") {
    contents.SecurityGroupIds = [];
  } else if (output["securityGroupIdSet"] !== undefined && output["securityGroupIdSet"]["item"] !== undefined) {
    contents.SecurityGroupIds = de_ClientVpnSecurityGroupIdSet(
      __getArrayIfSingleItem(output["securityGroupIdSet"]["item"]),
      context
    );
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["selfServicePortalUrl"] !== undefined) {
    contents.SelfServicePortalUrl = __expectString(output["selfServicePortalUrl"]);
  }
  if (output["clientConnectOptions"] !== undefined) {
    contents.ClientConnectOptions = de_ClientConnectResponseOptions(output["clientConnectOptions"], context);
  }
  if (output["sessionTimeoutHours"] !== undefined) {
    contents.SessionTimeoutHours = __strictParseInt32(output["sessionTimeoutHours"]) as number;
  }
  if (output["clientLoginBannerOptions"] !== undefined) {
    contents.ClientLoginBannerOptions = de_ClientLoginBannerResponseOptions(
      output["clientLoginBannerOptions"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnEndpointAttributeStatus
 */
const de_ClientVpnEndpointAttributeStatus = (
  output: any,
  context: __SerdeContext
): ClientVpnEndpointAttributeStatus => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnEndpointStatus
 */
const de_ClientVpnEndpointStatus = (output: any, context: __SerdeContext): ClientVpnEndpointStatus => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnRoute
 */
const de_ClientVpnRoute = (output: any, context: __SerdeContext): ClientVpnRoute => {
  const contents: any = {};
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
  }
  if (output["destinationCidr"] !== undefined) {
    contents.DestinationCidr = __expectString(output["destinationCidr"]);
  }
  if (output["targetSubnet"] !== undefined) {
    contents.TargetSubnet = __expectString(output["targetSubnet"]);
  }
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  if (output["origin"] !== undefined) {
    contents.Origin = __expectString(output["origin"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_ClientVpnRouteStatus(output["status"], context);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnRouteSet
 */
const de_ClientVpnRouteSet = (output: any, context: __SerdeContext): ClientVpnRoute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClientVpnRoute(entry, context);
    });
};

/**
 * deserializeAws_ec2ClientVpnRouteStatus
 */
const de_ClientVpnRouteStatus = (output: any, context: __SerdeContext): ClientVpnRouteStatus => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnSecurityGroupIdSet
 */
const de_ClientVpnSecurityGroupIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2CloudWatchLogOptions
 */
const de_CloudWatchLogOptions = (output: any, context: __SerdeContext): CloudWatchLogOptions => {
  const contents: any = {};
  if (output["logEnabled"] !== undefined) {
    contents.LogEnabled = __parseBoolean(output["logEnabled"]);
  }
  if (output["logGroupArn"] !== undefined) {
    contents.LogGroupArn = __expectString(output["logGroupArn"]);
  }
  if (output["logOutputFormat"] !== undefined) {
    contents.LogOutputFormat = __expectString(output["logOutputFormat"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CoipAddressUsage
 */
const de_CoipAddressUsage = (output: any, context: __SerdeContext): CoipAddressUsage => {
  const contents: any = {};
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = __expectString(output["allocationId"]);
  }
  if (output["awsAccountId"] !== undefined) {
    contents.AwsAccountId = __expectString(output["awsAccountId"]);
  }
  if (output["awsService"] !== undefined) {
    contents.AwsService = __expectString(output["awsService"]);
  }
  if (output["coIp"] !== undefined) {
    contents.CoIp = __expectString(output["coIp"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CoipAddressUsageSet
 */
const de_CoipAddressUsageSet = (output: any, context: __SerdeContext): CoipAddressUsage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CoipAddressUsage(entry, context);
    });
};

/**
 * deserializeAws_ec2CoipCidr
 */
const de_CoipCidr = (output: any, context: __SerdeContext): CoipCidr => {
  const contents: any = {};
  if (output["cidr"] !== undefined) {
    contents.Cidr = __expectString(output["cidr"]);
  }
  if (output["coipPoolId"] !== undefined) {
    contents.CoipPoolId = __expectString(output["coipPoolId"]);
  }
  if (output["localGatewayRouteTableId"] !== undefined) {
    contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CoipPool
 */
const de_CoipPool = (output: any, context: __SerdeContext): CoipPool => {
  const contents: any = {};
  if (output["poolId"] !== undefined) {
    contents.PoolId = __expectString(output["poolId"]);
  }
  if (output.poolCidrSet === "") {
    contents.PoolCidrs = [];
  } else if (output["poolCidrSet"] !== undefined && output["poolCidrSet"]["item"] !== undefined) {
    contents.PoolCidrs = de_ValueStringList(__getArrayIfSingleItem(output["poolCidrSet"]["item"]), context);
  }
  if (output["localGatewayRouteTableId"] !== undefined) {
    contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["poolArn"] !== undefined) {
    contents.PoolArn = __expectString(output["poolArn"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CoipPoolSet
 */
const de_CoipPoolSet = (output: any, context: __SerdeContext): CoipPool[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CoipPool(entry, context);
    });
};

/**
 * deserializeAws_ec2ConfirmProductInstanceResult
 */
const de_ConfirmProductInstanceResult = (output: any, context: __SerdeContext): ConfirmProductInstanceResult => {
  const contents: any = {};
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ConnectionLogResponseOptions
 */
const de_ConnectionLogResponseOptions = (output: any, context: __SerdeContext): ConnectionLogResponseOptions => {
  const contents: any = {};
  if (output["Enabled"] !== undefined) {
    contents.Enabled = __parseBoolean(output["Enabled"]);
  }
  if (output["CloudwatchLogGroup"] !== undefined) {
    contents.CloudwatchLogGroup = __expectString(output["CloudwatchLogGroup"]);
  }
  if (output["CloudwatchLogStream"] !== undefined) {
    contents.CloudwatchLogStream = __expectString(output["CloudwatchLogStream"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ConnectionNotification
 */
const de_ConnectionNotification = (output: any, context: __SerdeContext): ConnectionNotification => {
  const contents: any = {};
  if (output["connectionNotificationId"] !== undefined) {
    contents.ConnectionNotificationId = __expectString(output["connectionNotificationId"]);
  }
  if (output["serviceId"] !== undefined) {
    contents.ServiceId = __expectString(output["serviceId"]);
  }
  if (output["vpcEndpointId"] !== undefined) {
    contents.VpcEndpointId = __expectString(output["vpcEndpointId"]);
  }
  if (output["connectionNotificationType"] !== undefined) {
    contents.ConnectionNotificationType = __expectString(output["connectionNotificationType"]);
  }
  if (output["connectionNotificationArn"] !== undefined) {
    contents.ConnectionNotificationArn = __expectString(output["connectionNotificationArn"]);
  }
  if (output.connectionEvents === "") {
    contents.ConnectionEvents = [];
  } else if (output["connectionEvents"] !== undefined && output["connectionEvents"]["item"] !== undefined) {
    contents.ConnectionEvents = de_ValueStringList(__getArrayIfSingleItem(output["connectionEvents"]["item"]), context);
  }
  if (output["connectionNotificationState"] !== undefined) {
    contents.ConnectionNotificationState = __expectString(output["connectionNotificationState"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ConnectionNotificationSet
 */
const de_ConnectionNotificationSet = (output: any, context: __SerdeContext): ConnectionNotification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ConnectionNotification(entry, context);
    });
};

/**
 * deserializeAws_ec2ConversionTask
 */
const de_ConversionTask = (output: any, context: __SerdeContext): ConversionTask => {
  const contents: any = {};
  if (output["conversionTaskId"] !== undefined) {
    contents.ConversionTaskId = __expectString(output["conversionTaskId"]);
  }
  if (output["expirationTime"] !== undefined) {
    contents.ExpirationTime = __expectString(output["expirationTime"]);
  }
  if (output["importInstance"] !== undefined) {
    contents.ImportInstance = de_ImportInstanceTaskDetails(output["importInstance"], context);
  }
  if (output["importVolume"] !== undefined) {
    contents.ImportVolume = de_ImportVolumeTaskDetails(output["importVolume"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CopyFpgaImageResult
 */
const de_CopyFpgaImageResult = (output: any, context: __SerdeContext): CopyFpgaImageResult => {
  const contents: any = {};
  if (output["fpgaImageId"] !== undefined) {
    contents.FpgaImageId = __expectString(output["fpgaImageId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CopyImageResult
 */
const de_CopyImageResult = (output: any, context: __SerdeContext): CopyImageResult => {
  const contents: any = {};
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CopySnapshotResult
 */
const de_CopySnapshotResult = (output: any, context: __SerdeContext): CopySnapshotResult => {
  const contents: any = {};
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CoreCountList
 */
const de_CoreCountList = (output: any, context: __SerdeContext): number[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __strictParseInt32(entry) as number;
    });
};

/**
 * deserializeAws_ec2CpuManufacturerSet
 */
const de_CpuManufacturerSet = (output: any, context: __SerdeContext): CpuManufacturer[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2CpuOptions
 */
const de_CpuOptions = (output: any, context: __SerdeContext): CpuOptions => {
  const contents: any = {};
  if (output["coreCount"] !== undefined) {
    contents.CoreCount = __strictParseInt32(output["coreCount"]) as number;
  }
  if (output["threadsPerCore"] !== undefined) {
    contents.ThreadsPerCore = __strictParseInt32(output["threadsPerCore"]) as number;
  }
  if (output["amdSevSnp"] !== undefined) {
    contents.AmdSevSnp = __expectString(output["amdSevSnp"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateCapacityReservationFleetResult
 */
const de_CreateCapacityReservationFleetResult = (
  output: any,
  context: __SerdeContext
): CreateCapacityReservationFleetResult => {
  const contents: any = {};
  if (output["capacityReservationFleetId"] !== undefined) {
    contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["totalTargetCapacity"] !== undefined) {
    contents.TotalTargetCapacity = __strictParseInt32(output["totalTargetCapacity"]) as number;
  }
  if (output["totalFulfilledCapacity"] !== undefined) {
    contents.TotalFulfilledCapacity = __strictParseFloat(output["totalFulfilledCapacity"]) as number;
  }
  if (output["instanceMatchCriteria"] !== undefined) {
    contents.InstanceMatchCriteria = __expectString(output["instanceMatchCriteria"]);
  }
  if (output["allocationStrategy"] !== undefined) {
    contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
  }
  if (output["endDate"] !== undefined) {
    contents.EndDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["endDate"]));
  }
  if (output["tenancy"] !== undefined) {
    contents.Tenancy = __expectString(output["tenancy"]);
  }
  if (output.fleetCapacityReservationSet === "") {
    contents.FleetCapacityReservations = [];
  } else if (
    output["fleetCapacityReservationSet"] !== undefined &&
    output["fleetCapacityReservationSet"]["item"] !== undefined
  ) {
    contents.FleetCapacityReservations = de_FleetCapacityReservationSet(
      __getArrayIfSingleItem(output["fleetCapacityReservationSet"]["item"]),
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateCapacityReservationResult
 */
const de_CreateCapacityReservationResult = (output: any, context: __SerdeContext): CreateCapacityReservationResult => {
  const contents: any = {};
  if (output["capacityReservation"] !== undefined) {
    contents.CapacityReservation = de_CapacityReservation(output["capacityReservation"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateCarrierGatewayResult
 */
const de_CreateCarrierGatewayResult = (output: any, context: __SerdeContext): CreateCarrierGatewayResult => {
  const contents: any = {};
  if (output["carrierGateway"] !== undefined) {
    contents.CarrierGateway = de_CarrierGateway(output["carrierGateway"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateClientVpnEndpointResult
 */
const de_CreateClientVpnEndpointResult = (output: any, context: __SerdeContext): CreateClientVpnEndpointResult => {
  const contents: any = {};
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_ClientVpnEndpointStatus(output["status"], context);
  }
  if (output["dnsName"] !== undefined) {
    contents.DnsName = __expectString(output["dnsName"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateClientVpnRouteResult
 */
const de_CreateClientVpnRouteResult = (output: any, context: __SerdeContext): CreateClientVpnRouteResult => {
  const contents: any = {};
  if (output["status"] !== undefined) {
    contents.Status = de_ClientVpnRouteStatus(output["status"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateCoipCidrResult
 */
const de_CreateCoipCidrResult = (output: any, context: __SerdeContext): CreateCoipCidrResult => {
  const contents: any = {};
  if (output["coipCidr"] !== undefined) {
    contents.CoipCidr = de_CoipCidr(output["coipCidr"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateCoipPoolResult
 */
const de_CreateCoipPoolResult = (output: any, context: __SerdeContext): CreateCoipPoolResult => {
  const contents: any = {};
  if (output["coipPool"] !== undefined) {
    contents.CoipPool = de_CoipPool(output["coipPool"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateCustomerGatewayResult
 */
const de_CreateCustomerGatewayResult = (output: any, context: __SerdeContext): CreateCustomerGatewayResult => {
  const contents: any = {};
  if (output["customerGateway"] !== undefined) {
    contents.CustomerGateway = de_CustomerGateway(output["customerGateway"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateDefaultSubnetResult
 */
const de_CreateDefaultSubnetResult = (output: any, context: __SerdeContext): CreateDefaultSubnetResult => {
  const contents: any = {};
  if (output["subnet"] !== undefined) {
    contents.Subnet = de_Subnet(output["subnet"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateDefaultVpcResult
 */
const de_CreateDefaultVpcResult = (output: any, context: __SerdeContext): CreateDefaultVpcResult => {
  const contents: any = {};
  if (output["vpc"] !== undefined) {
    contents.Vpc = de_Vpc(output["vpc"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateDhcpOptionsResult
 */
const de_CreateDhcpOptionsResult = (output: any, context: __SerdeContext): CreateDhcpOptionsResult => {
  const contents: any = {};
  if (output["dhcpOptions"] !== undefined) {
    contents.DhcpOptions = de_DhcpOptions(output["dhcpOptions"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateEgressOnlyInternetGatewayResult
 */
const de_CreateEgressOnlyInternetGatewayResult = (
  output: any,
  context: __SerdeContext
): CreateEgressOnlyInternetGatewayResult => {
  const contents: any = {};
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  if (output["egressOnlyInternetGateway"] !== undefined) {
    contents.EgressOnlyInternetGateway = de_EgressOnlyInternetGateway(output["egressOnlyInternetGateway"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateFleetError
 */
const de_CreateFleetError = (output: any, context: __SerdeContext): CreateFleetError => {
  const contents: any = {};
  if (output["launchTemplateAndOverrides"] !== undefined) {
    contents.LaunchTemplateAndOverrides = de_LaunchTemplateAndOverridesResponse(
      output["launchTemplateAndOverrides"],
      context
    );
  }
  if (output["lifecycle"] !== undefined) {
    contents.Lifecycle = __expectString(output["lifecycle"]);
  }
  if (output["errorCode"] !== undefined) {
    contents.ErrorCode = __expectString(output["errorCode"]);
  }
  if (output["errorMessage"] !== undefined) {
    contents.ErrorMessage = __expectString(output["errorMessage"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateFleetErrorsSet
 */
const de_CreateFleetErrorsSet = (output: any, context: __SerdeContext): CreateFleetError[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CreateFleetError(entry, context);
    });
};

/**
 * deserializeAws_ec2CreateFleetInstance
 */
const de_CreateFleetInstance = (output: any, context: __SerdeContext): CreateFleetInstance => {
  const contents: any = {};
  if (output["launchTemplateAndOverrides"] !== undefined) {
    contents.LaunchTemplateAndOverrides = de_LaunchTemplateAndOverridesResponse(
      output["launchTemplateAndOverrides"],
      context
    );
  }
  if (output["lifecycle"] !== undefined) {
    contents.Lifecycle = __expectString(output["lifecycle"]);
  }
  if (output.instanceIds === "") {
    contents.InstanceIds = [];
  } else if (output["instanceIds"] !== undefined && output["instanceIds"]["item"] !== undefined) {
    contents.InstanceIds = de_InstanceIdsSet(__getArrayIfSingleItem(output["instanceIds"]["item"]), context);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["platform"] !== undefined) {
    contents.Platform = __expectString(output["platform"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateFleetInstancesSet
 */
const de_CreateFleetInstancesSet = (output: any, context: __SerdeContext): CreateFleetInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CreateFleetInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2CreateFleetResult
 */
const de_CreateFleetResult = (output: any, context: __SerdeContext): CreateFleetResult => {
  const contents: any = {};
  if (output["fleetId"] !== undefined) {
    contents.FleetId = __expectString(output["fleetId"]);
  }
  if (output.errorSet === "") {
    contents.Errors = [];
  } else if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
    contents.Errors = de_CreateFleetErrorsSet(__getArrayIfSingleItem(output["errorSet"]["item"]), context);
  }
  if (output.fleetInstanceSet === "") {
    contents.Instances = [];
  } else if (output["fleetInstanceSet"] !== undefined && output["fleetInstanceSet"]["item"] !== undefined) {
    contents.Instances = de_CreateFleetInstancesSet(
      __getArrayIfSingleItem(output["fleetInstanceSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateFlowLogsResult
 */
const de_CreateFlowLogsResult = (output: any, context: __SerdeContext): CreateFlowLogsResult => {
  const contents: any = {};
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  if (output.flowLogIdSet === "") {
    contents.FlowLogIds = [];
  } else if (output["flowLogIdSet"] !== undefined && output["flowLogIdSet"]["item"] !== undefined) {
    contents.FlowLogIds = de_ValueStringList(__getArrayIfSingleItem(output["flowLogIdSet"]["item"]), context);
  }
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  } else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateFpgaImageResult
 */
const de_CreateFpgaImageResult = (output: any, context: __SerdeContext): CreateFpgaImageResult => {
  const contents: any = {};
  if (output["fpgaImageId"] !== undefined) {
    contents.FpgaImageId = __expectString(output["fpgaImageId"]);
  }
  if (output["fpgaImageGlobalId"] !== undefined) {
    contents.FpgaImageGlobalId = __expectString(output["fpgaImageGlobalId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateImageResult
 */
const de_CreateImageResult = (output: any, context: __SerdeContext): CreateImageResult => {
  const contents: any = {};
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateInstanceConnectEndpointResult
 */
const de_CreateInstanceConnectEndpointResult = (
  output: any,
  context: __SerdeContext
): CreateInstanceConnectEndpointResult => {
  const contents: any = {};
  if (output["instanceConnectEndpoint"] !== undefined) {
    contents.InstanceConnectEndpoint = de_Ec2InstanceConnectEndpoint(output["instanceConnectEndpoint"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateInstanceEventWindowResult
 */
const de_CreateInstanceEventWindowResult = (output: any, context: __SerdeContext): CreateInstanceEventWindowResult => {
  const contents: any = {};
  if (output["instanceEventWindow"] !== undefined) {
    contents.InstanceEventWindow = de_InstanceEventWindow(output["instanceEventWindow"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateInstanceExportTaskResult
 */
const de_CreateInstanceExportTaskResult = (output: any, context: __SerdeContext): CreateInstanceExportTaskResult => {
  const contents: any = {};
  if (output["exportTask"] !== undefined) {
    contents.ExportTask = de_ExportTask(output["exportTask"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateInternetGatewayResult
 */
const de_CreateInternetGatewayResult = (output: any, context: __SerdeContext): CreateInternetGatewayResult => {
  const contents: any = {};
  if (output["internetGateway"] !== undefined) {
    contents.InternetGateway = de_InternetGateway(output["internetGateway"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateIpamPoolResult
 */
const de_CreateIpamPoolResult = (output: any, context: __SerdeContext): CreateIpamPoolResult => {
  const contents: any = {};
  if (output["ipamPool"] !== undefined) {
    contents.IpamPool = de_IpamPool(output["ipamPool"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateIpamResourceDiscoveryResult
 */
const de_CreateIpamResourceDiscoveryResult = (
  output: any,
  context: __SerdeContext
): CreateIpamResourceDiscoveryResult => {
  const contents: any = {};
  if (output["ipamResourceDiscovery"] !== undefined) {
    contents.IpamResourceDiscovery = de_IpamResourceDiscovery(output["ipamResourceDiscovery"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateIpamResult
 */
const de_CreateIpamResult = (output: any, context: __SerdeContext): CreateIpamResult => {
  const contents: any = {};
  if (output["ipam"] !== undefined) {
    contents.Ipam = de_Ipam(output["ipam"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateIpamScopeResult
 */
const de_CreateIpamScopeResult = (output: any, context: __SerdeContext): CreateIpamScopeResult => {
  const contents: any = {};
  if (output["ipamScope"] !== undefined) {
    contents.IpamScope = de_IpamScope(output["ipamScope"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateLaunchTemplateResult
 */
const de_CreateLaunchTemplateResult = (output: any, context: __SerdeContext): CreateLaunchTemplateResult => {
  const contents: any = {};
  if (output["launchTemplate"] !== undefined) {
    contents.LaunchTemplate = de_LaunchTemplate(output["launchTemplate"], context);
  }
  if (output["warning"] !== undefined) {
    contents.Warning = de_ValidationWarning(output["warning"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateLaunchTemplateVersionResult
 */
const de_CreateLaunchTemplateVersionResult = (
  output: any,
  context: __SerdeContext
): CreateLaunchTemplateVersionResult => {
  const contents: any = {};
  if (output["launchTemplateVersion"] !== undefined) {
    contents.LaunchTemplateVersion = de_LaunchTemplateVersion(output["launchTemplateVersion"], context);
  }
  if (output["warning"] !== undefined) {
    contents.Warning = de_ValidationWarning(output["warning"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteResult
 */
const de_CreateLocalGatewayRouteResult = (output: any, context: __SerdeContext): CreateLocalGatewayRouteResult => {
  const contents: any = {};
  if (output["route"] !== undefined) {
    contents.Route = de_LocalGatewayRoute(output["route"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableResult
 */
const de_CreateLocalGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): CreateLocalGatewayRouteTableResult => {
  const contents: any = {};
  if (output["localGatewayRouteTable"] !== undefined) {
    contents.LocalGatewayRouteTable = de_LocalGatewayRouteTable(output["localGatewayRouteTable"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult
 */
const de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult = (
  output: any,
  context: __SerdeContext
): CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult => {
  const contents: any = {};
  if (output["localGatewayRouteTableVirtualInterfaceGroupAssociation"] !== undefined) {
    contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociation =
      de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(
        output["localGatewayRouteTableVirtualInterfaceGroupAssociation"],
        context
      );
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationResult
 */
const de_CreateLocalGatewayRouteTableVpcAssociationResult = (
  output: any,
  context: __SerdeContext
): CreateLocalGatewayRouteTableVpcAssociationResult => {
  const contents: any = {};
  if (output["localGatewayRouteTableVpcAssociation"] !== undefined) {
    contents.LocalGatewayRouteTableVpcAssociation = de_LocalGatewayRouteTableVpcAssociation(
      output["localGatewayRouteTableVpcAssociation"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateManagedPrefixListResult
 */
const de_CreateManagedPrefixListResult = (output: any, context: __SerdeContext): CreateManagedPrefixListResult => {
  const contents: any = {};
  if (output["prefixList"] !== undefined) {
    contents.PrefixList = de_ManagedPrefixList(output["prefixList"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateNatGatewayResult
 */
const de_CreateNatGatewayResult = (output: any, context: __SerdeContext): CreateNatGatewayResult => {
  const contents: any = {};
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  if (output["natGateway"] !== undefined) {
    contents.NatGateway = de_NatGateway(output["natGateway"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateNetworkAclResult
 */
const de_CreateNetworkAclResult = (output: any, context: __SerdeContext): CreateNetworkAclResult => {
  const contents: any = {};
  if (output["networkAcl"] !== undefined) {
    contents.NetworkAcl = de_NetworkAcl(output["networkAcl"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateNetworkInsightsAccessScopeResult
 */
const de_CreateNetworkInsightsAccessScopeResult = (
  output: any,
  context: __SerdeContext
): CreateNetworkInsightsAccessScopeResult => {
  const contents: any = {};
  if (output["networkInsightsAccessScope"] !== undefined) {
    contents.NetworkInsightsAccessScope = de_NetworkInsightsAccessScope(output["networkInsightsAccessScope"], context);
  }
  if (output["networkInsightsAccessScopeContent"] !== undefined) {
    contents.NetworkInsightsAccessScopeContent = de_NetworkInsightsAccessScopeContent(
      output["networkInsightsAccessScopeContent"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateNetworkInsightsPathResult
 */
const de_CreateNetworkInsightsPathResult = (output: any, context: __SerdeContext): CreateNetworkInsightsPathResult => {
  const contents: any = {};
  if (output["networkInsightsPath"] !== undefined) {
    contents.NetworkInsightsPath = de_NetworkInsightsPath(output["networkInsightsPath"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateNetworkInterfacePermissionResult
 */
const de_CreateNetworkInterfacePermissionResult = (
  output: any,
  context: __SerdeContext
): CreateNetworkInterfacePermissionResult => {
  const contents: any = {};
  if (output["interfacePermission"] !== undefined) {
    contents.InterfacePermission = de_NetworkInterfacePermission(output["interfacePermission"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateNetworkInterfaceResult
 */
const de_CreateNetworkInterfaceResult = (output: any, context: __SerdeContext): CreateNetworkInterfaceResult => {
  const contents: any = {};
  if (output["networkInterface"] !== undefined) {
    contents.NetworkInterface = de_NetworkInterface(output["networkInterface"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreatePlacementGroupResult
 */
const de_CreatePlacementGroupResult = (output: any, context: __SerdeContext): CreatePlacementGroupResult => {
  const contents: any = {};
  if (output["placementGroup"] !== undefined) {
    contents.PlacementGroup = de_PlacementGroup(output["placementGroup"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreatePublicIpv4PoolResult
 */
const de_CreatePublicIpv4PoolResult = (output: any, context: __SerdeContext): CreatePublicIpv4PoolResult => {
  const contents: any = {};
  if (output["poolId"] !== undefined) {
    contents.PoolId = __expectString(output["poolId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateReplaceRootVolumeTaskResult
 */
const de_CreateReplaceRootVolumeTaskResult = (
  output: any,
  context: __SerdeContext
): CreateReplaceRootVolumeTaskResult => {
  const contents: any = {};
  if (output["replaceRootVolumeTask"] !== undefined) {
    contents.ReplaceRootVolumeTask = de_ReplaceRootVolumeTask(output["replaceRootVolumeTask"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateReservedInstancesListingResult
 */
const de_CreateReservedInstancesListingResult = (
  output: any,
  context: __SerdeContext
): CreateReservedInstancesListingResult => {
  const contents: any = {};
  if (output.reservedInstancesListingsSet === "") {
    contents.ReservedInstancesListings = [];
  } else if (
    output["reservedInstancesListingsSet"] !== undefined &&
    output["reservedInstancesListingsSet"]["item"] !== undefined
  ) {
    contents.ReservedInstancesListings = de_ReservedInstancesListingList(
      __getArrayIfSingleItem(output["reservedInstancesListingsSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateRestoreImageTaskResult
 */
const de_CreateRestoreImageTaskResult = (output: any, context: __SerdeContext): CreateRestoreImageTaskResult => {
  const contents: any = {};
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateRouteResult
 */
const de_CreateRouteResult = (output: any, context: __SerdeContext): CreateRouteResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateRouteTableResult
 */
const de_CreateRouteTableResult = (output: any, context: __SerdeContext): CreateRouteTableResult => {
  const contents: any = {};
  if (output["routeTable"] !== undefined) {
    contents.RouteTable = de_RouteTable(output["routeTable"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateSecurityGroupResult
 */
const de_CreateSecurityGroupResult = (output: any, context: __SerdeContext): CreateSecurityGroupResult => {
  const contents: any = {};
  if (output["groupId"] !== undefined) {
    contents.GroupId = __expectString(output["groupId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateSnapshotsResult
 */
const de_CreateSnapshotsResult = (output: any, context: __SerdeContext): CreateSnapshotsResult => {
  const contents: any = {};
  if (output.snapshotSet === "") {
    contents.Snapshots = [];
  } else if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
    contents.Snapshots = de_SnapshotSet(__getArrayIfSingleItem(output["snapshotSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateSpotDatafeedSubscriptionResult
 */
const de_CreateSpotDatafeedSubscriptionResult = (
  output: any,
  context: __SerdeContext
): CreateSpotDatafeedSubscriptionResult => {
  const contents: any = {};
  if (output["spotDatafeedSubscription"] !== undefined) {
    contents.SpotDatafeedSubscription = de_SpotDatafeedSubscription(output["spotDatafeedSubscription"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateStoreImageTaskResult
 */
const de_CreateStoreImageTaskResult = (output: any, context: __SerdeContext): CreateStoreImageTaskResult => {
  const contents: any = {};
  if (output["objectKey"] !== undefined) {
    contents.ObjectKey = __expectString(output["objectKey"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateSubnetCidrReservationResult
 */
const de_CreateSubnetCidrReservationResult = (
  output: any,
  context: __SerdeContext
): CreateSubnetCidrReservationResult => {
  const contents: any = {};
  if (output["subnetCidrReservation"] !== undefined) {
    contents.SubnetCidrReservation = de_SubnetCidrReservation(output["subnetCidrReservation"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateSubnetResult
 */
const de_CreateSubnetResult = (output: any, context: __SerdeContext): CreateSubnetResult => {
  const contents: any = {};
  if (output["subnet"] !== undefined) {
    contents.Subnet = de_Subnet(output["subnet"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorFilterResult
 */
const de_CreateTrafficMirrorFilterResult = (output: any, context: __SerdeContext): CreateTrafficMirrorFilterResult => {
  const contents: any = {};
  if (output["trafficMirrorFilter"] !== undefined) {
    contents.TrafficMirrorFilter = de_TrafficMirrorFilter(output["trafficMirrorFilter"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorFilterRuleResult
 */
const de_CreateTrafficMirrorFilterRuleResult = (
  output: any,
  context: __SerdeContext
): CreateTrafficMirrorFilterRuleResult => {
  const contents: any = {};
  if (output["trafficMirrorFilterRule"] !== undefined) {
    contents.TrafficMirrorFilterRule = de_TrafficMirrorFilterRule(output["trafficMirrorFilterRule"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorSessionResult
 */
const de_CreateTrafficMirrorSessionResult = (
  output: any,
  context: __SerdeContext
): CreateTrafficMirrorSessionResult => {
  const contents: any = {};
  if (output["trafficMirrorSession"] !== undefined) {
    contents.TrafficMirrorSession = de_TrafficMirrorSession(output["trafficMirrorSession"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorTargetResult
 */
const de_CreateTrafficMirrorTargetResult = (output: any, context: __SerdeContext): CreateTrafficMirrorTargetResult => {
  const contents: any = {};
  if (output["trafficMirrorTarget"] !== undefined) {
    contents.TrafficMirrorTarget = de_TrafficMirrorTarget(output["trafficMirrorTarget"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayConnectPeerResult
 */
const de_CreateTransitGatewayConnectPeerResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayConnectPeerResult => {
  const contents: any = {};
  if (output["transitGatewayConnectPeer"] !== undefined) {
    contents.TransitGatewayConnectPeer = de_TransitGatewayConnectPeer(output["transitGatewayConnectPeer"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayConnectResult
 */
const de_CreateTransitGatewayConnectResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayConnectResult => {
  const contents: any = {};
  if (output["transitGatewayConnect"] !== undefined) {
    contents.TransitGatewayConnect = de_TransitGatewayConnect(output["transitGatewayConnect"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayMulticastDomainResult
 */
const de_CreateTransitGatewayMulticastDomainResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayMulticastDomainResult => {
  const contents: any = {};
  if (output["transitGatewayMulticastDomain"] !== undefined) {
    contents.TransitGatewayMulticastDomain = de_TransitGatewayMulticastDomain(
      output["transitGatewayMulticastDomain"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayPeeringAttachmentResult
 */
const de_CreateTransitGatewayPeeringAttachmentResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayPeeringAttachmentResult => {
  const contents: any = {};
  if (output["transitGatewayPeeringAttachment"] !== undefined) {
    contents.TransitGatewayPeeringAttachment = de_TransitGatewayPeeringAttachment(
      output["transitGatewayPeeringAttachment"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayPolicyTableResult
 */
const de_CreateTransitGatewayPolicyTableResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayPolicyTableResult => {
  const contents: any = {};
  if (output["transitGatewayPolicyTable"] !== undefined) {
    contents.TransitGatewayPolicyTable = de_TransitGatewayPolicyTable(output["transitGatewayPolicyTable"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayPrefixListReferenceResult
 */
const de_CreateTransitGatewayPrefixListReferenceResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayPrefixListReferenceResult => {
  const contents: any = {};
  if (output["transitGatewayPrefixListReference"] !== undefined) {
    contents.TransitGatewayPrefixListReference = de_TransitGatewayPrefixListReference(
      output["transitGatewayPrefixListReference"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayResult
 */
const de_CreateTransitGatewayResult = (output: any, context: __SerdeContext): CreateTransitGatewayResult => {
  const contents: any = {};
  if (output["transitGateway"] !== undefined) {
    contents.TransitGateway = de_TransitGateway(output["transitGateway"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteResult
 */
const de_CreateTransitGatewayRouteResult = (output: any, context: __SerdeContext): CreateTransitGatewayRouteResult => {
  const contents: any = {};
  if (output["route"] !== undefined) {
    contents.Route = de_TransitGatewayRoute(output["route"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteTableAnnouncementResult
 */
const de_CreateTransitGatewayRouteTableAnnouncementResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayRouteTableAnnouncementResult => {
  const contents: any = {};
  if (output["transitGatewayRouteTableAnnouncement"] !== undefined) {
    contents.TransitGatewayRouteTableAnnouncement = de_TransitGatewayRouteTableAnnouncement(
      output["transitGatewayRouteTableAnnouncement"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteTableResult
 */
const de_CreateTransitGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayRouteTableResult => {
  const contents: any = {};
  if (output["transitGatewayRouteTable"] !== undefined) {
    contents.TransitGatewayRouteTable = de_TransitGatewayRouteTable(output["transitGatewayRouteTable"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayVpcAttachmentResult
 */
const de_CreateTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayVpcAttachmentResult => {
  const contents: any = {};
  if (output["transitGatewayVpcAttachment"] !== undefined) {
    contents.TransitGatewayVpcAttachment = de_TransitGatewayVpcAttachment(
      output["transitGatewayVpcAttachment"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessEndpointResult
 */
const de_CreateVerifiedAccessEndpointResult = (
  output: any,
  context: __SerdeContext
): CreateVerifiedAccessEndpointResult => {
  const contents: any = {};
  if (output["verifiedAccessEndpoint"] !== undefined) {
    contents.VerifiedAccessEndpoint = de_VerifiedAccessEndpoint(output["verifiedAccessEndpoint"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessGroupResult
 */
const de_CreateVerifiedAccessGroupResult = (output: any, context: __SerdeContext): CreateVerifiedAccessGroupResult => {
  const contents: any = {};
  if (output["verifiedAccessGroup"] !== undefined) {
    contents.VerifiedAccessGroup = de_VerifiedAccessGroup(output["verifiedAccessGroup"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessInstanceResult
 */
const de_CreateVerifiedAccessInstanceResult = (
  output: any,
  context: __SerdeContext
): CreateVerifiedAccessInstanceResult => {
  const contents: any = {};
  if (output["verifiedAccessInstance"] !== undefined) {
    contents.VerifiedAccessInstance = de_VerifiedAccessInstance(output["verifiedAccessInstance"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessTrustProviderResult
 */
const de_CreateVerifiedAccessTrustProviderResult = (
  output: any,
  context: __SerdeContext
): CreateVerifiedAccessTrustProviderResult => {
  const contents: any = {};
  if (output["verifiedAccessTrustProvider"] !== undefined) {
    contents.VerifiedAccessTrustProvider = de_VerifiedAccessTrustProvider(
      output["verifiedAccessTrustProvider"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVolumePermission
 */
const de_CreateVolumePermission = (output: any, context: __SerdeContext): CreateVolumePermission => {
  const contents: any = {};
  if (output["group"] !== undefined) {
    contents.Group = __expectString(output["group"]);
  }
  if (output["userId"] !== undefined) {
    contents.UserId = __expectString(output["userId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVolumePermissionList
 */
const de_CreateVolumePermissionList = (output: any, context: __SerdeContext): CreateVolumePermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CreateVolumePermission(entry, context);
    });
};

/**
 * deserializeAws_ec2CreateVpcEndpointConnectionNotificationResult
 */
const de_CreateVpcEndpointConnectionNotificationResult = (
  output: any,
  context: __SerdeContext
): CreateVpcEndpointConnectionNotificationResult => {
  const contents: any = {};
  if (output["connectionNotification"] !== undefined) {
    contents.ConnectionNotification = de_ConnectionNotification(output["connectionNotification"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVpcEndpointResult
 */
const de_CreateVpcEndpointResult = (output: any, context: __SerdeContext): CreateVpcEndpointResult => {
  const contents: any = {};
  if (output["vpcEndpoint"] !== undefined) {
    contents.VpcEndpoint = de_VpcEndpoint(output["vpcEndpoint"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVpcEndpointServiceConfigurationResult
 */
const de_CreateVpcEndpointServiceConfigurationResult = (
  output: any,
  context: __SerdeContext
): CreateVpcEndpointServiceConfigurationResult => {
  const contents: any = {};
  if (output["serviceConfiguration"] !== undefined) {
    contents.ServiceConfiguration = de_ServiceConfiguration(output["serviceConfiguration"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVpcPeeringConnectionResult
 */
const de_CreateVpcPeeringConnectionResult = (
  output: any,
  context: __SerdeContext
): CreateVpcPeeringConnectionResult => {
  const contents: any = {};
  if (output["vpcPeeringConnection"] !== undefined) {
    contents.VpcPeeringConnection = de_VpcPeeringConnection(output["vpcPeeringConnection"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVpcResult
 */
const de_CreateVpcResult = (output: any, context: __SerdeContext): CreateVpcResult => {
  const contents: any = {};
  if (output["vpc"] !== undefined) {
    contents.Vpc = de_Vpc(output["vpc"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVpnConnectionResult
 */
const de_CreateVpnConnectionResult = (output: any, context: __SerdeContext): CreateVpnConnectionResult => {
  const contents: any = {};
  if (output["vpnConnection"] !== undefined) {
    contents.VpnConnection = de_VpnConnection(output["vpnConnection"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVpnGatewayResult
 */
const de_CreateVpnGatewayResult = (output: any, context: __SerdeContext): CreateVpnGatewayResult => {
  const contents: any = {};
  if (output["vpnGateway"] !== undefined) {
    contents.VpnGateway = de_VpnGateway(output["vpnGateway"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreditSpecification
 */
const de_CreditSpecification = (output: any, context: __SerdeContext): CreditSpecification => {
  const contents: any = {};
  if (output["cpuCredits"] !== undefined) {
    contents.CpuCredits = __expectString(output["cpuCredits"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CustomerGateway
 */
const de_CustomerGateway = (output: any, context: __SerdeContext): CustomerGateway => {
  const contents: any = {};
  if (output["bgpAsn"] !== undefined) {
    contents.BgpAsn = __expectString(output["bgpAsn"]);
  }
  if (output["customerGatewayId"] !== undefined) {
    contents.CustomerGatewayId = __expectString(output["customerGatewayId"]);
  }
  if (output["ipAddress"] !== undefined) {
    contents.IpAddress = __expectString(output["ipAddress"]);
  }
  if (output["certificateArn"] !== undefined) {
    contents.CertificateArn = __expectString(output["certificateArn"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  if (output["deviceName"] !== undefined) {
    contents.DeviceName = __expectString(output["deviceName"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CustomerGatewayList
 */
const de_CustomerGatewayList = (output: any, context: __SerdeContext): CustomerGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CustomerGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2DataResponse
 */
const de_DataResponse = (output: any, context: __SerdeContext): DataResponse => {
  const contents: any = {};
  if (output["id"] !== undefined) {
    contents.Id = __expectString(output["id"]);
  }
  if (output["source"] !== undefined) {
    contents.Source = __expectString(output["source"]);
  }
  if (output["destination"] !== undefined) {
    contents.Destination = __expectString(output["destination"]);
  }
  if (output["metric"] !== undefined) {
    contents.Metric = __expectString(output["metric"]);
  }
  if (output["statistic"] !== undefined) {
    contents.Statistic = __expectString(output["statistic"]);
  }
  if (output["period"] !== undefined) {
    contents.Period = __expectString(output["period"]);
  }
  if (output.metricPointSet === "") {
    contents.MetricPoints = [];
  } else if (output["metricPointSet"] !== undefined && output["metricPointSet"]["item"] !== undefined) {
    contents.MetricPoints = de_MetricPoints(__getArrayIfSingleItem(output["metricPointSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DataResponses
 */
const de_DataResponses = (output: any, context: __SerdeContext): DataResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DataResponse(entry, context);
    });
};

/**
 * deserializeAws_ec2DedicatedHostIdList
 */
const de_DedicatedHostIdList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2DeleteCarrierGatewayResult
 */
const de_DeleteCarrierGatewayResult = (output: any, context: __SerdeContext): DeleteCarrierGatewayResult => {
  const contents: any = {};
  if (output["carrierGateway"] !== undefined) {
    contents.CarrierGateway = de_CarrierGateway(output["carrierGateway"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteClientVpnEndpointResult
 */
const de_DeleteClientVpnEndpointResult = (output: any, context: __SerdeContext): DeleteClientVpnEndpointResult => {
  const contents: any = {};
  if (output["status"] !== undefined) {
    contents.Status = de_ClientVpnEndpointStatus(output["status"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteClientVpnRouteResult
 */
const de_DeleteClientVpnRouteResult = (output: any, context: __SerdeContext): DeleteClientVpnRouteResult => {
  const contents: any = {};
  if (output["status"] !== undefined) {
    contents.Status = de_ClientVpnRouteStatus(output["status"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteCoipCidrResult
 */
const de_DeleteCoipCidrResult = (output: any, context: __SerdeContext): DeleteCoipCidrResult => {
  const contents: any = {};
  if (output["coipCidr"] !== undefined) {
    contents.CoipCidr = de_CoipCidr(output["coipCidr"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteCoipPoolResult
 */
const de_DeleteCoipPoolResult = (output: any, context: __SerdeContext): DeleteCoipPoolResult => {
  const contents: any = {};
  if (output["coipPool"] !== undefined) {
    contents.CoipPool = de_CoipPool(output["coipPool"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteEgressOnlyInternetGatewayResult
 */
const de_DeleteEgressOnlyInternetGatewayResult = (
  output: any,
  context: __SerdeContext
): DeleteEgressOnlyInternetGatewayResult => {
  const contents: any = {};
  if (output["returnCode"] !== undefined) {
    contents.ReturnCode = __parseBoolean(output["returnCode"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteFleetError
 */
const de_DeleteFleetError = (output: any, context: __SerdeContext): DeleteFleetError => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteFleetErrorItem
 */
const de_DeleteFleetErrorItem = (output: any, context: __SerdeContext): DeleteFleetErrorItem => {
  const contents: any = {};
  if (output["error"] !== undefined) {
    contents.Error = de_DeleteFleetError(output["error"], context);
  }
  if (output["fleetId"] !== undefined) {
    contents.FleetId = __expectString(output["fleetId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteFleetErrorSet
 */
const de_DeleteFleetErrorSet = (output: any, context: __SerdeContext): DeleteFleetErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DeleteFleetErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DeleteFleetsResult
 */
const de_DeleteFleetsResult = (output: any, context: __SerdeContext): DeleteFleetsResult => {
  const contents: any = {};
  if (output.successfulFleetDeletionSet === "") {
    contents.SuccessfulFleetDeletions = [];
  } else if (
    output["successfulFleetDeletionSet"] !== undefined &&
    output["successfulFleetDeletionSet"]["item"] !== undefined
  ) {
    contents.SuccessfulFleetDeletions = de_DeleteFleetSuccessSet(
      __getArrayIfSingleItem(output["successfulFleetDeletionSet"]["item"]),
      context
    );
  }
  if (output.unsuccessfulFleetDeletionSet === "") {
    contents.UnsuccessfulFleetDeletions = [];
  } else if (
    output["unsuccessfulFleetDeletionSet"] !== undefined &&
    output["unsuccessfulFleetDeletionSet"]["item"] !== undefined
  ) {
    contents.UnsuccessfulFleetDeletions = de_DeleteFleetErrorSet(
      __getArrayIfSingleItem(output["unsuccessfulFleetDeletionSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteFleetSuccessItem
 */
const de_DeleteFleetSuccessItem = (output: any, context: __SerdeContext): DeleteFleetSuccessItem => {
  const contents: any = {};
  if (output["currentFleetState"] !== undefined) {
    contents.CurrentFleetState = __expectString(output["currentFleetState"]);
  }
  if (output["previousFleetState"] !== undefined) {
    contents.PreviousFleetState = __expectString(output["previousFleetState"]);
  }
  if (output["fleetId"] !== undefined) {
    contents.FleetId = __expectString(output["fleetId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteFleetSuccessSet
 */
const de_DeleteFleetSuccessSet = (output: any, context: __SerdeContext): DeleteFleetSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DeleteFleetSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DeleteFlowLogsResult
 */
const de_DeleteFlowLogsResult = (output: any, context: __SerdeContext): DeleteFlowLogsResult => {
  const contents: any = {};
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  } else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteFpgaImageResult
 */
const de_DeleteFpgaImageResult = (output: any, context: __SerdeContext): DeleteFpgaImageResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteInstanceConnectEndpointResult
 */
const de_DeleteInstanceConnectEndpointResult = (
  output: any,
  context: __SerdeContext
): DeleteInstanceConnectEndpointResult => {
  const contents: any = {};
  if (output["instanceConnectEndpoint"] !== undefined) {
    contents.InstanceConnectEndpoint = de_Ec2InstanceConnectEndpoint(output["instanceConnectEndpoint"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteInstanceEventWindowResult
 */
const de_DeleteInstanceEventWindowResult = (output: any, context: __SerdeContext): DeleteInstanceEventWindowResult => {
  const contents: any = {};
  if (output["instanceEventWindowState"] !== undefined) {
    contents.InstanceEventWindowState = de_InstanceEventWindowStateChange(output["instanceEventWindowState"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteIpamPoolResult
 */
const de_DeleteIpamPoolResult = (output: any, context: __SerdeContext): DeleteIpamPoolResult => {
  const contents: any = {};
  if (output["ipamPool"] !== undefined) {
    contents.IpamPool = de_IpamPool(output["ipamPool"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteIpamResourceDiscoveryResult
 */
const de_DeleteIpamResourceDiscoveryResult = (
  output: any,
  context: __SerdeContext
): DeleteIpamResourceDiscoveryResult => {
  const contents: any = {};
  if (output["ipamResourceDiscovery"] !== undefined) {
    contents.IpamResourceDiscovery = de_IpamResourceDiscovery(output["ipamResourceDiscovery"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteIpamResult
 */
const de_DeleteIpamResult = (output: any, context: __SerdeContext): DeleteIpamResult => {
  const contents: any = {};
  if (output["ipam"] !== undefined) {
    contents.Ipam = de_Ipam(output["ipam"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteIpamScopeResult
 */
const de_DeleteIpamScopeResult = (output: any, context: __SerdeContext): DeleteIpamScopeResult => {
  const contents: any = {};
  if (output["ipamScope"] !== undefined) {
    contents.IpamScope = de_IpamScope(output["ipamScope"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteKeyPairResult
 */
const de_DeleteKeyPairResult = (output: any, context: __SerdeContext): DeleteKeyPairResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  if (output["keyPairId"] !== undefined) {
    contents.KeyPairId = __expectString(output["keyPairId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateResult
 */
const de_DeleteLaunchTemplateResult = (output: any, context: __SerdeContext): DeleteLaunchTemplateResult => {
  const contents: any = {};
  if (output["launchTemplate"] !== undefined) {
    contents.LaunchTemplate = de_LaunchTemplate(output["launchTemplate"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorItem
 */
const de_DeleteLaunchTemplateVersionsResponseErrorItem = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResponseErrorItem => {
  const contents: any = {};
  if (output["launchTemplateId"] !== undefined) {
    contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
  }
  if (output["launchTemplateName"] !== undefined) {
    contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
  }
  if (output["versionNumber"] !== undefined) {
    contents.VersionNumber = __strictParseLong(output["versionNumber"]) as number;
  }
  if (output["responseError"] !== undefined) {
    contents.ResponseError = de_ResponseError(output["responseError"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorSet
 */
const de_DeleteLaunchTemplateVersionsResponseErrorSet = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResponseErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DeleteLaunchTemplateVersionsResponseErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessItem
 */
const de_DeleteLaunchTemplateVersionsResponseSuccessItem = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResponseSuccessItem => {
  const contents: any = {};
  if (output["launchTemplateId"] !== undefined) {
    contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
  }
  if (output["launchTemplateName"] !== undefined) {
    contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
  }
  if (output["versionNumber"] !== undefined) {
    contents.VersionNumber = __strictParseLong(output["versionNumber"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessSet
 */
const de_DeleteLaunchTemplateVersionsResponseSuccessSet = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResponseSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DeleteLaunchTemplateVersionsResponseSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsResult
 */
const de_DeleteLaunchTemplateVersionsResult = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResult => {
  const contents: any = {};
  if (output.successfullyDeletedLaunchTemplateVersionSet === "") {
    contents.SuccessfullyDeletedLaunchTemplateVersions = [];
  } else if (
    output["successfullyDeletedLaunchTemplateVersionSet"] !== undefined &&
    output["successfullyDeletedLaunchTemplateVersionSet"]["item"] !== undefined
  ) {
    contents.SuccessfullyDeletedLaunchTemplateVersions = de_DeleteLaunchTemplateVersionsResponseSuccessSet(
      __getArrayIfSingleItem(output["successfullyDeletedLaunchTemplateVersionSet"]["item"]),
      context
    );
  }
  if (output.unsuccessfullyDeletedLaunchTemplateVersionSet === "") {
    contents.UnsuccessfullyDeletedLaunchTemplateVersions = [];
  } else if (
    output["unsuccessfullyDeletedLaunchTemplateVersionSet"] !== undefined &&
    output["unsuccessfullyDeletedLaunchTemplateVersionSet"]["item"] !== undefined
  ) {
    contents.UnsuccessfullyDeletedLaunchTemplateVersions = de_DeleteLaunchTemplateVersionsResponseErrorSet(
      __getArrayIfSingleItem(output["unsuccessfullyDeletedLaunchTemplateVersionSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteResult
 */
const de_DeleteLocalGatewayRouteResult = (output: any, context: __SerdeContext): DeleteLocalGatewayRouteResult => {
  const contents: any = {};
  if (output["route"] !== undefined) {
    contents.Route = de_LocalGatewayRoute(output["route"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableResult
 */
const de_DeleteLocalGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): DeleteLocalGatewayRouteTableResult => {
  const contents: any = {};
  if (output["localGatewayRouteTable"] !== undefined) {
    contents.LocalGatewayRouteTable = de_LocalGatewayRouteTable(output["localGatewayRouteTable"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult
 */
const de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult = (
  output: any,
  context: __SerdeContext
): DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult => {
  const contents: any = {};
  if (output["localGatewayRouteTableVirtualInterfaceGroupAssociation"] !== undefined) {
    contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociation =
      de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(
        output["localGatewayRouteTableVirtualInterfaceGroupAssociation"],
        context
      );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationResult
 */
const de_DeleteLocalGatewayRouteTableVpcAssociationResult = (
  output: any,
  context: __SerdeContext
): DeleteLocalGatewayRouteTableVpcAssociationResult => {
  const contents: any = {};
  if (output["localGatewayRouteTableVpcAssociation"] !== undefined) {
    contents.LocalGatewayRouteTableVpcAssociation = de_LocalGatewayRouteTableVpcAssociation(
      output["localGatewayRouteTableVpcAssociation"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteManagedPrefixListResult
 */
const de_DeleteManagedPrefixListResult = (output: any, context: __SerdeContext): DeleteManagedPrefixListResult => {
  const contents: any = {};
  if (output["prefixList"] !== undefined) {
    contents.PrefixList = de_ManagedPrefixList(output["prefixList"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteNatGatewayResult
 */
const de_DeleteNatGatewayResult = (output: any, context: __SerdeContext): DeleteNatGatewayResult => {
  const contents: any = {};
  if (output["natGatewayId"] !== undefined) {
    contents.NatGatewayId = __expectString(output["natGatewayId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisResult
 */
const de_DeleteNetworkInsightsAccessScopeAnalysisResult = (
  output: any,
  context: __SerdeContext
): DeleteNetworkInsightsAccessScopeAnalysisResult => {
  const contents: any = {};
  if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
    contents.NetworkInsightsAccessScopeAnalysisId = __expectString(output["networkInsightsAccessScopeAnalysisId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAccessScopeResult
 */
const de_DeleteNetworkInsightsAccessScopeResult = (
  output: any,
  context: __SerdeContext
): DeleteNetworkInsightsAccessScopeResult => {
  const contents: any = {};
  if (output["networkInsightsAccessScopeId"] !== undefined) {
    contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAnalysisResult
 */
const de_DeleteNetworkInsightsAnalysisResult = (
  output: any,
  context: __SerdeContext
): DeleteNetworkInsightsAnalysisResult => {
  const contents: any = {};
  if (output["networkInsightsAnalysisId"] !== undefined) {
    contents.NetworkInsightsAnalysisId = __expectString(output["networkInsightsAnalysisId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsPathResult
 */
const de_DeleteNetworkInsightsPathResult = (output: any, context: __SerdeContext): DeleteNetworkInsightsPathResult => {
  const contents: any = {};
  if (output["networkInsightsPathId"] !== undefined) {
    contents.NetworkInsightsPathId = __expectString(output["networkInsightsPathId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteNetworkInterfacePermissionResult
 */
const de_DeleteNetworkInterfacePermissionResult = (
  output: any,
  context: __SerdeContext
): DeleteNetworkInterfacePermissionResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeletePublicIpv4PoolResult
 */
const de_DeletePublicIpv4PoolResult = (output: any, context: __SerdeContext): DeletePublicIpv4PoolResult => {
  const contents: any = {};
  if (output["returnValue"] !== undefined) {
    contents.ReturnValue = __parseBoolean(output["returnValue"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteQueuedReservedInstancesError
 */
const de_DeleteQueuedReservedInstancesError = (
  output: any,
  context: __SerdeContext
): DeleteQueuedReservedInstancesError => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteQueuedReservedInstancesResult
 */
const de_DeleteQueuedReservedInstancesResult = (
  output: any,
  context: __SerdeContext
): DeleteQueuedReservedInstancesResult => {
  const contents: any = {};
  if (output.successfulQueuedPurchaseDeletionSet === "") {
    contents.SuccessfulQueuedPurchaseDeletions = [];
  } else if (
    output["successfulQueuedPurchaseDeletionSet"] !== undefined &&
    output["successfulQueuedPurchaseDeletionSet"]["item"] !== undefined
  ) {
    contents.SuccessfulQueuedPurchaseDeletions = de_SuccessfulQueuedPurchaseDeletionSet(
      __getArrayIfSingleItem(output["successfulQueuedPurchaseDeletionSet"]["item"]),
      context
    );
  }
  if (output.failedQueuedPurchaseDeletionSet === "") {
    contents.FailedQueuedPurchaseDeletions = [];
  } else if (
    output["failedQueuedPurchaseDeletionSet"] !== undefined &&
    output["failedQueuedPurchaseDeletionSet"]["item"] !== undefined
  ) {
    contents.FailedQueuedPurchaseDeletions = de_FailedQueuedPurchaseDeletionSet(
      __getArrayIfSingleItem(output["failedQueuedPurchaseDeletionSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteSubnetCidrReservationResult
 */
const de_DeleteSubnetCidrReservationResult = (
  output: any,
  context: __SerdeContext
): DeleteSubnetCidrReservationResult => {
  const contents: any = {};
  if (output["deletedSubnetCidrReservation"] !== undefined) {
    contents.DeletedSubnetCidrReservation = de_SubnetCidrReservation(output["deletedSubnetCidrReservation"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorFilterResult
 */
const de_DeleteTrafficMirrorFilterResult = (output: any, context: __SerdeContext): DeleteTrafficMirrorFilterResult => {
  const contents: any = {};
  if (output["trafficMirrorFilterId"] !== undefined) {
    contents.TrafficMirrorFilterId = __expectString(output["trafficMirrorFilterId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorFilterRuleResult
 */
const de_DeleteTrafficMirrorFilterRuleResult = (
  output: any,
  context: __SerdeContext
): DeleteTrafficMirrorFilterRuleResult => {
  const contents: any = {};
  if (output["trafficMirrorFilterRuleId"] !== undefined) {
    contents.TrafficMirrorFilterRuleId = __expectString(output["trafficMirrorFilterRuleId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorSessionResult
 */
const de_DeleteTrafficMirrorSessionResult = (
  output: any,
  context: __SerdeContext
): DeleteTrafficMirrorSessionResult => {
  const contents: any = {};
  if (output["trafficMirrorSessionId"] !== undefined) {
    contents.TrafficMirrorSessionId = __expectString(output["trafficMirrorSessionId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorTargetResult
 */
const de_DeleteTrafficMirrorTargetResult = (output: any, context: __SerdeContext): DeleteTrafficMirrorTargetResult => {
  const contents: any = {};
  if (output["trafficMirrorTargetId"] !== undefined) {
    contents.TrafficMirrorTargetId = __expectString(output["trafficMirrorTargetId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayConnectPeerResult
 */
const de_DeleteTransitGatewayConnectPeerResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayConnectPeerResult => {
  const contents: any = {};
  if (output["transitGatewayConnectPeer"] !== undefined) {
    contents.TransitGatewayConnectPeer = de_TransitGatewayConnectPeer(output["transitGatewayConnectPeer"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayConnectResult
 */
const de_DeleteTransitGatewayConnectResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayConnectResult => {
  const contents: any = {};
  if (output["transitGatewayConnect"] !== undefined) {
    contents.TransitGatewayConnect = de_TransitGatewayConnect(output["transitGatewayConnect"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayMulticastDomainResult
 */
const de_DeleteTransitGatewayMulticastDomainResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayMulticastDomainResult => {
  const contents: any = {};
  if (output["transitGatewayMulticastDomain"] !== undefined) {
    contents.TransitGatewayMulticastDomain = de_TransitGatewayMulticastDomain(
      output["transitGatewayMulticastDomain"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentResult
 */
const de_DeleteTransitGatewayPeeringAttachmentResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayPeeringAttachmentResult => {
  const contents: any = {};
  if (output["transitGatewayPeeringAttachment"] !== undefined) {
    contents.TransitGatewayPeeringAttachment = de_TransitGatewayPeeringAttachment(
      output["transitGatewayPeeringAttachment"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPolicyTableResult
 */
const de_DeleteTransitGatewayPolicyTableResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayPolicyTableResult => {
  const contents: any = {};
  if (output["transitGatewayPolicyTable"] !== undefined) {
    contents.TransitGatewayPolicyTable = de_TransitGatewayPolicyTable(output["transitGatewayPolicyTable"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceResult
 */
const de_DeleteTransitGatewayPrefixListReferenceResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayPrefixListReferenceResult => {
  const contents: any = {};
  if (output["transitGatewayPrefixListReference"] !== undefined) {
    contents.TransitGatewayPrefixListReference = de_TransitGatewayPrefixListReference(
      output["transitGatewayPrefixListReference"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayResult
 */
const de_DeleteTransitGatewayResult = (output: any, context: __SerdeContext): DeleteTransitGatewayResult => {
  const contents: any = {};
  if (output["transitGateway"] !== undefined) {
    contents.TransitGateway = de_TransitGateway(output["transitGateway"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteResult
 */
const de_DeleteTransitGatewayRouteResult = (output: any, context: __SerdeContext): DeleteTransitGatewayRouteResult => {
  const contents: any = {};
  if (output["route"] !== undefined) {
    contents.Route = de_TransitGatewayRoute(output["route"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteTableAnnouncementResult
 */
const de_DeleteTransitGatewayRouteTableAnnouncementResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayRouteTableAnnouncementResult => {
  const contents: any = {};
  if (output["transitGatewayRouteTableAnnouncement"] !== undefined) {
    contents.TransitGatewayRouteTableAnnouncement = de_TransitGatewayRouteTableAnnouncement(
      output["transitGatewayRouteTableAnnouncement"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteTableResult
 */
const de_DeleteTransitGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayRouteTableResult => {
  const contents: any = {};
  if (output["transitGatewayRouteTable"] !== undefined) {
    contents.TransitGatewayRouteTable = de_TransitGatewayRouteTable(output["transitGatewayRouteTable"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayVpcAttachmentResult
 */
const de_DeleteTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayVpcAttachmentResult => {
  const contents: any = {};
  if (output["transitGatewayVpcAttachment"] !== undefined) {
    contents.TransitGatewayVpcAttachment = de_TransitGatewayVpcAttachment(
      output["transitGatewayVpcAttachment"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessEndpointResult
 */
const de_DeleteVerifiedAccessEndpointResult = (
  output: any,
  context: __SerdeContext
): DeleteVerifiedAccessEndpointResult => {
  const contents: any = {};
  if (output["verifiedAccessEndpoint"] !== undefined) {
    contents.VerifiedAccessEndpoint = de_VerifiedAccessEndpoint(output["verifiedAccessEndpoint"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessGroupResult
 */
const de_DeleteVerifiedAccessGroupResult = (output: any, context: __SerdeContext): DeleteVerifiedAccessGroupResult => {
  const contents: any = {};
  if (output["verifiedAccessGroup"] !== undefined) {
    contents.VerifiedAccessGroup = de_VerifiedAccessGroup(output["verifiedAccessGroup"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessInstanceResult
 */
const de_DeleteVerifiedAccessInstanceResult = (
  output: any,
  context: __SerdeContext
): DeleteVerifiedAccessInstanceResult => {
  const contents: any = {};
  if (output["verifiedAccessInstance"] !== undefined) {
    contents.VerifiedAccessInstance = de_VerifiedAccessInstance(output["verifiedAccessInstance"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessTrustProviderResult
 */
const de_DeleteVerifiedAccessTrustProviderResult = (
  output: any,
  context: __SerdeContext
): DeleteVerifiedAccessTrustProviderResult => {
  const contents: any = {};
  if (output["verifiedAccessTrustProvider"] !== undefined) {
    contents.VerifiedAccessTrustProvider = de_VerifiedAccessTrustProvider(
      output["verifiedAccessTrustProvider"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsResult
 */
const de_DeleteVpcEndpointConnectionNotificationsResult = (
  output: any,
  context: __SerdeContext
): DeleteVpcEndpointConnectionNotificationsResult => {
  const contents: any = {};
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  } else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsResult
 */
const de_DeleteVpcEndpointServiceConfigurationsResult = (
  output: any,
  context: __SerdeContext
): DeleteVpcEndpointServiceConfigurationsResult => {
  const contents: any = {};
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  } else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVpcEndpointsResult
 */
const de_DeleteVpcEndpointsResult = (output: any, context: __SerdeContext): DeleteVpcEndpointsResult => {
  const contents: any = {};
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  } else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVpcPeeringConnectionResult
 */
const de_DeleteVpcPeeringConnectionResult = (
  output: any,
  context: __SerdeContext
): DeleteVpcPeeringConnectionResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeprovisionByoipCidrResult
 */
const de_DeprovisionByoipCidrResult = (output: any, context: __SerdeContext): DeprovisionByoipCidrResult => {
  const contents: any = {};
  if (output["byoipCidr"] !== undefined) {
    contents.ByoipCidr = de_ByoipCidr(output["byoipCidr"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeprovisionedAddressSet
 */
const de_DeprovisionedAddressSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2DeprovisionIpamPoolCidrResult
 */
const de_DeprovisionIpamPoolCidrResult = (output: any, context: __SerdeContext): DeprovisionIpamPoolCidrResult => {
  const contents: any = {};
  if (output["ipamPoolCidr"] !== undefined) {
    contents.IpamPoolCidr = de_IpamPoolCidr(output["ipamPoolCidr"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeprovisionPublicIpv4PoolCidrResult
 */
const de_DeprovisionPublicIpv4PoolCidrResult = (
  output: any,
  context: __SerdeContext
): DeprovisionPublicIpv4PoolCidrResult => {
  const contents: any = {};
  if (output["poolId"] !== undefined) {
    contents.PoolId = __expectString(output["poolId"]);
  }
  if (output.deprovisionedAddressSet === "") {
    contents.DeprovisionedAddresses = [];
  } else if (
    output["deprovisionedAddressSet"] !== undefined &&
    output["deprovisionedAddressSet"]["item"] !== undefined
  ) {
    contents.DeprovisionedAddresses = de_DeprovisionedAddressSet(
      __getArrayIfSingleItem(output["deprovisionedAddressSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeregisterInstanceEventNotificationAttributesResult
 */
const de_DeregisterInstanceEventNotificationAttributesResult = (
  output: any,
  context: __SerdeContext
): DeregisterInstanceEventNotificationAttributesResult => {
  const contents: any = {};
  if (output["instanceTagAttribute"] !== undefined) {
    contents.InstanceTagAttribute = de_InstanceTagNotificationAttribute(output["instanceTagAttribute"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersResult
 */
const de_DeregisterTransitGatewayMulticastGroupMembersResult = (
  output: any,
  context: __SerdeContext
): DeregisterTransitGatewayMulticastGroupMembersResult => {
  const contents: any = {};
  if (output["deregisteredMulticastGroupMembers"] !== undefined) {
    contents.DeregisteredMulticastGroupMembers = de_TransitGatewayMulticastDeregisteredGroupMembers(
      output["deregisteredMulticastGroupMembers"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesResult
 */
const de_DeregisterTransitGatewayMulticastGroupSourcesResult = (
  output: any,
  context: __SerdeContext
): DeregisterTransitGatewayMulticastGroupSourcesResult => {
  const contents: any = {};
  if (output["deregisteredMulticastGroupSources"] !== undefined) {
    contents.DeregisteredMulticastGroupSources = de_TransitGatewayMulticastDeregisteredGroupSources(
      output["deregisteredMulticastGroupSources"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAccountAttributesResult
 */
const de_DescribeAccountAttributesResult = (output: any, context: __SerdeContext): DescribeAccountAttributesResult => {
  const contents: any = {};
  if (output.accountAttributeSet === "") {
    contents.AccountAttributes = [];
  } else if (output["accountAttributeSet"] !== undefined && output["accountAttributeSet"]["item"] !== undefined) {
    contents.AccountAttributes = de_AccountAttributeList(
      __getArrayIfSingleItem(output["accountAttributeSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAddressesAttributeResult
 */
const de_DescribeAddressesAttributeResult = (
  output: any,
  context: __SerdeContext
): DescribeAddressesAttributeResult => {
  const contents: any = {};
  if (output.addressSet === "") {
    contents.Addresses = [];
  } else if (output["addressSet"] !== undefined && output["addressSet"]["item"] !== undefined) {
    contents.Addresses = de_AddressSet(__getArrayIfSingleItem(output["addressSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAddressesResult
 */
const de_DescribeAddressesResult = (output: any, context: __SerdeContext): DescribeAddressesResult => {
  const contents: any = {};
  if (output.addressesSet === "") {
    contents.Addresses = [];
  } else if (output["addressesSet"] !== undefined && output["addressesSet"]["item"] !== undefined) {
    contents.Addresses = de_AddressList(__getArrayIfSingleItem(output["addressesSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAddressTransfersResult
 */
const de_DescribeAddressTransfersResult = (output: any, context: __SerdeContext): DescribeAddressTransfersResult => {
  const contents: any = {};
  if (output.addressTransferSet === "") {
    contents.AddressTransfers = [];
  } else if (output["addressTransferSet"] !== undefined && output["addressTransferSet"]["item"] !== undefined) {
    contents.AddressTransfers = de_AddressTransferList(
      __getArrayIfSingleItem(output["addressTransferSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAggregateIdFormatResult
 */
const de_DescribeAggregateIdFormatResult = (output: any, context: __SerdeContext): DescribeAggregateIdFormatResult => {
  const contents: any = {};
  if (output["useLongIdsAggregated"] !== undefined) {
    contents.UseLongIdsAggregated = __parseBoolean(output["useLongIdsAggregated"]);
  }
  if (output.statusSet === "") {
    contents.Statuses = [];
  } else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
    contents.Statuses = de_IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAvailabilityZonesResult
 */
const de_DescribeAvailabilityZonesResult = (output: any, context: __SerdeContext): DescribeAvailabilityZonesResult => {
  const contents: any = {};
  if (output.availabilityZoneInfo === "") {
    contents.AvailabilityZones = [];
  } else if (output["availabilityZoneInfo"] !== undefined && output["availabilityZoneInfo"]["item"] !== undefined) {
    contents.AvailabilityZones = de_AvailabilityZoneList(
      __getArrayIfSingleItem(output["availabilityZoneInfo"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAwsNetworkPerformanceMetricSubscriptionsResult
 */
const de_DescribeAwsNetworkPerformanceMetricSubscriptionsResult = (
  output: any,
  context: __SerdeContext
): DescribeAwsNetworkPerformanceMetricSubscriptionsResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.subscriptionSet === "") {
    contents.Subscriptions = [];
  } else if (output["subscriptionSet"] !== undefined && output["subscriptionSet"]["item"] !== undefined) {
    contents.Subscriptions = de_SubscriptionList(__getArrayIfSingleItem(output["subscriptionSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeBundleTasksResult
 */
const de_DescribeBundleTasksResult = (output: any, context: __SerdeContext): DescribeBundleTasksResult => {
  const contents: any = {};
  if (output.bundleInstanceTasksSet === "") {
    contents.BundleTasks = [];
  } else if (output["bundleInstanceTasksSet"] !== undefined && output["bundleInstanceTasksSet"]["item"] !== undefined) {
    contents.BundleTasks = de_BundleTaskList(__getArrayIfSingleItem(output["bundleInstanceTasksSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeByoipCidrsResult
 */
const de_DescribeByoipCidrsResult = (output: any, context: __SerdeContext): DescribeByoipCidrsResult => {
  const contents: any = {};
  if (output.byoipCidrSet === "") {
    contents.ByoipCidrs = [];
  } else if (output["byoipCidrSet"] !== undefined && output["byoipCidrSet"]["item"] !== undefined) {
    contents.ByoipCidrs = de_ByoipCidrSet(__getArrayIfSingleItem(output["byoipCidrSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeCapacityReservationFleetsResult
 */
const de_DescribeCapacityReservationFleetsResult = (
  output: any,
  context: __SerdeContext
): DescribeCapacityReservationFleetsResult => {
  const contents: any = {};
  if (output.capacityReservationFleetSet === "") {
    contents.CapacityReservationFleets = [];
  } else if (
    output["capacityReservationFleetSet"] !== undefined &&
    output["capacityReservationFleetSet"]["item"] !== undefined
  ) {
    contents.CapacityReservationFleets = de_CapacityReservationFleetSet(
      __getArrayIfSingleItem(output["capacityReservationFleetSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeCapacityReservationsResult
 */
const de_DescribeCapacityReservationsResult = (
  output: any,
  context: __SerdeContext
): DescribeCapacityReservationsResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.capacityReservationSet === "") {
    contents.CapacityReservations = [];
  } else if (output["capacityReservationSet"] !== undefined && output["capacityReservationSet"]["item"] !== undefined) {
    contents.CapacityReservations = de_CapacityReservationSet(
      __getArrayIfSingleItem(output["capacityReservationSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeCarrierGatewaysResult
 */
const de_DescribeCarrierGatewaysResult = (output: any, context: __SerdeContext): DescribeCarrierGatewaysResult => {
  const contents: any = {};
  if (output.carrierGatewaySet === "") {
    contents.CarrierGateways = [];
  } else if (output["carrierGatewaySet"] !== undefined && output["carrierGatewaySet"]["item"] !== undefined) {
    contents.CarrierGateways = de_CarrierGatewaySet(
      __getArrayIfSingleItem(output["carrierGatewaySet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeClassicLinkInstancesResult
 */
const de_DescribeClassicLinkInstancesResult = (
  output: any,
  context: __SerdeContext
): DescribeClassicLinkInstancesResult => {
  const contents: any = {};
  if (output.instancesSet === "") {
    contents.Instances = [];
  } else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.Instances = de_ClassicLinkInstanceList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeClientVpnAuthorizationRulesResult
 */
const de_DescribeClientVpnAuthorizationRulesResult = (
  output: any,
  context: __SerdeContext
): DescribeClientVpnAuthorizationRulesResult => {
  const contents: any = {};
  if (output.authorizationRule === "") {
    contents.AuthorizationRules = [];
  } else if (output["authorizationRule"] !== undefined && output["authorizationRule"]["item"] !== undefined) {
    contents.AuthorizationRules = de_AuthorizationRuleSet(
      __getArrayIfSingleItem(output["authorizationRule"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeClientVpnConnectionsResult
 */
const de_DescribeClientVpnConnectionsResult = (
  output: any,
  context: __SerdeContext
): DescribeClientVpnConnectionsResult => {
  const contents: any = {};
  if (output.connections === "") {
    contents.Connections = [];
  } else if (output["connections"] !== undefined && output["connections"]["item"] !== undefined) {
    contents.Connections = de_ClientVpnConnectionSet(__getArrayIfSingleItem(output["connections"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeClientVpnEndpointsResult
 */
const de_DescribeClientVpnEndpointsResult = (
  output: any,
  context: __SerdeContext
): DescribeClientVpnEndpointsResult => {
  const contents: any = {};
  if (output.clientVpnEndpoint === "") {
    contents.ClientVpnEndpoints = [];
  } else if (output["clientVpnEndpoint"] !== undefined && output["clientVpnEndpoint"]["item"] !== undefined) {
    contents.ClientVpnEndpoints = de_EndpointSet(__getArrayIfSingleItem(output["clientVpnEndpoint"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeClientVpnRoutesResult
 */
const de_DescribeClientVpnRoutesResult = (output: any, context: __SerdeContext): DescribeClientVpnRoutesResult => {
  const contents: any = {};
  if (output.routes === "") {
    contents.Routes = [];
  } else if (output["routes"] !== undefined && output["routes"]["item"] !== undefined) {
    contents.Routes = de_ClientVpnRouteSet(__getArrayIfSingleItem(output["routes"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeClientVpnTargetNetworksResult
 */
const de_DescribeClientVpnTargetNetworksResult = (
  output: any,
  context: __SerdeContext
): DescribeClientVpnTargetNetworksResult => {
  const contents: any = {};
  if (output.clientVpnTargetNetworks === "") {
    contents.ClientVpnTargetNetworks = [];
  } else if (
    output["clientVpnTargetNetworks"] !== undefined &&
    output["clientVpnTargetNetworks"]["item"] !== undefined
  ) {
    contents.ClientVpnTargetNetworks = de_TargetNetworkSet(
      __getArrayIfSingleItem(output["clientVpnTargetNetworks"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeCoipPoolsResult
 */
const de_DescribeCoipPoolsResult = (output: any, context: __SerdeContext): DescribeCoipPoolsResult => {
  const contents: any = {};
  if (output.coipPoolSet === "") {
    contents.CoipPools = [];
  } else if (output["coipPoolSet"] !== undefined && output["coipPoolSet"]["item"] !== undefined) {
    contents.CoipPools = de_CoipPoolSet(__getArrayIfSingleItem(output["coipPoolSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeConversionTaskList
 */
const de_DescribeConversionTaskList = (output: any, context: __SerdeContext): ConversionTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ConversionTask(entry, context);
    });
};

/**
 * deserializeAws_ec2DescribeConversionTasksResult
 */
const de_DescribeConversionTasksResult = (output: any, context: __SerdeContext): DescribeConversionTasksResult => {
  const contents: any = {};
  if (output.conversionTasks === "") {
    contents.ConversionTasks = [];
  } else if (output["conversionTasks"] !== undefined && output["conversionTasks"]["item"] !== undefined) {
    contents.ConversionTasks = de_DescribeConversionTaskList(
      __getArrayIfSingleItem(output["conversionTasks"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeCustomerGatewaysResult
 */
const de_DescribeCustomerGatewaysResult = (output: any, context: __SerdeContext): DescribeCustomerGatewaysResult => {
  const contents: any = {};
  if (output.customerGatewaySet === "") {
    contents.CustomerGateways = [];
  } else if (output["customerGatewaySet"] !== undefined && output["customerGatewaySet"]["item"] !== undefined) {
    contents.CustomerGateways = de_CustomerGatewayList(
      __getArrayIfSingleItem(output["customerGatewaySet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeDhcpOptionsResult
 */
const de_DescribeDhcpOptionsResult = (output: any, context: __SerdeContext): DescribeDhcpOptionsResult => {
  const contents: any = {};
  if (output.dhcpOptionsSet === "") {
    contents.DhcpOptions = [];
  } else if (output["dhcpOptionsSet"] !== undefined && output["dhcpOptionsSet"]["item"] !== undefined) {
    contents.DhcpOptions = de_DhcpOptionsList(__getArrayIfSingleItem(output["dhcpOptionsSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeEgressOnlyInternetGatewaysResult
 */
const de_DescribeEgressOnlyInternetGatewaysResult = (
  output: any,
  context: __SerdeContext
): DescribeEgressOnlyInternetGatewaysResult => {
  const contents: any = {};
  if (output.egressOnlyInternetGatewaySet === "") {
    contents.EgressOnlyInternetGateways = [];
  } else if (
    output["egressOnlyInternetGatewaySet"] !== undefined &&
    output["egressOnlyInternetGatewaySet"]["item"] !== undefined
  ) {
    contents.EgressOnlyInternetGateways = de_EgressOnlyInternetGatewayList(
      __getArrayIfSingleItem(output["egressOnlyInternetGatewaySet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeElasticGpusResult
 */
const de_DescribeElasticGpusResult = (output: any, context: __SerdeContext): DescribeElasticGpusResult => {
  const contents: any = {};
  if (output.elasticGpuSet === "") {
    contents.ElasticGpuSet = [];
  } else if (output["elasticGpuSet"] !== undefined && output["elasticGpuSet"]["item"] !== undefined) {
    contents.ElasticGpuSet = de_ElasticGpuSet(__getArrayIfSingleItem(output["elasticGpuSet"]["item"]), context);
  }
  if (output["maxResults"] !== undefined) {
    contents.MaxResults = __strictParseInt32(output["maxResults"]) as number;
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeExportImageTasksResult
 */
const de_DescribeExportImageTasksResult = (output: any, context: __SerdeContext): DescribeExportImageTasksResult => {
  const contents: any = {};
  if (output.exportImageTaskSet === "") {
    contents.ExportImageTasks = [];
  } else if (output["exportImageTaskSet"] !== undefined && output["exportImageTaskSet"]["item"] !== undefined) {
    contents.ExportImageTasks = de_ExportImageTaskList(
      __getArrayIfSingleItem(output["exportImageTaskSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeExportTasksResult
 */
const de_DescribeExportTasksResult = (output: any, context: __SerdeContext): DescribeExportTasksResult => {
  const contents: any = {};
  if (output.exportTaskSet === "") {
    contents.ExportTasks = [];
  } else if (output["exportTaskSet"] !== undefined && output["exportTaskSet"]["item"] !== undefined) {
    contents.ExportTasks = de_ExportTaskList(__getArrayIfSingleItem(output["exportTaskSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFastLaunchImagesResult
 */
const de_DescribeFastLaunchImagesResult = (output: any, context: __SerdeContext): DescribeFastLaunchImagesResult => {
  const contents: any = {};
  if (output.fastLaunchImageSet === "") {
    contents.FastLaunchImages = [];
  } else if (output["fastLaunchImageSet"] !== undefined && output["fastLaunchImageSet"]["item"] !== undefined) {
    contents.FastLaunchImages = de_DescribeFastLaunchImagesSuccessSet(
      __getArrayIfSingleItem(output["fastLaunchImageSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFastLaunchImagesSuccessItem
 */
const de_DescribeFastLaunchImagesSuccessItem = (
  output: any,
  context: __SerdeContext
): DescribeFastLaunchImagesSuccessItem => {
  const contents: any = {};
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["snapshotConfiguration"] !== undefined) {
    contents.SnapshotConfiguration = de_FastLaunchSnapshotConfigurationResponse(
      output["snapshotConfiguration"],
      context
    );
  }
  if (output["launchTemplate"] !== undefined) {
    contents.LaunchTemplate = de_FastLaunchLaunchTemplateSpecificationResponse(output["launchTemplate"], context);
  }
  if (output["maxParallelLaunches"] !== undefined) {
    contents.MaxParallelLaunches = __strictParseInt32(output["maxParallelLaunches"]) as number;
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["stateTransitionReason"] !== undefined) {
    contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
  }
  if (output["stateTransitionTime"] !== undefined) {
    contents.StateTransitionTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["stateTransitionTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFastLaunchImagesSuccessSet
 */
const de_DescribeFastLaunchImagesSuccessSet = (
  output: any,
  context: __SerdeContext
): DescribeFastLaunchImagesSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DescribeFastLaunchImagesSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DescribeFastSnapshotRestoresResult
 */
const de_DescribeFastSnapshotRestoresResult = (
  output: any,
  context: __SerdeContext
): DescribeFastSnapshotRestoresResult => {
  const contents: any = {};
  if (output.fastSnapshotRestoreSet === "") {
    contents.FastSnapshotRestores = [];
  } else if (output["fastSnapshotRestoreSet"] !== undefined && output["fastSnapshotRestoreSet"]["item"] !== undefined) {
    contents.FastSnapshotRestores = de_DescribeFastSnapshotRestoreSuccessSet(
      __getArrayIfSingleItem(output["fastSnapshotRestoreSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFastSnapshotRestoreSuccessItem
 */
const de_DescribeFastSnapshotRestoreSuccessItem = (
  output: any,
  context: __SerdeContext
): DescribeFastSnapshotRestoreSuccessItem => {
  const contents: any = {};
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["stateTransitionReason"] !== undefined) {
    contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["ownerAlias"] !== undefined) {
    contents.OwnerAlias = __expectString(output["ownerAlias"]);
  }
  if (output["enablingTime"] !== undefined) {
    contents.EnablingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["enablingTime"]));
  }
  if (output["optimizingTime"] !== undefined) {
    contents.OptimizingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["optimizingTime"]));
  }
  if (output["enabledTime"] !== undefined) {
    contents.EnabledTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["enabledTime"]));
  }
  if (output["disablingTime"] !== undefined) {
    contents.DisablingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["disablingTime"]));
  }
  if (output["disabledTime"] !== undefined) {
    contents.DisabledTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["disabledTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFastSnapshotRestoreSuccessSet
 */
const de_DescribeFastSnapshotRestoreSuccessSet = (
  output: any,
  context: __SerdeContext
): DescribeFastSnapshotRestoreSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DescribeFastSnapshotRestoreSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DescribeFleetError
 */
const de_DescribeFleetError = (output: any, context: __SerdeContext): DescribeFleetError => {
  const contents: any = {};
  if (output["launchTemplateAndOverrides"] !== undefined) {
    contents.LaunchTemplateAndOverrides = de_LaunchTemplateAndOverridesResponse(
      output["launchTemplateAndOverrides"],
      context
    );
  }
  if (output["lifecycle"] !== undefined) {
    contents.Lifecycle = __expectString(output["lifecycle"]);
  }
  if (output["errorCode"] !== undefined) {
    contents.ErrorCode = __expectString(output["errorCode"]);
  }
  if (output["errorMessage"] !== undefined) {
    contents.ErrorMessage = __expectString(output["errorMessage"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFleetHistoryResult
 */
const de_DescribeFleetHistoryResult = (output: any, context: __SerdeContext): DescribeFleetHistoryResult => {
  const contents: any = {};
  if (output.historyRecordSet === "") {
    contents.HistoryRecords = [];
  } else if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
    contents.HistoryRecords = de_HistoryRecordSet(__getArrayIfSingleItem(output["historyRecordSet"]["item"]), context);
  }
  if (output["lastEvaluatedTime"] !== undefined) {
    contents.LastEvaluatedTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["lastEvaluatedTime"]));
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output["fleetId"] !== undefined) {
    contents.FleetId = __expectString(output["fleetId"]);
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFleetInstancesResult
 */
const de_DescribeFleetInstancesResult = (output: any, context: __SerdeContext): DescribeFleetInstancesResult => {
  const contents: any = {};
  if (output.activeInstanceSet === "") {
    contents.ActiveInstances = [];
  } else if (output["activeInstanceSet"] !== undefined && output["activeInstanceSet"]["item"] !== undefined) {
    contents.ActiveInstances = de_ActiveInstanceSet(
      __getArrayIfSingleItem(output["activeInstanceSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output["fleetId"] !== undefined) {
    contents.FleetId = __expectString(output["fleetId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFleetsErrorSet
 */
const de_DescribeFleetsErrorSet = (output: any, context: __SerdeContext): DescribeFleetError[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DescribeFleetError(entry, context);
    });
};

/**
 * deserializeAws_ec2DescribeFleetsInstances
 */
const de_DescribeFleetsInstances = (output: any, context: __SerdeContext): DescribeFleetsInstances => {
  const contents: any = {};
  if (output["launchTemplateAndOverrides"] !== undefined) {
    contents.LaunchTemplateAndOverrides = de_LaunchTemplateAndOverridesResponse(
      output["launchTemplateAndOverrides"],
      context
    );
  }
  if (output["lifecycle"] !== undefined) {
    contents.Lifecycle = __expectString(output["lifecycle"]);
  }
  if (output.instanceIds === "") {
    contents.InstanceIds = [];
  } else if (output["instanceIds"] !== undefined && output["instanceIds"]["item"] !== undefined) {
    contents.InstanceIds = de_InstanceIdsSet(__getArrayIfSingleItem(output["instanceIds"]["item"]), context);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["platform"] !== undefined) {
    contents.Platform = __expectString(output["platform"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFleetsInstancesSet
 */
const de_DescribeFleetsInstancesSet = (output: any, context: __SerdeContext): DescribeFleetsInstances[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DescribeFleetsInstances(entry, context);
    });
};

/**
 * deserializeAws_ec2DescribeFleetsResult
 */
const de_DescribeFleetsResult = (output: any, context: __SerdeContext): DescribeFleetsResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.fleetSet === "") {
    contents.Fleets = [];
  } else if (output["fleetSet"] !== undefined && output["fleetSet"]["item"] !== undefined) {
    contents.Fleets = de_FleetSet(__getArrayIfSingleItem(output["fleetSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFlowLogsResult
 */
const de_DescribeFlowLogsResult = (output: any, context: __SerdeContext): DescribeFlowLogsResult => {
  const contents: any = {};
  if (output.flowLogSet === "") {
    contents.FlowLogs = [];
  } else if (output["flowLogSet"] !== undefined && output["flowLogSet"]["item"] !== undefined) {
    contents.FlowLogs = de_FlowLogSet(__getArrayIfSingleItem(output["flowLogSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFpgaImageAttributeResult
 */
const de_DescribeFpgaImageAttributeResult = (
  output: any,
  context: __SerdeContext
): DescribeFpgaImageAttributeResult => {
  const contents: any = {};
  if (output["fpgaImageAttribute"] !== undefined) {
    contents.FpgaImageAttribute = de_FpgaImageAttribute(output["fpgaImageAttribute"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFpgaImagesResult
 */
const de_DescribeFpgaImagesResult = (output: any, context: __SerdeContext): DescribeFpgaImagesResult => {
  const contents: any = {};
  if (output.fpgaImageSet === "") {
    contents.FpgaImages = [];
  } else if (output["fpgaImageSet"] !== undefined && output["fpgaImageSet"]["item"] !== undefined) {
    contents.FpgaImages = de_FpgaImageList(__getArrayIfSingleItem(output["fpgaImageSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeHostReservationOfferingsResult
 */
const de_DescribeHostReservationOfferingsResult = (
  output: any,
  context: __SerdeContext
): DescribeHostReservationOfferingsResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.offeringSet === "") {
    contents.OfferingSet = [];
  } else if (output["offeringSet"] !== undefined && output["offeringSet"]["item"] !== undefined) {
    contents.OfferingSet = de_HostOfferingSet(__getArrayIfSingleItem(output["offeringSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeHostReservationsResult
 */
const de_DescribeHostReservationsResult = (output: any, context: __SerdeContext): DescribeHostReservationsResult => {
  const contents: any = {};
  if (output.hostReservationSet === "") {
    contents.HostReservationSet = [];
  } else if (output["hostReservationSet"] !== undefined && output["hostReservationSet"]["item"] !== undefined) {
    contents.HostReservationSet = de_HostReservationSet(
      __getArrayIfSingleItem(output["hostReservationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeHostsResult
 */
const de_DescribeHostsResult = (output: any, context: __SerdeContext): DescribeHostsResult => {
  const contents: any = {};
  if (output.hostSet === "") {
    contents.Hosts = [];
  } else if (output["hostSet"] !== undefined && output["hostSet"]["item"] !== undefined) {
    contents.Hosts = de_HostList(__getArrayIfSingleItem(output["hostSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIamInstanceProfileAssociationsResult
 */
const de_DescribeIamInstanceProfileAssociationsResult = (
  output: any,
  context: __SerdeContext
): DescribeIamInstanceProfileAssociationsResult => {
  const contents: any = {};
  if (output.iamInstanceProfileAssociationSet === "") {
    contents.IamInstanceProfileAssociations = [];
  } else if (
    output["iamInstanceProfileAssociationSet"] !== undefined &&
    output["iamInstanceProfileAssociationSet"]["item"] !== undefined
  ) {
    contents.IamInstanceProfileAssociations = de_IamInstanceProfileAssociationSet(
      __getArrayIfSingleItem(output["iamInstanceProfileAssociationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIdentityIdFormatResult
 */
const de_DescribeIdentityIdFormatResult = (output: any, context: __SerdeContext): DescribeIdentityIdFormatResult => {
  const contents: any = {};
  if (output.statusSet === "") {
    contents.Statuses = [];
  } else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
    contents.Statuses = de_IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIdFormatResult
 */
const de_DescribeIdFormatResult = (output: any, context: __SerdeContext): DescribeIdFormatResult => {
  const contents: any = {};
  if (output.statusSet === "") {
    contents.Statuses = [];
  } else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
    contents.Statuses = de_IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeImagesResult
 */
const de_DescribeImagesResult = (output: any, context: __SerdeContext): DescribeImagesResult => {
  const contents: any = {};
  if (output.imagesSet === "") {
    contents.Images = [];
  } else if (output["imagesSet"] !== undefined && output["imagesSet"]["item"] !== undefined) {
    contents.Images = de_ImageList(__getArrayIfSingleItem(output["imagesSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeImportImageTasksResult
 */
const de_DescribeImportImageTasksResult = (output: any, context: __SerdeContext): DescribeImportImageTasksResult => {
  const contents: any = {};
  if (output.importImageTaskSet === "") {
    contents.ImportImageTasks = [];
  } else if (output["importImageTaskSet"] !== undefined && output["importImageTaskSet"]["item"] !== undefined) {
    contents.ImportImageTasks = de_ImportImageTaskList(
      __getArrayIfSingleItem(output["importImageTaskSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeImportSnapshotTasksResult
 */
const de_DescribeImportSnapshotTasksResult = (
  output: any,
  context: __SerdeContext
): DescribeImportSnapshotTasksResult => {
  const contents: any = {};
  if (output.importSnapshotTaskSet === "") {
    contents.ImportSnapshotTasks = [];
  } else if (output["importSnapshotTaskSet"] !== undefined && output["importSnapshotTaskSet"]["item"] !== undefined) {
    contents.ImportSnapshotTasks = de_ImportSnapshotTaskList(
      __getArrayIfSingleItem(output["importSnapshotTaskSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceConnectEndpointsResult
 */
const de_DescribeInstanceConnectEndpointsResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceConnectEndpointsResult => {
  const contents: any = {};
  if (output.instanceConnectEndpointSet === "") {
    contents.InstanceConnectEndpoints = [];
  } else if (
    output["instanceConnectEndpointSet"] !== undefined &&
    output["instanceConnectEndpointSet"]["item"] !== undefined
  ) {
    contents.InstanceConnectEndpoints = de_InstanceConnectEndpointSet(
      __getArrayIfSingleItem(output["instanceConnectEndpointSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceCreditSpecificationsResult
 */
const de_DescribeInstanceCreditSpecificationsResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceCreditSpecificationsResult => {
  const contents: any = {};
  if (output.instanceCreditSpecificationSet === "") {
    contents.InstanceCreditSpecifications = [];
  } else if (
    output["instanceCreditSpecificationSet"] !== undefined &&
    output["instanceCreditSpecificationSet"]["item"] !== undefined
  ) {
    contents.InstanceCreditSpecifications = de_InstanceCreditSpecificationList(
      __getArrayIfSingleItem(output["instanceCreditSpecificationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceEventNotificationAttributesResult
 */
const de_DescribeInstanceEventNotificationAttributesResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceEventNotificationAttributesResult => {
  const contents: any = {};
  if (output["instanceTagAttribute"] !== undefined) {
    contents.InstanceTagAttribute = de_InstanceTagNotificationAttribute(output["instanceTagAttribute"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceEventWindowsResult
 */
const de_DescribeInstanceEventWindowsResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceEventWindowsResult => {
  const contents: any = {};
  if (output.instanceEventWindowSet === "") {
    contents.InstanceEventWindows = [];
  } else if (output["instanceEventWindowSet"] !== undefined && output["instanceEventWindowSet"]["item"] !== undefined) {
    contents.InstanceEventWindows = de_InstanceEventWindowSet(
      __getArrayIfSingleItem(output["instanceEventWindowSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstancesResult
 */
const de_DescribeInstancesResult = (output: any, context: __SerdeContext): DescribeInstancesResult => {
  const contents: any = {};
  if (output.reservationSet === "") {
    contents.Reservations = [];
  } else if (output["reservationSet"] !== undefined && output["reservationSet"]["item"] !== undefined) {
    contents.Reservations = de_ReservationList(__getArrayIfSingleItem(output["reservationSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceStatusResult
 */
const de_DescribeInstanceStatusResult = (output: any, context: __SerdeContext): DescribeInstanceStatusResult => {
  const contents: any = {};
  if (output.instanceStatusSet === "") {
    contents.InstanceStatuses = [];
  } else if (output["instanceStatusSet"] !== undefined && output["instanceStatusSet"]["item"] !== undefined) {
    contents.InstanceStatuses = de_InstanceStatusList(
      __getArrayIfSingleItem(output["instanceStatusSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceTypeOfferingsResult
 */
const de_DescribeInstanceTypeOfferingsResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceTypeOfferingsResult => {
  const contents: any = {};
  if (output.instanceTypeOfferingSet === "") {
    contents.InstanceTypeOfferings = [];
  } else if (
    output["instanceTypeOfferingSet"] !== undefined &&
    output["instanceTypeOfferingSet"]["item"] !== undefined
  ) {
    contents.InstanceTypeOfferings = de_InstanceTypeOfferingsList(
      __getArrayIfSingleItem(output["instanceTypeOfferingSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceTypesResult
 */
const de_DescribeInstanceTypesResult = (output: any, context: __SerdeContext): DescribeInstanceTypesResult => {
  const contents: any = {};
  if (output.instanceTypeSet === "") {
    contents.InstanceTypes = [];
  } else if (output["instanceTypeSet"] !== undefined && output["instanceTypeSet"]["item"] !== undefined) {
    contents.InstanceTypes = de_InstanceTypeInfoList(
      __getArrayIfSingleItem(output["instanceTypeSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInternetGatewaysResult
 */
const de_DescribeInternetGatewaysResult = (output: any, context: __SerdeContext): DescribeInternetGatewaysResult => {
  const contents: any = {};
  if (output.internetGatewaySet === "") {
    contents.InternetGateways = [];
  } else if (output["internetGatewaySet"] !== undefined && output["internetGatewaySet"]["item"] !== undefined) {
    contents.InternetGateways = de_InternetGatewayList(
      __getArrayIfSingleItem(output["internetGatewaySet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIpamPoolsResult
 */
const de_DescribeIpamPoolsResult = (output: any, context: __SerdeContext): DescribeIpamPoolsResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.ipamPoolSet === "") {
    contents.IpamPools = [];
  } else if (output["ipamPoolSet"] !== undefined && output["ipamPoolSet"]["item"] !== undefined) {
    contents.IpamPools = de_IpamPoolSet(__getArrayIfSingleItem(output["ipamPoolSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIpamResourceDiscoveriesResult
 */
const de_DescribeIpamResourceDiscoveriesResult = (
  output: any,
  context: __SerdeContext
): DescribeIpamResourceDiscoveriesResult => {
  const contents: any = {};
  if (output.ipamResourceDiscoverySet === "") {
    contents.IpamResourceDiscoveries = [];
  } else if (
    output["ipamResourceDiscoverySet"] !== undefined &&
    output["ipamResourceDiscoverySet"]["item"] !== undefined
  ) {
    contents.IpamResourceDiscoveries = de_IpamResourceDiscoverySet(
      __getArrayIfSingleItem(output["ipamResourceDiscoverySet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIpamResourceDiscoveryAssociationsResult
 */
const de_DescribeIpamResourceDiscoveryAssociationsResult = (
  output: any,
  context: __SerdeContext
): DescribeIpamResourceDiscoveryAssociationsResult => {
  const contents: any = {};
  if (output.ipamResourceDiscoveryAssociationSet === "") {
    contents.IpamResourceDiscoveryAssociations = [];
  } else if (
    output["ipamResourceDiscoveryAssociationSet"] !== undefined &&
    output["ipamResourceDiscoveryAssociationSet"]["item"] !== undefined
  ) {
    contents.IpamResourceDiscoveryAssociations = de_IpamResourceDiscoveryAssociationSet(
      __getArrayIfSingleItem(output["ipamResourceDiscoveryAssociationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIpamScopesResult
 */
const de_DescribeIpamScopesResult = (output: any, context: __SerdeContext): DescribeIpamScopesResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.ipamScopeSet === "") {
    contents.IpamScopes = [];
  } else if (output["ipamScopeSet"] !== undefined && output["ipamScopeSet"]["item"] !== undefined) {
    contents.IpamScopes = de_IpamScopeSet(__getArrayIfSingleItem(output["ipamScopeSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIpamsResult
 */
const de_DescribeIpamsResult = (output: any, context: __SerdeContext): DescribeIpamsResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.ipamSet === "") {
    contents.Ipams = [];
  } else if (output["ipamSet"] !== undefined && output["ipamSet"]["item"] !== undefined) {
    contents.Ipams = de_IpamSet(__getArrayIfSingleItem(output["ipamSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIpv6PoolsResult
 */
const de_DescribeIpv6PoolsResult = (output: any, context: __SerdeContext): DescribeIpv6PoolsResult => {
  const contents: any = {};
  if (output.ipv6PoolSet === "") {
    contents.Ipv6Pools = [];
  } else if (output["ipv6PoolSet"] !== undefined && output["ipv6PoolSet"]["item"] !== undefined) {
    contents.Ipv6Pools = de_Ipv6PoolSet(__getArrayIfSingleItem(output["ipv6PoolSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeKeyPairsResult
 */
const de_DescribeKeyPairsResult = (output: any, context: __SerdeContext): DescribeKeyPairsResult => {
  const contents: any = {};
  if (output.keySet === "") {
    contents.KeyPairs = [];
  } else if (output["keySet"] !== undefined && output["keySet"]["item"] !== undefined) {
    contents.KeyPairs = de_KeyPairList(__getArrayIfSingleItem(output["keySet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLaunchTemplatesResult
 */
const de_DescribeLaunchTemplatesResult = (output: any, context: __SerdeContext): DescribeLaunchTemplatesResult => {
  const contents: any = {};
  if (output.launchTemplates === "") {
    contents.LaunchTemplates = [];
  } else if (output["launchTemplates"] !== undefined && output["launchTemplates"]["item"] !== undefined) {
    contents.LaunchTemplates = de_LaunchTemplateSet(__getArrayIfSingleItem(output["launchTemplates"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLaunchTemplateVersionsResult
 */
const de_DescribeLaunchTemplateVersionsResult = (
  output: any,
  context: __SerdeContext
): DescribeLaunchTemplateVersionsResult => {
  const contents: any = {};
  if (output.launchTemplateVersionSet === "") {
    contents.LaunchTemplateVersions = [];
  } else if (
    output["launchTemplateVersionSet"] !== undefined &&
    output["launchTemplateVersionSet"]["item"] !== undefined
  ) {
    contents.LaunchTemplateVersions = de_LaunchTemplateVersionSet(
      __getArrayIfSingleItem(output["launchTemplateVersionSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTablesResult
 */
const de_DescribeLocalGatewayRouteTablesResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayRouteTablesResult => {
  const contents: any = {};
  if (output.localGatewayRouteTableSet === "") {
    contents.LocalGatewayRouteTables = [];
  } else if (
    output["localGatewayRouteTableSet"] !== undefined &&
    output["localGatewayRouteTableSet"]["item"] !== undefined
  ) {
    contents.LocalGatewayRouteTables = de_LocalGatewayRouteTableSet(
      __getArrayIfSingleItem(output["localGatewayRouteTableSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult
 */
const de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult => {
  const contents: any = {};
  if (output.localGatewayRouteTableVirtualInterfaceGroupAssociationSet === "") {
    contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociations = [];
  } else if (
    output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"] !== undefined &&
    output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"]["item"] !== undefined
  ) {
    contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociations =
      de_LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet(
        __getArrayIfSingleItem(output["localGatewayRouteTableVirtualInterfaceGroupAssociationSet"]["item"]),
        context
      );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsResult
 */
const de_DescribeLocalGatewayRouteTableVpcAssociationsResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayRouteTableVpcAssociationsResult => {
  const contents: any = {};
  if (output.localGatewayRouteTableVpcAssociationSet === "") {
    contents.LocalGatewayRouteTableVpcAssociations = [];
  } else if (
    output["localGatewayRouteTableVpcAssociationSet"] !== undefined &&
    output["localGatewayRouteTableVpcAssociationSet"]["item"] !== undefined
  ) {
    contents.LocalGatewayRouteTableVpcAssociations = de_LocalGatewayRouteTableVpcAssociationSet(
      __getArrayIfSingleItem(output["localGatewayRouteTableVpcAssociationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLocalGatewaysResult
 */
const de_DescribeLocalGatewaysResult = (output: any, context: __SerdeContext): DescribeLocalGatewaysResult => {
  const contents: any = {};
  if (output.localGatewaySet === "") {
    contents.LocalGateways = [];
  } else if (output["localGatewaySet"] !== undefined && output["localGatewaySet"]["item"] !== undefined) {
    contents.LocalGateways = de_LocalGatewaySet(__getArrayIfSingleItem(output["localGatewaySet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsResult
 */
const de_DescribeLocalGatewayVirtualInterfaceGroupsResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayVirtualInterfaceGroupsResult => {
  const contents: any = {};
  if (output.localGatewayVirtualInterfaceGroupSet === "") {
    contents.LocalGatewayVirtualInterfaceGroups = [];
  } else if (
    output["localGatewayVirtualInterfaceGroupSet"] !== undefined &&
    output["localGatewayVirtualInterfaceGroupSet"]["item"] !== undefined
  ) {
    contents.LocalGatewayVirtualInterfaceGroups = de_LocalGatewayVirtualInterfaceGroupSet(
      __getArrayIfSingleItem(output["localGatewayVirtualInterfaceGroupSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesResult
 */
const de_DescribeLocalGatewayVirtualInterfacesResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayVirtualInterfacesResult => {
  const contents: any = {};
  if (output.localGatewayVirtualInterfaceSet === "") {
    contents.LocalGatewayVirtualInterfaces = [];
  } else if (
    output["localGatewayVirtualInterfaceSet"] !== undefined &&
    output["localGatewayVirtualInterfaceSet"]["item"] !== undefined
  ) {
    contents.LocalGatewayVirtualInterfaces = de_LocalGatewayVirtualInterfaceSet(
      __getArrayIfSingleItem(output["localGatewayVirtualInterfaceSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeManagedPrefixListsResult
 */
const de_DescribeManagedPrefixListsResult = (
  output: any,
  context: __SerdeContext
): DescribeManagedPrefixListsResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.prefixListSet === "") {
    contents.PrefixLists = [];
  } else if (output["prefixListSet"] !== undefined && output["prefixListSet"]["item"] !== undefined) {
    contents.PrefixLists = de_ManagedPrefixListSet(__getArrayIfSingleItem(output["prefixListSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeMovingAddressesResult
 */
const de_DescribeMovingAddressesResult = (output: any, context: __SerdeContext): DescribeMovingAddressesResult => {
  const contents: any = {};
  if (output.movingAddressStatusSet === "") {
    contents.MovingAddressStatuses = [];
  } else if (output["movingAddressStatusSet"] !== undefined && output["movingAddressStatusSet"]["item"] !== undefined) {
    contents.MovingAddressStatuses = de_MovingAddressStatusSet(
      __getArrayIfSingleItem(output["movingAddressStatusSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNatGatewaysResult
 */
const de_DescribeNatGatewaysResult = (output: any, context: __SerdeContext): DescribeNatGatewaysResult => {
  const contents: any = {};
  if (output.natGatewaySet === "") {
    contents.NatGateways = [];
  } else if (output["natGatewaySet"] !== undefined && output["natGatewaySet"]["item"] !== undefined) {
    contents.NatGateways = de_NatGatewayList(__getArrayIfSingleItem(output["natGatewaySet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkAclsResult
 */
const de_DescribeNetworkAclsResult = (output: any, context: __SerdeContext): DescribeNetworkAclsResult => {
  const contents: any = {};
  if (output.networkAclSet === "") {
    contents.NetworkAcls = [];
  } else if (output["networkAclSet"] !== undefined && output["networkAclSet"]["item"] !== undefined) {
    contents.NetworkAcls = de_NetworkAclList(__getArrayIfSingleItem(output["networkAclSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesResult
 */
const de_DescribeNetworkInsightsAccessScopeAnalysesResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInsightsAccessScopeAnalysesResult => {
  const contents: any = {};
  if (output.networkInsightsAccessScopeAnalysisSet === "") {
    contents.NetworkInsightsAccessScopeAnalyses = [];
  } else if (
    output["networkInsightsAccessScopeAnalysisSet"] !== undefined &&
    output["networkInsightsAccessScopeAnalysisSet"]["item"] !== undefined
  ) {
    contents.NetworkInsightsAccessScopeAnalyses = de_NetworkInsightsAccessScopeAnalysisList(
      __getArrayIfSingleItem(output["networkInsightsAccessScopeAnalysisSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAccessScopesResult
 */
const de_DescribeNetworkInsightsAccessScopesResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInsightsAccessScopesResult => {
  const contents: any = {};
  if (output.networkInsightsAccessScopeSet === "") {
    contents.NetworkInsightsAccessScopes = [];
  } else if (
    output["networkInsightsAccessScopeSet"] !== undefined &&
    output["networkInsightsAccessScopeSet"]["item"] !== undefined
  ) {
    contents.NetworkInsightsAccessScopes = de_NetworkInsightsAccessScopeList(
      __getArrayIfSingleItem(output["networkInsightsAccessScopeSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAnalysesResult
 */
const de_DescribeNetworkInsightsAnalysesResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInsightsAnalysesResult => {
  const contents: any = {};
  if (output.networkInsightsAnalysisSet === "") {
    contents.NetworkInsightsAnalyses = [];
  } else if (
    output["networkInsightsAnalysisSet"] !== undefined &&
    output["networkInsightsAnalysisSet"]["item"] !== undefined
  ) {
    contents.NetworkInsightsAnalyses = de_NetworkInsightsAnalysisList(
      __getArrayIfSingleItem(output["networkInsightsAnalysisSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsPathsResult
 */
const de_DescribeNetworkInsightsPathsResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInsightsPathsResult => {
  const contents: any = {};
  if (output.networkInsightsPathSet === "") {
    contents.NetworkInsightsPaths = [];
  } else if (output["networkInsightsPathSet"] !== undefined && output["networkInsightsPathSet"]["item"] !== undefined) {
    contents.NetworkInsightsPaths = de_NetworkInsightsPathList(
      __getArrayIfSingleItem(output["networkInsightsPathSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInterfaceAttributeResult
 */
const de_DescribeNetworkInterfaceAttributeResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInterfaceAttributeResult => {
  const contents: any = {};
  if (output["attachment"] !== undefined) {
    contents.Attachment = de_NetworkInterfaceAttachment(output["attachment"], context);
  }
  if (output["description"] !== undefined) {
    contents.Description = de_AttributeValue(output["description"], context);
  }
  if (output.groupSet === "") {
    contents.Groups = [];
  } else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["sourceDestCheck"] !== undefined) {
    contents.SourceDestCheck = de_AttributeBooleanValue(output["sourceDestCheck"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInterfacePermissionsResult
 */
const de_DescribeNetworkInterfacePermissionsResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInterfacePermissionsResult => {
  const contents: any = {};
  if (output.networkInterfacePermissions === "") {
    contents.NetworkInterfacePermissions = [];
  } else if (
    output["networkInterfacePermissions"] !== undefined &&
    output["networkInterfacePermissions"]["item"] !== undefined
  ) {
    contents.NetworkInterfacePermissions = de_NetworkInterfacePermissionList(
      __getArrayIfSingleItem(output["networkInterfacePermissions"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInterfacesResult
 */
const de_DescribeNetworkInterfacesResult = (output: any, context: __SerdeContext): DescribeNetworkInterfacesResult => {
  const contents: any = {};
  if (output.networkInterfaceSet === "") {
    contents.NetworkInterfaces = [];
  } else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
    contents.NetworkInterfaces = de_NetworkInterfaceList(
      __getArrayIfSingleItem(output["networkInterfaceSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribePlacementGroupsResult
 */
const de_DescribePlacementGroupsResult = (output: any, context: __SerdeContext): DescribePlacementGroupsResult => {
  const contents: any = {};
  if (output.placementGroupSet === "") {
    contents.PlacementGroups = [];
  } else if (output["placementGroupSet"] !== undefined && output["placementGroupSet"]["item"] !== undefined) {
    contents.PlacementGroups = de_PlacementGroupList(
      __getArrayIfSingleItem(output["placementGroupSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribePrefixListsResult
 */
const de_DescribePrefixListsResult = (output: any, context: __SerdeContext): DescribePrefixListsResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.prefixListSet === "") {
    contents.PrefixLists = [];
  } else if (output["prefixListSet"] !== undefined && output["prefixListSet"]["item"] !== undefined) {
    contents.PrefixLists = de_PrefixListSet(__getArrayIfSingleItem(output["prefixListSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribePrincipalIdFormatResult
 */
const de_DescribePrincipalIdFormatResult = (output: any, context: __SerdeContext): DescribePrincipalIdFormatResult => {
  const contents: any = {};
  if (output.principalSet === "") {
    contents.Principals = [];
  } else if (output["principalSet"] !== undefined && output["principalSet"]["item"] !== undefined) {
    contents.Principals = de_PrincipalIdFormatList(__getArrayIfSingleItem(output["principalSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribePublicIpv4PoolsResult
 */
const de_DescribePublicIpv4PoolsResult = (output: any, context: __SerdeContext): DescribePublicIpv4PoolsResult => {
  const contents: any = {};
  if (output.publicIpv4PoolSet === "") {
    contents.PublicIpv4Pools = [];
  } else if (output["publicIpv4PoolSet"] !== undefined && output["publicIpv4PoolSet"]["item"] !== undefined) {
    contents.PublicIpv4Pools = de_PublicIpv4PoolSet(
      __getArrayIfSingleItem(output["publicIpv4PoolSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeRegionsResult
 */
const de_DescribeRegionsResult = (output: any, context: __SerdeContext): DescribeRegionsResult => {
  const contents: any = {};
  if (output.regionInfo === "") {
    contents.Regions = [];
  } else if (output["regionInfo"] !== undefined && output["regionInfo"]["item"] !== undefined) {
    contents.Regions = de_RegionList(__getArrayIfSingleItem(output["regionInfo"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeReplaceRootVolumeTasksResult
 */
const de_DescribeReplaceRootVolumeTasksResult = (
  output: any,
  context: __SerdeContext
): DescribeReplaceRootVolumeTasksResult => {
  const contents: any = {};
  if (output.replaceRootVolumeTaskSet === "") {
    contents.ReplaceRootVolumeTasks = [];
  } else if (
    output["replaceRootVolumeTaskSet"] !== undefined &&
    output["replaceRootVolumeTaskSet"]["item"] !== undefined
  ) {
    contents.ReplaceRootVolumeTasks = de_ReplaceRootVolumeTasks(
      __getArrayIfSingleItem(output["replaceRootVolumeTaskSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesListingsResult
 */
const de_DescribeReservedInstancesListingsResult = (
  output: any,
  context: __SerdeContext
): DescribeReservedInstancesListingsResult => {
  const contents: any = {};
  if (output.reservedInstancesListingsSet === "") {
    contents.ReservedInstancesListings = [];
  } else if (
    output["reservedInstancesListingsSet"] !== undefined &&
    output["reservedInstancesListingsSet"]["item"] !== undefined
  ) {
    contents.ReservedInstancesListings = de_ReservedInstancesListingList(
      __getArrayIfSingleItem(output["reservedInstancesListingsSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesModificationsResult
 */
const de_DescribeReservedInstancesModificationsResult = (
  output: any,
  context: __SerdeContext
): DescribeReservedInstancesModificationsResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.reservedInstancesModificationsSet === "") {
    contents.ReservedInstancesModifications = [];
  } else if (
    output["reservedInstancesModificationsSet"] !== undefined &&
    output["reservedInstancesModificationsSet"]["item"] !== undefined
  ) {
    contents.ReservedInstancesModifications = de_ReservedInstancesModificationList(
      __getArrayIfSingleItem(output["reservedInstancesModificationsSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesOfferingsResult
 */
const de_DescribeReservedInstancesOfferingsResult = (
  output: any,
  context: __SerdeContext
): DescribeReservedInstancesOfferingsResult => {
  const contents: any = {};
  if (output.reservedInstancesOfferingsSet === "") {
    contents.ReservedInstancesOfferings = [];
  } else if (
    output["reservedInstancesOfferingsSet"] !== undefined &&
    output["reservedInstancesOfferingsSet"]["item"] !== undefined
  ) {
    contents.ReservedInstancesOfferings = de_ReservedInstancesOfferingList(
      __getArrayIfSingleItem(output["reservedInstancesOfferingsSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesResult
 */
const de_DescribeReservedInstancesResult = (output: any, context: __SerdeContext): DescribeReservedInstancesResult => {
  const contents: any = {};
  if (output.reservedInstancesSet === "") {
    contents.ReservedInstances = [];
  } else if (output["reservedInstancesSet"] !== undefined && output["reservedInstancesSet"]["item"] !== undefined) {
    contents.ReservedInstances = de_ReservedInstancesList(
      __getArrayIfSingleItem(output["reservedInstancesSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeRouteTablesResult
 */
const de_DescribeRouteTablesResult = (output: any, context: __SerdeContext): DescribeRouteTablesResult => {
  const contents: any = {};
  if (output.routeTableSet === "") {
    contents.RouteTables = [];
  } else if (output["routeTableSet"] !== undefined && output["routeTableSet"]["item"] !== undefined) {
    contents.RouteTables = de_RouteTableList(__getArrayIfSingleItem(output["routeTableSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeScheduledInstanceAvailabilityResult
 */
const de_DescribeScheduledInstanceAvailabilityResult = (
  output: any,
  context: __SerdeContext
): DescribeScheduledInstanceAvailabilityResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.scheduledInstanceAvailabilitySet === "") {
    contents.ScheduledInstanceAvailabilitySet = [];
  } else if (
    output["scheduledInstanceAvailabilitySet"] !== undefined &&
    output["scheduledInstanceAvailabilitySet"]["item"] !== undefined
  ) {
    contents.ScheduledInstanceAvailabilitySet = de_ScheduledInstanceAvailabilitySet(
      __getArrayIfSingleItem(output["scheduledInstanceAvailabilitySet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeScheduledInstancesResult
 */
const de_DescribeScheduledInstancesResult = (
  output: any,
  context: __SerdeContext
): DescribeScheduledInstancesResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.scheduledInstanceSet === "") {
    contents.ScheduledInstanceSet = [];
  } else if (output["scheduledInstanceSet"] !== undefined && output["scheduledInstanceSet"]["item"] !== undefined) {
    contents.ScheduledInstanceSet = de_ScheduledInstanceSet(
      __getArrayIfSingleItem(output["scheduledInstanceSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSecurityGroupReferencesResult
 */
const de_DescribeSecurityGroupReferencesResult = (
  output: any,
  context: __SerdeContext
): DescribeSecurityGroupReferencesResult => {
  const contents: any = {};
  if (output.securityGroupReferenceSet === "") {
    contents.SecurityGroupReferenceSet = [];
  } else if (
    output["securityGroupReferenceSet"] !== undefined &&
    output["securityGroupReferenceSet"]["item"] !== undefined
  ) {
    contents.SecurityGroupReferenceSet = de_SecurityGroupReferences(
      __getArrayIfSingleItem(output["securityGroupReferenceSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSecurityGroupRulesResult
 */
const de_DescribeSecurityGroupRulesResult = (
  output: any,
  context: __SerdeContext
): DescribeSecurityGroupRulesResult => {
  const contents: any = {};
  if (output.securityGroupRuleSet === "") {
    contents.SecurityGroupRules = [];
  } else if (output["securityGroupRuleSet"] !== undefined && output["securityGroupRuleSet"]["item"] !== undefined) {
    contents.SecurityGroupRules = de_SecurityGroupRuleList(
      __getArrayIfSingleItem(output["securityGroupRuleSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSecurityGroupsResult
 */
const de_DescribeSecurityGroupsResult = (output: any, context: __SerdeContext): DescribeSecurityGroupsResult => {
  const contents: any = {};
  if (output.securityGroupInfo === "") {
    contents.SecurityGroups = [];
  } else if (output["securityGroupInfo"] !== undefined && output["securityGroupInfo"]["item"] !== undefined) {
    contents.SecurityGroups = de_SecurityGroupList(
      __getArrayIfSingleItem(output["securityGroupInfo"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSnapshotAttributeResult
 */
const de_DescribeSnapshotAttributeResult = (output: any, context: __SerdeContext): DescribeSnapshotAttributeResult => {
  const contents: any = {};
  if (output.createVolumePermission === "") {
    contents.CreateVolumePermissions = [];
  } else if (output["createVolumePermission"] !== undefined && output["createVolumePermission"]["item"] !== undefined) {
    contents.CreateVolumePermissions = de_CreateVolumePermissionList(
      __getArrayIfSingleItem(output["createVolumePermission"]["item"]),
      context
    );
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  } else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSnapshotsResult
 */
const de_DescribeSnapshotsResult = (output: any, context: __SerdeContext): DescribeSnapshotsResult => {
  const contents: any = {};
  if (output.snapshotSet === "") {
    contents.Snapshots = [];
  } else if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
    contents.Snapshots = de_SnapshotList(__getArrayIfSingleItem(output["snapshotSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSnapshotTierStatusResult
 */
const de_DescribeSnapshotTierStatusResult = (
  output: any,
  context: __SerdeContext
): DescribeSnapshotTierStatusResult => {
  const contents: any = {};
  if (output.snapshotTierStatusSet === "") {
    contents.SnapshotTierStatuses = [];
  } else if (output["snapshotTierStatusSet"] !== undefined && output["snapshotTierStatusSet"]["item"] !== undefined) {
    contents.SnapshotTierStatuses = de_snapshotTierStatusSet(
      __getArrayIfSingleItem(output["snapshotTierStatusSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSpotDatafeedSubscriptionResult
 */
const de_DescribeSpotDatafeedSubscriptionResult = (
  output: any,
  context: __SerdeContext
): DescribeSpotDatafeedSubscriptionResult => {
  const contents: any = {};
  if (output["spotDatafeedSubscription"] !== undefined) {
    contents.SpotDatafeedSubscription = de_SpotDatafeedSubscription(output["spotDatafeedSubscription"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSpotFleetInstancesResponse
 */
const de_DescribeSpotFleetInstancesResponse = (
  output: any,
  context: __SerdeContext
): DescribeSpotFleetInstancesResponse => {
  const contents: any = {};
  if (output.activeInstanceSet === "") {
    contents.ActiveInstances = [];
  } else if (output["activeInstanceSet"] !== undefined && output["activeInstanceSet"]["item"] !== undefined) {
    contents.ActiveInstances = de_ActiveInstanceSet(
      __getArrayIfSingleItem(output["activeInstanceSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output["spotFleetRequestId"] !== undefined) {
    contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSpotFleetRequestHistoryResponse
 */
const de_DescribeSpotFleetRequestHistoryResponse = (
  output: any,
  context: __SerdeContext
): DescribeSpotFleetRequestHistoryResponse => {
  const contents: any = {};
  if (output.historyRecordSet === "") {
    contents.HistoryRecords = [];
  } else if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
    contents.HistoryRecords = de_HistoryRecords(__getArrayIfSingleItem(output["historyRecordSet"]["item"]), context);
  }
  if (output["lastEvaluatedTime"] !== undefined) {
    contents.LastEvaluatedTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["lastEvaluatedTime"]));
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output["spotFleetRequestId"] !== undefined) {
    contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSpotFleetRequestsResponse
 */
const de_DescribeSpotFleetRequestsResponse = (
  output: any,
  context: __SerdeContext
): DescribeSpotFleetRequestsResponse => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.spotFleetRequestConfigSet === "") {
    contents.SpotFleetRequestConfigs = [];
  } else if (
    output["spotFleetRequestConfigSet"] !== undefined &&
    output["spotFleetRequestConfigSet"]["item"] !== undefined
  ) {
    contents.SpotFleetRequestConfigs = de_SpotFleetRequestConfigSet(
      __getArrayIfSingleItem(output["spotFleetRequestConfigSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSpotInstanceRequestsResult
 */
const de_DescribeSpotInstanceRequestsResult = (
  output: any,
  context: __SerdeContext
): DescribeSpotInstanceRequestsResult => {
  const contents: any = {};
  if (output.spotInstanceRequestSet === "") {
    contents.SpotInstanceRequests = [];
  } else if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
    contents.SpotInstanceRequests = de_SpotInstanceRequestList(
      __getArrayIfSingleItem(output["spotInstanceRequestSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSpotPriceHistoryResult
 */
const de_DescribeSpotPriceHistoryResult = (output: any, context: __SerdeContext): DescribeSpotPriceHistoryResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.spotPriceHistorySet === "") {
    contents.SpotPriceHistory = [];
  } else if (output["spotPriceHistorySet"] !== undefined && output["spotPriceHistorySet"]["item"] !== undefined) {
    contents.SpotPriceHistory = de_SpotPriceHistoryList(
      __getArrayIfSingleItem(output["spotPriceHistorySet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeStaleSecurityGroupsResult
 */
const de_DescribeStaleSecurityGroupsResult = (
  output: any,
  context: __SerdeContext
): DescribeStaleSecurityGroupsResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.staleSecurityGroupSet === "") {
    contents.StaleSecurityGroupSet = [];
  } else if (output["staleSecurityGroupSet"] !== undefined && output["staleSecurityGroupSet"]["item"] !== undefined) {
    contents.StaleSecurityGroupSet = de_StaleSecurityGroupSet(
      __getArrayIfSingleItem(output["staleSecurityGroupSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeStoreImageTasksResult
 */
const de_DescribeStoreImageTasksResult = (output: any, context: __SerdeContext): DescribeStoreImageTasksResult => {
  const contents: any = {};
  if (output.storeImageTaskResultSet === "") {
    contents.StoreImageTaskResults = [];
  } else if (
    output["storeImageTaskResultSet"] !== undefined &&
    output["storeImageTaskResultSet"]["item"] !== undefined
  ) {
    contents.StoreImageTaskResults = de_StoreImageTaskResultSet(
      __getArrayIfSingleItem(output["storeImageTaskResultSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSubnetsResult
 */
const de_DescribeSubnetsResult = (output: any, context: __SerdeContext): DescribeSubnetsResult => {
  const contents: any = {};
  if (output.subnetSet === "") {
    contents.Subnets = [];
  } else if (output["subnetSet"] !== undefined && output["subnetSet"]["item"] !== undefined) {
    contents.Subnets = de_SubnetList(__getArrayIfSingleItem(output["subnetSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTagsResult
 */
const de_DescribeTagsResult = (output: any, context: __SerdeContext): DescribeTagsResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagDescriptionList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorFiltersResult
 */
const de_DescribeTrafficMirrorFiltersResult = (
  output: any,
  context: __SerdeContext
): DescribeTrafficMirrorFiltersResult => {
  const contents: any = {};
  if (output.trafficMirrorFilterSet === "") {
    contents.TrafficMirrorFilters = [];
  } else if (output["trafficMirrorFilterSet"] !== undefined && output["trafficMirrorFilterSet"]["item"] !== undefined) {
    contents.TrafficMirrorFilters = de_TrafficMirrorFilterSet(
      __getArrayIfSingleItem(output["trafficMirrorFilterSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorSessionsResult
 */
const de_DescribeTrafficMirrorSessionsResult = (
  output: any,
  context: __SerdeContext
): DescribeTrafficMirrorSessionsResult => {
  const contents: any = {};
  if (output.trafficMirrorSessionSet === "") {
    contents.TrafficMirrorSessions = [];
  } else if (
    output["trafficMirrorSessionSet"] !== undefined &&
    output["trafficMirrorSessionSet"]["item"] !== undefined
  ) {
    contents.TrafficMirrorSessions = de_TrafficMirrorSessionSet(
      __getArrayIfSingleItem(output["trafficMirrorSessionSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorTargetsResult
 */
const de_DescribeTrafficMirrorTargetsResult = (
  output: any,
  context: __SerdeContext
): DescribeTrafficMirrorTargetsResult => {
  const contents: any = {};
  if (output.trafficMirrorTargetSet === "") {
    contents.TrafficMirrorTargets = [];
  } else if (output["trafficMirrorTargetSet"] !== undefined && output["trafficMirrorTargetSet"]["item"] !== undefined) {
    contents.TrafficMirrorTargets = de_TrafficMirrorTargetSet(
      __getArrayIfSingleItem(output["trafficMirrorTargetSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayAttachmentsResult
 */
const de_DescribeTransitGatewayAttachmentsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayAttachmentsResult => {
  const contents: any = {};
  if (output.transitGatewayAttachments === "") {
    contents.TransitGatewayAttachments = [];
  } else if (
    output["transitGatewayAttachments"] !== undefined &&
    output["transitGatewayAttachments"]["item"] !== undefined
  ) {
    contents.TransitGatewayAttachments = de_TransitGatewayAttachmentList(
      __getArrayIfSingleItem(output["transitGatewayAttachments"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayConnectPeersResult
 */
const de_DescribeTransitGatewayConnectPeersResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayConnectPeersResult => {
  const contents: any = {};
  if (output.transitGatewayConnectPeerSet === "") {
    contents.TransitGatewayConnectPeers = [];
  } else if (
    output["transitGatewayConnectPeerSet"] !== undefined &&
    output["transitGatewayConnectPeerSet"]["item"] !== undefined
  ) {
    contents.TransitGatewayConnectPeers = de_TransitGatewayConnectPeerList(
      __getArrayIfSingleItem(output["transitGatewayConnectPeerSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayConnectsResult
 */
const de_DescribeTransitGatewayConnectsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayConnectsResult => {
  const contents: any = {};
  if (output.transitGatewayConnectSet === "") {
    contents.TransitGatewayConnects = [];
  } else if (
    output["transitGatewayConnectSet"] !== undefined &&
    output["transitGatewayConnectSet"]["item"] !== undefined
  ) {
    contents.TransitGatewayConnects = de_TransitGatewayConnectList(
      __getArrayIfSingleItem(output["transitGatewayConnectSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayMulticastDomainsResult
 */
const de_DescribeTransitGatewayMulticastDomainsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayMulticastDomainsResult => {
  const contents: any = {};
  if (output.transitGatewayMulticastDomains === "") {
    contents.TransitGatewayMulticastDomains = [];
  } else if (
    output["transitGatewayMulticastDomains"] !== undefined &&
    output["transitGatewayMulticastDomains"]["item"] !== undefined
  ) {
    contents.TransitGatewayMulticastDomains = de_TransitGatewayMulticastDomainList(
      __getArrayIfSingleItem(output["transitGatewayMulticastDomains"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsResult
 */
const de_DescribeTransitGatewayPeeringAttachmentsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayPeeringAttachmentsResult => {
  const contents: any = {};
  if (output.transitGatewayPeeringAttachments === "") {
    contents.TransitGatewayPeeringAttachments = [];
  } else if (
    output["transitGatewayPeeringAttachments"] !== undefined &&
    output["transitGatewayPeeringAttachments"]["item"] !== undefined
  ) {
    contents.TransitGatewayPeeringAttachments = de_TransitGatewayPeeringAttachmentList(
      __getArrayIfSingleItem(output["transitGatewayPeeringAttachments"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayPolicyTablesResult
 */
const de_DescribeTransitGatewayPolicyTablesResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayPolicyTablesResult => {
  const contents: any = {};
  if (output.transitGatewayPolicyTables === "") {
    contents.TransitGatewayPolicyTables = [];
  } else if (
    output["transitGatewayPolicyTables"] !== undefined &&
    output["transitGatewayPolicyTables"]["item"] !== undefined
  ) {
    contents.TransitGatewayPolicyTables = de_TransitGatewayPolicyTableList(
      __getArrayIfSingleItem(output["transitGatewayPolicyTables"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayRouteTableAnnouncementsResult
 */
const de_DescribeTransitGatewayRouteTableAnnouncementsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayRouteTableAnnouncementsResult => {
  const contents: any = {};
  if (output.transitGatewayRouteTableAnnouncements === "") {
    contents.TransitGatewayRouteTableAnnouncements = [];
  } else if (
    output["transitGatewayRouteTableAnnouncements"] !== undefined &&
    output["transitGatewayRouteTableAnnouncements"]["item"] !== undefined
  ) {
    contents.TransitGatewayRouteTableAnnouncements = de_TransitGatewayRouteTableAnnouncementList(
      __getArrayIfSingleItem(output["transitGatewayRouteTableAnnouncements"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayRouteTablesResult
 */
const de_DescribeTransitGatewayRouteTablesResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayRouteTablesResult => {
  const contents: any = {};
  if (output.transitGatewayRouteTables === "") {
    contents.TransitGatewayRouteTables = [];
  } else if (
    output["transitGatewayRouteTables"] !== undefined &&
    output["transitGatewayRouteTables"]["item"] !== undefined
  ) {
    contents.TransitGatewayRouteTables = de_TransitGatewayRouteTableList(
      __getArrayIfSingleItem(output["transitGatewayRouteTables"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewaysResult
 */
const de_DescribeTransitGatewaysResult = (output: any, context: __SerdeContext): DescribeTransitGatewaysResult => {
  const contents: any = {};
  if (output.transitGatewaySet === "") {
    contents.TransitGateways = [];
  } else if (output["transitGatewaySet"] !== undefined && output["transitGatewaySet"]["item"] !== undefined) {
    contents.TransitGateways = de_TransitGatewayList(
      __getArrayIfSingleItem(output["transitGatewaySet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsResult
 */
const de_DescribeTransitGatewayVpcAttachmentsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayVpcAttachmentsResult => {
  const contents: any = {};
  if (output.transitGatewayVpcAttachments === "") {
    contents.TransitGatewayVpcAttachments = [];
  } else if (
    output["transitGatewayVpcAttachments"] !== undefined &&
    output["transitGatewayVpcAttachments"]["item"] !== undefined
  ) {
    contents.TransitGatewayVpcAttachments = de_TransitGatewayVpcAttachmentList(
      __getArrayIfSingleItem(output["transitGatewayVpcAttachments"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTrunkInterfaceAssociationsResult
 */
const de_DescribeTrunkInterfaceAssociationsResult = (
  output: any,
  context: __SerdeContext
): DescribeTrunkInterfaceAssociationsResult => {
  const contents: any = {};
  if (output.interfaceAssociationSet === "") {
    contents.InterfaceAssociations = [];
  } else if (
    output["interfaceAssociationSet"] !== undefined &&
    output["interfaceAssociationSet"]["item"] !== undefined
  ) {
    contents.InterfaceAssociations = de_TrunkInterfaceAssociationList(
      __getArrayIfSingleItem(output["interfaceAssociationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessEndpointsResult
 */
const de_DescribeVerifiedAccessEndpointsResult = (
  output: any,
  context: __SerdeContext
): DescribeVerifiedAccessEndpointsResult => {
  const contents: any = {};
  if (output.verifiedAccessEndpointSet === "") {
    contents.VerifiedAccessEndpoints = [];
  } else if (
    output["verifiedAccessEndpointSet"] !== undefined &&
    output["verifiedAccessEndpointSet"]["item"] !== undefined
  ) {
    contents.VerifiedAccessEndpoints = de_VerifiedAccessEndpointList(
      __getArrayIfSingleItem(output["verifiedAccessEndpointSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessGroupsResult
 */
const de_DescribeVerifiedAccessGroupsResult = (
  output: any,
  context: __SerdeContext
): DescribeVerifiedAccessGroupsResult => {
  const contents: any = {};
  if (output.verifiedAccessGroupSet === "") {
    contents.VerifiedAccessGroups = [];
  } else if (output["verifiedAccessGroupSet"] !== undefined && output["verifiedAccessGroupSet"]["item"] !== undefined) {
    contents.VerifiedAccessGroups = de_VerifiedAccessGroupList(
      __getArrayIfSingleItem(output["verifiedAccessGroupSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessInstanceLoggingConfigurationsResult
 */
const de_DescribeVerifiedAccessInstanceLoggingConfigurationsResult = (
  output: any,
  context: __SerdeContext
): DescribeVerifiedAccessInstanceLoggingConfigurationsResult => {
  const contents: any = {};
  if (output.loggingConfigurationSet === "") {
    contents.LoggingConfigurations = [];
  } else if (
    output["loggingConfigurationSet"] !== undefined &&
    output["loggingConfigurationSet"]["item"] !== undefined
  ) {
    contents.LoggingConfigurations = de_VerifiedAccessInstanceLoggingConfigurationList(
      __getArrayIfSingleItem(output["loggingConfigurationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessInstancesResult
 */
const de_DescribeVerifiedAccessInstancesResult = (
  output: any,
  context: __SerdeContext
): DescribeVerifiedAccessInstancesResult => {
  const contents: any = {};
  if (output.verifiedAccessInstanceSet === "") {
    contents.VerifiedAccessInstances = [];
  } else if (
    output["verifiedAccessInstanceSet"] !== undefined &&
    output["verifiedAccessInstanceSet"]["item"] !== undefined
  ) {
    contents.VerifiedAccessInstances = de_VerifiedAccessInstanceList(
      __getArrayIfSingleItem(output["verifiedAccessInstanceSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessTrustProvidersResult
 */
const de_DescribeVerifiedAccessTrustProvidersResult = (
  output: any,
  context: __SerdeContext
): DescribeVerifiedAccessTrustProvidersResult => {
  const contents: any = {};
  if (output.verifiedAccessTrustProviderSet === "") {
    contents.VerifiedAccessTrustProviders = [];
  } else if (
    output["verifiedAccessTrustProviderSet"] !== undefined &&
    output["verifiedAccessTrustProviderSet"]["item"] !== undefined
  ) {
    contents.VerifiedAccessTrustProviders = de_VerifiedAccessTrustProviderList(
      __getArrayIfSingleItem(output["verifiedAccessTrustProviderSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVolumeAttributeResult
 */
const de_DescribeVolumeAttributeResult = (output: any, context: __SerdeContext): DescribeVolumeAttributeResult => {
  const contents: any = {};
  if (output["autoEnableIO"] !== undefined) {
    contents.AutoEnableIO = de_AttributeBooleanValue(output["autoEnableIO"], context);
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  } else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = __expectString(output["volumeId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVolumesModificationsResult
 */
const de_DescribeVolumesModificationsResult = (
  output: any,
  context: __SerdeContext
): DescribeVolumesModificationsResult => {
  const contents: any = {};
  if (output.volumeModificationSet === "") {
    contents.VolumesModifications = [];
  } else if (output["volumeModificationSet"] !== undefined && output["volumeModificationSet"]["item"] !== undefined) {
    contents.VolumesModifications = de_VolumeModificationList(
      __getArrayIfSingleItem(output["volumeModificationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVolumesResult
 */
const de_DescribeVolumesResult = (output: any, context: __SerdeContext): DescribeVolumesResult => {
  const contents: any = {};
  if (output.volumeSet === "") {
    contents.Volumes = [];
  } else if (output["volumeSet"] !== undefined && output["volumeSet"]["item"] !== undefined) {
    contents.Volumes = de_VolumeList(__getArrayIfSingleItem(output["volumeSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVolumeStatusResult
 */
const de_DescribeVolumeStatusResult = (output: any, context: __SerdeContext): DescribeVolumeStatusResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.volumeStatusSet === "") {
    contents.VolumeStatuses = [];
  } else if (output["volumeStatusSet"] !== undefined && output["volumeStatusSet"]["item"] !== undefined) {
    contents.VolumeStatuses = de_VolumeStatusList(__getArrayIfSingleItem(output["volumeStatusSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcAttributeResult
 */
const de_DescribeVpcAttributeResult = (output: any, context: __SerdeContext): DescribeVpcAttributeResult => {
  const contents: any = {};
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["enableDnsHostnames"] !== undefined) {
    contents.EnableDnsHostnames = de_AttributeBooleanValue(output["enableDnsHostnames"], context);
  }
  if (output["enableDnsSupport"] !== undefined) {
    contents.EnableDnsSupport = de_AttributeBooleanValue(output["enableDnsSupport"], context);
  }
  if (output["enableNetworkAddressUsageMetrics"] !== undefined) {
    contents.EnableNetworkAddressUsageMetrics = de_AttributeBooleanValue(
      output["enableNetworkAddressUsageMetrics"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcClassicLinkDnsSupportResult
 */
const de_DescribeVpcClassicLinkDnsSupportResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcClassicLinkDnsSupportResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.vpcs === "") {
    contents.Vpcs = [];
  } else if (output["vpcs"] !== undefined && output["vpcs"]["item"] !== undefined) {
    contents.Vpcs = de_ClassicLinkDnsSupportList(__getArrayIfSingleItem(output["vpcs"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcClassicLinkResult
 */
const de_DescribeVpcClassicLinkResult = (output: any, context: __SerdeContext): DescribeVpcClassicLinkResult => {
  const contents: any = {};
  if (output.vpcSet === "") {
    contents.Vpcs = [];
  } else if (output["vpcSet"] !== undefined && output["vpcSet"]["item"] !== undefined) {
    contents.Vpcs = de_VpcClassicLinkList(__getArrayIfSingleItem(output["vpcSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsResult
 */
const de_DescribeVpcEndpointConnectionNotificationsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointConnectionNotificationsResult => {
  const contents: any = {};
  if (output.connectionNotificationSet === "") {
    contents.ConnectionNotificationSet = [];
  } else if (
    output["connectionNotificationSet"] !== undefined &&
    output["connectionNotificationSet"]["item"] !== undefined
  ) {
    contents.ConnectionNotificationSet = de_ConnectionNotificationSet(
      __getArrayIfSingleItem(output["connectionNotificationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointConnectionsResult
 */
const de_DescribeVpcEndpointConnectionsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointConnectionsResult => {
  const contents: any = {};
  if (output.vpcEndpointConnectionSet === "") {
    contents.VpcEndpointConnections = [];
  } else if (
    output["vpcEndpointConnectionSet"] !== undefined &&
    output["vpcEndpointConnectionSet"]["item"] !== undefined
  ) {
    contents.VpcEndpointConnections = de_VpcEndpointConnectionSet(
      __getArrayIfSingleItem(output["vpcEndpointConnectionSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsResult
 */
const de_DescribeVpcEndpointServiceConfigurationsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointServiceConfigurationsResult => {
  const contents: any = {};
  if (output.serviceConfigurationSet === "") {
    contents.ServiceConfigurations = [];
  } else if (
    output["serviceConfigurationSet"] !== undefined &&
    output["serviceConfigurationSet"]["item"] !== undefined
  ) {
    contents.ServiceConfigurations = de_ServiceConfigurationSet(
      __getArrayIfSingleItem(output["serviceConfigurationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServicePermissionsResult
 */
const de_DescribeVpcEndpointServicePermissionsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointServicePermissionsResult => {
  const contents: any = {};
  if (output.allowedPrincipals === "") {
    contents.AllowedPrincipals = [];
  } else if (output["allowedPrincipals"] !== undefined && output["allowedPrincipals"]["item"] !== undefined) {
    contents.AllowedPrincipals = de_AllowedPrincipalSet(
      __getArrayIfSingleItem(output["allowedPrincipals"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServicesResult
 */
const de_DescribeVpcEndpointServicesResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointServicesResult => {
  const contents: any = {};
  if (output.serviceNameSet === "") {
    contents.ServiceNames = [];
  } else if (output["serviceNameSet"] !== undefined && output["serviceNameSet"]["item"] !== undefined) {
    contents.ServiceNames = de_ValueStringList(__getArrayIfSingleItem(output["serviceNameSet"]["item"]), context);
  }
  if (output.serviceDetailSet === "") {
    contents.ServiceDetails = [];
  } else if (output["serviceDetailSet"] !== undefined && output["serviceDetailSet"]["item"] !== undefined) {
    contents.ServiceDetails = de_ServiceDetailSet(__getArrayIfSingleItem(output["serviceDetailSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointsResult
 */
const de_DescribeVpcEndpointsResult = (output: any, context: __SerdeContext): DescribeVpcEndpointsResult => {
  const contents: any = {};
  if (output.vpcEndpointSet === "") {
    contents.VpcEndpoints = [];
  } else if (output["vpcEndpointSet"] !== undefined && output["vpcEndpointSet"]["item"] !== undefined) {
    contents.VpcEndpoints = de_VpcEndpointSet(__getArrayIfSingleItem(output["vpcEndpointSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcPeeringConnectionsResult
 */
const de_DescribeVpcPeeringConnectionsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcPeeringConnectionsResult => {
  const contents: any = {};
  if (output.vpcPeeringConnectionSet === "") {
    contents.VpcPeeringConnections = [];
  } else if (
    output["vpcPeeringConnectionSet"] !== undefined &&
    output["vpcPeeringConnectionSet"]["item"] !== undefined
  ) {
    contents.VpcPeeringConnections = de_VpcPeeringConnectionList(
      __getArrayIfSingleItem(output["vpcPeeringConnectionSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcsResult
 */
const de_DescribeVpcsResult = (output: any, context: __SerdeContext): DescribeVpcsResult => {
  const contents: any = {};
  if (output.vpcSet === "") {
    contents.Vpcs = [];
  } else if (output["vpcSet"] !== undefined && output["vpcSet"]["item"] !== undefined) {
    contents.Vpcs = de_VpcList(__getArrayIfSingleItem(output["vpcSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpnConnectionsResult
 */
const de_DescribeVpnConnectionsResult = (output: any, context: __SerdeContext): DescribeVpnConnectionsResult => {
  const contents: any = {};
  if (output.vpnConnectionSet === "") {
    contents.VpnConnections = [];
  } else if (output["vpnConnectionSet"] !== undefined && output["vpnConnectionSet"]["item"] !== undefined) {
    contents.VpnConnections = de_VpnConnectionList(__getArrayIfSingleItem(output["vpnConnectionSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpnGatewaysResult
 */
const de_DescribeVpnGatewaysResult = (output: any, context: __SerdeContext): DescribeVpnGatewaysResult => {
  const contents: any = {};
  if (output.vpnGatewaySet === "") {
    contents.VpnGateways = [];
  } else if (output["vpnGatewaySet"] !== undefined && output["vpnGatewaySet"]["item"] !== undefined) {
    contents.VpnGateways = de_VpnGatewayList(__getArrayIfSingleItem(output["vpnGatewaySet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DestinationOptionsResponse
 */
const de_DestinationOptionsResponse = (output: any, context: __SerdeContext): DestinationOptionsResponse => {
  const contents: any = {};
  if (output["fileFormat"] !== undefined) {
    contents.FileFormat = __expectString(output["fileFormat"]);
  }
  if (output["hiveCompatiblePartitions"] !== undefined) {
    contents.HiveCompatiblePartitions = __parseBoolean(output["hiveCompatiblePartitions"]);
  }
  if (output["perHourPartition"] !== undefined) {
    contents.PerHourPartition = __parseBoolean(output["perHourPartition"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DetachClassicLinkVpcResult
 */
const de_DetachClassicLinkVpcResult = (output: any, context: __SerdeContext): DetachClassicLinkVpcResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DetachVerifiedAccessTrustProviderResult
 */
const de_DetachVerifiedAccessTrustProviderResult = (
  output: any,
  context: __SerdeContext
): DetachVerifiedAccessTrustProviderResult => {
  const contents: any = {};
  if (output["verifiedAccessTrustProvider"] !== undefined) {
    contents.VerifiedAccessTrustProvider = de_VerifiedAccessTrustProvider(
      output["verifiedAccessTrustProvider"],
      context
    );
  }
  if (output["verifiedAccessInstance"] !== undefined) {
    contents.VerifiedAccessInstance = de_VerifiedAccessInstance(output["verifiedAccessInstance"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeviceOptions
 */
const de_DeviceOptions = (output: any, context: __SerdeContext): DeviceOptions => {
  const contents: any = {};
  if (output["tenantId"] !== undefined) {
    contents.TenantId = __expectString(output["tenantId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DhcpConfiguration
 */
const de_DhcpConfiguration = (output: any, context: __SerdeContext): DhcpConfiguration => {
  const contents: any = {};
  if (output["key"] !== undefined) {
    contents.Key = __expectString(output["key"]);
  }
  if (output.valueSet === "") {
    contents.Values = [];
  } else if (output["valueSet"] !== undefined && output["valueSet"]["item"] !== undefined) {
    contents.Values = de_DhcpConfigurationValueList(__getArrayIfSingleItem(output["valueSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DhcpConfigurationList
 */
const de_DhcpConfigurationList = (output: any, context: __SerdeContext): DhcpConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DhcpConfiguration(entry, context);
    });
};

/**
 * deserializeAws_ec2DhcpConfigurationValueList
 */
const de_DhcpConfigurationValueList = (output: any, context: __SerdeContext): AttributeValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AttributeValue(entry, context);
    });
};

/**
 * deserializeAws_ec2DhcpOptions
 */
const de_DhcpOptions = (output: any, context: __SerdeContext): DhcpOptions => {
  const contents: any = {};
  if (output.dhcpConfigurationSet === "") {
    contents.DhcpConfigurations = [];
  } else if (output["dhcpConfigurationSet"] !== undefined && output["dhcpConfigurationSet"]["item"] !== undefined) {
    contents.DhcpConfigurations = de_DhcpConfigurationList(
      __getArrayIfSingleItem(output["dhcpConfigurationSet"]["item"]),
      context
    );
  }
  if (output["dhcpOptionsId"] !== undefined) {
    contents.DhcpOptionsId = __expectString(output["dhcpOptionsId"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DhcpOptionsList
 */
const de_DhcpOptionsList = (output: any, context: __SerdeContext): DhcpOptions[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DhcpOptions(entry, context);
    });
};

/**
 * deserializeAws_ec2DirectoryServiceAuthentication
 */
const de_DirectoryServiceAuthentication = (output: any, context: __SerdeContext): DirectoryServiceAuthentication => {
  const contents: any = {};
  if (output["directoryId"] !== undefined) {
    contents.DirectoryId = __expectString(output["directoryId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableAddressTransferResult
 */
const de_DisableAddressTransferResult = (output: any, context: __SerdeContext): DisableAddressTransferResult => {
  const contents: any = {};
  if (output["addressTransfer"] !== undefined) {
    contents.AddressTransfer = de_AddressTransfer(output["addressTransfer"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableAwsNetworkPerformanceMetricSubscriptionResult
 */
const de_DisableAwsNetworkPerformanceMetricSubscriptionResult = (
  output: any,
  context: __SerdeContext
): DisableAwsNetworkPerformanceMetricSubscriptionResult => {
  const contents: any = {};
  if (output["output"] !== undefined) {
    contents.Output = __parseBoolean(output["output"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableEbsEncryptionByDefaultResult
 */
const de_DisableEbsEncryptionByDefaultResult = (
  output: any,
  context: __SerdeContext
): DisableEbsEncryptionByDefaultResult => {
  const contents: any = {};
  if (output["ebsEncryptionByDefault"] !== undefined) {
    contents.EbsEncryptionByDefault = __parseBoolean(output["ebsEncryptionByDefault"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastLaunchResult
 */
const de_DisableFastLaunchResult = (output: any, context: __SerdeContext): DisableFastLaunchResult => {
  const contents: any = {};
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["snapshotConfiguration"] !== undefined) {
    contents.SnapshotConfiguration = de_FastLaunchSnapshotConfigurationResponse(
      output["snapshotConfiguration"],
      context
    );
  }
  if (output["launchTemplate"] !== undefined) {
    contents.LaunchTemplate = de_FastLaunchLaunchTemplateSpecificationResponse(output["launchTemplate"], context);
  }
  if (output["maxParallelLaunches"] !== undefined) {
    contents.MaxParallelLaunches = __strictParseInt32(output["maxParallelLaunches"]) as number;
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["stateTransitionReason"] !== undefined) {
    contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
  }
  if (output["stateTransitionTime"] !== undefined) {
    contents.StateTransitionTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["stateTransitionTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreErrorItem
 */
const de_DisableFastSnapshotRestoreErrorItem = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreErrorItem => {
  const contents: any = {};
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output.fastSnapshotRestoreStateErrorSet === "") {
    contents.FastSnapshotRestoreStateErrors = [];
  } else if (
    output["fastSnapshotRestoreStateErrorSet"] !== undefined &&
    output["fastSnapshotRestoreStateErrorSet"]["item"] !== undefined
  ) {
    contents.FastSnapshotRestoreStateErrors = de_DisableFastSnapshotRestoreStateErrorSet(
      __getArrayIfSingleItem(output["fastSnapshotRestoreStateErrorSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreErrorSet
 */
const de_DisableFastSnapshotRestoreErrorSet = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DisableFastSnapshotRestoreErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoresResult
 */
const de_DisableFastSnapshotRestoresResult = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoresResult => {
  const contents: any = {};
  if (output.successful === "") {
    contents.Successful = [];
  } else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
    contents.Successful = de_DisableFastSnapshotRestoreSuccessSet(
      __getArrayIfSingleItem(output["successful"]["item"]),
      context
    );
  }
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  } else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = de_DisableFastSnapshotRestoreErrorSet(
      __getArrayIfSingleItem(output["unsuccessful"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreStateError
 */
const de_DisableFastSnapshotRestoreStateError = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreStateError => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreStateErrorItem
 */
const de_DisableFastSnapshotRestoreStateErrorItem = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreStateErrorItem => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["error"] !== undefined) {
    contents.Error = de_DisableFastSnapshotRestoreStateError(output["error"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreStateErrorSet
 */
const de_DisableFastSnapshotRestoreStateErrorSet = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreStateErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DisableFastSnapshotRestoreStateErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreSuccessItem
 */
const de_DisableFastSnapshotRestoreSuccessItem = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreSuccessItem => {
  const contents: any = {};
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["stateTransitionReason"] !== undefined) {
    contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["ownerAlias"] !== undefined) {
    contents.OwnerAlias = __expectString(output["ownerAlias"]);
  }
  if (output["enablingTime"] !== undefined) {
    contents.EnablingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["enablingTime"]));
  }
  if (output["optimizingTime"] !== undefined) {
    contents.OptimizingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["optimizingTime"]));
  }
  if (output["enabledTime"] !== undefined) {
    contents.EnabledTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["enabledTime"]));
  }
  if (output["disablingTime"] !== undefined) {
    contents.DisablingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["disablingTime"]));
  }
  if (output["disabledTime"] !== undefined) {
    contents.DisabledTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["disabledTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreSuccessSet
 */
const de_DisableFastSnapshotRestoreSuccessSet = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DisableFastSnapshotRestoreSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DisableImageBlockPublicAccessResult
 */
const de_DisableImageBlockPublicAccessResult = (
  output: any,
  context: __SerdeContext
): DisableImageBlockPublicAccessResult => {
  const contents: any = {};
  if (output["imageBlockPublicAccessState"] !== undefined) {
    contents.ImageBlockPublicAccessState = __expectString(output["imageBlockPublicAccessState"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableImageDeprecationResult
 */
const de_DisableImageDeprecationResult = (output: any, context: __SerdeContext): DisableImageDeprecationResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableImageResult
 */
const de_DisableImageResult = (output: any, context: __SerdeContext): DisableImageResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableIpamOrganizationAdminAccountResult
 */
const de_DisableIpamOrganizationAdminAccountResult = (
  output: any,
  context: __SerdeContext
): DisableIpamOrganizationAdminAccountResult => {
  const contents: any = {};
  if (output["success"] !== undefined) {
    contents.Success = __parseBoolean(output["success"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableSerialConsoleAccessResult
 */
const de_DisableSerialConsoleAccessResult = (
  output: any,
  context: __SerdeContext
): DisableSerialConsoleAccessResult => {
  const contents: any = {};
  if (output["serialConsoleAccessEnabled"] !== undefined) {
    contents.SerialConsoleAccessEnabled = __parseBoolean(output["serialConsoleAccessEnabled"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableTransitGatewayRouteTablePropagationResult
 */
const de_DisableTransitGatewayRouteTablePropagationResult = (
  output: any,
  context: __SerdeContext
): DisableTransitGatewayRouteTablePropagationResult => {
  const contents: any = {};
  if (output["propagation"] !== undefined) {
    contents.Propagation = de_TransitGatewayPropagation(output["propagation"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableVpcClassicLinkDnsSupportResult
 */
const de_DisableVpcClassicLinkDnsSupportResult = (
  output: any,
  context: __SerdeContext
): DisableVpcClassicLinkDnsSupportResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableVpcClassicLinkResult
 */
const de_DisableVpcClassicLinkResult = (output: any, context: __SerdeContext): DisableVpcClassicLinkResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateClientVpnTargetNetworkResult
 */
const de_DisassociateClientVpnTargetNetworkResult = (
  output: any,
  context: __SerdeContext
): DisassociateClientVpnTargetNetworkResult => {
  const contents: any = {};
  if (output["associationId"] !== undefined) {
    contents.AssociationId = __expectString(output["associationId"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_AssociationStatus(output["status"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateEnclaveCertificateIamRoleResult
 */
const de_DisassociateEnclaveCertificateIamRoleResult = (
  output: any,
  context: __SerdeContext
): DisassociateEnclaveCertificateIamRoleResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateIamInstanceProfileResult
 */
const de_DisassociateIamInstanceProfileResult = (
  output: any,
  context: __SerdeContext
): DisassociateIamInstanceProfileResult => {
  const contents: any = {};
  if (output["iamInstanceProfileAssociation"] !== undefined) {
    contents.IamInstanceProfileAssociation = de_IamInstanceProfileAssociation(
      output["iamInstanceProfileAssociation"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateInstanceEventWindowResult
 */
const de_DisassociateInstanceEventWindowResult = (
  output: any,
  context: __SerdeContext
): DisassociateInstanceEventWindowResult => {
  const contents: any = {};
  if (output["instanceEventWindow"] !== undefined) {
    contents.InstanceEventWindow = de_InstanceEventWindow(output["instanceEventWindow"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateIpamResourceDiscoveryResult
 */
const de_DisassociateIpamResourceDiscoveryResult = (
  output: any,
  context: __SerdeContext
): DisassociateIpamResourceDiscoveryResult => {
  const contents: any = {};
  if (output["ipamResourceDiscoveryAssociation"] !== undefined) {
    contents.IpamResourceDiscoveryAssociation = de_IpamResourceDiscoveryAssociation(
      output["ipamResourceDiscoveryAssociation"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateNatGatewayAddressResult
 */
const de_DisassociateNatGatewayAddressResult = (
  output: any,
  context: __SerdeContext
): DisassociateNatGatewayAddressResult => {
  const contents: any = {};
  if (output["natGatewayId"] !== undefined) {
    contents.NatGatewayId = __expectString(output["natGatewayId"]);
  }
  if (output.natGatewayAddressSet === "") {
    contents.NatGatewayAddresses = [];
  } else if (output["natGatewayAddressSet"] !== undefined && output["natGatewayAddressSet"]["item"] !== undefined) {
    contents.NatGatewayAddresses = de_NatGatewayAddressList(
      __getArrayIfSingleItem(output["natGatewayAddressSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateSubnetCidrBlockResult
 */
const de_DisassociateSubnetCidrBlockResult = (
  output: any,
  context: __SerdeContext
): DisassociateSubnetCidrBlockResult => {
  const contents: any = {};
  if (output["ipv6CidrBlockAssociation"] !== undefined) {
    contents.Ipv6CidrBlockAssociation = de_SubnetIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayMulticastDomainResult
 */
const de_DisassociateTransitGatewayMulticastDomainResult = (
  output: any,
  context: __SerdeContext
): DisassociateTransitGatewayMulticastDomainResult => {
  const contents: any = {};
  if (output["associations"] !== undefined) {
    contents.Associations = de_TransitGatewayMulticastDomainAssociations(output["associations"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayPolicyTableResult
 */
const de_DisassociateTransitGatewayPolicyTableResult = (
  output: any,
  context: __SerdeContext
): DisassociateTransitGatewayPolicyTableResult => {
  const contents: any = {};
  if (output["association"] !== undefined) {
    contents.Association = de_TransitGatewayPolicyTableAssociation(output["association"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayRouteTableResult
 */
const de_DisassociateTransitGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): DisassociateTransitGatewayRouteTableResult => {
  const contents: any = {};
  if (output["association"] !== undefined) {
    contents.Association = de_TransitGatewayAssociation(output["association"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateTrunkInterfaceResult
 */
const de_DisassociateTrunkInterfaceResult = (
  output: any,
  context: __SerdeContext
): DisassociateTrunkInterfaceResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateVpcCidrBlockResult
 */
const de_DisassociateVpcCidrBlockResult = (output: any, context: __SerdeContext): DisassociateVpcCidrBlockResult => {
  const contents: any = {};
  if (output["ipv6CidrBlockAssociation"] !== undefined) {
    contents.Ipv6CidrBlockAssociation = de_VpcIpv6CidrBlockAssociation(output["ipv6CidrBlockAssociation"], context);
  }
  if (output["cidrBlockAssociation"] !== undefined) {
    contents.CidrBlockAssociation = de_VpcCidrBlockAssociation(output["cidrBlockAssociation"], context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DiskImageDescription
 */
const de_DiskImageDescription = (output: any, context: __SerdeContext): DiskImageDescription => {
  const contents: any = {};
  if (output["checksum"] !== undefined) {
    contents.Checksum = __expectString(output["checksum"]);
  }
  if (output["format"] !== undefined) {
    contents.Format = __expectString(output["format"]);
  }
  if (output["importManifestUrl"] !== undefined) {
    contents.ImportManifestUrl = __expectString(output["importManifestUrl"]);
  }
  if (output["size"] !== undefined) {
    contents.Size = __strictParseLong(output["size"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2DiskImageVolumeDescription
 */
const de_DiskImageVolumeDescription = (output: any, context: __SerdeContext): DiskImageVolumeDescription => {
  const contents: any = {};
  if (output["id"] !== undefined) {
    contents.Id = __expectString(output["id"]);
  }
  if (output["size"] !== undefined) {
    contents.Size = __strictParseLong(output["size"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2DiskInfo
 */
const de_DiskInfo = (output: any, context: __SerdeContext): DiskInfo => {
  const contents: any = {};
  if (output["sizeInGB"] !== undefined) {
    contents.SizeInGB = __strictParseLong(output["sizeInGB"]) as number;
  }
  if (output["count"] !== undefined) {
    contents.Count = __strictParseInt32(output["count"]) as number;
  }
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DiskInfoList
 */
const de_DiskInfoList = (output: any, context: __SerdeContext): DiskInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DiskInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2DnsEntry
 */
const de_DnsEntry = (output: any, context: __SerdeContext): DnsEntry => {
  const contents: any = {};
  if (output["dnsName"] !== undefined) {
    contents.DnsName = __expectString(output["dnsName"]);
  }
  if (output["hostedZoneId"] !== undefined) {
    contents.HostedZoneId = __expectString(output["hostedZoneId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DnsEntrySet
 */
const de_DnsEntrySet = (output: any, context: __SerdeContext): DnsEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DnsEntry(entry, context);
    });
};

/**
 * deserializeAws_ec2DnsOptions
 */
const de_DnsOptions = (output: any, context: __SerdeContext): DnsOptions => {
  const contents: any = {};
  if (output["dnsRecordIpType"] !== undefined) {
    contents.DnsRecordIpType = __expectString(output["dnsRecordIpType"]);
  }
  if (output["privateDnsOnlyForInboundResolverEndpoint"] !== undefined) {
    contents.PrivateDnsOnlyForInboundResolverEndpoint = __parseBoolean(
      output["privateDnsOnlyForInboundResolverEndpoint"]
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2EbsBlockDevice
 */
const de_EbsBlockDevice = (output: any, context: __SerdeContext): EbsBlockDevice => {
  const contents: any = {};
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
  }
  if (output["iops"] !== undefined) {
    contents.Iops = __strictParseInt32(output["iops"]) as number;
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["volumeSize"] !== undefined) {
    contents.VolumeSize = __strictParseInt32(output["volumeSize"]) as number;
  }
  if (output["volumeType"] !== undefined) {
    contents.VolumeType = __expectString(output["volumeType"]);
  }
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = __expectString(output["kmsKeyId"]);
  }
  if (output["throughput"] !== undefined) {
    contents.Throughput = __strictParseInt32(output["throughput"]) as number;
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = __parseBoolean(output["encrypted"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EbsInfo
 */
const de_EbsInfo = (output: any, context: __SerdeContext): EbsInfo => {
  const contents: any = {};
  if (output["ebsOptimizedSupport"] !== undefined) {
    contents.EbsOptimizedSupport = __expectString(output["ebsOptimizedSupport"]);
  }
  if (output["encryptionSupport"] !== undefined) {
    contents.EncryptionSupport = __expectString(output["encryptionSupport"]);
  }
  if (output["ebsOptimizedInfo"] !== undefined) {
    contents.EbsOptimizedInfo = de_EbsOptimizedInfo(output["ebsOptimizedInfo"], context);
  }
  if (output["nvmeSupport"] !== undefined) {
    contents.NvmeSupport = __expectString(output["nvmeSupport"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EbsInstanceBlockDevice
 */
const de_EbsInstanceBlockDevice = (output: any, context: __SerdeContext): EbsInstanceBlockDevice => {
  const contents: any = {};
  if (output["attachTime"] !== undefined) {
    contents.AttachTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["attachTime"]));
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = __expectString(output["volumeId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EbsOptimizedInfo
 */
const de_EbsOptimizedInfo = (output: any, context: __SerdeContext): EbsOptimizedInfo => {
  const contents: any = {};
  if (output["baselineBandwidthInMbps"] !== undefined) {
    contents.BaselineBandwidthInMbps = __strictParseInt32(output["baselineBandwidthInMbps"]) as number;
  }
  if (output["baselineThroughputInMBps"] !== undefined) {
    contents.BaselineThroughputInMBps = __strictParseFloat(output["baselineThroughputInMBps"]) as number;
  }
  if (output["baselineIops"] !== undefined) {
    contents.BaselineIops = __strictParseInt32(output["baselineIops"]) as number;
  }
  if (output["maximumBandwidthInMbps"] !== undefined) {
    contents.MaximumBandwidthInMbps = __strictParseInt32(output["maximumBandwidthInMbps"]) as number;
  }
  if (output["maximumThroughputInMBps"] !== undefined) {
    contents.MaximumThroughputInMBps = __strictParseFloat(output["maximumThroughputInMBps"]) as number;
  }
  if (output["maximumIops"] !== undefined) {
    contents.MaximumIops = __strictParseInt32(output["maximumIops"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2Ec2InstanceConnectEndpoint
 */
const de_Ec2InstanceConnectEndpoint = (output: any, context: __SerdeContext): Ec2InstanceConnectEndpoint => {
  const contents: any = {};
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["instanceConnectEndpointId"] !== undefined) {
    contents.InstanceConnectEndpointId = __expectString(output["instanceConnectEndpointId"]);
  }
  if (output["instanceConnectEndpointArn"] !== undefined) {
    contents.InstanceConnectEndpointArn = __expectString(output["instanceConnectEndpointArn"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["stateMessage"] !== undefined) {
    contents.StateMessage = __expectString(output["stateMessage"]);
  }
  if (output["dnsName"] !== undefined) {
    contents.DnsName = __expectString(output["dnsName"]);
  }
  if (output["fipsDnsName"] !== undefined) {
    contents.FipsDnsName = __expectString(output["fipsDnsName"]);
  }
  if (output.networkInterfaceIdSet === "") {
    contents.NetworkInterfaceIds = [];
  } else if (output["networkInterfaceIdSet"] !== undefined && output["networkInterfaceIdSet"]["item"] !== undefined) {
    contents.NetworkInterfaceIds = de_NetworkInterfaceIdSet(
      __getArrayIfSingleItem(output["networkInterfaceIdSet"]["item"]),
      context
    );
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["createdAt"] !== undefined) {
    contents.CreatedAt = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createdAt"]));
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["preserveClientIp"] !== undefined) {
    contents.PreserveClientIp = __parseBoolean(output["preserveClientIp"]);
  }
  if (output.securityGroupIdSet === "") {
    contents.SecurityGroupIds = [];
  } else if (output["securityGroupIdSet"] !== undefined && output["securityGroupIdSet"]["item"] !== undefined) {
    contents.SecurityGroupIds = de_SecurityGroupIdSet(
      __getArrayIfSingleItem(output["securityGroupIdSet"]["item"]),
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2EfaInfo
 */
const de_EfaInfo = (output: any, context: __SerdeContext): EfaInfo => {
  const contents: any = {};
  if (output["maximumEfaInterfaces"] !== undefined) {
    contents.MaximumEfaInterfaces = __strictParseInt32(output["maximumEfaInterfaces"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2EgressOnlyInternetGateway
 */
const de_EgressOnlyInternetGateway = (output: any, context: __SerdeContext): EgressOnlyInternetGateway => {
  const contents: any = {};
  if (output.attachmentSet === "") {
    contents.Attachments = [];
  } else if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
    contents.Attachments = de_InternetGatewayAttachmentList(
      __getArrayIfSingleItem(output["attachmentSet"]["item"]),
      context
    );
  }
  if (output["egressOnlyInternetGatewayId"] !== undefined) {
    contents.EgressOnlyInternetGatewayId = __expectString(output["egressOnlyInternetGatewayId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2EgressOnlyInternetGatewayList
 */
const de_EgressOnlyInternetGatewayList = (output: any, context: __SerdeContext): EgressOnlyInternetGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_EgressOnlyInternetGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2ElasticGpuAssociation
 */
const de_ElasticGpuAssociation = (output: any, context: __SerdeContext): ElasticGpuAssociation => {
  const contents: any = {};
  if (output["elasticGpuId"] !== undefined) {
    contents.ElasticGpuId = __expectString(output["elasticGpuId"]);
  }
  if (output["elasticGpuAssociationId"] !== undefined) {
    contents.ElasticGpuAssociationId = __expectString(output["elasticGpuAssociationId"]);
  }
  if (output["elasticGpuAssociationState"] !== undefined) {
    contents.ElasticGpuAssociationState = __expectString(output["elasticGpuAssociationState"]);
  }
  if (output["elasticGpuAssociationTime"] !== undefined) {
    contents.ElasticGpuAssociationTime = __expectString(output["elasticGpuAssociationTime"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ElasticGpuAssociationList
 */
const de_ElasticGpuAssociationList = (output: any, context: __SerdeContext): ElasticGpuAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ElasticGpuAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2ElasticGpuHealth
 */
const de_ElasticGpuHealth = (output: any, context: __SerdeContext): ElasticGpuHealth => {
  const contents: any = {};
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ElasticGpus
 */
const de_ElasticGpus = (output: any, context: __SerdeContext): ElasticGpus => {
  const contents: any = {};
  if (output["elasticGpuId"] !== undefined) {
    contents.ElasticGpuId = __expectString(output["elasticGpuId"]);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["elasticGpuType"] !== undefined) {
    contents.ElasticGpuType = __expectString(output["elasticGpuType"]);
  }
  if (output["elasticGpuHealth"] !== undefined) {
    contents.ElasticGpuHealth = de_ElasticGpuHealth(output["elasticGpuHealth"], context);
  }
  if (output["elasticGpuState"] !== undefined) {
    contents.ElasticGpuState = __expectString(output["elasticGpuState"]);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ElasticGpuSet
 */
const de_ElasticGpuSet = (output: any, context: __SerdeContext): ElasticGpus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ElasticGpus(entry, context);
    });
};

/**
 * deserializeAws_ec2ElasticGpuSpecificationResponse
 */
const de_ElasticGpuSpecificationResponse = (output: any, context: __SerdeContext): ElasticGpuSpecificationResponse => {
  const contents: any = {};
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ElasticGpuSpecificationResponseList
 */
const de_ElasticGpuSpecificationResponseList = (
  output: any,
  context: __SerdeContext
): ElasticGpuSpecificationResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ElasticGpuSpecificationResponse(entry, context);
    });
};

/**
 * deserializeAws_ec2ElasticInferenceAcceleratorAssociation
 */
const de_ElasticInferenceAcceleratorAssociation = (
  output: any,
  context: __SerdeContext
): ElasticInferenceAcceleratorAssociation => {
  const contents: any = {};
  if (output["elasticInferenceAcceleratorArn"] !== undefined) {
    contents.ElasticInferenceAcceleratorArn = __expectString(output["elasticInferenceAcceleratorArn"]);
  }
  if (output["elasticInferenceAcceleratorAssociationId"] !== undefined) {
    contents.ElasticInferenceAcceleratorAssociationId = __expectString(
      output["elasticInferenceAcceleratorAssociationId"]
    );
  }
  if (output["elasticInferenceAcceleratorAssociationState"] !== undefined) {
    contents.ElasticInferenceAcceleratorAssociationState = __expectString(
      output["elasticInferenceAcceleratorAssociationState"]
    );
  }
  if (output["elasticInferenceAcceleratorAssociationTime"] !== undefined) {
    contents.ElasticInferenceAcceleratorAssociationTime = __expectNonNull(
      __parseRfc3339DateTimeWithOffset(output["elasticInferenceAcceleratorAssociationTime"])
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ElasticInferenceAcceleratorAssociationList
 */
const de_ElasticInferenceAcceleratorAssociationList = (
  output: any,
  context: __SerdeContext
): ElasticInferenceAcceleratorAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ElasticInferenceAcceleratorAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2EnableAddressTransferResult
 */
const de_EnableAddressTransferResult = (output: any, context: __SerdeContext): EnableAddressTransferResult => {
  const contents: any = {};
  if (output["addressTransfer"] !== undefined) {
    contents.AddressTransfer = de_AddressTransfer(output["addressTransfer"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableAwsNetworkPerformanceMetricSubscriptionResult
 */
const de_EnableAwsNetworkPerformanceMetricSubscriptionResult = (
  output: any,
  context: __SerdeContext
): EnableAwsNetworkPerformanceMetricSubscriptionResult => {
  const contents: any = {};
  if (output["output"] !== undefined) {
    contents.Output = __parseBoolean(output["output"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableEbsEncryptionByDefaultResult
 */
const de_EnableEbsEncryptionByDefaultResult = (
  output: any,
  context: __SerdeContext
): EnableEbsEncryptionByDefaultResult => {
  const contents: any = {};
  if (output["ebsEncryptionByDefault"] !== undefined) {
    contents.EbsEncryptionByDefault = __parseBoolean(output["ebsEncryptionByDefault"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastLaunchResult
 */
const de_EnableFastLaunchResult = (output: any, context: __SerdeContext): EnableFastLaunchResult => {
  const contents: any = {};
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["snapshotConfiguration"] !== undefined) {
    contents.SnapshotConfiguration = de_FastLaunchSnapshotConfigurationResponse(
      output["snapshotConfiguration"],
      context
    );
  }
  if (output["launchTemplate"] !== undefined) {
    contents.LaunchTemplate = de_FastLaunchLaunchTemplateSpecificationResponse(output["launchTemplate"], context);
  }
  if (output["maxParallelLaunches"] !== undefined) {
    contents.MaxParallelLaunches = __strictParseInt32(output["maxParallelLaunches"]) as number;
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["stateTransitionReason"] !== undefined) {
    contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
  }
  if (output["stateTransitionTime"] !== undefined) {
    contents.StateTransitionTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["stateTransitionTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreErrorItem
 */
const de_EnableFastSnapshotRestoreErrorItem = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreErrorItem => {
  const contents: any = {};
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output.fastSnapshotRestoreStateErrorSet === "") {
    contents.FastSnapshotRestoreStateErrors = [];
  } else if (
    output["fastSnapshotRestoreStateErrorSet"] !== undefined &&
    output["fastSnapshotRestoreStateErrorSet"]["item"] !== undefined
  ) {
    contents.FastSnapshotRestoreStateErrors = de_EnableFastSnapshotRestoreStateErrorSet(
      __getArrayIfSingleItem(output["fastSnapshotRestoreStateErrorSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreErrorSet
 */
const de_EnableFastSnapshotRestoreErrorSet = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_EnableFastSnapshotRestoreErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoresResult
 */
const de_EnableFastSnapshotRestoresResult = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoresResult => {
  const contents: any = {};
  if (output.successful === "") {
    contents.Successful = [];
  } else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
    contents.Successful = de_EnableFastSnapshotRestoreSuccessSet(
      __getArrayIfSingleItem(output["successful"]["item"]),
      context
    );
  }
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  } else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = de_EnableFastSnapshotRestoreErrorSet(
      __getArrayIfSingleItem(output["unsuccessful"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreStateError
 */
const de_EnableFastSnapshotRestoreStateError = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreStateError => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreStateErrorItem
 */
const de_EnableFastSnapshotRestoreStateErrorItem = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreStateErrorItem => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["error"] !== undefined) {
    contents.Error = de_EnableFastSnapshotRestoreStateError(output["error"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreStateErrorSet
 */
const de_EnableFastSnapshotRestoreStateErrorSet = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreStateErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_EnableFastSnapshotRestoreStateErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreSuccessItem
 */
const de_EnableFastSnapshotRestoreSuccessItem = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreSuccessItem => {
  const contents: any = {};
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["stateTransitionReason"] !== undefined) {
    contents.StateTransitionReason = __expectString(output["stateTransitionReason"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["ownerAlias"] !== undefined) {
    contents.OwnerAlias = __expectString(output["ownerAlias"]);
  }
  if (output["enablingTime"] !== undefined) {
    contents.EnablingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["enablingTime"]));
  }
  if (output["optimizingTime"] !== undefined) {
    contents.OptimizingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["optimizingTime"]));
  }
  if (output["enabledTime"] !== undefined) {
    contents.EnabledTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["enabledTime"]));
  }
  if (output["disablingTime"] !== undefined) {
    contents.DisablingTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["disablingTime"]));
  }
  if (output["disabledTime"] !== undefined) {
    contents.DisabledTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["disabledTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreSuccessSet
 */
const de_EnableFastSnapshotRestoreSuccessSet = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_EnableFastSnapshotRestoreSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2EnableImageBlockPublicAccessResult
 */
const de_EnableImageBlockPublicAccessResult = (
  output: any,
  context: __SerdeContext
): EnableImageBlockPublicAccessResult => {
  const contents: any = {};
  if (output["imageBlockPublicAccessState"] !== undefined) {
    contents.ImageBlockPublicAccessState = __expectString(output["imageBlockPublicAccessState"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableImageDeprecationResult
 */
const de_EnableImageDeprecationResult = (output: any, context: __SerdeContext): EnableImageDeprecationResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableImageResult
 */
const de_EnableImageResult = (output: any, context: __SerdeContext): EnableImageResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableIpamOrganizationAdminAccountResult
 */
const de_EnableIpamOrganizationAdminAccountResult = (
  output: any,
  context: __SerdeContext
): EnableIpamOrganizationAdminAccountResult => {
  const contents: any = {};
  if (output["success"] !== undefined) {
    contents.Success = __parseBoolean(output["success"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableReachabilityAnalyzerOrganizationSharingResult
 */
const de_EnableReachabilityAnalyzerOrganizationSharingResult = (
  output: any,
  context: __SerdeContext
): EnableReachabilityAnalyzerOrganizationSharingResult => {
  const contents: any = {};
  if (output["returnValue"] !== undefined) {
    contents.ReturnValue = __parseBoolean(output["returnValue"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableSerialConsoleAccessResult
 */
const de_EnableSerialConsoleAccessResult = (output: any, context: __SerdeContext): EnableSerialConsoleAccessResult => {
  const contents: any = {};
  if (output["serialConsoleAccessEnabled"] !== undefined) {
    contents.SerialConsoleAccessEnabled = __parseBoolean(output["serialConsoleAccessEnabled"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableTransitGatewayRouteTablePropagationResult
 */
const de_EnableTransitGatewayRouteTablePropagationResult = (
  output: any,
  context: __SerdeContext
): EnableTransitGatewayRouteTablePropagationResult => {
  const contents: any = {};
  if (output["propagation"] !== undefined) {
    contents.Propagation = de_TransitGatewayPropagation(output["propagation"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableVpcClassicLinkDnsSupportResult
 */
const de_EnableVpcClassicLinkDnsSupportResult = (
  output: any,
  context: __SerdeContext
): EnableVpcClassicLinkDnsSupportResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableVpcClassicLinkResult
 */
const de_EnableVpcClassicLinkResult = (output: any, context: __SerdeContext): EnableVpcClassicLinkResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnclaveOptions
 */
const de_EnclaveOptions = (output: any, context: __SerdeContext): EnclaveOptions => {
  const contents: any = {};
  if (output["enabled"] !== undefined) {
    contents.Enabled = __parseBoolean(output["enabled"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EndpointSet
 */
const de_EndpointSet = (output: any, context: __SerdeContext): ClientVpnEndpoint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClientVpnEndpoint(entry, context);
    });
};

/**
 * deserializeAws_ec2ErrorSet
 */
const de_ErrorSet = (output: any, context: __SerdeContext): ValidationError[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ValidationError(entry, context);
    });
};

/**
 * deserializeAws_ec2EventInformation
 */
const de_EventInformation = (output: any, context: __SerdeContext): EventInformation => {
  const contents: any = {};
  if (output["eventDescription"] !== undefined) {
    contents.EventDescription = __expectString(output["eventDescription"]);
  }
  if (output["eventSubType"] !== undefined) {
    contents.EventSubType = __expectString(output["eventSubType"]);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExcludedInstanceTypeSet
 */
const de_ExcludedInstanceTypeSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Explanation
 */
const de_Explanation = (output: any, context: __SerdeContext): Explanation => {
  const contents: any = {};
  if (output["acl"] !== undefined) {
    contents.Acl = de_AnalysisComponent(output["acl"], context);
  }
  if (output["aclRule"] !== undefined) {
    contents.AclRule = de_AnalysisAclRule(output["aclRule"], context);
  }
  if (output["address"] !== undefined) {
    contents.Address = __expectString(output["address"]);
  }
  if (output.addressSet === "") {
    contents.Addresses = [];
  } else if (output["addressSet"] !== undefined && output["addressSet"]["item"] !== undefined) {
    contents.Addresses = de_IpAddressList(__getArrayIfSingleItem(output["addressSet"]["item"]), context);
  }
  if (output["attachedTo"] !== undefined) {
    contents.AttachedTo = de_AnalysisComponent(output["attachedTo"], context);
  }
  if (output.availabilityZoneSet === "") {
    contents.AvailabilityZones = [];
  } else if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
    contents.AvailabilityZones = de_ValueStringList(
      __getArrayIfSingleItem(output["availabilityZoneSet"]["item"]),
      context
    );
  }
  if (output.cidrSet === "") {
    contents.Cidrs = [];
  } else if (output["cidrSet"] !== undefined && output["cidrSet"]["item"] !== undefined) {
    contents.Cidrs = de_ValueStringList(__getArrayIfSingleItem(output["cidrSet"]["item"]), context);
  }
  if (output["component"] !== undefined) {
    contents.Component = de_AnalysisComponent(output["component"], context);
  }
  if (output["customerGateway"] !== undefined) {
    contents.CustomerGateway = de_AnalysisComponent(output["customerGateway"], context);
  }
  if (output["destination"] !== undefined) {
    contents.Destination = de_AnalysisComponent(output["destination"], context);
  }
  if (output["destinationVpc"] !== undefined) {
    contents.DestinationVpc = de_AnalysisComponent(output["destinationVpc"], context);
  }
  if (output["direction"] !== undefined) {
    contents.Direction = __expectString(output["direction"]);
  }
  if (output["explanationCode"] !== undefined) {
    contents.ExplanationCode = __expectString(output["explanationCode"]);
  }
  if (output["ingressRouteTable"] !== undefined) {
    contents.IngressRouteTable = de_AnalysisComponent(output["ingressRouteTable"], context);
  }
  if (output["internetGateway"] !== undefined) {
    contents.InternetGateway = de_AnalysisComponent(output["internetGateway"], context);
  }
  if (output["loadBalancerArn"] !== undefined) {
    contents.LoadBalancerArn = __expectString(output["loadBalancerArn"]);
  }
  if (output["classicLoadBalancerListener"] !== undefined) {
    contents.ClassicLoadBalancerListener = de_AnalysisLoadBalancerListener(
      output["classicLoadBalancerListener"],
      context
    );
  }
  if (output["loadBalancerListenerPort"] !== undefined) {
    contents.LoadBalancerListenerPort = __strictParseInt32(output["loadBalancerListenerPort"]) as number;
  }
  if (output["loadBalancerTarget"] !== undefined) {
    contents.LoadBalancerTarget = de_AnalysisLoadBalancerTarget(output["loadBalancerTarget"], context);
  }
  if (output["loadBalancerTargetGroup"] !== undefined) {
    contents.LoadBalancerTargetGroup = de_AnalysisComponent(output["loadBalancerTargetGroup"], context);
  }
  if (output.loadBalancerTargetGroupSet === "") {
    contents.LoadBalancerTargetGroups = [];
  } else if (
    output["loadBalancerTargetGroupSet"] !== undefined &&
    output["loadBalancerTargetGroupSet"]["item"] !== undefined
  ) {
    contents.LoadBalancerTargetGroups = de_AnalysisComponentList(
      __getArrayIfSingleItem(output["loadBalancerTargetGroupSet"]["item"]),
      context
    );
  }
  if (output["loadBalancerTargetPort"] !== undefined) {
    contents.LoadBalancerTargetPort = __strictParseInt32(output["loadBalancerTargetPort"]) as number;
  }
  if (output["elasticLoadBalancerListener"] !== undefined) {
    contents.ElasticLoadBalancerListener = de_AnalysisComponent(output["elasticLoadBalancerListener"], context);
  }
  if (output["missingComponent"] !== undefined) {
    contents.MissingComponent = __expectString(output["missingComponent"]);
  }
  if (output["natGateway"] !== undefined) {
    contents.NatGateway = de_AnalysisComponent(output["natGateway"], context);
  }
  if (output["networkInterface"] !== undefined) {
    contents.NetworkInterface = de_AnalysisComponent(output["networkInterface"], context);
  }
  if (output["packetField"] !== undefined) {
    contents.PacketField = __expectString(output["packetField"]);
  }
  if (output["vpcPeeringConnection"] !== undefined) {
    contents.VpcPeeringConnection = de_AnalysisComponent(output["vpcPeeringConnection"], context);
  }
  if (output["port"] !== undefined) {
    contents.Port = __strictParseInt32(output["port"]) as number;
  }
  if (output.portRangeSet === "") {
    contents.PortRanges = [];
  } else if (output["portRangeSet"] !== undefined && output["portRangeSet"]["item"] !== undefined) {
    contents.PortRanges = de_PortRangeList(__getArrayIfSingleItem(output["portRangeSet"]["item"]), context);
  }
  if (output["prefixList"] !== undefined) {
    contents.PrefixList = de_AnalysisComponent(output["prefixList"], context);
  }
  if (output.protocolSet === "") {
    contents.Protocols = [];
  } else if (output["protocolSet"] !== undefined && output["protocolSet"]["item"] !== undefined) {
    contents.Protocols = de_StringList(__getArrayIfSingleItem(output["protocolSet"]["item"]), context);
  }
  if (output["routeTableRoute"] !== undefined) {
    contents.RouteTableRoute = de_AnalysisRouteTableRoute(output["routeTableRoute"], context);
  }
  if (output["routeTable"] !== undefined) {
    contents.RouteTable = de_AnalysisComponent(output["routeTable"], context);
  }
  if (output["securityGroup"] !== undefined) {
    contents.SecurityGroup = de_AnalysisComponent(output["securityGroup"], context);
  }
  if (output["securityGroupRule"] !== undefined) {
    contents.SecurityGroupRule = de_AnalysisSecurityGroupRule(output["securityGroupRule"], context);
  }
  if (output.securityGroupSet === "") {
    contents.SecurityGroups = [];
  } else if (output["securityGroupSet"] !== undefined && output["securityGroupSet"]["item"] !== undefined) {
    contents.SecurityGroups = de_AnalysisComponentList(
      __getArrayIfSingleItem(output["securityGroupSet"]["item"]),
      context
    );
  }
  if (output["sourceVpc"] !== undefined) {
    contents.SourceVpc = de_AnalysisComponent(output["sourceVpc"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["subnet"] !== undefined) {
    contents.Subnet = de_AnalysisComponent(output["subnet"], context);
  }
  if (output["subnetRouteTable"] !== undefined) {
    contents.SubnetRouteTable = de_AnalysisComponent(output["subnetRouteTable"], context);
  }
  if (output["vpc"] !== undefined) {
    contents.Vpc = de_AnalysisComponent(output["vpc"], context);
  }
  if (output["vpcEndpoint"] !== undefined) {
    contents.VpcEndpoint = de_AnalysisComponent(output["vpcEndpoint"], context);
  }
  if (output["vpnConnection"] !== undefined) {
    contents.VpnConnection = de_AnalysisComponent(output["vpnConnection"], context);
  }
  if (output["vpnGateway"] !== undefined) {
    contents.VpnGateway = de_AnalysisComponent(output["vpnGateway"], context);
  }
  if (output["transitGateway"] !== undefined) {
    contents.TransitGateway = de_AnalysisComponent(output["transitGateway"], context);
  }
  if (output["transitGatewayRouteTable"] !== undefined) {
    contents.TransitGatewayRouteTable = de_AnalysisComponent(output["transitGatewayRouteTable"], context);
  }
  if (output["transitGatewayRouteTableRoute"] !== undefined) {
    contents.TransitGatewayRouteTableRoute = de_TransitGatewayRouteTableRoute(
      output["transitGatewayRouteTableRoute"],
      context
    );
  }
  if (output["transitGatewayAttachment"] !== undefined) {
    contents.TransitGatewayAttachment = de_AnalysisComponent(output["transitGatewayAttachment"], context);
  }
  if (output["componentAccount"] !== undefined) {
    contents.ComponentAccount = __expectString(output["componentAccount"]);
  }
  if (output["componentRegion"] !== undefined) {
    contents.ComponentRegion = __expectString(output["componentRegion"]);
  }
  if (output["firewallStatelessRule"] !== undefined) {
    contents.FirewallStatelessRule = de_FirewallStatelessRule(output["firewallStatelessRule"], context);
  }
  if (output["firewallStatefulRule"] !== undefined) {
    contents.FirewallStatefulRule = de_FirewallStatefulRule(output["firewallStatefulRule"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExplanationList
 */
const de_ExplanationList = (output: any, context: __SerdeContext): Explanation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Explanation(entry, context);
    });
};

/**
 * deserializeAws_ec2ExportClientVpnClientCertificateRevocationListResult
 */
const de_ExportClientVpnClientCertificateRevocationListResult = (
  output: any,
  context: __SerdeContext
): ExportClientVpnClientCertificateRevocationListResult => {
  const contents: any = {};
  if (output["certificateRevocationList"] !== undefined) {
    contents.CertificateRevocationList = __expectString(output["certificateRevocationList"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_ClientCertificateRevocationListStatus(output["status"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportClientVpnClientConfigurationResult
 */
const de_ExportClientVpnClientConfigurationResult = (
  output: any,
  context: __SerdeContext
): ExportClientVpnClientConfigurationResult => {
  const contents: any = {};
  if (output["clientConfiguration"] !== undefined) {
    contents.ClientConfiguration = __expectString(output["clientConfiguration"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportImageResult
 */
const de_ExportImageResult = (output: any, context: __SerdeContext): ExportImageResult => {
  const contents: any = {};
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["diskImageFormat"] !== undefined) {
    contents.DiskImageFormat = __expectString(output["diskImageFormat"]);
  }
  if (output["exportImageTaskId"] !== undefined) {
    contents.ExportImageTaskId = __expectString(output["exportImageTaskId"]);
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["roleName"] !== undefined) {
    contents.RoleName = __expectString(output["roleName"]);
  }
  if (output["progress"] !== undefined) {
    contents.Progress = __expectString(output["progress"]);
  }
  if (output["s3ExportLocation"] !== undefined) {
    contents.S3ExportLocation = de_ExportTaskS3Location(output["s3ExportLocation"], context);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportImageTask
 */
const de_ExportImageTask = (output: any, context: __SerdeContext): ExportImageTask => {
  const contents: any = {};
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["exportImageTaskId"] !== undefined) {
    contents.ExportImageTaskId = __expectString(output["exportImageTaskId"]);
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["progress"] !== undefined) {
    contents.Progress = __expectString(output["progress"]);
  }
  if (output["s3ExportLocation"] !== undefined) {
    contents.S3ExportLocation = de_ExportTaskS3Location(output["s3ExportLocation"], context);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportImageTaskList
 */
const de_ExportImageTaskList = (output: any, context: __SerdeContext): ExportImageTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ExportImageTask(entry, context);
    });
};

/**
 * deserializeAws_ec2ExportTask
 */
const de_ExportTask = (output: any, context: __SerdeContext): ExportTask => {
  const contents: any = {};
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["exportTaskId"] !== undefined) {
    contents.ExportTaskId = __expectString(output["exportTaskId"]);
  }
  if (output["exportToS3"] !== undefined) {
    contents.ExportToS3Task = de_ExportToS3Task(output["exportToS3"], context);
  }
  if (output["instanceExport"] !== undefined) {
    contents.InstanceExportDetails = de_InstanceExportDetails(output["instanceExport"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportTaskList
 */
const de_ExportTaskList = (output: any, context: __SerdeContext): ExportTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ExportTask(entry, context);
    });
};

/**
 * deserializeAws_ec2ExportTaskS3Location
 */
const de_ExportTaskS3Location = (output: any, context: __SerdeContext): ExportTaskS3Location => {
  const contents: any = {};
  if (output["s3Bucket"] !== undefined) {
    contents.S3Bucket = __expectString(output["s3Bucket"]);
  }
  if (output["s3Prefix"] !== undefined) {
    contents.S3Prefix = __expectString(output["s3Prefix"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportToS3Task
 */
const de_ExportToS3Task = (output: any, context: __SerdeContext): ExportToS3Task => {
  const contents: any = {};
  if (output["containerFormat"] !== undefined) {
    contents.ContainerFormat = __expectString(output["containerFormat"]);
  }
  if (output["diskImageFormat"] !== undefined) {
    contents.DiskImageFormat = __expectString(output["diskImageFormat"]);
  }
  if (output["s3Bucket"] !== undefined) {
    contents.S3Bucket = __expectString(output["s3Bucket"]);
  }
  if (output["s3Key"] !== undefined) {
    contents.S3Key = __expectString(output["s3Key"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportTransitGatewayRoutesResult
 */
const de_ExportTransitGatewayRoutesResult = (
  output: any,
  context: __SerdeContext
): ExportTransitGatewayRoutesResult => {
  const contents: any = {};
  if (output["s3Location"] !== undefined) {
    contents.S3Location = __expectString(output["s3Location"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FailedCapacityReservationFleetCancellationResult
 */
const de_FailedCapacityReservationFleetCancellationResult = (
  output: any,
  context: __SerdeContext
): FailedCapacityReservationFleetCancellationResult => {
  const contents: any = {};
  if (output["capacityReservationFleetId"] !== undefined) {
    contents.CapacityReservationFleetId = __expectString(output["capacityReservationFleetId"]);
  }
  if (output["cancelCapacityReservationFleetError"] !== undefined) {
    contents.CancelCapacityReservationFleetError = de_CancelCapacityReservationFleetError(
      output["cancelCapacityReservationFleetError"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2FailedCapacityReservationFleetCancellationResultSet
 */
const de_FailedCapacityReservationFleetCancellationResultSet = (
  output: any,
  context: __SerdeContext
): FailedCapacityReservationFleetCancellationResult[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FailedCapacityReservationFleetCancellationResult(entry, context);
    });
};

/**
 * deserializeAws_ec2FailedQueuedPurchaseDeletion
 */
const de_FailedQueuedPurchaseDeletion = (output: any, context: __SerdeContext): FailedQueuedPurchaseDeletion => {
  const contents: any = {};
  if (output["error"] !== undefined) {
    contents.Error = de_DeleteQueuedReservedInstancesError(output["error"], context);
  }
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FailedQueuedPurchaseDeletionSet
 */
const de_FailedQueuedPurchaseDeletionSet = (output: any, context: __SerdeContext): FailedQueuedPurchaseDeletion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FailedQueuedPurchaseDeletion(entry, context);
    });
};

/**
 * deserializeAws_ec2FastLaunchLaunchTemplateSpecificationResponse
 */
const de_FastLaunchLaunchTemplateSpecificationResponse = (
  output: any,
  context: __SerdeContext
): FastLaunchLaunchTemplateSpecificationResponse => {
  const contents: any = {};
  if (output["launchTemplateId"] !== undefined) {
    contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
  }
  if (output["launchTemplateName"] !== undefined) {
    contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
  }
  if (output["version"] !== undefined) {
    contents.Version = __expectString(output["version"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FastLaunchSnapshotConfigurationResponse
 */
const de_FastLaunchSnapshotConfigurationResponse = (
  output: any,
  context: __SerdeContext
): FastLaunchSnapshotConfigurationResponse => {
  const contents: any = {};
  if (output["targetResourceCount"] !== undefined) {
    contents.TargetResourceCount = __strictParseInt32(output["targetResourceCount"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2FederatedAuthentication
 */
const de_FederatedAuthentication = (output: any, context: __SerdeContext): FederatedAuthentication => {
  const contents: any = {};
  if (output["samlProviderArn"] !== undefined) {
    contents.SamlProviderArn = __expectString(output["samlProviderArn"]);
  }
  if (output["selfServiceSamlProviderArn"] !== undefined) {
    contents.SelfServiceSamlProviderArn = __expectString(output["selfServiceSamlProviderArn"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FilterPortRange
 */
const de_FilterPortRange = (output: any, context: __SerdeContext): FilterPortRange => {
  const contents: any = {};
  if (output["fromPort"] !== undefined) {
    contents.FromPort = __strictParseInt32(output["fromPort"]) as number;
  }
  if (output["toPort"] !== undefined) {
    contents.ToPort = __strictParseInt32(output["toPort"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2FirewallStatefulRule
 */
const de_FirewallStatefulRule = (output: any, context: __SerdeContext): FirewallStatefulRule => {
  const contents: any = {};
  if (output["ruleGroupArn"] !== undefined) {
    contents.RuleGroupArn = __expectString(output["ruleGroupArn"]);
  }
  if (output.sourceSet === "") {
    contents.Sources = [];
  } else if (output["sourceSet"] !== undefined && output["sourceSet"]["item"] !== undefined) {
    contents.Sources = de_ValueStringList(__getArrayIfSingleItem(output["sourceSet"]["item"]), context);
  }
  if (output.destinationSet === "") {
    contents.Destinations = [];
  } else if (output["destinationSet"] !== undefined && output["destinationSet"]["item"] !== undefined) {
    contents.Destinations = de_ValueStringList(__getArrayIfSingleItem(output["destinationSet"]["item"]), context);
  }
  if (output.sourcePortSet === "") {
    contents.SourcePorts = [];
  } else if (output["sourcePortSet"] !== undefined && output["sourcePortSet"]["item"] !== undefined) {
    contents.SourcePorts = de_PortRangeList(__getArrayIfSingleItem(output["sourcePortSet"]["item"]), context);
  }
  if (output.destinationPortSet === "") {
    contents.DestinationPorts = [];
  } else if (output["destinationPortSet"] !== undefined && output["destinationPortSet"]["item"] !== undefined) {
    contents.DestinationPorts = de_PortRangeList(__getArrayIfSingleItem(output["destinationPortSet"]["item"]), context);
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = __expectString(output["protocol"]);
  }
  if (output["ruleAction"] !== undefined) {
    contents.RuleAction = __expectString(output["ruleAction"]);
  }
  if (output["direction"] !== undefined) {
    contents.Direction = __expectString(output["direction"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FirewallStatelessRule
 */
const de_FirewallStatelessRule = (output: any, context: __SerdeContext): FirewallStatelessRule => {
  const contents: any = {};
  if (output["ruleGroupArn"] !== undefined) {
    contents.RuleGroupArn = __expectString(output["ruleGroupArn"]);
  }
  if (output.sourceSet === "") {
    contents.Sources = [];
  } else if (output["sourceSet"] !== undefined && output["sourceSet"]["item"] !== undefined) {
    contents.Sources = de_ValueStringList(__getArrayIfSingleItem(output["sourceSet"]["item"]), context);
  }
  if (output.destinationSet === "") {
    contents.Destinations = [];
  } else if (output["destinationSet"] !== undefined && output["destinationSet"]["item"] !== undefined) {
    contents.Destinations = de_ValueStringList(__getArrayIfSingleItem(output["destinationSet"]["item"]), context);
  }
  if (output.sourcePortSet === "") {
    contents.SourcePorts = [];
  } else if (output["sourcePortSet"] !== undefined && output["sourcePortSet"]["item"] !== undefined) {
    contents.SourcePorts = de_PortRangeList(__getArrayIfSingleItem(output["sourcePortSet"]["item"]), context);
  }
  if (output.destinationPortSet === "") {
    contents.DestinationPorts = [];
  } else if (output["destinationPortSet"] !== undefined && output["destinationPortSet"]["item"] !== undefined) {
    contents.DestinationPorts = de_PortRangeList(__getArrayIfSingleItem(output["destinationPortSet"]["item"]), context);
  }
  if (output.protocolSet === "") {
    contents.Protocols = [];
  } else if (output["protocolSet"] !== undefined && output["protocolSet"]["item"] !== undefined) {
    contents.Protocols = de_ProtocolIntList(__getArrayIfSingleItem(output["protocolSet"]["item"]), context);
  }
  if (output["ruleAction"] !== undefined) {
    contents.RuleAction = __expectString(output["ruleAction"]);
  }
  if (output["priority"] !== undefined) {
    contents.Priority = __strictParseInt32(output["priority"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetCapacityReservation
 */
const de_FleetCapacityReservation = (output: any, context: __SerdeContext): FleetCapacityReservation => {
  const contents: any = {};
  if (output["capacityReservationId"] !== undefined) {
    contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
  }
  if (output["availabilityZoneId"] !== undefined) {
    contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["instancePlatform"] !== undefined) {
    contents.InstancePlatform = __expectString(output["instancePlatform"]);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["totalInstanceCount"] !== undefined) {
    contents.TotalInstanceCount = __strictParseInt32(output["totalInstanceCount"]) as number;
  }
  if (output["fulfilledCapacity"] !== undefined) {
    contents.FulfilledCapacity = __strictParseFloat(output["fulfilledCapacity"]) as number;
  }
  if (output["ebsOptimized"] !== undefined) {
    contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
  }
  if (output["createDate"] !== undefined) {
    contents.CreateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createDate"]));
  }
  if (output["weight"] !== undefined) {
    contents.Weight = __strictParseFloat(output["weight"]) as number;
  }
  if (output["priority"] !== undefined) {
    contents.Priority = __strictParseInt32(output["priority"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetCapacityReservationSet
 */
const de_FleetCapacityReservationSet = (output: any, context: __SerdeContext): FleetCapacityReservation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FleetCapacityReservation(entry, context);
    });
};

/**
 * deserializeAws_ec2FleetData
 */
const de_FleetData = (output: any, context: __SerdeContext): FleetData => {
  const contents: any = {};
  if (output["activityStatus"] !== undefined) {
    contents.ActivityStatus = __expectString(output["activityStatus"]);
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
  }
  if (output["fleetId"] !== undefined) {
    contents.FleetId = __expectString(output["fleetId"]);
  }
  if (output["fleetState"] !== undefined) {
    contents.FleetState = __expectString(output["fleetState"]);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  if (output["excessCapacityTerminationPolicy"] !== undefined) {
    contents.ExcessCapacityTerminationPolicy = __expectString(output["excessCapacityTerminationPolicy"]);
  }
  if (output["fulfilledCapacity"] !== undefined) {
    contents.FulfilledCapacity = __strictParseFloat(output["fulfilledCapacity"]) as number;
  }
  if (output["fulfilledOnDemandCapacity"] !== undefined) {
    contents.FulfilledOnDemandCapacity = __strictParseFloat(output["fulfilledOnDemandCapacity"]) as number;
  }
  if (output.launchTemplateConfigs === "") {
    contents.LaunchTemplateConfigs = [];
  } else if (output["launchTemplateConfigs"] !== undefined && output["launchTemplateConfigs"]["item"] !== undefined) {
    contents.LaunchTemplateConfigs = de_FleetLaunchTemplateConfigList(
      __getArrayIfSingleItem(output["launchTemplateConfigs"]["item"]),
      context
    );
  }
  if (output["targetCapacitySpecification"] !== undefined) {
    contents.TargetCapacitySpecification = de_TargetCapacitySpecification(
      output["targetCapacitySpecification"],
      context
    );
  }
  if (output["terminateInstancesWithExpiration"] !== undefined) {
    contents.TerminateInstancesWithExpiration = __parseBoolean(output["terminateInstancesWithExpiration"]);
  }
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  if (output["validFrom"] !== undefined) {
    contents.ValidFrom = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validFrom"]));
  }
  if (output["validUntil"] !== undefined) {
    contents.ValidUntil = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validUntil"]));
  }
  if (output["replaceUnhealthyInstances"] !== undefined) {
    contents.ReplaceUnhealthyInstances = __parseBoolean(output["replaceUnhealthyInstances"]);
  }
  if (output["spotOptions"] !== undefined) {
    contents.SpotOptions = de_SpotOptions(output["spotOptions"], context);
  }
  if (output["onDemandOptions"] !== undefined) {
    contents.OnDemandOptions = de_OnDemandOptions(output["onDemandOptions"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output.errorSet === "") {
    contents.Errors = [];
  } else if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
    contents.Errors = de_DescribeFleetsErrorSet(__getArrayIfSingleItem(output["errorSet"]["item"]), context);
  }
  if (output.fleetInstanceSet === "") {
    contents.Instances = [];
  } else if (output["fleetInstanceSet"] !== undefined && output["fleetInstanceSet"]["item"] !== undefined) {
    contents.Instances = de_DescribeFleetsInstancesSet(
      __getArrayIfSingleItem(output["fleetInstanceSet"]["item"]),
      context
    );
  }
  if (output["context"] !== undefined) {
    contents.Context = __expectString(output["context"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetLaunchTemplateConfig
 */
const de_FleetLaunchTemplateConfig = (output: any, context: __SerdeContext): FleetLaunchTemplateConfig => {
  const contents: any = {};
  if (output["launchTemplateSpecification"] !== undefined) {
    contents.LaunchTemplateSpecification = de_FleetLaunchTemplateSpecification(
      output["launchTemplateSpecification"],
      context
    );
  }
  if (output.overrides === "") {
    contents.Overrides = [];
  } else if (output["overrides"] !== undefined && output["overrides"]["item"] !== undefined) {
    contents.Overrides = de_FleetLaunchTemplateOverridesList(
      __getArrayIfSingleItem(output["overrides"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetLaunchTemplateConfigList
 */
const de_FleetLaunchTemplateConfigList = (output: any, context: __SerdeContext): FleetLaunchTemplateConfig[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FleetLaunchTemplateConfig(entry, context);
    });
};

/**
 * deserializeAws_ec2FleetLaunchTemplateOverrides
 */
const de_FleetLaunchTemplateOverrides = (output: any, context: __SerdeContext): FleetLaunchTemplateOverrides => {
  const contents: any = {};
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["maxPrice"] !== undefined) {
    contents.MaxPrice = __expectString(output["maxPrice"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["weightedCapacity"] !== undefined) {
    contents.WeightedCapacity = __strictParseFloat(output["weightedCapacity"]) as number;
  }
  if (output["priority"] !== undefined) {
    contents.Priority = __strictParseFloat(output["priority"]) as number;
  }
  if (output["placement"] !== undefined) {
    contents.Placement = de_PlacementResponse(output["placement"], context);
  }
  if (output["instanceRequirements"] !== undefined) {
    contents.InstanceRequirements = de_InstanceRequirements(output["instanceRequirements"], context);
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetLaunchTemplateOverridesList
 */
const de_FleetLaunchTemplateOverridesList = (output: any, context: __SerdeContext): FleetLaunchTemplateOverrides[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FleetLaunchTemplateOverrides(entry, context);
    });
};

/**
 * deserializeAws_ec2FleetLaunchTemplateSpecification
 */
const de_FleetLaunchTemplateSpecification = (
  output: any,
  context: __SerdeContext
): FleetLaunchTemplateSpecification => {
  const contents: any = {};
  if (output["launchTemplateId"] !== undefined) {
    contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
  }
  if (output["launchTemplateName"] !== undefined) {
    contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
  }
  if (output["version"] !== undefined) {
    contents.Version = __expectString(output["version"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetSet
 */
const de_FleetSet = (output: any, context: __SerdeContext): FleetData[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FleetData(entry, context);
    });
};

/**
 * deserializeAws_ec2FleetSpotCapacityRebalance
 */
const de_FleetSpotCapacityRebalance = (output: any, context: __SerdeContext): FleetSpotCapacityRebalance => {
  const contents: any = {};
  if (output["replacementStrategy"] !== undefined) {
    contents.ReplacementStrategy = __expectString(output["replacementStrategy"]);
  }
  if (output["terminationDelay"] !== undefined) {
    contents.TerminationDelay = __strictParseInt32(output["terminationDelay"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetSpotMaintenanceStrategies
 */
const de_FleetSpotMaintenanceStrategies = (output: any, context: __SerdeContext): FleetSpotMaintenanceStrategies => {
  const contents: any = {};
  if (output["capacityRebalance"] !== undefined) {
    contents.CapacityRebalance = de_FleetSpotCapacityRebalance(output["capacityRebalance"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2FlowLog
 */
const de_FlowLog = (output: any, context: __SerdeContext): FlowLog => {
  const contents: any = {};
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
  }
  if (output["deliverLogsErrorMessage"] !== undefined) {
    contents.DeliverLogsErrorMessage = __expectString(output["deliverLogsErrorMessage"]);
  }
  if (output["deliverLogsPermissionArn"] !== undefined) {
    contents.DeliverLogsPermissionArn = __expectString(output["deliverLogsPermissionArn"]);
  }
  if (output["deliverCrossAccountRole"] !== undefined) {
    contents.DeliverCrossAccountRole = __expectString(output["deliverCrossAccountRole"]);
  }
  if (output["deliverLogsStatus"] !== undefined) {
    contents.DeliverLogsStatus = __expectString(output["deliverLogsStatus"]);
  }
  if (output["flowLogId"] !== undefined) {
    contents.FlowLogId = __expectString(output["flowLogId"]);
  }
  if (output["flowLogStatus"] !== undefined) {
    contents.FlowLogStatus = __expectString(output["flowLogStatus"]);
  }
  if (output["logGroupName"] !== undefined) {
    contents.LogGroupName = __expectString(output["logGroupName"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["trafficType"] !== undefined) {
    contents.TrafficType = __expectString(output["trafficType"]);
  }
  if (output["logDestinationType"] !== undefined) {
    contents.LogDestinationType = __expectString(output["logDestinationType"]);
  }
  if (output["logDestination"] !== undefined) {
    contents.LogDestination = __expectString(output["logDestination"]);
  }
  if (output["logFormat"] !== undefined) {
    contents.LogFormat = __expectString(output["logFormat"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["maxAggregationInterval"] !== undefined) {
    contents.MaxAggregationInterval = __strictParseInt32(output["maxAggregationInterval"]) as number;
  }
  if (output["destinationOptions"] !== undefined) {
    contents.DestinationOptions = de_DestinationOptionsResponse(output["destinationOptions"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2FlowLogSet
 */
const de_FlowLogSet = (output: any, context: __SerdeContext): FlowLog[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FlowLog(entry, context);
    });
};

/**
 * deserializeAws_ec2FpgaDeviceInfo
 */
const de_FpgaDeviceInfo = (output: any, context: __SerdeContext): FpgaDeviceInfo => {
  const contents: any = {};
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  if (output["manufacturer"] !== undefined) {
    contents.Manufacturer = __expectString(output["manufacturer"]);
  }
  if (output["count"] !== undefined) {
    contents.Count = __strictParseInt32(output["count"]) as number;
  }
  if (output["memoryInfo"] !== undefined) {
    contents.MemoryInfo = de_FpgaDeviceMemoryInfo(output["memoryInfo"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2FpgaDeviceInfoList
 */
const de_FpgaDeviceInfoList = (output: any, context: __SerdeContext): FpgaDeviceInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FpgaDeviceInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2FpgaDeviceMemoryInfo
 */
const de_FpgaDeviceMemoryInfo = (output: any, context: __SerdeContext): FpgaDeviceMemoryInfo => {
  const contents: any = {};
  if (output["sizeInMiB"] !== undefined) {
    contents.SizeInMiB = __strictParseInt32(output["sizeInMiB"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2FpgaImage
 */
const de_FpgaImage = (output: any, context: __SerdeContext): FpgaImage => {
  const contents: any = {};
  if (output["fpgaImageId"] !== undefined) {
    contents.FpgaImageId = __expectString(output["fpgaImageId"]);
  }
  if (output["fpgaImageGlobalId"] !== undefined) {
    contents.FpgaImageGlobalId = __expectString(output["fpgaImageGlobalId"]);
  }
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["shellVersion"] !== undefined) {
    contents.ShellVersion = __expectString(output["shellVersion"]);
  }
  if (output["pciId"] !== undefined) {
    contents.PciId = de_PciId(output["pciId"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = de_FpgaImageState(output["state"], context);
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
  }
  if (output["updateTime"] !== undefined) {
    contents.UpdateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["updateTime"]));
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["ownerAlias"] !== undefined) {
    contents.OwnerAlias = __expectString(output["ownerAlias"]);
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  } else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
  }
  if (output.tags === "") {
    contents.Tags = [];
  } else if (output["tags"] !== undefined && output["tags"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tags"]["item"]), context);
  }
  if (output["public"] !== undefined) {
    contents.Public = __parseBoolean(output["public"]);
  }
  if (output["dataRetentionSupport"] !== undefined) {
    contents.DataRetentionSupport = __parseBoolean(output["dataRetentionSupport"]);
  }
  if (output.instanceTypes === "") {
    contents.InstanceTypes = [];
  } else if (output["instanceTypes"] !== undefined && output["instanceTypes"]["item"] !== undefined) {
    contents.InstanceTypes = de_InstanceTypesList(__getArrayIfSingleItem(output["instanceTypes"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2FpgaImageAttribute
 */
const de_FpgaImageAttribute = (output: any, context: __SerdeContext): FpgaImageAttribute => {
  const contents: any = {};
  if (output["fpgaImageId"] !== undefined) {
    contents.FpgaImageId = __expectString(output["fpgaImageId"]);
  }
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output.loadPermissions === "") {
    contents.LoadPermissions = [];
  } else if (output["loadPermissions"] !== undefined && output["loadPermissions"]["item"] !== undefined) {
    contents.LoadPermissions = de_LoadPermissionList(
      __getArrayIfSingleItem(output["loadPermissions"]["item"]),
      context
    );
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  } else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2FpgaImageList
 */
const de_FpgaImageList = (output: any, context: __SerdeContext): FpgaImage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FpgaImage(entry, context);
    });
};

/**
 * deserializeAws_ec2FpgaImageState
 */
const de_FpgaImageState = (output: any, context: __SerdeContext): FpgaImageState => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FpgaInfo
 */
const de_FpgaInfo = (output: any, context: __SerdeContext): FpgaInfo => {
  const contents: any = {};
  if (output.fpgas === "") {
    contents.Fpgas = [];
  } else if (output["fpgas"] !== undefined && output["fpgas"]["item"] !== undefined) {
    contents.Fpgas = de_FpgaDeviceInfoList(__getArrayIfSingleItem(output["fpgas"]["item"]), context);
  }
  if (output["totalFpgaMemoryInMiB"] !== undefined) {
    contents.TotalFpgaMemoryInMiB = __strictParseInt32(output["totalFpgaMemoryInMiB"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesResult
 */
const de_GetAssociatedEnclaveCertificateIamRolesResult = (
  output: any,
  context: __SerdeContext
): GetAssociatedEnclaveCertificateIamRolesResult => {
  const contents: any = {};
  if (output.associatedRoleSet === "") {
    contents.AssociatedRoles = [];
  } else if (output["associatedRoleSet"] !== undefined && output["associatedRoleSet"]["item"] !== undefined) {
    contents.AssociatedRoles = de_AssociatedRolesList(
      __getArrayIfSingleItem(output["associatedRoleSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2GetAssociatedIpv6PoolCidrsResult
 */
const de_GetAssociatedIpv6PoolCidrsResult = (
  output: any,
  context: __SerdeContext
): GetAssociatedIpv6PoolCidrsResult => {
  const contents: any = {};
  if (output.ipv6CidrAssociationSet === "") {
    contents.Ipv6CidrAssociations = [];
  } else if (output["ipv6CidrAssociationSet"] !== undefined && output["ipv6CidrAssociationSet"]["item"] !== undefined) {
    contents.Ipv6CidrAssociations = de_Ipv6CidrAssociationSet(
      __getArrayIfSingleItem(output["ipv6CidrAssociationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetAwsNetworkPerformanceDataResult
 */
const de_GetAwsNetworkPerformanceDataResult = (
  output: any,
  context: __SerdeContext
): GetAwsNetworkPerformanceDataResult => {
  const contents: any = {};
  if (output.dataResponseSet === "") {
    contents.DataResponses = [];
  } else if (output["dataResponseSet"] !== undefined && output["dataResponseSet"]["item"] !== undefined) {
    contents.DataResponses = de_DataResponses(__getArrayIfSingleItem(output["dataResponseSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetCapacityReservationUsageResult
 */
const de_GetCapacityReservationUsageResult = (
  output: any,
  context: __SerdeContext
): GetCapacityReservationUsageResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output["capacityReservationId"] !== undefined) {
    contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["totalInstanceCount"] !== undefined) {
    contents.TotalInstanceCount = __strictParseInt32(output["totalInstanceCount"]) as number;
  }
  if (output["availableInstanceCount"] !== undefined) {
    contents.AvailableInstanceCount = __strictParseInt32(output["availableInstanceCount"]) as number;
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output.instanceUsageSet === "") {
    contents.InstanceUsages = [];
  } else if (output["instanceUsageSet"] !== undefined && output["instanceUsageSet"]["item"] !== undefined) {
    contents.InstanceUsages = de_InstanceUsageSet(__getArrayIfSingleItem(output["instanceUsageSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetCoipPoolUsageResult
 */
const de_GetCoipPoolUsageResult = (output: any, context: __SerdeContext): GetCoipPoolUsageResult => {
  const contents: any = {};
  if (output["coipPoolId"] !== undefined) {
    contents.CoipPoolId = __expectString(output["coipPoolId"]);
  }
  if (output.coipAddressUsageSet === "") {
    contents.CoipAddressUsages = [];
  } else if (output["coipAddressUsageSet"] !== undefined && output["coipAddressUsageSet"]["item"] !== undefined) {
    contents.CoipAddressUsages = de_CoipAddressUsageSet(
      __getArrayIfSingleItem(output["coipAddressUsageSet"]["item"]),
      context
    );
  }
  if (output["localGatewayRouteTableId"] !== undefined) {
    contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetConsoleOutputResult
 */
const de_GetConsoleOutputResult = (output: any, context: __SerdeContext): GetConsoleOutputResult => {
  const contents: any = {};
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["output"] !== undefined) {
    contents.Output = __expectString(output["output"]);
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["timestamp"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2GetConsoleScreenshotResult
 */
const de_GetConsoleScreenshotResult = (output: any, context: __SerdeContext): GetConsoleScreenshotResult => {
  const contents: any = {};
  if (output["imageData"] !== undefined) {
    contents.ImageData = __expectString(output["imageData"]);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetDefaultCreditSpecificationResult
 */
const de_GetDefaultCreditSpecificationResult = (
  output: any,
  context: __SerdeContext
): GetDefaultCreditSpecificationResult => {
  const contents: any = {};
  if (output["instanceFamilyCreditSpecification"] !== undefined) {
    contents.InstanceFamilyCreditSpecification = de_InstanceFamilyCreditSpecification(
      output["instanceFamilyCreditSpecification"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2GetEbsDefaultKmsKeyIdResult
 */
const de_GetEbsDefaultKmsKeyIdResult = (output: any, context: __SerdeContext): GetEbsDefaultKmsKeyIdResult => {
  const contents: any = {};
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = __expectString(output["kmsKeyId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetEbsEncryptionByDefaultResult
 */
const de_GetEbsEncryptionByDefaultResult = (output: any, context: __SerdeContext): GetEbsEncryptionByDefaultResult => {
  const contents: any = {};
  if (output["ebsEncryptionByDefault"] !== undefined) {
    contents.EbsEncryptionByDefault = __parseBoolean(output["ebsEncryptionByDefault"]);
  }
  if (output["sseType"] !== undefined) {
    contents.SseType = __expectString(output["sseType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetFlowLogsIntegrationTemplateResult
 */
const de_GetFlowLogsIntegrationTemplateResult = (
  output: any,
  context: __SerdeContext
): GetFlowLogsIntegrationTemplateResult => {
  const contents: any = {};
  if (output["result"] !== undefined) {
    contents.Result = __expectString(output["result"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetGroupsForCapacityReservationResult
 */
const de_GetGroupsForCapacityReservationResult = (
  output: any,
  context: __SerdeContext
): GetGroupsForCapacityReservationResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.capacityReservationGroupSet === "") {
    contents.CapacityReservationGroups = [];
  } else if (
    output["capacityReservationGroupSet"] !== undefined &&
    output["capacityReservationGroupSet"]["item"] !== undefined
  ) {
    contents.CapacityReservationGroups = de_CapacityReservationGroupSet(
      __getArrayIfSingleItem(output["capacityReservationGroupSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2GetHostReservationPurchasePreviewResult
 */
const de_GetHostReservationPurchasePreviewResult = (
  output: any,
  context: __SerdeContext
): GetHostReservationPurchasePreviewResult => {
  const contents: any = {};
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = __expectString(output["currencyCode"]);
  }
  if (output.purchase === "") {
    contents.Purchase = [];
  } else if (output["purchase"] !== undefined && output["purchase"]["item"] !== undefined) {
    contents.Purchase = de_PurchaseSet(__getArrayIfSingleItem(output["purchase"]["item"]), context);
  }
  if (output["totalHourlyPrice"] !== undefined) {
    contents.TotalHourlyPrice = __expectString(output["totalHourlyPrice"]);
  }
  if (output["totalUpfrontPrice"] !== undefined) {
    contents.TotalUpfrontPrice = __expectString(output["totalUpfrontPrice"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetImageBlockPublicAccessStateResult
 */
const de_GetImageBlockPublicAccessStateResult = (
  output: any,
  context: __SerdeContext
): GetImageBlockPublicAccessStateResult => {
  const contents: any = {};
  if (output["imageBlockPublicAccessState"] !== undefined) {
    contents.ImageBlockPublicAccessState = __expectString(output["imageBlockPublicAccessState"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsResult
 */
const de_GetInstanceTypesFromInstanceRequirementsResult = (
  output: any,
  context: __SerdeContext
): GetInstanceTypesFromInstanceRequirementsResult => {
  const contents: any = {};
  if (output.instanceTypeSet === "") {
    contents.InstanceTypes = [];
  } else if (output["instanceTypeSet"] !== undefined && output["instanceTypeSet"]["item"] !== undefined) {
    contents.InstanceTypes = de_InstanceTypeInfoFromInstanceRequirementsSet(
      __getArrayIfSingleItem(output["instanceTypeSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetInstanceUefiDataResult
 */
const de_GetInstanceUefiDataResult = (output: any, context: __SerdeContext): GetInstanceUefiDataResult => {
  const contents: any = {};
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["uefiData"] !== undefined) {
    contents.UefiData = __expectString(output["uefiData"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetIpamAddressHistoryResult
 */
const de_GetIpamAddressHistoryResult = (output: any, context: __SerdeContext): GetIpamAddressHistoryResult => {
  const contents: any = {};
  if (output.historyRecordSet === "") {
    contents.HistoryRecords = [];
  } else if (output["historyRecordSet"] !== undefined && output["historyRecordSet"]["item"] !== undefined) {
    contents.HistoryRecords = de_IpamAddressHistoryRecordSet(
      __getArrayIfSingleItem(output["historyRecordSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetIpamDiscoveredAccountsResult
 */
const de_GetIpamDiscoveredAccountsResult = (output: any, context: __SerdeContext): GetIpamDiscoveredAccountsResult => {
  const contents: any = {};
  if (output.ipamDiscoveredAccountSet === "") {
    contents.IpamDiscoveredAccounts = [];
  } else if (
    output["ipamDiscoveredAccountSet"] !== undefined &&
    output["ipamDiscoveredAccountSet"]["item"] !== undefined
  ) {
    contents.IpamDiscoveredAccounts = de_IpamDiscoveredAccountSet(
      __getArrayIfSingleItem(output["ipamDiscoveredAccountSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetIpamDiscoveredResourceCidrsResult
 */
const de_GetIpamDiscoveredResourceCidrsResult = (
  output: any,
  context: __SerdeContext
): GetIpamDiscoveredResourceCidrsResult => {
  const contents: any = {};
  if (output.ipamDiscoveredResourceCidrSet === "") {
    contents.IpamDiscoveredResourceCidrs = [];
  } else if (
    output["ipamDiscoveredResourceCidrSet"] !== undefined &&
    output["ipamDiscoveredResourceCidrSet"]["item"] !== undefined
  ) {
    contents.IpamDiscoveredResourceCidrs = de_IpamDiscoveredResourceCidrSet(
      __getArrayIfSingleItem(output["ipamDiscoveredResourceCidrSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetIpamPoolAllocationsResult
 */
const de_GetIpamPoolAllocationsResult = (output: any, context: __SerdeContext): GetIpamPoolAllocationsResult => {
  const contents: any = {};
  if (output.ipamPoolAllocationSet === "") {
    contents.IpamPoolAllocations = [];
  } else if (output["ipamPoolAllocationSet"] !== undefined && output["ipamPoolAllocationSet"]["item"] !== undefined) {
    contents.IpamPoolAllocations = de_IpamPoolAllocationSet(
      __getArrayIfSingleItem(output["ipamPoolAllocationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetIpamPoolCidrsResult
 */
const de_GetIpamPoolCidrsResult = (output: any, context: __SerdeContext): GetIpamPoolCidrsResult => {
  const contents: any = {};
  if (output.ipamPoolCidrSet === "") {
    contents.IpamPoolCidrs = [];
  } else if (output["ipamPoolCidrSet"] !== undefined && output["ipamPoolCidrSet"]["item"] !== undefined) {
    contents.IpamPoolCidrs = de_IpamPoolCidrSet(__getArrayIfSingleItem(output["ipamPoolCidrSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetIpamResourceCidrsResult
 */
const de_GetIpamResourceCidrsResult = (output: any, context: __SerdeContext): GetIpamResourceCidrsResult => {
  const contents: any = {};
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  if (output.ipamResourceCidrSet === "") {
    contents.IpamResourceCidrs = [];
  } else if (output["ipamResourceCidrSet"] !== undefined && output["ipamResourceCidrSet"]["item"] !== undefined) {
    contents.IpamResourceCidrs = de_IpamResourceCidrSet(
      __getArrayIfSingleItem(output["ipamResourceCidrSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2GetLaunchTemplateDataResult
 */
const de_GetLaunchTemplateDataResult = (output: any, context: __SerdeContext): GetLaunchTemplateDataResult => {
  const contents: any = {};
  if (output["launchTemplateData"] !== undefined) {
    contents.LaunchTemplateData = de_ResponseLaunchTemplateData(output["launchTemplateData"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetManagedPrefixListAssociationsResult
 */
const de_GetManagedPrefixListAssociationsResult = (
  output: any,
  context: __SerdeContext
): GetManagedPrefixListAssociationsResult => {
  const contents: any = {};
  if (output.prefixListAssociationSet === "") {
    contents.PrefixListAssociations = [];
  } else if (
    output["prefixListAssociationSet"] !== undefined &&
    output["prefixListAssociationSet"]["item"] !== undefined
  ) {
    contents.PrefixListAssociations = de_PrefixListAssociationSet(
      __getArrayIfSingleItem(output["prefixListAssociationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetManagedPrefixListEntriesResult
 */
const de_GetManagedPrefixListEntriesResult = (
  output: any,
  context: __SerdeContext
): GetManagedPrefixListEntriesResult => {
  const contents: any = {};
  if (output.entrySet === "") {
    contents.Entries = [];
  } else if (output["entrySet"] !== undefined && output["entrySet"]["item"] !== undefined) {
    contents.Entries = de_PrefixListEntrySet(__getArrayIfSingleItem(output["entrySet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsResult
 */
const de_GetNetworkInsightsAccessScopeAnalysisFindingsResult = (
  output: any,
  context: __SerdeContext
): GetNetworkInsightsAccessScopeAnalysisFindingsResult => {
  const contents: any = {};
  if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
    contents.NetworkInsightsAccessScopeAnalysisId = __expectString(output["networkInsightsAccessScopeAnalysisId"]);
  }
  if (output["analysisStatus"] !== undefined) {
    contents.AnalysisStatus = __expectString(output["analysisStatus"]);
  }
  if (output.analysisFindingSet === "") {
    contents.AnalysisFindings = [];
  } else if (output["analysisFindingSet"] !== undefined && output["analysisFindingSet"]["item"] !== undefined) {
    contents.AnalysisFindings = de_AccessScopeAnalysisFindingList(
      __getArrayIfSingleItem(output["analysisFindingSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetNetworkInsightsAccessScopeContentResult
 */
const de_GetNetworkInsightsAccessScopeContentResult = (
  output: any,
  context: __SerdeContext
): GetNetworkInsightsAccessScopeContentResult => {
  const contents: any = {};
  if (output["networkInsightsAccessScopeContent"] !== undefined) {
    contents.NetworkInsightsAccessScopeContent = de_NetworkInsightsAccessScopeContent(
      output["networkInsightsAccessScopeContent"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2GetPasswordDataResult
 */
const de_GetPasswordDataResult = (output: any, context: __SerdeContext): GetPasswordDataResult => {
  const contents: any = {};
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["passwordData"] !== undefined) {
    contents.PasswordData = __expectString(output["passwordData"]);
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["timestamp"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2GetReservedInstancesExchangeQuoteResult
 */
const de_GetReservedInstancesExchangeQuoteResult = (
  output: any,
  context: __SerdeContext
): GetReservedInstancesExchangeQuoteResult => {
  const contents: any = {};
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = __expectString(output["currencyCode"]);
  }
  if (output["isValidExchange"] !== undefined) {
    contents.IsValidExchange = __parseBoolean(output["isValidExchange"]);
  }
  if (output["outputReservedInstancesWillExpireAt"] !== undefined) {
    contents.OutputReservedInstancesWillExpireAt = __expectNonNull(
      __parseRfc3339DateTimeWithOffset(output["outputReservedInstancesWillExpireAt"])
    );
  }
  if (output["paymentDue"] !== undefined) {
    contents.PaymentDue = __expectString(output["paymentDue"]);
  }
  if (output["reservedInstanceValueRollup"] !== undefined) {
    contents.ReservedInstanceValueRollup = de_ReservationValue(output["reservedInstanceValueRollup"], context);
  }
  if (output.reservedInstanceValueSet === "") {
    contents.ReservedInstanceValueSet = [];
  } else if (
    output["reservedInstanceValueSet"] !== undefined &&
    output["reservedInstanceValueSet"]["item"] !== undefined
  ) {
    contents.ReservedInstanceValueSet = de_ReservedInstanceReservationValueSet(
      __getArrayIfSingleItem(output["reservedInstanceValueSet"]["item"]),
      context
    );
  }
  if (output["targetConfigurationValueRollup"] !== undefined) {
    contents.TargetConfigurationValueRollup = de_ReservationValue(output["targetConfigurationValueRollup"], context);
  }
  if (output.targetConfigurationValueSet === "") {
    contents.TargetConfigurationValueSet = [];
  } else if (
    output["targetConfigurationValueSet"] !== undefined &&
    output["targetConfigurationValueSet"]["item"] !== undefined
  ) {
    contents.TargetConfigurationValueSet = de_TargetReservationValueSet(
      __getArrayIfSingleItem(output["targetConfigurationValueSet"]["item"]),
      context
    );
  }
  if (output["validationFailureReason"] !== undefined) {
    contents.ValidationFailureReason = __expectString(output["validationFailureReason"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetSerialConsoleAccessStatusResult
 */
const de_GetSerialConsoleAccessStatusResult = (
  output: any,
  context: __SerdeContext
): GetSerialConsoleAccessStatusResult => {
  const contents: any = {};
  if (output["serialConsoleAccessEnabled"] !== undefined) {
    contents.SerialConsoleAccessEnabled = __parseBoolean(output["serialConsoleAccessEnabled"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetSpotPlacementScoresResult
 */
const de_GetSpotPlacementScoresResult = (output: any, context: __SerdeContext): GetSpotPlacementScoresResult => {
  const contents: any = {};
  if (output.spotPlacementScoreSet === "") {
    contents.SpotPlacementScores = [];
  } else if (output["spotPlacementScoreSet"] !== undefined && output["spotPlacementScoreSet"]["item"] !== undefined) {
    contents.SpotPlacementScores = de_SpotPlacementScores(
      __getArrayIfSingleItem(output["spotPlacementScoreSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetSubnetCidrReservationsResult
 */
const de_GetSubnetCidrReservationsResult = (output: any, context: __SerdeContext): GetSubnetCidrReservationsResult => {
  const contents: any = {};
  if (output.subnetIpv4CidrReservationSet === "") {
    contents.SubnetIpv4CidrReservations = [];
  } else if (
    output["subnetIpv4CidrReservationSet"] !== undefined &&
    output["subnetIpv4CidrReservationSet"]["item"] !== undefined
  ) {
    contents.SubnetIpv4CidrReservations = de_SubnetCidrReservationList(
      __getArrayIfSingleItem(output["subnetIpv4CidrReservationSet"]["item"]),
      context
    );
  }
  if (output.subnetIpv6CidrReservationSet === "") {
    contents.SubnetIpv6CidrReservations = [];
  } else if (
    output["subnetIpv6CidrReservationSet"] !== undefined &&
    output["subnetIpv6CidrReservationSet"]["item"] !== undefined
  ) {
    contents.SubnetIpv6CidrReservations = de_SubnetCidrReservationList(
      __getArrayIfSingleItem(output["subnetIpv6CidrReservationSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayAttachmentPropagationsResult
 */
const de_GetTransitGatewayAttachmentPropagationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayAttachmentPropagationsResult => {
  const contents: any = {};
  if (output.transitGatewayAttachmentPropagations === "") {
    contents.TransitGatewayAttachmentPropagations = [];
  } else if (
    output["transitGatewayAttachmentPropagations"] !== undefined &&
    output["transitGatewayAttachmentPropagations"]["item"] !== undefined
  ) {
    contents.TransitGatewayAttachmentPropagations = de_TransitGatewayAttachmentPropagationList(
      __getArrayIfSingleItem(output["transitGatewayAttachmentPropagations"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsResult
 */
const de_GetTransitGatewayMulticastDomainAssociationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayMulticastDomainAssociationsResult => {
  const contents: any = {};
  if (output.multicastDomainAssociations === "") {
    contents.MulticastDomainAssociations = [];
  } else if (
    output["multicastDomainAssociations"] !== undefined &&
    output["multicastDomainAssociations"]["item"] !== undefined
  ) {
    contents.MulticastDomainAssociations = de_TransitGatewayMulticastDomainAssociationList(
      __getArrayIfSingleItem(output["multicastDomainAssociations"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayPolicyTableAssociationsResult
 */
const de_GetTransitGatewayPolicyTableAssociationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayPolicyTableAssociationsResult => {
  const contents: any = {};
  if (output.associations === "") {
    contents.Associations = [];
  } else if (output["associations"] !== undefined && output["associations"]["item"] !== undefined) {
    contents.Associations = de_TransitGatewayPolicyTableAssociationList(
      __getArrayIfSingleItem(output["associations"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayPolicyTableEntriesResult
 */
const de_GetTransitGatewayPolicyTableEntriesResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayPolicyTableEntriesResult => {
  const contents: any = {};
  if (output.transitGatewayPolicyTableEntries === "") {
    contents.TransitGatewayPolicyTableEntries = [];
  } else if (
    output["transitGatewayPolicyTableEntries"] !== undefined &&
    output["transitGatewayPolicyTableEntries"]["item"] !== undefined
  ) {
    contents.TransitGatewayPolicyTableEntries = de_TransitGatewayPolicyTableEntryList(
      __getArrayIfSingleItem(output["transitGatewayPolicyTableEntries"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayPrefixListReferencesResult
 */
const de_GetTransitGatewayPrefixListReferencesResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayPrefixListReferencesResult => {
  const contents: any = {};
  if (output.transitGatewayPrefixListReferenceSet === "") {
    contents.TransitGatewayPrefixListReferences = [];
  } else if (
    output["transitGatewayPrefixListReferenceSet"] !== undefined &&
    output["transitGatewayPrefixListReferenceSet"]["item"] !== undefined
  ) {
    contents.TransitGatewayPrefixListReferences = de_TransitGatewayPrefixListReferenceSet(
      __getArrayIfSingleItem(output["transitGatewayPrefixListReferenceSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayRouteTableAssociationsResult
 */
const de_GetTransitGatewayRouteTableAssociationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayRouteTableAssociationsResult => {
  const contents: any = {};
  if (output.associations === "") {
    contents.Associations = [];
  } else if (output["associations"] !== undefined && output["associations"]["item"] !== undefined) {
    contents.Associations = de_TransitGatewayRouteTableAssociationList(
      __getArrayIfSingleItem(output["associations"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayRouteTablePropagationsResult
 */
const de_GetTransitGatewayRouteTablePropagationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayRouteTablePropagationsResult => {
  const contents: any = {};
  if (output.transitGatewayRouteTablePropagations === "") {
    contents.TransitGatewayRouteTablePropagations = [];
  } else if (
    output["transitGatewayRouteTablePropagations"] !== undefined &&
    output["transitGatewayRouteTablePropagations"]["item"] !== undefined
  ) {
    contents.TransitGatewayRouteTablePropagations = de_TransitGatewayRouteTablePropagationList(
      __getArrayIfSingleItem(output["transitGatewayRouteTablePropagations"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetVerifiedAccessEndpointPolicyResult
 */
const de_GetVerifiedAccessEndpointPolicyResult = (
  output: any,
  context: __SerdeContext
): GetVerifiedAccessEndpointPolicyResult => {
  const contents: any = {};
  if (output["policyEnabled"] !== undefined) {
    contents.PolicyEnabled = __parseBoolean(output["policyEnabled"]);
  }
  if (output["policyDocument"] !== undefined) {
    contents.PolicyDocument = __expectString(output["policyDocument"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetVerifiedAccessGroupPolicyResult
 */
const de_GetVerifiedAccessGroupPolicyResult = (
  output: any,
  context: __SerdeContext
): GetVerifiedAccessGroupPolicyResult => {
  const contents: any = {};
  if (output["policyEnabled"] !== undefined) {
    contents.PolicyEnabled = __parseBoolean(output["policyEnabled"]);
  }
  if (output["policyDocument"] !== undefined) {
    contents.PolicyDocument = __expectString(output["policyDocument"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationResult
 */
const de_GetVpnConnectionDeviceSampleConfigurationResult = (
  output: any,
  context: __SerdeContext
): GetVpnConnectionDeviceSampleConfigurationResult => {
  const contents: any = {};
  if (output["vpnConnectionDeviceSampleConfiguration"] !== undefined) {
    contents.VpnConnectionDeviceSampleConfiguration = __expectString(output["vpnConnectionDeviceSampleConfiguration"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetVpnConnectionDeviceTypesResult
 */
const de_GetVpnConnectionDeviceTypesResult = (
  output: any,
  context: __SerdeContext
): GetVpnConnectionDeviceTypesResult => {
  const contents: any = {};
  if (output.vpnConnectionDeviceTypeSet === "") {
    contents.VpnConnectionDeviceTypes = [];
  } else if (
    output["vpnConnectionDeviceTypeSet"] !== undefined &&
    output["vpnConnectionDeviceTypeSet"]["item"] !== undefined
  ) {
    contents.VpnConnectionDeviceTypes = de_VpnConnectionDeviceTypeList(
      __getArrayIfSingleItem(output["vpnConnectionDeviceTypeSet"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetVpnTunnelReplacementStatusResult
 */
const de_GetVpnTunnelReplacementStatusResult = (
  output: any,
  context: __SerdeContext
): GetVpnTunnelReplacementStatusResult => {
  const contents: any = {};
  if (output["vpnConnectionId"] !== undefined) {
    contents.VpnConnectionId = __expectString(output["vpnConnectionId"]);
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
  }
  if (output["customerGatewayId"] !== undefined) {
    contents.CustomerGatewayId = __expectString(output["customerGatewayId"]);
  }
  if (output["vpnGatewayId"] !== undefined) {
    contents.VpnGatewayId = __expectString(output["vpnGatewayId"]);
  }
  if (output["vpnTunnelOutsideIpAddress"] !== undefined) {
    contents.VpnTunnelOutsideIpAddress = __expectString(output["vpnTunnelOutsideIpAddress"]);
  }
  if (output["maintenanceDetails"] !== undefined) {
    contents.MaintenanceDetails = de_MaintenanceDetails(output["maintenanceDetails"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GpuDeviceInfo
 */
const de_GpuDeviceInfo = (output: any, context: __SerdeContext): GpuDeviceInfo => {
  const contents: any = {};
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  if (output["manufacturer"] !== undefined) {
    contents.Manufacturer = __expectString(output["manufacturer"]);
  }
  if (output["count"] !== undefined) {
    contents.Count = __strictParseInt32(output["count"]) as number;
  }
  if (output["memoryInfo"] !== undefined) {
    contents.MemoryInfo = de_GpuDeviceMemoryInfo(output["memoryInfo"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GpuDeviceInfoList
 */
const de_GpuDeviceInfoList = (output: any, context: __SerdeContext): GpuDeviceInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_GpuDeviceInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2GpuDeviceMemoryInfo
 */
const de_GpuDeviceMemoryInfo = (output: any, context: __SerdeContext): GpuDeviceMemoryInfo => {
  const contents: any = {};
  if (output["sizeInMiB"] !== undefined) {
    contents.SizeInMiB = __strictParseInt32(output["sizeInMiB"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2GpuInfo
 */
const de_GpuInfo = (output: any, context: __SerdeContext): GpuInfo => {
  const contents: any = {};
  if (output.gpus === "") {
    contents.Gpus = [];
  } else if (output["gpus"] !== undefined && output["gpus"]["item"] !== undefined) {
    contents.Gpus = de_GpuDeviceInfoList(__getArrayIfSingleItem(output["gpus"]["item"]), context);
  }
  if (output["totalGpuMemoryInMiB"] !== undefined) {
    contents.TotalGpuMemoryInMiB = __strictParseInt32(output["totalGpuMemoryInMiB"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2GroupIdentifier
 */
const de_GroupIdentifier = (output: any, context: __SerdeContext): GroupIdentifier => {
  const contents: any = {};
  if (output["groupName"] !== undefined) {
    contents.GroupName = __expectString(output["groupName"]);
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = __expectString(output["groupId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GroupIdentifierList
 */
const de_GroupIdentifierList = (output: any, context: __SerdeContext): GroupIdentifier[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_GroupIdentifier(entry, context);
    });
};

/**
 * deserializeAws_ec2GroupIdentifierSet
 */
const de_GroupIdentifierSet = (output: any, context: __SerdeContext): SecurityGroupIdentifier[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SecurityGroupIdentifier(entry, context);
    });
};

/**
 * deserializeAws_ec2GroupIdStringList
 */
const de_GroupIdStringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2HibernationOptions
 */
const de_HibernationOptions = (output: any, context: __SerdeContext): HibernationOptions => {
  const contents: any = {};
  if (output["configured"] !== undefined) {
    contents.Configured = __parseBoolean(output["configured"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2HistoryRecord
 */
const de_HistoryRecord = (output: any, context: __SerdeContext): HistoryRecord => {
  const contents: any = {};
  if (output["eventInformation"] !== undefined) {
    contents.EventInformation = de_EventInformation(output["eventInformation"], context);
  }
  if (output["eventType"] !== undefined) {
    contents.EventType = __expectString(output["eventType"]);
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["timestamp"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2HistoryRecordEntry
 */
const de_HistoryRecordEntry = (output: any, context: __SerdeContext): HistoryRecordEntry => {
  const contents: any = {};
  if (output["eventInformation"] !== undefined) {
    contents.EventInformation = de_EventInformation(output["eventInformation"], context);
  }
  if (output["eventType"] !== undefined) {
    contents.EventType = __expectString(output["eventType"]);
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["timestamp"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2HistoryRecords
 */
const de_HistoryRecords = (output: any, context: __SerdeContext): HistoryRecord[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_HistoryRecord(entry, context);
    });
};

/**
 * deserializeAws_ec2HistoryRecordSet
 */
const de_HistoryRecordSet = (output: any, context: __SerdeContext): HistoryRecordEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_HistoryRecordEntry(entry, context);
    });
};

/**
 * deserializeAws_ec2Host
 */
const de_Host = (output: any, context: __SerdeContext): Host => {
  const contents: any = {};
  if (output["autoPlacement"] !== undefined) {
    contents.AutoPlacement = __expectString(output["autoPlacement"]);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["availableCapacity"] !== undefined) {
    contents.AvailableCapacity = de_AvailableCapacity(output["availableCapacity"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  if (output["hostId"] !== undefined) {
    contents.HostId = __expectString(output["hostId"]);
  }
  if (output["hostProperties"] !== undefined) {
    contents.HostProperties = de_HostProperties(output["hostProperties"], context);
  }
  if (output["hostReservationId"] !== undefined) {
    contents.HostReservationId = __expectString(output["hostReservationId"]);
  }
  if (output.instances === "") {
    contents.Instances = [];
  } else if (output["instances"] !== undefined && output["instances"]["item"] !== undefined) {
    contents.Instances = de_HostInstanceList(__getArrayIfSingleItem(output["instances"]["item"]), context);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["allocationTime"] !== undefined) {
    contents.AllocationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["allocationTime"]));
  }
  if (output["releaseTime"] !== undefined) {
    contents.ReleaseTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["releaseTime"]));
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["hostRecovery"] !== undefined) {
    contents.HostRecovery = __expectString(output["hostRecovery"]);
  }
  if (output["allowsMultipleInstanceTypes"] !== undefined) {
    contents.AllowsMultipleInstanceTypes = __expectString(output["allowsMultipleInstanceTypes"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["availabilityZoneId"] !== undefined) {
    contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
  }
  if (output["memberOfServiceLinkedResourceGroup"] !== undefined) {
    contents.MemberOfServiceLinkedResourceGroup = __parseBoolean(output["memberOfServiceLinkedResourceGroup"]);
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output["hostMaintenance"] !== undefined) {
    contents.HostMaintenance = __expectString(output["hostMaintenance"]);
  }
  if (output["assetId"] !== undefined) {
    contents.AssetId = __expectString(output["assetId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2HostInstance
 */
const de_HostInstance = (output: any, context: __SerdeContext): HostInstance => {
  const contents: any = {};
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2HostInstanceList
 */
const de_HostInstanceList = (output: any, context: __SerdeContext): HostInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_HostInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2HostList
 */
const de_HostList = (output: any, context: __SerdeContext): Host[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Host(entry, context);
    });
};

/**
 * deserializeAws_ec2HostOffering
 */
const de_HostOffering = (output: any, context: __SerdeContext): HostOffering => {
  const contents: any = {};
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = __expectString(output["currencyCode"]);
  }
  if (output["duration"] !== undefined) {
    contents.Duration = __strictParseInt32(output["duration"]) as number;
  }
  if (output["hourlyPrice"] !== undefined) {
    contents.HourlyPrice = __expectString(output["hourlyPrice"]);
  }
  if (output["instanceFamily"] !== undefined) {
    contents.InstanceFamily = __expectString(output["instanceFamily"]);
  }
  if (output["offeringId"] !== undefined) {
    contents.OfferingId = __expectString(output["offeringId"]);
  }
  if (output["paymentOption"] !== undefined) {
    contents.PaymentOption = __expectString(output["paymentOption"]);
  }
  if (output["upfrontPrice"] !== undefined) {
    contents.UpfrontPrice = __expectString(output["upfrontPrice"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2HostOfferingSet
 */
const de_HostOfferingSet = (output: any, context: __SerdeContext): HostOffering[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_HostOffering(entry, context);
    });
};

/**
 * deserializeAws_ec2HostProperties
 */
const de_HostProperties = (output: any, context: __SerdeContext): HostProperties => {
  const contents: any = {};
  if (output["cores"] !== undefined) {
    contents.Cores = __strictParseInt32(output["cores"]) as number;
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["instanceFamily"] !== undefined) {
    contents.InstanceFamily = __expectString(output["instanceFamily"]);
  }
  if (output["sockets"] !== undefined) {
    contents.Sockets = __strictParseInt32(output["sockets"]) as number;
  }
  if (output["totalVCpus"] !== undefined) {
    contents.TotalVCpus = __strictParseInt32(output["totalVCpus"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2HostReservation
 */
const de_HostReservation = (output: any, context: __SerdeContext): HostReservation => {
  const contents: any = {};
  if (output["count"] !== undefined) {
    contents.Count = __strictParseInt32(output["count"]) as number;
  }
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = __expectString(output["currencyCode"]);
  }
  if (output["duration"] !== undefined) {
    contents.Duration = __strictParseInt32(output["duration"]) as number;
  }
  if (output["end"] !== undefined) {
    contents.End = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["end"]));
  }
  if (output.hostIdSet === "") {
    contents.HostIdSet = [];
  } else if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
    contents.HostIdSet = de_ResponseHostIdSet(__getArrayIfSingleItem(output["hostIdSet"]["item"]), context);
  }
  if (output["hostReservationId"] !== undefined) {
    contents.HostReservationId = __expectString(output["hostReservationId"]);
  }
  if (output["hourlyPrice"] !== undefined) {
    contents.HourlyPrice = __expectString(output["hourlyPrice"]);
  }
  if (output["instanceFamily"] !== undefined) {
    contents.InstanceFamily = __expectString(output["instanceFamily"]);
  }
  if (output["offeringId"] !== undefined) {
    contents.OfferingId = __expectString(output["offeringId"]);
  }
  if (output["paymentOption"] !== undefined) {
    contents.PaymentOption = __expectString(output["paymentOption"]);
  }
  if (output["start"] !== undefined) {
    contents.Start = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["start"]));
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["upfrontPrice"] !== undefined) {
    contents.UpfrontPrice = __expectString(output["upfrontPrice"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2HostReservationSet
 */
const de_HostReservationSet = (output: any, context: __SerdeContext): HostReservation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_HostReservation(entry, context);
    });
};

/**
 * deserializeAws_ec2IamInstanceProfile
 */
const de_IamInstanceProfile = (output: any, context: __SerdeContext): IamInstanceProfile => {
  const contents: any = {};
  if (output["arn"] !== undefined) {
    contents.Arn = __expectString(output["arn"]);
  }
  if (output["id"] !== undefined) {
    contents.Id = __expectString(output["id"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IamInstanceProfileAssociation
 */
const de_IamInstanceProfileAssociation = (output: any, context: __SerdeContext): IamInstanceProfileAssociation => {
  const contents: any = {};
  if (output["associationId"] !== undefined) {
    contents.AssociationId = __expectString(output["associationId"]);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["iamInstanceProfile"] !== undefined) {
    contents.IamInstanceProfile = de_IamInstanceProfile(output["iamInstanceProfile"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["timestamp"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2IamInstanceProfileAssociationSet
 */
const de_IamInstanceProfileAssociationSet = (output: any, context: __SerdeContext): IamInstanceProfileAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IamInstanceProfileAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2IamInstanceProfileSpecification
 */
const de_IamInstanceProfileSpecification = (output: any, context: __SerdeContext): IamInstanceProfileSpecification => {
  const contents: any = {};
  if (output["arn"] !== undefined) {
    contents.Arn = __expectString(output["arn"]);
  }
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IcmpTypeCode
 */
const de_IcmpTypeCode = (output: any, context: __SerdeContext): IcmpTypeCode => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __strictParseInt32(output["code"]) as number;
  }
  if (output["type"] !== undefined) {
    contents.Type = __strictParseInt32(output["type"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2IdFormat
 */
const de_IdFormat = (output: any, context: __SerdeContext): IdFormat => {
  const contents: any = {};
  if (output["deadline"] !== undefined) {
    contents.Deadline = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["deadline"]));
  }
  if (output["resource"] !== undefined) {
    contents.Resource = __expectString(output["resource"]);
  }
  if (output["useLongIds"] !== undefined) {
    contents.UseLongIds = __parseBoolean(output["useLongIds"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IdFormatList
 */
const de_IdFormatList = (output: any, context: __SerdeContext): IdFormat[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IdFormat(entry, context);
    });
};

/**
 * deserializeAws_ec2IKEVersionsList
 */
const de_IKEVersionsList = (output: any, context: __SerdeContext): IKEVersionsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IKEVersionsListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2IKEVersionsListValue
 */
const de_IKEVersionsListValue = (output: any, context: __SerdeContext): IKEVersionsListValue => {
  const contents: any = {};
  if (output["value"] !== undefined) {
    contents.Value = __expectString(output["value"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Image
 */
const de_Image = (output: any, context: __SerdeContext): Image => {
  const contents: any = {};
  if (output["architecture"] !== undefined) {
    contents.Architecture = __expectString(output["architecture"]);
  }
  if (output["creationDate"] !== undefined) {
    contents.CreationDate = __expectString(output["creationDate"]);
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["imageLocation"] !== undefined) {
    contents.ImageLocation = __expectString(output["imageLocation"]);
  }
  if (output["imageType"] !== undefined) {
    contents.ImageType = __expectString(output["imageType"]);
  }
  if (output["isPublic"] !== undefined) {
    contents.Public = __parseBoolean(output["isPublic"]);
  }
  if (output["kernelId"] !== undefined) {
    contents.KernelId = __expectString(output["kernelId"]);
  }
  if (output["imageOwnerId"] !== undefined) {
    contents.OwnerId = __expectString(output["imageOwnerId"]);
  }
  if (output["platform"] !== undefined) {
    contents.Platform = __expectString(output["platform"]);
  }
  if (output["platformDetails"] !== undefined) {
    contents.PlatformDetails = __expectString(output["platformDetails"]);
  }
  if (output["usageOperation"] !== undefined) {
    contents.UsageOperation = __expectString(output["usageOperation"]);
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  } else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
  }
  if (output["ramdiskId"] !== undefined) {
    contents.RamdiskId = __expectString(output["ramdiskId"]);
  }
  if (output["imageState"] !== undefined) {
    contents.State = __expectString(output["imageState"]);
  }
  if (output.blockDeviceMapping === "") {
    contents.BlockDeviceMappings = [];
  } else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
    contents.BlockDeviceMappings = de_BlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMapping"]["item"]),
      context
    );
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["enaSupport"] !== undefined) {
    contents.EnaSupport = __parseBoolean(output["enaSupport"]);
  }
  if (output["hypervisor"] !== undefined) {
    contents.Hypervisor = __expectString(output["hypervisor"]);
  }
  if (output["imageOwnerAlias"] !== undefined) {
    contents.ImageOwnerAlias = __expectString(output["imageOwnerAlias"]);
  }
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  if (output["rootDeviceName"] !== undefined) {
    contents.RootDeviceName = __expectString(output["rootDeviceName"]);
  }
  if (output["rootDeviceType"] !== undefined) {
    contents.RootDeviceType = __expectString(output["rootDeviceType"]);
  }
  if (output["sriovNetSupport"] !== undefined) {
    contents.SriovNetSupport = __expectString(output["sriovNetSupport"]);
  }
  if (output["stateReason"] !== undefined) {
    contents.StateReason = de_StateReason(output["stateReason"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["virtualizationType"] !== undefined) {
    contents.VirtualizationType = __expectString(output["virtualizationType"]);
  }
  if (output["bootMode"] !== undefined) {
    contents.BootMode = __expectString(output["bootMode"]);
  }
  if (output["tpmSupport"] !== undefined) {
    contents.TpmSupport = __expectString(output["tpmSupport"]);
  }
  if (output["deprecationTime"] !== undefined) {
    contents.DeprecationTime = __expectString(output["deprecationTime"]);
  }
  if (output["imdsSupport"] !== undefined) {
    contents.ImdsSupport = __expectString(output["imdsSupport"]);
  }
  if (output["sourceInstanceId"] !== undefined) {
    contents.SourceInstanceId = __expectString(output["sourceInstanceId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImageAttribute
 */
const de_ImageAttribute = (output: any, context: __SerdeContext): ImageAttribute => {
  const contents: any = {};
  if (output.blockDeviceMapping === "") {
    contents.BlockDeviceMappings = [];
  } else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
    contents.BlockDeviceMappings = de_BlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMapping"]["item"]),
      context
    );
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output.launchPermission === "") {
    contents.LaunchPermissions = [];
  } else if (output["launchPermission"] !== undefined && output["launchPermission"]["item"] !== undefined) {
    contents.LaunchPermissions = de_LaunchPermissionList(
      __getArrayIfSingleItem(output["launchPermission"]["item"]),
      context
    );
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  } else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
  }
  if (output["description"] !== undefined) {
    contents.Description = de_AttributeValue(output["description"], context);
  }
  if (output["kernel"] !== undefined) {
    contents.KernelId = de_AttributeValue(output["kernel"], context);
  }
  if (output["ramdisk"] !== undefined) {
    contents.RamdiskId = de_AttributeValue(output["ramdisk"], context);
  }
  if (output["sriovNetSupport"] !== undefined) {
    contents.SriovNetSupport = de_AttributeValue(output["sriovNetSupport"], context);
  }
  if (output["bootMode"] !== undefined) {
    contents.BootMode = de_AttributeValue(output["bootMode"], context);
  }
  if (output["tpmSupport"] !== undefined) {
    contents.TpmSupport = de_AttributeValue(output["tpmSupport"], context);
  }
  if (output["uefiData"] !== undefined) {
    contents.UefiData = de_AttributeValue(output["uefiData"], context);
  }
  if (output["lastLaunchedTime"] !== undefined) {
    contents.LastLaunchedTime = de_AttributeValue(output["lastLaunchedTime"], context);
  }
  if (output["imdsSupport"] !== undefined) {
    contents.ImdsSupport = de_AttributeValue(output["imdsSupport"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImageList
 */
const de_ImageList = (output: any, context: __SerdeContext): Image[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Image(entry, context);
    });
};

/**
 * deserializeAws_ec2ImageRecycleBinInfo
 */
const de_ImageRecycleBinInfo = (output: any, context: __SerdeContext): ImageRecycleBinInfo => {
  const contents: any = {};
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["recycleBinEnterTime"] !== undefined) {
    contents.RecycleBinEnterTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["recycleBinEnterTime"]));
  }
  if (output["recycleBinExitTime"] !== undefined) {
    contents.RecycleBinExitTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["recycleBinExitTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2ImageRecycleBinInfoList
 */
const de_ImageRecycleBinInfoList = (output: any, context: __SerdeContext): ImageRecycleBinInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ImageRecycleBinInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2ImportClientVpnClientCertificateRevocationListResult
 */
const de_ImportClientVpnClientCertificateRevocationListResult = (
  output: any,
  context: __SerdeContext
): ImportClientVpnClientCertificateRevocationListResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportImageLicenseConfigurationResponse
 */
const de_ImportImageLicenseConfigurationResponse = (
  output: any,
  context: __SerdeContext
): ImportImageLicenseConfigurationResponse => {
  const contents: any = {};
  if (output["licenseConfigurationArn"] !== undefined) {
    contents.LicenseConfigurationArn = __expectString(output["licenseConfigurationArn"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportImageLicenseSpecificationListResponse
 */
const de_ImportImageLicenseSpecificationListResponse = (
  output: any,
  context: __SerdeContext
): ImportImageLicenseConfigurationResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ImportImageLicenseConfigurationResponse(entry, context);
    });
};

/**
 * deserializeAws_ec2ImportImageResult
 */
const de_ImportImageResult = (output: any, context: __SerdeContext): ImportImageResult => {
  const contents: any = {};
  if (output["architecture"] !== undefined) {
    contents.Architecture = __expectString(output["architecture"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = __parseBoolean(output["encrypted"]);
  }
  if (output["hypervisor"] !== undefined) {
    contents.Hypervisor = __expectString(output["hypervisor"]);
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["importTaskId"] !== undefined) {
    contents.ImportTaskId = __expectString(output["importTaskId"]);
  }
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = __expectString(output["kmsKeyId"]);
  }
  if (output["licenseType"] !== undefined) {
    contents.LicenseType = __expectString(output["licenseType"]);
  }
  if (output["platform"] !== undefined) {
    contents.Platform = __expectString(output["platform"]);
  }
  if (output["progress"] !== undefined) {
    contents.Progress = __expectString(output["progress"]);
  }
  if (output.snapshotDetailSet === "") {
    contents.SnapshotDetails = [];
  } else if (output["snapshotDetailSet"] !== undefined && output["snapshotDetailSet"]["item"] !== undefined) {
    contents.SnapshotDetails = de_SnapshotDetailList(
      __getArrayIfSingleItem(output["snapshotDetailSet"]["item"]),
      context
    );
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output.licenseSpecifications === "") {
    contents.LicenseSpecifications = [];
  } else if (output["licenseSpecifications"] !== undefined && output["licenseSpecifications"]["item"] !== undefined) {
    contents.LicenseSpecifications = de_ImportImageLicenseSpecificationListResponse(
      __getArrayIfSingleItem(output["licenseSpecifications"]["item"]),
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["usageOperation"] !== undefined) {
    contents.UsageOperation = __expectString(output["usageOperation"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportImageTask
 */
const de_ImportImageTask = (output: any, context: __SerdeContext): ImportImageTask => {
  const contents: any = {};
  if (output["architecture"] !== undefined) {
    contents.Architecture = __expectString(output["architecture"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = __parseBoolean(output["encrypted"]);
  }
  if (output["hypervisor"] !== undefined) {
    contents.Hypervisor = __expectString(output["hypervisor"]);
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["importTaskId"] !== undefined) {
    contents.ImportTaskId = __expectString(output["importTaskId"]);
  }
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = __expectString(output["kmsKeyId"]);
  }
  if (output["licenseType"] !== undefined) {
    contents.LicenseType = __expectString(output["licenseType"]);
  }
  if (output["platform"] !== undefined) {
    contents.Platform = __expectString(output["platform"]);
  }
  if (output["progress"] !== undefined) {
    contents.Progress = __expectString(output["progress"]);
  }
  if (output.snapshotDetailSet === "") {
    contents.SnapshotDetails = [];
  } else if (output["snapshotDetailSet"] !== undefined && output["snapshotDetailSet"]["item"] !== undefined) {
    contents.SnapshotDetails = de_SnapshotDetailList(
      __getArrayIfSingleItem(output["snapshotDetailSet"]["item"]),
      context
    );
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output.licenseSpecifications === "") {
    contents.LicenseSpecifications = [];
  } else if (output["licenseSpecifications"] !== undefined && output["licenseSpecifications"]["item"] !== undefined) {
    contents.LicenseSpecifications = de_ImportImageLicenseSpecificationListResponse(
      __getArrayIfSingleItem(output["licenseSpecifications"]["item"]),
      context
    );
  }
  if (output["usageOperation"] !== undefined) {
    contents.UsageOperation = __expectString(output["usageOperation"]);
  }
  if (output["bootMode"] !== undefined) {
    contents.BootMode = __expectString(output["bootMode"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportImageTaskList
 */
const de_ImportImageTaskList = (output: any, context: __SerdeContext): ImportImageTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ImportImageTask(entry, context);
    });
};

/**
 * deserializeAws_ec2ImportInstanceResult
 */
const de_ImportInstanceResult = (output: any, context: __SerdeContext): ImportInstanceResult => {
  const contents: any = {};
  if (output["conversionTask"] !== undefined) {
    contents.ConversionTask = de_ConversionTask(output["conversionTask"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportInstanceTaskDetails
 */
const de_ImportInstanceTaskDetails = (output: any, context: __SerdeContext): ImportInstanceTaskDetails => {
  const contents: any = {};
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["platform"] !== undefined) {
    contents.Platform = __expectString(output["platform"]);
  }
  if (output.volumes === "") {
    contents.Volumes = [];
  } else if (output["volumes"] !== undefined && output["volumes"]["item"] !== undefined) {
    contents.Volumes = de_ImportInstanceVolumeDetailSet(__getArrayIfSingleItem(output["volumes"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportInstanceVolumeDetailItem
 */
const de_ImportInstanceVolumeDetailItem = (output: any, context: __SerdeContext): ImportInstanceVolumeDetailItem => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["bytesConverted"] !== undefined) {
    contents.BytesConverted = __strictParseLong(output["bytesConverted"]) as number;
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["image"] !== undefined) {
    contents.Image = de_DiskImageDescription(output["image"], context);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output["volume"] !== undefined) {
    contents.Volume = de_DiskImageVolumeDescription(output["volume"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportInstanceVolumeDetailSet
 */
const de_ImportInstanceVolumeDetailSet = (output: any, context: __SerdeContext): ImportInstanceVolumeDetailItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ImportInstanceVolumeDetailItem(entry, context);
    });
};

/**
 * deserializeAws_ec2ImportKeyPairResult
 */
const de_ImportKeyPairResult = (output: any, context: __SerdeContext): ImportKeyPairResult => {
  const contents: any = {};
  if (output["keyFingerprint"] !== undefined) {
    contents.KeyFingerprint = __expectString(output["keyFingerprint"]);
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = __expectString(output["keyName"]);
  }
  if (output["keyPairId"] !== undefined) {
    contents.KeyPairId = __expectString(output["keyPairId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportSnapshotResult
 */
const de_ImportSnapshotResult = (output: any, context: __SerdeContext): ImportSnapshotResult => {
  const contents: any = {};
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["importTaskId"] !== undefined) {
    contents.ImportTaskId = __expectString(output["importTaskId"]);
  }
  if (output["snapshotTaskDetail"] !== undefined) {
    contents.SnapshotTaskDetail = de_SnapshotTaskDetail(output["snapshotTaskDetail"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportSnapshotTask
 */
const de_ImportSnapshotTask = (output: any, context: __SerdeContext): ImportSnapshotTask => {
  const contents: any = {};
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["importTaskId"] !== undefined) {
    contents.ImportTaskId = __expectString(output["importTaskId"]);
  }
  if (output["snapshotTaskDetail"] !== undefined) {
    contents.SnapshotTaskDetail = de_SnapshotTaskDetail(output["snapshotTaskDetail"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportSnapshotTaskList
 */
const de_ImportSnapshotTaskList = (output: any, context: __SerdeContext): ImportSnapshotTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ImportSnapshotTask(entry, context);
    });
};

/**
 * deserializeAws_ec2ImportVolumeResult
 */
const de_ImportVolumeResult = (output: any, context: __SerdeContext): ImportVolumeResult => {
  const contents: any = {};
  if (output["conversionTask"] !== undefined) {
    contents.ConversionTask = de_ConversionTask(output["conversionTask"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportVolumeTaskDetails
 */
const de_ImportVolumeTaskDetails = (output: any, context: __SerdeContext): ImportVolumeTaskDetails => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["bytesConverted"] !== undefined) {
    contents.BytesConverted = __strictParseLong(output["bytesConverted"]) as number;
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["image"] !== undefined) {
    contents.Image = de_DiskImageDescription(output["image"], context);
  }
  if (output["volume"] !== undefined) {
    contents.Volume = de_DiskImageVolumeDescription(output["volume"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InferenceAcceleratorInfo
 */
const de_InferenceAcceleratorInfo = (output: any, context: __SerdeContext): InferenceAcceleratorInfo => {
  const contents: any = {};
  if (output.accelerators === "") {
    contents.Accelerators = [];
  } else if (output["accelerators"] !== undefined && output["accelerators"]["member"] !== undefined) {
    contents.Accelerators = de_InferenceDeviceInfoList(
      __getArrayIfSingleItem(output["accelerators"]["member"]),
      context
    );
  }
  if (output["totalInferenceMemoryInMiB"] !== undefined) {
    contents.TotalInferenceMemoryInMiB = __strictParseInt32(output["totalInferenceMemoryInMiB"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2InferenceDeviceInfo
 */
const de_InferenceDeviceInfo = (output: any, context: __SerdeContext): InferenceDeviceInfo => {
  const contents: any = {};
  if (output["count"] !== undefined) {
    contents.Count = __strictParseInt32(output["count"]) as number;
  }
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  if (output["manufacturer"] !== undefined) {
    contents.Manufacturer = __expectString(output["manufacturer"]);
  }
  if (output["memoryInfo"] !== undefined) {
    contents.MemoryInfo = de_InferenceDeviceMemoryInfo(output["memoryInfo"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InferenceDeviceInfoList
 */
const de_InferenceDeviceInfoList = (output: any, context: __SerdeContext): InferenceDeviceInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InferenceDeviceInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2InferenceDeviceMemoryInfo
 */
const de_InferenceDeviceMemoryInfo = (output: any, context: __SerdeContext): InferenceDeviceMemoryInfo => {
  const contents: any = {};
  if (output["sizeInMiB"] !== undefined) {
    contents.SizeInMiB = __strictParseInt32(output["sizeInMiB"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2InsideCidrBlocksStringList
 */
const de_InsideCidrBlocksStringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Instance
 */
const de_Instance = (output: any, context: __SerdeContext): Instance => {
  const contents: any = {};
  if (output["amiLaunchIndex"] !== undefined) {
    contents.AmiLaunchIndex = __strictParseInt32(output["amiLaunchIndex"]) as number;
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["kernelId"] !== undefined) {
    contents.KernelId = __expectString(output["kernelId"]);
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = __expectString(output["keyName"]);
  }
  if (output["launchTime"] !== undefined) {
    contents.LaunchTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["launchTime"]));
  }
  if (output["monitoring"] !== undefined) {
    contents.Monitoring = de_Monitoring(output["monitoring"], context);
  }
  if (output["placement"] !== undefined) {
    contents.Placement = de_Placement(output["placement"], context);
  }
  if (output["platform"] !== undefined) {
    contents.Platform = __expectString(output["platform"]);
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = __expectString(output["privateDnsName"]);
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  } else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
  }
  if (output["dnsName"] !== undefined) {
    contents.PublicDnsName = __expectString(output["dnsName"]);
  }
  if (output["ipAddress"] !== undefined) {
    contents.PublicIpAddress = __expectString(output["ipAddress"]);
  }
  if (output["ramdiskId"] !== undefined) {
    contents.RamdiskId = __expectString(output["ramdiskId"]);
  }
  if (output["instanceState"] !== undefined) {
    contents.State = de_InstanceState(output["instanceState"], context);
  }
  if (output["reason"] !== undefined) {
    contents.StateTransitionReason = __expectString(output["reason"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["architecture"] !== undefined) {
    contents.Architecture = __expectString(output["architecture"]);
  }
  if (output.blockDeviceMapping === "") {
    contents.BlockDeviceMappings = [];
  } else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
    contents.BlockDeviceMappings = de_InstanceBlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMapping"]["item"]),
      context
    );
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  if (output["ebsOptimized"] !== undefined) {
    contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
  }
  if (output["enaSupport"] !== undefined) {
    contents.EnaSupport = __parseBoolean(output["enaSupport"]);
  }
  if (output["hypervisor"] !== undefined) {
    contents.Hypervisor = __expectString(output["hypervisor"]);
  }
  if (output["iamInstanceProfile"] !== undefined) {
    contents.IamInstanceProfile = de_IamInstanceProfile(output["iamInstanceProfile"], context);
  }
  if (output["instanceLifecycle"] !== undefined) {
    contents.InstanceLifecycle = __expectString(output["instanceLifecycle"]);
  }
  if (output.elasticGpuAssociationSet === "") {
    contents.ElasticGpuAssociations = [];
  } else if (
    output["elasticGpuAssociationSet"] !== undefined &&
    output["elasticGpuAssociationSet"]["item"] !== undefined
  ) {
    contents.ElasticGpuAssociations = de_ElasticGpuAssociationList(
      __getArrayIfSingleItem(output["elasticGpuAssociationSet"]["item"]),
      context
    );
  }
  if (output.elasticInferenceAcceleratorAssociationSet === "") {
    contents.ElasticInferenceAcceleratorAssociations = [];
  } else if (
    output["elasticInferenceAcceleratorAssociationSet"] !== undefined &&
    output["elasticInferenceAcceleratorAssociationSet"]["item"] !== undefined
  ) {
    contents.ElasticInferenceAcceleratorAssociations = de_ElasticInferenceAcceleratorAssociationList(
      __getArrayIfSingleItem(output["elasticInferenceAcceleratorAssociationSet"]["item"]),
      context
    );
  }
  if (output.networkInterfaceSet === "") {
    contents.NetworkInterfaces = [];
  } else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
    contents.NetworkInterfaces = de_InstanceNetworkInterfaceList(
      __getArrayIfSingleItem(output["networkInterfaceSet"]["item"]),
      context
    );
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output["rootDeviceName"] !== undefined) {
    contents.RootDeviceName = __expectString(output["rootDeviceName"]);
  }
  if (output["rootDeviceType"] !== undefined) {
    contents.RootDeviceType = __expectString(output["rootDeviceType"]);
  }
  if (output.groupSet === "") {
    contents.SecurityGroups = [];
  } else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.SecurityGroups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
  }
  if (output["sourceDestCheck"] !== undefined) {
    contents.SourceDestCheck = __parseBoolean(output["sourceDestCheck"]);
  }
  if (output["spotInstanceRequestId"] !== undefined) {
    contents.SpotInstanceRequestId = __expectString(output["spotInstanceRequestId"]);
  }
  if (output["sriovNetSupport"] !== undefined) {
    contents.SriovNetSupport = __expectString(output["sriovNetSupport"]);
  }
  if (output["stateReason"] !== undefined) {
    contents.StateReason = de_StateReason(output["stateReason"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["virtualizationType"] !== undefined) {
    contents.VirtualizationType = __expectString(output["virtualizationType"]);
  }
  if (output["cpuOptions"] !== undefined) {
    contents.CpuOptions = de_CpuOptions(output["cpuOptions"], context);
  }
  if (output["capacityReservationId"] !== undefined) {
    contents.CapacityReservationId = __expectString(output["capacityReservationId"]);
  }
  if (output["capacityReservationSpecification"] !== undefined) {
    contents.CapacityReservationSpecification = de_CapacityReservationSpecificationResponse(
      output["capacityReservationSpecification"],
      context
    );
  }
  if (output["hibernationOptions"] !== undefined) {
    contents.HibernationOptions = de_HibernationOptions(output["hibernationOptions"], context);
  }
  if (output.licenseSet === "") {
    contents.Licenses = [];
  } else if (output["licenseSet"] !== undefined && output["licenseSet"]["item"] !== undefined) {
    contents.Licenses = de_LicenseList(__getArrayIfSingleItem(output["licenseSet"]["item"]), context);
  }
  if (output["metadataOptions"] !== undefined) {
    contents.MetadataOptions = de_InstanceMetadataOptionsResponse(output["metadataOptions"], context);
  }
  if (output["enclaveOptions"] !== undefined) {
    contents.EnclaveOptions = de_EnclaveOptions(output["enclaveOptions"], context);
  }
  if (output["bootMode"] !== undefined) {
    contents.BootMode = __expectString(output["bootMode"]);
  }
  if (output["platformDetails"] !== undefined) {
    contents.PlatformDetails = __expectString(output["platformDetails"]);
  }
  if (output["usageOperation"] !== undefined) {
    contents.UsageOperation = __expectString(output["usageOperation"]);
  }
  if (output["usageOperationUpdateTime"] !== undefined) {
    contents.UsageOperationUpdateTime = __expectNonNull(
      __parseRfc3339DateTimeWithOffset(output["usageOperationUpdateTime"])
    );
  }
  if (output["privateDnsNameOptions"] !== undefined) {
    contents.PrivateDnsNameOptions = de_PrivateDnsNameOptionsResponse(output["privateDnsNameOptions"], context);
  }
  if (output["ipv6Address"] !== undefined) {
    contents.Ipv6Address = __expectString(output["ipv6Address"]);
  }
  if (output["tpmSupport"] !== undefined) {
    contents.TpmSupport = __expectString(output["tpmSupport"]);
  }
  if (output["maintenanceOptions"] !== undefined) {
    contents.MaintenanceOptions = de_InstanceMaintenanceOptions(output["maintenanceOptions"], context);
  }
  if (output["currentInstanceBootMode"] !== undefined) {
    contents.CurrentInstanceBootMode = __expectString(output["currentInstanceBootMode"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceAttribute
 */
const de_InstanceAttribute = (output: any, context: __SerdeContext): InstanceAttribute => {
  const contents: any = {};
  if (output.groupSet === "") {
    contents.Groups = [];
  } else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
  }
  if (output.blockDeviceMapping === "") {
    contents.BlockDeviceMappings = [];
  } else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
    contents.BlockDeviceMappings = de_InstanceBlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMapping"]["item"]),
      context
    );
  }
  if (output["disableApiTermination"] !== undefined) {
    contents.DisableApiTermination = de_AttributeBooleanValue(output["disableApiTermination"], context);
  }
  if (output["enaSupport"] !== undefined) {
    contents.EnaSupport = de_AttributeBooleanValue(output["enaSupport"], context);
  }
  if (output["enclaveOptions"] !== undefined) {
    contents.EnclaveOptions = de_EnclaveOptions(output["enclaveOptions"], context);
  }
  if (output["ebsOptimized"] !== undefined) {
    contents.EbsOptimized = de_AttributeBooleanValue(output["ebsOptimized"], context);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["instanceInitiatedShutdownBehavior"] !== undefined) {
    contents.InstanceInitiatedShutdownBehavior = de_AttributeValue(
      output["instanceInitiatedShutdownBehavior"],
      context
    );
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = de_AttributeValue(output["instanceType"], context);
  }
  if (output["kernel"] !== undefined) {
    contents.KernelId = de_AttributeValue(output["kernel"], context);
  }
  if (output.productCodes === "") {
    contents.ProductCodes = [];
  } else if (output["productCodes"] !== undefined && output["productCodes"]["item"] !== undefined) {
    contents.ProductCodes = de_ProductCodeList(__getArrayIfSingleItem(output["productCodes"]["item"]), context);
  }
  if (output["ramdisk"] !== undefined) {
    contents.RamdiskId = de_AttributeValue(output["ramdisk"], context);
  }
  if (output["rootDeviceName"] !== undefined) {
    contents.RootDeviceName = de_AttributeValue(output["rootDeviceName"], context);
  }
  if (output["sourceDestCheck"] !== undefined) {
    contents.SourceDestCheck = de_AttributeBooleanValue(output["sourceDestCheck"], context);
  }
  if (output["sriovNetSupport"] !== undefined) {
    contents.SriovNetSupport = de_AttributeValue(output["sriovNetSupport"], context);
  }
  if (output["userData"] !== undefined) {
    contents.UserData = de_AttributeValue(output["userData"], context);
  }
  if (output["disableApiStop"] !== undefined) {
    contents.DisableApiStop = de_AttributeBooleanValue(output["disableApiStop"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceBlockDeviceMapping
 */
const de_InstanceBlockDeviceMapping = (output: any, context: __SerdeContext): InstanceBlockDeviceMapping => {
  const contents: any = {};
  if (output["deviceName"] !== undefined) {
    contents.DeviceName = __expectString(output["deviceName"]);
  }
  if (output["ebs"] !== undefined) {
    contents.Ebs = de_EbsInstanceBlockDevice(output["ebs"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceBlockDeviceMappingList
 */
const de_InstanceBlockDeviceMappingList = (output: any, context: __SerdeContext): InstanceBlockDeviceMapping[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceBlockDeviceMapping(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceCapacity
 */
const de_InstanceCapacity = (output: any, context: __SerdeContext): InstanceCapacity => {
  const contents: any = {};
  if (output["availableCapacity"] !== undefined) {
    contents.AvailableCapacity = __strictParseInt32(output["availableCapacity"]) as number;
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["totalCapacity"] !== undefined) {
    contents.TotalCapacity = __strictParseInt32(output["totalCapacity"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceConnectEndpointSet
 */
const de_InstanceConnectEndpointSet = (output: any, context: __SerdeContext): Ec2InstanceConnectEndpoint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ec2InstanceConnectEndpoint(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceCount
 */
const de_InstanceCount = (output: any, context: __SerdeContext): InstanceCount => {
  const contents: any = {};
  if (output["instanceCount"] !== undefined) {
    contents.InstanceCount = __strictParseInt32(output["instanceCount"]) as number;
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceCountList
 */
const de_InstanceCountList = (output: any, context: __SerdeContext): InstanceCount[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceCount(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceCreditSpecification
 */
const de_InstanceCreditSpecification = (output: any, context: __SerdeContext): InstanceCreditSpecification => {
  const contents: any = {};
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["cpuCredits"] !== undefined) {
    contents.CpuCredits = __expectString(output["cpuCredits"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceCreditSpecificationList
 */
const de_InstanceCreditSpecificationList = (output: any, context: __SerdeContext): InstanceCreditSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceCreditSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceEventWindow
 */
const de_InstanceEventWindow = (output: any, context: __SerdeContext): InstanceEventWindow => {
  const contents: any = {};
  if (output["instanceEventWindowId"] !== undefined) {
    contents.InstanceEventWindowId = __expectString(output["instanceEventWindowId"]);
  }
  if (output.timeRangeSet === "") {
    contents.TimeRanges = [];
  } else if (output["timeRangeSet"] !== undefined && output["timeRangeSet"]["item"] !== undefined) {
    contents.TimeRanges = de_InstanceEventWindowTimeRangeList(
      __getArrayIfSingleItem(output["timeRangeSet"]["item"]),
      context
    );
  }
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  if (output["cronExpression"] !== undefined) {
    contents.CronExpression = __expectString(output["cronExpression"]);
  }
  if (output["associationTarget"] !== undefined) {
    contents.AssociationTarget = de_InstanceEventWindowAssociationTarget(output["associationTarget"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceEventWindowAssociationTarget
 */
const de_InstanceEventWindowAssociationTarget = (
  output: any,
  context: __SerdeContext
): InstanceEventWindowAssociationTarget => {
  const contents: any = {};
  if (output.instanceIdSet === "") {
    contents.InstanceIds = [];
  } else if (output["instanceIdSet"] !== undefined && output["instanceIdSet"]["item"] !== undefined) {
    contents.InstanceIds = de_InstanceIdList(__getArrayIfSingleItem(output["instanceIdSet"]["item"]), context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output.dedicatedHostIdSet === "") {
    contents.DedicatedHostIds = [];
  } else if (output["dedicatedHostIdSet"] !== undefined && output["dedicatedHostIdSet"]["item"] !== undefined) {
    contents.DedicatedHostIds = de_DedicatedHostIdList(
      __getArrayIfSingleItem(output["dedicatedHostIdSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceEventWindowSet
 */
const de_InstanceEventWindowSet = (output: any, context: __SerdeContext): InstanceEventWindow[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceEventWindow(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceEventWindowStateChange
 */
const de_InstanceEventWindowStateChange = (output: any, context: __SerdeContext): InstanceEventWindowStateChange => {
  const contents: any = {};
  if (output["instanceEventWindowId"] !== undefined) {
    contents.InstanceEventWindowId = __expectString(output["instanceEventWindowId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceEventWindowTimeRange
 */
const de_InstanceEventWindowTimeRange = (output: any, context: __SerdeContext): InstanceEventWindowTimeRange => {
  const contents: any = {};
  if (output["startWeekDay"] !== undefined) {
    contents.StartWeekDay = __expectString(output["startWeekDay"]);
  }
  if (output["startHour"] !== undefined) {
    contents.StartHour = __strictParseInt32(output["startHour"]) as number;
  }
  if (output["endWeekDay"] !== undefined) {
    contents.EndWeekDay = __expectString(output["endWeekDay"]);
  }
  if (output["endHour"] !== undefined) {
    contents.EndHour = __strictParseInt32(output["endHour"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceEventWindowTimeRangeList
 */
const de_InstanceEventWindowTimeRangeList = (output: any, context: __SerdeContext): InstanceEventWindowTimeRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceEventWindowTimeRange(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceExportDetails
 */
const de_InstanceExportDetails = (output: any, context: __SerdeContext): InstanceExportDetails => {
  const contents: any = {};
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["targetEnvironment"] !== undefined) {
    contents.TargetEnvironment = __expectString(output["targetEnvironment"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceFamilyCreditSpecification
 */
const de_InstanceFamilyCreditSpecification = (
  output: any,
  context: __SerdeContext
): InstanceFamilyCreditSpecification => {
  const contents: any = {};
  if (output["instanceFamily"] !== undefined) {
    contents.InstanceFamily = __expectString(output["instanceFamily"]);
  }
  if (output["cpuCredits"] !== undefined) {
    contents.CpuCredits = __expectString(output["cpuCredits"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceGenerationSet
 */
const de_InstanceGenerationSet = (output: any, context: __SerdeContext): InstanceGeneration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2InstanceIdList
 */
const de_InstanceIdList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2InstanceIdSet
 */
const de_InstanceIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2InstanceIdsSet
 */
const de_InstanceIdsSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2InstanceIpv4Prefix
 */
const de_InstanceIpv4Prefix = (output: any, context: __SerdeContext): InstanceIpv4Prefix => {
  const contents: any = {};
  if (output["ipv4Prefix"] !== undefined) {
    contents.Ipv4Prefix = __expectString(output["ipv4Prefix"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceIpv4PrefixList
 */
const de_InstanceIpv4PrefixList = (output: any, context: __SerdeContext): InstanceIpv4Prefix[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceIpv4Prefix(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceIpv6Address
 */
const de_InstanceIpv6Address = (output: any, context: __SerdeContext): InstanceIpv6Address => {
  const contents: any = {};
  if (output["ipv6Address"] !== undefined) {
    contents.Ipv6Address = __expectString(output["ipv6Address"]);
  }
  if (output["isPrimaryIpv6"] !== undefined) {
    contents.IsPrimaryIpv6 = __parseBoolean(output["isPrimaryIpv6"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceIpv6AddressList
 */
const de_InstanceIpv6AddressList = (output: any, context: __SerdeContext): InstanceIpv6Address[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceIpv6Address(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceIpv6Prefix
 */
const de_InstanceIpv6Prefix = (output: any, context: __SerdeContext): InstanceIpv6Prefix => {
  const contents: any = {};
  if (output["ipv6Prefix"] !== undefined) {
    contents.Ipv6Prefix = __expectString(output["ipv6Prefix"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceIpv6PrefixList
 */
const de_InstanceIpv6PrefixList = (output: any, context: __SerdeContext): InstanceIpv6Prefix[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceIpv6Prefix(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceList
 */
const de_InstanceList = (output: any, context: __SerdeContext): Instance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Instance(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceMaintenanceOptions
 */
const de_InstanceMaintenanceOptions = (output: any, context: __SerdeContext): InstanceMaintenanceOptions => {
  const contents: any = {};
  if (output["autoRecovery"] !== undefined) {
    contents.AutoRecovery = __expectString(output["autoRecovery"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceMetadataOptionsResponse
 */
const de_InstanceMetadataOptionsResponse = (output: any, context: __SerdeContext): InstanceMetadataOptionsResponse => {
  const contents: any = {};
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["httpTokens"] !== undefined) {
    contents.HttpTokens = __expectString(output["httpTokens"]);
  }
  if (output["httpPutResponseHopLimit"] !== undefined) {
    contents.HttpPutResponseHopLimit = __strictParseInt32(output["httpPutResponseHopLimit"]) as number;
  }
  if (output["httpEndpoint"] !== undefined) {
    contents.HttpEndpoint = __expectString(output["httpEndpoint"]);
  }
  if (output["httpProtocolIpv6"] !== undefined) {
    contents.HttpProtocolIpv6 = __expectString(output["httpProtocolIpv6"]);
  }
  if (output["instanceMetadataTags"] !== undefined) {
    contents.InstanceMetadataTags = __expectString(output["instanceMetadataTags"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceMonitoring
 */
const de_InstanceMonitoring = (output: any, context: __SerdeContext): InstanceMonitoring => {
  const contents: any = {};
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["monitoring"] !== undefined) {
    contents.Monitoring = de_Monitoring(output["monitoring"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceMonitoringList
 */
const de_InstanceMonitoringList = (output: any, context: __SerdeContext): InstanceMonitoring[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceMonitoring(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceNetworkInterface
 */
const de_InstanceNetworkInterface = (output: any, context: __SerdeContext): InstanceNetworkInterface => {
  const contents: any = {};
  if (output["association"] !== undefined) {
    contents.Association = de_InstanceNetworkInterfaceAssociation(output["association"], context);
  }
  if (output["attachment"] !== undefined) {
    contents.Attachment = de_InstanceNetworkInterfaceAttachment(output["attachment"], context);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output.groupSet === "") {
    contents.Groups = [];
  } else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
  }
  if (output.ipv6AddressesSet === "") {
    contents.Ipv6Addresses = [];
  } else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
    contents.Ipv6Addresses = de_InstanceIpv6AddressList(
      __getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]),
      context
    );
  }
  if (output["macAddress"] !== undefined) {
    contents.MacAddress = __expectString(output["macAddress"]);
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = __expectString(output["privateDnsName"]);
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
  }
  if (output.privateIpAddressesSet === "") {
    contents.PrivateIpAddresses = [];
  } else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
    contents.PrivateIpAddresses = de_InstancePrivateIpAddressList(
      __getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]),
      context
    );
  }
  if (output["sourceDestCheck"] !== undefined) {
    contents.SourceDestCheck = __parseBoolean(output["sourceDestCheck"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["interfaceType"] !== undefined) {
    contents.InterfaceType = __expectString(output["interfaceType"]);
  }
  if (output.ipv4PrefixSet === "") {
    contents.Ipv4Prefixes = [];
  } else if (output["ipv4PrefixSet"] !== undefined && output["ipv4PrefixSet"]["item"] !== undefined) {
    contents.Ipv4Prefixes = de_InstanceIpv4PrefixList(__getArrayIfSingleItem(output["ipv4PrefixSet"]["item"]), context);
  }
  if (output.ipv6PrefixSet === "") {
    contents.Ipv6Prefixes = [];
  } else if (output["ipv6PrefixSet"] !== undefined && output["ipv6PrefixSet"]["item"] !== undefined) {
    contents.Ipv6Prefixes = de_InstanceIpv6PrefixList(__getArrayIfSingleItem(output["ipv6PrefixSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceNetworkInterfaceAssociation
 */
const de_InstanceNetworkInterfaceAssociation = (
  output: any,
  context: __SerdeContext
): InstanceNetworkInterfaceAssociation => {
  const contents: any = {};
  if (output["carrierIp"] !== undefined) {
    contents.CarrierIp = __expectString(output["carrierIp"]);
  }
  if (output["customerOwnedIp"] !== undefined) {
    contents.CustomerOwnedIp = __expectString(output["customerOwnedIp"]);
  }
  if (output["ipOwnerId"] !== undefined) {
    contents.IpOwnerId = __expectString(output["ipOwnerId"]);
  }
  if (output["publicDnsName"] !== undefined) {
    contents.PublicDnsName = __expectString(output["publicDnsName"]);
  }
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = __expectString(output["publicIp"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceNetworkInterfaceAttachment
 */
const de_InstanceNetworkInterfaceAttachment = (
  output: any,
  context: __SerdeContext
): InstanceNetworkInterfaceAttachment => {
  const contents: any = {};
  if (output["attachTime"] !== undefined) {
    contents.AttachTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["attachTime"]));
  }
  if (output["attachmentId"] !== undefined) {
    contents.AttachmentId = __expectString(output["attachmentId"]);
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
  }
  if (output["deviceIndex"] !== undefined) {
    contents.DeviceIndex = __strictParseInt32(output["deviceIndex"]) as number;
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["networkCardIndex"] !== undefined) {
    contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceNetworkInterfaceList
 */
const de_InstanceNetworkInterfaceList = (output: any, context: __SerdeContext): InstanceNetworkInterface[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceNetworkInterface(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceNetworkInterfaceSpecification
 */
const de_InstanceNetworkInterfaceSpecification = (
  output: any,
  context: __SerdeContext
): InstanceNetworkInterfaceSpecification => {
  const contents: any = {};
  if (output["associatePublicIpAddress"] !== undefined) {
    contents.AssociatePublicIpAddress = __parseBoolean(output["associatePublicIpAddress"]);
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["deviceIndex"] !== undefined) {
    contents.DeviceIndex = __strictParseInt32(output["deviceIndex"]) as number;
  }
  if (output.SecurityGroupId === "") {
    contents.Groups = [];
  } else if (output["SecurityGroupId"] !== undefined && output["SecurityGroupId"]["SecurityGroupId"] !== undefined) {
    contents.Groups = de_SecurityGroupIdStringList(
      __getArrayIfSingleItem(output["SecurityGroupId"]["SecurityGroupId"]),
      context
    );
  }
  if (output["ipv6AddressCount"] !== undefined) {
    contents.Ipv6AddressCount = __strictParseInt32(output["ipv6AddressCount"]) as number;
  }
  if (output.ipv6AddressesSet === "") {
    contents.Ipv6Addresses = [];
  } else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
    contents.Ipv6Addresses = de_InstanceIpv6AddressList(
      __getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]),
      context
    );
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
  }
  if (output.privateIpAddressesSet === "") {
    contents.PrivateIpAddresses = [];
  } else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
    contents.PrivateIpAddresses = de_PrivateIpAddressSpecificationList(
      __getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]),
      context
    );
  }
  if (output["secondaryPrivateIpAddressCount"] !== undefined) {
    contents.SecondaryPrivateIpAddressCount = __strictParseInt32(output["secondaryPrivateIpAddressCount"]) as number;
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["AssociateCarrierIpAddress"] !== undefined) {
    contents.AssociateCarrierIpAddress = __parseBoolean(output["AssociateCarrierIpAddress"]);
  }
  if (output["InterfaceType"] !== undefined) {
    contents.InterfaceType = __expectString(output["InterfaceType"]);
  }
  if (output["NetworkCardIndex"] !== undefined) {
    contents.NetworkCardIndex = __strictParseInt32(output["NetworkCardIndex"]) as number;
  }
  if (output.Ipv4Prefix === "") {
    contents.Ipv4Prefixes = [];
  } else if (output["Ipv4Prefix"] !== undefined && output["Ipv4Prefix"]["item"] !== undefined) {
    contents.Ipv4Prefixes = de_Ipv4PrefixList(__getArrayIfSingleItem(output["Ipv4Prefix"]["item"]), context);
  }
  if (output["Ipv4PrefixCount"] !== undefined) {
    contents.Ipv4PrefixCount = __strictParseInt32(output["Ipv4PrefixCount"]) as number;
  }
  if (output.Ipv6Prefix === "") {
    contents.Ipv6Prefixes = [];
  } else if (output["Ipv6Prefix"] !== undefined && output["Ipv6Prefix"]["item"] !== undefined) {
    contents.Ipv6Prefixes = de_Ipv6PrefixList(__getArrayIfSingleItem(output["Ipv6Prefix"]["item"]), context);
  }
  if (output["Ipv6PrefixCount"] !== undefined) {
    contents.Ipv6PrefixCount = __strictParseInt32(output["Ipv6PrefixCount"]) as number;
  }
  if (output["PrimaryIpv6"] !== undefined) {
    contents.PrimaryIpv6 = __parseBoolean(output["PrimaryIpv6"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceNetworkInterfaceSpecificationList
 */
const de_InstanceNetworkInterfaceSpecificationList = (
  output: any,
  context: __SerdeContext
): InstanceNetworkInterfaceSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceNetworkInterfaceSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2InstancePrivateIpAddress
 */
const de_InstancePrivateIpAddress = (output: any, context: __SerdeContext): InstancePrivateIpAddress => {
  const contents: any = {};
  if (output["association"] !== undefined) {
    contents.Association = de_InstanceNetworkInterfaceAssociation(output["association"], context);
  }
  if (output["primary"] !== undefined) {
    contents.Primary = __parseBoolean(output["primary"]);
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = __expectString(output["privateDnsName"]);
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstancePrivateIpAddressList
 */
const de_InstancePrivateIpAddressList = (output: any, context: __SerdeContext): InstancePrivateIpAddress[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstancePrivateIpAddress(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceRequirements
 */
const de_InstanceRequirements = (output: any, context: __SerdeContext): InstanceRequirements => {
  const contents: any = {};
  if (output["vCpuCount"] !== undefined) {
    contents.VCpuCount = de_VCpuCountRange(output["vCpuCount"], context);
  }
  if (output["memoryMiB"] !== undefined) {
    contents.MemoryMiB = de_MemoryMiB(output["memoryMiB"], context);
  }
  if (output.cpuManufacturerSet === "") {
    contents.CpuManufacturers = [];
  } else if (output["cpuManufacturerSet"] !== undefined && output["cpuManufacturerSet"]["item"] !== undefined) {
    contents.CpuManufacturers = de_CpuManufacturerSet(
      __getArrayIfSingleItem(output["cpuManufacturerSet"]["item"]),
      context
    );
  }
  if (output["memoryGiBPerVCpu"] !== undefined) {
    contents.MemoryGiBPerVCpu = de_MemoryGiBPerVCpu(output["memoryGiBPerVCpu"], context);
  }
  if (output.excludedInstanceTypeSet === "") {
    contents.ExcludedInstanceTypes = [];
  } else if (
    output["excludedInstanceTypeSet"] !== undefined &&
    output["excludedInstanceTypeSet"]["item"] !== undefined
  ) {
    contents.ExcludedInstanceTypes = de_ExcludedInstanceTypeSet(
      __getArrayIfSingleItem(output["excludedInstanceTypeSet"]["item"]),
      context
    );
  }
  if (output.instanceGenerationSet === "") {
    contents.InstanceGenerations = [];
  } else if (output["instanceGenerationSet"] !== undefined && output["instanceGenerationSet"]["item"] !== undefined) {
    contents.InstanceGenerations = de_InstanceGenerationSet(
      __getArrayIfSingleItem(output["instanceGenerationSet"]["item"]),
      context
    );
  }
  if (output["spotMaxPricePercentageOverLowestPrice"] !== undefined) {
    contents.SpotMaxPricePercentageOverLowestPrice = __strictParseInt32(
      output["spotMaxPricePercentageOverLowestPrice"]
    ) as number;
  }
  if (output["onDemandMaxPricePercentageOverLowestPrice"] !== undefined) {
    contents.OnDemandMaxPricePercentageOverLowestPrice = __strictParseInt32(
      output["onDemandMaxPricePercentageOverLowestPrice"]
    ) as number;
  }
  if (output["bareMetal"] !== undefined) {
    contents.BareMetal = __expectString(output["bareMetal"]);
  }
  if (output["burstablePerformance"] !== undefined) {
    contents.BurstablePerformance = __expectString(output["burstablePerformance"]);
  }
  if (output["requireHibernateSupport"] !== undefined) {
    contents.RequireHibernateSupport = __parseBoolean(output["requireHibernateSupport"]);
  }
  if (output["networkInterfaceCount"] !== undefined) {
    contents.NetworkInterfaceCount = de_NetworkInterfaceCount(output["networkInterfaceCount"], context);
  }
  if (output["localStorage"] !== undefined) {
    contents.LocalStorage = __expectString(output["localStorage"]);
  }
  if (output.localStorageTypeSet === "") {
    contents.LocalStorageTypes = [];
  } else if (output["localStorageTypeSet"] !== undefined && output["localStorageTypeSet"]["item"] !== undefined) {
    contents.LocalStorageTypes = de_LocalStorageTypeSet(
      __getArrayIfSingleItem(output["localStorageTypeSet"]["item"]),
      context
    );
  }
  if (output["totalLocalStorageGB"] !== undefined) {
    contents.TotalLocalStorageGB = de_TotalLocalStorageGB(output["totalLocalStorageGB"], context);
  }
  if (output["baselineEbsBandwidthMbps"] !== undefined) {
    contents.BaselineEbsBandwidthMbps = de_BaselineEbsBandwidthMbps(output["baselineEbsBandwidthMbps"], context);
  }
  if (output.acceleratorTypeSet === "") {
    contents.AcceleratorTypes = [];
  } else if (output["acceleratorTypeSet"] !== undefined && output["acceleratorTypeSet"]["item"] !== undefined) {
    contents.AcceleratorTypes = de_AcceleratorTypeSet(
      __getArrayIfSingleItem(output["acceleratorTypeSet"]["item"]),
      context
    );
  }
  if (output["acceleratorCount"] !== undefined) {
    contents.AcceleratorCount = de_AcceleratorCount(output["acceleratorCount"], context);
  }
  if (output.acceleratorManufacturerSet === "") {
    contents.AcceleratorManufacturers = [];
  } else if (
    output["acceleratorManufacturerSet"] !== undefined &&
    output["acceleratorManufacturerSet"]["item"] !== undefined
  ) {
    contents.AcceleratorManufacturers = de_AcceleratorManufacturerSet(
      __getArrayIfSingleItem(output["acceleratorManufacturerSet"]["item"]),
      context
    );
  }
  if (output.acceleratorNameSet === "") {
    contents.AcceleratorNames = [];
  } else if (output["acceleratorNameSet"] !== undefined && output["acceleratorNameSet"]["item"] !== undefined) {
    contents.AcceleratorNames = de_AcceleratorNameSet(
      __getArrayIfSingleItem(output["acceleratorNameSet"]["item"]),
      context
    );
  }
  if (output["acceleratorTotalMemoryMiB"] !== undefined) {
    contents.AcceleratorTotalMemoryMiB = de_AcceleratorTotalMemoryMiB(output["acceleratorTotalMemoryMiB"], context);
  }
  if (output["networkBandwidthGbps"] !== undefined) {
    contents.NetworkBandwidthGbps = de_NetworkBandwidthGbps(output["networkBandwidthGbps"], context);
  }
  if (output.allowedInstanceTypeSet === "") {
    contents.AllowedInstanceTypes = [];
  } else if (output["allowedInstanceTypeSet"] !== undefined && output["allowedInstanceTypeSet"]["item"] !== undefined) {
    contents.AllowedInstanceTypes = de_AllowedInstanceTypeSet(
      __getArrayIfSingleItem(output["allowedInstanceTypeSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceState
 */
const de_InstanceState = (output: any, context: __SerdeContext): InstanceState => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __strictParseInt32(output["code"]) as number;
  }
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceStateChange
 */
const de_InstanceStateChange = (output: any, context: __SerdeContext): InstanceStateChange => {
  const contents: any = {};
  if (output["currentState"] !== undefined) {
    contents.CurrentState = de_InstanceState(output["currentState"], context);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["previousState"] !== undefined) {
    contents.PreviousState = de_InstanceState(output["previousState"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceStateChangeList
 */
const de_InstanceStateChangeList = (output: any, context: __SerdeContext): InstanceStateChange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceStateChange(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceStatus
 */
const de_InstanceStatus = (output: any, context: __SerdeContext): InstanceStatus => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output.eventsSet === "") {
    contents.Events = [];
  } else if (output["eventsSet"] !== undefined && output["eventsSet"]["item"] !== undefined) {
    contents.Events = de_InstanceStatusEventList(__getArrayIfSingleItem(output["eventsSet"]["item"]), context);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["instanceState"] !== undefined) {
    contents.InstanceState = de_InstanceState(output["instanceState"], context);
  }
  if (output["instanceStatus"] !== undefined) {
    contents.InstanceStatus = de_InstanceStatusSummary(output["instanceStatus"], context);
  }
  if (output["systemStatus"] !== undefined) {
    contents.SystemStatus = de_InstanceStatusSummary(output["systemStatus"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceStatusDetails
 */
const de_InstanceStatusDetails = (output: any, context: __SerdeContext): InstanceStatusDetails => {
  const contents: any = {};
  if (output["impairedSince"] !== undefined) {
    contents.ImpairedSince = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["impairedSince"]));
  }
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceStatusDetailsList
 */
const de_InstanceStatusDetailsList = (output: any, context: __SerdeContext): InstanceStatusDetails[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceStatusDetails(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceStatusEvent
 */
const de_InstanceStatusEvent = (output: any, context: __SerdeContext): InstanceStatusEvent => {
  const contents: any = {};
  if (output["instanceEventId"] !== undefined) {
    contents.InstanceEventId = __expectString(output["instanceEventId"]);
  }
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["notAfter"] !== undefined) {
    contents.NotAfter = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["notAfter"]));
  }
  if (output["notBefore"] !== undefined) {
    contents.NotBefore = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["notBefore"]));
  }
  if (output["notBeforeDeadline"] !== undefined) {
    contents.NotBeforeDeadline = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["notBeforeDeadline"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceStatusEventList
 */
const de_InstanceStatusEventList = (output: any, context: __SerdeContext): InstanceStatusEvent[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceStatusEvent(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceStatusList
 */
const de_InstanceStatusList = (output: any, context: __SerdeContext): InstanceStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceStatus(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceStatusSummary
 */
const de_InstanceStatusSummary = (output: any, context: __SerdeContext): InstanceStatusSummary => {
  const contents: any = {};
  if (output.details === "") {
    contents.Details = [];
  } else if (output["details"] !== undefined && output["details"]["item"] !== undefined) {
    contents.Details = de_InstanceStatusDetailsList(__getArrayIfSingleItem(output["details"]["item"]), context);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceStorageInfo
 */
const de_InstanceStorageInfo = (output: any, context: __SerdeContext): InstanceStorageInfo => {
  const contents: any = {};
  if (output["totalSizeInGB"] !== undefined) {
    contents.TotalSizeInGB = __strictParseLong(output["totalSizeInGB"]) as number;
  }
  if (output.disks === "") {
    contents.Disks = [];
  } else if (output["disks"] !== undefined && output["disks"]["item"] !== undefined) {
    contents.Disks = de_DiskInfoList(__getArrayIfSingleItem(output["disks"]["item"]), context);
  }
  if (output["nvmeSupport"] !== undefined) {
    contents.NvmeSupport = __expectString(output["nvmeSupport"]);
  }
  if (output["encryptionSupport"] !== undefined) {
    contents.EncryptionSupport = __expectString(output["encryptionSupport"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceTagKeySet
 */
const de_InstanceTagKeySet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2InstanceTagNotificationAttribute
 */
const de_InstanceTagNotificationAttribute = (
  output: any,
  context: __SerdeContext
): InstanceTagNotificationAttribute => {
  const contents: any = {};
  if (output.instanceTagKeySet === "") {
    contents.InstanceTagKeys = [];
  } else if (output["instanceTagKeySet"] !== undefined && output["instanceTagKeySet"]["item"] !== undefined) {
    contents.InstanceTagKeys = de_InstanceTagKeySet(
      __getArrayIfSingleItem(output["instanceTagKeySet"]["item"]),
      context
    );
  }
  if (output["includeAllTagsOfInstance"] !== undefined) {
    contents.IncludeAllTagsOfInstance = __parseBoolean(output["includeAllTagsOfInstance"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceTypeInfo
 */
const de_InstanceTypeInfo = (output: any, context: __SerdeContext): InstanceTypeInfo => {
  const contents: any = {};
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["currentGeneration"] !== undefined) {
    contents.CurrentGeneration = __parseBoolean(output["currentGeneration"]);
  }
  if (output["freeTierEligible"] !== undefined) {
    contents.FreeTierEligible = __parseBoolean(output["freeTierEligible"]);
  }
  if (output.supportedUsageClasses === "") {
    contents.SupportedUsageClasses = [];
  } else if (output["supportedUsageClasses"] !== undefined && output["supportedUsageClasses"]["item"] !== undefined) {
    contents.SupportedUsageClasses = de_UsageClassTypeList(
      __getArrayIfSingleItem(output["supportedUsageClasses"]["item"]),
      context
    );
  }
  if (output.supportedRootDeviceTypes === "") {
    contents.SupportedRootDeviceTypes = [];
  } else if (
    output["supportedRootDeviceTypes"] !== undefined &&
    output["supportedRootDeviceTypes"]["item"] !== undefined
  ) {
    contents.SupportedRootDeviceTypes = de_RootDeviceTypeList(
      __getArrayIfSingleItem(output["supportedRootDeviceTypes"]["item"]),
      context
    );
  }
  if (output.supportedVirtualizationTypes === "") {
    contents.SupportedVirtualizationTypes = [];
  } else if (
    output["supportedVirtualizationTypes"] !== undefined &&
    output["supportedVirtualizationTypes"]["item"] !== undefined
  ) {
    contents.SupportedVirtualizationTypes = de_VirtualizationTypeList(
      __getArrayIfSingleItem(output["supportedVirtualizationTypes"]["item"]),
      context
    );
  }
  if (output["bareMetal"] !== undefined) {
    contents.BareMetal = __parseBoolean(output["bareMetal"]);
  }
  if (output["hypervisor"] !== undefined) {
    contents.Hypervisor = __expectString(output["hypervisor"]);
  }
  if (output["processorInfo"] !== undefined) {
    contents.ProcessorInfo = de_ProcessorInfo(output["processorInfo"], context);
  }
  if (output["vCpuInfo"] !== undefined) {
    contents.VCpuInfo = de_VCpuInfo(output["vCpuInfo"], context);
  }
  if (output["memoryInfo"] !== undefined) {
    contents.MemoryInfo = de_MemoryInfo(output["memoryInfo"], context);
  }
  if (output["instanceStorageSupported"] !== undefined) {
    contents.InstanceStorageSupported = __parseBoolean(output["instanceStorageSupported"]);
  }
  if (output["instanceStorageInfo"] !== undefined) {
    contents.InstanceStorageInfo = de_InstanceStorageInfo(output["instanceStorageInfo"], context);
  }
  if (output["ebsInfo"] !== undefined) {
    contents.EbsInfo = de_EbsInfo(output["ebsInfo"], context);
  }
  if (output["networkInfo"] !== undefined) {
    contents.NetworkInfo = de_NetworkInfo(output["networkInfo"], context);
  }
  if (output["gpuInfo"] !== undefined) {
    contents.GpuInfo = de_GpuInfo(output["gpuInfo"], context);
  }
  if (output["fpgaInfo"] !== undefined) {
    contents.FpgaInfo = de_FpgaInfo(output["fpgaInfo"], context);
  }
  if (output["placementGroupInfo"] !== undefined) {
    contents.PlacementGroupInfo = de_PlacementGroupInfo(output["placementGroupInfo"], context);
  }
  if (output["inferenceAcceleratorInfo"] !== undefined) {
    contents.InferenceAcceleratorInfo = de_InferenceAcceleratorInfo(output["inferenceAcceleratorInfo"], context);
  }
  if (output["hibernationSupported"] !== undefined) {
    contents.HibernationSupported = __parseBoolean(output["hibernationSupported"]);
  }
  if (output["burstablePerformanceSupported"] !== undefined) {
    contents.BurstablePerformanceSupported = __parseBoolean(output["burstablePerformanceSupported"]);
  }
  if (output["dedicatedHostsSupported"] !== undefined) {
    contents.DedicatedHostsSupported = __parseBoolean(output["dedicatedHostsSupported"]);
  }
  if (output["autoRecoverySupported"] !== undefined) {
    contents.AutoRecoverySupported = __parseBoolean(output["autoRecoverySupported"]);
  }
  if (output.supportedBootModes === "") {
    contents.SupportedBootModes = [];
  } else if (output["supportedBootModes"] !== undefined && output["supportedBootModes"]["item"] !== undefined) {
    contents.SupportedBootModes = de_BootModeTypeList(
      __getArrayIfSingleItem(output["supportedBootModes"]["item"]),
      context
    );
  }
  if (output["nitroEnclavesSupport"] !== undefined) {
    contents.NitroEnclavesSupport = __expectString(output["nitroEnclavesSupport"]);
  }
  if (output["nitroTpmSupport"] !== undefined) {
    contents.NitroTpmSupport = __expectString(output["nitroTpmSupport"]);
  }
  if (output["nitroTpmInfo"] !== undefined) {
    contents.NitroTpmInfo = de_NitroTpmInfo(output["nitroTpmInfo"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceTypeInfoFromInstanceRequirements
 */
const de_InstanceTypeInfoFromInstanceRequirements = (
  output: any,
  context: __SerdeContext
): InstanceTypeInfoFromInstanceRequirements => {
  const contents: any = {};
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceTypeInfoFromInstanceRequirementsSet
 */
const de_InstanceTypeInfoFromInstanceRequirementsSet = (
  output: any,
  context: __SerdeContext
): InstanceTypeInfoFromInstanceRequirements[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceTypeInfoFromInstanceRequirements(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceTypeInfoList
 */
const de_InstanceTypeInfoList = (output: any, context: __SerdeContext): InstanceTypeInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceTypeInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceTypeOffering
 */
const de_InstanceTypeOffering = (output: any, context: __SerdeContext): InstanceTypeOffering => {
  const contents: any = {};
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["locationType"] !== undefined) {
    contents.LocationType = __expectString(output["locationType"]);
  }
  if (output["location"] !== undefined) {
    contents.Location = __expectString(output["location"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceTypeOfferingsList
 */
const de_InstanceTypeOfferingsList = (output: any, context: __SerdeContext): InstanceTypeOffering[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceTypeOffering(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceTypesList
 */
const de_InstanceTypesList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2InstanceUsage
 */
const de_InstanceUsage = (output: any, context: __SerdeContext): InstanceUsage => {
  const contents: any = {};
  if (output["accountId"] !== undefined) {
    contents.AccountId = __expectString(output["accountId"]);
  }
  if (output["usedInstanceCount"] !== undefined) {
    contents.UsedInstanceCount = __strictParseInt32(output["usedInstanceCount"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceUsageSet
 */
const de_InstanceUsageSet = (output: any, context: __SerdeContext): InstanceUsage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceUsage(entry, context);
    });
};

/**
 * deserializeAws_ec2InternetGateway
 */
const de_InternetGateway = (output: any, context: __SerdeContext): InternetGateway => {
  const contents: any = {};
  if (output.attachmentSet === "") {
    contents.Attachments = [];
  } else if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
    contents.Attachments = de_InternetGatewayAttachmentList(
      __getArrayIfSingleItem(output["attachmentSet"]["item"]),
      context
    );
  }
  if (output["internetGatewayId"] !== undefined) {
    contents.InternetGatewayId = __expectString(output["internetGatewayId"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InternetGatewayAttachment
 */
const de_InternetGatewayAttachment = (output: any, context: __SerdeContext): InternetGatewayAttachment => {
  const contents: any = {};
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InternetGatewayAttachmentList
 */
const de_InternetGatewayAttachmentList = (output: any, context: __SerdeContext): InternetGatewayAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InternetGatewayAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2InternetGatewayList
 */
const de_InternetGatewayList = (output: any, context: __SerdeContext): InternetGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InternetGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2IpAddressList
 */
const de_IpAddressList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Ipam
 */
const de_Ipam = (output: any, context: __SerdeContext): Ipam => {
  const contents: any = {};
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["ipamId"] !== undefined) {
    contents.IpamId = __expectString(output["ipamId"]);
  }
  if (output["ipamArn"] !== undefined) {
    contents.IpamArn = __expectString(output["ipamArn"]);
  }
  if (output["ipamRegion"] !== undefined) {
    contents.IpamRegion = __expectString(output["ipamRegion"]);
  }
  if (output["publicDefaultScopeId"] !== undefined) {
    contents.PublicDefaultScopeId = __expectString(output["publicDefaultScopeId"]);
  }
  if (output["privateDefaultScopeId"] !== undefined) {
    contents.PrivateDefaultScopeId = __expectString(output["privateDefaultScopeId"]);
  }
  if (output["scopeCount"] !== undefined) {
    contents.ScopeCount = __strictParseInt32(output["scopeCount"]) as number;
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output.operatingRegionSet === "") {
    contents.OperatingRegions = [];
  } else if (output["operatingRegionSet"] !== undefined && output["operatingRegionSet"]["item"] !== undefined) {
    contents.OperatingRegions = de_IpamOperatingRegionSet(
      __getArrayIfSingleItem(output["operatingRegionSet"]["item"]),
      context
    );
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["defaultResourceDiscoveryId"] !== undefined) {
    contents.DefaultResourceDiscoveryId = __expectString(output["defaultResourceDiscoveryId"]);
  }
  if (output["defaultResourceDiscoveryAssociationId"] !== undefined) {
    contents.DefaultResourceDiscoveryAssociationId = __expectString(output["defaultResourceDiscoveryAssociationId"]);
  }
  if (output["resourceDiscoveryAssociationCount"] !== undefined) {
    contents.ResourceDiscoveryAssociationCount = __strictParseInt32(
      output["resourceDiscoveryAssociationCount"]
    ) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamAddressHistoryRecord
 */
const de_IpamAddressHistoryRecord = (output: any, context: __SerdeContext): IpamAddressHistoryRecord => {
  const contents: any = {};
  if (output["resourceOwnerId"] !== undefined) {
    contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
  }
  if (output["resourceRegion"] !== undefined) {
    contents.ResourceRegion = __expectString(output["resourceRegion"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceCidr"] !== undefined) {
    contents.ResourceCidr = __expectString(output["resourceCidr"]);
  }
  if (output["resourceName"] !== undefined) {
    contents.ResourceName = __expectString(output["resourceName"]);
  }
  if (output["resourceComplianceStatus"] !== undefined) {
    contents.ResourceComplianceStatus = __expectString(output["resourceComplianceStatus"]);
  }
  if (output["resourceOverlapStatus"] !== undefined) {
    contents.ResourceOverlapStatus = __expectString(output["resourceOverlapStatus"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["sampledStartTime"] !== undefined) {
    contents.SampledStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["sampledStartTime"]));
  }
  if (output["sampledEndTime"] !== undefined) {
    contents.SampledEndTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["sampledEndTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamAddressHistoryRecordSet
 */
const de_IpamAddressHistoryRecordSet = (output: any, context: __SerdeContext): IpamAddressHistoryRecord[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamAddressHistoryRecord(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamDiscoveredAccount
 */
const de_IpamDiscoveredAccount = (output: any, context: __SerdeContext): IpamDiscoveredAccount => {
  const contents: any = {};
  if (output["accountId"] !== undefined) {
    contents.AccountId = __expectString(output["accountId"]);
  }
  if (output["discoveryRegion"] !== undefined) {
    contents.DiscoveryRegion = __expectString(output["discoveryRegion"]);
  }
  if (output["failureReason"] !== undefined) {
    contents.FailureReason = de_IpamDiscoveryFailureReason(output["failureReason"], context);
  }
  if (output["lastAttemptedDiscoveryTime"] !== undefined) {
    contents.LastAttemptedDiscoveryTime = __expectNonNull(
      __parseRfc3339DateTimeWithOffset(output["lastAttemptedDiscoveryTime"])
    );
  }
  if (output["lastSuccessfulDiscoveryTime"] !== undefined) {
    contents.LastSuccessfulDiscoveryTime = __expectNonNull(
      __parseRfc3339DateTimeWithOffset(output["lastSuccessfulDiscoveryTime"])
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamDiscoveredAccountSet
 */
const de_IpamDiscoveredAccountSet = (output: any, context: __SerdeContext): IpamDiscoveredAccount[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamDiscoveredAccount(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamDiscoveredResourceCidr
 */
const de_IpamDiscoveredResourceCidr = (output: any, context: __SerdeContext): IpamDiscoveredResourceCidr => {
  const contents: any = {};
  if (output["ipamResourceDiscoveryId"] !== undefined) {
    contents.IpamResourceDiscoveryId = __expectString(output["ipamResourceDiscoveryId"]);
  }
  if (output["resourceRegion"] !== undefined) {
    contents.ResourceRegion = __expectString(output["resourceRegion"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceOwnerId"] !== undefined) {
    contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
  }
  if (output["resourceCidr"] !== undefined) {
    contents.ResourceCidr = __expectString(output["resourceCidr"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output.resourceTagSet === "") {
    contents.ResourceTags = [];
  } else if (output["resourceTagSet"] !== undefined && output["resourceTagSet"]["item"] !== undefined) {
    contents.ResourceTags = de_IpamResourceTagList(__getArrayIfSingleItem(output["resourceTagSet"]["item"]), context);
  }
  if (output["ipUsage"] !== undefined) {
    contents.IpUsage = __strictParseFloat(output["ipUsage"]) as number;
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["sampleTime"] !== undefined) {
    contents.SampleTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["sampleTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamDiscoveredResourceCidrSet
 */
const de_IpamDiscoveredResourceCidrSet = (output: any, context: __SerdeContext): IpamDiscoveredResourceCidr[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamDiscoveredResourceCidr(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamDiscoveryFailureReason
 */
const de_IpamDiscoveryFailureReason = (output: any, context: __SerdeContext): IpamDiscoveryFailureReason => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamOperatingRegion
 */
const de_IpamOperatingRegion = (output: any, context: __SerdeContext): IpamOperatingRegion => {
  const contents: any = {};
  if (output["regionName"] !== undefined) {
    contents.RegionName = __expectString(output["regionName"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamOperatingRegionSet
 */
const de_IpamOperatingRegionSet = (output: any, context: __SerdeContext): IpamOperatingRegion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamOperatingRegion(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamPool
 */
const de_IpamPool = (output: any, context: __SerdeContext): IpamPool => {
  const contents: any = {};
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["ipamPoolId"] !== undefined) {
    contents.IpamPoolId = __expectString(output["ipamPoolId"]);
  }
  if (output["sourceIpamPoolId"] !== undefined) {
    contents.SourceIpamPoolId = __expectString(output["sourceIpamPoolId"]);
  }
  if (output["ipamPoolArn"] !== undefined) {
    contents.IpamPoolArn = __expectString(output["ipamPoolArn"]);
  }
  if (output["ipamScopeArn"] !== undefined) {
    contents.IpamScopeArn = __expectString(output["ipamScopeArn"]);
  }
  if (output["ipamScopeType"] !== undefined) {
    contents.IpamScopeType = __expectString(output["ipamScopeType"]);
  }
  if (output["ipamArn"] !== undefined) {
    contents.IpamArn = __expectString(output["ipamArn"]);
  }
  if (output["ipamRegion"] !== undefined) {
    contents.IpamRegion = __expectString(output["ipamRegion"]);
  }
  if (output["locale"] !== undefined) {
    contents.Locale = __expectString(output["locale"]);
  }
  if (output["poolDepth"] !== undefined) {
    contents.PoolDepth = __strictParseInt32(output["poolDepth"]) as number;
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["stateMessage"] !== undefined) {
    contents.StateMessage = __expectString(output["stateMessage"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["autoImport"] !== undefined) {
    contents.AutoImport = __parseBoolean(output["autoImport"]);
  }
  if (output["publiclyAdvertisable"] !== undefined) {
    contents.PubliclyAdvertisable = __parseBoolean(output["publiclyAdvertisable"]);
  }
  if (output["addressFamily"] !== undefined) {
    contents.AddressFamily = __expectString(output["addressFamily"]);
  }
  if (output["allocationMinNetmaskLength"] !== undefined) {
    contents.AllocationMinNetmaskLength = __strictParseInt32(output["allocationMinNetmaskLength"]) as number;
  }
  if (output["allocationMaxNetmaskLength"] !== undefined) {
    contents.AllocationMaxNetmaskLength = __strictParseInt32(output["allocationMaxNetmaskLength"]) as number;
  }
  if (output["allocationDefaultNetmaskLength"] !== undefined) {
    contents.AllocationDefaultNetmaskLength = __strictParseInt32(output["allocationDefaultNetmaskLength"]) as number;
  }
  if (output.allocationResourceTagSet === "") {
    contents.AllocationResourceTags = [];
  } else if (
    output["allocationResourceTagSet"] !== undefined &&
    output["allocationResourceTagSet"]["item"] !== undefined
  ) {
    contents.AllocationResourceTags = de_IpamResourceTagList(
      __getArrayIfSingleItem(output["allocationResourceTagSet"]["item"]),
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["awsService"] !== undefined) {
    contents.AwsService = __expectString(output["awsService"]);
  }
  if (output["publicIpSource"] !== undefined) {
    contents.PublicIpSource = __expectString(output["publicIpSource"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamPoolAllocation
 */
const de_IpamPoolAllocation = (output: any, context: __SerdeContext): IpamPoolAllocation => {
  const contents: any = {};
  if (output["cidr"] !== undefined) {
    contents.Cidr = __expectString(output["cidr"]);
  }
  if (output["ipamPoolAllocationId"] !== undefined) {
    contents.IpamPoolAllocationId = __expectString(output["ipamPoolAllocationId"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["resourceRegion"] !== undefined) {
    contents.ResourceRegion = __expectString(output["resourceRegion"]);
  }
  if (output["resourceOwner"] !== undefined) {
    contents.ResourceOwner = __expectString(output["resourceOwner"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamPoolAllocationSet
 */
const de_IpamPoolAllocationSet = (output: any, context: __SerdeContext): IpamPoolAllocation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamPoolAllocation(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamPoolCidr
 */
const de_IpamPoolCidr = (output: any, context: __SerdeContext): IpamPoolCidr => {
  const contents: any = {};
  if (output["cidr"] !== undefined) {
    contents.Cidr = __expectString(output["cidr"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["failureReason"] !== undefined) {
    contents.FailureReason = de_IpamPoolCidrFailureReason(output["failureReason"], context);
  }
  if (output["ipamPoolCidrId"] !== undefined) {
    contents.IpamPoolCidrId = __expectString(output["ipamPoolCidrId"]);
  }
  if (output["netmaskLength"] !== undefined) {
    contents.NetmaskLength = __strictParseInt32(output["netmaskLength"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamPoolCidrFailureReason
 */
const de_IpamPoolCidrFailureReason = (output: any, context: __SerdeContext): IpamPoolCidrFailureReason => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamPoolCidrSet
 */
const de_IpamPoolCidrSet = (output: any, context: __SerdeContext): IpamPoolCidr[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamPoolCidr(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamPoolSet
 */
const de_IpamPoolSet = (output: any, context: __SerdeContext): IpamPool[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamPool(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamResourceCidr
 */
const de_IpamResourceCidr = (output: any, context: __SerdeContext): IpamResourceCidr => {
  const contents: any = {};
  if (output["ipamId"] !== undefined) {
    contents.IpamId = __expectString(output["ipamId"]);
  }
  if (output["ipamScopeId"] !== undefined) {
    contents.IpamScopeId = __expectString(output["ipamScopeId"]);
  }
  if (output["ipamPoolId"] !== undefined) {
    contents.IpamPoolId = __expectString(output["ipamPoolId"]);
  }
  if (output["resourceRegion"] !== undefined) {
    contents.ResourceRegion = __expectString(output["resourceRegion"]);
  }
  if (output["resourceOwnerId"] !== undefined) {
    contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceName"] !== undefined) {
    contents.ResourceName = __expectString(output["resourceName"]);
  }
  if (output["resourceCidr"] !== undefined) {
    contents.ResourceCidr = __expectString(output["resourceCidr"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output.resourceTagSet === "") {
    contents.ResourceTags = [];
  } else if (output["resourceTagSet"] !== undefined && output["resourceTagSet"]["item"] !== undefined) {
    contents.ResourceTags = de_IpamResourceTagList(__getArrayIfSingleItem(output["resourceTagSet"]["item"]), context);
  }
  if (output["ipUsage"] !== undefined) {
    contents.IpUsage = __strictParseFloat(output["ipUsage"]) as number;
  }
  if (output["complianceStatus"] !== undefined) {
    contents.ComplianceStatus = __expectString(output["complianceStatus"]);
  }
  if (output["managementState"] !== undefined) {
    contents.ManagementState = __expectString(output["managementState"]);
  }
  if (output["overlapStatus"] !== undefined) {
    contents.OverlapStatus = __expectString(output["overlapStatus"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamResourceCidrSet
 */
const de_IpamResourceCidrSet = (output: any, context: __SerdeContext): IpamResourceCidr[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamResourceCidr(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamResourceDiscovery
 */
const de_IpamResourceDiscovery = (output: any, context: __SerdeContext): IpamResourceDiscovery => {
  const contents: any = {};
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["ipamResourceDiscoveryId"] !== undefined) {
    contents.IpamResourceDiscoveryId = __expectString(output["ipamResourceDiscoveryId"]);
  }
  if (output["ipamResourceDiscoveryArn"] !== undefined) {
    contents.IpamResourceDiscoveryArn = __expectString(output["ipamResourceDiscoveryArn"]);
  }
  if (output["ipamResourceDiscoveryRegion"] !== undefined) {
    contents.IpamResourceDiscoveryRegion = __expectString(output["ipamResourceDiscoveryRegion"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output.operatingRegionSet === "") {
    contents.OperatingRegions = [];
  } else if (output["operatingRegionSet"] !== undefined && output["operatingRegionSet"]["item"] !== undefined) {
    contents.OperatingRegions = de_IpamOperatingRegionSet(
      __getArrayIfSingleItem(output["operatingRegionSet"]["item"]),
      context
    );
  }
  if (output["isDefault"] !== undefined) {
    contents.IsDefault = __parseBoolean(output["isDefault"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamResourceDiscoveryAssociation
 */
const de_IpamResourceDiscoveryAssociation = (
  output: any,
  context: __SerdeContext
): IpamResourceDiscoveryAssociation => {
  const contents: any = {};
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["ipamResourceDiscoveryAssociationId"] !== undefined) {
    contents.IpamResourceDiscoveryAssociationId = __expectString(output["ipamResourceDiscoveryAssociationId"]);
  }
  if (output["ipamResourceDiscoveryAssociationArn"] !== undefined) {
    contents.IpamResourceDiscoveryAssociationArn = __expectString(output["ipamResourceDiscoveryAssociationArn"]);
  }
  if (output["ipamResourceDiscoveryId"] !== undefined) {
    contents.IpamResourceDiscoveryId = __expectString(output["ipamResourceDiscoveryId"]);
  }
  if (output["ipamId"] !== undefined) {
    contents.IpamId = __expectString(output["ipamId"]);
  }
  if (output["ipamArn"] !== undefined) {
    contents.IpamArn = __expectString(output["ipamArn"]);
  }
  if (output["ipamRegion"] !== undefined) {
    contents.IpamRegion = __expectString(output["ipamRegion"]);
  }
  if (output["isDefault"] !== undefined) {
    contents.IsDefault = __parseBoolean(output["isDefault"]);
  }
  if (output["resourceDiscoveryStatus"] !== undefined) {
    contents.ResourceDiscoveryStatus = __expectString(output["resourceDiscoveryStatus"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamResourceDiscoveryAssociationSet
 */
const de_IpamResourceDiscoveryAssociationSet = (
  output: any,
  context: __SerdeContext
): IpamResourceDiscoveryAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamResourceDiscoveryAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamResourceDiscoverySet
 */
const de_IpamResourceDiscoverySet = (output: any, context: __SerdeContext): IpamResourceDiscovery[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamResourceDiscovery(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamResourceTag
 */
const de_IpamResourceTag = (output: any, context: __SerdeContext): IpamResourceTag => {
  const contents: any = {};
  if (output["key"] !== undefined) {
    contents.Key = __expectString(output["key"]);
  }
  if (output["value"] !== undefined) {
    contents.Value = __expectString(output["value"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamResourceTagList
 */
const de_IpamResourceTagList = (output: any, context: __SerdeContext): IpamResourceTag[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamResourceTag(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamScope
 */
const de_IpamScope = (output: any, context: __SerdeContext): IpamScope => {
  const contents: any = {};
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["ipamScopeId"] !== undefined) {
    contents.IpamScopeId = __expectString(output["ipamScopeId"]);
  }
  if (output["ipamScopeArn"] !== undefined) {
    contents.IpamScopeArn = __expectString(output["ipamScopeArn"]);
  }
  if (output["ipamArn"] !== undefined) {
    contents.IpamArn = __expectString(output["ipamArn"]);
  }
  if (output["ipamRegion"] !== undefined) {
    contents.IpamRegion = __expectString(output["ipamRegion"]);
  }
  if (output["ipamScopeType"] !== undefined) {
    contents.IpamScopeType = __expectString(output["ipamScopeType"]);
  }
  if (output["isDefault"] !== undefined) {
    contents.IsDefault = __parseBoolean(output["isDefault"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["poolCount"] !== undefined) {
    contents.PoolCount = __strictParseInt32(output["poolCount"]) as number;
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamScopeSet
 */
const de_IpamScopeSet = (output: any, context: __SerdeContext): IpamScope[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamScope(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamSet
 */
const de_IpamSet = (output: any, context: __SerdeContext): Ipam[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipam(entry, context);
    });
};

/**
 * deserializeAws_ec2IpPermission
 */
const de_IpPermission = (output: any, context: __SerdeContext): IpPermission => {
  const contents: any = {};
  if (output["fromPort"] !== undefined) {
    contents.FromPort = __strictParseInt32(output["fromPort"]) as number;
  }
  if (output["ipProtocol"] !== undefined) {
    contents.IpProtocol = __expectString(output["ipProtocol"]);
  }
  if (output.ipRanges === "") {
    contents.IpRanges = [];
  } else if (output["ipRanges"] !== undefined && output["ipRanges"]["item"] !== undefined) {
    contents.IpRanges = de_IpRangeList(__getArrayIfSingleItem(output["ipRanges"]["item"]), context);
  }
  if (output.ipv6Ranges === "") {
    contents.Ipv6Ranges = [];
  } else if (output["ipv6Ranges"] !== undefined && output["ipv6Ranges"]["item"] !== undefined) {
    contents.Ipv6Ranges = de_Ipv6RangeList(__getArrayIfSingleItem(output["ipv6Ranges"]["item"]), context);
  }
  if (output.prefixListIds === "") {
    contents.PrefixListIds = [];
  } else if (output["prefixListIds"] !== undefined && output["prefixListIds"]["item"] !== undefined) {
    contents.PrefixListIds = de_PrefixListIdList(__getArrayIfSingleItem(output["prefixListIds"]["item"]), context);
  }
  if (output["toPort"] !== undefined) {
    contents.ToPort = __strictParseInt32(output["toPort"]) as number;
  }
  if (output.groups === "") {
    contents.UserIdGroupPairs = [];
  } else if (output["groups"] !== undefined && output["groups"]["item"] !== undefined) {
    contents.UserIdGroupPairs = de_UserIdGroupPairList(__getArrayIfSingleItem(output["groups"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpPermissionList
 */
const de_IpPermissionList = (output: any, context: __SerdeContext): IpPermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpPermission(entry, context);
    });
};

/**
 * deserializeAws_ec2IpPrefixList
 */
const de_IpPrefixList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2IpRange
 */
const de_IpRange = (output: any, context: __SerdeContext): IpRange => {
  const contents: any = {};
  if (output["cidrIp"] !== undefined) {
    contents.CidrIp = __expectString(output["cidrIp"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpRangeList
 */
const de_IpRangeList = (output: any, context: __SerdeContext): IpRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpRange(entry, context);
    });
};

/**
 * deserializeAws_ec2IpRanges
 */
const de_IpRanges = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Ipv4PrefixesList
 */
const de_Ipv4PrefixesList = (output: any, context: __SerdeContext): Ipv4PrefixSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv4PrefixSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv4PrefixList
 */
const de_Ipv4PrefixList = (output: any, context: __SerdeContext): Ipv4PrefixSpecificationRequest[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv4PrefixSpecificationRequest(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv4PrefixListResponse
 */
const de_Ipv4PrefixListResponse = (output: any, context: __SerdeContext): Ipv4PrefixSpecificationResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv4PrefixSpecificationResponse(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv4PrefixSpecification
 */
const de_Ipv4PrefixSpecification = (output: any, context: __SerdeContext): Ipv4PrefixSpecification => {
  const contents: any = {};
  if (output["ipv4Prefix"] !== undefined) {
    contents.Ipv4Prefix = __expectString(output["ipv4Prefix"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv4PrefixSpecificationRequest
 */
const de_Ipv4PrefixSpecificationRequest = (output: any, context: __SerdeContext): Ipv4PrefixSpecificationRequest => {
  const contents: any = {};
  if (output["Ipv4Prefix"] !== undefined) {
    contents.Ipv4Prefix = __expectString(output["Ipv4Prefix"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv4PrefixSpecificationResponse
 */
const de_Ipv4PrefixSpecificationResponse = (output: any, context: __SerdeContext): Ipv4PrefixSpecificationResponse => {
  const contents: any = {};
  if (output["ipv4Prefix"] !== undefined) {
    contents.Ipv4Prefix = __expectString(output["ipv4Prefix"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6AddressList
 */
const de_Ipv6AddressList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Ipv6CidrAssociation
 */
const de_Ipv6CidrAssociation = (output: any, context: __SerdeContext): Ipv6CidrAssociation => {
  const contents: any = {};
  if (output["ipv6Cidr"] !== undefined) {
    contents.Ipv6Cidr = __expectString(output["ipv6Cidr"]);
  }
  if (output["associatedResource"] !== undefined) {
    contents.AssociatedResource = __expectString(output["associatedResource"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6CidrAssociationSet
 */
const de_Ipv6CidrAssociationSet = (output: any, context: __SerdeContext): Ipv6CidrAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6CidrAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv6CidrBlock
 */
const de_Ipv6CidrBlock = (output: any, context: __SerdeContext): Ipv6CidrBlock => {
  const contents: any = {};
  if (output["ipv6CidrBlock"] !== undefined) {
    contents.Ipv6CidrBlock = __expectString(output["ipv6CidrBlock"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6CidrBlockSet
 */
const de_Ipv6CidrBlockSet = (output: any, context: __SerdeContext): Ipv6CidrBlock[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6CidrBlock(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv6Pool
 */
const de_Ipv6Pool = (output: any, context: __SerdeContext): Ipv6Pool => {
  const contents: any = {};
  if (output["poolId"] !== undefined) {
    contents.PoolId = __expectString(output["poolId"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output.poolCidrBlockSet === "") {
    contents.PoolCidrBlocks = [];
  } else if (output["poolCidrBlockSet"] !== undefined && output["poolCidrBlockSet"]["item"] !== undefined) {
    contents.PoolCidrBlocks = de_PoolCidrBlocksSet(__getArrayIfSingleItem(output["poolCidrBlockSet"]["item"]), context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6PoolSet
 */
const de_Ipv6PoolSet = (output: any, context: __SerdeContext): Ipv6Pool[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6Pool(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv6PrefixesList
 */
const de_Ipv6PrefixesList = (output: any, context: __SerdeContext): Ipv6PrefixSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6PrefixSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv6PrefixList
 */
const de_Ipv6PrefixList = (output: any, context: __SerdeContext): Ipv6PrefixSpecificationRequest[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6PrefixSpecificationRequest(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv6PrefixListResponse
 */
const de_Ipv6PrefixListResponse = (output: any, context: __SerdeContext): Ipv6PrefixSpecificationResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6PrefixSpecificationResponse(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv6PrefixSpecification
 */
const de_Ipv6PrefixSpecification = (output: any, context: __SerdeContext): Ipv6PrefixSpecification => {
  const contents: any = {};
  if (output["ipv6Prefix"] !== undefined) {
    contents.Ipv6Prefix = __expectString(output["ipv6Prefix"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6PrefixSpecificationRequest
 */
const de_Ipv6PrefixSpecificationRequest = (output: any, context: __SerdeContext): Ipv6PrefixSpecificationRequest => {
  const contents: any = {};
  if (output["Ipv6Prefix"] !== undefined) {
    contents.Ipv6Prefix = __expectString(output["Ipv6Prefix"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6PrefixSpecificationResponse
 */
const de_Ipv6PrefixSpecificationResponse = (output: any, context: __SerdeContext): Ipv6PrefixSpecificationResponse => {
  const contents: any = {};
  if (output["ipv6Prefix"] !== undefined) {
    contents.Ipv6Prefix = __expectString(output["ipv6Prefix"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6Range
 */
const de_Ipv6Range = (output: any, context: __SerdeContext): Ipv6Range => {
  const contents: any = {};
  if (output["cidrIpv6"] !== undefined) {
    contents.CidrIpv6 = __expectString(output["cidrIpv6"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6RangeList
 */
const de_Ipv6RangeList = (output: any, context: __SerdeContext): Ipv6Range[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6Range(entry, context);
    });
};

/**
 * deserializeAws_ec2KeyPair
 */
const de_KeyPair = (output: any, context: __SerdeContext): KeyPair => {
  const contents: any = {};
  if (output["keyFingerprint"] !== undefined) {
    contents.KeyFingerprint = __expectString(output["keyFingerprint"]);
  }
  if (output["keyMaterial"] !== undefined) {
    contents.KeyMaterial = __expectString(output["keyMaterial"]);
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = __expectString(output["keyName"]);
  }
  if (output["keyPairId"] !== undefined) {
    contents.KeyPairId = __expectString(output["keyPairId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2KeyPairInfo
 */
const de_KeyPairInfo = (output: any, context: __SerdeContext): KeyPairInfo => {
  const contents: any = {};
  if (output["keyPairId"] !== undefined) {
    contents.KeyPairId = __expectString(output["keyPairId"]);
  }
  if (output["keyFingerprint"] !== undefined) {
    contents.KeyFingerprint = __expectString(output["keyFingerprint"]);
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = __expectString(output["keyName"]);
  }
  if (output["keyType"] !== undefined) {
    contents.KeyType = __expectString(output["keyType"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["publicKey"] !== undefined) {
    contents.PublicKey = __expectString(output["publicKey"]);
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2KeyPairList
 */
const de_KeyPairList = (output: any, context: __SerdeContext): KeyPairInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_KeyPairInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2LastError
 */
const de_LastError = (output: any, context: __SerdeContext): LastError => {
  const contents: any = {};
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchPermission
 */
const de_LaunchPermission = (output: any, context: __SerdeContext): LaunchPermission => {
  const contents: any = {};
  if (output["group"] !== undefined) {
    contents.Group = __expectString(output["group"]);
  }
  if (output["userId"] !== undefined) {
    contents.UserId = __expectString(output["userId"]);
  }
  if (output["organizationArn"] !== undefined) {
    contents.OrganizationArn = __expectString(output["organizationArn"]);
  }
  if (output["organizationalUnitArn"] !== undefined) {
    contents.OrganizationalUnitArn = __expectString(output["organizationalUnitArn"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchPermissionList
 */
const de_LaunchPermissionList = (output: any, context: __SerdeContext): LaunchPermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchPermission(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchSpecification
 */
const de_LaunchSpecification = (output: any, context: __SerdeContext): LaunchSpecification => {
  const contents: any = {};
  if (output["userData"] !== undefined) {
    contents.UserData = __expectString(output["userData"]);
  }
  if (output.groupSet === "") {
    contents.SecurityGroups = [];
  } else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.SecurityGroups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
  }
  if (output["addressingType"] !== undefined) {
    contents.AddressingType = __expectString(output["addressingType"]);
  }
  if (output.blockDeviceMapping === "") {
    contents.BlockDeviceMappings = [];
  } else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
    contents.BlockDeviceMappings = de_BlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMapping"]["item"]),
      context
    );
  }
  if (output["ebsOptimized"] !== undefined) {
    contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
  }
  if (output["iamInstanceProfile"] !== undefined) {
    contents.IamInstanceProfile = de_IamInstanceProfileSpecification(output["iamInstanceProfile"], context);
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["kernelId"] !== undefined) {
    contents.KernelId = __expectString(output["kernelId"]);
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = __expectString(output["keyName"]);
  }
  if (output.networkInterfaceSet === "") {
    contents.NetworkInterfaces = [];
  } else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
    contents.NetworkInterfaces = de_InstanceNetworkInterfaceSpecificationList(
      __getArrayIfSingleItem(output["networkInterfaceSet"]["item"]),
      context
    );
  }
  if (output["placement"] !== undefined) {
    contents.Placement = de_SpotPlacement(output["placement"], context);
  }
  if (output["ramdiskId"] !== undefined) {
    contents.RamdiskId = __expectString(output["ramdiskId"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["monitoring"] !== undefined) {
    contents.Monitoring = de_RunInstancesMonitoringEnabled(output["monitoring"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchSpecsList
 */
const de_LaunchSpecsList = (output: any, context: __SerdeContext): SpotFleetLaunchSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SpotFleetLaunchSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplate
 */
const de_LaunchTemplate = (output: any, context: __SerdeContext): LaunchTemplate => {
  const contents: any = {};
  if (output["launchTemplateId"] !== undefined) {
    contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
  }
  if (output["launchTemplateName"] !== undefined) {
    contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
  }
  if (output["createdBy"] !== undefined) {
    contents.CreatedBy = __expectString(output["createdBy"]);
  }
  if (output["defaultVersionNumber"] !== undefined) {
    contents.DefaultVersionNumber = __strictParseLong(output["defaultVersionNumber"]) as number;
  }
  if (output["latestVersionNumber"] !== undefined) {
    contents.LatestVersionNumber = __strictParseLong(output["latestVersionNumber"]) as number;
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateAndOverridesResponse
 */
const de_LaunchTemplateAndOverridesResponse = (
  output: any,
  context: __SerdeContext
): LaunchTemplateAndOverridesResponse => {
  const contents: any = {};
  if (output["launchTemplateSpecification"] !== undefined) {
    contents.LaunchTemplateSpecification = de_FleetLaunchTemplateSpecification(
      output["launchTemplateSpecification"],
      context
    );
  }
  if (output["overrides"] !== undefined) {
    contents.Overrides = de_FleetLaunchTemplateOverrides(output["overrides"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateBlockDeviceMapping
 */
const de_LaunchTemplateBlockDeviceMapping = (
  output: any,
  context: __SerdeContext
): LaunchTemplateBlockDeviceMapping => {
  const contents: any = {};
  if (output["deviceName"] !== undefined) {
    contents.DeviceName = __expectString(output["deviceName"]);
  }
  if (output["virtualName"] !== undefined) {
    contents.VirtualName = __expectString(output["virtualName"]);
  }
  if (output["ebs"] !== undefined) {
    contents.Ebs = de_LaunchTemplateEbsBlockDevice(output["ebs"], context);
  }
  if (output["noDevice"] !== undefined) {
    contents.NoDevice = __expectString(output["noDevice"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateBlockDeviceMappingList
 */
const de_LaunchTemplateBlockDeviceMappingList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateBlockDeviceMapping[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateBlockDeviceMapping(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplateCapacityReservationSpecificationResponse
 */
const de_LaunchTemplateCapacityReservationSpecificationResponse = (
  output: any,
  context: __SerdeContext
): LaunchTemplateCapacityReservationSpecificationResponse => {
  const contents: any = {};
  if (output["capacityReservationPreference"] !== undefined) {
    contents.CapacityReservationPreference = __expectString(output["capacityReservationPreference"]);
  }
  if (output["capacityReservationTarget"] !== undefined) {
    contents.CapacityReservationTarget = de_CapacityReservationTargetResponse(
      output["capacityReservationTarget"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateConfig
 */
const de_LaunchTemplateConfig = (output: any, context: __SerdeContext): LaunchTemplateConfig => {
  const contents: any = {};
  if (output["launchTemplateSpecification"] !== undefined) {
    contents.LaunchTemplateSpecification = de_FleetLaunchTemplateSpecification(
      output["launchTemplateSpecification"],
      context
    );
  }
  if (output.overrides === "") {
    contents.Overrides = [];
  } else if (output["overrides"] !== undefined && output["overrides"]["item"] !== undefined) {
    contents.Overrides = de_LaunchTemplateOverridesList(__getArrayIfSingleItem(output["overrides"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateConfigList
 */
const de_LaunchTemplateConfigList = (output: any, context: __SerdeContext): LaunchTemplateConfig[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateConfig(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplateCpuOptions
 */
const de_LaunchTemplateCpuOptions = (output: any, context: __SerdeContext): LaunchTemplateCpuOptions => {
  const contents: any = {};
  if (output["coreCount"] !== undefined) {
    contents.CoreCount = __strictParseInt32(output["coreCount"]) as number;
  }
  if (output["threadsPerCore"] !== undefined) {
    contents.ThreadsPerCore = __strictParseInt32(output["threadsPerCore"]) as number;
  }
  if (output["amdSevSnp"] !== undefined) {
    contents.AmdSevSnp = __expectString(output["amdSevSnp"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateEbsBlockDevice
 */
const de_LaunchTemplateEbsBlockDevice = (output: any, context: __SerdeContext): LaunchTemplateEbsBlockDevice => {
  const contents: any = {};
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = __parseBoolean(output["encrypted"]);
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
  }
  if (output["iops"] !== undefined) {
    contents.Iops = __strictParseInt32(output["iops"]) as number;
  }
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = __expectString(output["kmsKeyId"]);
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["volumeSize"] !== undefined) {
    contents.VolumeSize = __strictParseInt32(output["volumeSize"]) as number;
  }
  if (output["volumeType"] !== undefined) {
    contents.VolumeType = __expectString(output["volumeType"]);
  }
  if (output["throughput"] !== undefined) {
    contents.Throughput = __strictParseInt32(output["throughput"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponse
 */
const de_LaunchTemplateElasticInferenceAcceleratorResponse = (
  output: any,
  context: __SerdeContext
): LaunchTemplateElasticInferenceAcceleratorResponse => {
  const contents: any = {};
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  if (output["count"] !== undefined) {
    contents.Count = __strictParseInt32(output["count"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponseList
 */
const de_LaunchTemplateElasticInferenceAcceleratorResponseList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateElasticInferenceAcceleratorResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateElasticInferenceAcceleratorResponse(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplateEnclaveOptions
 */
const de_LaunchTemplateEnclaveOptions = (output: any, context: __SerdeContext): LaunchTemplateEnclaveOptions => {
  const contents: any = {};
  if (output["enabled"] !== undefined) {
    contents.Enabled = __parseBoolean(output["enabled"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateHibernationOptions
 */
const de_LaunchTemplateHibernationOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplateHibernationOptions => {
  const contents: any = {};
  if (output["configured"] !== undefined) {
    contents.Configured = __parseBoolean(output["configured"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateIamInstanceProfileSpecification
 */
const de_LaunchTemplateIamInstanceProfileSpecification = (
  output: any,
  context: __SerdeContext
): LaunchTemplateIamInstanceProfileSpecification => {
  const contents: any = {};
  if (output["arn"] !== undefined) {
    contents.Arn = __expectString(output["arn"]);
  }
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateInstanceMaintenanceOptions
 */
const de_LaunchTemplateInstanceMaintenanceOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceMaintenanceOptions => {
  const contents: any = {};
  if (output["autoRecovery"] !== undefined) {
    contents.AutoRecovery = __expectString(output["autoRecovery"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateInstanceMarketOptions
 */
const de_LaunchTemplateInstanceMarketOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceMarketOptions => {
  const contents: any = {};
  if (output["marketType"] !== undefined) {
    contents.MarketType = __expectString(output["marketType"]);
  }
  if (output["spotOptions"] !== undefined) {
    contents.SpotOptions = de_LaunchTemplateSpotMarketOptions(output["spotOptions"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateInstanceMetadataOptions
 */
const de_LaunchTemplateInstanceMetadataOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceMetadataOptions => {
  const contents: any = {};
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["httpTokens"] !== undefined) {
    contents.HttpTokens = __expectString(output["httpTokens"]);
  }
  if (output["httpPutResponseHopLimit"] !== undefined) {
    contents.HttpPutResponseHopLimit = __strictParseInt32(output["httpPutResponseHopLimit"]) as number;
  }
  if (output["httpEndpoint"] !== undefined) {
    contents.HttpEndpoint = __expectString(output["httpEndpoint"]);
  }
  if (output["httpProtocolIpv6"] !== undefined) {
    contents.HttpProtocolIpv6 = __expectString(output["httpProtocolIpv6"]);
  }
  if (output["instanceMetadataTags"] !== undefined) {
    contents.InstanceMetadataTags = __expectString(output["instanceMetadataTags"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecification
 */
const de_LaunchTemplateInstanceNetworkInterfaceSpecification = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceNetworkInterfaceSpecification => {
  const contents: any = {};
  if (output["associateCarrierIpAddress"] !== undefined) {
    contents.AssociateCarrierIpAddress = __parseBoolean(output["associateCarrierIpAddress"]);
  }
  if (output["associatePublicIpAddress"] !== undefined) {
    contents.AssociatePublicIpAddress = __parseBoolean(output["associatePublicIpAddress"]);
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["deviceIndex"] !== undefined) {
    contents.DeviceIndex = __strictParseInt32(output["deviceIndex"]) as number;
  }
  if (output.groupSet === "") {
    contents.Groups = [];
  } else if (output["groupSet"] !== undefined && output["groupSet"]["groupId"] !== undefined) {
    contents.Groups = de_GroupIdStringList(__getArrayIfSingleItem(output["groupSet"]["groupId"]), context);
  }
  if (output["interfaceType"] !== undefined) {
    contents.InterfaceType = __expectString(output["interfaceType"]);
  }
  if (output["ipv6AddressCount"] !== undefined) {
    contents.Ipv6AddressCount = __strictParseInt32(output["ipv6AddressCount"]) as number;
  }
  if (output.ipv6AddressesSet === "") {
    contents.Ipv6Addresses = [];
  } else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
    contents.Ipv6Addresses = de_InstanceIpv6AddressList(
      __getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]),
      context
    );
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
  }
  if (output.privateIpAddressesSet === "") {
    contents.PrivateIpAddresses = [];
  } else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
    contents.PrivateIpAddresses = de_PrivateIpAddressSpecificationList(
      __getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]),
      context
    );
  }
  if (output["secondaryPrivateIpAddressCount"] !== undefined) {
    contents.SecondaryPrivateIpAddressCount = __strictParseInt32(output["secondaryPrivateIpAddressCount"]) as number;
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["networkCardIndex"] !== undefined) {
    contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]) as number;
  }
  if (output.ipv4PrefixSet === "") {
    contents.Ipv4Prefixes = [];
  } else if (output["ipv4PrefixSet"] !== undefined && output["ipv4PrefixSet"]["item"] !== undefined) {
    contents.Ipv4Prefixes = de_Ipv4PrefixListResponse(__getArrayIfSingleItem(output["ipv4PrefixSet"]["item"]), context);
  }
  if (output["ipv4PrefixCount"] !== undefined) {
    contents.Ipv4PrefixCount = __strictParseInt32(output["ipv4PrefixCount"]) as number;
  }
  if (output.ipv6PrefixSet === "") {
    contents.Ipv6Prefixes = [];
  } else if (output["ipv6PrefixSet"] !== undefined && output["ipv6PrefixSet"]["item"] !== undefined) {
    contents.Ipv6Prefixes = de_Ipv6PrefixListResponse(__getArrayIfSingleItem(output["ipv6PrefixSet"]["item"]), context);
  }
  if (output["ipv6PrefixCount"] !== undefined) {
    contents.Ipv6PrefixCount = __strictParseInt32(output["ipv6PrefixCount"]) as number;
  }
  if (output["primaryIpv6"] !== undefined) {
    contents.PrimaryIpv6 = __parseBoolean(output["primaryIpv6"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationList
 */
const de_LaunchTemplateInstanceNetworkInterfaceSpecificationList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceNetworkInterfaceSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateInstanceNetworkInterfaceSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplateLicenseConfiguration
 */
const de_LaunchTemplateLicenseConfiguration = (
  output: any,
  context: __SerdeContext
): LaunchTemplateLicenseConfiguration => {
  const contents: any = {};
  if (output["licenseConfigurationArn"] !== undefined) {
    contents.LicenseConfigurationArn = __expectString(output["licenseConfigurationArn"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateLicenseList
 */
const de_LaunchTemplateLicenseList = (output: any, context: __SerdeContext): LaunchTemplateLicenseConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateLicenseConfiguration(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplateOverrides
 */
const de_LaunchTemplateOverrides = (output: any, context: __SerdeContext): LaunchTemplateOverrides => {
  const contents: any = {};
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["spotPrice"] !== undefined) {
    contents.SpotPrice = __expectString(output["spotPrice"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["weightedCapacity"] !== undefined) {
    contents.WeightedCapacity = __strictParseFloat(output["weightedCapacity"]) as number;
  }
  if (output["priority"] !== undefined) {
    contents.Priority = __strictParseFloat(output["priority"]) as number;
  }
  if (output["instanceRequirements"] !== undefined) {
    contents.InstanceRequirements = de_InstanceRequirements(output["instanceRequirements"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateOverridesList
 */
const de_LaunchTemplateOverridesList = (output: any, context: __SerdeContext): LaunchTemplateOverrides[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateOverrides(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplatePlacement
 */
const de_LaunchTemplatePlacement = (output: any, context: __SerdeContext): LaunchTemplatePlacement => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["affinity"] !== undefined) {
    contents.Affinity = __expectString(output["affinity"]);
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = __expectString(output["groupName"]);
  }
  if (output["hostId"] !== undefined) {
    contents.HostId = __expectString(output["hostId"]);
  }
  if (output["tenancy"] !== undefined) {
    contents.Tenancy = __expectString(output["tenancy"]);
  }
  if (output["spreadDomain"] !== undefined) {
    contents.SpreadDomain = __expectString(output["spreadDomain"]);
  }
  if (output["hostResourceGroupArn"] !== undefined) {
    contents.HostResourceGroupArn = __expectString(output["hostResourceGroupArn"]);
  }
  if (output["partitionNumber"] !== undefined) {
    contents.PartitionNumber = __strictParseInt32(output["partitionNumber"]) as number;
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = __expectString(output["groupId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplatePrivateDnsNameOptions
 */
const de_LaunchTemplatePrivateDnsNameOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplatePrivateDnsNameOptions => {
  const contents: any = {};
  if (output["hostnameType"] !== undefined) {
    contents.HostnameType = __expectString(output["hostnameType"]);
  }
  if (output["enableResourceNameDnsARecord"] !== undefined) {
    contents.EnableResourceNameDnsARecord = __parseBoolean(output["enableResourceNameDnsARecord"]);
  }
  if (output["enableResourceNameDnsAAAARecord"] !== undefined) {
    contents.EnableResourceNameDnsAAAARecord = __parseBoolean(output["enableResourceNameDnsAAAARecord"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateSet
 */
const de_LaunchTemplateSet = (output: any, context: __SerdeContext): LaunchTemplate[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplate(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplatesMonitoring
 */
const de_LaunchTemplatesMonitoring = (output: any, context: __SerdeContext): LaunchTemplatesMonitoring => {
  const contents: any = {};
  if (output["enabled"] !== undefined) {
    contents.Enabled = __parseBoolean(output["enabled"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateSpotMarketOptions
 */
const de_LaunchTemplateSpotMarketOptions = (output: any, context: __SerdeContext): LaunchTemplateSpotMarketOptions => {
  const contents: any = {};
  if (output["maxPrice"] !== undefined) {
    contents.MaxPrice = __expectString(output["maxPrice"]);
  }
  if (output["spotInstanceType"] !== undefined) {
    contents.SpotInstanceType = __expectString(output["spotInstanceType"]);
  }
  if (output["blockDurationMinutes"] !== undefined) {
    contents.BlockDurationMinutes = __strictParseInt32(output["blockDurationMinutes"]) as number;
  }
  if (output["validUntil"] !== undefined) {
    contents.ValidUntil = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validUntil"]));
  }
  if (output["instanceInterruptionBehavior"] !== undefined) {
    contents.InstanceInterruptionBehavior = __expectString(output["instanceInterruptionBehavior"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateTagSpecification
 */
const de_LaunchTemplateTagSpecification = (output: any, context: __SerdeContext): LaunchTemplateTagSpecification => {
  const contents: any = {};
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateTagSpecificationList
 */
const de_LaunchTemplateTagSpecificationList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateTagSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateTagSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplateVersion
 */
const de_LaunchTemplateVersion = (output: any, context: __SerdeContext): LaunchTemplateVersion => {
  const contents: any = {};
  if (output["launchTemplateId"] !== undefined) {
    contents.LaunchTemplateId = __expectString(output["launchTemplateId"]);
  }
  if (output["launchTemplateName"] !== undefined) {
    contents.LaunchTemplateName = __expectString(output["launchTemplateName"]);
  }
  if (output["versionNumber"] !== undefined) {
    contents.VersionNumber = __strictParseLong(output["versionNumber"]) as number;
  }
  if (output["versionDescription"] !== undefined) {
    contents.VersionDescription = __expectString(output["versionDescription"]);
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
  }
  if (output["createdBy"] !== undefined) {
    contents.CreatedBy = __expectString(output["createdBy"]);
  }
  if (output["defaultVersion"] !== undefined) {
    contents.DefaultVersion = __parseBoolean(output["defaultVersion"]);
  }
  if (output["launchTemplateData"] !== undefined) {
    contents.LaunchTemplateData = de_ResponseLaunchTemplateData(output["launchTemplateData"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateVersionSet
 */
const de_LaunchTemplateVersionSet = (output: any, context: __SerdeContext): LaunchTemplateVersion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateVersion(entry, context);
    });
};

/**
 * deserializeAws_ec2LicenseConfiguration
 */
const de_LicenseConfiguration = (output: any, context: __SerdeContext): LicenseConfiguration => {
  const contents: any = {};
  if (output["licenseConfigurationArn"] !== undefined) {
    contents.LicenseConfigurationArn = __expectString(output["licenseConfigurationArn"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LicenseList
 */
const de_LicenseList = (output: any, context: __SerdeContext): LicenseConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LicenseConfiguration(entry, context);
    });
};

/**
 * deserializeAws_ec2ListImagesInRecycleBinResult
 */
const de_ListImagesInRecycleBinResult = (output: any, context: __SerdeContext): ListImagesInRecycleBinResult => {
  const contents: any = {};
  if (output.imageSet === "") {
    contents.Images = [];
  } else if (output["imageSet"] !== undefined && output["imageSet"]["item"] !== undefined) {
    contents.Images = de_ImageRecycleBinInfoList(__getArrayIfSingleItem(output["imageSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ListSnapshotsInRecycleBinResult
 */
const de_ListSnapshotsInRecycleBinResult = (output: any, context: __SerdeContext): ListSnapshotsInRecycleBinResult => {
  const contents: any = {};
  if (output.snapshotSet === "") {
    contents.Snapshots = [];
  } else if (output["snapshotSet"] !== undefined && output["snapshotSet"]["item"] !== undefined) {
    contents.Snapshots = de_SnapshotRecycleBinInfoList(__getArrayIfSingleItem(output["snapshotSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LoadBalancersConfig
 */
const de_LoadBalancersConfig = (output: any, context: __SerdeContext): LoadBalancersConfig => {
  const contents: any = {};
  if (output["classicLoadBalancersConfig"] !== undefined) {
    contents.ClassicLoadBalancersConfig = de_ClassicLoadBalancersConfig(output["classicLoadBalancersConfig"], context);
  }
  if (output["targetGroupsConfig"] !== undefined) {
    contents.TargetGroupsConfig = de_TargetGroupsConfig(output["targetGroupsConfig"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LoadPermission
 */
const de_LoadPermission = (output: any, context: __SerdeContext): LoadPermission => {
  const contents: any = {};
  if (output["userId"] !== undefined) {
    contents.UserId = __expectString(output["userId"]);
  }
  if (output["group"] !== undefined) {
    contents.Group = __expectString(output["group"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LoadPermissionList
 */
const de_LoadPermissionList = (output: any, context: __SerdeContext): LoadPermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LoadPermission(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGateway
 */
const de_LocalGateway = (output: any, context: __SerdeContext): LocalGateway => {
  const contents: any = {};
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = __expectString(output["localGatewayId"]);
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayRoute
 */
const de_LocalGatewayRoute = (output: any, context: __SerdeContext): LocalGatewayRoute => {
  const contents: any = {};
  if (output["destinationCidrBlock"] !== undefined) {
    contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
  }
  if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
    contents.LocalGatewayVirtualInterfaceGroupId = __expectString(output["localGatewayVirtualInterfaceGroupId"]);
  }
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["localGatewayRouteTableId"] !== undefined) {
    contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
  }
  if (output["localGatewayRouteTableArn"] !== undefined) {
    contents.LocalGatewayRouteTableArn = __expectString(output["localGatewayRouteTableArn"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["coipPoolId"] !== undefined) {
    contents.CoipPoolId = __expectString(output["coipPoolId"]);
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["destinationPrefixListId"] !== undefined) {
    contents.DestinationPrefixListId = __expectString(output["destinationPrefixListId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayRouteList
 */
const de_LocalGatewayRouteList = (output: any, context: __SerdeContext): LocalGatewayRoute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGatewayRoute(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGatewayRouteTable
 */
const de_LocalGatewayRouteTable = (output: any, context: __SerdeContext): LocalGatewayRouteTable => {
  const contents: any = {};
  if (output["localGatewayRouteTableId"] !== undefined) {
    contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
  }
  if (output["localGatewayRouteTableArn"] !== undefined) {
    contents.LocalGatewayRouteTableArn = __expectString(output["localGatewayRouteTableArn"]);
  }
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = __expectString(output["localGatewayId"]);
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["mode"] !== undefined) {
    contents.Mode = __expectString(output["mode"]);
  }
  if (output["stateReason"] !== undefined) {
    contents.StateReason = de_StateReason(output["stateReason"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayRouteTableSet
 */
const de_LocalGatewayRouteTableSet = (output: any, context: __SerdeContext): LocalGatewayRouteTable[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGatewayRouteTable(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation
 */
const de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation = (
  output: any,
  context: __SerdeContext
): LocalGatewayRouteTableVirtualInterfaceGroupAssociation => {
  const contents: any = {};
  if (output["localGatewayRouteTableVirtualInterfaceGroupAssociationId"] !== undefined) {
    contents.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId = __expectString(
      output["localGatewayRouteTableVirtualInterfaceGroupAssociationId"]
    );
  }
  if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
    contents.LocalGatewayVirtualInterfaceGroupId = __expectString(output["localGatewayVirtualInterfaceGroupId"]);
  }
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = __expectString(output["localGatewayId"]);
  }
  if (output["localGatewayRouteTableId"] !== undefined) {
    contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
  }
  if (output["localGatewayRouteTableArn"] !== undefined) {
    contents.LocalGatewayRouteTableArn = __expectString(output["localGatewayRouteTableArn"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet
 */
const de_LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet = (
  output: any,
  context: __SerdeContext
): LocalGatewayRouteTableVirtualInterfaceGroupAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGatewayRouteTableVpcAssociation
 */
const de_LocalGatewayRouteTableVpcAssociation = (
  output: any,
  context: __SerdeContext
): LocalGatewayRouteTableVpcAssociation => {
  const contents: any = {};
  if (output["localGatewayRouteTableVpcAssociationId"] !== undefined) {
    contents.LocalGatewayRouteTableVpcAssociationId = __expectString(output["localGatewayRouteTableVpcAssociationId"]);
  }
  if (output["localGatewayRouteTableId"] !== undefined) {
    contents.LocalGatewayRouteTableId = __expectString(output["localGatewayRouteTableId"]);
  }
  if (output["localGatewayRouteTableArn"] !== undefined) {
    contents.LocalGatewayRouteTableArn = __expectString(output["localGatewayRouteTableArn"]);
  }
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = __expectString(output["localGatewayId"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayRouteTableVpcAssociationSet
 */
const de_LocalGatewayRouteTableVpcAssociationSet = (
  output: any,
  context: __SerdeContext
): LocalGatewayRouteTableVpcAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGatewayRouteTableVpcAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGatewaySet
 */
const de_LocalGatewaySet = (output: any, context: __SerdeContext): LocalGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGatewayVirtualInterface
 */
const de_LocalGatewayVirtualInterface = (output: any, context: __SerdeContext): LocalGatewayVirtualInterface => {
  const contents: any = {};
  if (output["localGatewayVirtualInterfaceId"] !== undefined) {
    contents.LocalGatewayVirtualInterfaceId = __expectString(output["localGatewayVirtualInterfaceId"]);
  }
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = __expectString(output["localGatewayId"]);
  }
  if (output["vlan"] !== undefined) {
    contents.Vlan = __strictParseInt32(output["vlan"]) as number;
  }
  if (output["localAddress"] !== undefined) {
    contents.LocalAddress = __expectString(output["localAddress"]);
  }
  if (output["peerAddress"] !== undefined) {
    contents.PeerAddress = __expectString(output["peerAddress"]);
  }
  if (output["localBgpAsn"] !== undefined) {
    contents.LocalBgpAsn = __strictParseInt32(output["localBgpAsn"]) as number;
  }
  if (output["peerBgpAsn"] !== undefined) {
    contents.PeerBgpAsn = __strictParseInt32(output["peerBgpAsn"]) as number;
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayVirtualInterfaceGroup
 */
const de_LocalGatewayVirtualInterfaceGroup = (
  output: any,
  context: __SerdeContext
): LocalGatewayVirtualInterfaceGroup => {
  const contents: any = {};
  if (output["localGatewayVirtualInterfaceGroupId"] !== undefined) {
    contents.LocalGatewayVirtualInterfaceGroupId = __expectString(output["localGatewayVirtualInterfaceGroupId"]);
  }
  if (output.localGatewayVirtualInterfaceIdSet === "") {
    contents.LocalGatewayVirtualInterfaceIds = [];
  } else if (
    output["localGatewayVirtualInterfaceIdSet"] !== undefined &&
    output["localGatewayVirtualInterfaceIdSet"]["item"] !== undefined
  ) {
    contents.LocalGatewayVirtualInterfaceIds = de_LocalGatewayVirtualInterfaceIdSet(
      __getArrayIfSingleItem(output["localGatewayVirtualInterfaceIdSet"]["item"]),
      context
    );
  }
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = __expectString(output["localGatewayId"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayVirtualInterfaceGroupSet
 */
const de_LocalGatewayVirtualInterfaceGroupSet = (
  output: any,
  context: __SerdeContext
): LocalGatewayVirtualInterfaceGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGatewayVirtualInterfaceGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGatewayVirtualInterfaceIdSet
 */
const de_LocalGatewayVirtualInterfaceIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2LocalGatewayVirtualInterfaceSet
 */
const de_LocalGatewayVirtualInterfaceSet = (output: any, context: __SerdeContext): LocalGatewayVirtualInterface[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGatewayVirtualInterface(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalStorageTypeSet
 */
const de_LocalStorageTypeSet = (output: any, context: __SerdeContext): LocalStorageType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2MaintenanceDetails
 */
const de_MaintenanceDetails = (output: any, context: __SerdeContext): MaintenanceDetails => {
  const contents: any = {};
  if (output["pendingMaintenance"] !== undefined) {
    contents.PendingMaintenance = __expectString(output["pendingMaintenance"]);
  }
  if (output["maintenanceAutoAppliedAfter"] !== undefined) {
    contents.MaintenanceAutoAppliedAfter = __expectNonNull(
      __parseRfc3339DateTimeWithOffset(output["maintenanceAutoAppliedAfter"])
    );
  }
  if (output["lastMaintenanceApplied"] !== undefined) {
    contents.LastMaintenanceApplied = __expectNonNull(
      __parseRfc3339DateTimeWithOffset(output["lastMaintenanceApplied"])
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ManagedPrefixList
 */
const de_ManagedPrefixList = (output: any, context: __SerdeContext): ManagedPrefixList => {
  const contents: any = {};
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = __expectString(output["prefixListId"]);
  }
  if (output["addressFamily"] !== undefined) {
    contents.AddressFamily = __expectString(output["addressFamily"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["stateMessage"] !== undefined) {
    contents.StateMessage = __expectString(output["stateMessage"]);
  }
  if (output["prefixListArn"] !== undefined) {
    contents.PrefixListArn = __expectString(output["prefixListArn"]);
  }
  if (output["prefixListName"] !== undefined) {
    contents.PrefixListName = __expectString(output["prefixListName"]);
  }
  if (output["maxEntries"] !== undefined) {
    contents.MaxEntries = __strictParseInt32(output["maxEntries"]) as number;
  }
  if (output["version"] !== undefined) {
    contents.Version = __strictParseLong(output["version"]) as number;
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ManagedPrefixListSet
 */
const de_ManagedPrefixListSet = (output: any, context: __SerdeContext): ManagedPrefixList[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ManagedPrefixList(entry, context);
    });
};

/**
 * deserializeAws_ec2MemoryGiBPerVCpu
 */
const de_MemoryGiBPerVCpu = (output: any, context: __SerdeContext): MemoryGiBPerVCpu => {
  const contents: any = {};
  if (output["min"] !== undefined) {
    contents.Min = __strictParseFloat(output["min"]) as number;
  }
  if (output["max"] !== undefined) {
    contents.Max = __strictParseFloat(output["max"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2MemoryInfo
 */
const de_MemoryInfo = (output: any, context: __SerdeContext): MemoryInfo => {
  const contents: any = {};
  if (output["sizeInMiB"] !== undefined) {
    contents.SizeInMiB = __strictParseLong(output["sizeInMiB"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2MemoryMiB
 */
const de_MemoryMiB = (output: any, context: __SerdeContext): MemoryMiB => {
  const contents: any = {};
  if (output["min"] !== undefined) {
    contents.Min = __strictParseInt32(output["min"]) as number;
  }
  if (output["max"] !== undefined) {
    contents.Max = __strictParseInt32(output["max"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2MetricPoint
 */
const de_MetricPoint = (output: any, context: __SerdeContext): MetricPoint => {
  const contents: any = {};
  if (output["startDate"] !== undefined) {
    contents.StartDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startDate"]));
  }
  if (output["endDate"] !== undefined) {
    contents.EndDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["endDate"]));
  }
  if (output["value"] !== undefined) {
    contents.Value = __strictParseFloat(output["value"]) as number;
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2MetricPoints
 */
const de_MetricPoints = (output: any, context: __SerdeContext): MetricPoint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_MetricPoint(entry, context);
    });
};

/**
 * deserializeAws_ec2ModifyAddressAttributeResult
 */
const de_ModifyAddressAttributeResult = (output: any, context: __SerdeContext): ModifyAddressAttributeResult => {
  const contents: any = {};
  if (output["address"] !== undefined) {
    contents.Address = de_AddressAttribute(output["address"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyAvailabilityZoneGroupResult
 */
const de_ModifyAvailabilityZoneGroupResult = (
  output: any,
  context: __SerdeContext
): ModifyAvailabilityZoneGroupResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyCapacityReservationFleetResult
 */
const de_ModifyCapacityReservationFleetResult = (
  output: any,
  context: __SerdeContext
): ModifyCapacityReservationFleetResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyCapacityReservationResult
 */
const de_ModifyCapacityReservationResult = (output: any, context: __SerdeContext): ModifyCapacityReservationResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyClientVpnEndpointResult
 */
const de_ModifyClientVpnEndpointResult = (output: any, context: __SerdeContext): ModifyClientVpnEndpointResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyDefaultCreditSpecificationResult
 */
const de_ModifyDefaultCreditSpecificationResult = (
  output: any,
  context: __SerdeContext
): ModifyDefaultCreditSpecificationResult => {
  const contents: any = {};
  if (output["instanceFamilyCreditSpecification"] !== undefined) {
    contents.InstanceFamilyCreditSpecification = de_InstanceFamilyCreditSpecification(
      output["instanceFamilyCreditSpecification"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyEbsDefaultKmsKeyIdResult
 */
const de_ModifyEbsDefaultKmsKeyIdResult = (output: any, context: __SerdeContext): ModifyEbsDefaultKmsKeyIdResult => {
  const contents: any = {};
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = __expectString(output["kmsKeyId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyFleetResult
 */
const de_ModifyFleetResult = (output: any, context: __SerdeContext): ModifyFleetResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyFpgaImageAttributeResult
 */
const de_ModifyFpgaImageAttributeResult = (output: any, context: __SerdeContext): ModifyFpgaImageAttributeResult => {
  const contents: any = {};
  if (output["fpgaImageAttribute"] !== undefined) {
    contents.FpgaImageAttribute = de_FpgaImageAttribute(output["fpgaImageAttribute"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyHostsResult
 */
const de_ModifyHostsResult = (output: any, context: __SerdeContext): ModifyHostsResult => {
  const contents: any = {};
  if (output.successful === "") {
    contents.Successful = [];
  } else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
    contents.Successful = de_ResponseHostIdList(__getArrayIfSingleItem(output["successful"]["item"]), context);
  }
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  } else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = de_UnsuccessfulItemList(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstanceCapacityReservationAttributesResult
 */
const de_ModifyInstanceCapacityReservationAttributesResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceCapacityReservationAttributesResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstanceCreditSpecificationResult
 */
const de_ModifyInstanceCreditSpecificationResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceCreditSpecificationResult => {
  const contents: any = {};
  if (output.successfulInstanceCreditSpecificationSet === "") {
    contents.SuccessfulInstanceCreditSpecifications = [];
  } else if (
    output["successfulInstanceCreditSpecificationSet"] !== undefined &&
    output["successfulInstanceCreditSpecificationSet"]["item"] !== undefined
  ) {
    contents.SuccessfulInstanceCreditSpecifications = de_SuccessfulInstanceCreditSpecificationSet(
      __getArrayIfSingleItem(output["successfulInstanceCreditSpecificationSet"]["item"]),
      context
    );
  }
  if (output.unsuccessfulInstanceCreditSpecificationSet === "") {
    contents.UnsuccessfulInstanceCreditSpecifications = [];
  } else if (
    output["unsuccessfulInstanceCreditSpecificationSet"] !== undefined &&
    output["unsuccessfulInstanceCreditSpecificationSet"]["item"] !== undefined
  ) {
    contents.UnsuccessfulInstanceCreditSpecifications = de_UnsuccessfulInstanceCreditSpecificationSet(
      __getArrayIfSingleItem(output["unsuccessfulInstanceCreditSpecificationSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstanceEventStartTimeResult
 */
const de_ModifyInstanceEventStartTimeResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceEventStartTimeResult => {
  const contents: any = {};
  if (output["event"] !== undefined) {
    contents.Event = de_InstanceStatusEvent(output["event"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstanceEventWindowResult
 */
const de_ModifyInstanceEventWindowResult = (output: any, context: __SerdeContext): ModifyInstanceEventWindowResult => {
  const contents: any = {};
  if (output["instanceEventWindow"] !== undefined) {
    contents.InstanceEventWindow = de_InstanceEventWindow(output["instanceEventWindow"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstanceMaintenanceOptionsResult
 */
const de_ModifyInstanceMaintenanceOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceMaintenanceOptionsResult => {
  const contents: any = {};
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["autoRecovery"] !== undefined) {
    contents.AutoRecovery = __expectString(output["autoRecovery"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstanceMetadataOptionsResult
 */
const de_ModifyInstanceMetadataOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceMetadataOptionsResult => {
  const contents: any = {};
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["instanceMetadataOptions"] !== undefined) {
    contents.InstanceMetadataOptions = de_InstanceMetadataOptionsResponse(output["instanceMetadataOptions"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstancePlacementResult
 */
const de_ModifyInstancePlacementResult = (output: any, context: __SerdeContext): ModifyInstancePlacementResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyIpamPoolResult
 */
const de_ModifyIpamPoolResult = (output: any, context: __SerdeContext): ModifyIpamPoolResult => {
  const contents: any = {};
  if (output["ipamPool"] !== undefined) {
    contents.IpamPool = de_IpamPool(output["ipamPool"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyIpamResourceCidrResult
 */
const de_ModifyIpamResourceCidrResult = (output: any, context: __SerdeContext): ModifyIpamResourceCidrResult => {
  const contents: any = {};
  if (output["ipamResourceCidr"] !== undefined) {
    contents.IpamResourceCidr = de_IpamResourceCidr(output["ipamResourceCidr"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyIpamResourceDiscoveryResult
 */
const de_ModifyIpamResourceDiscoveryResult = (
  output: any,
  context: __SerdeContext
): ModifyIpamResourceDiscoveryResult => {
  const contents: any = {};
  if (output["ipamResourceDiscovery"] !== undefined) {
    contents.IpamResourceDiscovery = de_IpamResourceDiscovery(output["ipamResourceDiscovery"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyIpamResult
 */
const de_ModifyIpamResult = (output: any, context: __SerdeContext): ModifyIpamResult => {
  const contents: any = {};
  if (output["ipam"] !== undefined) {
    contents.Ipam = de_Ipam(output["ipam"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyIpamScopeResult
 */
const de_ModifyIpamScopeResult = (output: any, context: __SerdeContext): ModifyIpamScopeResult => {
  const contents: any = {};
  if (output["ipamScope"] !== undefined) {
    contents.IpamScope = de_IpamScope(output["ipamScope"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyLaunchTemplateResult
 */
const de_ModifyLaunchTemplateResult = (output: any, context: __SerdeContext): ModifyLaunchTemplateResult => {
  const contents: any = {};
  if (output["launchTemplate"] !== undefined) {
    contents.LaunchTemplate = de_LaunchTemplate(output["launchTemplate"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyLocalGatewayRouteResult
 */
const de_ModifyLocalGatewayRouteResult = (output: any, context: __SerdeContext): ModifyLocalGatewayRouteResult => {
  const contents: any = {};
  if (output["route"] !== undefined) {
    contents.Route = de_LocalGatewayRoute(output["route"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyManagedPrefixListResult
 */
const de_ModifyManagedPrefixListResult = (output: any, context: __SerdeContext): ModifyManagedPrefixListResult => {
  const contents: any = {};
  if (output["prefixList"] !== undefined) {
    contents.PrefixList = de_ManagedPrefixList(output["prefixList"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyPrivateDnsNameOptionsResult
 */
const de_ModifyPrivateDnsNameOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyPrivateDnsNameOptionsResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyReservedInstancesResult
 */
const de_ModifyReservedInstancesResult = (output: any, context: __SerdeContext): ModifyReservedInstancesResult => {
  const contents: any = {};
  if (output["reservedInstancesModificationId"] !== undefined) {
    contents.ReservedInstancesModificationId = __expectString(output["reservedInstancesModificationId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifySecurityGroupRulesResult
 */
const de_ModifySecurityGroupRulesResult = (output: any, context: __SerdeContext): ModifySecurityGroupRulesResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifySnapshotTierResult
 */
const de_ModifySnapshotTierResult = (output: any, context: __SerdeContext): ModifySnapshotTierResult => {
  const contents: any = {};
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["tieringStartTime"] !== undefined) {
    contents.TieringStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["tieringStartTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifySpotFleetRequestResponse
 */
const de_ModifySpotFleetRequestResponse = (output: any, context: __SerdeContext): ModifySpotFleetRequestResponse => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesResult
 */
const de_ModifyTrafficMirrorFilterNetworkServicesResult = (
  output: any,
  context: __SerdeContext
): ModifyTrafficMirrorFilterNetworkServicesResult => {
  const contents: any = {};
  if (output["trafficMirrorFilter"] !== undefined) {
    contents.TrafficMirrorFilter = de_TrafficMirrorFilter(output["trafficMirrorFilter"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorFilterRuleResult
 */
const de_ModifyTrafficMirrorFilterRuleResult = (
  output: any,
  context: __SerdeContext
): ModifyTrafficMirrorFilterRuleResult => {
  const contents: any = {};
  if (output["trafficMirrorFilterRule"] !== undefined) {
    contents.TrafficMirrorFilterRule = de_TrafficMirrorFilterRule(output["trafficMirrorFilterRule"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorSessionResult
 */
const de_ModifyTrafficMirrorSessionResult = (
  output: any,
  context: __SerdeContext
): ModifyTrafficMirrorSessionResult => {
  const contents: any = {};
  if (output["trafficMirrorSession"] !== undefined) {
    contents.TrafficMirrorSession = de_TrafficMirrorSession(output["trafficMirrorSession"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceResult
 */
const de_ModifyTransitGatewayPrefixListReferenceResult = (
  output: any,
  context: __SerdeContext
): ModifyTransitGatewayPrefixListReferenceResult => {
  const contents: any = {};
  if (output["transitGatewayPrefixListReference"] !== undefined) {
    contents.TransitGatewayPrefixListReference = de_TransitGatewayPrefixListReference(
      output["transitGatewayPrefixListReference"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyTransitGatewayResult
 */
const de_ModifyTransitGatewayResult = (output: any, context: __SerdeContext): ModifyTransitGatewayResult => {
  const contents: any = {};
  if (output["transitGateway"] !== undefined) {
    contents.TransitGateway = de_TransitGateway(output["transitGateway"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyTransitGatewayVpcAttachmentResult
 */
const de_ModifyTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): ModifyTransitGatewayVpcAttachmentResult => {
  const contents: any = {};
  if (output["transitGatewayVpcAttachment"] !== undefined) {
    contents.TransitGatewayVpcAttachment = de_TransitGatewayVpcAttachment(
      output["transitGatewayVpcAttachment"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessEndpointPolicyResult
 */
const de_ModifyVerifiedAccessEndpointPolicyResult = (
  output: any,
  context: __SerdeContext
): ModifyVerifiedAccessEndpointPolicyResult => {
  const contents: any = {};
  if (output["policyEnabled"] !== undefined) {
    contents.PolicyEnabled = __parseBoolean(output["policyEnabled"]);
  }
  if (output["policyDocument"] !== undefined) {
    contents.PolicyDocument = __expectString(output["policyDocument"]);
  }
  if (output["sseSpecification"] !== undefined) {
    contents.SseSpecification = de_VerifiedAccessSseSpecificationResponse(output["sseSpecification"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessEndpointResult
 */
const de_ModifyVerifiedAccessEndpointResult = (
  output: any,
  context: __SerdeContext
): ModifyVerifiedAccessEndpointResult => {
  const contents: any = {};
  if (output["verifiedAccessEndpoint"] !== undefined) {
    contents.VerifiedAccessEndpoint = de_VerifiedAccessEndpoint(output["verifiedAccessEndpoint"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessGroupPolicyResult
 */
const de_ModifyVerifiedAccessGroupPolicyResult = (
  output: any,
  context: __SerdeContext
): ModifyVerifiedAccessGroupPolicyResult => {
  const contents: any = {};
  if (output["policyEnabled"] !== undefined) {
    contents.PolicyEnabled = __parseBoolean(output["policyEnabled"]);
  }
  if (output["policyDocument"] !== undefined) {
    contents.PolicyDocument = __expectString(output["policyDocument"]);
  }
  if (output["sseSpecification"] !== undefined) {
    contents.SseSpecification = de_VerifiedAccessSseSpecificationResponse(output["sseSpecification"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessGroupResult
 */
const de_ModifyVerifiedAccessGroupResult = (output: any, context: __SerdeContext): ModifyVerifiedAccessGroupResult => {
  const contents: any = {};
  if (output["verifiedAccessGroup"] !== undefined) {
    contents.VerifiedAccessGroup = de_VerifiedAccessGroup(output["verifiedAccessGroup"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessInstanceLoggingConfigurationResult
 */
const de_ModifyVerifiedAccessInstanceLoggingConfigurationResult = (
  output: any,
  context: __SerdeContext
): ModifyVerifiedAccessInstanceLoggingConfigurationResult => {
  const contents: any = {};
  if (output["loggingConfiguration"] !== undefined) {
    contents.LoggingConfiguration = de_VerifiedAccessInstanceLoggingConfiguration(
      output["loggingConfiguration"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessInstanceResult
 */
const de_ModifyVerifiedAccessInstanceResult = (
  output: any,
  context: __SerdeContext
): ModifyVerifiedAccessInstanceResult => {
  const contents: any = {};
  if (output["verifiedAccessInstance"] !== undefined) {
    contents.VerifiedAccessInstance = de_VerifiedAccessInstance(output["verifiedAccessInstance"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessTrustProviderResult
 */
const de_ModifyVerifiedAccessTrustProviderResult = (
  output: any,
  context: __SerdeContext
): ModifyVerifiedAccessTrustProviderResult => {
  const contents: any = {};
  if (output["verifiedAccessTrustProvider"] !== undefined) {
    contents.VerifiedAccessTrustProvider = de_VerifiedAccessTrustProvider(
      output["verifiedAccessTrustProvider"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVolumeResult
 */
const de_ModifyVolumeResult = (output: any, context: __SerdeContext): ModifyVolumeResult => {
  const contents: any = {};
  if (output["volumeModification"] !== undefined) {
    contents.VolumeModification = de_VolumeModification(output["volumeModification"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointConnectionNotificationResult
 */
const de_ModifyVpcEndpointConnectionNotificationResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcEndpointConnectionNotificationResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.ReturnValue = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointResult
 */
const de_ModifyVpcEndpointResult = (output: any, context: __SerdeContext): ModifyVpcEndpointResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServiceConfigurationResult
 */
const de_ModifyVpcEndpointServiceConfigurationResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcEndpointServiceConfigurationResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityResult
 */
const de_ModifyVpcEndpointServicePayerResponsibilityResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcEndpointServicePayerResponsibilityResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.ReturnValue = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServicePermissionsResult
 */
const de_ModifyVpcEndpointServicePermissionsResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcEndpointServicePermissionsResult => {
  const contents: any = {};
  if (output.addedPrincipalSet === "") {
    contents.AddedPrincipals = [];
  } else if (output["addedPrincipalSet"] !== undefined && output["addedPrincipalSet"]["item"] !== undefined) {
    contents.AddedPrincipals = de_AddedPrincipalSet(
      __getArrayIfSingleItem(output["addedPrincipalSet"]["item"]),
      context
    );
  }
  if (output["return"] !== undefined) {
    contents.ReturnValue = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcPeeringConnectionOptionsResult
 */
const de_ModifyVpcPeeringConnectionOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcPeeringConnectionOptionsResult => {
  const contents: any = {};
  if (output["accepterPeeringConnectionOptions"] !== undefined) {
    contents.AccepterPeeringConnectionOptions = de_PeeringConnectionOptions(
      output["accepterPeeringConnectionOptions"],
      context
    );
  }
  if (output["requesterPeeringConnectionOptions"] !== undefined) {
    contents.RequesterPeeringConnectionOptions = de_PeeringConnectionOptions(
      output["requesterPeeringConnectionOptions"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcTenancyResult
 */
const de_ModifyVpcTenancyResult = (output: any, context: __SerdeContext): ModifyVpcTenancyResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.ReturnValue = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpnConnectionOptionsResult
 */
const de_ModifyVpnConnectionOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyVpnConnectionOptionsResult => {
  const contents: any = {};
  if (output["vpnConnection"] !== undefined) {
    contents.VpnConnection = de_VpnConnection(output["vpnConnection"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpnConnectionResult
 */
const de_ModifyVpnConnectionResult = (output: any, context: __SerdeContext): ModifyVpnConnectionResult => {
  const contents: any = {};
  if (output["vpnConnection"] !== undefined) {
    contents.VpnConnection = de_VpnConnection(output["vpnConnection"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpnTunnelCertificateResult
 */
const de_ModifyVpnTunnelCertificateResult = (
  output: any,
  context: __SerdeContext
): ModifyVpnTunnelCertificateResult => {
  const contents: any = {};
  if (output["vpnConnection"] !== undefined) {
    contents.VpnConnection = de_VpnConnection(output["vpnConnection"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpnTunnelOptionsResult
 */
const de_ModifyVpnTunnelOptionsResult = (output: any, context: __SerdeContext): ModifyVpnTunnelOptionsResult => {
  const contents: any = {};
  if (output["vpnConnection"] !== undefined) {
    contents.VpnConnection = de_VpnConnection(output["vpnConnection"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2Monitoring
 */
const de_Monitoring = (output: any, context: __SerdeContext): Monitoring => {
  const contents: any = {};
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2MonitorInstancesResult
 */
const de_MonitorInstancesResult = (output: any, context: __SerdeContext): MonitorInstancesResult => {
  const contents: any = {};
  if (output.instancesSet === "") {
    contents.InstanceMonitorings = [];
  } else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.InstanceMonitorings = de_InstanceMonitoringList(
      __getArrayIfSingleItem(output["instancesSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2MoveAddressToVpcResult
 */
const de_MoveAddressToVpcResult = (output: any, context: __SerdeContext): MoveAddressToVpcResult => {
  const contents: any = {};
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = __expectString(output["allocationId"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2MoveByoipCidrToIpamResult
 */
const de_MoveByoipCidrToIpamResult = (output: any, context: __SerdeContext): MoveByoipCidrToIpamResult => {
  const contents: any = {};
  if (output["byoipCidr"] !== undefined) {
    contents.ByoipCidr = de_ByoipCidr(output["byoipCidr"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2MovingAddressStatus
 */
const de_MovingAddressStatus = (output: any, context: __SerdeContext): MovingAddressStatus => {
  const contents: any = {};
  if (output["moveStatus"] !== undefined) {
    contents.MoveStatus = __expectString(output["moveStatus"]);
  }
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = __expectString(output["publicIp"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2MovingAddressStatusSet
 */
const de_MovingAddressStatusSet = (output: any, context: __SerdeContext): MovingAddressStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_MovingAddressStatus(entry, context);
    });
};

/**
 * deserializeAws_ec2NatGateway
 */
const de_NatGateway = (output: any, context: __SerdeContext): NatGateway => {
  const contents: any = {};
  if (output["createTime"] !== undefined) {
    contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
  }
  if (output["deleteTime"] !== undefined) {
    contents.DeleteTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["deleteTime"]));
  }
  if (output["failureCode"] !== undefined) {
    contents.FailureCode = __expectString(output["failureCode"]);
  }
  if (output["failureMessage"] !== undefined) {
    contents.FailureMessage = __expectString(output["failureMessage"]);
  }
  if (output.natGatewayAddressSet === "") {
    contents.NatGatewayAddresses = [];
  } else if (output["natGatewayAddressSet"] !== undefined && output["natGatewayAddressSet"]["item"] !== undefined) {
    contents.NatGatewayAddresses = de_NatGatewayAddressList(
      __getArrayIfSingleItem(output["natGatewayAddressSet"]["item"]),
      context
    );
  }
  if (output["natGatewayId"] !== undefined) {
    contents.NatGatewayId = __expectString(output["natGatewayId"]);
  }
  if (output["provisionedBandwidth"] !== undefined) {
    contents.ProvisionedBandwidth = de_ProvisionedBandwidth(output["provisionedBandwidth"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["connectivityType"] !== undefined) {
    contents.ConnectivityType = __expectString(output["connectivityType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NatGatewayAddress
 */
const de_NatGatewayAddress = (output: any, context: __SerdeContext): NatGatewayAddress => {
  const contents: any = {};
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = __expectString(output["allocationId"]);
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["privateIp"] !== undefined) {
    contents.PrivateIp = __expectString(output["privateIp"]);
  }
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = __expectString(output["publicIp"]);
  }
  if (output["associationId"] !== undefined) {
    contents.AssociationId = __expectString(output["associationId"]);
  }
  if (output["isPrimary"] !== undefined) {
    contents.IsPrimary = __parseBoolean(output["isPrimary"]);
  }
  if (output["failureMessage"] !== undefined) {
    contents.FailureMessage = __expectString(output["failureMessage"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NatGatewayAddressList
 */
const de_NatGatewayAddressList = (output: any, context: __SerdeContext): NatGatewayAddress[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NatGatewayAddress(entry, context);
    });
};

/**
 * deserializeAws_ec2NatGatewayList
 */
const de_NatGatewayList = (output: any, context: __SerdeContext): NatGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NatGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkAcl
 */
const de_NetworkAcl = (output: any, context: __SerdeContext): NetworkAcl => {
  const contents: any = {};
  if (output.associationSet === "") {
    contents.Associations = [];
  } else if (output["associationSet"] !== undefined && output["associationSet"]["item"] !== undefined) {
    contents.Associations = de_NetworkAclAssociationList(
      __getArrayIfSingleItem(output["associationSet"]["item"]),
      context
    );
  }
  if (output.entrySet === "") {
    contents.Entries = [];
  } else if (output["entrySet"] !== undefined && output["entrySet"]["item"] !== undefined) {
    contents.Entries = de_NetworkAclEntryList(__getArrayIfSingleItem(output["entrySet"]["item"]), context);
  }
  if (output["default"] !== undefined) {
    contents.IsDefault = __parseBoolean(output["default"]);
  }
  if (output["networkAclId"] !== undefined) {
    contents.NetworkAclId = __expectString(output["networkAclId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkAclAssociation
 */
const de_NetworkAclAssociation = (output: any, context: __SerdeContext): NetworkAclAssociation => {
  const contents: any = {};
  if (output["networkAclAssociationId"] !== undefined) {
    contents.NetworkAclAssociationId = __expectString(output["networkAclAssociationId"]);
  }
  if (output["networkAclId"] !== undefined) {
    contents.NetworkAclId = __expectString(output["networkAclId"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkAclAssociationList
 */
const de_NetworkAclAssociationList = (output: any, context: __SerdeContext): NetworkAclAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkAclAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkAclEntry
 */
const de_NetworkAclEntry = (output: any, context: __SerdeContext): NetworkAclEntry => {
  const contents: any = {};
  if (output["cidrBlock"] !== undefined) {
    contents.CidrBlock = __expectString(output["cidrBlock"]);
  }
  if (output["egress"] !== undefined) {
    contents.Egress = __parseBoolean(output["egress"]);
  }
  if (output["icmpTypeCode"] !== undefined) {
    contents.IcmpTypeCode = de_IcmpTypeCode(output["icmpTypeCode"], context);
  }
  if (output["ipv6CidrBlock"] !== undefined) {
    contents.Ipv6CidrBlock = __expectString(output["ipv6CidrBlock"]);
  }
  if (output["portRange"] !== undefined) {
    contents.PortRange = de_PortRange(output["portRange"], context);
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = __expectString(output["protocol"]);
  }
  if (output["ruleAction"] !== undefined) {
    contents.RuleAction = __expectString(output["ruleAction"]);
  }
  if (output["ruleNumber"] !== undefined) {
    contents.RuleNumber = __strictParseInt32(output["ruleNumber"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkAclEntryList
 */
const de_NetworkAclEntryList = (output: any, context: __SerdeContext): NetworkAclEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkAclEntry(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkAclList
 */
const de_NetworkAclList = (output: any, context: __SerdeContext): NetworkAcl[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkAcl(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkBandwidthGbps
 */
const de_NetworkBandwidthGbps = (output: any, context: __SerdeContext): NetworkBandwidthGbps => {
  const contents: any = {};
  if (output["min"] !== undefined) {
    contents.Min = __strictParseFloat(output["min"]) as number;
  }
  if (output["max"] !== undefined) {
    contents.Max = __strictParseFloat(output["max"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkCardInfo
 */
const de_NetworkCardInfo = (output: any, context: __SerdeContext): NetworkCardInfo => {
  const contents: any = {};
  if (output["networkCardIndex"] !== undefined) {
    contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]) as number;
  }
  if (output["networkPerformance"] !== undefined) {
    contents.NetworkPerformance = __expectString(output["networkPerformance"]);
  }
  if (output["maximumNetworkInterfaces"] !== undefined) {
    contents.MaximumNetworkInterfaces = __strictParseInt32(output["maximumNetworkInterfaces"]) as number;
  }
  if (output["baselineBandwidthInGbps"] !== undefined) {
    contents.BaselineBandwidthInGbps = __strictParseFloat(output["baselineBandwidthInGbps"]) as number;
  }
  if (output["peakBandwidthInGbps"] !== undefined) {
    contents.PeakBandwidthInGbps = __strictParseFloat(output["peakBandwidthInGbps"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkCardInfoList
 */
const de_NetworkCardInfoList = (output: any, context: __SerdeContext): NetworkCardInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkCardInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInfo
 */
const de_NetworkInfo = (output: any, context: __SerdeContext): NetworkInfo => {
  const contents: any = {};
  if (output["networkPerformance"] !== undefined) {
    contents.NetworkPerformance = __expectString(output["networkPerformance"]);
  }
  if (output["maximumNetworkInterfaces"] !== undefined) {
    contents.MaximumNetworkInterfaces = __strictParseInt32(output["maximumNetworkInterfaces"]) as number;
  }
  if (output["maximumNetworkCards"] !== undefined) {
    contents.MaximumNetworkCards = __strictParseInt32(output["maximumNetworkCards"]) as number;
  }
  if (output["defaultNetworkCardIndex"] !== undefined) {
    contents.DefaultNetworkCardIndex = __strictParseInt32(output["defaultNetworkCardIndex"]) as number;
  }
  if (output.networkCards === "") {
    contents.NetworkCards = [];
  } else if (output["networkCards"] !== undefined && output["networkCards"]["item"] !== undefined) {
    contents.NetworkCards = de_NetworkCardInfoList(__getArrayIfSingleItem(output["networkCards"]["item"]), context);
  }
  if (output["ipv4AddressesPerInterface"] !== undefined) {
    contents.Ipv4AddressesPerInterface = __strictParseInt32(output["ipv4AddressesPerInterface"]) as number;
  }
  if (output["ipv6AddressesPerInterface"] !== undefined) {
    contents.Ipv6AddressesPerInterface = __strictParseInt32(output["ipv6AddressesPerInterface"]) as number;
  }
  if (output["ipv6Supported"] !== undefined) {
    contents.Ipv6Supported = __parseBoolean(output["ipv6Supported"]);
  }
  if (output["enaSupport"] !== undefined) {
    contents.EnaSupport = __expectString(output["enaSupport"]);
  }
  if (output["efaSupported"] !== undefined) {
    contents.EfaSupported = __parseBoolean(output["efaSupported"]);
  }
  if (output["efaInfo"] !== undefined) {
    contents.EfaInfo = de_EfaInfo(output["efaInfo"], context);
  }
  if (output["encryptionInTransitSupported"] !== undefined) {
    contents.EncryptionInTransitSupported = __parseBoolean(output["encryptionInTransitSupported"]);
  }
  if (output["enaSrdSupported"] !== undefined) {
    contents.EnaSrdSupported = __parseBoolean(output["enaSrdSupported"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInsightsAccessScope
 */
const de_NetworkInsightsAccessScope = (output: any, context: __SerdeContext): NetworkInsightsAccessScope => {
  const contents: any = {};
  if (output["networkInsightsAccessScopeId"] !== undefined) {
    contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
  }
  if (output["networkInsightsAccessScopeArn"] !== undefined) {
    contents.NetworkInsightsAccessScopeArn = __expectString(output["networkInsightsAccessScopeArn"]);
  }
  if (output["createdDate"] !== undefined) {
    contents.CreatedDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createdDate"]));
  }
  if (output["updatedDate"] !== undefined) {
    contents.UpdatedDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["updatedDate"]));
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInsightsAccessScopeAnalysis
 */
const de_NetworkInsightsAccessScopeAnalysis = (
  output: any,
  context: __SerdeContext
): NetworkInsightsAccessScopeAnalysis => {
  const contents: any = {};
  if (output["networkInsightsAccessScopeAnalysisId"] !== undefined) {
    contents.NetworkInsightsAccessScopeAnalysisId = __expectString(output["networkInsightsAccessScopeAnalysisId"]);
  }
  if (output["networkInsightsAccessScopeAnalysisArn"] !== undefined) {
    contents.NetworkInsightsAccessScopeAnalysisArn = __expectString(output["networkInsightsAccessScopeAnalysisArn"]);
  }
  if (output["networkInsightsAccessScopeId"] !== undefined) {
    contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output["warningMessage"] !== undefined) {
    contents.WarningMessage = __expectString(output["warningMessage"]);
  }
  if (output["startDate"] !== undefined) {
    contents.StartDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startDate"]));
  }
  if (output["endDate"] !== undefined) {
    contents.EndDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["endDate"]));
  }
  if (output["findingsFound"] !== undefined) {
    contents.FindingsFound = __expectString(output["findingsFound"]);
  }
  if (output["analyzedEniCount"] !== undefined) {
    contents.AnalyzedEniCount = __strictParseInt32(output["analyzedEniCount"]) as number;
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInsightsAccessScopeAnalysisList
 */
const de_NetworkInsightsAccessScopeAnalysisList = (
  output: any,
  context: __SerdeContext
): NetworkInsightsAccessScopeAnalysis[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInsightsAccessScopeAnalysis(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInsightsAccessScopeContent
 */
const de_NetworkInsightsAccessScopeContent = (
  output: any,
  context: __SerdeContext
): NetworkInsightsAccessScopeContent => {
  const contents: any = {};
  if (output["networkInsightsAccessScopeId"] !== undefined) {
    contents.NetworkInsightsAccessScopeId = __expectString(output["networkInsightsAccessScopeId"]);
  }
  if (output.matchPathSet === "") {
    contents.MatchPaths = [];
  } else if (output["matchPathSet"] !== undefined && output["matchPathSet"]["item"] !== undefined) {
    contents.MatchPaths = de_AccessScopePathList(__getArrayIfSingleItem(output["matchPathSet"]["item"]), context);
  }
  if (output.excludePathSet === "") {
    contents.ExcludePaths = [];
  } else if (output["excludePathSet"] !== undefined && output["excludePathSet"]["item"] !== undefined) {
    contents.ExcludePaths = de_AccessScopePathList(__getArrayIfSingleItem(output["excludePathSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInsightsAccessScopeList
 */
const de_NetworkInsightsAccessScopeList = (output: any, context: __SerdeContext): NetworkInsightsAccessScope[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInsightsAccessScope(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInsightsAnalysis
 */
const de_NetworkInsightsAnalysis = (output: any, context: __SerdeContext): NetworkInsightsAnalysis => {
  const contents: any = {};
  if (output["networkInsightsAnalysisId"] !== undefined) {
    contents.NetworkInsightsAnalysisId = __expectString(output["networkInsightsAnalysisId"]);
  }
  if (output["networkInsightsAnalysisArn"] !== undefined) {
    contents.NetworkInsightsAnalysisArn = __expectString(output["networkInsightsAnalysisArn"]);
  }
  if (output["networkInsightsPathId"] !== undefined) {
    contents.NetworkInsightsPathId = __expectString(output["networkInsightsPathId"]);
  }
  if (output.additionalAccountSet === "") {
    contents.AdditionalAccounts = [];
  } else if (output["additionalAccountSet"] !== undefined && output["additionalAccountSet"]["item"] !== undefined) {
    contents.AdditionalAccounts = de_ValueStringList(
      __getArrayIfSingleItem(output["additionalAccountSet"]["item"]),
      context
    );
  }
  if (output.filterInArnSet === "") {
    contents.FilterInArns = [];
  } else if (output["filterInArnSet"] !== undefined && output["filterInArnSet"]["item"] !== undefined) {
    contents.FilterInArns = de_ArnList(__getArrayIfSingleItem(output["filterInArnSet"]["item"]), context);
  }
  if (output["startDate"] !== undefined) {
    contents.StartDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startDate"]));
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output["warningMessage"] !== undefined) {
    contents.WarningMessage = __expectString(output["warningMessage"]);
  }
  if (output["networkPathFound"] !== undefined) {
    contents.NetworkPathFound = __parseBoolean(output["networkPathFound"]);
  }
  if (output.forwardPathComponentSet === "") {
    contents.ForwardPathComponents = [];
  } else if (
    output["forwardPathComponentSet"] !== undefined &&
    output["forwardPathComponentSet"]["item"] !== undefined
  ) {
    contents.ForwardPathComponents = de_PathComponentList(
      __getArrayIfSingleItem(output["forwardPathComponentSet"]["item"]),
      context
    );
  }
  if (output.returnPathComponentSet === "") {
    contents.ReturnPathComponents = [];
  } else if (output["returnPathComponentSet"] !== undefined && output["returnPathComponentSet"]["item"] !== undefined) {
    contents.ReturnPathComponents = de_PathComponentList(
      __getArrayIfSingleItem(output["returnPathComponentSet"]["item"]),
      context
    );
  }
  if (output.explanationSet === "") {
    contents.Explanations = [];
  } else if (output["explanationSet"] !== undefined && output["explanationSet"]["item"] !== undefined) {
    contents.Explanations = de_ExplanationList(__getArrayIfSingleItem(output["explanationSet"]["item"]), context);
  }
  if (output.alternatePathHintSet === "") {
    contents.AlternatePathHints = [];
  } else if (output["alternatePathHintSet"] !== undefined && output["alternatePathHintSet"]["item"] !== undefined) {
    contents.AlternatePathHints = de_AlternatePathHintList(
      __getArrayIfSingleItem(output["alternatePathHintSet"]["item"]),
      context
    );
  }
  if (output.suggestedAccountSet === "") {
    contents.SuggestedAccounts = [];
  } else if (output["suggestedAccountSet"] !== undefined && output["suggestedAccountSet"]["item"] !== undefined) {
    contents.SuggestedAccounts = de_ValueStringList(
      __getArrayIfSingleItem(output["suggestedAccountSet"]["item"]),
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInsightsAnalysisList
 */
const de_NetworkInsightsAnalysisList = (output: any, context: __SerdeContext): NetworkInsightsAnalysis[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInsightsAnalysis(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInsightsPath
 */
const de_NetworkInsightsPath = (output: any, context: __SerdeContext): NetworkInsightsPath => {
  const contents: any = {};
  if (output["networkInsightsPathId"] !== undefined) {
    contents.NetworkInsightsPathId = __expectString(output["networkInsightsPathId"]);
  }
  if (output["networkInsightsPathArn"] !== undefined) {
    contents.NetworkInsightsPathArn = __expectString(output["networkInsightsPathArn"]);
  }
  if (output["createdDate"] !== undefined) {
    contents.CreatedDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createdDate"]));
  }
  if (output["source"] !== undefined) {
    contents.Source = __expectString(output["source"]);
  }
  if (output["destination"] !== undefined) {
    contents.Destination = __expectString(output["destination"]);
  }
  if (output["sourceArn"] !== undefined) {
    contents.SourceArn = __expectString(output["sourceArn"]);
  }
  if (output["destinationArn"] !== undefined) {
    contents.DestinationArn = __expectString(output["destinationArn"]);
  }
  if (output["sourceIp"] !== undefined) {
    contents.SourceIp = __expectString(output["sourceIp"]);
  }
  if (output["destinationIp"] !== undefined) {
    contents.DestinationIp = __expectString(output["destinationIp"]);
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = __expectString(output["protocol"]);
  }
  if (output["destinationPort"] !== undefined) {
    contents.DestinationPort = __strictParseInt32(output["destinationPort"]) as number;
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["filterAtSource"] !== undefined) {
    contents.FilterAtSource = de_PathFilter(output["filterAtSource"], context);
  }
  if (output["filterAtDestination"] !== undefined) {
    contents.FilterAtDestination = de_PathFilter(output["filterAtDestination"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInsightsPathList
 */
const de_NetworkInsightsPathList = (output: any, context: __SerdeContext): NetworkInsightsPath[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInsightsPath(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInterface
 */
const de_NetworkInterface = (output: any, context: __SerdeContext): NetworkInterface => {
  const contents: any = {};
  if (output["association"] !== undefined) {
    contents.Association = de_NetworkInterfaceAssociation(output["association"], context);
  }
  if (output["attachment"] !== undefined) {
    contents.Attachment = de_NetworkInterfaceAttachment(output["attachment"], context);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output.groupSet === "") {
    contents.Groups = [];
  } else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
  }
  if (output["interfaceType"] !== undefined) {
    contents.InterfaceType = __expectString(output["interfaceType"]);
  }
  if (output.ipv6AddressesSet === "") {
    contents.Ipv6Addresses = [];
  } else if (output["ipv6AddressesSet"] !== undefined && output["ipv6AddressesSet"]["item"] !== undefined) {
    contents.Ipv6Addresses = de_NetworkInterfaceIpv6AddressesList(
      __getArrayIfSingleItem(output["ipv6AddressesSet"]["item"]),
      context
    );
  }
  if (output["macAddress"] !== undefined) {
    contents.MacAddress = __expectString(output["macAddress"]);
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = __expectString(output["privateDnsName"]);
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
  }
  if (output.privateIpAddressesSet === "") {
    contents.PrivateIpAddresses = [];
  } else if (output["privateIpAddressesSet"] !== undefined && output["privateIpAddressesSet"]["item"] !== undefined) {
    contents.PrivateIpAddresses = de_NetworkInterfacePrivateIpAddressList(
      __getArrayIfSingleItem(output["privateIpAddressesSet"]["item"]),
      context
    );
  }
  if (output.ipv4PrefixSet === "") {
    contents.Ipv4Prefixes = [];
  } else if (output["ipv4PrefixSet"] !== undefined && output["ipv4PrefixSet"]["item"] !== undefined) {
    contents.Ipv4Prefixes = de_Ipv4PrefixesList(__getArrayIfSingleItem(output["ipv4PrefixSet"]["item"]), context);
  }
  if (output.ipv6PrefixSet === "") {
    contents.Ipv6Prefixes = [];
  } else if (output["ipv6PrefixSet"] !== undefined && output["ipv6PrefixSet"]["item"] !== undefined) {
    contents.Ipv6Prefixes = de_Ipv6PrefixesList(__getArrayIfSingleItem(output["ipv6PrefixSet"]["item"]), context);
  }
  if (output["requesterId"] !== undefined) {
    contents.RequesterId = __expectString(output["requesterId"]);
  }
  if (output["requesterManaged"] !== undefined) {
    contents.RequesterManaged = __parseBoolean(output["requesterManaged"]);
  }
  if (output["sourceDestCheck"] !== undefined) {
    contents.SourceDestCheck = __parseBoolean(output["sourceDestCheck"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output.tagSet === "") {
    contents.TagSet = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.TagSet = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["denyAllIgwTraffic"] !== undefined) {
    contents.DenyAllIgwTraffic = __parseBoolean(output["denyAllIgwTraffic"]);
  }
  if (output["ipv6Native"] !== undefined) {
    contents.Ipv6Native = __parseBoolean(output["ipv6Native"]);
  }
  if (output["ipv6Address"] !== undefined) {
    contents.Ipv6Address = __expectString(output["ipv6Address"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfaceAssociation
 */
const de_NetworkInterfaceAssociation = (output: any, context: __SerdeContext): NetworkInterfaceAssociation => {
  const contents: any = {};
  if (output["allocationId"] !== undefined) {
    contents.AllocationId = __expectString(output["allocationId"]);
  }
  if (output["associationId"] !== undefined) {
    contents.AssociationId = __expectString(output["associationId"]);
  }
  if (output["ipOwnerId"] !== undefined) {
    contents.IpOwnerId = __expectString(output["ipOwnerId"]);
  }
  if (output["publicDnsName"] !== undefined) {
    contents.PublicDnsName = __expectString(output["publicDnsName"]);
  }
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = __expectString(output["publicIp"]);
  }
  if (output["customerOwnedIp"] !== undefined) {
    contents.CustomerOwnedIp = __expectString(output["customerOwnedIp"]);
  }
  if (output["carrierIp"] !== undefined) {
    contents.CarrierIp = __expectString(output["carrierIp"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfaceAttachment
 */
const de_NetworkInterfaceAttachment = (output: any, context: __SerdeContext): NetworkInterfaceAttachment => {
  const contents: any = {};
  if (output["attachTime"] !== undefined) {
    contents.AttachTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["attachTime"]));
  }
  if (output["attachmentId"] !== undefined) {
    contents.AttachmentId = __expectString(output["attachmentId"]);
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
  }
  if (output["deviceIndex"] !== undefined) {
    contents.DeviceIndex = __strictParseInt32(output["deviceIndex"]) as number;
  }
  if (output["networkCardIndex"] !== undefined) {
    contents.NetworkCardIndex = __strictParseInt32(output["networkCardIndex"]) as number;
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["instanceOwnerId"] !== undefined) {
    contents.InstanceOwnerId = __expectString(output["instanceOwnerId"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["enaSrdSpecification"] !== undefined) {
    contents.EnaSrdSpecification = de_AttachmentEnaSrdSpecification(output["enaSrdSpecification"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfaceCount
 */
const de_NetworkInterfaceCount = (output: any, context: __SerdeContext): NetworkInterfaceCount => {
  const contents: any = {};
  if (output["min"] !== undefined) {
    contents.Min = __strictParseInt32(output["min"]) as number;
  }
  if (output["max"] !== undefined) {
    contents.Max = __strictParseInt32(output["max"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfaceIdSet
 */
const de_NetworkInterfaceIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2NetworkInterfaceIpv6Address
 */
const de_NetworkInterfaceIpv6Address = (output: any, context: __SerdeContext): NetworkInterfaceIpv6Address => {
  const contents: any = {};
  if (output["ipv6Address"] !== undefined) {
    contents.Ipv6Address = __expectString(output["ipv6Address"]);
  }
  if (output["isPrimaryIpv6"] !== undefined) {
    contents.IsPrimaryIpv6 = __parseBoolean(output["isPrimaryIpv6"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfaceIpv6AddressesList
 */
const de_NetworkInterfaceIpv6AddressesList = (output: any, context: __SerdeContext): NetworkInterfaceIpv6Address[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInterfaceIpv6Address(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInterfaceList
 */
const de_NetworkInterfaceList = (output: any, context: __SerdeContext): NetworkInterface[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInterface(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInterfacePermission
 */
const de_NetworkInterfacePermission = (output: any, context: __SerdeContext): NetworkInterfacePermission => {
  const contents: any = {};
  if (output["networkInterfacePermissionId"] !== undefined) {
    contents.NetworkInterfacePermissionId = __expectString(output["networkInterfacePermissionId"]);
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["awsAccountId"] !== undefined) {
    contents.AwsAccountId = __expectString(output["awsAccountId"]);
  }
  if (output["awsService"] !== undefined) {
    contents.AwsService = __expectString(output["awsService"]);
  }
  if (output["permission"] !== undefined) {
    contents.Permission = __expectString(output["permission"]);
  }
  if (output["permissionState"] !== undefined) {
    contents.PermissionState = de_NetworkInterfacePermissionState(output["permissionState"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfacePermissionList
 */
const de_NetworkInterfacePermissionList = (output: any, context: __SerdeContext): NetworkInterfacePermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInterfacePermission(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInterfacePermissionState
 */
const de_NetworkInterfacePermissionState = (output: any, context: __SerdeContext): NetworkInterfacePermissionState => {
  const contents: any = {};
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfacePrivateIpAddress
 */
const de_NetworkInterfacePrivateIpAddress = (
  output: any,
  context: __SerdeContext
): NetworkInterfacePrivateIpAddress => {
  const contents: any = {};
  if (output["association"] !== undefined) {
    contents.Association = de_NetworkInterfaceAssociation(output["association"], context);
  }
  if (output["primary"] !== undefined) {
    contents.Primary = __parseBoolean(output["primary"]);
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = __expectString(output["privateDnsName"]);
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfacePrivateIpAddressList
 */
const de_NetworkInterfacePrivateIpAddressList = (
  output: any,
  context: __SerdeContext
): NetworkInterfacePrivateIpAddress[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInterfacePrivateIpAddress(entry, context);
    });
};

/**
 * deserializeAws_ec2NitroTpmInfo
 */
const de_NitroTpmInfo = (output: any, context: __SerdeContext): NitroTpmInfo => {
  const contents: any = {};
  if (output.supportedVersions === "") {
    contents.SupportedVersions = [];
  } else if (output["supportedVersions"] !== undefined && output["supportedVersions"]["item"] !== undefined) {
    contents.SupportedVersions = de_NitroTpmSupportedVersionsList(
      __getArrayIfSingleItem(output["supportedVersions"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2NitroTpmSupportedVersionsList
 */
const de_NitroTpmSupportedVersionsList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2OccurrenceDaySet
 */
const de_OccurrenceDaySet = (output: any, context: __SerdeContext): number[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __strictParseInt32(entry) as number;
    });
};

/**
 * deserializeAws_ec2OidcOptions
 */
const de_OidcOptions = (output: any, context: __SerdeContext): OidcOptions => {
  const contents: any = {};
  if (output["issuer"] !== undefined) {
    contents.Issuer = __expectString(output["issuer"]);
  }
  if (output["authorizationEndpoint"] !== undefined) {
    contents.AuthorizationEndpoint = __expectString(output["authorizationEndpoint"]);
  }
  if (output["tokenEndpoint"] !== undefined) {
    contents.TokenEndpoint = __expectString(output["tokenEndpoint"]);
  }
  if (output["userInfoEndpoint"] !== undefined) {
    contents.UserInfoEndpoint = __expectString(output["userInfoEndpoint"]);
  }
  if (output["clientId"] !== undefined) {
    contents.ClientId = __expectString(output["clientId"]);
  }
  if (output["clientSecret"] !== undefined) {
    contents.ClientSecret = __expectString(output["clientSecret"]);
  }
  if (output["scope"] !== undefined) {
    contents.Scope = __expectString(output["scope"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2OnDemandOptions
 */
const de_OnDemandOptions = (output: any, context: __SerdeContext): OnDemandOptions => {
  const contents: any = {};
  if (output["allocationStrategy"] !== undefined) {
    contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
  }
  if (output["capacityReservationOptions"] !== undefined) {
    contents.CapacityReservationOptions = de_CapacityReservationOptions(output["capacityReservationOptions"], context);
  }
  if (output["singleInstanceType"] !== undefined) {
    contents.SingleInstanceType = __parseBoolean(output["singleInstanceType"]);
  }
  if (output["singleAvailabilityZone"] !== undefined) {
    contents.SingleAvailabilityZone = __parseBoolean(output["singleAvailabilityZone"]);
  }
  if (output["minTargetCapacity"] !== undefined) {
    contents.MinTargetCapacity = __strictParseInt32(output["minTargetCapacity"]) as number;
  }
  if (output["maxTotalPrice"] !== undefined) {
    contents.MaxTotalPrice = __expectString(output["maxTotalPrice"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PacketHeaderStatement
 */
const de_PacketHeaderStatement = (output: any, context: __SerdeContext): PacketHeaderStatement => {
  const contents: any = {};
  if (output.sourceAddressSet === "") {
    contents.SourceAddresses = [];
  } else if (output["sourceAddressSet"] !== undefined && output["sourceAddressSet"]["item"] !== undefined) {
    contents.SourceAddresses = de_ValueStringList(__getArrayIfSingleItem(output["sourceAddressSet"]["item"]), context);
  }
  if (output.destinationAddressSet === "") {
    contents.DestinationAddresses = [];
  } else if (output["destinationAddressSet"] !== undefined && output["destinationAddressSet"]["item"] !== undefined) {
    contents.DestinationAddresses = de_ValueStringList(
      __getArrayIfSingleItem(output["destinationAddressSet"]["item"]),
      context
    );
  }
  if (output.sourcePortSet === "") {
    contents.SourcePorts = [];
  } else if (output["sourcePortSet"] !== undefined && output["sourcePortSet"]["item"] !== undefined) {
    contents.SourcePorts = de_ValueStringList(__getArrayIfSingleItem(output["sourcePortSet"]["item"]), context);
  }
  if (output.destinationPortSet === "") {
    contents.DestinationPorts = [];
  } else if (output["destinationPortSet"] !== undefined && output["destinationPortSet"]["item"] !== undefined) {
    contents.DestinationPorts = de_ValueStringList(
      __getArrayIfSingleItem(output["destinationPortSet"]["item"]),
      context
    );
  }
  if (output.sourcePrefixListSet === "") {
    contents.SourcePrefixLists = [];
  } else if (output["sourcePrefixListSet"] !== undefined && output["sourcePrefixListSet"]["item"] !== undefined) {
    contents.SourcePrefixLists = de_ValueStringList(
      __getArrayIfSingleItem(output["sourcePrefixListSet"]["item"]),
      context
    );
  }
  if (output.destinationPrefixListSet === "") {
    contents.DestinationPrefixLists = [];
  } else if (
    output["destinationPrefixListSet"] !== undefined &&
    output["destinationPrefixListSet"]["item"] !== undefined
  ) {
    contents.DestinationPrefixLists = de_ValueStringList(
      __getArrayIfSingleItem(output["destinationPrefixListSet"]["item"]),
      context
    );
  }
  if (output.protocolSet === "") {
    contents.Protocols = [];
  } else if (output["protocolSet"] !== undefined && output["protocolSet"]["item"] !== undefined) {
    contents.Protocols = de_ProtocolList(__getArrayIfSingleItem(output["protocolSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PathComponent
 */
const de_PathComponent = (output: any, context: __SerdeContext): PathComponent => {
  const contents: any = {};
  if (output["sequenceNumber"] !== undefined) {
    contents.SequenceNumber = __strictParseInt32(output["sequenceNumber"]) as number;
  }
  if (output["aclRule"] !== undefined) {
    contents.AclRule = de_AnalysisAclRule(output["aclRule"], context);
  }
  if (output["attachedTo"] !== undefined) {
    contents.AttachedTo = de_AnalysisComponent(output["attachedTo"], context);
  }
  if (output["component"] !== undefined) {
    contents.Component = de_AnalysisComponent(output["component"], context);
  }
  if (output["destinationVpc"] !== undefined) {
    contents.DestinationVpc = de_AnalysisComponent(output["destinationVpc"], context);
  }
  if (output["outboundHeader"] !== undefined) {
    contents.OutboundHeader = de_AnalysisPacketHeader(output["outboundHeader"], context);
  }
  if (output["inboundHeader"] !== undefined) {
    contents.InboundHeader = de_AnalysisPacketHeader(output["inboundHeader"], context);
  }
  if (output["routeTableRoute"] !== undefined) {
    contents.RouteTableRoute = de_AnalysisRouteTableRoute(output["routeTableRoute"], context);
  }
  if (output["securityGroupRule"] !== undefined) {
    contents.SecurityGroupRule = de_AnalysisSecurityGroupRule(output["securityGroupRule"], context);
  }
  if (output["sourceVpc"] !== undefined) {
    contents.SourceVpc = de_AnalysisComponent(output["sourceVpc"], context);
  }
  if (output["subnet"] !== undefined) {
    contents.Subnet = de_AnalysisComponent(output["subnet"], context);
  }
  if (output["vpc"] !== undefined) {
    contents.Vpc = de_AnalysisComponent(output["vpc"], context);
  }
  if (output.additionalDetailSet === "") {
    contents.AdditionalDetails = [];
  } else if (output["additionalDetailSet"] !== undefined && output["additionalDetailSet"]["item"] !== undefined) {
    contents.AdditionalDetails = de_AdditionalDetailList(
      __getArrayIfSingleItem(output["additionalDetailSet"]["item"]),
      context
    );
  }
  if (output["transitGateway"] !== undefined) {
    contents.TransitGateway = de_AnalysisComponent(output["transitGateway"], context);
  }
  if (output["transitGatewayRouteTableRoute"] !== undefined) {
    contents.TransitGatewayRouteTableRoute = de_TransitGatewayRouteTableRoute(
      output["transitGatewayRouteTableRoute"],
      context
    );
  }
  if (output.explanationSet === "") {
    contents.Explanations = [];
  } else if (output["explanationSet"] !== undefined && output["explanationSet"]["item"] !== undefined) {
    contents.Explanations = de_ExplanationList(__getArrayIfSingleItem(output["explanationSet"]["item"]), context);
  }
  if (output["elasticLoadBalancerListener"] !== undefined) {
    contents.ElasticLoadBalancerListener = de_AnalysisComponent(output["elasticLoadBalancerListener"], context);
  }
  if (output["firewallStatelessRule"] !== undefined) {
    contents.FirewallStatelessRule = de_FirewallStatelessRule(output["firewallStatelessRule"], context);
  }
  if (output["firewallStatefulRule"] !== undefined) {
    contents.FirewallStatefulRule = de_FirewallStatefulRule(output["firewallStatefulRule"], context);
  }
  if (output["serviceName"] !== undefined) {
    contents.ServiceName = __expectString(output["serviceName"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PathComponentList
 */
const de_PathComponentList = (output: any, context: __SerdeContext): PathComponent[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PathComponent(entry, context);
    });
};

/**
 * deserializeAws_ec2PathFilter
 */
const de_PathFilter = (output: any, context: __SerdeContext): PathFilter => {
  const contents: any = {};
  if (output["sourceAddress"] !== undefined) {
    contents.SourceAddress = __expectString(output["sourceAddress"]);
  }
  if (output["sourcePortRange"] !== undefined) {
    contents.SourcePortRange = de_FilterPortRange(output["sourcePortRange"], context);
  }
  if (output["destinationAddress"] !== undefined) {
    contents.DestinationAddress = __expectString(output["destinationAddress"]);
  }
  if (output["destinationPortRange"] !== undefined) {
    contents.DestinationPortRange = de_FilterPortRange(output["destinationPortRange"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PathStatement
 */
const de_PathStatement = (output: any, context: __SerdeContext): PathStatement => {
  const contents: any = {};
  if (output["packetHeaderStatement"] !== undefined) {
    contents.PacketHeaderStatement = de_PacketHeaderStatement(output["packetHeaderStatement"], context);
  }
  if (output["resourceStatement"] !== undefined) {
    contents.ResourceStatement = de_ResourceStatement(output["resourceStatement"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PciId
 */
const de_PciId = (output: any, context: __SerdeContext): PciId => {
  const contents: any = {};
  if (output["DeviceId"] !== undefined) {
    contents.DeviceId = __expectString(output["DeviceId"]);
  }
  if (output["VendorId"] !== undefined) {
    contents.VendorId = __expectString(output["VendorId"]);
  }
  if (output["SubsystemId"] !== undefined) {
    contents.SubsystemId = __expectString(output["SubsystemId"]);
  }
  if (output["SubsystemVendorId"] !== undefined) {
    contents.SubsystemVendorId = __expectString(output["SubsystemVendorId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PeeringAttachmentStatus
 */
const de_PeeringAttachmentStatus = (output: any, context: __SerdeContext): PeeringAttachmentStatus => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PeeringConnectionOptions
 */
const de_PeeringConnectionOptions = (output: any, context: __SerdeContext): PeeringConnectionOptions => {
  const contents: any = {};
  if (output["allowDnsResolutionFromRemoteVpc"] !== undefined) {
    contents.AllowDnsResolutionFromRemoteVpc = __parseBoolean(output["allowDnsResolutionFromRemoteVpc"]);
  }
  if (output["allowEgressFromLocalClassicLinkToRemoteVpc"] !== undefined) {
    contents.AllowEgressFromLocalClassicLinkToRemoteVpc = __parseBoolean(
      output["allowEgressFromLocalClassicLinkToRemoteVpc"]
    );
  }
  if (output["allowEgressFromLocalVpcToRemoteClassicLink"] !== undefined) {
    contents.AllowEgressFromLocalVpcToRemoteClassicLink = __parseBoolean(
      output["allowEgressFromLocalVpcToRemoteClassicLink"]
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2PeeringTgwInfo
 */
const de_PeeringTgwInfo = (output: any, context: __SerdeContext): PeeringTgwInfo => {
  const contents: any = {};
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
  }
  if (output["coreNetworkId"] !== undefined) {
    contents.CoreNetworkId = __expectString(output["coreNetworkId"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["region"] !== undefined) {
    contents.Region = __expectString(output["region"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Phase1DHGroupNumbersList
 */
const de_Phase1DHGroupNumbersList = (output: any, context: __SerdeContext): Phase1DHGroupNumbersListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Phase1DHGroupNumbersListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2Phase1DHGroupNumbersListValue
 */
const de_Phase1DHGroupNumbersListValue = (output: any, context: __SerdeContext): Phase1DHGroupNumbersListValue => {
  const contents: any = {};
  if (output["value"] !== undefined) {
    contents.Value = __strictParseInt32(output["value"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2Phase1EncryptionAlgorithmsList
 */
const de_Phase1EncryptionAlgorithmsList = (
  output: any,
  context: __SerdeContext
): Phase1EncryptionAlgorithmsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Phase1EncryptionAlgorithmsListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2Phase1EncryptionAlgorithmsListValue
 */
const de_Phase1EncryptionAlgorithmsListValue = (
  output: any,
  context: __SerdeContext
): Phase1EncryptionAlgorithmsListValue => {
  const contents: any = {};
  if (output["value"] !== undefined) {
    contents.Value = __expectString(output["value"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Phase1IntegrityAlgorithmsList
 */
const de_Phase1IntegrityAlgorithmsList = (
  output: any,
  context: __SerdeContext
): Phase1IntegrityAlgorithmsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Phase1IntegrityAlgorithmsListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2Phase1IntegrityAlgorithmsListValue
 */
const de_Phase1IntegrityAlgorithmsListValue = (
  output: any,
  context: __SerdeContext
): Phase1IntegrityAlgorithmsListValue => {
  const contents: any = {};
  if (output["value"] !== undefined) {
    contents.Value = __expectString(output["value"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Phase2DHGroupNumbersList
 */
const de_Phase2DHGroupNumbersList = (output: any, context: __SerdeContext): Phase2DHGroupNumbersListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Phase2DHGroupNumbersListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2Phase2DHGroupNumbersListValue
 */
const de_Phase2DHGroupNumbersListValue = (output: any, context: __SerdeContext): Phase2DHGroupNumbersListValue => {
  const contents: any = {};
  if (output["value"] !== undefined) {
    contents.Value = __strictParseInt32(output["value"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2Phase2EncryptionAlgorithmsList
 */
const de_Phase2EncryptionAlgorithmsList = (
  output: any,
  context: __SerdeContext
): Phase2EncryptionAlgorithmsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Phase2EncryptionAlgorithmsListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2Phase2EncryptionAlgorithmsListValue
 */
const de_Phase2EncryptionAlgorithmsListValue = (
  output: any,
  context: __SerdeContext
): Phase2EncryptionAlgorithmsListValue => {
  const contents: any = {};
  if (output["value"] !== undefined) {
    contents.Value = __expectString(output["value"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Phase2IntegrityAlgorithmsList
 */
const de_Phase2IntegrityAlgorithmsList = (
  output: any,
  context: __SerdeContext
): Phase2IntegrityAlgorithmsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Phase2IntegrityAlgorithmsListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2Phase2IntegrityAlgorithmsListValue
 */
const de_Phase2IntegrityAlgorithmsListValue = (
  output: any,
  context: __SerdeContext
): Phase2IntegrityAlgorithmsListValue => {
  const contents: any = {};
  if (output["value"] !== undefined) {
    contents.Value = __expectString(output["value"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Placement
 */
const de_Placement = (output: any, context: __SerdeContext): Placement => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["affinity"] !== undefined) {
    contents.Affinity = __expectString(output["affinity"]);
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = __expectString(output["groupName"]);
  }
  if (output["partitionNumber"] !== undefined) {
    contents.PartitionNumber = __strictParseInt32(output["partitionNumber"]) as number;
  }
  if (output["hostId"] !== undefined) {
    contents.HostId = __expectString(output["hostId"]);
  }
  if (output["tenancy"] !== undefined) {
    contents.Tenancy = __expectString(output["tenancy"]);
  }
  if (output["spreadDomain"] !== undefined) {
    contents.SpreadDomain = __expectString(output["spreadDomain"]);
  }
  if (output["hostResourceGroupArn"] !== undefined) {
    contents.HostResourceGroupArn = __expectString(output["hostResourceGroupArn"]);
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = __expectString(output["groupId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PlacementGroup
 */
const de_PlacementGroup = (output: any, context: __SerdeContext): PlacementGroup => {
  const contents: any = {};
  if (output["groupName"] !== undefined) {
    contents.GroupName = __expectString(output["groupName"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["strategy"] !== undefined) {
    contents.Strategy = __expectString(output["strategy"]);
  }
  if (output["partitionCount"] !== undefined) {
    contents.PartitionCount = __strictParseInt32(output["partitionCount"]) as number;
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = __expectString(output["groupId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["groupArn"] !== undefined) {
    contents.GroupArn = __expectString(output["groupArn"]);
  }
  if (output["spreadLevel"] !== undefined) {
    contents.SpreadLevel = __expectString(output["spreadLevel"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PlacementGroupInfo
 */
const de_PlacementGroupInfo = (output: any, context: __SerdeContext): PlacementGroupInfo => {
  const contents: any = {};
  if (output.supportedStrategies === "") {
    contents.SupportedStrategies = [];
  } else if (output["supportedStrategies"] !== undefined && output["supportedStrategies"]["item"] !== undefined) {
    contents.SupportedStrategies = de_PlacementGroupStrategyList(
      __getArrayIfSingleItem(output["supportedStrategies"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2PlacementGroupList
 */
const de_PlacementGroupList = (output: any, context: __SerdeContext): PlacementGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PlacementGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2PlacementGroupStrategyList
 */
const de_PlacementGroupStrategyList = (output: any, context: __SerdeContext): PlacementGroupStrategy[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2PlacementResponse
 */
const de_PlacementResponse = (output: any, context: __SerdeContext): PlacementResponse => {
  const contents: any = {};
  if (output["groupName"] !== undefined) {
    contents.GroupName = __expectString(output["groupName"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PoolCidrBlock
 */
const de_PoolCidrBlock = (output: any, context: __SerdeContext): PoolCidrBlock => {
  const contents: any = {};
  if (output["poolCidrBlock"] !== undefined) {
    contents.Cidr = __expectString(output["poolCidrBlock"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PoolCidrBlocksSet
 */
const de_PoolCidrBlocksSet = (output: any, context: __SerdeContext): PoolCidrBlock[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PoolCidrBlock(entry, context);
    });
};

/**
 * deserializeAws_ec2PortRange
 */
const de_PortRange = (output: any, context: __SerdeContext): PortRange => {
  const contents: any = {};
  if (output["from"] !== undefined) {
    contents.From = __strictParseInt32(output["from"]) as number;
  }
  if (output["to"] !== undefined) {
    contents.To = __strictParseInt32(output["to"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2PortRangeList
 */
const de_PortRangeList = (output: any, context: __SerdeContext): PortRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PortRange(entry, context);
    });
};

/**
 * deserializeAws_ec2PrefixList
 */
const de_PrefixList = (output: any, context: __SerdeContext): PrefixList => {
  const contents: any = {};
  if (output.cidrSet === "") {
    contents.Cidrs = [];
  } else if (output["cidrSet"] !== undefined && output["cidrSet"]["item"] !== undefined) {
    contents.Cidrs = de_ValueStringList(__getArrayIfSingleItem(output["cidrSet"]["item"]), context);
  }
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = __expectString(output["prefixListId"]);
  }
  if (output["prefixListName"] !== undefined) {
    contents.PrefixListName = __expectString(output["prefixListName"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrefixListAssociation
 */
const de_PrefixListAssociation = (output: any, context: __SerdeContext): PrefixListAssociation => {
  const contents: any = {};
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceOwner"] !== undefined) {
    contents.ResourceOwner = __expectString(output["resourceOwner"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrefixListAssociationSet
 */
const de_PrefixListAssociationSet = (output: any, context: __SerdeContext): PrefixListAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrefixListAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2PrefixListEntry
 */
const de_PrefixListEntry = (output: any, context: __SerdeContext): PrefixListEntry => {
  const contents: any = {};
  if (output["cidr"] !== undefined) {
    contents.Cidr = __expectString(output["cidr"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrefixListEntrySet
 */
const de_PrefixListEntrySet = (output: any, context: __SerdeContext): PrefixListEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrefixListEntry(entry, context);
    });
};

/**
 * deserializeAws_ec2PrefixListId
 */
const de_PrefixListId = (output: any, context: __SerdeContext): PrefixListId => {
  const contents: any = {};
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = __expectString(output["prefixListId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrefixListIdList
 */
const de_PrefixListIdList = (output: any, context: __SerdeContext): PrefixListId[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrefixListId(entry, context);
    });
};

/**
 * deserializeAws_ec2PrefixListIdSet
 */
const de_PrefixListIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2PrefixListSet
 */
const de_PrefixListSet = (output: any, context: __SerdeContext): PrefixList[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrefixList(entry, context);
    });
};

/**
 * deserializeAws_ec2PriceSchedule
 */
const de_PriceSchedule = (output: any, context: __SerdeContext): PriceSchedule => {
  const contents: any = {};
  if (output["active"] !== undefined) {
    contents.Active = __parseBoolean(output["active"]);
  }
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = __expectString(output["currencyCode"]);
  }
  if (output["price"] !== undefined) {
    contents.Price = __strictParseFloat(output["price"]) as number;
  }
  if (output["term"] !== undefined) {
    contents.Term = __strictParseLong(output["term"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2PriceScheduleList
 */
const de_PriceScheduleList = (output: any, context: __SerdeContext): PriceSchedule[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PriceSchedule(entry, context);
    });
};

/**
 * deserializeAws_ec2PricingDetail
 */
const de_PricingDetail = (output: any, context: __SerdeContext): PricingDetail => {
  const contents: any = {};
  if (output["count"] !== undefined) {
    contents.Count = __strictParseInt32(output["count"]) as number;
  }
  if (output["price"] !== undefined) {
    contents.Price = __strictParseFloat(output["price"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2PricingDetailsList
 */
const de_PricingDetailsList = (output: any, context: __SerdeContext): PricingDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PricingDetail(entry, context);
    });
};

/**
 * deserializeAws_ec2PrincipalIdFormat
 */
const de_PrincipalIdFormat = (output: any, context: __SerdeContext): PrincipalIdFormat => {
  const contents: any = {};
  if (output["arn"] !== undefined) {
    contents.Arn = __expectString(output["arn"]);
  }
  if (output.statusSet === "") {
    contents.Statuses = [];
  } else if (output["statusSet"] !== undefined && output["statusSet"]["item"] !== undefined) {
    contents.Statuses = de_IdFormatList(__getArrayIfSingleItem(output["statusSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrincipalIdFormatList
 */
const de_PrincipalIdFormatList = (output: any, context: __SerdeContext): PrincipalIdFormat[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrincipalIdFormat(entry, context);
    });
};

/**
 * deserializeAws_ec2PrivateDnsDetails
 */
const de_PrivateDnsDetails = (output: any, context: __SerdeContext): PrivateDnsDetails => {
  const contents: any = {};
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = __expectString(output["privateDnsName"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrivateDnsDetailsSet
 */
const de_PrivateDnsDetailsSet = (output: any, context: __SerdeContext): PrivateDnsDetails[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrivateDnsDetails(entry, context);
    });
};

/**
 * deserializeAws_ec2PrivateDnsNameConfiguration
 */
const de_PrivateDnsNameConfiguration = (output: any, context: __SerdeContext): PrivateDnsNameConfiguration => {
  const contents: any = {};
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  if (output["value"] !== undefined) {
    contents.Value = __expectString(output["value"]);
  }
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrivateDnsNameOptionsOnLaunch
 */
const de_PrivateDnsNameOptionsOnLaunch = (output: any, context: __SerdeContext): PrivateDnsNameOptionsOnLaunch => {
  const contents: any = {};
  if (output["hostnameType"] !== undefined) {
    contents.HostnameType = __expectString(output["hostnameType"]);
  }
  if (output["enableResourceNameDnsARecord"] !== undefined) {
    contents.EnableResourceNameDnsARecord = __parseBoolean(output["enableResourceNameDnsARecord"]);
  }
  if (output["enableResourceNameDnsAAAARecord"] !== undefined) {
    contents.EnableResourceNameDnsAAAARecord = __parseBoolean(output["enableResourceNameDnsAAAARecord"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrivateDnsNameOptionsResponse
 */
const de_PrivateDnsNameOptionsResponse = (output: any, context: __SerdeContext): PrivateDnsNameOptionsResponse => {
  const contents: any = {};
  if (output["hostnameType"] !== undefined) {
    contents.HostnameType = __expectString(output["hostnameType"]);
  }
  if (output["enableResourceNameDnsARecord"] !== undefined) {
    contents.EnableResourceNameDnsARecord = __parseBoolean(output["enableResourceNameDnsARecord"]);
  }
  if (output["enableResourceNameDnsAAAARecord"] !== undefined) {
    contents.EnableResourceNameDnsAAAARecord = __parseBoolean(output["enableResourceNameDnsAAAARecord"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrivateIpAddressSpecification
 */
const de_PrivateIpAddressSpecification = (output: any, context: __SerdeContext): PrivateIpAddressSpecification => {
  const contents: any = {};
  if (output["primary"] !== undefined) {
    contents.Primary = __parseBoolean(output["primary"]);
  }
  if (output["privateIpAddress"] !== undefined) {
    contents.PrivateIpAddress = __expectString(output["privateIpAddress"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrivateIpAddressSpecificationList
 */
const de_PrivateIpAddressSpecificationList = (
  output: any,
  context: __SerdeContext
): PrivateIpAddressSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrivateIpAddressSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2ProcessorInfo
 */
const de_ProcessorInfo = (output: any, context: __SerdeContext): ProcessorInfo => {
  const contents: any = {};
  if (output.supportedArchitectures === "") {
    contents.SupportedArchitectures = [];
  } else if (output["supportedArchitectures"] !== undefined && output["supportedArchitectures"]["item"] !== undefined) {
    contents.SupportedArchitectures = de_ArchitectureTypeList(
      __getArrayIfSingleItem(output["supportedArchitectures"]["item"]),
      context
    );
  }
  if (output["sustainedClockSpeedInGhz"] !== undefined) {
    contents.SustainedClockSpeedInGhz = __strictParseFloat(output["sustainedClockSpeedInGhz"]) as number;
  }
  if (output.supportedFeatures === "") {
    contents.SupportedFeatures = [];
  } else if (output["supportedFeatures"] !== undefined && output["supportedFeatures"]["item"] !== undefined) {
    contents.SupportedFeatures = de_SupportedAdditionalProcessorFeatureList(
      __getArrayIfSingleItem(output["supportedFeatures"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ProductCode
 */
const de_ProductCode = (output: any, context: __SerdeContext): ProductCode => {
  const contents: any = {};
  if (output["productCode"] !== undefined) {
    contents.ProductCodeId = __expectString(output["productCode"]);
  }
  if (output["type"] !== undefined) {
    contents.ProductCodeType = __expectString(output["type"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ProductCodeList
 */
const de_ProductCodeList = (output: any, context: __SerdeContext): ProductCode[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ProductCode(entry, context);
    });
};

/**
 * deserializeAws_ec2PropagatingVgw
 */
const de_PropagatingVgw = (output: any, context: __SerdeContext): PropagatingVgw => {
  const contents: any = {};
  if (output["gatewayId"] !== undefined) {
    contents.GatewayId = __expectString(output["gatewayId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PropagatingVgwList
 */
const de_PropagatingVgwList = (output: any, context: __SerdeContext): PropagatingVgw[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PropagatingVgw(entry, context);
    });
};

/**
 * deserializeAws_ec2ProtocolIntList
 */
const de_ProtocolIntList = (output: any, context: __SerdeContext): number[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __strictParseInt32(entry) as number;
    });
};

/**
 * deserializeAws_ec2ProtocolList
 */
const de_ProtocolList = (output: any, context: __SerdeContext): Protocol[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2ProvisionByoipCidrResult
 */
const de_ProvisionByoipCidrResult = (output: any, context: __SerdeContext): ProvisionByoipCidrResult => {
  const contents: any = {};
  if (output["byoipCidr"] !== undefined) {
    contents.ByoipCidr = de_ByoipCidr(output["byoipCidr"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ProvisionedBandwidth
 */
const de_ProvisionedBandwidth = (output: any, context: __SerdeContext): ProvisionedBandwidth => {
  const contents: any = {};
  if (output["provisionTime"] !== undefined) {
    contents.ProvisionTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["provisionTime"]));
  }
  if (output["provisioned"] !== undefined) {
    contents.Provisioned = __expectString(output["provisioned"]);
  }
  if (output["requestTime"] !== undefined) {
    contents.RequestTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["requestTime"]));
  }
  if (output["requested"] !== undefined) {
    contents.Requested = __expectString(output["requested"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ProvisionIpamPoolCidrResult
 */
const de_ProvisionIpamPoolCidrResult = (output: any, context: __SerdeContext): ProvisionIpamPoolCidrResult => {
  const contents: any = {};
  if (output["ipamPoolCidr"] !== undefined) {
    contents.IpamPoolCidr = de_IpamPoolCidr(output["ipamPoolCidr"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ProvisionPublicIpv4PoolCidrResult
 */
const de_ProvisionPublicIpv4PoolCidrResult = (
  output: any,
  context: __SerdeContext
): ProvisionPublicIpv4PoolCidrResult => {
  const contents: any = {};
  if (output["poolId"] !== undefined) {
    contents.PoolId = __expectString(output["poolId"]);
  }
  if (output["poolAddressRange"] !== undefined) {
    contents.PoolAddressRange = de_PublicIpv4PoolRange(output["poolAddressRange"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PtrUpdateStatus
 */
const de_PtrUpdateStatus = (output: any, context: __SerdeContext): PtrUpdateStatus => {
  const contents: any = {};
  if (output["value"] !== undefined) {
    contents.Value = __expectString(output["value"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["reason"] !== undefined) {
    contents.Reason = __expectString(output["reason"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PublicIpv4Pool
 */
const de_PublicIpv4Pool = (output: any, context: __SerdeContext): PublicIpv4Pool => {
  const contents: any = {};
  if (output["poolId"] !== undefined) {
    contents.PoolId = __expectString(output["poolId"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output.poolAddressRangeSet === "") {
    contents.PoolAddressRanges = [];
  } else if (output["poolAddressRangeSet"] !== undefined && output["poolAddressRangeSet"]["item"] !== undefined) {
    contents.PoolAddressRanges = de_PublicIpv4PoolRangeSet(
      __getArrayIfSingleItem(output["poolAddressRangeSet"]["item"]),
      context
    );
  }
  if (output["totalAddressCount"] !== undefined) {
    contents.TotalAddressCount = __strictParseInt32(output["totalAddressCount"]) as number;
  }
  if (output["totalAvailableAddressCount"] !== undefined) {
    contents.TotalAvailableAddressCount = __strictParseInt32(output["totalAvailableAddressCount"]) as number;
  }
  if (output["networkBorderGroup"] !== undefined) {
    contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PublicIpv4PoolRange
 */
const de_PublicIpv4PoolRange = (output: any, context: __SerdeContext): PublicIpv4PoolRange => {
  const contents: any = {};
  if (output["firstAddress"] !== undefined) {
    contents.FirstAddress = __expectString(output["firstAddress"]);
  }
  if (output["lastAddress"] !== undefined) {
    contents.LastAddress = __expectString(output["lastAddress"]);
  }
  if (output["addressCount"] !== undefined) {
    contents.AddressCount = __strictParseInt32(output["addressCount"]) as number;
  }
  if (output["availableAddressCount"] !== undefined) {
    contents.AvailableAddressCount = __strictParseInt32(output["availableAddressCount"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2PublicIpv4PoolRangeSet
 */
const de_PublicIpv4PoolRangeSet = (output: any, context: __SerdeContext): PublicIpv4PoolRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PublicIpv4PoolRange(entry, context);
    });
};

/**
 * deserializeAws_ec2PublicIpv4PoolSet
 */
const de_PublicIpv4PoolSet = (output: any, context: __SerdeContext): PublicIpv4Pool[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PublicIpv4Pool(entry, context);
    });
};

/**
 * deserializeAws_ec2Purchase
 */
const de_Purchase = (output: any, context: __SerdeContext): Purchase => {
  const contents: any = {};
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = __expectString(output["currencyCode"]);
  }
  if (output["duration"] !== undefined) {
    contents.Duration = __strictParseInt32(output["duration"]) as number;
  }
  if (output.hostIdSet === "") {
    contents.HostIdSet = [];
  } else if (output["hostIdSet"] !== undefined && output["hostIdSet"]["item"] !== undefined) {
    contents.HostIdSet = de_ResponseHostIdSet(__getArrayIfSingleItem(output["hostIdSet"]["item"]), context);
  }
  if (output["hostReservationId"] !== undefined) {
    contents.HostReservationId = __expectString(output["hostReservationId"]);
  }
  if (output["hourlyPrice"] !== undefined) {
    contents.HourlyPrice = __expectString(output["hourlyPrice"]);
  }
  if (output["instanceFamily"] !== undefined) {
    contents.InstanceFamily = __expectString(output["instanceFamily"]);
  }
  if (output["paymentOption"] !== undefined) {
    contents.PaymentOption = __expectString(output["paymentOption"]);
  }
  if (output["upfrontPrice"] !== undefined) {
    contents.UpfrontPrice = __expectString(output["upfrontPrice"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PurchasedScheduledInstanceSet
 */
const de_PurchasedScheduledInstanceSet = (output: any, context: __SerdeContext): ScheduledInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ScheduledInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2PurchaseHostReservationResult
 */
const de_PurchaseHostReservationResult = (output: any, context: __SerdeContext): PurchaseHostReservationResult => {
  const contents: any = {};
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = __expectString(output["currencyCode"]);
  }
  if (output.purchase === "") {
    contents.Purchase = [];
  } else if (output["purchase"] !== undefined && output["purchase"]["item"] !== undefined) {
    contents.Purchase = de_PurchaseSet(__getArrayIfSingleItem(output["purchase"]["item"]), context);
  }
  if (output["totalHourlyPrice"] !== undefined) {
    contents.TotalHourlyPrice = __expectString(output["totalHourlyPrice"]);
  }
  if (output["totalUpfrontPrice"] !== undefined) {
    contents.TotalUpfrontPrice = __expectString(output["totalUpfrontPrice"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PurchaseReservedInstancesOfferingResult
 */
const de_PurchaseReservedInstancesOfferingResult = (
  output: any,
  context: __SerdeContext
): PurchaseReservedInstancesOfferingResult => {
  const contents: any = {};
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PurchaseScheduledInstancesResult
 */
const de_PurchaseScheduledInstancesResult = (
  output: any,
  context: __SerdeContext
): PurchaseScheduledInstancesResult => {
  const contents: any = {};
  if (output.scheduledInstanceSet === "") {
    contents.ScheduledInstanceSet = [];
  } else if (output["scheduledInstanceSet"] !== undefined && output["scheduledInstanceSet"]["item"] !== undefined) {
    contents.ScheduledInstanceSet = de_PurchasedScheduledInstanceSet(
      __getArrayIfSingleItem(output["scheduledInstanceSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2PurchaseSet
 */
const de_PurchaseSet = (output: any, context: __SerdeContext): Purchase[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Purchase(entry, context);
    });
};

/**
 * deserializeAws_ec2RecurringCharge
 */
const de_RecurringCharge = (output: any, context: __SerdeContext): RecurringCharge => {
  const contents: any = {};
  if (output["amount"] !== undefined) {
    contents.Amount = __strictParseFloat(output["amount"]) as number;
  }
  if (output["frequency"] !== undefined) {
    contents.Frequency = __expectString(output["frequency"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RecurringChargesList
 */
const de_RecurringChargesList = (output: any, context: __SerdeContext): RecurringCharge[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_RecurringCharge(entry, context);
    });
};

/**
 * deserializeAws_ec2ReferencedSecurityGroup
 */
const de_ReferencedSecurityGroup = (output: any, context: __SerdeContext): ReferencedSecurityGroup => {
  const contents: any = {};
  if (output["groupId"] !== undefined) {
    contents.GroupId = __expectString(output["groupId"]);
  }
  if (output["peeringStatus"] !== undefined) {
    contents.PeeringStatus = __expectString(output["peeringStatus"]);
  }
  if (output["userId"] !== undefined) {
    contents.UserId = __expectString(output["userId"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["vpcPeeringConnectionId"] !== undefined) {
    contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Region
 */
const de_Region = (output: any, context: __SerdeContext): Region => {
  const contents: any = {};
  if (output["regionEndpoint"] !== undefined) {
    contents.Endpoint = __expectString(output["regionEndpoint"]);
  }
  if (output["regionName"] !== undefined) {
    contents.RegionName = __expectString(output["regionName"]);
  }
  if (output["optInStatus"] !== undefined) {
    contents.OptInStatus = __expectString(output["optInStatus"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RegionList
 */
const de_RegionList = (output: any, context: __SerdeContext): Region[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Region(entry, context);
    });
};

/**
 * deserializeAws_ec2RegisterImageResult
 */
const de_RegisterImageResult = (output: any, context: __SerdeContext): RegisterImageResult => {
  const contents: any = {};
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RegisterInstanceEventNotificationAttributesResult
 */
const de_RegisterInstanceEventNotificationAttributesResult = (
  output: any,
  context: __SerdeContext
): RegisterInstanceEventNotificationAttributesResult => {
  const contents: any = {};
  if (output["instanceTagAttribute"] !== undefined) {
    contents.InstanceTagAttribute = de_InstanceTagNotificationAttribute(output["instanceTagAttribute"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersResult
 */
const de_RegisterTransitGatewayMulticastGroupMembersResult = (
  output: any,
  context: __SerdeContext
): RegisterTransitGatewayMulticastGroupMembersResult => {
  const contents: any = {};
  if (output["registeredMulticastGroupMembers"] !== undefined) {
    contents.RegisteredMulticastGroupMembers = de_TransitGatewayMulticastRegisteredGroupMembers(
      output["registeredMulticastGroupMembers"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesResult
 */
const de_RegisterTransitGatewayMulticastGroupSourcesResult = (
  output: any,
  context: __SerdeContext
): RegisterTransitGatewayMulticastGroupSourcesResult => {
  const contents: any = {};
  if (output["registeredMulticastGroupSources"] !== undefined) {
    contents.RegisteredMulticastGroupSources = de_TransitGatewayMulticastRegisteredGroupSources(
      output["registeredMulticastGroupSources"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsResult
 */
const de_RejectTransitGatewayMulticastDomainAssociationsResult = (
  output: any,
  context: __SerdeContext
): RejectTransitGatewayMulticastDomainAssociationsResult => {
  const contents: any = {};
  if (output["associations"] !== undefined) {
    contents.Associations = de_TransitGatewayMulticastDomainAssociations(output["associations"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RejectTransitGatewayPeeringAttachmentResult
 */
const de_RejectTransitGatewayPeeringAttachmentResult = (
  output: any,
  context: __SerdeContext
): RejectTransitGatewayPeeringAttachmentResult => {
  const contents: any = {};
  if (output["transitGatewayPeeringAttachment"] !== undefined) {
    contents.TransitGatewayPeeringAttachment = de_TransitGatewayPeeringAttachment(
      output["transitGatewayPeeringAttachment"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2RejectTransitGatewayVpcAttachmentResult
 */
const de_RejectTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): RejectTransitGatewayVpcAttachmentResult => {
  const contents: any = {};
  if (output["transitGatewayVpcAttachment"] !== undefined) {
    contents.TransitGatewayVpcAttachment = de_TransitGatewayVpcAttachment(
      output["transitGatewayVpcAttachment"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2RejectVpcEndpointConnectionsResult
 */
const de_RejectVpcEndpointConnectionsResult = (
  output: any,
  context: __SerdeContext
): RejectVpcEndpointConnectionsResult => {
  const contents: any = {};
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  } else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RejectVpcPeeringConnectionResult
 */
const de_RejectVpcPeeringConnectionResult = (
  output: any,
  context: __SerdeContext
): RejectVpcPeeringConnectionResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReleaseHostsResult
 */
const de_ReleaseHostsResult = (output: any, context: __SerdeContext): ReleaseHostsResult => {
  const contents: any = {};
  if (output.successful === "") {
    contents.Successful = [];
  } else if (output["successful"] !== undefined && output["successful"]["item"] !== undefined) {
    contents.Successful = de_ResponseHostIdList(__getArrayIfSingleItem(output["successful"]["item"]), context);
  }
  if (output.unsuccessful === "") {
    contents.Unsuccessful = [];
  } else if (output["unsuccessful"] !== undefined && output["unsuccessful"]["item"] !== undefined) {
    contents.Unsuccessful = de_UnsuccessfulItemList(__getArrayIfSingleItem(output["unsuccessful"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReleaseIpamPoolAllocationResult
 */
const de_ReleaseIpamPoolAllocationResult = (output: any, context: __SerdeContext): ReleaseIpamPoolAllocationResult => {
  const contents: any = {};
  if (output["success"] !== undefined) {
    contents.Success = __parseBoolean(output["success"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReplaceIamInstanceProfileAssociationResult
 */
const de_ReplaceIamInstanceProfileAssociationResult = (
  output: any,
  context: __SerdeContext
): ReplaceIamInstanceProfileAssociationResult => {
  const contents: any = {};
  if (output["iamInstanceProfileAssociation"] !== undefined) {
    contents.IamInstanceProfileAssociation = de_IamInstanceProfileAssociation(
      output["iamInstanceProfileAssociation"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ReplaceNetworkAclAssociationResult
 */
const de_ReplaceNetworkAclAssociationResult = (
  output: any,
  context: __SerdeContext
): ReplaceNetworkAclAssociationResult => {
  const contents: any = {};
  if (output["newAssociationId"] !== undefined) {
    contents.NewAssociationId = __expectString(output["newAssociationId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReplaceRootVolumeTask
 */
const de_ReplaceRootVolumeTask = (output: any, context: __SerdeContext): ReplaceRootVolumeTask => {
  const contents: any = {};
  if (output["replaceRootVolumeTaskId"] !== undefined) {
    contents.ReplaceRootVolumeTaskId = __expectString(output["replaceRootVolumeTaskId"]);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["taskState"] !== undefined) {
    contents.TaskState = __expectString(output["taskState"]);
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = __expectString(output["startTime"]);
  }
  if (output["completeTime"] !== undefined) {
    contents.CompleteTime = __expectString(output["completeTime"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["deleteReplacedRootVolume"] !== undefined) {
    contents.DeleteReplacedRootVolume = __parseBoolean(output["deleteReplacedRootVolume"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReplaceRootVolumeTasks
 */
const de_ReplaceRootVolumeTasks = (output: any, context: __SerdeContext): ReplaceRootVolumeTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReplaceRootVolumeTask(entry, context);
    });
};

/**
 * deserializeAws_ec2ReplaceRouteTableAssociationResult
 */
const de_ReplaceRouteTableAssociationResult = (
  output: any,
  context: __SerdeContext
): ReplaceRouteTableAssociationResult => {
  const contents: any = {};
  if (output["newAssociationId"] !== undefined) {
    contents.NewAssociationId = __expectString(output["newAssociationId"]);
  }
  if (output["associationState"] !== undefined) {
    contents.AssociationState = de_RouteTableAssociationState(output["associationState"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReplaceTransitGatewayRouteResult
 */
const de_ReplaceTransitGatewayRouteResult = (
  output: any,
  context: __SerdeContext
): ReplaceTransitGatewayRouteResult => {
  const contents: any = {};
  if (output["route"] !== undefined) {
    contents.Route = de_TransitGatewayRoute(output["route"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReplaceVpnTunnelResult
 */
const de_ReplaceVpnTunnelResult = (output: any, context: __SerdeContext): ReplaceVpnTunnelResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RequestSpotFleetResponse
 */
const de_RequestSpotFleetResponse = (output: any, context: __SerdeContext): RequestSpotFleetResponse => {
  const contents: any = {};
  if (output["spotFleetRequestId"] !== undefined) {
    contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RequestSpotInstancesResult
 */
const de_RequestSpotInstancesResult = (output: any, context: __SerdeContext): RequestSpotInstancesResult => {
  const contents: any = {};
  if (output.spotInstanceRequestSet === "") {
    contents.SpotInstanceRequests = [];
  } else if (output["spotInstanceRequestSet"] !== undefined && output["spotInstanceRequestSet"]["item"] !== undefined) {
    contents.SpotInstanceRequests = de_SpotInstanceRequestList(
      __getArrayIfSingleItem(output["spotInstanceRequestSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2Reservation
 */
const de_Reservation = (output: any, context: __SerdeContext): Reservation => {
  const contents: any = {};
  if (output.groupSet === "") {
    contents.Groups = [];
  } else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
  }
  if (output.instancesSet === "") {
    contents.Instances = [];
  } else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.Instances = de_InstanceList(__getArrayIfSingleItem(output["instancesSet"]["item"]), context);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["requesterId"] !== undefined) {
    contents.RequesterId = __expectString(output["requesterId"]);
  }
  if (output["reservationId"] !== undefined) {
    contents.ReservationId = __expectString(output["reservationId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservationList
 */
const de_ReservationList = (output: any, context: __SerdeContext): Reservation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Reservation(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservationValue
 */
const de_ReservationValue = (output: any, context: __SerdeContext): ReservationValue => {
  const contents: any = {};
  if (output["hourlyPrice"] !== undefined) {
    contents.HourlyPrice = __expectString(output["hourlyPrice"]);
  }
  if (output["remainingTotalValue"] !== undefined) {
    contents.RemainingTotalValue = __expectString(output["remainingTotalValue"]);
  }
  if (output["remainingUpfrontValue"] !== undefined) {
    contents.RemainingUpfrontValue = __expectString(output["remainingUpfrontValue"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstanceReservationValue
 */
const de_ReservedInstanceReservationValue = (
  output: any,
  context: __SerdeContext
): ReservedInstanceReservationValue => {
  const contents: any = {};
  if (output["reservationValue"] !== undefined) {
    contents.ReservationValue = de_ReservationValue(output["reservationValue"], context);
  }
  if (output["reservedInstanceId"] !== undefined) {
    contents.ReservedInstanceId = __expectString(output["reservedInstanceId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstanceReservationValueSet
 */
const de_ReservedInstanceReservationValueSet = (
  output: any,
  context: __SerdeContext
): ReservedInstanceReservationValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstanceReservationValue(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservedInstances
 */
const de_ReservedInstances = (output: any, context: __SerdeContext): ReservedInstances => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["duration"] !== undefined) {
    contents.Duration = __strictParseLong(output["duration"]) as number;
  }
  if (output["end"] !== undefined) {
    contents.End = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["end"]));
  }
  if (output["fixedPrice"] !== undefined) {
    contents.FixedPrice = __strictParseFloat(output["fixedPrice"]) as number;
  }
  if (output["instanceCount"] !== undefined) {
    contents.InstanceCount = __strictParseInt32(output["instanceCount"]) as number;
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["productDescription"] !== undefined) {
    contents.ProductDescription = __expectString(output["productDescription"]);
  }
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
  }
  if (output["start"] !== undefined) {
    contents.Start = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["start"]));
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["usagePrice"] !== undefined) {
    contents.UsagePrice = __strictParseFloat(output["usagePrice"]) as number;
  }
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = __expectString(output["currencyCode"]);
  }
  if (output["instanceTenancy"] !== undefined) {
    contents.InstanceTenancy = __expectString(output["instanceTenancy"]);
  }
  if (output["offeringClass"] !== undefined) {
    contents.OfferingClass = __expectString(output["offeringClass"]);
  }
  if (output["offeringType"] !== undefined) {
    contents.OfferingType = __expectString(output["offeringType"]);
  }
  if (output.recurringCharges === "") {
    contents.RecurringCharges = [];
  } else if (output["recurringCharges"] !== undefined && output["recurringCharges"]["item"] !== undefined) {
    contents.RecurringCharges = de_RecurringChargesList(
      __getArrayIfSingleItem(output["recurringCharges"]["item"]),
      context
    );
  }
  if (output["scope"] !== undefined) {
    contents.Scope = __expectString(output["scope"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesConfiguration
 */
const de_ReservedInstancesConfiguration = (output: any, context: __SerdeContext): ReservedInstancesConfiguration => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["instanceCount"] !== undefined) {
    contents.InstanceCount = __strictParseInt32(output["instanceCount"]) as number;
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["platform"] !== undefined) {
    contents.Platform = __expectString(output["platform"]);
  }
  if (output["scope"] !== undefined) {
    contents.Scope = __expectString(output["scope"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesId
 */
const de_ReservedInstancesId = (output: any, context: __SerdeContext): ReservedInstancesId => {
  const contents: any = {};
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesList
 */
const de_ReservedInstancesList = (output: any, context: __SerdeContext): ReservedInstances[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstances(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservedInstancesListing
 */
const de_ReservedInstancesListing = (output: any, context: __SerdeContext): ReservedInstancesListing => {
  const contents: any = {};
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  if (output["createDate"] !== undefined) {
    contents.CreateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createDate"]));
  }
  if (output.instanceCounts === "") {
    contents.InstanceCounts = [];
  } else if (output["instanceCounts"] !== undefined && output["instanceCounts"]["item"] !== undefined) {
    contents.InstanceCounts = de_InstanceCountList(__getArrayIfSingleItem(output["instanceCounts"]["item"]), context);
  }
  if (output.priceSchedules === "") {
    contents.PriceSchedules = [];
  } else if (output["priceSchedules"] !== undefined && output["priceSchedules"]["item"] !== undefined) {
    contents.PriceSchedules = de_PriceScheduleList(__getArrayIfSingleItem(output["priceSchedules"]["item"]), context);
  }
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
  }
  if (output["reservedInstancesListingId"] !== undefined) {
    contents.ReservedInstancesListingId = __expectString(output["reservedInstancesListingId"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["updateDate"] !== undefined) {
    contents.UpdateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["updateDate"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesListingList
 */
const de_ReservedInstancesListingList = (output: any, context: __SerdeContext): ReservedInstancesListing[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstancesListing(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservedInstancesModification
 */
const de_ReservedInstancesModification = (output: any, context: __SerdeContext): ReservedInstancesModification => {
  const contents: any = {};
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  if (output["createDate"] !== undefined) {
    contents.CreateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createDate"]));
  }
  if (output["effectiveDate"] !== undefined) {
    contents.EffectiveDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["effectiveDate"]));
  }
  if (output.modificationResultSet === "") {
    contents.ModificationResults = [];
  } else if (output["modificationResultSet"] !== undefined && output["modificationResultSet"]["item"] !== undefined) {
    contents.ModificationResults = de_ReservedInstancesModificationResultList(
      __getArrayIfSingleItem(output["modificationResultSet"]["item"]),
      context
    );
  }
  if (output.reservedInstancesSet === "") {
    contents.ReservedInstancesIds = [];
  } else if (output["reservedInstancesSet"] !== undefined && output["reservedInstancesSet"]["item"] !== undefined) {
    contents.ReservedInstancesIds = de_ReservedIntancesIds(
      __getArrayIfSingleItem(output["reservedInstancesSet"]["item"]),
      context
    );
  }
  if (output["reservedInstancesModificationId"] !== undefined) {
    contents.ReservedInstancesModificationId = __expectString(output["reservedInstancesModificationId"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output["updateDate"] !== undefined) {
    contents.UpdateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["updateDate"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesModificationList
 */
const de_ReservedInstancesModificationList = (
  output: any,
  context: __SerdeContext
): ReservedInstancesModification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstancesModification(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservedInstancesModificationResult
 */
const de_ReservedInstancesModificationResult = (
  output: any,
  context: __SerdeContext
): ReservedInstancesModificationResult => {
  const contents: any = {};
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
  }
  if (output["targetConfiguration"] !== undefined) {
    contents.TargetConfiguration = de_ReservedInstancesConfiguration(output["targetConfiguration"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesModificationResultList
 */
const de_ReservedInstancesModificationResultList = (
  output: any,
  context: __SerdeContext
): ReservedInstancesModificationResult[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstancesModificationResult(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservedInstancesOffering
 */
const de_ReservedInstancesOffering = (output: any, context: __SerdeContext): ReservedInstancesOffering => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["duration"] !== undefined) {
    contents.Duration = __strictParseLong(output["duration"]) as number;
  }
  if (output["fixedPrice"] !== undefined) {
    contents.FixedPrice = __strictParseFloat(output["fixedPrice"]) as number;
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["productDescription"] !== undefined) {
    contents.ProductDescription = __expectString(output["productDescription"]);
  }
  if (output["reservedInstancesOfferingId"] !== undefined) {
    contents.ReservedInstancesOfferingId = __expectString(output["reservedInstancesOfferingId"]);
  }
  if (output["usagePrice"] !== undefined) {
    contents.UsagePrice = __strictParseFloat(output["usagePrice"]) as number;
  }
  if (output["currencyCode"] !== undefined) {
    contents.CurrencyCode = __expectString(output["currencyCode"]);
  }
  if (output["instanceTenancy"] !== undefined) {
    contents.InstanceTenancy = __expectString(output["instanceTenancy"]);
  }
  if (output["marketplace"] !== undefined) {
    contents.Marketplace = __parseBoolean(output["marketplace"]);
  }
  if (output["offeringClass"] !== undefined) {
    contents.OfferingClass = __expectString(output["offeringClass"]);
  }
  if (output["offeringType"] !== undefined) {
    contents.OfferingType = __expectString(output["offeringType"]);
  }
  if (output.pricingDetailsSet === "") {
    contents.PricingDetails = [];
  } else if (output["pricingDetailsSet"] !== undefined && output["pricingDetailsSet"]["item"] !== undefined) {
    contents.PricingDetails = de_PricingDetailsList(
      __getArrayIfSingleItem(output["pricingDetailsSet"]["item"]),
      context
    );
  }
  if (output.recurringCharges === "") {
    contents.RecurringCharges = [];
  } else if (output["recurringCharges"] !== undefined && output["recurringCharges"]["item"] !== undefined) {
    contents.RecurringCharges = de_RecurringChargesList(
      __getArrayIfSingleItem(output["recurringCharges"]["item"]),
      context
    );
  }
  if (output["scope"] !== undefined) {
    contents.Scope = __expectString(output["scope"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesOfferingList
 */
const de_ReservedInstancesOfferingList = (output: any, context: __SerdeContext): ReservedInstancesOffering[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstancesOffering(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservedIntancesIds
 */
const de_ReservedIntancesIds = (output: any, context: __SerdeContext): ReservedInstancesId[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstancesId(entry, context);
    });
};

/**
 * deserializeAws_ec2ResetAddressAttributeResult
 */
const de_ResetAddressAttributeResult = (output: any, context: __SerdeContext): ResetAddressAttributeResult => {
  const contents: any = {};
  if (output["address"] !== undefined) {
    contents.Address = de_AddressAttribute(output["address"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ResetEbsDefaultKmsKeyIdResult
 */
const de_ResetEbsDefaultKmsKeyIdResult = (output: any, context: __SerdeContext): ResetEbsDefaultKmsKeyIdResult => {
  const contents: any = {};
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = __expectString(output["kmsKeyId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ResetFpgaImageAttributeResult
 */
const de_ResetFpgaImageAttributeResult = (output: any, context: __SerdeContext): ResetFpgaImageAttributeResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ResourceStatement
 */
const de_ResourceStatement = (output: any, context: __SerdeContext): ResourceStatement => {
  const contents: any = {};
  if (output.resourceSet === "") {
    contents.Resources = [];
  } else if (output["resourceSet"] !== undefined && output["resourceSet"]["item"] !== undefined) {
    contents.Resources = de_ValueStringList(__getArrayIfSingleItem(output["resourceSet"]["item"]), context);
  }
  if (output.resourceTypeSet === "") {
    contents.ResourceTypes = [];
  } else if (output["resourceTypeSet"] !== undefined && output["resourceTypeSet"]["item"] !== undefined) {
    contents.ResourceTypes = de_ValueStringList(__getArrayIfSingleItem(output["resourceTypeSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ResponseError
 */
const de_ResponseError = (output: any, context: __SerdeContext): ResponseError => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ResponseHostIdList
 */
const de_ResponseHostIdList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2ResponseHostIdSet
 */
const de_ResponseHostIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2ResponseLaunchTemplateData
 */
const de_ResponseLaunchTemplateData = (output: any, context: __SerdeContext): ResponseLaunchTemplateData => {
  const contents: any = {};
  if (output["kernelId"] !== undefined) {
    contents.KernelId = __expectString(output["kernelId"]);
  }
  if (output["ebsOptimized"] !== undefined) {
    contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
  }
  if (output["iamInstanceProfile"] !== undefined) {
    contents.IamInstanceProfile = de_LaunchTemplateIamInstanceProfileSpecification(
      output["iamInstanceProfile"],
      context
    );
  }
  if (output.blockDeviceMappingSet === "") {
    contents.BlockDeviceMappings = [];
  } else if (output["blockDeviceMappingSet"] !== undefined && output["blockDeviceMappingSet"]["item"] !== undefined) {
    contents.BlockDeviceMappings = de_LaunchTemplateBlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMappingSet"]["item"]),
      context
    );
  }
  if (output.networkInterfaceSet === "") {
    contents.NetworkInterfaces = [];
  } else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
    contents.NetworkInterfaces = de_LaunchTemplateInstanceNetworkInterfaceSpecificationList(
      __getArrayIfSingleItem(output["networkInterfaceSet"]["item"]),
      context
    );
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = __expectString(output["keyName"]);
  }
  if (output["monitoring"] !== undefined) {
    contents.Monitoring = de_LaunchTemplatesMonitoring(output["monitoring"], context);
  }
  if (output["placement"] !== undefined) {
    contents.Placement = de_LaunchTemplatePlacement(output["placement"], context);
  }
  if (output["ramDiskId"] !== undefined) {
    contents.RamDiskId = __expectString(output["ramDiskId"]);
  }
  if (output["disableApiTermination"] !== undefined) {
    contents.DisableApiTermination = __parseBoolean(output["disableApiTermination"]);
  }
  if (output["instanceInitiatedShutdownBehavior"] !== undefined) {
    contents.InstanceInitiatedShutdownBehavior = __expectString(output["instanceInitiatedShutdownBehavior"]);
  }
  if (output["userData"] !== undefined) {
    contents.UserData = __expectString(output["userData"]);
  }
  if (output.tagSpecificationSet === "") {
    contents.TagSpecifications = [];
  } else if (output["tagSpecificationSet"] !== undefined && output["tagSpecificationSet"]["item"] !== undefined) {
    contents.TagSpecifications = de_LaunchTemplateTagSpecificationList(
      __getArrayIfSingleItem(output["tagSpecificationSet"]["item"]),
      context
    );
  }
  if (output.elasticGpuSpecificationSet === "") {
    contents.ElasticGpuSpecifications = [];
  } else if (
    output["elasticGpuSpecificationSet"] !== undefined &&
    output["elasticGpuSpecificationSet"]["item"] !== undefined
  ) {
    contents.ElasticGpuSpecifications = de_ElasticGpuSpecificationResponseList(
      __getArrayIfSingleItem(output["elasticGpuSpecificationSet"]["item"]),
      context
    );
  }
  if (output.elasticInferenceAcceleratorSet === "") {
    contents.ElasticInferenceAccelerators = [];
  } else if (
    output["elasticInferenceAcceleratorSet"] !== undefined &&
    output["elasticInferenceAcceleratorSet"]["item"] !== undefined
  ) {
    contents.ElasticInferenceAccelerators = de_LaunchTemplateElasticInferenceAcceleratorResponseList(
      __getArrayIfSingleItem(output["elasticInferenceAcceleratorSet"]["item"]),
      context
    );
  }
  if (output.securityGroupIdSet === "") {
    contents.SecurityGroupIds = [];
  } else if (output["securityGroupIdSet"] !== undefined && output["securityGroupIdSet"]["item"] !== undefined) {
    contents.SecurityGroupIds = de_ValueStringList(
      __getArrayIfSingleItem(output["securityGroupIdSet"]["item"]),
      context
    );
  }
  if (output.securityGroupSet === "") {
    contents.SecurityGroups = [];
  } else if (output["securityGroupSet"] !== undefined && output["securityGroupSet"]["item"] !== undefined) {
    contents.SecurityGroups = de_ValueStringList(__getArrayIfSingleItem(output["securityGroupSet"]["item"]), context);
  }
  if (output["instanceMarketOptions"] !== undefined) {
    contents.InstanceMarketOptions = de_LaunchTemplateInstanceMarketOptions(output["instanceMarketOptions"], context);
  }
  if (output["creditSpecification"] !== undefined) {
    contents.CreditSpecification = de_CreditSpecification(output["creditSpecification"], context);
  }
  if (output["cpuOptions"] !== undefined) {
    contents.CpuOptions = de_LaunchTemplateCpuOptions(output["cpuOptions"], context);
  }
  if (output["capacityReservationSpecification"] !== undefined) {
    contents.CapacityReservationSpecification = de_LaunchTemplateCapacityReservationSpecificationResponse(
      output["capacityReservationSpecification"],
      context
    );
  }
  if (output.licenseSet === "") {
    contents.LicenseSpecifications = [];
  } else if (output["licenseSet"] !== undefined && output["licenseSet"]["item"] !== undefined) {
    contents.LicenseSpecifications = de_LaunchTemplateLicenseList(
      __getArrayIfSingleItem(output["licenseSet"]["item"]),
      context
    );
  }
  if (output["hibernationOptions"] !== undefined) {
    contents.HibernationOptions = de_LaunchTemplateHibernationOptions(output["hibernationOptions"], context);
  }
  if (output["metadataOptions"] !== undefined) {
    contents.MetadataOptions = de_LaunchTemplateInstanceMetadataOptions(output["metadataOptions"], context);
  }
  if (output["enclaveOptions"] !== undefined) {
    contents.EnclaveOptions = de_LaunchTemplateEnclaveOptions(output["enclaveOptions"], context);
  }
  if (output["instanceRequirements"] !== undefined) {
    contents.InstanceRequirements = de_InstanceRequirements(output["instanceRequirements"], context);
  }
  if (output["privateDnsNameOptions"] !== undefined) {
    contents.PrivateDnsNameOptions = de_LaunchTemplatePrivateDnsNameOptions(output["privateDnsNameOptions"], context);
  }
  if (output["maintenanceOptions"] !== undefined) {
    contents.MaintenanceOptions = de_LaunchTemplateInstanceMaintenanceOptions(output["maintenanceOptions"], context);
  }
  if (output["disableApiStop"] !== undefined) {
    contents.DisableApiStop = __parseBoolean(output["disableApiStop"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RestoreAddressToClassicResult
 */
const de_RestoreAddressToClassicResult = (output: any, context: __SerdeContext): RestoreAddressToClassicResult => {
  const contents: any = {};
  if (output["publicIp"] !== undefined) {
    contents.PublicIp = __expectString(output["publicIp"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RestoreImageFromRecycleBinResult
 */
const de_RestoreImageFromRecycleBinResult = (
  output: any,
  context: __SerdeContext
): RestoreImageFromRecycleBinResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RestoreManagedPrefixListVersionResult
 */
const de_RestoreManagedPrefixListVersionResult = (
  output: any,
  context: __SerdeContext
): RestoreManagedPrefixListVersionResult => {
  const contents: any = {};
  if (output["prefixList"] !== undefined) {
    contents.PrefixList = de_ManagedPrefixList(output["prefixList"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RestoreSnapshotFromRecycleBinResult
 */
const de_RestoreSnapshotFromRecycleBinResult = (
  output: any,
  context: __SerdeContext
): RestoreSnapshotFromRecycleBinResult => {
  const contents: any = {};
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = __parseBoolean(output["encrypted"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["progress"] !== undefined) {
    contents.Progress = __expectString(output["progress"]);
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
  }
  if (output["status"] !== undefined) {
    contents.State = __expectString(output["status"]);
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = __expectString(output["volumeId"]);
  }
  if (output["volumeSize"] !== undefined) {
    contents.VolumeSize = __strictParseInt32(output["volumeSize"]) as number;
  }
  if (output["sseType"] !== undefined) {
    contents.SseType = __expectString(output["sseType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RestoreSnapshotTierResult
 */
const de_RestoreSnapshotTierResult = (output: any, context: __SerdeContext): RestoreSnapshotTierResult => {
  const contents: any = {};
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["restoreStartTime"] !== undefined) {
    contents.RestoreStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["restoreStartTime"]));
  }
  if (output["restoreDuration"] !== undefined) {
    contents.RestoreDuration = __strictParseInt32(output["restoreDuration"]) as number;
  }
  if (output["isPermanentRestore"] !== undefined) {
    contents.IsPermanentRestore = __parseBoolean(output["isPermanentRestore"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RevokeClientVpnIngressResult
 */
const de_RevokeClientVpnIngressResult = (output: any, context: __SerdeContext): RevokeClientVpnIngressResult => {
  const contents: any = {};
  if (output["status"] !== undefined) {
    contents.Status = de_ClientVpnAuthorizationRuleStatus(output["status"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RevokeSecurityGroupEgressResult
 */
const de_RevokeSecurityGroupEgressResult = (output: any, context: __SerdeContext): RevokeSecurityGroupEgressResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  if (output.unknownIpPermissionSet === "") {
    contents.UnknownIpPermissions = [];
  } else if (output["unknownIpPermissionSet"] !== undefined && output["unknownIpPermissionSet"]["item"] !== undefined) {
    contents.UnknownIpPermissions = de_IpPermissionList(
      __getArrayIfSingleItem(output["unknownIpPermissionSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2RevokeSecurityGroupIngressResult
 */
const de_RevokeSecurityGroupIngressResult = (
  output: any,
  context: __SerdeContext
): RevokeSecurityGroupIngressResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  if (output.unknownIpPermissionSet === "") {
    contents.UnknownIpPermissions = [];
  } else if (output["unknownIpPermissionSet"] !== undefined && output["unknownIpPermissionSet"]["item"] !== undefined) {
    contents.UnknownIpPermissions = de_IpPermissionList(
      __getArrayIfSingleItem(output["unknownIpPermissionSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2RootDeviceTypeList
 */
const de_RootDeviceTypeList = (output: any, context: __SerdeContext): RootDeviceType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Route
 */
const de_Route = (output: any, context: __SerdeContext): Route => {
  const contents: any = {};
  if (output["destinationCidrBlock"] !== undefined) {
    contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
  }
  if (output["destinationIpv6CidrBlock"] !== undefined) {
    contents.DestinationIpv6CidrBlock = __expectString(output["destinationIpv6CidrBlock"]);
  }
  if (output["destinationPrefixListId"] !== undefined) {
    contents.DestinationPrefixListId = __expectString(output["destinationPrefixListId"]);
  }
  if (output["egressOnlyInternetGatewayId"] !== undefined) {
    contents.EgressOnlyInternetGatewayId = __expectString(output["egressOnlyInternetGatewayId"]);
  }
  if (output["gatewayId"] !== undefined) {
    contents.GatewayId = __expectString(output["gatewayId"]);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["instanceOwnerId"] !== undefined) {
    contents.InstanceOwnerId = __expectString(output["instanceOwnerId"]);
  }
  if (output["natGatewayId"] !== undefined) {
    contents.NatGatewayId = __expectString(output["natGatewayId"]);
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
  }
  if (output["localGatewayId"] !== undefined) {
    contents.LocalGatewayId = __expectString(output["localGatewayId"]);
  }
  if (output["carrierGatewayId"] !== undefined) {
    contents.CarrierGatewayId = __expectString(output["carrierGatewayId"]);
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["origin"] !== undefined) {
    contents.Origin = __expectString(output["origin"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["vpcPeeringConnectionId"] !== undefined) {
    contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
  }
  if (output["coreNetworkArn"] !== undefined) {
    contents.CoreNetworkArn = __expectString(output["coreNetworkArn"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RouteList
 */
const de_RouteList = (output: any, context: __SerdeContext): Route[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Route(entry, context);
    });
};

/**
 * deserializeAws_ec2RouteTable
 */
const de_RouteTable = (output: any, context: __SerdeContext): RouteTable => {
  const contents: any = {};
  if (output.associationSet === "") {
    contents.Associations = [];
  } else if (output["associationSet"] !== undefined && output["associationSet"]["item"] !== undefined) {
    contents.Associations = de_RouteTableAssociationList(
      __getArrayIfSingleItem(output["associationSet"]["item"]),
      context
    );
  }
  if (output.propagatingVgwSet === "") {
    contents.PropagatingVgws = [];
  } else if (output["propagatingVgwSet"] !== undefined && output["propagatingVgwSet"]["item"] !== undefined) {
    contents.PropagatingVgws = de_PropagatingVgwList(
      __getArrayIfSingleItem(output["propagatingVgwSet"]["item"]),
      context
    );
  }
  if (output["routeTableId"] !== undefined) {
    contents.RouteTableId = __expectString(output["routeTableId"]);
  }
  if (output.routeSet === "") {
    contents.Routes = [];
  } else if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
    contents.Routes = de_RouteList(__getArrayIfSingleItem(output["routeSet"]["item"]), context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RouteTableAssociation
 */
const de_RouteTableAssociation = (output: any, context: __SerdeContext): RouteTableAssociation => {
  const contents: any = {};
  if (output["main"] !== undefined) {
    contents.Main = __parseBoolean(output["main"]);
  }
  if (output["routeTableAssociationId"] !== undefined) {
    contents.RouteTableAssociationId = __expectString(output["routeTableAssociationId"]);
  }
  if (output["routeTableId"] !== undefined) {
    contents.RouteTableId = __expectString(output["routeTableId"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["gatewayId"] !== undefined) {
    contents.GatewayId = __expectString(output["gatewayId"]);
  }
  if (output["associationState"] !== undefined) {
    contents.AssociationState = de_RouteTableAssociationState(output["associationState"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RouteTableAssociationList
 */
const de_RouteTableAssociationList = (output: any, context: __SerdeContext): RouteTableAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_RouteTableAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2RouteTableAssociationState
 */
const de_RouteTableAssociationState = (output: any, context: __SerdeContext): RouteTableAssociationState => {
  const contents: any = {};
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RouteTableList
 */
const de_RouteTableList = (output: any, context: __SerdeContext): RouteTable[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_RouteTable(entry, context);
    });
};

/**
 * deserializeAws_ec2RuleGroupRuleOptionsPair
 */
const de_RuleGroupRuleOptionsPair = (output: any, context: __SerdeContext): RuleGroupRuleOptionsPair => {
  const contents: any = {};
  if (output["ruleGroupArn"] !== undefined) {
    contents.RuleGroupArn = __expectString(output["ruleGroupArn"]);
  }
  if (output.ruleOptionSet === "") {
    contents.RuleOptions = [];
  } else if (output["ruleOptionSet"] !== undefined && output["ruleOptionSet"]["item"] !== undefined) {
    contents.RuleOptions = de_RuleOptionList(__getArrayIfSingleItem(output["ruleOptionSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RuleGroupRuleOptionsPairList
 */
const de_RuleGroupRuleOptionsPairList = (output: any, context: __SerdeContext): RuleGroupRuleOptionsPair[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_RuleGroupRuleOptionsPair(entry, context);
    });
};

/**
 * deserializeAws_ec2RuleGroupTypePair
 */
const de_RuleGroupTypePair = (output: any, context: __SerdeContext): RuleGroupTypePair => {
  const contents: any = {};
  if (output["ruleGroupArn"] !== undefined) {
    contents.RuleGroupArn = __expectString(output["ruleGroupArn"]);
  }
  if (output["ruleGroupType"] !== undefined) {
    contents.RuleGroupType = __expectString(output["ruleGroupType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RuleGroupTypePairList
 */
const de_RuleGroupTypePairList = (output: any, context: __SerdeContext): RuleGroupTypePair[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_RuleGroupTypePair(entry, context);
    });
};

/**
 * deserializeAws_ec2RuleOption
 */
const de_RuleOption = (output: any, context: __SerdeContext): RuleOption => {
  const contents: any = {};
  if (output["keyword"] !== undefined) {
    contents.Keyword = __expectString(output["keyword"]);
  }
  if (output.settingSet === "") {
    contents.Settings = [];
  } else if (output["settingSet"] !== undefined && output["settingSet"]["item"] !== undefined) {
    contents.Settings = de_StringList(__getArrayIfSingleItem(output["settingSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RuleOptionList
 */
const de_RuleOptionList = (output: any, context: __SerdeContext): RuleOption[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_RuleOption(entry, context);
    });
};

/**
 * deserializeAws_ec2RunInstancesMonitoringEnabled
 */
const de_RunInstancesMonitoringEnabled = (output: any, context: __SerdeContext): RunInstancesMonitoringEnabled => {
  const contents: any = {};
  if (output["enabled"] !== undefined) {
    contents.Enabled = __parseBoolean(output["enabled"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RunScheduledInstancesResult
 */
const de_RunScheduledInstancesResult = (output: any, context: __SerdeContext): RunScheduledInstancesResult => {
  const contents: any = {};
  if (output.instanceIdSet === "") {
    contents.InstanceIdSet = [];
  } else if (output["instanceIdSet"] !== undefined && output["instanceIdSet"]["item"] !== undefined) {
    contents.InstanceIdSet = de_InstanceIdSet(__getArrayIfSingleItem(output["instanceIdSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2S3Storage
 */
const de_S3Storage = (output: any, context: __SerdeContext): S3Storage => {
  const contents: any = {};
  if (output["AWSAccessKeyId"] !== undefined) {
    contents.AWSAccessKeyId = __expectString(output["AWSAccessKeyId"]);
  }
  if (output["bucket"] !== undefined) {
    contents.Bucket = __expectString(output["bucket"]);
  }
  if (output["prefix"] !== undefined) {
    contents.Prefix = __expectString(output["prefix"]);
  }
  if (output["uploadPolicy"] !== undefined) {
    contents.UploadPolicy = context.base64Decoder(output["uploadPolicy"]);
  }
  if (output["uploadPolicySignature"] !== undefined) {
    contents.UploadPolicySignature = __expectString(output["uploadPolicySignature"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ScheduledInstance
 */
const de_ScheduledInstance = (output: any, context: __SerdeContext): ScheduledInstance => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["createDate"] !== undefined) {
    contents.CreateDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createDate"]));
  }
  if (output["hourlyPrice"] !== undefined) {
    contents.HourlyPrice = __expectString(output["hourlyPrice"]);
  }
  if (output["instanceCount"] !== undefined) {
    contents.InstanceCount = __strictParseInt32(output["instanceCount"]) as number;
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["networkPlatform"] !== undefined) {
    contents.NetworkPlatform = __expectString(output["networkPlatform"]);
  }
  if (output["nextSlotStartTime"] !== undefined) {
    contents.NextSlotStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["nextSlotStartTime"]));
  }
  if (output["platform"] !== undefined) {
    contents.Platform = __expectString(output["platform"]);
  }
  if (output["previousSlotEndTime"] !== undefined) {
    contents.PreviousSlotEndTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["previousSlotEndTime"]));
  }
  if (output["recurrence"] !== undefined) {
    contents.Recurrence = de_ScheduledInstanceRecurrence(output["recurrence"], context);
  }
  if (output["scheduledInstanceId"] !== undefined) {
    contents.ScheduledInstanceId = __expectString(output["scheduledInstanceId"]);
  }
  if (output["slotDurationInHours"] !== undefined) {
    contents.SlotDurationInHours = __strictParseInt32(output["slotDurationInHours"]) as number;
  }
  if (output["termEndDate"] !== undefined) {
    contents.TermEndDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["termEndDate"]));
  }
  if (output["termStartDate"] !== undefined) {
    contents.TermStartDate = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["termStartDate"]));
  }
  if (output["totalScheduledInstanceHours"] !== undefined) {
    contents.TotalScheduledInstanceHours = __strictParseInt32(output["totalScheduledInstanceHours"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2ScheduledInstanceAvailability
 */
const de_ScheduledInstanceAvailability = (output: any, context: __SerdeContext): ScheduledInstanceAvailability => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["availableInstanceCount"] !== undefined) {
    contents.AvailableInstanceCount = __strictParseInt32(output["availableInstanceCount"]) as number;
  }
  if (output["firstSlotStartTime"] !== undefined) {
    contents.FirstSlotStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["firstSlotStartTime"]));
  }
  if (output["hourlyPrice"] !== undefined) {
    contents.HourlyPrice = __expectString(output["hourlyPrice"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["maxTermDurationInDays"] !== undefined) {
    contents.MaxTermDurationInDays = __strictParseInt32(output["maxTermDurationInDays"]) as number;
  }
  if (output["minTermDurationInDays"] !== undefined) {
    contents.MinTermDurationInDays = __strictParseInt32(output["minTermDurationInDays"]) as number;
  }
  if (output["networkPlatform"] !== undefined) {
    contents.NetworkPlatform = __expectString(output["networkPlatform"]);
  }
  if (output["platform"] !== undefined) {
    contents.Platform = __expectString(output["platform"]);
  }
  if (output["purchaseToken"] !== undefined) {
    contents.PurchaseToken = __expectString(output["purchaseToken"]);
  }
  if (output["recurrence"] !== undefined) {
    contents.Recurrence = de_ScheduledInstanceRecurrence(output["recurrence"], context);
  }
  if (output["slotDurationInHours"] !== undefined) {
    contents.SlotDurationInHours = __strictParseInt32(output["slotDurationInHours"]) as number;
  }
  if (output["totalScheduledInstanceHours"] !== undefined) {
    contents.TotalScheduledInstanceHours = __strictParseInt32(output["totalScheduledInstanceHours"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2ScheduledInstanceAvailabilitySet
 */
const de_ScheduledInstanceAvailabilitySet = (output: any, context: __SerdeContext): ScheduledInstanceAvailability[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ScheduledInstanceAvailability(entry, context);
    });
};

/**
 * deserializeAws_ec2ScheduledInstanceRecurrence
 */
const de_ScheduledInstanceRecurrence = (output: any, context: __SerdeContext): ScheduledInstanceRecurrence => {
  const contents: any = {};
  if (output["frequency"] !== undefined) {
    contents.Frequency = __expectString(output["frequency"]);
  }
  if (output["interval"] !== undefined) {
    contents.Interval = __strictParseInt32(output["interval"]) as number;
  }
  if (output.occurrenceDaySet === "") {
    contents.OccurrenceDaySet = [];
  } else if (output["occurrenceDaySet"] !== undefined && output["occurrenceDaySet"]["item"] !== undefined) {
    contents.OccurrenceDaySet = de_OccurrenceDaySet(
      __getArrayIfSingleItem(output["occurrenceDaySet"]["item"]),
      context
    );
  }
  if (output["occurrenceRelativeToEnd"] !== undefined) {
    contents.OccurrenceRelativeToEnd = __parseBoolean(output["occurrenceRelativeToEnd"]);
  }
  if (output["occurrenceUnit"] !== undefined) {
    contents.OccurrenceUnit = __expectString(output["occurrenceUnit"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ScheduledInstanceSet
 */
const de_ScheduledInstanceSet = (output: any, context: __SerdeContext): ScheduledInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ScheduledInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2SearchLocalGatewayRoutesResult
 */
const de_SearchLocalGatewayRoutesResult = (output: any, context: __SerdeContext): SearchLocalGatewayRoutesResult => {
  const contents: any = {};
  if (output.routeSet === "") {
    contents.Routes = [];
  } else if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
    contents.Routes = de_LocalGatewayRouteList(__getArrayIfSingleItem(output["routeSet"]["item"]), context);
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SearchTransitGatewayMulticastGroupsResult
 */
const de_SearchTransitGatewayMulticastGroupsResult = (
  output: any,
  context: __SerdeContext
): SearchTransitGatewayMulticastGroupsResult => {
  const contents: any = {};
  if (output.multicastGroups === "") {
    contents.MulticastGroups = [];
  } else if (output["multicastGroups"] !== undefined && output["multicastGroups"]["item"] !== undefined) {
    contents.MulticastGroups = de_TransitGatewayMulticastGroupList(
      __getArrayIfSingleItem(output["multicastGroups"]["item"]),
      context
    );
  }
  if (output["nextToken"] !== undefined) {
    contents.NextToken = __expectString(output["nextToken"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SearchTransitGatewayRoutesResult
 */
const de_SearchTransitGatewayRoutesResult = (
  output: any,
  context: __SerdeContext
): SearchTransitGatewayRoutesResult => {
  const contents: any = {};
  if (output.routeSet === "") {
    contents.Routes = [];
  } else if (output["routeSet"] !== undefined && output["routeSet"]["item"] !== undefined) {
    contents.Routes = de_TransitGatewayRouteList(__getArrayIfSingleItem(output["routeSet"]["item"]), context);
  }
  if (output["additionalRoutesAvailable"] !== undefined) {
    contents.AdditionalRoutesAvailable = __parseBoolean(output["additionalRoutesAvailable"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SecurityGroup
 */
const de_SecurityGroup = (output: any, context: __SerdeContext): SecurityGroup => {
  const contents: any = {};
  if (output["groupDescription"] !== undefined) {
    contents.Description = __expectString(output["groupDescription"]);
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = __expectString(output["groupName"]);
  }
  if (output.ipPermissions === "") {
    contents.IpPermissions = [];
  } else if (output["ipPermissions"] !== undefined && output["ipPermissions"]["item"] !== undefined) {
    contents.IpPermissions = de_IpPermissionList(__getArrayIfSingleItem(output["ipPermissions"]["item"]), context);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = __expectString(output["groupId"]);
  }
  if (output.ipPermissionsEgress === "") {
    contents.IpPermissionsEgress = [];
  } else if (output["ipPermissionsEgress"] !== undefined && output["ipPermissionsEgress"]["item"] !== undefined) {
    contents.IpPermissionsEgress = de_IpPermissionList(
      __getArrayIfSingleItem(output["ipPermissionsEgress"]["item"]),
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SecurityGroupIdentifier
 */
const de_SecurityGroupIdentifier = (output: any, context: __SerdeContext): SecurityGroupIdentifier => {
  const contents: any = {};
  if (output["groupId"] !== undefined) {
    contents.GroupId = __expectString(output["groupId"]);
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = __expectString(output["groupName"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SecurityGroupIdList
 */
const de_SecurityGroupIdList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2SecurityGroupIdSet
 */
const de_SecurityGroupIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2SecurityGroupIdStringList
 */
const de_SecurityGroupIdStringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2SecurityGroupList
 */
const de_SecurityGroupList = (output: any, context: __SerdeContext): SecurityGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SecurityGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2SecurityGroupReference
 */
const de_SecurityGroupReference = (output: any, context: __SerdeContext): SecurityGroupReference => {
  const contents: any = {};
  if (output["groupId"] !== undefined) {
    contents.GroupId = __expectString(output["groupId"]);
  }
  if (output["referencingVpcId"] !== undefined) {
    contents.ReferencingVpcId = __expectString(output["referencingVpcId"]);
  }
  if (output["vpcPeeringConnectionId"] !== undefined) {
    contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SecurityGroupReferences
 */
const de_SecurityGroupReferences = (output: any, context: __SerdeContext): SecurityGroupReference[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SecurityGroupReference(entry, context);
    });
};

/**
 * deserializeAws_ec2SecurityGroupRule
 */
const de_SecurityGroupRule = (output: any, context: __SerdeContext): SecurityGroupRule => {
  const contents: any = {};
  if (output["securityGroupRuleId"] !== undefined) {
    contents.SecurityGroupRuleId = __expectString(output["securityGroupRuleId"]);
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = __expectString(output["groupId"]);
  }
  if (output["groupOwnerId"] !== undefined) {
    contents.GroupOwnerId = __expectString(output["groupOwnerId"]);
  }
  if (output["isEgress"] !== undefined) {
    contents.IsEgress = __parseBoolean(output["isEgress"]);
  }
  if (output["ipProtocol"] !== undefined) {
    contents.IpProtocol = __expectString(output["ipProtocol"]);
  }
  if (output["fromPort"] !== undefined) {
    contents.FromPort = __strictParseInt32(output["fromPort"]) as number;
  }
  if (output["toPort"] !== undefined) {
    contents.ToPort = __strictParseInt32(output["toPort"]) as number;
  }
  if (output["cidrIpv4"] !== undefined) {
    contents.CidrIpv4 = __expectString(output["cidrIpv4"]);
  }
  if (output["cidrIpv6"] !== undefined) {
    contents.CidrIpv6 = __expectString(output["cidrIpv6"]);
  }
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = __expectString(output["prefixListId"]);
  }
  if (output["referencedGroupInfo"] !== undefined) {
    contents.ReferencedGroupInfo = de_ReferencedSecurityGroup(output["referencedGroupInfo"], context);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SecurityGroupRuleList
 */
const de_SecurityGroupRuleList = (output: any, context: __SerdeContext): SecurityGroupRule[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SecurityGroupRule(entry, context);
    });
};

/**
 * deserializeAws_ec2ServiceConfiguration
 */
const de_ServiceConfiguration = (output: any, context: __SerdeContext): ServiceConfiguration => {
  const contents: any = {};
  if (output.serviceType === "") {
    contents.ServiceType = [];
  } else if (output["serviceType"] !== undefined && output["serviceType"]["item"] !== undefined) {
    contents.ServiceType = de_ServiceTypeDetailSet(__getArrayIfSingleItem(output["serviceType"]["item"]), context);
  }
  if (output["serviceId"] !== undefined) {
    contents.ServiceId = __expectString(output["serviceId"]);
  }
  if (output["serviceName"] !== undefined) {
    contents.ServiceName = __expectString(output["serviceName"]);
  }
  if (output["serviceState"] !== undefined) {
    contents.ServiceState = __expectString(output["serviceState"]);
  }
  if (output.availabilityZoneSet === "") {
    contents.AvailabilityZones = [];
  } else if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
    contents.AvailabilityZones = de_ValueStringList(
      __getArrayIfSingleItem(output["availabilityZoneSet"]["item"]),
      context
    );
  }
  if (output["acceptanceRequired"] !== undefined) {
    contents.AcceptanceRequired = __parseBoolean(output["acceptanceRequired"]);
  }
  if (output["managesVpcEndpoints"] !== undefined) {
    contents.ManagesVpcEndpoints = __parseBoolean(output["managesVpcEndpoints"]);
  }
  if (output.networkLoadBalancerArnSet === "") {
    contents.NetworkLoadBalancerArns = [];
  } else if (
    output["networkLoadBalancerArnSet"] !== undefined &&
    output["networkLoadBalancerArnSet"]["item"] !== undefined
  ) {
    contents.NetworkLoadBalancerArns = de_ValueStringList(
      __getArrayIfSingleItem(output["networkLoadBalancerArnSet"]["item"]),
      context
    );
  }
  if (output.gatewayLoadBalancerArnSet === "") {
    contents.GatewayLoadBalancerArns = [];
  } else if (
    output["gatewayLoadBalancerArnSet"] !== undefined &&
    output["gatewayLoadBalancerArnSet"]["item"] !== undefined
  ) {
    contents.GatewayLoadBalancerArns = de_ValueStringList(
      __getArrayIfSingleItem(output["gatewayLoadBalancerArnSet"]["item"]),
      context
    );
  }
  if (output.supportedIpAddressTypeSet === "") {
    contents.SupportedIpAddressTypes = [];
  } else if (
    output["supportedIpAddressTypeSet"] !== undefined &&
    output["supportedIpAddressTypeSet"]["item"] !== undefined
  ) {
    contents.SupportedIpAddressTypes = de_SupportedIpAddressTypes(
      __getArrayIfSingleItem(output["supportedIpAddressTypeSet"]["item"]),
      context
    );
  }
  if (output.baseEndpointDnsNameSet === "") {
    contents.BaseEndpointDnsNames = [];
  } else if (output["baseEndpointDnsNameSet"] !== undefined && output["baseEndpointDnsNameSet"]["item"] !== undefined) {
    contents.BaseEndpointDnsNames = de_ValueStringList(
      __getArrayIfSingleItem(output["baseEndpointDnsNameSet"]["item"]),
      context
    );
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = __expectString(output["privateDnsName"]);
  }
  if (output["privateDnsNameConfiguration"] !== undefined) {
    contents.PrivateDnsNameConfiguration = de_PrivateDnsNameConfiguration(
      output["privateDnsNameConfiguration"],
      context
    );
  }
  if (output["payerResponsibility"] !== undefined) {
    contents.PayerResponsibility = __expectString(output["payerResponsibility"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ServiceConfigurationSet
 */
const de_ServiceConfigurationSet = (output: any, context: __SerdeContext): ServiceConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ServiceConfiguration(entry, context);
    });
};

/**
 * deserializeAws_ec2ServiceDetail
 */
const de_ServiceDetail = (output: any, context: __SerdeContext): ServiceDetail => {
  const contents: any = {};
  if (output["serviceName"] !== undefined) {
    contents.ServiceName = __expectString(output["serviceName"]);
  }
  if (output["serviceId"] !== undefined) {
    contents.ServiceId = __expectString(output["serviceId"]);
  }
  if (output.serviceType === "") {
    contents.ServiceType = [];
  } else if (output["serviceType"] !== undefined && output["serviceType"]["item"] !== undefined) {
    contents.ServiceType = de_ServiceTypeDetailSet(__getArrayIfSingleItem(output["serviceType"]["item"]), context);
  }
  if (output.availabilityZoneSet === "") {
    contents.AvailabilityZones = [];
  } else if (output["availabilityZoneSet"] !== undefined && output["availabilityZoneSet"]["item"] !== undefined) {
    contents.AvailabilityZones = de_ValueStringList(
      __getArrayIfSingleItem(output["availabilityZoneSet"]["item"]),
      context
    );
  }
  if (output["owner"] !== undefined) {
    contents.Owner = __expectString(output["owner"]);
  }
  if (output.baseEndpointDnsNameSet === "") {
    contents.BaseEndpointDnsNames = [];
  } else if (output["baseEndpointDnsNameSet"] !== undefined && output["baseEndpointDnsNameSet"]["item"] !== undefined) {
    contents.BaseEndpointDnsNames = de_ValueStringList(
      __getArrayIfSingleItem(output["baseEndpointDnsNameSet"]["item"]),
      context
    );
  }
  if (output["privateDnsName"] !== undefined) {
    contents.PrivateDnsName = __expectString(output["privateDnsName"]);
  }
  if (output.privateDnsNameSet === "") {
    contents.PrivateDnsNames = [];
  } else if (output["privateDnsNameSet"] !== undefined && output["privateDnsNameSet"]["item"] !== undefined) {
    contents.PrivateDnsNames = de_PrivateDnsDetailsSet(
      __getArrayIfSingleItem(output["privateDnsNameSet"]["item"]),
      context
    );
  }
  if (output["vpcEndpointPolicySupported"] !== undefined) {
    contents.VpcEndpointPolicySupported = __parseBoolean(output["vpcEndpointPolicySupported"]);
  }
  if (output["acceptanceRequired"] !== undefined) {
    contents.AcceptanceRequired = __parseBoolean(output["acceptanceRequired"]);
  }
  if (output["managesVpcEndpoints"] !== undefined) {
    contents.ManagesVpcEndpoints = __parseBoolean(output["managesVpcEndpoints"]);
  }
  if (output["payerResponsibility"] !== undefined) {
    contents.PayerResponsibility = __expectString(output["payerResponsibility"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["privateDnsNameVerificationState"] !== undefined) {
    contents.PrivateDnsNameVerificationState = __expectString(output["privateDnsNameVerificationState"]);
  }
  if (output.supportedIpAddressTypeSet === "") {
    contents.SupportedIpAddressTypes = [];
  } else if (
    output["supportedIpAddressTypeSet"] !== undefined &&
    output["supportedIpAddressTypeSet"]["item"] !== undefined
  ) {
    contents.SupportedIpAddressTypes = de_SupportedIpAddressTypes(
      __getArrayIfSingleItem(output["supportedIpAddressTypeSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ServiceDetailSet
 */
const de_ServiceDetailSet = (output: any, context: __SerdeContext): ServiceDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ServiceDetail(entry, context);
    });
};

/**
 * deserializeAws_ec2ServiceTypeDetail
 */
const de_ServiceTypeDetail = (output: any, context: __SerdeContext): ServiceTypeDetail => {
  const contents: any = {};
  if (output["serviceType"] !== undefined) {
    contents.ServiceType = __expectString(output["serviceType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ServiceTypeDetailSet
 */
const de_ServiceTypeDetailSet = (output: any, context: __SerdeContext): ServiceTypeDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ServiceTypeDetail(entry, context);
    });
};

/**
 * deserializeAws_ec2Snapshot
 */
const de_Snapshot = (output: any, context: __SerdeContext): Snapshot => {
  const contents: any = {};
  if (output["dataEncryptionKeyId"] !== undefined) {
    contents.DataEncryptionKeyId = __expectString(output["dataEncryptionKeyId"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = __parseBoolean(output["encrypted"]);
  }
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = __expectString(output["kmsKeyId"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["progress"] !== undefined) {
    contents.Progress = __expectString(output["progress"]);
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
  }
  if (output["status"] !== undefined) {
    contents.State = __expectString(output["status"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StateMessage = __expectString(output["statusMessage"]);
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = __expectString(output["volumeId"]);
  }
  if (output["volumeSize"] !== undefined) {
    contents.VolumeSize = __strictParseInt32(output["volumeSize"]) as number;
  }
  if (output["ownerAlias"] !== undefined) {
    contents.OwnerAlias = __expectString(output["ownerAlias"]);
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["storageTier"] !== undefined) {
    contents.StorageTier = __expectString(output["storageTier"]);
  }
  if (output["restoreExpiryTime"] !== undefined) {
    contents.RestoreExpiryTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["restoreExpiryTime"]));
  }
  if (output["sseType"] !== undefined) {
    contents.SseType = __expectString(output["sseType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SnapshotDetail
 */
const de_SnapshotDetail = (output: any, context: __SerdeContext): SnapshotDetail => {
  const contents: any = {};
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["deviceName"] !== undefined) {
    contents.DeviceName = __expectString(output["deviceName"]);
  }
  if (output["diskImageSize"] !== undefined) {
    contents.DiskImageSize = __strictParseFloat(output["diskImageSize"]) as number;
  }
  if (output["format"] !== undefined) {
    contents.Format = __expectString(output["format"]);
  }
  if (output["progress"] !== undefined) {
    contents.Progress = __expectString(output["progress"]);
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output["url"] !== undefined) {
    contents.Url = __expectString(output["url"]);
  }
  if (output["userBucket"] !== undefined) {
    contents.UserBucket = de_UserBucketDetails(output["userBucket"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SnapshotDetailList
 */
const de_SnapshotDetailList = (output: any, context: __SerdeContext): SnapshotDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SnapshotDetail(entry, context);
    });
};

/**
 * deserializeAws_ec2SnapshotInfo
 */
const de_SnapshotInfo = (output: any, context: __SerdeContext): SnapshotInfo => {
  const contents: any = {};
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = __parseBoolean(output["encrypted"]);
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = __expectString(output["volumeId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["volumeSize"] !== undefined) {
    contents.VolumeSize = __strictParseInt32(output["volumeSize"]) as number;
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
  }
  if (output["progress"] !== undefined) {
    contents.Progress = __expectString(output["progress"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output["sseType"] !== undefined) {
    contents.SseType = __expectString(output["sseType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SnapshotList
 */
const de_SnapshotList = (output: any, context: __SerdeContext): Snapshot[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Snapshot(entry, context);
    });
};

/**
 * deserializeAws_ec2SnapshotRecycleBinInfo
 */
const de_SnapshotRecycleBinInfo = (output: any, context: __SerdeContext): SnapshotRecycleBinInfo => {
  const contents: any = {};
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["recycleBinEnterTime"] !== undefined) {
    contents.RecycleBinEnterTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["recycleBinEnterTime"]));
  }
  if (output["recycleBinExitTime"] !== undefined) {
    contents.RecycleBinExitTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["recycleBinExitTime"]));
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = __expectString(output["volumeId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SnapshotRecycleBinInfoList
 */
const de_SnapshotRecycleBinInfoList = (output: any, context: __SerdeContext): SnapshotRecycleBinInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SnapshotRecycleBinInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2SnapshotSet
 */
const de_SnapshotSet = (output: any, context: __SerdeContext): SnapshotInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SnapshotInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2SnapshotTaskDetail
 */
const de_SnapshotTaskDetail = (output: any, context: __SerdeContext): SnapshotTaskDetail => {
  const contents: any = {};
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["diskImageSize"] !== undefined) {
    contents.DiskImageSize = __strictParseFloat(output["diskImageSize"]) as number;
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = __parseBoolean(output["encrypted"]);
  }
  if (output["format"] !== undefined) {
    contents.Format = __expectString(output["format"]);
  }
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = __expectString(output["kmsKeyId"]);
  }
  if (output["progress"] !== undefined) {
    contents.Progress = __expectString(output["progress"]);
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output["url"] !== undefined) {
    contents.Url = __expectString(output["url"]);
  }
  if (output["userBucket"] !== undefined) {
    contents.UserBucket = de_UserBucketDetails(output["userBucket"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SnapshotTierStatus
 */
const de_SnapshotTierStatus = (output: any, context: __SerdeContext): SnapshotTierStatus => {
  const contents: any = {};
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = __expectString(output["volumeId"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["storageTier"] !== undefined) {
    contents.StorageTier = __expectString(output["storageTier"]);
  }
  if (output["lastTieringStartTime"] !== undefined) {
    contents.LastTieringStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["lastTieringStartTime"]));
  }
  if (output["lastTieringProgress"] !== undefined) {
    contents.LastTieringProgress = __strictParseInt32(output["lastTieringProgress"]) as number;
  }
  if (output["lastTieringOperationStatus"] !== undefined) {
    contents.LastTieringOperationStatus = __expectString(output["lastTieringOperationStatus"]);
  }
  if (output["lastTieringOperationStatusDetail"] !== undefined) {
    contents.LastTieringOperationStatusDetail = __expectString(output["lastTieringOperationStatusDetail"]);
  }
  if (output["archivalCompleteTime"] !== undefined) {
    contents.ArchivalCompleteTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["archivalCompleteTime"]));
  }
  if (output["restoreExpiryTime"] !== undefined) {
    contents.RestoreExpiryTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["restoreExpiryTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2snapshotTierStatusSet
 */
const de_snapshotTierStatusSet = (output: any, context: __SerdeContext): SnapshotTierStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SnapshotTierStatus(entry, context);
    });
};

/**
 * deserializeAws_ec2SpotCapacityRebalance
 */
const de_SpotCapacityRebalance = (output: any, context: __SerdeContext): SpotCapacityRebalance => {
  const contents: any = {};
  if (output["replacementStrategy"] !== undefined) {
    contents.ReplacementStrategy = __expectString(output["replacementStrategy"]);
  }
  if (output["terminationDelay"] !== undefined) {
    contents.TerminationDelay = __strictParseInt32(output["terminationDelay"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotDatafeedSubscription
 */
const de_SpotDatafeedSubscription = (output: any, context: __SerdeContext): SpotDatafeedSubscription => {
  const contents: any = {};
  if (output["bucket"] !== undefined) {
    contents.Bucket = __expectString(output["bucket"]);
  }
  if (output["fault"] !== undefined) {
    contents.Fault = de_SpotInstanceStateFault(output["fault"], context);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["prefix"] !== undefined) {
    contents.Prefix = __expectString(output["prefix"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotFleetLaunchSpecification
 */
const de_SpotFleetLaunchSpecification = (output: any, context: __SerdeContext): SpotFleetLaunchSpecification => {
  const contents: any = {};
  if (output.groupSet === "") {
    contents.SecurityGroups = [];
  } else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.SecurityGroups = de_GroupIdentifierList(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
  }
  if (output["addressingType"] !== undefined) {
    contents.AddressingType = __expectString(output["addressingType"]);
  }
  if (output.blockDeviceMapping === "") {
    contents.BlockDeviceMappings = [];
  } else if (output["blockDeviceMapping"] !== undefined && output["blockDeviceMapping"]["item"] !== undefined) {
    contents.BlockDeviceMappings = de_BlockDeviceMappingList(
      __getArrayIfSingleItem(output["blockDeviceMapping"]["item"]),
      context
    );
  }
  if (output["ebsOptimized"] !== undefined) {
    contents.EbsOptimized = __parseBoolean(output["ebsOptimized"]);
  }
  if (output["iamInstanceProfile"] !== undefined) {
    contents.IamInstanceProfile = de_IamInstanceProfileSpecification(output["iamInstanceProfile"], context);
  }
  if (output["imageId"] !== undefined) {
    contents.ImageId = __expectString(output["imageId"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["kernelId"] !== undefined) {
    contents.KernelId = __expectString(output["kernelId"]);
  }
  if (output["keyName"] !== undefined) {
    contents.KeyName = __expectString(output["keyName"]);
  }
  if (output["monitoring"] !== undefined) {
    contents.Monitoring = de_SpotFleetMonitoring(output["monitoring"], context);
  }
  if (output.networkInterfaceSet === "") {
    contents.NetworkInterfaces = [];
  } else if (output["networkInterfaceSet"] !== undefined && output["networkInterfaceSet"]["item"] !== undefined) {
    contents.NetworkInterfaces = de_InstanceNetworkInterfaceSpecificationList(
      __getArrayIfSingleItem(output["networkInterfaceSet"]["item"]),
      context
    );
  }
  if (output["placement"] !== undefined) {
    contents.Placement = de_SpotPlacement(output["placement"], context);
  }
  if (output["ramdiskId"] !== undefined) {
    contents.RamdiskId = __expectString(output["ramdiskId"]);
  }
  if (output["spotPrice"] !== undefined) {
    contents.SpotPrice = __expectString(output["spotPrice"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["userData"] !== undefined) {
    contents.UserData = __expectString(output["userData"]);
  }
  if (output["weightedCapacity"] !== undefined) {
    contents.WeightedCapacity = __strictParseFloat(output["weightedCapacity"]) as number;
  }
  if (output.tagSpecificationSet === "") {
    contents.TagSpecifications = [];
  } else if (output["tagSpecificationSet"] !== undefined && output["tagSpecificationSet"]["item"] !== undefined) {
    contents.TagSpecifications = de_SpotFleetTagSpecificationList(
      __getArrayIfSingleItem(output["tagSpecificationSet"]["item"]),
      context
    );
  }
  if (output["instanceRequirements"] !== undefined) {
    contents.InstanceRequirements = de_InstanceRequirements(output["instanceRequirements"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotFleetMonitoring
 */
const de_SpotFleetMonitoring = (output: any, context: __SerdeContext): SpotFleetMonitoring => {
  const contents: any = {};
  if (output["enabled"] !== undefined) {
    contents.Enabled = __parseBoolean(output["enabled"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotFleetRequestConfig
 */
const de_SpotFleetRequestConfig = (output: any, context: __SerdeContext): SpotFleetRequestConfig => {
  const contents: any = {};
  if (output["activityStatus"] !== undefined) {
    contents.ActivityStatus = __expectString(output["activityStatus"]);
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
  }
  if (output["spotFleetRequestConfig"] !== undefined) {
    contents.SpotFleetRequestConfig = de_SpotFleetRequestConfigData(output["spotFleetRequestConfig"], context);
  }
  if (output["spotFleetRequestId"] !== undefined) {
    contents.SpotFleetRequestId = __expectString(output["spotFleetRequestId"]);
  }
  if (output["spotFleetRequestState"] !== undefined) {
    contents.SpotFleetRequestState = __expectString(output["spotFleetRequestState"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotFleetRequestConfigData
 */
const de_SpotFleetRequestConfigData = (output: any, context: __SerdeContext): SpotFleetRequestConfigData => {
  const contents: any = {};
  if (output["allocationStrategy"] !== undefined) {
    contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
  }
  if (output["onDemandAllocationStrategy"] !== undefined) {
    contents.OnDemandAllocationStrategy = __expectString(output["onDemandAllocationStrategy"]);
  }
  if (output["spotMaintenanceStrategies"] !== undefined) {
    contents.SpotMaintenanceStrategies = de_SpotMaintenanceStrategies(output["spotMaintenanceStrategies"], context);
  }
  if (output["clientToken"] !== undefined) {
    contents.ClientToken = __expectString(output["clientToken"]);
  }
  if (output["excessCapacityTerminationPolicy"] !== undefined) {
    contents.ExcessCapacityTerminationPolicy = __expectString(output["excessCapacityTerminationPolicy"]);
  }
  if (output["fulfilledCapacity"] !== undefined) {
    contents.FulfilledCapacity = __strictParseFloat(output["fulfilledCapacity"]) as number;
  }
  if (output["onDemandFulfilledCapacity"] !== undefined) {
    contents.OnDemandFulfilledCapacity = __strictParseFloat(output["onDemandFulfilledCapacity"]) as number;
  }
  if (output["iamFleetRole"] !== undefined) {
    contents.IamFleetRole = __expectString(output["iamFleetRole"]);
  }
  if (output.launchSpecifications === "") {
    contents.LaunchSpecifications = [];
  } else if (output["launchSpecifications"] !== undefined && output["launchSpecifications"]["item"] !== undefined) {
    contents.LaunchSpecifications = de_LaunchSpecsList(
      __getArrayIfSingleItem(output["launchSpecifications"]["item"]),
      context
    );
  }
  if (output.launchTemplateConfigs === "") {
    contents.LaunchTemplateConfigs = [];
  } else if (output["launchTemplateConfigs"] !== undefined && output["launchTemplateConfigs"]["item"] !== undefined) {
    contents.LaunchTemplateConfigs = de_LaunchTemplateConfigList(
      __getArrayIfSingleItem(output["launchTemplateConfigs"]["item"]),
      context
    );
  }
  if (output["spotPrice"] !== undefined) {
    contents.SpotPrice = __expectString(output["spotPrice"]);
  }
  if (output["targetCapacity"] !== undefined) {
    contents.TargetCapacity = __strictParseInt32(output["targetCapacity"]) as number;
  }
  if (output["onDemandTargetCapacity"] !== undefined) {
    contents.OnDemandTargetCapacity = __strictParseInt32(output["onDemandTargetCapacity"]) as number;
  }
  if (output["onDemandMaxTotalPrice"] !== undefined) {
    contents.OnDemandMaxTotalPrice = __expectString(output["onDemandMaxTotalPrice"]);
  }
  if (output["spotMaxTotalPrice"] !== undefined) {
    contents.SpotMaxTotalPrice = __expectString(output["spotMaxTotalPrice"]);
  }
  if (output["terminateInstancesWithExpiration"] !== undefined) {
    contents.TerminateInstancesWithExpiration = __parseBoolean(output["terminateInstancesWithExpiration"]);
  }
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  if (output["validFrom"] !== undefined) {
    contents.ValidFrom = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validFrom"]));
  }
  if (output["validUntil"] !== undefined) {
    contents.ValidUntil = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validUntil"]));
  }
  if (output["replaceUnhealthyInstances"] !== undefined) {
    contents.ReplaceUnhealthyInstances = __parseBoolean(output["replaceUnhealthyInstances"]);
  }
  if (output["instanceInterruptionBehavior"] !== undefined) {
    contents.InstanceInterruptionBehavior = __expectString(output["instanceInterruptionBehavior"]);
  }
  if (output["loadBalancersConfig"] !== undefined) {
    contents.LoadBalancersConfig = de_LoadBalancersConfig(output["loadBalancersConfig"], context);
  }
  if (output["instancePoolsToUseCount"] !== undefined) {
    contents.InstancePoolsToUseCount = __strictParseInt32(output["instancePoolsToUseCount"]) as number;
  }
  if (output["context"] !== undefined) {
    contents.Context = __expectString(output["context"]);
  }
  if (output["targetCapacityUnitType"] !== undefined) {
    contents.TargetCapacityUnitType = __expectString(output["targetCapacityUnitType"]);
  }
  if (output.TagSpecification === "") {
    contents.TagSpecifications = [];
  } else if (output["TagSpecification"] !== undefined && output["TagSpecification"]["item"] !== undefined) {
    contents.TagSpecifications = de_TagSpecificationList(
      __getArrayIfSingleItem(output["TagSpecification"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotFleetRequestConfigSet
 */
const de_SpotFleetRequestConfigSet = (output: any, context: __SerdeContext): SpotFleetRequestConfig[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SpotFleetRequestConfig(entry, context);
    });
};

/**
 * deserializeAws_ec2SpotFleetTagSpecification
 */
const de_SpotFleetTagSpecification = (output: any, context: __SerdeContext): SpotFleetTagSpecification => {
  const contents: any = {};
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output.tag === "") {
    contents.Tags = [];
  } else if (output["tag"] !== undefined && output["tag"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tag"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotFleetTagSpecificationList
 */
const de_SpotFleetTagSpecificationList = (output: any, context: __SerdeContext): SpotFleetTagSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SpotFleetTagSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2SpotInstanceRequest
 */
const de_SpotInstanceRequest = (output: any, context: __SerdeContext): SpotInstanceRequest => {
  const contents: any = {};
  if (output["actualBlockHourlyPrice"] !== undefined) {
    contents.ActualBlockHourlyPrice = __expectString(output["actualBlockHourlyPrice"]);
  }
  if (output["availabilityZoneGroup"] !== undefined) {
    contents.AvailabilityZoneGroup = __expectString(output["availabilityZoneGroup"]);
  }
  if (output["blockDurationMinutes"] !== undefined) {
    contents.BlockDurationMinutes = __strictParseInt32(output["blockDurationMinutes"]) as number;
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
  }
  if (output["fault"] !== undefined) {
    contents.Fault = de_SpotInstanceStateFault(output["fault"], context);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["launchGroup"] !== undefined) {
    contents.LaunchGroup = __expectString(output["launchGroup"]);
  }
  if (output["launchSpecification"] !== undefined) {
    contents.LaunchSpecification = de_LaunchSpecification(output["launchSpecification"], context);
  }
  if (output["launchedAvailabilityZone"] !== undefined) {
    contents.LaunchedAvailabilityZone = __expectString(output["launchedAvailabilityZone"]);
  }
  if (output["productDescription"] !== undefined) {
    contents.ProductDescription = __expectString(output["productDescription"]);
  }
  if (output["spotInstanceRequestId"] !== undefined) {
    contents.SpotInstanceRequestId = __expectString(output["spotInstanceRequestId"]);
  }
  if (output["spotPrice"] !== undefined) {
    contents.SpotPrice = __expectString(output["spotPrice"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_SpotInstanceStatus(output["status"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  if (output["validFrom"] !== undefined) {
    contents.ValidFrom = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validFrom"]));
  }
  if (output["validUntil"] !== undefined) {
    contents.ValidUntil = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["validUntil"]));
  }
  if (output["instanceInterruptionBehavior"] !== undefined) {
    contents.InstanceInterruptionBehavior = __expectString(output["instanceInterruptionBehavior"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotInstanceRequestList
 */
const de_SpotInstanceRequestList = (output: any, context: __SerdeContext): SpotInstanceRequest[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SpotInstanceRequest(entry, context);
    });
};

/**
 * deserializeAws_ec2SpotInstanceStateFault
 */
const de_SpotInstanceStateFault = (output: any, context: __SerdeContext): SpotInstanceStateFault => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotInstanceStatus
 */
const de_SpotInstanceStatus = (output: any, context: __SerdeContext): SpotInstanceStatus => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  if (output["updateTime"] !== undefined) {
    contents.UpdateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["updateTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotMaintenanceStrategies
 */
const de_SpotMaintenanceStrategies = (output: any, context: __SerdeContext): SpotMaintenanceStrategies => {
  const contents: any = {};
  if (output["capacityRebalance"] !== undefined) {
    contents.CapacityRebalance = de_SpotCapacityRebalance(output["capacityRebalance"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotOptions
 */
const de_SpotOptions = (output: any, context: __SerdeContext): SpotOptions => {
  const contents: any = {};
  if (output["allocationStrategy"] !== undefined) {
    contents.AllocationStrategy = __expectString(output["allocationStrategy"]);
  }
  if (output["maintenanceStrategies"] !== undefined) {
    contents.MaintenanceStrategies = de_FleetSpotMaintenanceStrategies(output["maintenanceStrategies"], context);
  }
  if (output["instanceInterruptionBehavior"] !== undefined) {
    contents.InstanceInterruptionBehavior = __expectString(output["instanceInterruptionBehavior"]);
  }
  if (output["instancePoolsToUseCount"] !== undefined) {
    contents.InstancePoolsToUseCount = __strictParseInt32(output["instancePoolsToUseCount"]) as number;
  }
  if (output["singleInstanceType"] !== undefined) {
    contents.SingleInstanceType = __parseBoolean(output["singleInstanceType"]);
  }
  if (output["singleAvailabilityZone"] !== undefined) {
    contents.SingleAvailabilityZone = __parseBoolean(output["singleAvailabilityZone"]);
  }
  if (output["minTargetCapacity"] !== undefined) {
    contents.MinTargetCapacity = __strictParseInt32(output["minTargetCapacity"]) as number;
  }
  if (output["maxTotalPrice"] !== undefined) {
    contents.MaxTotalPrice = __expectString(output["maxTotalPrice"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotPlacement
 */
const de_SpotPlacement = (output: any, context: __SerdeContext): SpotPlacement => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = __expectString(output["groupName"]);
  }
  if (output["tenancy"] !== undefined) {
    contents.Tenancy = __expectString(output["tenancy"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotPlacementScore
 */
const de_SpotPlacementScore = (output: any, context: __SerdeContext): SpotPlacementScore => {
  const contents: any = {};
  if (output["region"] !== undefined) {
    contents.Region = __expectString(output["region"]);
  }
  if (output["availabilityZoneId"] !== undefined) {
    contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
  }
  if (output["score"] !== undefined) {
    contents.Score = __strictParseInt32(output["score"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotPlacementScores
 */
const de_SpotPlacementScores = (output: any, context: __SerdeContext): SpotPlacementScore[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SpotPlacementScore(entry, context);
    });
};

/**
 * deserializeAws_ec2SpotPrice
 */
const de_SpotPrice = (output: any, context: __SerdeContext): SpotPrice => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["instanceType"] !== undefined) {
    contents.InstanceType = __expectString(output["instanceType"]);
  }
  if (output["productDescription"] !== undefined) {
    contents.ProductDescription = __expectString(output["productDescription"]);
  }
  if (output["spotPrice"] !== undefined) {
    contents.SpotPrice = __expectString(output["spotPrice"]);
  }
  if (output["timestamp"] !== undefined) {
    contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["timestamp"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotPriceHistoryList
 */
const de_SpotPriceHistoryList = (output: any, context: __SerdeContext): SpotPrice[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SpotPrice(entry, context);
    });
};

/**
 * deserializeAws_ec2StaleIpPermission
 */
const de_StaleIpPermission = (output: any, context: __SerdeContext): StaleIpPermission => {
  const contents: any = {};
  if (output["fromPort"] !== undefined) {
    contents.FromPort = __strictParseInt32(output["fromPort"]) as number;
  }
  if (output["ipProtocol"] !== undefined) {
    contents.IpProtocol = __expectString(output["ipProtocol"]);
  }
  if (output.ipRanges === "") {
    contents.IpRanges = [];
  } else if (output["ipRanges"] !== undefined && output["ipRanges"]["item"] !== undefined) {
    contents.IpRanges = de_IpRanges(__getArrayIfSingleItem(output["ipRanges"]["item"]), context);
  }
  if (output.prefixListIds === "") {
    contents.PrefixListIds = [];
  } else if (output["prefixListIds"] !== undefined && output["prefixListIds"]["item"] !== undefined) {
    contents.PrefixListIds = de_PrefixListIdSet(__getArrayIfSingleItem(output["prefixListIds"]["item"]), context);
  }
  if (output["toPort"] !== undefined) {
    contents.ToPort = __strictParseInt32(output["toPort"]) as number;
  }
  if (output.groups === "") {
    contents.UserIdGroupPairs = [];
  } else if (output["groups"] !== undefined && output["groups"]["item"] !== undefined) {
    contents.UserIdGroupPairs = de_UserIdGroupPairSet(__getArrayIfSingleItem(output["groups"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2StaleIpPermissionSet
 */
const de_StaleIpPermissionSet = (output: any, context: __SerdeContext): StaleIpPermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_StaleIpPermission(entry, context);
    });
};

/**
 * deserializeAws_ec2StaleSecurityGroup
 */
const de_StaleSecurityGroup = (output: any, context: __SerdeContext): StaleSecurityGroup => {
  const contents: any = {};
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = __expectString(output["groupId"]);
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = __expectString(output["groupName"]);
  }
  if (output.staleIpPermissions === "") {
    contents.StaleIpPermissions = [];
  } else if (output["staleIpPermissions"] !== undefined && output["staleIpPermissions"]["item"] !== undefined) {
    contents.StaleIpPermissions = de_StaleIpPermissionSet(
      __getArrayIfSingleItem(output["staleIpPermissions"]["item"]),
      context
    );
  }
  if (output.staleIpPermissionsEgress === "") {
    contents.StaleIpPermissionsEgress = [];
  } else if (
    output["staleIpPermissionsEgress"] !== undefined &&
    output["staleIpPermissionsEgress"]["item"] !== undefined
  ) {
    contents.StaleIpPermissionsEgress = de_StaleIpPermissionSet(
      __getArrayIfSingleItem(output["staleIpPermissionsEgress"]["item"]),
      context
    );
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2StaleSecurityGroupSet
 */
const de_StaleSecurityGroupSet = (output: any, context: __SerdeContext): StaleSecurityGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_StaleSecurityGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2StartInstancesResult
 */
const de_StartInstancesResult = (output: any, context: __SerdeContext): StartInstancesResult => {
  const contents: any = {};
  if (output.instancesSet === "") {
    contents.StartingInstances = [];
  } else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.StartingInstances = de_InstanceStateChangeList(
      __getArrayIfSingleItem(output["instancesSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisResult
 */
const de_StartNetworkInsightsAccessScopeAnalysisResult = (
  output: any,
  context: __SerdeContext
): StartNetworkInsightsAccessScopeAnalysisResult => {
  const contents: any = {};
  if (output["networkInsightsAccessScopeAnalysis"] !== undefined) {
    contents.NetworkInsightsAccessScopeAnalysis = de_NetworkInsightsAccessScopeAnalysis(
      output["networkInsightsAccessScopeAnalysis"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2StartNetworkInsightsAnalysisResult
 */
const de_StartNetworkInsightsAnalysisResult = (
  output: any,
  context: __SerdeContext
): StartNetworkInsightsAnalysisResult => {
  const contents: any = {};
  if (output["networkInsightsAnalysis"] !== undefined) {
    contents.NetworkInsightsAnalysis = de_NetworkInsightsAnalysis(output["networkInsightsAnalysis"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationResult
 */
const de_StartVpcEndpointServicePrivateDnsVerificationResult = (
  output: any,
  context: __SerdeContext
): StartVpcEndpointServicePrivateDnsVerificationResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.ReturnValue = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2StateReason
 */
const de_StateReason = (output: any, context: __SerdeContext): StateReason => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2StopInstancesResult
 */
const de_StopInstancesResult = (output: any, context: __SerdeContext): StopInstancesResult => {
  const contents: any = {};
  if (output.instancesSet === "") {
    contents.StoppingInstances = [];
  } else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.StoppingInstances = de_InstanceStateChangeList(
      __getArrayIfSingleItem(output["instancesSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2Storage
 */
const de_Storage = (output: any, context: __SerdeContext): Storage => {
  const contents: any = {};
  if (output["S3"] !== undefined) {
    contents.S3 = de_S3Storage(output["S3"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2StoreImageTaskResult
 */
const de_StoreImageTaskResult = (output: any, context: __SerdeContext): StoreImageTaskResult => {
  const contents: any = {};
  if (output["amiId"] !== undefined) {
    contents.AmiId = __expectString(output["amiId"]);
  }
  if (output["taskStartTime"] !== undefined) {
    contents.TaskStartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["taskStartTime"]));
  }
  if (output["bucket"] !== undefined) {
    contents.Bucket = __expectString(output["bucket"]);
  }
  if (output["s3objectKey"] !== undefined) {
    contents.S3objectKey = __expectString(output["s3objectKey"]);
  }
  if (output["progressPercentage"] !== undefined) {
    contents.ProgressPercentage = __strictParseInt32(output["progressPercentage"]) as number;
  }
  if (output["storeTaskState"] !== undefined) {
    contents.StoreTaskState = __expectString(output["storeTaskState"]);
  }
  if (output["storeTaskFailureReason"] !== undefined) {
    contents.StoreTaskFailureReason = __expectString(output["storeTaskFailureReason"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2StoreImageTaskResultSet
 */
const de_StoreImageTaskResultSet = (output: any, context: __SerdeContext): StoreImageTaskResult[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_StoreImageTaskResult(entry, context);
    });
};

/**
 * deserializeAws_ec2StringList
 */
const de_StringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Subnet
 */
const de_Subnet = (output: any, context: __SerdeContext): Subnet => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["availabilityZoneId"] !== undefined) {
    contents.AvailabilityZoneId = __expectString(output["availabilityZoneId"]);
  }
  if (output["availableIpAddressCount"] !== undefined) {
    contents.AvailableIpAddressCount = __strictParseInt32(output["availableIpAddressCount"]) as number;
  }
  if (output["cidrBlock"] !== undefined) {
    contents.CidrBlock = __expectString(output["cidrBlock"]);
  }
  if (output["defaultForAz"] !== undefined) {
    contents.DefaultForAz = __parseBoolean(output["defaultForAz"]);
  }
  if (output["enableLniAtDeviceIndex"] !== undefined) {
    contents.EnableLniAtDeviceIndex = __strictParseInt32(output["enableLniAtDeviceIndex"]) as number;
  }
  if (output["mapPublicIpOnLaunch"] !== undefined) {
    contents.MapPublicIpOnLaunch = __parseBoolean(output["mapPublicIpOnLaunch"]);
  }
  if (output["mapCustomerOwnedIpOnLaunch"] !== undefined) {
    contents.MapCustomerOwnedIpOnLaunch = __parseBoolean(output["mapCustomerOwnedIpOnLaunch"]);
  }
  if (output["customerOwnedIpv4Pool"] !== undefined) {
    contents.CustomerOwnedIpv4Pool = __expectString(output["customerOwnedIpv4Pool"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["assignIpv6AddressOnCreation"] !== undefined) {
    contents.AssignIpv6AddressOnCreation = __parseBoolean(output["assignIpv6AddressOnCreation"]);
  }
  if (output.ipv6CidrBlockAssociationSet === "") {
    contents.Ipv6CidrBlockAssociationSet = [];
  } else if (
    output["ipv6CidrBlockAssociationSet"] !== undefined &&
    output["ipv6CidrBlockAssociationSet"]["item"] !== undefined
  ) {
    contents.Ipv6CidrBlockAssociationSet = de_SubnetIpv6CidrBlockAssociationSet(
      __getArrayIfSingleItem(output["ipv6CidrBlockAssociationSet"]["item"]),
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["subnetArn"] !== undefined) {
    contents.SubnetArn = __expectString(output["subnetArn"]);
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output["enableDns64"] !== undefined) {
    contents.EnableDns64 = __parseBoolean(output["enableDns64"]);
  }
  if (output["ipv6Native"] !== undefined) {
    contents.Ipv6Native = __parseBoolean(output["ipv6Native"]);
  }
  if (output["privateDnsNameOptionsOnLaunch"] !== undefined) {
    contents.PrivateDnsNameOptionsOnLaunch = de_PrivateDnsNameOptionsOnLaunch(
      output["privateDnsNameOptionsOnLaunch"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2SubnetAssociation
 */
const de_SubnetAssociation = (output: any, context: __SerdeContext): SubnetAssociation => {
  const contents: any = {};
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SubnetAssociationList
 */
const de_SubnetAssociationList = (output: any, context: __SerdeContext): SubnetAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SubnetAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2SubnetCidrBlockState
 */
const de_SubnetCidrBlockState = (output: any, context: __SerdeContext): SubnetCidrBlockState => {
  const contents: any = {};
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SubnetCidrReservation
 */
const de_SubnetCidrReservation = (output: any, context: __SerdeContext): SubnetCidrReservation => {
  const contents: any = {};
  if (output["subnetCidrReservationId"] !== undefined) {
    contents.SubnetCidrReservationId = __expectString(output["subnetCidrReservationId"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["cidr"] !== undefined) {
    contents.Cidr = __expectString(output["cidr"]);
  }
  if (output["reservationType"] !== undefined) {
    contents.ReservationType = __expectString(output["reservationType"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SubnetCidrReservationList
 */
const de_SubnetCidrReservationList = (output: any, context: __SerdeContext): SubnetCidrReservation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SubnetCidrReservation(entry, context);
    });
};

/**
 * deserializeAws_ec2SubnetIpv6CidrBlockAssociation
 */
const de_SubnetIpv6CidrBlockAssociation = (output: any, context: __SerdeContext): SubnetIpv6CidrBlockAssociation => {
  const contents: any = {};
  if (output["associationId"] !== undefined) {
    contents.AssociationId = __expectString(output["associationId"]);
  }
  if (output["ipv6CidrBlock"] !== undefined) {
    contents.Ipv6CidrBlock = __expectString(output["ipv6CidrBlock"]);
  }
  if (output["ipv6CidrBlockState"] !== undefined) {
    contents.Ipv6CidrBlockState = de_SubnetCidrBlockState(output["ipv6CidrBlockState"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SubnetIpv6CidrBlockAssociationSet
 */
const de_SubnetIpv6CidrBlockAssociationSet = (
  output: any,
  context: __SerdeContext
): SubnetIpv6CidrBlockAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SubnetIpv6CidrBlockAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2SubnetList
 */
const de_SubnetList = (output: any, context: __SerdeContext): Subnet[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Subnet(entry, context);
    });
};

/**
 * deserializeAws_ec2Subscription
 */
const de_Subscription = (output: any, context: __SerdeContext): Subscription => {
  const contents: any = {};
  if (output["source"] !== undefined) {
    contents.Source = __expectString(output["source"]);
  }
  if (output["destination"] !== undefined) {
    contents.Destination = __expectString(output["destination"]);
  }
  if (output["metric"] !== undefined) {
    contents.Metric = __expectString(output["metric"]);
  }
  if (output["statistic"] !== undefined) {
    contents.Statistic = __expectString(output["statistic"]);
  }
  if (output["period"] !== undefined) {
    contents.Period = __expectString(output["period"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SubscriptionList
 */
const de_SubscriptionList = (output: any, context: __SerdeContext): Subscription[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Subscription(entry, context);
    });
};

/**
 * deserializeAws_ec2SuccessfulInstanceCreditSpecificationItem
 */
const de_SuccessfulInstanceCreditSpecificationItem = (
  output: any,
  context: __SerdeContext
): SuccessfulInstanceCreditSpecificationItem => {
  const contents: any = {};
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SuccessfulInstanceCreditSpecificationSet
 */
const de_SuccessfulInstanceCreditSpecificationSet = (
  output: any,
  context: __SerdeContext
): SuccessfulInstanceCreditSpecificationItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SuccessfulInstanceCreditSpecificationItem(entry, context);
    });
};

/**
 * deserializeAws_ec2SuccessfulQueuedPurchaseDeletion
 */
const de_SuccessfulQueuedPurchaseDeletion = (
  output: any,
  context: __SerdeContext
): SuccessfulQueuedPurchaseDeletion => {
  const contents: any = {};
  if (output["reservedInstancesId"] !== undefined) {
    contents.ReservedInstancesId = __expectString(output["reservedInstancesId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SuccessfulQueuedPurchaseDeletionSet
 */
const de_SuccessfulQueuedPurchaseDeletionSet = (
  output: any,
  context: __SerdeContext
): SuccessfulQueuedPurchaseDeletion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SuccessfulQueuedPurchaseDeletion(entry, context);
    });
};

/**
 * deserializeAws_ec2SupportedAdditionalProcessorFeatureList
 */
const de_SupportedAdditionalProcessorFeatureList = (
  output: any,
  context: __SerdeContext
): SupportedAdditionalProcessorFeature[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2SupportedIpAddressTypes
 */
const de_SupportedIpAddressTypes = (output: any, context: __SerdeContext): ServiceConnectivityType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Tag
 */
const de_Tag = (output: any, context: __SerdeContext): Tag => {
  const contents: any = {};
  if (output["key"] !== undefined) {
    contents.Key = __expectString(output["key"]);
  }
  if (output["value"] !== undefined) {
    contents.Value = __expectString(output["value"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TagDescription
 */
const de_TagDescription = (output: any, context: __SerdeContext): TagDescription => {
  const contents: any = {};
  if (output["key"] !== undefined) {
    contents.Key = __expectString(output["key"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["value"] !== undefined) {
    contents.Value = __expectString(output["value"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TagDescriptionList
 */
const de_TagDescriptionList = (output: any, context: __SerdeContext): TagDescription[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TagDescription(entry, context);
    });
};

/**
 * deserializeAws_ec2TagList
 */
const de_TagList = (output: any, context: __SerdeContext): Tag[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Tag(entry, context);
    });
};

/**
 * deserializeAws_ec2TagSpecification
 */
const de_TagSpecification = (output: any, context: __SerdeContext): TagSpecification => {
  const contents: any = {};
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output.Tag === "") {
    contents.Tags = [];
  } else if (output["Tag"] !== undefined && output["Tag"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["Tag"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TagSpecificationList
 */
const de_TagSpecificationList = (output: any, context: __SerdeContext): TagSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TagSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2TargetCapacitySpecification
 */
const de_TargetCapacitySpecification = (output: any, context: __SerdeContext): TargetCapacitySpecification => {
  const contents: any = {};
  if (output["totalTargetCapacity"] !== undefined) {
    contents.TotalTargetCapacity = __strictParseInt32(output["totalTargetCapacity"]) as number;
  }
  if (output["onDemandTargetCapacity"] !== undefined) {
    contents.OnDemandTargetCapacity = __strictParseInt32(output["onDemandTargetCapacity"]) as number;
  }
  if (output["spotTargetCapacity"] !== undefined) {
    contents.SpotTargetCapacity = __strictParseInt32(output["spotTargetCapacity"]) as number;
  }
  if (output["defaultTargetCapacityType"] !== undefined) {
    contents.DefaultTargetCapacityType = __expectString(output["defaultTargetCapacityType"]);
  }
  if (output["targetCapacityUnitType"] !== undefined) {
    contents.TargetCapacityUnitType = __expectString(output["targetCapacityUnitType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TargetConfiguration
 */
const de_TargetConfiguration = (output: any, context: __SerdeContext): TargetConfiguration => {
  const contents: any = {};
  if (output["instanceCount"] !== undefined) {
    contents.InstanceCount = __strictParseInt32(output["instanceCount"]) as number;
  }
  if (output["offeringId"] !== undefined) {
    contents.OfferingId = __expectString(output["offeringId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TargetGroup
 */
const de_TargetGroup = (output: any, context: __SerdeContext): TargetGroup => {
  const contents: any = {};
  if (output["arn"] !== undefined) {
    contents.Arn = __expectString(output["arn"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TargetGroups
 */
const de_TargetGroups = (output: any, context: __SerdeContext): TargetGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TargetGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2TargetGroupsConfig
 */
const de_TargetGroupsConfig = (output: any, context: __SerdeContext): TargetGroupsConfig => {
  const contents: any = {};
  if (output.targetGroups === "") {
    contents.TargetGroups = [];
  } else if (output["targetGroups"] !== undefined && output["targetGroups"]["item"] !== undefined) {
    contents.TargetGroups = de_TargetGroups(__getArrayIfSingleItem(output["targetGroups"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TargetNetwork
 */
const de_TargetNetwork = (output: any, context: __SerdeContext): TargetNetwork => {
  const contents: any = {};
  if (output["associationId"] !== undefined) {
    contents.AssociationId = __expectString(output["associationId"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["targetNetworkId"] !== undefined) {
    contents.TargetNetworkId = __expectString(output["targetNetworkId"]);
  }
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_AssociationStatus(output["status"], context);
  }
  if (output.securityGroups === "") {
    contents.SecurityGroups = [];
  } else if (output["securityGroups"] !== undefined && output["securityGroups"]["item"] !== undefined) {
    contents.SecurityGroups = de_ValueStringList(__getArrayIfSingleItem(output["securityGroups"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TargetNetworkSet
 */
const de_TargetNetworkSet = (output: any, context: __SerdeContext): TargetNetwork[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TargetNetwork(entry, context);
    });
};

/**
 * deserializeAws_ec2TargetReservationValue
 */
const de_TargetReservationValue = (output: any, context: __SerdeContext): TargetReservationValue => {
  const contents: any = {};
  if (output["reservationValue"] !== undefined) {
    contents.ReservationValue = de_ReservationValue(output["reservationValue"], context);
  }
  if (output["targetConfiguration"] !== undefined) {
    contents.TargetConfiguration = de_TargetConfiguration(output["targetConfiguration"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TargetReservationValueSet
 */
const de_TargetReservationValueSet = (output: any, context: __SerdeContext): TargetReservationValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TargetReservationValue(entry, context);
    });
};

/**
 * deserializeAws_ec2TerminateClientVpnConnectionsResult
 */
const de_TerminateClientVpnConnectionsResult = (
  output: any,
  context: __SerdeContext
): TerminateClientVpnConnectionsResult => {
  const contents: any = {};
  if (output["clientVpnEndpointId"] !== undefined) {
    contents.ClientVpnEndpointId = __expectString(output["clientVpnEndpointId"]);
  }
  if (output["username"] !== undefined) {
    contents.Username = __expectString(output["username"]);
  }
  if (output.connectionStatuses === "") {
    contents.ConnectionStatuses = [];
  } else if (output["connectionStatuses"] !== undefined && output["connectionStatuses"]["item"] !== undefined) {
    contents.ConnectionStatuses = de_TerminateConnectionStatusSet(
      __getArrayIfSingleItem(output["connectionStatuses"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2TerminateConnectionStatus
 */
const de_TerminateConnectionStatus = (output: any, context: __SerdeContext): TerminateConnectionStatus => {
  const contents: any = {};
  if (output["connectionId"] !== undefined) {
    contents.ConnectionId = __expectString(output["connectionId"]);
  }
  if (output["previousStatus"] !== undefined) {
    contents.PreviousStatus = de_ClientVpnConnectionStatus(output["previousStatus"], context);
  }
  if (output["currentStatus"] !== undefined) {
    contents.CurrentStatus = de_ClientVpnConnectionStatus(output["currentStatus"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TerminateConnectionStatusSet
 */
const de_TerminateConnectionStatusSet = (output: any, context: __SerdeContext): TerminateConnectionStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TerminateConnectionStatus(entry, context);
    });
};

/**
 * deserializeAws_ec2TerminateInstancesResult
 */
const de_TerminateInstancesResult = (output: any, context: __SerdeContext): TerminateInstancesResult => {
  const contents: any = {};
  if (output.instancesSet === "") {
    contents.TerminatingInstances = [];
  } else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.TerminatingInstances = de_InstanceStateChangeList(
      __getArrayIfSingleItem(output["instancesSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ThreadsPerCoreList
 */
const de_ThreadsPerCoreList = (output: any, context: __SerdeContext): number[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __strictParseInt32(entry) as number;
    });
};

/**
 * deserializeAws_ec2ThroughResourcesStatement
 */
const de_ThroughResourcesStatement = (output: any, context: __SerdeContext): ThroughResourcesStatement => {
  const contents: any = {};
  if (output["resourceStatement"] !== undefined) {
    contents.ResourceStatement = de_ResourceStatement(output["resourceStatement"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ThroughResourcesStatementList
 */
const de_ThroughResourcesStatementList = (output: any, context: __SerdeContext): ThroughResourcesStatement[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ThroughResourcesStatement(entry, context);
    });
};

/**
 * deserializeAws_ec2TotalLocalStorageGB
 */
const de_TotalLocalStorageGB = (output: any, context: __SerdeContext): TotalLocalStorageGB => {
  const contents: any = {};
  if (output["min"] !== undefined) {
    contents.Min = __strictParseFloat(output["min"]) as number;
  }
  if (output["max"] !== undefined) {
    contents.Max = __strictParseFloat(output["max"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2TrafficMirrorFilter
 */
const de_TrafficMirrorFilter = (output: any, context: __SerdeContext): TrafficMirrorFilter => {
  const contents: any = {};
  if (output["trafficMirrorFilterId"] !== undefined) {
    contents.TrafficMirrorFilterId = __expectString(output["trafficMirrorFilterId"]);
  }
  if (output.ingressFilterRuleSet === "") {
    contents.IngressFilterRules = [];
  } else if (output["ingressFilterRuleSet"] !== undefined && output["ingressFilterRuleSet"]["item"] !== undefined) {
    contents.IngressFilterRules = de_TrafficMirrorFilterRuleList(
      __getArrayIfSingleItem(output["ingressFilterRuleSet"]["item"]),
      context
    );
  }
  if (output.egressFilterRuleSet === "") {
    contents.EgressFilterRules = [];
  } else if (output["egressFilterRuleSet"] !== undefined && output["egressFilterRuleSet"]["item"] !== undefined) {
    contents.EgressFilterRules = de_TrafficMirrorFilterRuleList(
      __getArrayIfSingleItem(output["egressFilterRuleSet"]["item"]),
      context
    );
  }
  if (output.networkServiceSet === "") {
    contents.NetworkServices = [];
  } else if (output["networkServiceSet"] !== undefined && output["networkServiceSet"]["item"] !== undefined) {
    contents.NetworkServices = de_TrafficMirrorNetworkServiceList(
      __getArrayIfSingleItem(output["networkServiceSet"]["item"]),
      context
    );
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TrafficMirrorFilterRule
 */
const de_TrafficMirrorFilterRule = (output: any, context: __SerdeContext): TrafficMirrorFilterRule => {
  const contents: any = {};
  if (output["trafficMirrorFilterRuleId"] !== undefined) {
    contents.TrafficMirrorFilterRuleId = __expectString(output["trafficMirrorFilterRuleId"]);
  }
  if (output["trafficMirrorFilterId"] !== undefined) {
    contents.TrafficMirrorFilterId = __expectString(output["trafficMirrorFilterId"]);
  }
  if (output["trafficDirection"] !== undefined) {
    contents.TrafficDirection = __expectString(output["trafficDirection"]);
  }
  if (output["ruleNumber"] !== undefined) {
    contents.RuleNumber = __strictParseInt32(output["ruleNumber"]) as number;
  }
  if (output["ruleAction"] !== undefined) {
    contents.RuleAction = __expectString(output["ruleAction"]);
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = __strictParseInt32(output["protocol"]) as number;
  }
  if (output["destinationPortRange"] !== undefined) {
    contents.DestinationPortRange = de_TrafficMirrorPortRange(output["destinationPortRange"], context);
  }
  if (output["sourcePortRange"] !== undefined) {
    contents.SourcePortRange = de_TrafficMirrorPortRange(output["sourcePortRange"], context);
  }
  if (output["destinationCidrBlock"] !== undefined) {
    contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
  }
  if (output["sourceCidrBlock"] !== undefined) {
    contents.SourceCidrBlock = __expectString(output["sourceCidrBlock"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TrafficMirrorFilterRuleList
 */
const de_TrafficMirrorFilterRuleList = (output: any, context: __SerdeContext): TrafficMirrorFilterRule[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TrafficMirrorFilterRule(entry, context);
    });
};

/**
 * deserializeAws_ec2TrafficMirrorFilterSet
 */
const de_TrafficMirrorFilterSet = (output: any, context: __SerdeContext): TrafficMirrorFilter[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TrafficMirrorFilter(entry, context);
    });
};

/**
 * deserializeAws_ec2TrafficMirrorNetworkServiceList
 */
const de_TrafficMirrorNetworkServiceList = (output: any, context: __SerdeContext): TrafficMirrorNetworkService[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2TrafficMirrorPortRange
 */
const de_TrafficMirrorPortRange = (output: any, context: __SerdeContext): TrafficMirrorPortRange => {
  const contents: any = {};
  if (output["fromPort"] !== undefined) {
    contents.FromPort = __strictParseInt32(output["fromPort"]) as number;
  }
  if (output["toPort"] !== undefined) {
    contents.ToPort = __strictParseInt32(output["toPort"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2TrafficMirrorSession
 */
const de_TrafficMirrorSession = (output: any, context: __SerdeContext): TrafficMirrorSession => {
  const contents: any = {};
  if (output["trafficMirrorSessionId"] !== undefined) {
    contents.TrafficMirrorSessionId = __expectString(output["trafficMirrorSessionId"]);
  }
  if (output["trafficMirrorTargetId"] !== undefined) {
    contents.TrafficMirrorTargetId = __expectString(output["trafficMirrorTargetId"]);
  }
  if (output["trafficMirrorFilterId"] !== undefined) {
    contents.TrafficMirrorFilterId = __expectString(output["trafficMirrorFilterId"]);
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["packetLength"] !== undefined) {
    contents.PacketLength = __strictParseInt32(output["packetLength"]) as number;
  }
  if (output["sessionNumber"] !== undefined) {
    contents.SessionNumber = __strictParseInt32(output["sessionNumber"]) as number;
  }
  if (output["virtualNetworkId"] !== undefined) {
    contents.VirtualNetworkId = __strictParseInt32(output["virtualNetworkId"]) as number;
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TrafficMirrorSessionSet
 */
const de_TrafficMirrorSessionSet = (output: any, context: __SerdeContext): TrafficMirrorSession[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TrafficMirrorSession(entry, context);
    });
};

/**
 * deserializeAws_ec2TrafficMirrorTarget
 */
const de_TrafficMirrorTarget = (output: any, context: __SerdeContext): TrafficMirrorTarget => {
  const contents: any = {};
  if (output["trafficMirrorTargetId"] !== undefined) {
    contents.TrafficMirrorTargetId = __expectString(output["trafficMirrorTargetId"]);
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["networkLoadBalancerArn"] !== undefined) {
    contents.NetworkLoadBalancerArn = __expectString(output["networkLoadBalancerArn"]);
  }
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["gatewayLoadBalancerEndpointId"] !== undefined) {
    contents.GatewayLoadBalancerEndpointId = __expectString(output["gatewayLoadBalancerEndpointId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TrafficMirrorTargetSet
 */
const de_TrafficMirrorTargetSet = (output: any, context: __SerdeContext): TrafficMirrorTarget[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TrafficMirrorTarget(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGateway
 */
const de_TransitGateway = (output: any, context: __SerdeContext): TransitGateway => {
  const contents: any = {};
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
  }
  if (output["transitGatewayArn"] !== undefined) {
    contents.TransitGatewayArn = __expectString(output["transitGatewayArn"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
  }
  if (output["options"] !== undefined) {
    contents.Options = de_TransitGatewayOptions(output["options"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayAssociation
 */
const de_TransitGatewayAssociation = (output: any, context: __SerdeContext): TransitGatewayAssociation => {
  const contents: any = {};
  if (output["transitGatewayRouteTableId"] !== undefined) {
    contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
  }
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayAttachment
 */
const de_TransitGatewayAttachment = (output: any, context: __SerdeContext): TransitGatewayAttachment => {
  const contents: any = {};
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
  }
  if (output["transitGatewayOwnerId"] !== undefined) {
    contents.TransitGatewayOwnerId = __expectString(output["transitGatewayOwnerId"]);
  }
  if (output["resourceOwnerId"] !== undefined) {
    contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["association"] !== undefined) {
    contents.Association = de_TransitGatewayAttachmentAssociation(output["association"], context);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayAttachmentAssociation
 */
const de_TransitGatewayAttachmentAssociation = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentAssociation => {
  const contents: any = {};
  if (output["transitGatewayRouteTableId"] !== undefined) {
    contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayAttachmentBgpConfiguration
 */
const de_TransitGatewayAttachmentBgpConfiguration = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentBgpConfiguration => {
  const contents: any = {};
  if (output["transitGatewayAsn"] !== undefined) {
    contents.TransitGatewayAsn = __strictParseLong(output["transitGatewayAsn"]) as number;
  }
  if (output["peerAsn"] !== undefined) {
    contents.PeerAsn = __strictParseLong(output["peerAsn"]) as number;
  }
  if (output["transitGatewayAddress"] !== undefined) {
    contents.TransitGatewayAddress = __expectString(output["transitGatewayAddress"]);
  }
  if (output["peerAddress"] !== undefined) {
    contents.PeerAddress = __expectString(output["peerAddress"]);
  }
  if (output["bgpStatus"] !== undefined) {
    contents.BgpStatus = __expectString(output["bgpStatus"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayAttachmentBgpConfigurationList
 */
const de_TransitGatewayAttachmentBgpConfigurationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentBgpConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayAttachmentBgpConfiguration(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayAttachmentList
 */
const de_TransitGatewayAttachmentList = (output: any, context: __SerdeContext): TransitGatewayAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayAttachmentPropagation
 */
const de_TransitGatewayAttachmentPropagation = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentPropagation => {
  const contents: any = {};
  if (output["transitGatewayRouteTableId"] !== undefined) {
    contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayAttachmentPropagationList
 */
const de_TransitGatewayAttachmentPropagationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentPropagation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayAttachmentPropagation(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayConnect
 */
const de_TransitGatewayConnect = (output: any, context: __SerdeContext): TransitGatewayConnect => {
  const contents: any = {};
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["transportTransitGatewayAttachmentId"] !== undefined) {
    contents.TransportTransitGatewayAttachmentId = __expectString(output["transportTransitGatewayAttachmentId"]);
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
  }
  if (output["options"] !== undefined) {
    contents.Options = de_TransitGatewayConnectOptions(output["options"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayConnectList
 */
const de_TransitGatewayConnectList = (output: any, context: __SerdeContext): TransitGatewayConnect[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayConnect(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayConnectOptions
 */
const de_TransitGatewayConnectOptions = (output: any, context: __SerdeContext): TransitGatewayConnectOptions => {
  const contents: any = {};
  if (output["protocol"] !== undefined) {
    contents.Protocol = __expectString(output["protocol"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayConnectPeer
 */
const de_TransitGatewayConnectPeer = (output: any, context: __SerdeContext): TransitGatewayConnectPeer => {
  const contents: any = {};
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["transitGatewayConnectPeerId"] !== undefined) {
    contents.TransitGatewayConnectPeerId = __expectString(output["transitGatewayConnectPeerId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
  }
  if (output["connectPeerConfiguration"] !== undefined) {
    contents.ConnectPeerConfiguration = de_TransitGatewayConnectPeerConfiguration(
      output["connectPeerConfiguration"],
      context
    );
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayConnectPeerConfiguration
 */
const de_TransitGatewayConnectPeerConfiguration = (
  output: any,
  context: __SerdeContext
): TransitGatewayConnectPeerConfiguration => {
  const contents: any = {};
  if (output["transitGatewayAddress"] !== undefined) {
    contents.TransitGatewayAddress = __expectString(output["transitGatewayAddress"]);
  }
  if (output["peerAddress"] !== undefined) {
    contents.PeerAddress = __expectString(output["peerAddress"]);
  }
  if (output.insideCidrBlocks === "") {
    contents.InsideCidrBlocks = [];
  } else if (output["insideCidrBlocks"] !== undefined && output["insideCidrBlocks"]["item"] !== undefined) {
    contents.InsideCidrBlocks = de_InsideCidrBlocksStringList(
      __getArrayIfSingleItem(output["insideCidrBlocks"]["item"]),
      context
    );
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = __expectString(output["protocol"]);
  }
  if (output.bgpConfigurations === "") {
    contents.BgpConfigurations = [];
  } else if (output["bgpConfigurations"] !== undefined && output["bgpConfigurations"]["item"] !== undefined) {
    contents.BgpConfigurations = de_TransitGatewayAttachmentBgpConfigurationList(
      __getArrayIfSingleItem(output["bgpConfigurations"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayConnectPeerList
 */
const de_TransitGatewayConnectPeerList = (output: any, context: __SerdeContext): TransitGatewayConnectPeer[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayConnectPeer(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayList
 */
const de_TransitGatewayList = (output: any, context: __SerdeContext): TransitGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupMembers
 */
const de_TransitGatewayMulticastDeregisteredGroupMembers = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDeregisteredGroupMembers => {
  const contents: any = {};
  if (output["transitGatewayMulticastDomainId"] !== undefined) {
    contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
  }
  if (output.deregisteredNetworkInterfaceIds === "") {
    contents.DeregisteredNetworkInterfaceIds = [];
  } else if (
    output["deregisteredNetworkInterfaceIds"] !== undefined &&
    output["deregisteredNetworkInterfaceIds"]["item"] !== undefined
  ) {
    contents.DeregisteredNetworkInterfaceIds = de_ValueStringList(
      __getArrayIfSingleItem(output["deregisteredNetworkInterfaceIds"]["item"]),
      context
    );
  }
  if (output["groupIpAddress"] !== undefined) {
    contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupSources
 */
const de_TransitGatewayMulticastDeregisteredGroupSources = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDeregisteredGroupSources => {
  const contents: any = {};
  if (output["transitGatewayMulticastDomainId"] !== undefined) {
    contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
  }
  if (output.deregisteredNetworkInterfaceIds === "") {
    contents.DeregisteredNetworkInterfaceIds = [];
  } else if (
    output["deregisteredNetworkInterfaceIds"] !== undefined &&
    output["deregisteredNetworkInterfaceIds"]["item"] !== undefined
  ) {
    contents.DeregisteredNetworkInterfaceIds = de_ValueStringList(
      __getArrayIfSingleItem(output["deregisteredNetworkInterfaceIds"]["item"]),
      context
    );
  }
  if (output["groupIpAddress"] !== undefined) {
    contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDomain
 */
const de_TransitGatewayMulticastDomain = (output: any, context: __SerdeContext): TransitGatewayMulticastDomain => {
  const contents: any = {};
  if (output["transitGatewayMulticastDomainId"] !== undefined) {
    contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
  }
  if (output["transitGatewayMulticastDomainArn"] !== undefined) {
    contents.TransitGatewayMulticastDomainArn = __expectString(output["transitGatewayMulticastDomainArn"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["options"] !== undefined) {
    contents.Options = de_TransitGatewayMulticastDomainOptions(output["options"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDomainAssociation
 */
const de_TransitGatewayMulticastDomainAssociation = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomainAssociation => {
  const contents: any = {};
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["resourceOwnerId"] !== undefined) {
    contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
  }
  if (output["subnet"] !== undefined) {
    contents.Subnet = de_SubnetAssociation(output["subnet"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDomainAssociationList
 */
const de_TransitGatewayMulticastDomainAssociationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomainAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayMulticastDomainAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDomainAssociations
 */
const de_TransitGatewayMulticastDomainAssociations = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomainAssociations => {
  const contents: any = {};
  if (output["transitGatewayMulticastDomainId"] !== undefined) {
    contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
  }
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["resourceOwnerId"] !== undefined) {
    contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
  }
  if (output.subnets === "") {
    contents.Subnets = [];
  } else if (output["subnets"] !== undefined && output["subnets"]["item"] !== undefined) {
    contents.Subnets = de_SubnetAssociationList(__getArrayIfSingleItem(output["subnets"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDomainList
 */
const de_TransitGatewayMulticastDomainList = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomain[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayMulticastDomain(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDomainOptions
 */
const de_TransitGatewayMulticastDomainOptions = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomainOptions => {
  const contents: any = {};
  if (output["igmpv2Support"] !== undefined) {
    contents.Igmpv2Support = __expectString(output["igmpv2Support"]);
  }
  if (output["staticSourcesSupport"] !== undefined) {
    contents.StaticSourcesSupport = __expectString(output["staticSourcesSupport"]);
  }
  if (output["autoAcceptSharedAssociations"] !== undefined) {
    contents.AutoAcceptSharedAssociations = __expectString(output["autoAcceptSharedAssociations"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastGroup
 */
const de_TransitGatewayMulticastGroup = (output: any, context: __SerdeContext): TransitGatewayMulticastGroup => {
  const contents: any = {};
  if (output["groupIpAddress"] !== undefined) {
    contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
  }
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["subnetId"] !== undefined) {
    contents.SubnetId = __expectString(output["subnetId"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["resourceOwnerId"] !== undefined) {
    contents.ResourceOwnerId = __expectString(output["resourceOwnerId"]);
  }
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["groupMember"] !== undefined) {
    contents.GroupMember = __parseBoolean(output["groupMember"]);
  }
  if (output["groupSource"] !== undefined) {
    contents.GroupSource = __parseBoolean(output["groupSource"]);
  }
  if (output["memberType"] !== undefined) {
    contents.MemberType = __expectString(output["memberType"]);
  }
  if (output["sourceType"] !== undefined) {
    contents.SourceType = __expectString(output["sourceType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastGroupList
 */
const de_TransitGatewayMulticastGroupList = (output: any, context: __SerdeContext): TransitGatewayMulticastGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayMulticastGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayMulticastRegisteredGroupMembers
 */
const de_TransitGatewayMulticastRegisteredGroupMembers = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastRegisteredGroupMembers => {
  const contents: any = {};
  if (output["transitGatewayMulticastDomainId"] !== undefined) {
    contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
  }
  if (output.registeredNetworkInterfaceIds === "") {
    contents.RegisteredNetworkInterfaceIds = [];
  } else if (
    output["registeredNetworkInterfaceIds"] !== undefined &&
    output["registeredNetworkInterfaceIds"]["item"] !== undefined
  ) {
    contents.RegisteredNetworkInterfaceIds = de_ValueStringList(
      __getArrayIfSingleItem(output["registeredNetworkInterfaceIds"]["item"]),
      context
    );
  }
  if (output["groupIpAddress"] !== undefined) {
    contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastRegisteredGroupSources
 */
const de_TransitGatewayMulticastRegisteredGroupSources = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastRegisteredGroupSources => {
  const contents: any = {};
  if (output["transitGatewayMulticastDomainId"] !== undefined) {
    contents.TransitGatewayMulticastDomainId = __expectString(output["transitGatewayMulticastDomainId"]);
  }
  if (output.registeredNetworkInterfaceIds === "") {
    contents.RegisteredNetworkInterfaceIds = [];
  } else if (
    output["registeredNetworkInterfaceIds"] !== undefined &&
    output["registeredNetworkInterfaceIds"]["item"] !== undefined
  ) {
    contents.RegisteredNetworkInterfaceIds = de_ValueStringList(
      __getArrayIfSingleItem(output["registeredNetworkInterfaceIds"]["item"]),
      context
    );
  }
  if (output["groupIpAddress"] !== undefined) {
    contents.GroupIpAddress = __expectString(output["groupIpAddress"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayOptions
 */
const de_TransitGatewayOptions = (output: any, context: __SerdeContext): TransitGatewayOptions => {
  const contents: any = {};
  if (output["amazonSideAsn"] !== undefined) {
    contents.AmazonSideAsn = __strictParseLong(output["amazonSideAsn"]) as number;
  }
  if (output.transitGatewayCidrBlocks === "") {
    contents.TransitGatewayCidrBlocks = [];
  } else if (
    output["transitGatewayCidrBlocks"] !== undefined &&
    output["transitGatewayCidrBlocks"]["item"] !== undefined
  ) {
    contents.TransitGatewayCidrBlocks = de_ValueStringList(
      __getArrayIfSingleItem(output["transitGatewayCidrBlocks"]["item"]),
      context
    );
  }
  if (output["autoAcceptSharedAttachments"] !== undefined) {
    contents.AutoAcceptSharedAttachments = __expectString(output["autoAcceptSharedAttachments"]);
  }
  if (output["defaultRouteTableAssociation"] !== undefined) {
    contents.DefaultRouteTableAssociation = __expectString(output["defaultRouteTableAssociation"]);
  }
  if (output["associationDefaultRouteTableId"] !== undefined) {
    contents.AssociationDefaultRouteTableId = __expectString(output["associationDefaultRouteTableId"]);
  }
  if (output["defaultRouteTablePropagation"] !== undefined) {
    contents.DefaultRouteTablePropagation = __expectString(output["defaultRouteTablePropagation"]);
  }
  if (output["propagationDefaultRouteTableId"] !== undefined) {
    contents.PropagationDefaultRouteTableId = __expectString(output["propagationDefaultRouteTableId"]);
  }
  if (output["vpnEcmpSupport"] !== undefined) {
    contents.VpnEcmpSupport = __expectString(output["vpnEcmpSupport"]);
  }
  if (output["dnsSupport"] !== undefined) {
    contents.DnsSupport = __expectString(output["dnsSupport"]);
  }
  if (output["multicastSupport"] !== undefined) {
    contents.MulticastSupport = __expectString(output["multicastSupport"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPeeringAttachment
 */
const de_TransitGatewayPeeringAttachment = (output: any, context: __SerdeContext): TransitGatewayPeeringAttachment => {
  const contents: any = {};
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["accepterTransitGatewayAttachmentId"] !== undefined) {
    contents.AccepterTransitGatewayAttachmentId = __expectString(output["accepterTransitGatewayAttachmentId"]);
  }
  if (output["requesterTgwInfo"] !== undefined) {
    contents.RequesterTgwInfo = de_PeeringTgwInfo(output["requesterTgwInfo"], context);
  }
  if (output["accepterTgwInfo"] !== undefined) {
    contents.AccepterTgwInfo = de_PeeringTgwInfo(output["accepterTgwInfo"], context);
  }
  if (output["options"] !== undefined) {
    contents.Options = de_TransitGatewayPeeringAttachmentOptions(output["options"], context);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_PeeringAttachmentStatus(output["status"], context);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPeeringAttachmentList
 */
const de_TransitGatewayPeeringAttachmentList = (
  output: any,
  context: __SerdeContext
): TransitGatewayPeeringAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayPeeringAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayPeeringAttachmentOptions
 */
const de_TransitGatewayPeeringAttachmentOptions = (
  output: any,
  context: __SerdeContext
): TransitGatewayPeeringAttachmentOptions => {
  const contents: any = {};
  if (output["dynamicRouting"] !== undefined) {
    contents.DynamicRouting = __expectString(output["dynamicRouting"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPolicyRule
 */
const de_TransitGatewayPolicyRule = (output: any, context: __SerdeContext): TransitGatewayPolicyRule => {
  const contents: any = {};
  if (output["sourceCidrBlock"] !== undefined) {
    contents.SourceCidrBlock = __expectString(output["sourceCidrBlock"]);
  }
  if (output["sourcePortRange"] !== undefined) {
    contents.SourcePortRange = __expectString(output["sourcePortRange"]);
  }
  if (output["destinationCidrBlock"] !== undefined) {
    contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
  }
  if (output["destinationPortRange"] !== undefined) {
    contents.DestinationPortRange = __expectString(output["destinationPortRange"]);
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = __expectString(output["protocol"]);
  }
  if (output["metaData"] !== undefined) {
    contents.MetaData = de_TransitGatewayPolicyRuleMetaData(output["metaData"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPolicyRuleMetaData
 */
const de_TransitGatewayPolicyRuleMetaData = (
  output: any,
  context: __SerdeContext
): TransitGatewayPolicyRuleMetaData => {
  const contents: any = {};
  if (output["metaDataKey"] !== undefined) {
    contents.MetaDataKey = __expectString(output["metaDataKey"]);
  }
  if (output["metaDataValue"] !== undefined) {
    contents.MetaDataValue = __expectString(output["metaDataValue"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPolicyTable
 */
const de_TransitGatewayPolicyTable = (output: any, context: __SerdeContext): TransitGatewayPolicyTable => {
  const contents: any = {};
  if (output["transitGatewayPolicyTableId"] !== undefined) {
    contents.TransitGatewayPolicyTableId = __expectString(output["transitGatewayPolicyTableId"]);
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPolicyTableAssociation
 */
const de_TransitGatewayPolicyTableAssociation = (
  output: any,
  context: __SerdeContext
): TransitGatewayPolicyTableAssociation => {
  const contents: any = {};
  if (output["transitGatewayPolicyTableId"] !== undefined) {
    contents.TransitGatewayPolicyTableId = __expectString(output["transitGatewayPolicyTableId"]);
  }
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPolicyTableAssociationList
 */
const de_TransitGatewayPolicyTableAssociationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayPolicyTableAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayPolicyTableAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayPolicyTableEntry
 */
const de_TransitGatewayPolicyTableEntry = (output: any, context: __SerdeContext): TransitGatewayPolicyTableEntry => {
  const contents: any = {};
  if (output["policyRuleNumber"] !== undefined) {
    contents.PolicyRuleNumber = __expectString(output["policyRuleNumber"]);
  }
  if (output["policyRule"] !== undefined) {
    contents.PolicyRule = de_TransitGatewayPolicyRule(output["policyRule"], context);
  }
  if (output["targetRouteTableId"] !== undefined) {
    contents.TargetRouteTableId = __expectString(output["targetRouteTableId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPolicyTableEntryList
 */
const de_TransitGatewayPolicyTableEntryList = (
  output: any,
  context: __SerdeContext
): TransitGatewayPolicyTableEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayPolicyTableEntry(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayPolicyTableList
 */
const de_TransitGatewayPolicyTableList = (output: any, context: __SerdeContext): TransitGatewayPolicyTable[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayPolicyTable(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayPrefixListAttachment
 */
const de_TransitGatewayPrefixListAttachment = (
  output: any,
  context: __SerdeContext
): TransitGatewayPrefixListAttachment => {
  const contents: any = {};
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPrefixListReference
 */
const de_TransitGatewayPrefixListReference = (
  output: any,
  context: __SerdeContext
): TransitGatewayPrefixListReference => {
  const contents: any = {};
  if (output["transitGatewayRouteTableId"] !== undefined) {
    contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
  }
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = __expectString(output["prefixListId"]);
  }
  if (output["prefixListOwnerId"] !== undefined) {
    contents.PrefixListOwnerId = __expectString(output["prefixListOwnerId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["blackhole"] !== undefined) {
    contents.Blackhole = __parseBoolean(output["blackhole"]);
  }
  if (output["transitGatewayAttachment"] !== undefined) {
    contents.TransitGatewayAttachment = de_TransitGatewayPrefixListAttachment(
      output["transitGatewayAttachment"],
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPrefixListReferenceSet
 */
const de_TransitGatewayPrefixListReferenceSet = (
  output: any,
  context: __SerdeContext
): TransitGatewayPrefixListReference[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayPrefixListReference(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayPropagation
 */
const de_TransitGatewayPropagation = (output: any, context: __SerdeContext): TransitGatewayPropagation => {
  const contents: any = {};
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["transitGatewayRouteTableId"] !== undefined) {
    contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["transitGatewayRouteTableAnnouncementId"] !== undefined) {
    contents.TransitGatewayRouteTableAnnouncementId = __expectString(output["transitGatewayRouteTableAnnouncementId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRoute
 */
const de_TransitGatewayRoute = (output: any, context: __SerdeContext): TransitGatewayRoute => {
  const contents: any = {};
  if (output["destinationCidrBlock"] !== undefined) {
    contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
  }
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = __expectString(output["prefixListId"]);
  }
  if (output["transitGatewayRouteTableAnnouncementId"] !== undefined) {
    contents.TransitGatewayRouteTableAnnouncementId = __expectString(output["transitGatewayRouteTableAnnouncementId"]);
  }
  if (output.transitGatewayAttachments === "") {
    contents.TransitGatewayAttachments = [];
  } else if (
    output["transitGatewayAttachments"] !== undefined &&
    output["transitGatewayAttachments"]["item"] !== undefined
  ) {
    contents.TransitGatewayAttachments = de_TransitGatewayRouteAttachmentList(
      __getArrayIfSingleItem(output["transitGatewayAttachments"]["item"]),
      context
    );
  }
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRouteAttachment
 */
const de_TransitGatewayRouteAttachment = (output: any, context: __SerdeContext): TransitGatewayRouteAttachment => {
  const contents: any = {};
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRouteAttachmentList
 */
const de_TransitGatewayRouteAttachmentList = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayRouteAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayRouteList
 */
const de_TransitGatewayRouteList = (output: any, context: __SerdeContext): TransitGatewayRoute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayRoute(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayRouteTable
 */
const de_TransitGatewayRouteTable = (output: any, context: __SerdeContext): TransitGatewayRouteTable => {
  const contents: any = {};
  if (output["transitGatewayRouteTableId"] !== undefined) {
    contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["defaultAssociationRouteTable"] !== undefined) {
    contents.DefaultAssociationRouteTable = __parseBoolean(output["defaultAssociationRouteTable"]);
  }
  if (output["defaultPropagationRouteTable"] !== undefined) {
    contents.DefaultPropagationRouteTable = __parseBoolean(output["defaultPropagationRouteTable"]);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRouteTableAnnouncement
 */
const de_TransitGatewayRouteTableAnnouncement = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTableAnnouncement => {
  const contents: any = {};
  if (output["transitGatewayRouteTableAnnouncementId"] !== undefined) {
    contents.TransitGatewayRouteTableAnnouncementId = __expectString(output["transitGatewayRouteTableAnnouncementId"]);
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
  }
  if (output["coreNetworkId"] !== undefined) {
    contents.CoreNetworkId = __expectString(output["coreNetworkId"]);
  }
  if (output["peerTransitGatewayId"] !== undefined) {
    contents.PeerTransitGatewayId = __expectString(output["peerTransitGatewayId"]);
  }
  if (output["peerCoreNetworkId"] !== undefined) {
    contents.PeerCoreNetworkId = __expectString(output["peerCoreNetworkId"]);
  }
  if (output["peeringAttachmentId"] !== undefined) {
    contents.PeeringAttachmentId = __expectString(output["peeringAttachmentId"]);
  }
  if (output["announcementDirection"] !== undefined) {
    contents.AnnouncementDirection = __expectString(output["announcementDirection"]);
  }
  if (output["transitGatewayRouteTableId"] !== undefined) {
    contents.TransitGatewayRouteTableId = __expectString(output["transitGatewayRouteTableId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRouteTableAnnouncementList
 */
const de_TransitGatewayRouteTableAnnouncementList = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTableAnnouncement[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayRouteTableAnnouncement(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayRouteTableAssociation
 */
const de_TransitGatewayRouteTableAssociation = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTableAssociation => {
  const contents: any = {};
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRouteTableAssociationList
 */
const de_TransitGatewayRouteTableAssociationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTableAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayRouteTableAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayRouteTableList
 */
const de_TransitGatewayRouteTableList = (output: any, context: __SerdeContext): TransitGatewayRouteTable[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayRouteTable(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayRouteTablePropagation
 */
const de_TransitGatewayRouteTablePropagation = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTablePropagation => {
  const contents: any = {};
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["transitGatewayRouteTableAnnouncementId"] !== undefined) {
    contents.TransitGatewayRouteTableAnnouncementId = __expectString(output["transitGatewayRouteTableAnnouncementId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRouteTablePropagationList
 */
const de_TransitGatewayRouteTablePropagationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTablePropagation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayRouteTablePropagation(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayRouteTableRoute
 */
const de_TransitGatewayRouteTableRoute = (output: any, context: __SerdeContext): TransitGatewayRouteTableRoute => {
  const contents: any = {};
  if (output["destinationCidr"] !== undefined) {
    contents.DestinationCidr = __expectString(output["destinationCidr"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["routeOrigin"] !== undefined) {
    contents.RouteOrigin = __expectString(output["routeOrigin"]);
  }
  if (output["prefixListId"] !== undefined) {
    contents.PrefixListId = __expectString(output["prefixListId"]);
  }
  if (output["attachmentId"] !== undefined) {
    contents.AttachmentId = __expectString(output["attachmentId"]);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  if (output["resourceType"] !== undefined) {
    contents.ResourceType = __expectString(output["resourceType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayVpcAttachment
 */
const de_TransitGatewayVpcAttachment = (output: any, context: __SerdeContext): TransitGatewayVpcAttachment => {
  const contents: any = {};
  if (output["transitGatewayAttachmentId"] !== undefined) {
    contents.TransitGatewayAttachmentId = __expectString(output["transitGatewayAttachmentId"]);
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["vpcOwnerId"] !== undefined) {
    contents.VpcOwnerId = __expectString(output["vpcOwnerId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output.subnetIds === "") {
    contents.SubnetIds = [];
  } else if (output["subnetIds"] !== undefined && output["subnetIds"]["item"] !== undefined) {
    contents.SubnetIds = de_ValueStringList(__getArrayIfSingleItem(output["subnetIds"]["item"]), context);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTime"]));
  }
  if (output["options"] !== undefined) {
    contents.Options = de_TransitGatewayVpcAttachmentOptions(output["options"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayVpcAttachmentList
 */
const de_TransitGatewayVpcAttachmentList = (output: any, context: __SerdeContext): TransitGatewayVpcAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayVpcAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayVpcAttachmentOptions
 */
const de_TransitGatewayVpcAttachmentOptions = (
  output: any,
  context: __SerdeContext
): TransitGatewayVpcAttachmentOptions => {
  const contents: any = {};
  if (output["dnsSupport"] !== undefined) {
    contents.DnsSupport = __expectString(output["dnsSupport"]);
  }
  if (output["ipv6Support"] !== undefined) {
    contents.Ipv6Support = __expectString(output["ipv6Support"]);
  }
  if (output["applianceModeSupport"] !== undefined) {
    contents.ApplianceModeSupport = __expectString(output["applianceModeSupport"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TrunkInterfaceAssociation
 */
const de_TrunkInterfaceAssociation = (output: any, context: __SerdeContext): TrunkInterfaceAssociation => {
  const contents: any = {};
  if (output["associationId"] !== undefined) {
    contents.AssociationId = __expectString(output["associationId"]);
  }
  if (output["branchInterfaceId"] !== undefined) {
    contents.BranchInterfaceId = __expectString(output["branchInterfaceId"]);
  }
  if (output["trunkInterfaceId"] !== undefined) {
    contents.TrunkInterfaceId = __expectString(output["trunkInterfaceId"]);
  }
  if (output["interfaceProtocol"] !== undefined) {
    contents.InterfaceProtocol = __expectString(output["interfaceProtocol"]);
  }
  if (output["vlanId"] !== undefined) {
    contents.VlanId = __strictParseInt32(output["vlanId"]) as number;
  }
  if (output["greKey"] !== undefined) {
    contents.GreKey = __strictParseInt32(output["greKey"]) as number;
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TrunkInterfaceAssociationList
 */
const de_TrunkInterfaceAssociationList = (output: any, context: __SerdeContext): TrunkInterfaceAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TrunkInterfaceAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2TunnelOption
 */
const de_TunnelOption = (output: any, context: __SerdeContext): TunnelOption => {
  const contents: any = {};
  if (output["outsideIpAddress"] !== undefined) {
    contents.OutsideIpAddress = __expectString(output["outsideIpAddress"]);
  }
  if (output["tunnelInsideCidr"] !== undefined) {
    contents.TunnelInsideCidr = __expectString(output["tunnelInsideCidr"]);
  }
  if (output["tunnelInsideIpv6Cidr"] !== undefined) {
    contents.TunnelInsideIpv6Cidr = __expectString(output["tunnelInsideIpv6Cidr"]);
  }
  if (output["preSharedKey"] !== undefined) {
    contents.PreSharedKey = __expectString(output["preSharedKey"]);
  }
  if (output["phase1LifetimeSeconds"] !== undefined) {
    contents.Phase1LifetimeSeconds = __strictParseInt32(output["phase1LifetimeSeconds"]) as number;
  }
  if (output["phase2LifetimeSeconds"] !== undefined) {
    contents.Phase2LifetimeSeconds = __strictParseInt32(output["phase2LifetimeSeconds"]) as number;
  }
  if (output["rekeyMarginTimeSeconds"] !== undefined) {
    contents.RekeyMarginTimeSeconds = __strictParseInt32(output["rekeyMarginTimeSeconds"]) as number;
  }
  if (output["rekeyFuzzPercentage"] !== undefined) {
    contents.RekeyFuzzPercentage = __strictParseInt32(output["rekeyFuzzPercentage"]) as number;
  }
  if (output["replayWindowSize"] !== undefined) {
    contents.ReplayWindowSize = __strictParseInt32(output["replayWindowSize"]) as number;
  }
  if (output["dpdTimeoutSeconds"] !== undefined) {
    contents.DpdTimeoutSeconds = __strictParseInt32(output["dpdTimeoutSeconds"]) as number;
  }
  if (output["dpdTimeoutAction"] !== undefined) {
    contents.DpdTimeoutAction = __expectString(output["dpdTimeoutAction"]);
  }
  if (output.phase1EncryptionAlgorithmSet === "") {
    contents.Phase1EncryptionAlgorithms = [];
  } else if (
    output["phase1EncryptionAlgorithmSet"] !== undefined &&
    output["phase1EncryptionAlgorithmSet"]["item"] !== undefined
  ) {
    contents.Phase1EncryptionAlgorithms = de_Phase1EncryptionAlgorithmsList(
      __getArrayIfSingleItem(output["phase1EncryptionAlgorithmSet"]["item"]),
      context
    );
  }
  if (output.phase2EncryptionAlgorithmSet === "") {
    contents.Phase2EncryptionAlgorithms = [];
  } else if (
    output["phase2EncryptionAlgorithmSet"] !== undefined &&
    output["phase2EncryptionAlgorithmSet"]["item"] !== undefined
  ) {
    contents.Phase2EncryptionAlgorithms = de_Phase2EncryptionAlgorithmsList(
      __getArrayIfSingleItem(output["phase2EncryptionAlgorithmSet"]["item"]),
      context
    );
  }
  if (output.phase1IntegrityAlgorithmSet === "") {
    contents.Phase1IntegrityAlgorithms = [];
  } else if (
    output["phase1IntegrityAlgorithmSet"] !== undefined &&
    output["phase1IntegrityAlgorithmSet"]["item"] !== undefined
  ) {
    contents.Phase1IntegrityAlgorithms = de_Phase1IntegrityAlgorithmsList(
      __getArrayIfSingleItem(output["phase1IntegrityAlgorithmSet"]["item"]),
      context
    );
  }
  if (output.phase2IntegrityAlgorithmSet === "") {
    contents.Phase2IntegrityAlgorithms = [];
  } else if (
    output["phase2IntegrityAlgorithmSet"] !== undefined &&
    output["phase2IntegrityAlgorithmSet"]["item"] !== undefined
  ) {
    contents.Phase2IntegrityAlgorithms = de_Phase2IntegrityAlgorithmsList(
      __getArrayIfSingleItem(output["phase2IntegrityAlgorithmSet"]["item"]),
      context
    );
  }
  if (output.phase1DHGroupNumberSet === "") {
    contents.Phase1DHGroupNumbers = [];
  } else if (output["phase1DHGroupNumberSet"] !== undefined && output["phase1DHGroupNumberSet"]["item"] !== undefined) {
    contents.Phase1DHGroupNumbers = de_Phase1DHGroupNumbersList(
      __getArrayIfSingleItem(output["phase1DHGroupNumberSet"]["item"]),
      context
    );
  }
  if (output.phase2DHGroupNumberSet === "") {
    contents.Phase2DHGroupNumbers = [];
  } else if (output["phase2DHGroupNumberSet"] !== undefined && output["phase2DHGroupNumberSet"]["item"] !== undefined) {
    contents.Phase2DHGroupNumbers = de_Phase2DHGroupNumbersList(
      __getArrayIfSingleItem(output["phase2DHGroupNumberSet"]["item"]),
      context
    );
  }
  if (output.ikeVersionSet === "") {
    contents.IkeVersions = [];
  } else if (output["ikeVersionSet"] !== undefined && output["ikeVersionSet"]["item"] !== undefined) {
    contents.IkeVersions = de_IKEVersionsList(__getArrayIfSingleItem(output["ikeVersionSet"]["item"]), context);
  }
  if (output["startupAction"] !== undefined) {
    contents.StartupAction = __expectString(output["startupAction"]);
  }
  if (output["logOptions"] !== undefined) {
    contents.LogOptions = de_VpnTunnelLogOptions(output["logOptions"], context);
  }
  if (output["enableTunnelLifecycleControl"] !== undefined) {
    contents.EnableTunnelLifecycleControl = __parseBoolean(output["enableTunnelLifecycleControl"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TunnelOptionsList
 */
const de_TunnelOptionsList = (output: any, context: __SerdeContext): TunnelOption[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TunnelOption(entry, context);
    });
};

/**
 * deserializeAws_ec2UnassignIpv6AddressesResult
 */
const de_UnassignIpv6AddressesResult = (output: any, context: __SerdeContext): UnassignIpv6AddressesResult => {
  const contents: any = {};
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output.unassignedIpv6Addresses === "") {
    contents.UnassignedIpv6Addresses = [];
  } else if (
    output["unassignedIpv6Addresses"] !== undefined &&
    output["unassignedIpv6Addresses"]["item"] !== undefined
  ) {
    contents.UnassignedIpv6Addresses = de_Ipv6AddressList(
      __getArrayIfSingleItem(output["unassignedIpv6Addresses"]["item"]),
      context
    );
  }
  if (output.unassignedIpv6PrefixSet === "") {
    contents.UnassignedIpv6Prefixes = [];
  } else if (
    output["unassignedIpv6PrefixSet"] !== undefined &&
    output["unassignedIpv6PrefixSet"]["item"] !== undefined
  ) {
    contents.UnassignedIpv6Prefixes = de_IpPrefixList(
      __getArrayIfSingleItem(output["unassignedIpv6PrefixSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2UnassignPrivateNatGatewayAddressResult
 */
const de_UnassignPrivateNatGatewayAddressResult = (
  output: any,
  context: __SerdeContext
): UnassignPrivateNatGatewayAddressResult => {
  const contents: any = {};
  if (output["natGatewayId"] !== undefined) {
    contents.NatGatewayId = __expectString(output["natGatewayId"]);
  }
  if (output.natGatewayAddressSet === "") {
    contents.NatGatewayAddresses = [];
  } else if (output["natGatewayAddressSet"] !== undefined && output["natGatewayAddressSet"]["item"] !== undefined) {
    contents.NatGatewayAddresses = de_NatGatewayAddressList(
      __getArrayIfSingleItem(output["natGatewayAddressSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2UnmonitorInstancesResult
 */
const de_UnmonitorInstancesResult = (output: any, context: __SerdeContext): UnmonitorInstancesResult => {
  const contents: any = {};
  if (output.instancesSet === "") {
    contents.InstanceMonitorings = [];
  } else if (output["instancesSet"] !== undefined && output["instancesSet"]["item"] !== undefined) {
    contents.InstanceMonitorings = de_InstanceMonitoringList(
      __getArrayIfSingleItem(output["instancesSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItem
 */
const de_UnsuccessfulInstanceCreditSpecificationItem = (
  output: any,
  context: __SerdeContext
): UnsuccessfulInstanceCreditSpecificationItem => {
  const contents: any = {};
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["error"] !== undefined) {
    contents.Error = de_UnsuccessfulInstanceCreditSpecificationItemError(output["error"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItemError
 */
const de_UnsuccessfulInstanceCreditSpecificationItemError = (
  output: any,
  context: __SerdeContext
): UnsuccessfulInstanceCreditSpecificationItemError => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationSet
 */
const de_UnsuccessfulInstanceCreditSpecificationSet = (
  output: any,
  context: __SerdeContext
): UnsuccessfulInstanceCreditSpecificationItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_UnsuccessfulInstanceCreditSpecificationItem(entry, context);
    });
};

/**
 * deserializeAws_ec2UnsuccessfulItem
 */
const de_UnsuccessfulItem = (output: any, context: __SerdeContext): UnsuccessfulItem => {
  const contents: any = {};
  if (output["error"] !== undefined) {
    contents.Error = de_UnsuccessfulItemError(output["error"], context);
  }
  if (output["resourceId"] !== undefined) {
    contents.ResourceId = __expectString(output["resourceId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UnsuccessfulItemError
 */
const de_UnsuccessfulItemError = (output: any, context: __SerdeContext): UnsuccessfulItemError => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UnsuccessfulItemList
 */
const de_UnsuccessfulItemList = (output: any, context: __SerdeContext): UnsuccessfulItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_UnsuccessfulItem(entry, context);
    });
};

/**
 * deserializeAws_ec2UnsuccessfulItemSet
 */
const de_UnsuccessfulItemSet = (output: any, context: __SerdeContext): UnsuccessfulItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_UnsuccessfulItem(entry, context);
    });
};

/**
 * deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressResult
 */
const de_UpdateSecurityGroupRuleDescriptionsEgressResult = (
  output: any,
  context: __SerdeContext
): UpdateSecurityGroupRuleDescriptionsEgressResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressResult
 */
const de_UpdateSecurityGroupRuleDescriptionsIngressResult = (
  output: any,
  context: __SerdeContext
): UpdateSecurityGroupRuleDescriptionsIngressResult => {
  const contents: any = {};
  if (output["return"] !== undefined) {
    contents.Return = __parseBoolean(output["return"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UsageClassTypeList
 */
const de_UsageClassTypeList = (output: any, context: __SerdeContext): UsageClassType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2UserBucketDetails
 */
const de_UserBucketDetails = (output: any, context: __SerdeContext): UserBucketDetails => {
  const contents: any = {};
  if (output["s3Bucket"] !== undefined) {
    contents.S3Bucket = __expectString(output["s3Bucket"]);
  }
  if (output["s3Key"] !== undefined) {
    contents.S3Key = __expectString(output["s3Key"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UserIdGroupPair
 */
const de_UserIdGroupPair = (output: any, context: __SerdeContext): UserIdGroupPair => {
  const contents: any = {};
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["groupId"] !== undefined) {
    contents.GroupId = __expectString(output["groupId"]);
  }
  if (output["groupName"] !== undefined) {
    contents.GroupName = __expectString(output["groupName"]);
  }
  if (output["peeringStatus"] !== undefined) {
    contents.PeeringStatus = __expectString(output["peeringStatus"]);
  }
  if (output["userId"] !== undefined) {
    contents.UserId = __expectString(output["userId"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["vpcPeeringConnectionId"] !== undefined) {
    contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UserIdGroupPairList
 */
const de_UserIdGroupPairList = (output: any, context: __SerdeContext): UserIdGroupPair[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_UserIdGroupPair(entry, context);
    });
};

/**
 * deserializeAws_ec2UserIdGroupPairSet
 */
const de_UserIdGroupPairSet = (output: any, context: __SerdeContext): UserIdGroupPair[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_UserIdGroupPair(entry, context);
    });
};

/**
 * deserializeAws_ec2ValidationError
 */
const de_ValidationError = (output: any, context: __SerdeContext): ValidationError => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ValidationWarning
 */
const de_ValidationWarning = (output: any, context: __SerdeContext): ValidationWarning => {
  const contents: any = {};
  if (output.errorSet === "") {
    contents.Errors = [];
  } else if (output["errorSet"] !== undefined && output["errorSet"]["item"] !== undefined) {
    contents.Errors = de_ErrorSet(__getArrayIfSingleItem(output["errorSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ValueStringList
 */
const de_ValueStringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2VCpuCountRange
 */
const de_VCpuCountRange = (output: any, context: __SerdeContext): VCpuCountRange => {
  const contents: any = {};
  if (output["min"] !== undefined) {
    contents.Min = __strictParseInt32(output["min"]) as number;
  }
  if (output["max"] !== undefined) {
    contents.Max = __strictParseInt32(output["max"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2VCpuInfo
 */
const de_VCpuInfo = (output: any, context: __SerdeContext): VCpuInfo => {
  const contents: any = {};
  if (output["defaultVCpus"] !== undefined) {
    contents.DefaultVCpus = __strictParseInt32(output["defaultVCpus"]) as number;
  }
  if (output["defaultCores"] !== undefined) {
    contents.DefaultCores = __strictParseInt32(output["defaultCores"]) as number;
  }
  if (output["defaultThreadsPerCore"] !== undefined) {
    contents.DefaultThreadsPerCore = __strictParseInt32(output["defaultThreadsPerCore"]) as number;
  }
  if (output.validCores === "") {
    contents.ValidCores = [];
  } else if (output["validCores"] !== undefined && output["validCores"]["item"] !== undefined) {
    contents.ValidCores = de_CoreCountList(__getArrayIfSingleItem(output["validCores"]["item"]), context);
  }
  if (output.validThreadsPerCore === "") {
    contents.ValidThreadsPerCore = [];
  } else if (output["validThreadsPerCore"] !== undefined && output["validThreadsPerCore"]["item"] !== undefined) {
    contents.ValidThreadsPerCore = de_ThreadsPerCoreList(
      __getArrayIfSingleItem(output["validThreadsPerCore"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessEndpoint
 */
const de_VerifiedAccessEndpoint = (output: any, context: __SerdeContext): VerifiedAccessEndpoint => {
  const contents: any = {};
  if (output["verifiedAccessInstanceId"] !== undefined) {
    contents.VerifiedAccessInstanceId = __expectString(output["verifiedAccessInstanceId"]);
  }
  if (output["verifiedAccessGroupId"] !== undefined) {
    contents.VerifiedAccessGroupId = __expectString(output["verifiedAccessGroupId"]);
  }
  if (output["verifiedAccessEndpointId"] !== undefined) {
    contents.VerifiedAccessEndpointId = __expectString(output["verifiedAccessEndpointId"]);
  }
  if (output["applicationDomain"] !== undefined) {
    contents.ApplicationDomain = __expectString(output["applicationDomain"]);
  }
  if (output["endpointType"] !== undefined) {
    contents.EndpointType = __expectString(output["endpointType"]);
  }
  if (output["attachmentType"] !== undefined) {
    contents.AttachmentType = __expectString(output["attachmentType"]);
  }
  if (output["domainCertificateArn"] !== undefined) {
    contents.DomainCertificateArn = __expectString(output["domainCertificateArn"]);
  }
  if (output["endpointDomain"] !== undefined) {
    contents.EndpointDomain = __expectString(output["endpointDomain"]);
  }
  if (output["deviceValidationDomain"] !== undefined) {
    contents.DeviceValidationDomain = __expectString(output["deviceValidationDomain"]);
  }
  if (output.securityGroupIdSet === "") {
    contents.SecurityGroupIds = [];
  } else if (output["securityGroupIdSet"] !== undefined && output["securityGroupIdSet"]["item"] !== undefined) {
    contents.SecurityGroupIds = de_SecurityGroupIdList(
      __getArrayIfSingleItem(output["securityGroupIdSet"]["item"]),
      context
    );
  }
  if (output["loadBalancerOptions"] !== undefined) {
    contents.LoadBalancerOptions = de_VerifiedAccessEndpointLoadBalancerOptions(output["loadBalancerOptions"], context);
  }
  if (output["networkInterfaceOptions"] !== undefined) {
    contents.NetworkInterfaceOptions = de_VerifiedAccessEndpointEniOptions(output["networkInterfaceOptions"], context);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_VerifiedAccessEndpointStatus(output["status"], context);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectString(output["creationTime"]);
  }
  if (output["lastUpdatedTime"] !== undefined) {
    contents.LastUpdatedTime = __expectString(output["lastUpdatedTime"]);
  }
  if (output["deletionTime"] !== undefined) {
    contents.DeletionTime = __expectString(output["deletionTime"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["sseSpecification"] !== undefined) {
    contents.SseSpecification = de_VerifiedAccessSseSpecificationResponse(output["sseSpecification"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessEndpointEniOptions
 */
const de_VerifiedAccessEndpointEniOptions = (
  output: any,
  context: __SerdeContext
): VerifiedAccessEndpointEniOptions => {
  const contents: any = {};
  if (output["networkInterfaceId"] !== undefined) {
    contents.NetworkInterfaceId = __expectString(output["networkInterfaceId"]);
  }
  if (output["protocol"] !== undefined) {
    contents.Protocol = __expectString(output["protocol"]);
  }
  if (output["port"] !== undefined) {
    contents.Port = __strictParseInt32(output["port"]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessEndpointList
 */
const de_VerifiedAccessEndpointList = (output: any, context: __SerdeContext): VerifiedAccessEndpoint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VerifiedAccessEndpoint(entry, context);
    });
};

/**
 * deserializeAws_ec2VerifiedAccessEndpointLoadBalancerOptions
 */
const de_VerifiedAccessEndpointLoadBalancerOptions = (
  output: any,
  context: __SerdeContext
): VerifiedAccessEndpointLoadBalancerOptions => {
  const contents: any = {};
  if (output["protocol"] !== undefined) {
    contents.Protocol = __expectString(output["protocol"]);
  }
  if (output["port"] !== undefined) {
    contents.Port = __strictParseInt32(output["port"]) as number;
  }
  if (output["loadBalancerArn"] !== undefined) {
    contents.LoadBalancerArn = __expectString(output["loadBalancerArn"]);
  }
  if (output.subnetIdSet === "") {
    contents.SubnetIds = [];
  } else if (output["subnetIdSet"] !== undefined && output["subnetIdSet"]["item"] !== undefined) {
    contents.SubnetIds = de_VerifiedAccessEndpointSubnetIdList(
      __getArrayIfSingleItem(output["subnetIdSet"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessEndpointStatus
 */
const de_VerifiedAccessEndpointStatus = (output: any, context: __SerdeContext): VerifiedAccessEndpointStatus => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessEndpointSubnetIdList
 */
const de_VerifiedAccessEndpointSubnetIdList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2VerifiedAccessGroup
 */
const de_VerifiedAccessGroup = (output: any, context: __SerdeContext): VerifiedAccessGroup => {
  const contents: any = {};
  if (output["verifiedAccessGroupId"] !== undefined) {
    contents.VerifiedAccessGroupId = __expectString(output["verifiedAccessGroupId"]);
  }
  if (output["verifiedAccessInstanceId"] !== undefined) {
    contents.VerifiedAccessInstanceId = __expectString(output["verifiedAccessInstanceId"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["owner"] !== undefined) {
    contents.Owner = __expectString(output["owner"]);
  }
  if (output["verifiedAccessGroupArn"] !== undefined) {
    contents.VerifiedAccessGroupArn = __expectString(output["verifiedAccessGroupArn"]);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectString(output["creationTime"]);
  }
  if (output["lastUpdatedTime"] !== undefined) {
    contents.LastUpdatedTime = __expectString(output["lastUpdatedTime"]);
  }
  if (output["deletionTime"] !== undefined) {
    contents.DeletionTime = __expectString(output["deletionTime"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["sseSpecification"] !== undefined) {
    contents.SseSpecification = de_VerifiedAccessSseSpecificationResponse(output["sseSpecification"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessGroupList
 */
const de_VerifiedAccessGroupList = (output: any, context: __SerdeContext): VerifiedAccessGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VerifiedAccessGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2VerifiedAccessInstance
 */
const de_VerifiedAccessInstance = (output: any, context: __SerdeContext): VerifiedAccessInstance => {
  const contents: any = {};
  if (output["verifiedAccessInstanceId"] !== undefined) {
    contents.VerifiedAccessInstanceId = __expectString(output["verifiedAccessInstanceId"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output.verifiedAccessTrustProviderSet === "") {
    contents.VerifiedAccessTrustProviders = [];
  } else if (
    output["verifiedAccessTrustProviderSet"] !== undefined &&
    output["verifiedAccessTrustProviderSet"]["item"] !== undefined
  ) {
    contents.VerifiedAccessTrustProviders = de_VerifiedAccessTrustProviderCondensedList(
      __getArrayIfSingleItem(output["verifiedAccessTrustProviderSet"]["item"]),
      context
    );
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectString(output["creationTime"]);
  }
  if (output["lastUpdatedTime"] !== undefined) {
    contents.LastUpdatedTime = __expectString(output["lastUpdatedTime"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["fipsEnabled"] !== undefined) {
    contents.FipsEnabled = __parseBoolean(output["fipsEnabled"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessInstanceList
 */
const de_VerifiedAccessInstanceList = (output: any, context: __SerdeContext): VerifiedAccessInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VerifiedAccessInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2VerifiedAccessInstanceLoggingConfiguration
 */
const de_VerifiedAccessInstanceLoggingConfiguration = (
  output: any,
  context: __SerdeContext
): VerifiedAccessInstanceLoggingConfiguration => {
  const contents: any = {};
  if (output["verifiedAccessInstanceId"] !== undefined) {
    contents.VerifiedAccessInstanceId = __expectString(output["verifiedAccessInstanceId"]);
  }
  if (output["accessLogs"] !== undefined) {
    contents.AccessLogs = de_VerifiedAccessLogs(output["accessLogs"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessInstanceLoggingConfigurationList
 */
const de_VerifiedAccessInstanceLoggingConfigurationList = (
  output: any,
  context: __SerdeContext
): VerifiedAccessInstanceLoggingConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VerifiedAccessInstanceLoggingConfiguration(entry, context);
    });
};

/**
 * deserializeAws_ec2VerifiedAccessLogCloudWatchLogsDestination
 */
const de_VerifiedAccessLogCloudWatchLogsDestination = (
  output: any,
  context: __SerdeContext
): VerifiedAccessLogCloudWatchLogsDestination => {
  const contents: any = {};
  if (output["enabled"] !== undefined) {
    contents.Enabled = __parseBoolean(output["enabled"]);
  }
  if (output["deliveryStatus"] !== undefined) {
    contents.DeliveryStatus = de_VerifiedAccessLogDeliveryStatus(output["deliveryStatus"], context);
  }
  if (output["logGroup"] !== undefined) {
    contents.LogGroup = __expectString(output["logGroup"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessLogDeliveryStatus
 */
const de_VerifiedAccessLogDeliveryStatus = (output: any, context: __SerdeContext): VerifiedAccessLogDeliveryStatus => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessLogKinesisDataFirehoseDestination
 */
const de_VerifiedAccessLogKinesisDataFirehoseDestination = (
  output: any,
  context: __SerdeContext
): VerifiedAccessLogKinesisDataFirehoseDestination => {
  const contents: any = {};
  if (output["enabled"] !== undefined) {
    contents.Enabled = __parseBoolean(output["enabled"]);
  }
  if (output["deliveryStatus"] !== undefined) {
    contents.DeliveryStatus = de_VerifiedAccessLogDeliveryStatus(output["deliveryStatus"], context);
  }
  if (output["deliveryStream"] !== undefined) {
    contents.DeliveryStream = __expectString(output["deliveryStream"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessLogs
 */
const de_VerifiedAccessLogs = (output: any, context: __SerdeContext): VerifiedAccessLogs => {
  const contents: any = {};
  if (output["s3"] !== undefined) {
    contents.S3 = de_VerifiedAccessLogS3Destination(output["s3"], context);
  }
  if (output["cloudWatchLogs"] !== undefined) {
    contents.CloudWatchLogs = de_VerifiedAccessLogCloudWatchLogsDestination(output["cloudWatchLogs"], context);
  }
  if (output["kinesisDataFirehose"] !== undefined) {
    contents.KinesisDataFirehose = de_VerifiedAccessLogKinesisDataFirehoseDestination(
      output["kinesisDataFirehose"],
      context
    );
  }
  if (output["logVersion"] !== undefined) {
    contents.LogVersion = __expectString(output["logVersion"]);
  }
  if (output["includeTrustContext"] !== undefined) {
    contents.IncludeTrustContext = __parseBoolean(output["includeTrustContext"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessLogS3Destination
 */
const de_VerifiedAccessLogS3Destination = (output: any, context: __SerdeContext): VerifiedAccessLogS3Destination => {
  const contents: any = {};
  if (output["enabled"] !== undefined) {
    contents.Enabled = __parseBoolean(output["enabled"]);
  }
  if (output["deliveryStatus"] !== undefined) {
    contents.DeliveryStatus = de_VerifiedAccessLogDeliveryStatus(output["deliveryStatus"], context);
  }
  if (output["bucketName"] !== undefined) {
    contents.BucketName = __expectString(output["bucketName"]);
  }
  if (output["prefix"] !== undefined) {
    contents.Prefix = __expectString(output["prefix"]);
  }
  if (output["bucketOwner"] !== undefined) {
    contents.BucketOwner = __expectString(output["bucketOwner"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessSseSpecificationResponse
 */
const de_VerifiedAccessSseSpecificationResponse = (
  output: any,
  context: __SerdeContext
): VerifiedAccessSseSpecificationResponse => {
  const contents: any = {};
  if (output["customerManagedKeyEnabled"] !== undefined) {
    contents.CustomerManagedKeyEnabled = __parseBoolean(output["customerManagedKeyEnabled"]);
  }
  if (output["kmsKeyArn"] !== undefined) {
    contents.KmsKeyArn = __expectString(output["kmsKeyArn"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessTrustProvider
 */
const de_VerifiedAccessTrustProvider = (output: any, context: __SerdeContext): VerifiedAccessTrustProvider => {
  const contents: any = {};
  if (output["verifiedAccessTrustProviderId"] !== undefined) {
    contents.VerifiedAccessTrustProviderId = __expectString(output["verifiedAccessTrustProviderId"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["trustProviderType"] !== undefined) {
    contents.TrustProviderType = __expectString(output["trustProviderType"]);
  }
  if (output["userTrustProviderType"] !== undefined) {
    contents.UserTrustProviderType = __expectString(output["userTrustProviderType"]);
  }
  if (output["deviceTrustProviderType"] !== undefined) {
    contents.DeviceTrustProviderType = __expectString(output["deviceTrustProviderType"]);
  }
  if (output["oidcOptions"] !== undefined) {
    contents.OidcOptions = de_OidcOptions(output["oidcOptions"], context);
  }
  if (output["deviceOptions"] !== undefined) {
    contents.DeviceOptions = de_DeviceOptions(output["deviceOptions"], context);
  }
  if (output["policyReferenceName"] !== undefined) {
    contents.PolicyReferenceName = __expectString(output["policyReferenceName"]);
  }
  if (output["creationTime"] !== undefined) {
    contents.CreationTime = __expectString(output["creationTime"]);
  }
  if (output["lastUpdatedTime"] !== undefined) {
    contents.LastUpdatedTime = __expectString(output["lastUpdatedTime"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["sseSpecification"] !== undefined) {
    contents.SseSpecification = de_VerifiedAccessSseSpecificationResponse(output["sseSpecification"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessTrustProviderCondensed
 */
const de_VerifiedAccessTrustProviderCondensed = (
  output: any,
  context: __SerdeContext
): VerifiedAccessTrustProviderCondensed => {
  const contents: any = {};
  if (output["verifiedAccessTrustProviderId"] !== undefined) {
    contents.VerifiedAccessTrustProviderId = __expectString(output["verifiedAccessTrustProviderId"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["trustProviderType"] !== undefined) {
    contents.TrustProviderType = __expectString(output["trustProviderType"]);
  }
  if (output["userTrustProviderType"] !== undefined) {
    contents.UserTrustProviderType = __expectString(output["userTrustProviderType"]);
  }
  if (output["deviceTrustProviderType"] !== undefined) {
    contents.DeviceTrustProviderType = __expectString(output["deviceTrustProviderType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessTrustProviderCondensedList
 */
const de_VerifiedAccessTrustProviderCondensedList = (
  output: any,
  context: __SerdeContext
): VerifiedAccessTrustProviderCondensed[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VerifiedAccessTrustProviderCondensed(entry, context);
    });
};

/**
 * deserializeAws_ec2VerifiedAccessTrustProviderList
 */
const de_VerifiedAccessTrustProviderList = (output: any, context: __SerdeContext): VerifiedAccessTrustProvider[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VerifiedAccessTrustProvider(entry, context);
    });
};

/**
 * deserializeAws_ec2VgwTelemetry
 */
const de_VgwTelemetry = (output: any, context: __SerdeContext): VgwTelemetry => {
  const contents: any = {};
  if (output["acceptedRouteCount"] !== undefined) {
    contents.AcceptedRouteCount = __strictParseInt32(output["acceptedRouteCount"]) as number;
  }
  if (output["lastStatusChange"] !== undefined) {
    contents.LastStatusChange = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["lastStatusChange"]));
  }
  if (output["outsideIpAddress"] !== undefined) {
    contents.OutsideIpAddress = __expectString(output["outsideIpAddress"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output["certificateArn"] !== undefined) {
    contents.CertificateArn = __expectString(output["certificateArn"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VgwTelemetryList
 */
const de_VgwTelemetryList = (output: any, context: __SerdeContext): VgwTelemetry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VgwTelemetry(entry, context);
    });
};

/**
 * deserializeAws_ec2VirtualizationTypeList
 */
const de_VirtualizationTypeList = (output: any, context: __SerdeContext): VirtualizationType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Volume
 */
const de_Volume = (output: any, context: __SerdeContext): Volume => {
  const contents: any = {};
  if (output.attachmentSet === "") {
    contents.Attachments = [];
  } else if (output["attachmentSet"] !== undefined && output["attachmentSet"]["item"] !== undefined) {
    contents.Attachments = de_VolumeAttachmentList(__getArrayIfSingleItem(output["attachmentSet"]["item"]), context);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["createTime"] !== undefined) {
    contents.CreateTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["createTime"]));
  }
  if (output["encrypted"] !== undefined) {
    contents.Encrypted = __parseBoolean(output["encrypted"]);
  }
  if (output["kmsKeyId"] !== undefined) {
    contents.KmsKeyId = __expectString(output["kmsKeyId"]);
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output["size"] !== undefined) {
    contents.Size = __strictParseInt32(output["size"]) as number;
  }
  if (output["snapshotId"] !== undefined) {
    contents.SnapshotId = __expectString(output["snapshotId"]);
  }
  if (output["status"] !== undefined) {
    contents.State = __expectString(output["status"]);
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = __expectString(output["volumeId"]);
  }
  if (output["iops"] !== undefined) {
    contents.Iops = __strictParseInt32(output["iops"]) as number;
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["volumeType"] !== undefined) {
    contents.VolumeType = __expectString(output["volumeType"]);
  }
  if (output["fastRestored"] !== undefined) {
    contents.FastRestored = __parseBoolean(output["fastRestored"]);
  }
  if (output["multiAttachEnabled"] !== undefined) {
    contents.MultiAttachEnabled = __parseBoolean(output["multiAttachEnabled"]);
  }
  if (output["throughput"] !== undefined) {
    contents.Throughput = __strictParseInt32(output["throughput"]) as number;
  }
  if (output["sseType"] !== undefined) {
    contents.SseType = __expectString(output["sseType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeAttachment
 */
const de_VolumeAttachment = (output: any, context: __SerdeContext): VolumeAttachment => {
  const contents: any = {};
  if (output["attachTime"] !== undefined) {
    contents.AttachTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["attachTime"]));
  }
  if (output["device"] !== undefined) {
    contents.Device = __expectString(output["device"]);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  if (output["status"] !== undefined) {
    contents.State = __expectString(output["status"]);
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = __expectString(output["volumeId"]);
  }
  if (output["deleteOnTermination"] !== undefined) {
    contents.DeleteOnTermination = __parseBoolean(output["deleteOnTermination"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeAttachmentList
 */
const de_VolumeAttachmentList = (output: any, context: __SerdeContext): VolumeAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeList
 */
const de_VolumeList = (output: any, context: __SerdeContext): Volume[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Volume(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeModification
 */
const de_VolumeModification = (output: any, context: __SerdeContext): VolumeModification => {
  const contents: any = {};
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = __expectString(output["volumeId"]);
  }
  if (output["modificationState"] !== undefined) {
    contents.ModificationState = __expectString(output["modificationState"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  if (output["targetSize"] !== undefined) {
    contents.TargetSize = __strictParseInt32(output["targetSize"]) as number;
  }
  if (output["targetIops"] !== undefined) {
    contents.TargetIops = __strictParseInt32(output["targetIops"]) as number;
  }
  if (output["targetVolumeType"] !== undefined) {
    contents.TargetVolumeType = __expectString(output["targetVolumeType"]);
  }
  if (output["targetThroughput"] !== undefined) {
    contents.TargetThroughput = __strictParseInt32(output["targetThroughput"]) as number;
  }
  if (output["targetMultiAttachEnabled"] !== undefined) {
    contents.TargetMultiAttachEnabled = __parseBoolean(output["targetMultiAttachEnabled"]);
  }
  if (output["originalSize"] !== undefined) {
    contents.OriginalSize = __strictParseInt32(output["originalSize"]) as number;
  }
  if (output["originalIops"] !== undefined) {
    contents.OriginalIops = __strictParseInt32(output["originalIops"]) as number;
  }
  if (output["originalVolumeType"] !== undefined) {
    contents.OriginalVolumeType = __expectString(output["originalVolumeType"]);
  }
  if (output["originalThroughput"] !== undefined) {
    contents.OriginalThroughput = __strictParseInt32(output["originalThroughput"]) as number;
  }
  if (output["originalMultiAttachEnabled"] !== undefined) {
    contents.OriginalMultiAttachEnabled = __parseBoolean(output["originalMultiAttachEnabled"]);
  }
  if (output["progress"] !== undefined) {
    contents.Progress = __strictParseLong(output["progress"]) as number;
  }
  if (output["startTime"] !== undefined) {
    contents.StartTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["startTime"]));
  }
  if (output["endTime"] !== undefined) {
    contents.EndTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["endTime"]));
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeModificationList
 */
const de_VolumeModificationList = (output: any, context: __SerdeContext): VolumeModification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeModification(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeStatusAction
 */
const de_VolumeStatusAction = (output: any, context: __SerdeContext): VolumeStatusAction => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["eventId"] !== undefined) {
    contents.EventId = __expectString(output["eventId"]);
  }
  if (output["eventType"] !== undefined) {
    contents.EventType = __expectString(output["eventType"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeStatusActionsList
 */
const de_VolumeStatusActionsList = (output: any, context: __SerdeContext): VolumeStatusAction[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeStatusAction(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeStatusAttachmentStatus
 */
const de_VolumeStatusAttachmentStatus = (output: any, context: __SerdeContext): VolumeStatusAttachmentStatus => {
  const contents: any = {};
  if (output["ioPerformance"] !== undefined) {
    contents.IoPerformance = __expectString(output["ioPerformance"]);
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeStatusAttachmentStatusList
 */
const de_VolumeStatusAttachmentStatusList = (output: any, context: __SerdeContext): VolumeStatusAttachmentStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeStatusAttachmentStatus(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeStatusDetails
 */
const de_VolumeStatusDetails = (output: any, context: __SerdeContext): VolumeStatusDetails => {
  const contents: any = {};
  if (output["name"] !== undefined) {
    contents.Name = __expectString(output["name"]);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeStatusDetailsList
 */
const de_VolumeStatusDetailsList = (output: any, context: __SerdeContext): VolumeStatusDetails[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeStatusDetails(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeStatusEvent
 */
const de_VolumeStatusEvent = (output: any, context: __SerdeContext): VolumeStatusEvent => {
  const contents: any = {};
  if (output["description"] !== undefined) {
    contents.Description = __expectString(output["description"]);
  }
  if (output["eventId"] !== undefined) {
    contents.EventId = __expectString(output["eventId"]);
  }
  if (output["eventType"] !== undefined) {
    contents.EventType = __expectString(output["eventType"]);
  }
  if (output["notAfter"] !== undefined) {
    contents.NotAfter = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["notAfter"]));
  }
  if (output["notBefore"] !== undefined) {
    contents.NotBefore = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["notBefore"]));
  }
  if (output["instanceId"] !== undefined) {
    contents.InstanceId = __expectString(output["instanceId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeStatusEventsList
 */
const de_VolumeStatusEventsList = (output: any, context: __SerdeContext): VolumeStatusEvent[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeStatusEvent(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeStatusInfo
 */
const de_VolumeStatusInfo = (output: any, context: __SerdeContext): VolumeStatusInfo => {
  const contents: any = {};
  if (output.details === "") {
    contents.Details = [];
  } else if (output["details"] !== undefined && output["details"]["item"] !== undefined) {
    contents.Details = de_VolumeStatusDetailsList(__getArrayIfSingleItem(output["details"]["item"]), context);
  }
  if (output["status"] !== undefined) {
    contents.Status = __expectString(output["status"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeStatusItem
 */
const de_VolumeStatusItem = (output: any, context: __SerdeContext): VolumeStatusItem => {
  const contents: any = {};
  if (output.actionsSet === "") {
    contents.Actions = [];
  } else if (output["actionsSet"] !== undefined && output["actionsSet"]["item"] !== undefined) {
    contents.Actions = de_VolumeStatusActionsList(__getArrayIfSingleItem(output["actionsSet"]["item"]), context);
  }
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["outpostArn"] !== undefined) {
    contents.OutpostArn = __expectString(output["outpostArn"]);
  }
  if (output.eventsSet === "") {
    contents.Events = [];
  } else if (output["eventsSet"] !== undefined && output["eventsSet"]["item"] !== undefined) {
    contents.Events = de_VolumeStatusEventsList(__getArrayIfSingleItem(output["eventsSet"]["item"]), context);
  }
  if (output["volumeId"] !== undefined) {
    contents.VolumeId = __expectString(output["volumeId"]);
  }
  if (output["volumeStatus"] !== undefined) {
    contents.VolumeStatus = de_VolumeStatusInfo(output["volumeStatus"], context);
  }
  if (output.attachmentStatuses === "") {
    contents.AttachmentStatuses = [];
  } else if (output["attachmentStatuses"] !== undefined && output["attachmentStatuses"]["item"] !== undefined) {
    contents.AttachmentStatuses = de_VolumeStatusAttachmentStatusList(
      __getArrayIfSingleItem(output["attachmentStatuses"]["item"]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeStatusList
 */
const de_VolumeStatusList = (output: any, context: __SerdeContext): VolumeStatusItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeStatusItem(entry, context);
    });
};

/**
 * deserializeAws_ec2Vpc
 */
const de_Vpc = (output: any, context: __SerdeContext): Vpc => {
  const contents: any = {};
  if (output["cidrBlock"] !== undefined) {
    contents.CidrBlock = __expectString(output["cidrBlock"]);
  }
  if (output["dhcpOptionsId"] !== undefined) {
    contents.DhcpOptionsId = __expectString(output["dhcpOptionsId"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["instanceTenancy"] !== undefined) {
    contents.InstanceTenancy = __expectString(output["instanceTenancy"]);
  }
  if (output.ipv6CidrBlockAssociationSet === "") {
    contents.Ipv6CidrBlockAssociationSet = [];
  } else if (
    output["ipv6CidrBlockAssociationSet"] !== undefined &&
    output["ipv6CidrBlockAssociationSet"]["item"] !== undefined
  ) {
    contents.Ipv6CidrBlockAssociationSet = de_VpcIpv6CidrBlockAssociationSet(
      __getArrayIfSingleItem(output["ipv6CidrBlockAssociationSet"]["item"]),
      context
    );
  }
  if (output.cidrBlockAssociationSet === "") {
    contents.CidrBlockAssociationSet = [];
  } else if (
    output["cidrBlockAssociationSet"] !== undefined &&
    output["cidrBlockAssociationSet"]["item"] !== undefined
  ) {
    contents.CidrBlockAssociationSet = de_VpcCidrBlockAssociationSet(
      __getArrayIfSingleItem(output["cidrBlockAssociationSet"]["item"]),
      context
    );
  }
  if (output["isDefault"] !== undefined) {
    contents.IsDefault = __parseBoolean(output["isDefault"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcAttachment
 */
const de_VpcAttachment = (output: any, context: __SerdeContext): VpcAttachment => {
  const contents: any = {};
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcAttachmentList
 */
const de_VpcAttachmentList = (output: any, context: __SerdeContext): VpcAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcCidrBlockAssociation
 */
const de_VpcCidrBlockAssociation = (output: any, context: __SerdeContext): VpcCidrBlockAssociation => {
  const contents: any = {};
  if (output["associationId"] !== undefined) {
    contents.AssociationId = __expectString(output["associationId"]);
  }
  if (output["cidrBlock"] !== undefined) {
    contents.CidrBlock = __expectString(output["cidrBlock"]);
  }
  if (output["cidrBlockState"] !== undefined) {
    contents.CidrBlockState = de_VpcCidrBlockState(output["cidrBlockState"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcCidrBlockAssociationSet
 */
const de_VpcCidrBlockAssociationSet = (output: any, context: __SerdeContext): VpcCidrBlockAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcCidrBlockAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcCidrBlockState
 */
const de_VpcCidrBlockState = (output: any, context: __SerdeContext): VpcCidrBlockState => {
  const contents: any = {};
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["statusMessage"] !== undefined) {
    contents.StatusMessage = __expectString(output["statusMessage"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcClassicLink
 */
const de_VpcClassicLink = (output: any, context: __SerdeContext): VpcClassicLink => {
  const contents: any = {};
  if (output["classicLinkEnabled"] !== undefined) {
    contents.ClassicLinkEnabled = __parseBoolean(output["classicLinkEnabled"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcClassicLinkList
 */
const de_VpcClassicLinkList = (output: any, context: __SerdeContext): VpcClassicLink[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcClassicLink(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcEndpoint
 */
const de_VpcEndpoint = (output: any, context: __SerdeContext): VpcEndpoint => {
  const contents: any = {};
  if (output["vpcEndpointId"] !== undefined) {
    contents.VpcEndpointId = __expectString(output["vpcEndpointId"]);
  }
  if (output["vpcEndpointType"] !== undefined) {
    contents.VpcEndpointType = __expectString(output["vpcEndpointType"]);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["serviceName"] !== undefined) {
    contents.ServiceName = __expectString(output["serviceName"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["policyDocument"] !== undefined) {
    contents.PolicyDocument = __expectString(output["policyDocument"]);
  }
  if (output.routeTableIdSet === "") {
    contents.RouteTableIds = [];
  } else if (output["routeTableIdSet"] !== undefined && output["routeTableIdSet"]["item"] !== undefined) {
    contents.RouteTableIds = de_ValueStringList(__getArrayIfSingleItem(output["routeTableIdSet"]["item"]), context);
  }
  if (output.subnetIdSet === "") {
    contents.SubnetIds = [];
  } else if (output["subnetIdSet"] !== undefined && output["subnetIdSet"]["item"] !== undefined) {
    contents.SubnetIds = de_ValueStringList(__getArrayIfSingleItem(output["subnetIdSet"]["item"]), context);
  }
  if (output.groupSet === "") {
    contents.Groups = [];
  } else if (output["groupSet"] !== undefined && output["groupSet"]["item"] !== undefined) {
    contents.Groups = de_GroupIdentifierSet(__getArrayIfSingleItem(output["groupSet"]["item"]), context);
  }
  if (output["ipAddressType"] !== undefined) {
    contents.IpAddressType = __expectString(output["ipAddressType"]);
  }
  if (output["dnsOptions"] !== undefined) {
    contents.DnsOptions = de_DnsOptions(output["dnsOptions"], context);
  }
  if (output["privateDnsEnabled"] !== undefined) {
    contents.PrivateDnsEnabled = __parseBoolean(output["privateDnsEnabled"]);
  }
  if (output["requesterManaged"] !== undefined) {
    contents.RequesterManaged = __parseBoolean(output["requesterManaged"]);
  }
  if (output.networkInterfaceIdSet === "") {
    contents.NetworkInterfaceIds = [];
  } else if (output["networkInterfaceIdSet"] !== undefined && output["networkInterfaceIdSet"]["item"] !== undefined) {
    contents.NetworkInterfaceIds = de_ValueStringList(
      __getArrayIfSingleItem(output["networkInterfaceIdSet"]["item"]),
      context
    );
  }
  if (output.dnsEntrySet === "") {
    contents.DnsEntries = [];
  } else if (output["dnsEntrySet"] !== undefined && output["dnsEntrySet"]["item"] !== undefined) {
    contents.DnsEntries = de_DnsEntrySet(__getArrayIfSingleItem(output["dnsEntrySet"]["item"]), context);
  }
  if (output["creationTimestamp"] !== undefined) {
    contents.CreationTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTimestamp"]));
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["lastError"] !== undefined) {
    contents.LastError = de_LastError(output["lastError"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcEndpointConnection
 */
const de_VpcEndpointConnection = (output: any, context: __SerdeContext): VpcEndpointConnection => {
  const contents: any = {};
  if (output["serviceId"] !== undefined) {
    contents.ServiceId = __expectString(output["serviceId"]);
  }
  if (output["vpcEndpointId"] !== undefined) {
    contents.VpcEndpointId = __expectString(output["vpcEndpointId"]);
  }
  if (output["vpcEndpointOwner"] !== undefined) {
    contents.VpcEndpointOwner = __expectString(output["vpcEndpointOwner"]);
  }
  if (output["vpcEndpointState"] !== undefined) {
    contents.VpcEndpointState = __expectString(output["vpcEndpointState"]);
  }
  if (output["creationTimestamp"] !== undefined) {
    contents.CreationTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["creationTimestamp"]));
  }
  if (output.dnsEntrySet === "") {
    contents.DnsEntries = [];
  } else if (output["dnsEntrySet"] !== undefined && output["dnsEntrySet"]["item"] !== undefined) {
    contents.DnsEntries = de_DnsEntrySet(__getArrayIfSingleItem(output["dnsEntrySet"]["item"]), context);
  }
  if (output.networkLoadBalancerArnSet === "") {
    contents.NetworkLoadBalancerArns = [];
  } else if (
    output["networkLoadBalancerArnSet"] !== undefined &&
    output["networkLoadBalancerArnSet"]["item"] !== undefined
  ) {
    contents.NetworkLoadBalancerArns = de_ValueStringList(
      __getArrayIfSingleItem(output["networkLoadBalancerArnSet"]["item"]),
      context
    );
  }
  if (output.gatewayLoadBalancerArnSet === "") {
    contents.GatewayLoadBalancerArns = [];
  } else if (
    output["gatewayLoadBalancerArnSet"] !== undefined &&
    output["gatewayLoadBalancerArnSet"]["item"] !== undefined
  ) {
    contents.GatewayLoadBalancerArns = de_ValueStringList(
      __getArrayIfSingleItem(output["gatewayLoadBalancerArnSet"]["item"]),
      context
    );
  }
  if (output["ipAddressType"] !== undefined) {
    contents.IpAddressType = __expectString(output["ipAddressType"]);
  }
  if (output["vpcEndpointConnectionId"] !== undefined) {
    contents.VpcEndpointConnectionId = __expectString(output["vpcEndpointConnectionId"]);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcEndpointConnectionSet
 */
const de_VpcEndpointConnectionSet = (output: any, context: __SerdeContext): VpcEndpointConnection[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcEndpointConnection(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcEndpointSet
 */
const de_VpcEndpointSet = (output: any, context: __SerdeContext): VpcEndpoint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcEndpoint(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcIpv6CidrBlockAssociation
 */
const de_VpcIpv6CidrBlockAssociation = (output: any, context: __SerdeContext): VpcIpv6CidrBlockAssociation => {
  const contents: any = {};
  if (output["associationId"] !== undefined) {
    contents.AssociationId = __expectString(output["associationId"]);
  }
  if (output["ipv6CidrBlock"] !== undefined) {
    contents.Ipv6CidrBlock = __expectString(output["ipv6CidrBlock"]);
  }
  if (output["ipv6CidrBlockState"] !== undefined) {
    contents.Ipv6CidrBlockState = de_VpcCidrBlockState(output["ipv6CidrBlockState"], context);
  }
  if (output["networkBorderGroup"] !== undefined) {
    contents.NetworkBorderGroup = __expectString(output["networkBorderGroup"]);
  }
  if (output["ipv6Pool"] !== undefined) {
    contents.Ipv6Pool = __expectString(output["ipv6Pool"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcIpv6CidrBlockAssociationSet
 */
const de_VpcIpv6CidrBlockAssociationSet = (output: any, context: __SerdeContext): VpcIpv6CidrBlockAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcIpv6CidrBlockAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcList
 */
const de_VpcList = (output: any, context: __SerdeContext): Vpc[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Vpc(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcPeeringConnection
 */
const de_VpcPeeringConnection = (output: any, context: __SerdeContext): VpcPeeringConnection => {
  const contents: any = {};
  if (output["accepterVpcInfo"] !== undefined) {
    contents.AccepterVpcInfo = de_VpcPeeringConnectionVpcInfo(output["accepterVpcInfo"], context);
  }
  if (output["expirationTime"] !== undefined) {
    contents.ExpirationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["expirationTime"]));
  }
  if (output["requesterVpcInfo"] !== undefined) {
    contents.RequesterVpcInfo = de_VpcPeeringConnectionVpcInfo(output["requesterVpcInfo"], context);
  }
  if (output["status"] !== undefined) {
    contents.Status = de_VpcPeeringConnectionStateReason(output["status"], context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output["vpcPeeringConnectionId"] !== undefined) {
    contents.VpcPeeringConnectionId = __expectString(output["vpcPeeringConnectionId"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcPeeringConnectionList
 */
const de_VpcPeeringConnectionList = (output: any, context: __SerdeContext): VpcPeeringConnection[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcPeeringConnection(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcPeeringConnectionOptionsDescription
 */
const de_VpcPeeringConnectionOptionsDescription = (
  output: any,
  context: __SerdeContext
): VpcPeeringConnectionOptionsDescription => {
  const contents: any = {};
  if (output["allowDnsResolutionFromRemoteVpc"] !== undefined) {
    contents.AllowDnsResolutionFromRemoteVpc = __parseBoolean(output["allowDnsResolutionFromRemoteVpc"]);
  }
  if (output["allowEgressFromLocalClassicLinkToRemoteVpc"] !== undefined) {
    contents.AllowEgressFromLocalClassicLinkToRemoteVpc = __parseBoolean(
      output["allowEgressFromLocalClassicLinkToRemoteVpc"]
    );
  }
  if (output["allowEgressFromLocalVpcToRemoteClassicLink"] !== undefined) {
    contents.AllowEgressFromLocalVpcToRemoteClassicLink = __parseBoolean(
      output["allowEgressFromLocalVpcToRemoteClassicLink"]
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcPeeringConnectionStateReason
 */
const de_VpcPeeringConnectionStateReason = (output: any, context: __SerdeContext): VpcPeeringConnectionStateReason => {
  const contents: any = {};
  if (output["code"] !== undefined) {
    contents.Code = __expectString(output["code"]);
  }
  if (output["message"] !== undefined) {
    contents.Message = __expectString(output["message"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcPeeringConnectionVpcInfo
 */
const de_VpcPeeringConnectionVpcInfo = (output: any, context: __SerdeContext): VpcPeeringConnectionVpcInfo => {
  const contents: any = {};
  if (output["cidrBlock"] !== undefined) {
    contents.CidrBlock = __expectString(output["cidrBlock"]);
  }
  if (output.ipv6CidrBlockSet === "") {
    contents.Ipv6CidrBlockSet = [];
  } else if (output["ipv6CidrBlockSet"] !== undefined && output["ipv6CidrBlockSet"]["item"] !== undefined) {
    contents.Ipv6CidrBlockSet = de_Ipv6CidrBlockSet(
      __getArrayIfSingleItem(output["ipv6CidrBlockSet"]["item"]),
      context
    );
  }
  if (output.cidrBlockSet === "") {
    contents.CidrBlockSet = [];
  } else if (output["cidrBlockSet"] !== undefined && output["cidrBlockSet"]["item"] !== undefined) {
    contents.CidrBlockSet = de_CidrBlockSet(__getArrayIfSingleItem(output["cidrBlockSet"]["item"]), context);
  }
  if (output["ownerId"] !== undefined) {
    contents.OwnerId = __expectString(output["ownerId"]);
  }
  if (output["peeringOptions"] !== undefined) {
    contents.PeeringOptions = de_VpcPeeringConnectionOptionsDescription(output["peeringOptions"], context);
  }
  if (output["vpcId"] !== undefined) {
    contents.VpcId = __expectString(output["vpcId"]);
  }
  if (output["region"] !== undefined) {
    contents.Region = __expectString(output["region"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpnConnection
 */
const de_VpnConnection = (output: any, context: __SerdeContext): VpnConnection => {
  const contents: any = {};
  if (output["customerGatewayConfiguration"] !== undefined) {
    contents.CustomerGatewayConfiguration = __expectString(output["customerGatewayConfiguration"]);
  }
  if (output["customerGatewayId"] !== undefined) {
    contents.CustomerGatewayId = __expectString(output["customerGatewayId"]);
  }
  if (output["category"] !== undefined) {
    contents.Category = __expectString(output["category"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  if (output["vpnConnectionId"] !== undefined) {
    contents.VpnConnectionId = __expectString(output["vpnConnectionId"]);
  }
  if (output["vpnGatewayId"] !== undefined) {
    contents.VpnGatewayId = __expectString(output["vpnGatewayId"]);
  }
  if (output["transitGatewayId"] !== undefined) {
    contents.TransitGatewayId = __expectString(output["transitGatewayId"]);
  }
  if (output["coreNetworkArn"] !== undefined) {
    contents.CoreNetworkArn = __expectString(output["coreNetworkArn"]);
  }
  if (output["coreNetworkAttachmentArn"] !== undefined) {
    contents.CoreNetworkAttachmentArn = __expectString(output["coreNetworkAttachmentArn"]);
  }
  if (output["gatewayAssociationState"] !== undefined) {
    contents.GatewayAssociationState = __expectString(output["gatewayAssociationState"]);
  }
  if (output["options"] !== undefined) {
    contents.Options = de_VpnConnectionOptions(output["options"], context);
  }
  if (output.routes === "") {
    contents.Routes = [];
  } else if (output["routes"] !== undefined && output["routes"]["item"] !== undefined) {
    contents.Routes = de_VpnStaticRouteList(__getArrayIfSingleItem(output["routes"]["item"]), context);
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  if (output.vgwTelemetry === "") {
    contents.VgwTelemetry = [];
  } else if (output["vgwTelemetry"] !== undefined && output["vgwTelemetry"]["item"] !== undefined) {
    contents.VgwTelemetry = de_VgwTelemetryList(__getArrayIfSingleItem(output["vgwTelemetry"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpnConnectionDeviceType
 */
const de_VpnConnectionDeviceType = (output: any, context: __SerdeContext): VpnConnectionDeviceType => {
  const contents: any = {};
  if (output["vpnConnectionDeviceTypeId"] !== undefined) {
    contents.VpnConnectionDeviceTypeId = __expectString(output["vpnConnectionDeviceTypeId"]);
  }
  if (output["vendor"] !== undefined) {
    contents.Vendor = __expectString(output["vendor"]);
  }
  if (output["platform"] !== undefined) {
    contents.Platform = __expectString(output["platform"]);
  }
  if (output["software"] !== undefined) {
    contents.Software = __expectString(output["software"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpnConnectionDeviceTypeList
 */
const de_VpnConnectionDeviceTypeList = (output: any, context: __SerdeContext): VpnConnectionDeviceType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpnConnectionDeviceType(entry, context);
    });
};

/**
 * deserializeAws_ec2VpnConnectionList
 */
const de_VpnConnectionList = (output: any, context: __SerdeContext): VpnConnection[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpnConnection(entry, context);
    });
};

/**
 * deserializeAws_ec2VpnConnectionOptions
 */
const de_VpnConnectionOptions = (output: any, context: __SerdeContext): VpnConnectionOptions => {
  const contents: any = {};
  if (output["enableAcceleration"] !== undefined) {
    contents.EnableAcceleration = __parseBoolean(output["enableAcceleration"]);
  }
  if (output["staticRoutesOnly"] !== undefined) {
    contents.StaticRoutesOnly = __parseBoolean(output["staticRoutesOnly"]);
  }
  if (output["localIpv4NetworkCidr"] !== undefined) {
    contents.LocalIpv4NetworkCidr = __expectString(output["localIpv4NetworkCidr"]);
  }
  if (output["remoteIpv4NetworkCidr"] !== undefined) {
    contents.RemoteIpv4NetworkCidr = __expectString(output["remoteIpv4NetworkCidr"]);
  }
  if (output["localIpv6NetworkCidr"] !== undefined) {
    contents.LocalIpv6NetworkCidr = __expectString(output["localIpv6NetworkCidr"]);
  }
  if (output["remoteIpv6NetworkCidr"] !== undefined) {
    contents.RemoteIpv6NetworkCidr = __expectString(output["remoteIpv6NetworkCidr"]);
  }
  if (output["outsideIpAddressType"] !== undefined) {
    contents.OutsideIpAddressType = __expectString(output["outsideIpAddressType"]);
  }
  if (output["transportTransitGatewayAttachmentId"] !== undefined) {
    contents.TransportTransitGatewayAttachmentId = __expectString(output["transportTransitGatewayAttachmentId"]);
  }
  if (output["tunnelInsideIpVersion"] !== undefined) {
    contents.TunnelInsideIpVersion = __expectString(output["tunnelInsideIpVersion"]);
  }
  if (output.tunnelOptionSet === "") {
    contents.TunnelOptions = [];
  } else if (output["tunnelOptionSet"] !== undefined && output["tunnelOptionSet"]["item"] !== undefined) {
    contents.TunnelOptions = de_TunnelOptionsList(__getArrayIfSingleItem(output["tunnelOptionSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpnGateway
 */
const de_VpnGateway = (output: any, context: __SerdeContext): VpnGateway => {
  const contents: any = {};
  if (output["availabilityZone"] !== undefined) {
    contents.AvailabilityZone = __expectString(output["availabilityZone"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  if (output["type"] !== undefined) {
    contents.Type = __expectString(output["type"]);
  }
  if (output.attachments === "") {
    contents.VpcAttachments = [];
  } else if (output["attachments"] !== undefined && output["attachments"]["item"] !== undefined) {
    contents.VpcAttachments = de_VpcAttachmentList(__getArrayIfSingleItem(output["attachments"]["item"]), context);
  }
  if (output["vpnGatewayId"] !== undefined) {
    contents.VpnGatewayId = __expectString(output["vpnGatewayId"]);
  }
  if (output["amazonSideAsn"] !== undefined) {
    contents.AmazonSideAsn = __strictParseLong(output["amazonSideAsn"]) as number;
  }
  if (output.tagSet === "") {
    contents.Tags = [];
  } else if (output["tagSet"] !== undefined && output["tagSet"]["item"] !== undefined) {
    contents.Tags = de_TagList(__getArrayIfSingleItem(output["tagSet"]["item"]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpnGatewayList
 */
const de_VpnGatewayList = (output: any, context: __SerdeContext): VpnGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpnGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2VpnStaticRoute
 */
const de_VpnStaticRoute = (output: any, context: __SerdeContext): VpnStaticRoute => {
  const contents: any = {};
  if (output["destinationCidrBlock"] !== undefined) {
    contents.DestinationCidrBlock = __expectString(output["destinationCidrBlock"]);
  }
  if (output["source"] !== undefined) {
    contents.Source = __expectString(output["source"]);
  }
  if (output["state"] !== undefined) {
    contents.State = __expectString(output["state"]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpnStaticRouteList
 */
const de_VpnStaticRouteList = (output: any, context: __SerdeContext): VpnStaticRoute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpnStaticRoute(entry, context);
    });
};

/**
 * deserializeAws_ec2VpnTunnelLogOptions
 */
const de_VpnTunnelLogOptions = (output: any, context: __SerdeContext): VpnTunnelLogOptions => {
  const contents: any = {};
  if (output["cloudWatchLogOptions"] !== undefined) {
    contents.CloudWatchLogOptions = de_CloudWatchLogOptions(output["cloudWatchLogOptions"], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2WithdrawByoipCidrResult
 */
const de_WithdrawByoipCidrResult = (output: any, context: __SerdeContext): WithdrawByoipCidrResult => {
  const contents: any = {};
  if (output["byoipCidr"] !== undefined) {
    contents.ByoipCidr = de_ByoipCidr(output["byoipCidr"], context);
  }
  return contents;
};

const deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({
  httpStatusCode: output.statusCode,
  requestId:
    output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"],
});

// Encode Uint8Array data into string with utf-8.
const collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>
  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));

const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (
  context: __SerdeContext,
  headers: __HeaderBag,
  path: string,
  resolvedHostname: string | undefined,
  body: any
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents: any = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers,
  };
  if (resolvedHostname !== undefined) {
    contents.hostname = resolvedHostname;
  }
  if (body !== undefined) {
    contents.body = body;
  }
  return new __HttpRequest(contents);
};
const SHARED_HEADERS: __HeaderBag = {
  "content-type": "application/x-www-form-urlencoded",
};

const parseBody = (streamBody: any, context: __SerdeContext): any =>
  collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
      const parser = new XMLParser({
        attributeNamePrefix: "",
        htmlEntities: true,
        ignoreAttributes: false,
        ignoreDeclaration: true,
        parseTagValue: false,
        trimValues: false,
        tagValueProcessor: (_: any, val: any) => (val.trim() === "" && val.includes("\n") ? "" : undefined),
      });
      parser.addEntity("#xD", "\r");
      parser.addEntity("#10", "\n");
      const parsedObj = parser.parse(encoded);
      const textNodeName = "#text";
      const key = Object.keys(parsedObj)[0];
      const parsedObjToReturn = parsedObj[key];
      if (parsedObjToReturn[textNodeName]) {
        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
        delete parsedObjToReturn[textNodeName];
      }
      return __getValueFromTextNode(parsedObjToReturn);
    }
    return {};
  });

const parseErrorBody = async (errorBody: any, context: __SerdeContext) => {
  const value = await parseBody(errorBody, context);
  if (value.Error) {
    value.Error.message = value.Error.message ?? value.Error.Message;
  }
  return value;
};

const buildFormUrlencodedString = (formEntries: Record<string, string>): string =>
  Object.entries(formEntries)
    .map(([key, value]) => __extendedEncodeURIComponent(key) + "=" + __extendedEncodeURIComponent(value))
    .join("&");

const loadEc2ErrorCode = (output: __HttpResponse, data: any): string | undefined => {
  if (data.Errors.Error?.Code !== undefined) {
    return data.Errors.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
};
