// smithy-typescript generated code
import { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from "@smithy/protocol-http";
import {
  collectBody,
  expectNonNull as __expectNonNull,
  expectString as __expectString,
  extendedEncodeURIComponent as __extendedEncodeURIComponent,
  getArrayIfSingleItem as __getArrayIfSingleItem,
  getValueFromTextNode as __getValueFromTextNode,
  parseBoolean as __parseBoolean,
  parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset,
  serializeFloat as __serializeFloat,
  strictParseFloat as __strictParseFloat,
  strictParseInt32 as __strictParseInt32,
  strictParseLong as __strictParseLong,
  withBaseException,
} from "@smithy/smithy-client";
import {
  Endpoint as __Endpoint,
  HeaderBag as __HeaderBag,
  ResponseMetadata as __ResponseMetadata,
  SerdeContext as __SerdeContext,
} from "@smithy/types";
import { XMLParser } from "fast-xml-parser";
import { v4 as generateIdempotencyToken } from "uuid";

import {
  AcceptAddressTransferCommandInput,
  AcceptAddressTransferCommandOutput,
} from "../commands/AcceptAddressTransferCommand";
import {
  AcceptReservedInstancesExchangeQuoteCommandInput,
  AcceptReservedInstancesExchangeQuoteCommandOutput,
} from "../commands/AcceptReservedInstancesExchangeQuoteCommand";
import {
  AcceptTransitGatewayMulticastDomainAssociationsCommandInput,
  AcceptTransitGatewayMulticastDomainAssociationsCommandOutput,
} from "../commands/AcceptTransitGatewayMulticastDomainAssociationsCommand";
import {
  AcceptTransitGatewayPeeringAttachmentCommandInput,
  AcceptTransitGatewayPeeringAttachmentCommandOutput,
} from "../commands/AcceptTransitGatewayPeeringAttachmentCommand";
import {
  AcceptTransitGatewayVpcAttachmentCommandInput,
  AcceptTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/AcceptTransitGatewayVpcAttachmentCommand";
import {
  AcceptVpcEndpointConnectionsCommandInput,
  AcceptVpcEndpointConnectionsCommandOutput,
} from "../commands/AcceptVpcEndpointConnectionsCommand";
import {
  AcceptVpcPeeringConnectionCommandInput,
  AcceptVpcPeeringConnectionCommandOutput,
} from "../commands/AcceptVpcPeeringConnectionCommand";
import { AdvertiseByoipCidrCommandInput, AdvertiseByoipCidrCommandOutput } from "../commands/AdvertiseByoipCidrCommand";
import { AllocateAddressCommandInput, AllocateAddressCommandOutput } from "../commands/AllocateAddressCommand";
import { AllocateHostsCommandInput, AllocateHostsCommandOutput } from "../commands/AllocateHostsCommand";
import {
  AllocateIpamPoolCidrCommandInput,
  AllocateIpamPoolCidrCommandOutput,
} from "../commands/AllocateIpamPoolCidrCommand";
import {
  ApplySecurityGroupsToClientVpnTargetNetworkCommandInput,
  ApplySecurityGroupsToClientVpnTargetNetworkCommandOutput,
} from "../commands/ApplySecurityGroupsToClientVpnTargetNetworkCommand";
import {
  AssignIpv6AddressesCommandInput,
  AssignIpv6AddressesCommandOutput,
} from "../commands/AssignIpv6AddressesCommand";
import {
  AssignPrivateIpAddressesCommandInput,
  AssignPrivateIpAddressesCommandOutput,
} from "../commands/AssignPrivateIpAddressesCommand";
import {
  AssignPrivateNatGatewayAddressCommandInput,
  AssignPrivateNatGatewayAddressCommandOutput,
} from "../commands/AssignPrivateNatGatewayAddressCommand";
import { AssociateAddressCommandInput, AssociateAddressCommandOutput } from "../commands/AssociateAddressCommand";
import {
  AssociateClientVpnTargetNetworkCommandInput,
  AssociateClientVpnTargetNetworkCommandOutput,
} from "../commands/AssociateClientVpnTargetNetworkCommand";
import {
  AssociateDhcpOptionsCommandInput,
  AssociateDhcpOptionsCommandOutput,
} from "../commands/AssociateDhcpOptionsCommand";
import {
  AssociateEnclaveCertificateIamRoleCommandInput,
  AssociateEnclaveCertificateIamRoleCommandOutput,
} from "../commands/AssociateEnclaveCertificateIamRoleCommand";
import {
  AssociateIamInstanceProfileCommandInput,
  AssociateIamInstanceProfileCommandOutput,
} from "../commands/AssociateIamInstanceProfileCommand";
import {
  AssociateInstanceEventWindowCommandInput,
  AssociateInstanceEventWindowCommandOutput,
} from "../commands/AssociateInstanceEventWindowCommand";
import {
  AssociateIpamByoasnCommandInput,
  AssociateIpamByoasnCommandOutput,
} from "../commands/AssociateIpamByoasnCommand";
import {
  AssociateIpamResourceDiscoveryCommandInput,
  AssociateIpamResourceDiscoveryCommandOutput,
} from "../commands/AssociateIpamResourceDiscoveryCommand";
import {
  AssociateNatGatewayAddressCommandInput,
  AssociateNatGatewayAddressCommandOutput,
} from "../commands/AssociateNatGatewayAddressCommand";
import {
  AssociateRouteTableCommandInput,
  AssociateRouteTableCommandOutput,
} from "../commands/AssociateRouteTableCommand";
import {
  AssociateSubnetCidrBlockCommandInput,
  AssociateSubnetCidrBlockCommandOutput,
} from "../commands/AssociateSubnetCidrBlockCommand";
import {
  AssociateTransitGatewayMulticastDomainCommandInput,
  AssociateTransitGatewayMulticastDomainCommandOutput,
} from "../commands/AssociateTransitGatewayMulticastDomainCommand";
import {
  AssociateTransitGatewayPolicyTableCommandInput,
  AssociateTransitGatewayPolicyTableCommandOutput,
} from "../commands/AssociateTransitGatewayPolicyTableCommand";
import {
  AssociateTransitGatewayRouteTableCommandInput,
  AssociateTransitGatewayRouteTableCommandOutput,
} from "../commands/AssociateTransitGatewayRouteTableCommand";
import {
  AssociateTrunkInterfaceCommandInput,
  AssociateTrunkInterfaceCommandOutput,
} from "../commands/AssociateTrunkInterfaceCommand";
import {
  AssociateVpcCidrBlockCommandInput,
  AssociateVpcCidrBlockCommandOutput,
} from "../commands/AssociateVpcCidrBlockCommand";
import {
  AttachClassicLinkVpcCommandInput,
  AttachClassicLinkVpcCommandOutput,
} from "../commands/AttachClassicLinkVpcCommand";
import {
  AttachInternetGatewayCommandInput,
  AttachInternetGatewayCommandOutput,
} from "../commands/AttachInternetGatewayCommand";
import {
  AttachNetworkInterfaceCommandInput,
  AttachNetworkInterfaceCommandOutput,
} from "../commands/AttachNetworkInterfaceCommand";
import {
  AttachVerifiedAccessTrustProviderCommandInput,
  AttachVerifiedAccessTrustProviderCommandOutput,
} from "../commands/AttachVerifiedAccessTrustProviderCommand";
import { AttachVolumeCommandInput, AttachVolumeCommandOutput } from "../commands/AttachVolumeCommand";
import { AttachVpnGatewayCommandInput, AttachVpnGatewayCommandOutput } from "../commands/AttachVpnGatewayCommand";
import {
  AuthorizeClientVpnIngressCommandInput,
  AuthorizeClientVpnIngressCommandOutput,
} from "../commands/AuthorizeClientVpnIngressCommand";
import {
  AuthorizeSecurityGroupEgressCommandInput,
  AuthorizeSecurityGroupEgressCommandOutput,
} from "../commands/AuthorizeSecurityGroupEgressCommand";
import {
  AuthorizeSecurityGroupIngressCommandInput,
  AuthorizeSecurityGroupIngressCommandOutput,
} from "../commands/AuthorizeSecurityGroupIngressCommand";
import { BundleInstanceCommandInput, BundleInstanceCommandOutput } from "../commands/BundleInstanceCommand";
import { CancelBundleTaskCommandInput, CancelBundleTaskCommandOutput } from "../commands/CancelBundleTaskCommand";
import {
  CancelCapacityReservationCommandInput,
  CancelCapacityReservationCommandOutput,
} from "../commands/CancelCapacityReservationCommand";
import {
  CancelCapacityReservationFleetsCommandInput,
  CancelCapacityReservationFleetsCommandOutput,
} from "../commands/CancelCapacityReservationFleetsCommand";
import {
  CancelConversionTaskCommandInput,
  CancelConversionTaskCommandOutput,
} from "../commands/CancelConversionTaskCommand";
import { CancelExportTaskCommandInput, CancelExportTaskCommandOutput } from "../commands/CancelExportTaskCommand";
import {
  CancelImageLaunchPermissionCommandInput,
  CancelImageLaunchPermissionCommandOutput,
} from "../commands/CancelImageLaunchPermissionCommand";
import { CancelImportTaskCommandInput, CancelImportTaskCommandOutput } from "../commands/CancelImportTaskCommand";
import {
  CancelReservedInstancesListingCommandInput,
  CancelReservedInstancesListingCommandOutput,
} from "../commands/CancelReservedInstancesListingCommand";
import {
  CancelSpotFleetRequestsCommandInput,
  CancelSpotFleetRequestsCommandOutput,
} from "../commands/CancelSpotFleetRequestsCommand";
import {
  CancelSpotInstanceRequestsCommandInput,
  CancelSpotInstanceRequestsCommandOutput,
} from "../commands/CancelSpotInstanceRequestsCommand";
import {
  ConfirmProductInstanceCommandInput,
  ConfirmProductInstanceCommandOutput,
} from "../commands/ConfirmProductInstanceCommand";
import { CopyFpgaImageCommandInput, CopyFpgaImageCommandOutput } from "../commands/CopyFpgaImageCommand";
import { CopyImageCommandInput, CopyImageCommandOutput } from "../commands/CopyImageCommand";
import { CopySnapshotCommandInput, CopySnapshotCommandOutput } from "../commands/CopySnapshotCommand";
import {
  CreateCapacityReservationCommandInput,
  CreateCapacityReservationCommandOutput,
} from "../commands/CreateCapacityReservationCommand";
import {
  CreateCapacityReservationFleetCommandInput,
  CreateCapacityReservationFleetCommandOutput,
} from "../commands/CreateCapacityReservationFleetCommand";
import {
  CreateCarrierGatewayCommandInput,
  CreateCarrierGatewayCommandOutput,
} from "../commands/CreateCarrierGatewayCommand";
import {
  CreateClientVpnEndpointCommandInput,
  CreateClientVpnEndpointCommandOutput,
} from "../commands/CreateClientVpnEndpointCommand";
import {
  CreateClientVpnRouteCommandInput,
  CreateClientVpnRouteCommandOutput,
} from "../commands/CreateClientVpnRouteCommand";
import { CreateCoipCidrCommandInput, CreateCoipCidrCommandOutput } from "../commands/CreateCoipCidrCommand";
import { CreateCoipPoolCommandInput, CreateCoipPoolCommandOutput } from "../commands/CreateCoipPoolCommand";
import {
  CreateCustomerGatewayCommandInput,
  CreateCustomerGatewayCommandOutput,
} from "../commands/CreateCustomerGatewayCommand";
import {
  CreateDefaultSubnetCommandInput,
  CreateDefaultSubnetCommandOutput,
} from "../commands/CreateDefaultSubnetCommand";
import { CreateDefaultVpcCommandInput, CreateDefaultVpcCommandOutput } from "../commands/CreateDefaultVpcCommand";
import { CreateDhcpOptionsCommandInput, CreateDhcpOptionsCommandOutput } from "../commands/CreateDhcpOptionsCommand";
import {
  CreateEgressOnlyInternetGatewayCommandInput,
  CreateEgressOnlyInternetGatewayCommandOutput,
} from "../commands/CreateEgressOnlyInternetGatewayCommand";
import { CreateFleetCommandInput, CreateFleetCommandOutput } from "../commands/CreateFleetCommand";
import { CreateFlowLogsCommandInput, CreateFlowLogsCommandOutput } from "../commands/CreateFlowLogsCommand";
import { CreateFpgaImageCommandInput, CreateFpgaImageCommandOutput } from "../commands/CreateFpgaImageCommand";
import { CreateImageCommandInput, CreateImageCommandOutput } from "../commands/CreateImageCommand";
import {
  CreateInstanceConnectEndpointCommandInput,
  CreateInstanceConnectEndpointCommandOutput,
} from "../commands/CreateInstanceConnectEndpointCommand";
import {
  CreateInstanceEventWindowCommandInput,
  CreateInstanceEventWindowCommandOutput,
} from "../commands/CreateInstanceEventWindowCommand";
import {
  CreateInstanceExportTaskCommandInput,
  CreateInstanceExportTaskCommandOutput,
} from "../commands/CreateInstanceExportTaskCommand";
import {
  CreateInternetGatewayCommandInput,
  CreateInternetGatewayCommandOutput,
} from "../commands/CreateInternetGatewayCommand";
import { CreateIpamCommandInput, CreateIpamCommandOutput } from "../commands/CreateIpamCommand";
import { CreateIpamPoolCommandInput, CreateIpamPoolCommandOutput } from "../commands/CreateIpamPoolCommand";
import {
  CreateIpamResourceDiscoveryCommandInput,
  CreateIpamResourceDiscoveryCommandOutput,
} from "../commands/CreateIpamResourceDiscoveryCommand";
import { CreateIpamScopeCommandInput, CreateIpamScopeCommandOutput } from "../commands/CreateIpamScopeCommand";
import { CreateKeyPairCommandInput, CreateKeyPairCommandOutput } from "../commands/CreateKeyPairCommand";
import {
  CreateLaunchTemplateCommandInput,
  CreateLaunchTemplateCommandOutput,
} from "../commands/CreateLaunchTemplateCommand";
import {
  CreateLaunchTemplateVersionCommandInput,
  CreateLaunchTemplateVersionCommandOutput,
} from "../commands/CreateLaunchTemplateVersionCommand";
import {
  CreateLocalGatewayRouteCommandInput,
  CreateLocalGatewayRouteCommandOutput,
} from "../commands/CreateLocalGatewayRouteCommand";
import {
  CreateLocalGatewayRouteTableCommandInput,
  CreateLocalGatewayRouteTableCommandOutput,
} from "../commands/CreateLocalGatewayRouteTableCommand";
import {
  CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandInput,
  CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput,
} from "../commands/CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand";
import {
  CreateLocalGatewayRouteTableVpcAssociationCommandInput,
  CreateLocalGatewayRouteTableVpcAssociationCommandOutput,
} from "../commands/CreateLocalGatewayRouteTableVpcAssociationCommand";
import {
  CreateManagedPrefixListCommandInput,
  CreateManagedPrefixListCommandOutput,
} from "../commands/CreateManagedPrefixListCommand";
import { CreateNatGatewayCommandInput, CreateNatGatewayCommandOutput } from "../commands/CreateNatGatewayCommand";
import { CreateNetworkAclCommandInput, CreateNetworkAclCommandOutput } from "../commands/CreateNetworkAclCommand";
import {
  CreateNetworkAclEntryCommandInput,
  CreateNetworkAclEntryCommandOutput,
} from "../commands/CreateNetworkAclEntryCommand";
import {
  CreateNetworkInsightsAccessScopeCommandInput,
  CreateNetworkInsightsAccessScopeCommandOutput,
} from "../commands/CreateNetworkInsightsAccessScopeCommand";
import {
  CreateNetworkInsightsPathCommandInput,
  CreateNetworkInsightsPathCommandOutput,
} from "../commands/CreateNetworkInsightsPathCommand";
import {
  CreateNetworkInterfaceCommandInput,
  CreateNetworkInterfaceCommandOutput,
} from "../commands/CreateNetworkInterfaceCommand";
import {
  CreateNetworkInterfacePermissionCommandInput,
  CreateNetworkInterfacePermissionCommandOutput,
} from "../commands/CreateNetworkInterfacePermissionCommand";
import {
  CreatePlacementGroupCommandInput,
  CreatePlacementGroupCommandOutput,
} from "../commands/CreatePlacementGroupCommand";
import {
  CreatePublicIpv4PoolCommandInput,
  CreatePublicIpv4PoolCommandOutput,
} from "../commands/CreatePublicIpv4PoolCommand";
import {
  CreateReplaceRootVolumeTaskCommandInput,
  CreateReplaceRootVolumeTaskCommandOutput,
} from "../commands/CreateReplaceRootVolumeTaskCommand";
import {
  CreateReservedInstancesListingCommandInput,
  CreateReservedInstancesListingCommandOutput,
} from "../commands/CreateReservedInstancesListingCommand";
import {
  CreateRestoreImageTaskCommandInput,
  CreateRestoreImageTaskCommandOutput,
} from "../commands/CreateRestoreImageTaskCommand";
import { CreateRouteCommandInput, CreateRouteCommandOutput } from "../commands/CreateRouteCommand";
import { CreateRouteTableCommandInput, CreateRouteTableCommandOutput } from "../commands/CreateRouteTableCommand";
import {
  CreateSecurityGroupCommandInput,
  CreateSecurityGroupCommandOutput,
} from "../commands/CreateSecurityGroupCommand";
import { CreateSnapshotCommandInput, CreateSnapshotCommandOutput } from "../commands/CreateSnapshotCommand";
import { CreateSnapshotsCommandInput, CreateSnapshotsCommandOutput } from "../commands/CreateSnapshotsCommand";
import {
  CreateSpotDatafeedSubscriptionCommandInput,
  CreateSpotDatafeedSubscriptionCommandOutput,
} from "../commands/CreateSpotDatafeedSubscriptionCommand";
import {
  CreateStoreImageTaskCommandInput,
  CreateStoreImageTaskCommandOutput,
} from "../commands/CreateStoreImageTaskCommand";
import {
  CreateSubnetCidrReservationCommandInput,
  CreateSubnetCidrReservationCommandOutput,
} from "../commands/CreateSubnetCidrReservationCommand";
import { CreateSubnetCommandInput, CreateSubnetCommandOutput } from "../commands/CreateSubnetCommand";
import { CreateTagsCommandInput, CreateTagsCommandOutput } from "../commands/CreateTagsCommand";
import {
  CreateTrafficMirrorFilterCommandInput,
  CreateTrafficMirrorFilterCommandOutput,
} from "../commands/CreateTrafficMirrorFilterCommand";
import {
  CreateTrafficMirrorFilterRuleCommandInput,
  CreateTrafficMirrorFilterRuleCommandOutput,
} from "../commands/CreateTrafficMirrorFilterRuleCommand";
import {
  CreateTrafficMirrorSessionCommandInput,
  CreateTrafficMirrorSessionCommandOutput,
} from "../commands/CreateTrafficMirrorSessionCommand";
import {
  CreateTrafficMirrorTargetCommandInput,
  CreateTrafficMirrorTargetCommandOutput,
} from "../commands/CreateTrafficMirrorTargetCommand";
import {
  CreateTransitGatewayCommandInput,
  CreateTransitGatewayCommandOutput,
} from "../commands/CreateTransitGatewayCommand";
import {
  CreateTransitGatewayConnectCommandInput,
  CreateTransitGatewayConnectCommandOutput,
} from "../commands/CreateTransitGatewayConnectCommand";
import {
  CreateTransitGatewayConnectPeerCommandInput,
  CreateTransitGatewayConnectPeerCommandOutput,
} from "../commands/CreateTransitGatewayConnectPeerCommand";
import {
  CreateTransitGatewayMulticastDomainCommandInput,
  CreateTransitGatewayMulticastDomainCommandOutput,
} from "../commands/CreateTransitGatewayMulticastDomainCommand";
import {
  CreateTransitGatewayPeeringAttachmentCommandInput,
  CreateTransitGatewayPeeringAttachmentCommandOutput,
} from "../commands/CreateTransitGatewayPeeringAttachmentCommand";
import {
  CreateTransitGatewayPolicyTableCommandInput,
  CreateTransitGatewayPolicyTableCommandOutput,
} from "../commands/CreateTransitGatewayPolicyTableCommand";
import {
  CreateTransitGatewayPrefixListReferenceCommandInput,
  CreateTransitGatewayPrefixListReferenceCommandOutput,
} from "../commands/CreateTransitGatewayPrefixListReferenceCommand";
import {
  CreateTransitGatewayRouteCommandInput,
  CreateTransitGatewayRouteCommandOutput,
} from "../commands/CreateTransitGatewayRouteCommand";
import {
  CreateTransitGatewayRouteTableAnnouncementCommandInput,
  CreateTransitGatewayRouteTableAnnouncementCommandOutput,
} from "../commands/CreateTransitGatewayRouteTableAnnouncementCommand";
import {
  CreateTransitGatewayRouteTableCommandInput,
  CreateTransitGatewayRouteTableCommandOutput,
} from "../commands/CreateTransitGatewayRouteTableCommand";
import {
  CreateTransitGatewayVpcAttachmentCommandInput,
  CreateTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/CreateTransitGatewayVpcAttachmentCommand";
import {
  CreateVerifiedAccessEndpointCommandInput,
  CreateVerifiedAccessEndpointCommandOutput,
} from "../commands/CreateVerifiedAccessEndpointCommand";
import {
  CreateVerifiedAccessGroupCommandInput,
  CreateVerifiedAccessGroupCommandOutput,
} from "../commands/CreateVerifiedAccessGroupCommand";
import {
  CreateVerifiedAccessInstanceCommandInput,
  CreateVerifiedAccessInstanceCommandOutput,
} from "../commands/CreateVerifiedAccessInstanceCommand";
import {
  CreateVerifiedAccessTrustProviderCommandInput,
  CreateVerifiedAccessTrustProviderCommandOutput,
} from "../commands/CreateVerifiedAccessTrustProviderCommand";
import { CreateVolumeCommandInput, CreateVolumeCommandOutput } from "../commands/CreateVolumeCommand";
import { CreateVpcCommandInput, CreateVpcCommandOutput } from "../commands/CreateVpcCommand";
import { CreateVpcEndpointCommandInput, CreateVpcEndpointCommandOutput } from "../commands/CreateVpcEndpointCommand";
import {
  CreateVpcEndpointConnectionNotificationCommandInput,
  CreateVpcEndpointConnectionNotificationCommandOutput,
} from "../commands/CreateVpcEndpointConnectionNotificationCommand";
import {
  CreateVpcEndpointServiceConfigurationCommandInput,
  CreateVpcEndpointServiceConfigurationCommandOutput,
} from "../commands/CreateVpcEndpointServiceConfigurationCommand";
import {
  CreateVpcPeeringConnectionCommandInput,
  CreateVpcPeeringConnectionCommandOutput,
} from "../commands/CreateVpcPeeringConnectionCommand";
import {
  CreateVpnConnectionCommandInput,
  CreateVpnConnectionCommandOutput,
} from "../commands/CreateVpnConnectionCommand";
import {
  CreateVpnConnectionRouteCommandInput,
  CreateVpnConnectionRouteCommandOutput,
} from "../commands/CreateVpnConnectionRouteCommand";
import { CreateVpnGatewayCommandInput, CreateVpnGatewayCommandOutput } from "../commands/CreateVpnGatewayCommand";
import {
  DeleteCarrierGatewayCommandInput,
  DeleteCarrierGatewayCommandOutput,
} from "../commands/DeleteCarrierGatewayCommand";
import {
  DeleteClientVpnEndpointCommandInput,
  DeleteClientVpnEndpointCommandOutput,
} from "../commands/DeleteClientVpnEndpointCommand";
import {
  DeleteClientVpnRouteCommandInput,
  DeleteClientVpnRouteCommandOutput,
} from "../commands/DeleteClientVpnRouteCommand";
import { DeleteCoipCidrCommandInput, DeleteCoipCidrCommandOutput } from "../commands/DeleteCoipCidrCommand";
import { DeleteCoipPoolCommandInput, DeleteCoipPoolCommandOutput } from "../commands/DeleteCoipPoolCommand";
import {
  DeleteCustomerGatewayCommandInput,
  DeleteCustomerGatewayCommandOutput,
} from "../commands/DeleteCustomerGatewayCommand";
import { DeleteDhcpOptionsCommandInput, DeleteDhcpOptionsCommandOutput } from "../commands/DeleteDhcpOptionsCommand";
import {
  DeleteEgressOnlyInternetGatewayCommandInput,
  DeleteEgressOnlyInternetGatewayCommandOutput,
} from "../commands/DeleteEgressOnlyInternetGatewayCommand";
import { DeleteFleetsCommandInput, DeleteFleetsCommandOutput } from "../commands/DeleteFleetsCommand";
import { DeleteFlowLogsCommandInput, DeleteFlowLogsCommandOutput } from "../commands/DeleteFlowLogsCommand";
import { DeleteFpgaImageCommandInput, DeleteFpgaImageCommandOutput } from "../commands/DeleteFpgaImageCommand";
import {
  DeleteInstanceConnectEndpointCommandInput,
  DeleteInstanceConnectEndpointCommandOutput,
} from "../commands/DeleteInstanceConnectEndpointCommand";
import {
  DeleteInstanceEventWindowCommandInput,
  DeleteInstanceEventWindowCommandOutput,
} from "../commands/DeleteInstanceEventWindowCommand";
import {
  DeleteInternetGatewayCommandInput,
  DeleteInternetGatewayCommandOutput,
} from "../commands/DeleteInternetGatewayCommand";
import { DeleteIpamCommandInput, DeleteIpamCommandOutput } from "../commands/DeleteIpamCommand";
import { DeleteIpamPoolCommandInput, DeleteIpamPoolCommandOutput } from "../commands/DeleteIpamPoolCommand";
import {
  DeleteIpamResourceDiscoveryCommandInput,
  DeleteIpamResourceDiscoveryCommandOutput,
} from "../commands/DeleteIpamResourceDiscoveryCommand";
import { DeleteIpamScopeCommandInput, DeleteIpamScopeCommandOutput } from "../commands/DeleteIpamScopeCommand";
import { DeleteKeyPairCommandInput, DeleteKeyPairCommandOutput } from "../commands/DeleteKeyPairCommand";
import {
  DeleteLaunchTemplateCommandInput,
  DeleteLaunchTemplateCommandOutput,
} from "../commands/DeleteLaunchTemplateCommand";
import {
  DeleteLaunchTemplateVersionsCommandInput,
  DeleteLaunchTemplateVersionsCommandOutput,
} from "../commands/DeleteLaunchTemplateVersionsCommand";
import {
  DeleteLocalGatewayRouteCommandInput,
  DeleteLocalGatewayRouteCommandOutput,
} from "../commands/DeleteLocalGatewayRouteCommand";
import {
  DeleteLocalGatewayRouteTableCommandInput,
  DeleteLocalGatewayRouteTableCommandOutput,
} from "../commands/DeleteLocalGatewayRouteTableCommand";
import {
  DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandInput,
  DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput,
} from "../commands/DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand";
import {
  DeleteLocalGatewayRouteTableVpcAssociationCommandInput,
  DeleteLocalGatewayRouteTableVpcAssociationCommandOutput,
} from "../commands/DeleteLocalGatewayRouteTableVpcAssociationCommand";
import {
  DeleteManagedPrefixListCommandInput,
  DeleteManagedPrefixListCommandOutput,
} from "../commands/DeleteManagedPrefixListCommand";
import { DeleteNatGatewayCommandInput, DeleteNatGatewayCommandOutput } from "../commands/DeleteNatGatewayCommand";
import { DeleteNetworkAclCommandInput, DeleteNetworkAclCommandOutput } from "../commands/DeleteNetworkAclCommand";
import {
  DeleteNetworkAclEntryCommandInput,
  DeleteNetworkAclEntryCommandOutput,
} from "../commands/DeleteNetworkAclEntryCommand";
import {
  DeleteNetworkInsightsAccessScopeAnalysisCommandInput,
  DeleteNetworkInsightsAccessScopeAnalysisCommandOutput,
} from "../commands/DeleteNetworkInsightsAccessScopeAnalysisCommand";
import {
  DeleteNetworkInsightsAccessScopeCommandInput,
  DeleteNetworkInsightsAccessScopeCommandOutput,
} from "../commands/DeleteNetworkInsightsAccessScopeCommand";
import {
  DeleteNetworkInsightsAnalysisCommandInput,
  DeleteNetworkInsightsAnalysisCommandOutput,
} from "../commands/DeleteNetworkInsightsAnalysisCommand";
import {
  DeleteNetworkInsightsPathCommandInput,
  DeleteNetworkInsightsPathCommandOutput,
} from "../commands/DeleteNetworkInsightsPathCommand";
import {
  DeleteNetworkInterfaceCommandInput,
  DeleteNetworkInterfaceCommandOutput,
} from "../commands/DeleteNetworkInterfaceCommand";
import {
  DeleteNetworkInterfacePermissionCommandInput,
  DeleteNetworkInterfacePermissionCommandOutput,
} from "../commands/DeleteNetworkInterfacePermissionCommand";
import {
  DeletePlacementGroupCommandInput,
  DeletePlacementGroupCommandOutput,
} from "../commands/DeletePlacementGroupCommand";
import {
  DeletePublicIpv4PoolCommandInput,
  DeletePublicIpv4PoolCommandOutput,
} from "../commands/DeletePublicIpv4PoolCommand";
import {
  DeleteQueuedReservedInstancesCommandInput,
  DeleteQueuedReservedInstancesCommandOutput,
} from "../commands/DeleteQueuedReservedInstancesCommand";
import { DeleteRouteCommandInput, DeleteRouteCommandOutput } from "../commands/DeleteRouteCommand";
import { DeleteRouteTableCommandInput, DeleteRouteTableCommandOutput } from "../commands/DeleteRouteTableCommand";
import {
  DeleteSecurityGroupCommandInput,
  DeleteSecurityGroupCommandOutput,
} from "../commands/DeleteSecurityGroupCommand";
import { DeleteSnapshotCommandInput, DeleteSnapshotCommandOutput } from "../commands/DeleteSnapshotCommand";
import {
  DeleteSpotDatafeedSubscriptionCommandInput,
  DeleteSpotDatafeedSubscriptionCommandOutput,
} from "../commands/DeleteSpotDatafeedSubscriptionCommand";
import {
  DeleteSubnetCidrReservationCommandInput,
  DeleteSubnetCidrReservationCommandOutput,
} from "../commands/DeleteSubnetCidrReservationCommand";
import { DeleteSubnetCommandInput, DeleteSubnetCommandOutput } from "../commands/DeleteSubnetCommand";
import { DeleteTagsCommandInput, DeleteTagsCommandOutput } from "../commands/DeleteTagsCommand";
import {
  DeleteTrafficMirrorFilterCommandInput,
  DeleteTrafficMirrorFilterCommandOutput,
} from "../commands/DeleteTrafficMirrorFilterCommand";
import {
  DeleteTrafficMirrorFilterRuleCommandInput,
  DeleteTrafficMirrorFilterRuleCommandOutput,
} from "../commands/DeleteTrafficMirrorFilterRuleCommand";
import {
  DeleteTrafficMirrorSessionCommandInput,
  DeleteTrafficMirrorSessionCommandOutput,
} from "../commands/DeleteTrafficMirrorSessionCommand";
import {
  DeleteTrafficMirrorTargetCommandInput,
  DeleteTrafficMirrorTargetCommandOutput,
} from "../commands/DeleteTrafficMirrorTargetCommand";
import {
  DeleteTransitGatewayCommandInput,
  DeleteTransitGatewayCommandOutput,
} from "../commands/DeleteTransitGatewayCommand";
import {
  DeleteTransitGatewayConnectCommandInput,
  DeleteTransitGatewayConnectCommandOutput,
} from "../commands/DeleteTransitGatewayConnectCommand";
import {
  DeleteTransitGatewayConnectPeerCommandInput,
  DeleteTransitGatewayConnectPeerCommandOutput,
} from "../commands/DeleteTransitGatewayConnectPeerCommand";
import {
  DeleteTransitGatewayMulticastDomainCommandInput,
  DeleteTransitGatewayMulticastDomainCommandOutput,
} from "../commands/DeleteTransitGatewayMulticastDomainCommand";
import {
  DeleteTransitGatewayPeeringAttachmentCommandInput,
  DeleteTransitGatewayPeeringAttachmentCommandOutput,
} from "../commands/DeleteTransitGatewayPeeringAttachmentCommand";
import {
  DeleteTransitGatewayPolicyTableCommandInput,
  DeleteTransitGatewayPolicyTableCommandOutput,
} from "../commands/DeleteTransitGatewayPolicyTableCommand";
import {
  DeleteTransitGatewayPrefixListReferenceCommandInput,
  DeleteTransitGatewayPrefixListReferenceCommandOutput,
} from "../commands/DeleteTransitGatewayPrefixListReferenceCommand";
import {
  DeleteTransitGatewayRouteCommandInput,
  DeleteTransitGatewayRouteCommandOutput,
} from "../commands/DeleteTransitGatewayRouteCommand";
import {
  DeleteTransitGatewayRouteTableAnnouncementCommandInput,
  DeleteTransitGatewayRouteTableAnnouncementCommandOutput,
} from "../commands/DeleteTransitGatewayRouteTableAnnouncementCommand";
import {
  DeleteTransitGatewayRouteTableCommandInput,
  DeleteTransitGatewayRouteTableCommandOutput,
} from "../commands/DeleteTransitGatewayRouteTableCommand";
import {
  DeleteTransitGatewayVpcAttachmentCommandInput,
  DeleteTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/DeleteTransitGatewayVpcAttachmentCommand";
import {
  DeleteVerifiedAccessEndpointCommandInput,
  DeleteVerifiedAccessEndpointCommandOutput,
} from "../commands/DeleteVerifiedAccessEndpointCommand";
import {
  DeleteVerifiedAccessGroupCommandInput,
  DeleteVerifiedAccessGroupCommandOutput,
} from "../commands/DeleteVerifiedAccessGroupCommand";
import {
  DeleteVerifiedAccessInstanceCommandInput,
  DeleteVerifiedAccessInstanceCommandOutput,
} from "../commands/DeleteVerifiedAccessInstanceCommand";
import {
  DeleteVerifiedAccessTrustProviderCommandInput,
  DeleteVerifiedAccessTrustProviderCommandOutput,
} from "../commands/DeleteVerifiedAccessTrustProviderCommand";
import { DeleteVolumeCommandInput, DeleteVolumeCommandOutput } from "../commands/DeleteVolumeCommand";
import { DeleteVpcCommandInput, DeleteVpcCommandOutput } from "../commands/DeleteVpcCommand";
import {
  DeleteVpcEndpointConnectionNotificationsCommandInput,
  DeleteVpcEndpointConnectionNotificationsCommandOutput,
} from "../commands/DeleteVpcEndpointConnectionNotificationsCommand";
import { DeleteVpcEndpointsCommandInput, DeleteVpcEndpointsCommandOutput } from "../commands/DeleteVpcEndpointsCommand";
import {
  DeleteVpcEndpointServiceConfigurationsCommandInput,
  DeleteVpcEndpointServiceConfigurationsCommandOutput,
} from "../commands/DeleteVpcEndpointServiceConfigurationsCommand";
import {
  DeleteVpcPeeringConnectionCommandInput,
  DeleteVpcPeeringConnectionCommandOutput,
} from "../commands/DeleteVpcPeeringConnectionCommand";
import {
  DeleteVpnConnectionCommandInput,
  DeleteVpnConnectionCommandOutput,
} from "../commands/DeleteVpnConnectionCommand";
import {
  DeleteVpnConnectionRouteCommandInput,
  DeleteVpnConnectionRouteCommandOutput,
} from "../commands/DeleteVpnConnectionRouteCommand";
import { DeleteVpnGatewayCommandInput, DeleteVpnGatewayCommandOutput } from "../commands/DeleteVpnGatewayCommand";
import {
  DeprovisionByoipCidrCommandInput,
  DeprovisionByoipCidrCommandOutput,
} from "../commands/DeprovisionByoipCidrCommand";
import {
  DeprovisionIpamByoasnCommandInput,
  DeprovisionIpamByoasnCommandOutput,
} from "../commands/DeprovisionIpamByoasnCommand";
import {
  DeprovisionIpamPoolCidrCommandInput,
  DeprovisionIpamPoolCidrCommandOutput,
} from "../commands/DeprovisionIpamPoolCidrCommand";
import {
  DeprovisionPublicIpv4PoolCidrCommandInput,
  DeprovisionPublicIpv4PoolCidrCommandOutput,
} from "../commands/DeprovisionPublicIpv4PoolCidrCommand";
import { DeregisterImageCommandInput, DeregisterImageCommandOutput } from "../commands/DeregisterImageCommand";
import {
  DeregisterInstanceEventNotificationAttributesCommandInput,
  DeregisterInstanceEventNotificationAttributesCommandOutput,
} from "../commands/DeregisterInstanceEventNotificationAttributesCommand";
import {
  DeregisterTransitGatewayMulticastGroupMembersCommandInput,
  DeregisterTransitGatewayMulticastGroupMembersCommandOutput,
} from "../commands/DeregisterTransitGatewayMulticastGroupMembersCommand";
import {
  DeregisterTransitGatewayMulticastGroupSourcesCommandInput,
  DeregisterTransitGatewayMulticastGroupSourcesCommandOutput,
} from "../commands/DeregisterTransitGatewayMulticastGroupSourcesCommand";
import {
  DescribeAccountAttributesCommandInput,
  DescribeAccountAttributesCommandOutput,
} from "../commands/DescribeAccountAttributesCommand";
import {
  DescribeAddressesAttributeCommandInput,
  DescribeAddressesAttributeCommandOutput,
} from "../commands/DescribeAddressesAttributeCommand";
import { DescribeAddressesCommandInput, DescribeAddressesCommandOutput } from "../commands/DescribeAddressesCommand";
import {
  DescribeAddressTransfersCommandInput,
  DescribeAddressTransfersCommandOutput,
} from "../commands/DescribeAddressTransfersCommand";
import {
  DescribeAggregateIdFormatCommandInput,
  DescribeAggregateIdFormatCommandOutput,
} from "../commands/DescribeAggregateIdFormatCommand";
import {
  DescribeAvailabilityZonesCommandInput,
  DescribeAvailabilityZonesCommandOutput,
} from "../commands/DescribeAvailabilityZonesCommand";
import {
  DescribeAwsNetworkPerformanceMetricSubscriptionsCommandInput,
  DescribeAwsNetworkPerformanceMetricSubscriptionsCommandOutput,
} from "../commands/DescribeAwsNetworkPerformanceMetricSubscriptionsCommand";
import {
  DescribeBundleTasksCommandInput,
  DescribeBundleTasksCommandOutput,
} from "../commands/DescribeBundleTasksCommand";
import { DescribeByoipCidrsCommandInput, DescribeByoipCidrsCommandOutput } from "../commands/DescribeByoipCidrsCommand";
import {
  DescribeCapacityBlockOfferingsCommandInput,
  DescribeCapacityBlockOfferingsCommandOutput,
} from "../commands/DescribeCapacityBlockOfferingsCommand";
import {
  DescribeCapacityReservationFleetsCommandInput,
  DescribeCapacityReservationFleetsCommandOutput,
} from "../commands/DescribeCapacityReservationFleetsCommand";
import {
  DescribeCapacityReservationsCommandInput,
  DescribeCapacityReservationsCommandOutput,
} from "../commands/DescribeCapacityReservationsCommand";
import {
  DescribeCarrierGatewaysCommandInput,
  DescribeCarrierGatewaysCommandOutput,
} from "../commands/DescribeCarrierGatewaysCommand";
import {
  DescribeClassicLinkInstancesCommandInput,
  DescribeClassicLinkInstancesCommandOutput,
} from "../commands/DescribeClassicLinkInstancesCommand";
import {
  DescribeClientVpnAuthorizationRulesCommandInput,
  DescribeClientVpnAuthorizationRulesCommandOutput,
} from "../commands/DescribeClientVpnAuthorizationRulesCommand";
import {
  DescribeClientVpnConnectionsCommandInput,
  DescribeClientVpnConnectionsCommandOutput,
} from "../commands/DescribeClientVpnConnectionsCommand";
import {
  DescribeClientVpnEndpointsCommandInput,
  DescribeClientVpnEndpointsCommandOutput,
} from "../commands/DescribeClientVpnEndpointsCommand";
import {
  DescribeClientVpnRoutesCommandInput,
  DescribeClientVpnRoutesCommandOutput,
} from "../commands/DescribeClientVpnRoutesCommand";
import {
  DescribeClientVpnTargetNetworksCommandInput,
  DescribeClientVpnTargetNetworksCommandOutput,
} from "../commands/DescribeClientVpnTargetNetworksCommand";
import { DescribeCoipPoolsCommandInput, DescribeCoipPoolsCommandOutput } from "../commands/DescribeCoipPoolsCommand";
import {
  DescribeConversionTasksCommandInput,
  DescribeConversionTasksCommandOutput,
} from "../commands/DescribeConversionTasksCommand";
import {
  DescribeCustomerGatewaysCommandInput,
  DescribeCustomerGatewaysCommandOutput,
} from "../commands/DescribeCustomerGatewaysCommand";
import {
  DescribeDhcpOptionsCommandInput,
  DescribeDhcpOptionsCommandOutput,
} from "../commands/DescribeDhcpOptionsCommand";
import {
  DescribeEgressOnlyInternetGatewaysCommandInput,
  DescribeEgressOnlyInternetGatewaysCommandOutput,
} from "../commands/DescribeEgressOnlyInternetGatewaysCommand";
import {
  DescribeElasticGpusCommandInput,
  DescribeElasticGpusCommandOutput,
} from "../commands/DescribeElasticGpusCommand";
import {
  DescribeExportImageTasksCommandInput,
  DescribeExportImageTasksCommandOutput,
} from "../commands/DescribeExportImageTasksCommand";
import {
  DescribeExportTasksCommandInput,
  DescribeExportTasksCommandOutput,
} from "../commands/DescribeExportTasksCommand";
import {
  DescribeFastLaunchImagesCommandInput,
  DescribeFastLaunchImagesCommandOutput,
} from "../commands/DescribeFastLaunchImagesCommand";
import {
  DescribeFastSnapshotRestoresCommandInput,
  DescribeFastSnapshotRestoresCommandOutput,
} from "../commands/DescribeFastSnapshotRestoresCommand";
import {
  DescribeFleetHistoryCommandInput,
  DescribeFleetHistoryCommandOutput,
} from "../commands/DescribeFleetHistoryCommand";
import {
  DescribeFleetInstancesCommandInput,
  DescribeFleetInstancesCommandOutput,
} from "../commands/DescribeFleetInstancesCommand";
import { DescribeFleetsCommandInput, DescribeFleetsCommandOutput } from "../commands/DescribeFleetsCommand";
import { DescribeFlowLogsCommandInput, DescribeFlowLogsCommandOutput } from "../commands/DescribeFlowLogsCommand";
import {
  DescribeFpgaImageAttributeCommandInput,
  DescribeFpgaImageAttributeCommandOutput,
} from "../commands/DescribeFpgaImageAttributeCommand";
import { DescribeFpgaImagesCommandInput, DescribeFpgaImagesCommandOutput } from "../commands/DescribeFpgaImagesCommand";
import {
  DescribeHostReservationOfferingsCommandInput,
  DescribeHostReservationOfferingsCommandOutput,
} from "../commands/DescribeHostReservationOfferingsCommand";
import {
  DescribeHostReservationsCommandInput,
  DescribeHostReservationsCommandOutput,
} from "../commands/DescribeHostReservationsCommand";
import { DescribeHostsCommandInput, DescribeHostsCommandOutput } from "../commands/DescribeHostsCommand";
import {
  DescribeIamInstanceProfileAssociationsCommandInput,
  DescribeIamInstanceProfileAssociationsCommandOutput,
} from "../commands/DescribeIamInstanceProfileAssociationsCommand";
import {
  DescribeIdentityIdFormatCommandInput,
  DescribeIdentityIdFormatCommandOutput,
} from "../commands/DescribeIdentityIdFormatCommand";
import { DescribeIdFormatCommandInput, DescribeIdFormatCommandOutput } from "../commands/DescribeIdFormatCommand";
import {
  DescribeImageAttributeCommandInput,
  DescribeImageAttributeCommandOutput,
} from "../commands/DescribeImageAttributeCommand";
import { DescribeImagesCommandInput, DescribeImagesCommandOutput } from "../commands/DescribeImagesCommand";
import {
  DescribeImportImageTasksCommandInput,
  DescribeImportImageTasksCommandOutput,
} from "../commands/DescribeImportImageTasksCommand";
import {
  DescribeImportSnapshotTasksCommandInput,
  DescribeImportSnapshotTasksCommandOutput,
} from "../commands/DescribeImportSnapshotTasksCommand";
import {
  DescribeInstanceAttributeCommandInput,
  DescribeInstanceAttributeCommandOutput,
} from "../commands/DescribeInstanceAttributeCommand";
import {
  DescribeInstanceConnectEndpointsCommandInput,
  DescribeInstanceConnectEndpointsCommandOutput,
} from "../commands/DescribeInstanceConnectEndpointsCommand";
import {
  DescribeInstanceCreditSpecificationsCommandInput,
  DescribeInstanceCreditSpecificationsCommandOutput,
} from "../commands/DescribeInstanceCreditSpecificationsCommand";
import {
  DescribeInstanceEventNotificationAttributesCommandInput,
  DescribeInstanceEventNotificationAttributesCommandOutput,
} from "../commands/DescribeInstanceEventNotificationAttributesCommand";
import {
  DescribeInstanceEventWindowsCommandInput,
  DescribeInstanceEventWindowsCommandOutput,
} from "../commands/DescribeInstanceEventWindowsCommand";
import { DescribeInstancesCommandInput, DescribeInstancesCommandOutput } from "../commands/DescribeInstancesCommand";
import {
  DescribeInstanceStatusCommandInput,
  DescribeInstanceStatusCommandOutput,
} from "../commands/DescribeInstanceStatusCommand";
import {
  DescribeInstanceTopologyCommandInput,
  DescribeInstanceTopologyCommandOutput,
} from "../commands/DescribeInstanceTopologyCommand";
import {
  DescribeInstanceTypeOfferingsCommandInput,
  DescribeInstanceTypeOfferingsCommandOutput,
} from "../commands/DescribeInstanceTypeOfferingsCommand";
import {
  DescribeInstanceTypesCommandInput,
  DescribeInstanceTypesCommandOutput,
} from "../commands/DescribeInstanceTypesCommand";
import {
  DescribeInternetGatewaysCommandInput,
  DescribeInternetGatewaysCommandOutput,
} from "../commands/DescribeInternetGatewaysCommand";
import { DescribeIpamByoasnCommandInput, DescribeIpamByoasnCommandOutput } from "../commands/DescribeIpamByoasnCommand";
import { DescribeIpamPoolsCommandInput, DescribeIpamPoolsCommandOutput } from "../commands/DescribeIpamPoolsCommand";
import {
  DescribeIpamResourceDiscoveriesCommandInput,
  DescribeIpamResourceDiscoveriesCommandOutput,
} from "../commands/DescribeIpamResourceDiscoveriesCommand";
import {
  DescribeIpamResourceDiscoveryAssociationsCommandInput,
  DescribeIpamResourceDiscoveryAssociationsCommandOutput,
} from "../commands/DescribeIpamResourceDiscoveryAssociationsCommand";
import { DescribeIpamsCommandInput, DescribeIpamsCommandOutput } from "../commands/DescribeIpamsCommand";
import { DescribeIpamScopesCommandInput, DescribeIpamScopesCommandOutput } from "../commands/DescribeIpamScopesCommand";
import { DescribeIpv6PoolsCommandInput, DescribeIpv6PoolsCommandOutput } from "../commands/DescribeIpv6PoolsCommand";
import { DescribeKeyPairsCommandInput, DescribeKeyPairsCommandOutput } from "../commands/DescribeKeyPairsCommand";
import {
  DescribeLaunchTemplatesCommandInput,
  DescribeLaunchTemplatesCommandOutput,
} from "../commands/DescribeLaunchTemplatesCommand";
import {
  DescribeLaunchTemplateVersionsCommandInput,
  DescribeLaunchTemplateVersionsCommandOutput,
} from "../commands/DescribeLaunchTemplateVersionsCommand";
import {
  DescribeLocalGatewayRouteTablesCommandInput,
  DescribeLocalGatewayRouteTablesCommandOutput,
} from "../commands/DescribeLocalGatewayRouteTablesCommand";
import {
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandInput,
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandOutput,
} from "../commands/DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand";
import {
  DescribeLocalGatewayRouteTableVpcAssociationsCommandInput,
  DescribeLocalGatewayRouteTableVpcAssociationsCommandOutput,
} from "../commands/DescribeLocalGatewayRouteTableVpcAssociationsCommand";
import {
  DescribeLocalGatewaysCommandInput,
  DescribeLocalGatewaysCommandOutput,
} from "../commands/DescribeLocalGatewaysCommand";
import {
  DescribeLocalGatewayVirtualInterfaceGroupsCommandInput,
  DescribeLocalGatewayVirtualInterfaceGroupsCommandOutput,
} from "../commands/DescribeLocalGatewayVirtualInterfaceGroupsCommand";
import {
  DescribeLocalGatewayVirtualInterfacesCommandInput,
  DescribeLocalGatewayVirtualInterfacesCommandOutput,
} from "../commands/DescribeLocalGatewayVirtualInterfacesCommand";
import {
  DescribeLockedSnapshotsCommandInput,
  DescribeLockedSnapshotsCommandOutput,
} from "../commands/DescribeLockedSnapshotsCommand";
import {
  DescribeManagedPrefixListsCommandInput,
  DescribeManagedPrefixListsCommandOutput,
} from "../commands/DescribeManagedPrefixListsCommand";
import {
  DescribeMovingAddressesCommandInput,
  DescribeMovingAddressesCommandOutput,
} from "../commands/DescribeMovingAddressesCommand";
import {
  DescribeNatGatewaysCommandInput,
  DescribeNatGatewaysCommandOutput,
} from "../commands/DescribeNatGatewaysCommand";
import {
  DescribeNetworkAclsCommandInput,
  DescribeNetworkAclsCommandOutput,
} from "../commands/DescribeNetworkAclsCommand";
import {
  DescribeNetworkInsightsAccessScopeAnalysesCommandInput,
  DescribeNetworkInsightsAccessScopeAnalysesCommandOutput,
} from "../commands/DescribeNetworkInsightsAccessScopeAnalysesCommand";
import {
  DescribeNetworkInsightsAccessScopesCommandInput,
  DescribeNetworkInsightsAccessScopesCommandOutput,
} from "../commands/DescribeNetworkInsightsAccessScopesCommand";
import {
  DescribeNetworkInsightsAnalysesCommandInput,
  DescribeNetworkInsightsAnalysesCommandOutput,
} from "../commands/DescribeNetworkInsightsAnalysesCommand";
import {
  DescribeNetworkInsightsPathsCommandInput,
  DescribeNetworkInsightsPathsCommandOutput,
} from "../commands/DescribeNetworkInsightsPathsCommand";
import {
  DescribeNetworkInterfaceAttributeCommandInput,
  DescribeNetworkInterfaceAttributeCommandOutput,
} from "../commands/DescribeNetworkInterfaceAttributeCommand";
import {
  DescribeNetworkInterfacePermissionsCommandInput,
  DescribeNetworkInterfacePermissionsCommandOutput,
} from "../commands/DescribeNetworkInterfacePermissionsCommand";
import {
  DescribeNetworkInterfacesCommandInput,
  DescribeNetworkInterfacesCommandOutput,
} from "../commands/DescribeNetworkInterfacesCommand";
import {
  DescribePlacementGroupsCommandInput,
  DescribePlacementGroupsCommandOutput,
} from "../commands/DescribePlacementGroupsCommand";
import {
  DescribePrefixListsCommandInput,
  DescribePrefixListsCommandOutput,
} from "../commands/DescribePrefixListsCommand";
import {
  DescribePrincipalIdFormatCommandInput,
  DescribePrincipalIdFormatCommandOutput,
} from "../commands/DescribePrincipalIdFormatCommand";
import {
  DescribePublicIpv4PoolsCommandInput,
  DescribePublicIpv4PoolsCommandOutput,
} from "../commands/DescribePublicIpv4PoolsCommand";
import { DescribeRegionsCommandInput, DescribeRegionsCommandOutput } from "../commands/DescribeRegionsCommand";
import {
  DescribeReplaceRootVolumeTasksCommandInput,
  DescribeReplaceRootVolumeTasksCommandOutput,
} from "../commands/DescribeReplaceRootVolumeTasksCommand";
import {
  DescribeReservedInstancesCommandInput,
  DescribeReservedInstancesCommandOutput,
} from "../commands/DescribeReservedInstancesCommand";
import {
  DescribeReservedInstancesListingsCommandInput,
  DescribeReservedInstancesListingsCommandOutput,
} from "../commands/DescribeReservedInstancesListingsCommand";
import {
  DescribeReservedInstancesModificationsCommandInput,
  DescribeReservedInstancesModificationsCommandOutput,
} from "../commands/DescribeReservedInstancesModificationsCommand";
import {
  DescribeReservedInstancesOfferingsCommandInput,
  DescribeReservedInstancesOfferingsCommandOutput,
} from "../commands/DescribeReservedInstancesOfferingsCommand";
import {
  DescribeRouteTablesCommandInput,
  DescribeRouteTablesCommandOutput,
} from "../commands/DescribeRouteTablesCommand";
import {
  DescribeScheduledInstanceAvailabilityCommandInput,
  DescribeScheduledInstanceAvailabilityCommandOutput,
} from "../commands/DescribeScheduledInstanceAvailabilityCommand";
import {
  DescribeScheduledInstancesCommandInput,
  DescribeScheduledInstancesCommandOutput,
} from "../commands/DescribeScheduledInstancesCommand";
import {
  DescribeSecurityGroupReferencesCommandInput,
  DescribeSecurityGroupReferencesCommandOutput,
} from "../commands/DescribeSecurityGroupReferencesCommand";
import {
  DescribeSecurityGroupRulesCommandInput,
  DescribeSecurityGroupRulesCommandOutput,
} from "../commands/DescribeSecurityGroupRulesCommand";
import {
  DescribeSecurityGroupsCommandInput,
  DescribeSecurityGroupsCommandOutput,
} from "../commands/DescribeSecurityGroupsCommand";
import {
  DescribeSnapshotAttributeCommandInput,
  DescribeSnapshotAttributeCommandOutput,
} from "../commands/DescribeSnapshotAttributeCommand";
import { DescribeSnapshotsCommandInput, DescribeSnapshotsCommandOutput } from "../commands/DescribeSnapshotsCommand";
import {
  DescribeSnapshotTierStatusCommandInput,
  DescribeSnapshotTierStatusCommandOutput,
} from "../commands/DescribeSnapshotTierStatusCommand";
import {
  DescribeSpotDatafeedSubscriptionCommandInput,
  DescribeSpotDatafeedSubscriptionCommandOutput,
} from "../commands/DescribeSpotDatafeedSubscriptionCommand";
import {
  DescribeSpotFleetInstancesCommandInput,
  DescribeSpotFleetInstancesCommandOutput,
} from "../commands/DescribeSpotFleetInstancesCommand";
import {
  DescribeSpotFleetRequestHistoryCommandInput,
  DescribeSpotFleetRequestHistoryCommandOutput,
} from "../commands/DescribeSpotFleetRequestHistoryCommand";
import {
  DescribeSpotFleetRequestsCommandInput,
  DescribeSpotFleetRequestsCommandOutput,
} from "../commands/DescribeSpotFleetRequestsCommand";
import {
  DescribeSpotInstanceRequestsCommandInput,
  DescribeSpotInstanceRequestsCommandOutput,
} from "../commands/DescribeSpotInstanceRequestsCommand";
import {
  DescribeSpotPriceHistoryCommandInput,
  DescribeSpotPriceHistoryCommandOutput,
} from "../commands/DescribeSpotPriceHistoryCommand";
import {
  DescribeStaleSecurityGroupsCommandInput,
  DescribeStaleSecurityGroupsCommandOutput,
} from "../commands/DescribeStaleSecurityGroupsCommand";
import {
  DescribeStoreImageTasksCommandInput,
  DescribeStoreImageTasksCommandOutput,
} from "../commands/DescribeStoreImageTasksCommand";
import { DescribeSubnetsCommandInput, DescribeSubnetsCommandOutput } from "../commands/DescribeSubnetsCommand";
import { DescribeTagsCommandInput, DescribeTagsCommandOutput } from "../commands/DescribeTagsCommand";
import {
  DescribeTrafficMirrorFiltersCommandInput,
  DescribeTrafficMirrorFiltersCommandOutput,
} from "../commands/DescribeTrafficMirrorFiltersCommand";
import {
  DescribeTrafficMirrorSessionsCommandInput,
  DescribeTrafficMirrorSessionsCommandOutput,
} from "../commands/DescribeTrafficMirrorSessionsCommand";
import {
  DescribeTrafficMirrorTargetsCommandInput,
  DescribeTrafficMirrorTargetsCommandOutput,
} from "../commands/DescribeTrafficMirrorTargetsCommand";
import {
  DescribeTransitGatewayAttachmentsCommandInput,
  DescribeTransitGatewayAttachmentsCommandOutput,
} from "../commands/DescribeTransitGatewayAttachmentsCommand";
import {
  DescribeTransitGatewayConnectPeersCommandInput,
  DescribeTransitGatewayConnectPeersCommandOutput,
} from "../commands/DescribeTransitGatewayConnectPeersCommand";
import {
  DescribeTransitGatewayConnectsCommandInput,
  DescribeTransitGatewayConnectsCommandOutput,
} from "../commands/DescribeTransitGatewayConnectsCommand";
import {
  DescribeTransitGatewayMulticastDomainsCommandInput,
  DescribeTransitGatewayMulticastDomainsCommandOutput,
} from "../commands/DescribeTransitGatewayMulticastDomainsCommand";
import {
  DescribeTransitGatewayPeeringAttachmentsCommandInput,
  DescribeTransitGatewayPeeringAttachmentsCommandOutput,
} from "../commands/DescribeTransitGatewayPeeringAttachmentsCommand";
import {
  DescribeTransitGatewayPolicyTablesCommandInput,
  DescribeTransitGatewayPolicyTablesCommandOutput,
} from "../commands/DescribeTransitGatewayPolicyTablesCommand";
import {
  DescribeTransitGatewayRouteTableAnnouncementsCommandInput,
  DescribeTransitGatewayRouteTableAnnouncementsCommandOutput,
} from "../commands/DescribeTransitGatewayRouteTableAnnouncementsCommand";
import {
  DescribeTransitGatewayRouteTablesCommandInput,
  DescribeTransitGatewayRouteTablesCommandOutput,
} from "../commands/DescribeTransitGatewayRouteTablesCommand";
import {
  DescribeTransitGatewaysCommandInput,
  DescribeTransitGatewaysCommandOutput,
} from "../commands/DescribeTransitGatewaysCommand";
import {
  DescribeTransitGatewayVpcAttachmentsCommandInput,
  DescribeTransitGatewayVpcAttachmentsCommandOutput,
} from "../commands/DescribeTransitGatewayVpcAttachmentsCommand";
import {
  DescribeTrunkInterfaceAssociationsCommandInput,
  DescribeTrunkInterfaceAssociationsCommandOutput,
} from "../commands/DescribeTrunkInterfaceAssociationsCommand";
import {
  DescribeVerifiedAccessEndpointsCommandInput,
  DescribeVerifiedAccessEndpointsCommandOutput,
} from "../commands/DescribeVerifiedAccessEndpointsCommand";
import {
  DescribeVerifiedAccessGroupsCommandInput,
  DescribeVerifiedAccessGroupsCommandOutput,
} from "../commands/DescribeVerifiedAccessGroupsCommand";
import {
  DescribeVerifiedAccessInstanceLoggingConfigurationsCommandInput,
  DescribeVerifiedAccessInstanceLoggingConfigurationsCommandOutput,
} from "../commands/DescribeVerifiedAccessInstanceLoggingConfigurationsCommand";
import {
  DescribeVerifiedAccessInstancesCommandInput,
  DescribeVerifiedAccessInstancesCommandOutput,
} from "../commands/DescribeVerifiedAccessInstancesCommand";
import {
  DescribeVerifiedAccessTrustProvidersCommandInput,
  DescribeVerifiedAccessTrustProvidersCommandOutput,
} from "../commands/DescribeVerifiedAccessTrustProvidersCommand";
import {
  DescribeVolumeAttributeCommandInput,
  DescribeVolumeAttributeCommandOutput,
} from "../commands/DescribeVolumeAttributeCommand";
import { DescribeVolumesCommandInput, DescribeVolumesCommandOutput } from "../commands/DescribeVolumesCommand";
import {
  DescribeVolumesModificationsCommandInput,
  DescribeVolumesModificationsCommandOutput,
} from "../commands/DescribeVolumesModificationsCommand";
import {
  DescribeVolumeStatusCommandInput,
  DescribeVolumeStatusCommandOutput,
} from "../commands/DescribeVolumeStatusCommand";
import {
  DescribeVpcAttributeCommandInput,
  DescribeVpcAttributeCommandOutput,
} from "../commands/DescribeVpcAttributeCommand";
import {
  DescribeVpcClassicLinkCommandInput,
  DescribeVpcClassicLinkCommandOutput,
} from "../commands/DescribeVpcClassicLinkCommand";
import {
  DescribeVpcClassicLinkDnsSupportCommandInput,
  DescribeVpcClassicLinkDnsSupportCommandOutput,
} from "../commands/DescribeVpcClassicLinkDnsSupportCommand";
import {
  DescribeVpcEndpointConnectionNotificationsCommandInput,
  DescribeVpcEndpointConnectionNotificationsCommandOutput,
} from "../commands/DescribeVpcEndpointConnectionNotificationsCommand";
import {
  DescribeVpcEndpointConnectionsCommandInput,
  DescribeVpcEndpointConnectionsCommandOutput,
} from "../commands/DescribeVpcEndpointConnectionsCommand";
import {
  DescribeVpcEndpointsCommandInput,
  DescribeVpcEndpointsCommandOutput,
} from "../commands/DescribeVpcEndpointsCommand";
import {
  DescribeVpcEndpointServiceConfigurationsCommandInput,
  DescribeVpcEndpointServiceConfigurationsCommandOutput,
} from "../commands/DescribeVpcEndpointServiceConfigurationsCommand";
import {
  DescribeVpcEndpointServicePermissionsCommandInput,
  DescribeVpcEndpointServicePermissionsCommandOutput,
} from "../commands/DescribeVpcEndpointServicePermissionsCommand";
import {
  DescribeVpcEndpointServicesCommandInput,
  DescribeVpcEndpointServicesCommandOutput,
} from "../commands/DescribeVpcEndpointServicesCommand";
import {
  DescribeVpcPeeringConnectionsCommandInput,
  DescribeVpcPeeringConnectionsCommandOutput,
} from "../commands/DescribeVpcPeeringConnectionsCommand";
import { DescribeVpcsCommandInput, DescribeVpcsCommandOutput } from "../commands/DescribeVpcsCommand";
import {
  DescribeVpnConnectionsCommandInput,
  DescribeVpnConnectionsCommandOutput,
} from "../commands/DescribeVpnConnectionsCommand";
import {
  DescribeVpnGatewaysCommandInput,
  DescribeVpnGatewaysCommandOutput,
} from "../commands/DescribeVpnGatewaysCommand";
import {
  DetachClassicLinkVpcCommandInput,
  DetachClassicLinkVpcCommandOutput,
} from "../commands/DetachClassicLinkVpcCommand";
import {
  DetachInternetGatewayCommandInput,
  DetachInternetGatewayCommandOutput,
} from "../commands/DetachInternetGatewayCommand";
import {
  DetachNetworkInterfaceCommandInput,
  DetachNetworkInterfaceCommandOutput,
} from "../commands/DetachNetworkInterfaceCommand";
import {
  DetachVerifiedAccessTrustProviderCommandInput,
  DetachVerifiedAccessTrustProviderCommandOutput,
} from "../commands/DetachVerifiedAccessTrustProviderCommand";
import { DetachVolumeCommandInput, DetachVolumeCommandOutput } from "../commands/DetachVolumeCommand";
import { DetachVpnGatewayCommandInput, DetachVpnGatewayCommandOutput } from "../commands/DetachVpnGatewayCommand";
import {
  DisableAddressTransferCommandInput,
  DisableAddressTransferCommandOutput,
} from "../commands/DisableAddressTransferCommand";
import {
  DisableAwsNetworkPerformanceMetricSubscriptionCommandInput,
  DisableAwsNetworkPerformanceMetricSubscriptionCommandOutput,
} from "../commands/DisableAwsNetworkPerformanceMetricSubscriptionCommand";
import {
  DisableEbsEncryptionByDefaultCommandInput,
  DisableEbsEncryptionByDefaultCommandOutput,
} from "../commands/DisableEbsEncryptionByDefaultCommand";
import { DisableFastLaunchCommandInput, DisableFastLaunchCommandOutput } from "../commands/DisableFastLaunchCommand";
import {
  DisableFastSnapshotRestoresCommandInput,
  DisableFastSnapshotRestoresCommandOutput,
} from "../commands/DisableFastSnapshotRestoresCommand";
import {
  DisableImageBlockPublicAccessCommandInput,
  DisableImageBlockPublicAccessCommandOutput,
} from "../commands/DisableImageBlockPublicAccessCommand";
import { DisableImageCommandInput, DisableImageCommandOutput } from "../commands/DisableImageCommand";
import {
  DisableImageDeprecationCommandInput,
  DisableImageDeprecationCommandOutput,
} from "../commands/DisableImageDeprecationCommand";
import {
  DisableIpamOrganizationAdminAccountCommandInput,
  DisableIpamOrganizationAdminAccountCommandOutput,
} from "../commands/DisableIpamOrganizationAdminAccountCommand";
import {
  DisableSerialConsoleAccessCommandInput,
  DisableSerialConsoleAccessCommandOutput,
} from "../commands/DisableSerialConsoleAccessCommand";
import {
  DisableSnapshotBlockPublicAccessCommandInput,
  DisableSnapshotBlockPublicAccessCommandOutput,
} from "../commands/DisableSnapshotBlockPublicAccessCommand";
import {
  DisableTransitGatewayRouteTablePropagationCommandInput,
  DisableTransitGatewayRouteTablePropagationCommandOutput,
} from "../commands/DisableTransitGatewayRouteTablePropagationCommand";
import {
  DisableVgwRoutePropagationCommandInput,
  DisableVgwRoutePropagationCommandOutput,
} from "../commands/DisableVgwRoutePropagationCommand";
import {
  DisableVpcClassicLinkCommandInput,
  DisableVpcClassicLinkCommandOutput,
} from "../commands/DisableVpcClassicLinkCommand";
import {
  DisableVpcClassicLinkDnsSupportCommandInput,
  DisableVpcClassicLinkDnsSupportCommandOutput,
} from "../commands/DisableVpcClassicLinkDnsSupportCommand";
import {
  DisassociateAddressCommandInput,
  DisassociateAddressCommandOutput,
} from "../commands/DisassociateAddressCommand";
import {
  DisassociateClientVpnTargetNetworkCommandInput,
  DisassociateClientVpnTargetNetworkCommandOutput,
} from "../commands/DisassociateClientVpnTargetNetworkCommand";
import {
  DisassociateEnclaveCertificateIamRoleCommandInput,
  DisassociateEnclaveCertificateIamRoleCommandOutput,
} from "../commands/DisassociateEnclaveCertificateIamRoleCommand";
import {
  DisassociateIamInstanceProfileCommandInput,
  DisassociateIamInstanceProfileCommandOutput,
} from "../commands/DisassociateIamInstanceProfileCommand";
import {
  DisassociateInstanceEventWindowCommandInput,
  DisassociateInstanceEventWindowCommandOutput,
} from "../commands/DisassociateInstanceEventWindowCommand";
import {
  DisassociateIpamByoasnCommandInput,
  DisassociateIpamByoasnCommandOutput,
} from "../commands/DisassociateIpamByoasnCommand";
import {
  DisassociateIpamResourceDiscoveryCommandInput,
  DisassociateIpamResourceDiscoveryCommandOutput,
} from "../commands/DisassociateIpamResourceDiscoveryCommand";
import {
  DisassociateNatGatewayAddressCommandInput,
  DisassociateNatGatewayAddressCommandOutput,
} from "../commands/DisassociateNatGatewayAddressCommand";
import {
  DisassociateRouteTableCommandInput,
  DisassociateRouteTableCommandOutput,
} from "../commands/DisassociateRouteTableCommand";
import {
  DisassociateSubnetCidrBlockCommandInput,
  DisassociateSubnetCidrBlockCommandOutput,
} from "../commands/DisassociateSubnetCidrBlockCommand";
import {
  DisassociateTransitGatewayMulticastDomainCommandInput,
  DisassociateTransitGatewayMulticastDomainCommandOutput,
} from "../commands/DisassociateTransitGatewayMulticastDomainCommand";
import {
  DisassociateTransitGatewayPolicyTableCommandInput,
  DisassociateTransitGatewayPolicyTableCommandOutput,
} from "../commands/DisassociateTransitGatewayPolicyTableCommand";
import {
  DisassociateTransitGatewayRouteTableCommandInput,
  DisassociateTransitGatewayRouteTableCommandOutput,
} from "../commands/DisassociateTransitGatewayRouteTableCommand";
import {
  DisassociateTrunkInterfaceCommandInput,
  DisassociateTrunkInterfaceCommandOutput,
} from "../commands/DisassociateTrunkInterfaceCommand";
import {
  DisassociateVpcCidrBlockCommandInput,
  DisassociateVpcCidrBlockCommandOutput,
} from "../commands/DisassociateVpcCidrBlockCommand";
import {
  EnableAddressTransferCommandInput,
  EnableAddressTransferCommandOutput,
} from "../commands/EnableAddressTransferCommand";
import {
  EnableAwsNetworkPerformanceMetricSubscriptionCommandInput,
  EnableAwsNetworkPerformanceMetricSubscriptionCommandOutput,
} from "../commands/EnableAwsNetworkPerformanceMetricSubscriptionCommand";
import {
  EnableEbsEncryptionByDefaultCommandInput,
  EnableEbsEncryptionByDefaultCommandOutput,
} from "../commands/EnableEbsEncryptionByDefaultCommand";
import { EnableFastLaunchCommandInput, EnableFastLaunchCommandOutput } from "../commands/EnableFastLaunchCommand";
import {
  EnableFastSnapshotRestoresCommandInput,
  EnableFastSnapshotRestoresCommandOutput,
} from "../commands/EnableFastSnapshotRestoresCommand";
import {
  EnableImageBlockPublicAccessCommandInput,
  EnableImageBlockPublicAccessCommandOutput,
} from "../commands/EnableImageBlockPublicAccessCommand";
import { EnableImageCommandInput, EnableImageCommandOutput } from "../commands/EnableImageCommand";
import {
  EnableImageDeprecationCommandInput,
  EnableImageDeprecationCommandOutput,
} from "../commands/EnableImageDeprecationCommand";
import {
  EnableIpamOrganizationAdminAccountCommandInput,
  EnableIpamOrganizationAdminAccountCommandOutput,
} from "../commands/EnableIpamOrganizationAdminAccountCommand";
import {
  EnableReachabilityAnalyzerOrganizationSharingCommandInput,
  EnableReachabilityAnalyzerOrganizationSharingCommandOutput,
} from "../commands/EnableReachabilityAnalyzerOrganizationSharingCommand";
import {
  EnableSerialConsoleAccessCommandInput,
  EnableSerialConsoleAccessCommandOutput,
} from "../commands/EnableSerialConsoleAccessCommand";
import {
  EnableSnapshotBlockPublicAccessCommandInput,
  EnableSnapshotBlockPublicAccessCommandOutput,
} from "../commands/EnableSnapshotBlockPublicAccessCommand";
import {
  EnableTransitGatewayRouteTablePropagationCommandInput,
  EnableTransitGatewayRouteTablePropagationCommandOutput,
} from "../commands/EnableTransitGatewayRouteTablePropagationCommand";
import {
  EnableVgwRoutePropagationCommandInput,
  EnableVgwRoutePropagationCommandOutput,
} from "../commands/EnableVgwRoutePropagationCommand";
import { EnableVolumeIOCommandInput, EnableVolumeIOCommandOutput } from "../commands/EnableVolumeIOCommand";
import {
  EnableVpcClassicLinkCommandInput,
  EnableVpcClassicLinkCommandOutput,
} from "../commands/EnableVpcClassicLinkCommand";
import {
  EnableVpcClassicLinkDnsSupportCommandInput,
  EnableVpcClassicLinkDnsSupportCommandOutput,
} from "../commands/EnableVpcClassicLinkDnsSupportCommand";
import {
  ExportClientVpnClientCertificateRevocationListCommandInput,
  ExportClientVpnClientCertificateRevocationListCommandOutput,
} from "../commands/ExportClientVpnClientCertificateRevocationListCommand";
import {
  ExportClientVpnClientConfigurationCommandInput,
  ExportClientVpnClientConfigurationCommandOutput,
} from "../commands/ExportClientVpnClientConfigurationCommand";
import { ExportImageCommandInput, ExportImageCommandOutput } from "../commands/ExportImageCommand";
import {
  ExportTransitGatewayRoutesCommandInput,
  ExportTransitGatewayRoutesCommandOutput,
} from "../commands/ExportTransitGatewayRoutesCommand";
import {
  GetAssociatedEnclaveCertificateIamRolesCommandInput,
  GetAssociatedEnclaveCertificateIamRolesCommandOutput,
} from "../commands/GetAssociatedEnclaveCertificateIamRolesCommand";
import {
  GetAssociatedIpv6PoolCidrsCommandInput,
  GetAssociatedIpv6PoolCidrsCommandOutput,
} from "../commands/GetAssociatedIpv6PoolCidrsCommand";
import {
  GetAwsNetworkPerformanceDataCommandInput,
  GetAwsNetworkPerformanceDataCommandOutput,
} from "../commands/GetAwsNetworkPerformanceDataCommand";
import {
  GetCapacityReservationUsageCommandInput,
  GetCapacityReservationUsageCommandOutput,
} from "../commands/GetCapacityReservationUsageCommand";
import { GetCoipPoolUsageCommandInput, GetCoipPoolUsageCommandOutput } from "../commands/GetCoipPoolUsageCommand";
import { GetConsoleOutputCommandInput, GetConsoleOutputCommandOutput } from "../commands/GetConsoleOutputCommand";
import {
  GetConsoleScreenshotCommandInput,
  GetConsoleScreenshotCommandOutput,
} from "../commands/GetConsoleScreenshotCommand";
import {
  GetDefaultCreditSpecificationCommandInput,
  GetDefaultCreditSpecificationCommandOutput,
} from "../commands/GetDefaultCreditSpecificationCommand";
import {
  GetEbsDefaultKmsKeyIdCommandInput,
  GetEbsDefaultKmsKeyIdCommandOutput,
} from "../commands/GetEbsDefaultKmsKeyIdCommand";
import {
  GetEbsEncryptionByDefaultCommandInput,
  GetEbsEncryptionByDefaultCommandOutput,
} from "../commands/GetEbsEncryptionByDefaultCommand";
import {
  GetFlowLogsIntegrationTemplateCommandInput,
  GetFlowLogsIntegrationTemplateCommandOutput,
} from "../commands/GetFlowLogsIntegrationTemplateCommand";
import {
  GetGroupsForCapacityReservationCommandInput,
  GetGroupsForCapacityReservationCommandOutput,
} from "../commands/GetGroupsForCapacityReservationCommand";
import {
  GetHostReservationPurchasePreviewCommandInput,
  GetHostReservationPurchasePreviewCommandOutput,
} from "../commands/GetHostReservationPurchasePreviewCommand";
import {
  GetImageBlockPublicAccessStateCommandInput,
  GetImageBlockPublicAccessStateCommandOutput,
} from "../commands/GetImageBlockPublicAccessStateCommand";
import {
  GetInstanceTypesFromInstanceRequirementsCommandInput,
  GetInstanceTypesFromInstanceRequirementsCommandOutput,
} from "../commands/GetInstanceTypesFromInstanceRequirementsCommand";
import {
  GetInstanceUefiDataCommandInput,
  GetInstanceUefiDataCommandOutput,
} from "../commands/GetInstanceUefiDataCommand";
import {
  GetIpamAddressHistoryCommandInput,
  GetIpamAddressHistoryCommandOutput,
} from "../commands/GetIpamAddressHistoryCommand";
import {
  GetIpamDiscoveredAccountsCommandInput,
  GetIpamDiscoveredAccountsCommandOutput,
} from "../commands/GetIpamDiscoveredAccountsCommand";
import {
  GetIpamDiscoveredPublicAddressesCommandInput,
  GetIpamDiscoveredPublicAddressesCommandOutput,
} from "../commands/GetIpamDiscoveredPublicAddressesCommand";
import {
  GetIpamDiscoveredResourceCidrsCommandInput,
  GetIpamDiscoveredResourceCidrsCommandOutput,
} from "../commands/GetIpamDiscoveredResourceCidrsCommand";
import {
  GetIpamPoolAllocationsCommandInput,
  GetIpamPoolAllocationsCommandOutput,
} from "../commands/GetIpamPoolAllocationsCommand";
import { GetIpamPoolCidrsCommandInput, GetIpamPoolCidrsCommandOutput } from "../commands/GetIpamPoolCidrsCommand";
import {
  GetIpamResourceCidrsCommandInput,
  GetIpamResourceCidrsCommandOutput,
} from "../commands/GetIpamResourceCidrsCommand";
import {
  GetLaunchTemplateDataCommandInput,
  GetLaunchTemplateDataCommandOutput,
} from "../commands/GetLaunchTemplateDataCommand";
import {
  GetManagedPrefixListAssociationsCommandInput,
  GetManagedPrefixListAssociationsCommandOutput,
} from "../commands/GetManagedPrefixListAssociationsCommand";
import {
  GetManagedPrefixListEntriesCommandInput,
  GetManagedPrefixListEntriesCommandOutput,
} from "../commands/GetManagedPrefixListEntriesCommand";
import {
  GetNetworkInsightsAccessScopeAnalysisFindingsCommandInput,
  GetNetworkInsightsAccessScopeAnalysisFindingsCommandOutput,
} from "../commands/GetNetworkInsightsAccessScopeAnalysisFindingsCommand";
import {
  GetNetworkInsightsAccessScopeContentCommandInput,
  GetNetworkInsightsAccessScopeContentCommandOutput,
} from "../commands/GetNetworkInsightsAccessScopeContentCommand";
import { GetPasswordDataCommandInput, GetPasswordDataCommandOutput } from "../commands/GetPasswordDataCommand";
import {
  GetReservedInstancesExchangeQuoteCommandInput,
  GetReservedInstancesExchangeQuoteCommandOutput,
} from "../commands/GetReservedInstancesExchangeQuoteCommand";
import {
  GetSecurityGroupsForVpcCommandInput,
  GetSecurityGroupsForVpcCommandOutput,
} from "../commands/GetSecurityGroupsForVpcCommand";
import {
  GetSerialConsoleAccessStatusCommandInput,
  GetSerialConsoleAccessStatusCommandOutput,
} from "../commands/GetSerialConsoleAccessStatusCommand";
import {
  GetSnapshotBlockPublicAccessStateCommandInput,
  GetSnapshotBlockPublicAccessStateCommandOutput,
} from "../commands/GetSnapshotBlockPublicAccessStateCommand";
import {
  GetSpotPlacementScoresCommandInput,
  GetSpotPlacementScoresCommandOutput,
} from "../commands/GetSpotPlacementScoresCommand";
import {
  GetSubnetCidrReservationsCommandInput,
  GetSubnetCidrReservationsCommandOutput,
} from "../commands/GetSubnetCidrReservationsCommand";
import {
  GetTransitGatewayAttachmentPropagationsCommandInput,
  GetTransitGatewayAttachmentPropagationsCommandOutput,
} from "../commands/GetTransitGatewayAttachmentPropagationsCommand";
import {
  GetTransitGatewayMulticastDomainAssociationsCommandInput,
  GetTransitGatewayMulticastDomainAssociationsCommandOutput,
} from "../commands/GetTransitGatewayMulticastDomainAssociationsCommand";
import {
  GetTransitGatewayPolicyTableAssociationsCommandInput,
  GetTransitGatewayPolicyTableAssociationsCommandOutput,
} from "../commands/GetTransitGatewayPolicyTableAssociationsCommand";
import {
  GetTransitGatewayPolicyTableEntriesCommandInput,
  GetTransitGatewayPolicyTableEntriesCommandOutput,
} from "../commands/GetTransitGatewayPolicyTableEntriesCommand";
import {
  GetTransitGatewayPrefixListReferencesCommandInput,
  GetTransitGatewayPrefixListReferencesCommandOutput,
} from "../commands/GetTransitGatewayPrefixListReferencesCommand";
import {
  GetTransitGatewayRouteTableAssociationsCommandInput,
  GetTransitGatewayRouteTableAssociationsCommandOutput,
} from "../commands/GetTransitGatewayRouteTableAssociationsCommand";
import {
  GetTransitGatewayRouteTablePropagationsCommandInput,
  GetTransitGatewayRouteTablePropagationsCommandOutput,
} from "../commands/GetTransitGatewayRouteTablePropagationsCommand";
import {
  GetVerifiedAccessEndpointPolicyCommandInput,
  GetVerifiedAccessEndpointPolicyCommandOutput,
} from "../commands/GetVerifiedAccessEndpointPolicyCommand";
import {
  GetVerifiedAccessGroupPolicyCommandInput,
  GetVerifiedAccessGroupPolicyCommandOutput,
} from "../commands/GetVerifiedAccessGroupPolicyCommand";
import {
  GetVpnConnectionDeviceSampleConfigurationCommandInput,
  GetVpnConnectionDeviceSampleConfigurationCommandOutput,
} from "../commands/GetVpnConnectionDeviceSampleConfigurationCommand";
import {
  GetVpnConnectionDeviceTypesCommandInput,
  GetVpnConnectionDeviceTypesCommandOutput,
} from "../commands/GetVpnConnectionDeviceTypesCommand";
import {
  GetVpnTunnelReplacementStatusCommandInput,
  GetVpnTunnelReplacementStatusCommandOutput,
} from "../commands/GetVpnTunnelReplacementStatusCommand";
import {
  ImportClientVpnClientCertificateRevocationListCommandInput,
  ImportClientVpnClientCertificateRevocationListCommandOutput,
} from "../commands/ImportClientVpnClientCertificateRevocationListCommand";
import { ImportImageCommandInput, ImportImageCommandOutput } from "../commands/ImportImageCommand";
import { ImportInstanceCommandInput, ImportInstanceCommandOutput } from "../commands/ImportInstanceCommand";
import { ImportKeyPairCommandInput, ImportKeyPairCommandOutput } from "../commands/ImportKeyPairCommand";
import { ImportSnapshotCommandInput, ImportSnapshotCommandOutput } from "../commands/ImportSnapshotCommand";
import { ImportVolumeCommandInput, ImportVolumeCommandOutput } from "../commands/ImportVolumeCommand";
import {
  ListImagesInRecycleBinCommandInput,
  ListImagesInRecycleBinCommandOutput,
} from "../commands/ListImagesInRecycleBinCommand";
import {
  ListSnapshotsInRecycleBinCommandInput,
  ListSnapshotsInRecycleBinCommandOutput,
} from "../commands/ListSnapshotsInRecycleBinCommand";
import { LockSnapshotCommandInput, LockSnapshotCommandOutput } from "../commands/LockSnapshotCommand";
import {
  ModifyAddressAttributeCommandInput,
  ModifyAddressAttributeCommandOutput,
} from "../commands/ModifyAddressAttributeCommand";
import {
  ModifyAvailabilityZoneGroupCommandInput,
  ModifyAvailabilityZoneGroupCommandOutput,
} from "../commands/ModifyAvailabilityZoneGroupCommand";
import {
  ModifyCapacityReservationCommandInput,
  ModifyCapacityReservationCommandOutput,
} from "../commands/ModifyCapacityReservationCommand";
import {
  ModifyCapacityReservationFleetCommandInput,
  ModifyCapacityReservationFleetCommandOutput,
} from "../commands/ModifyCapacityReservationFleetCommand";
import {
  ModifyClientVpnEndpointCommandInput,
  ModifyClientVpnEndpointCommandOutput,
} from "../commands/ModifyClientVpnEndpointCommand";
import {
  ModifyDefaultCreditSpecificationCommandInput,
  ModifyDefaultCreditSpecificationCommandOutput,
} from "../commands/ModifyDefaultCreditSpecificationCommand";
import {
  ModifyEbsDefaultKmsKeyIdCommandInput,
  ModifyEbsDefaultKmsKeyIdCommandOutput,
} from "../commands/ModifyEbsDefaultKmsKeyIdCommand";
import { ModifyFleetCommandInput, ModifyFleetCommandOutput } from "../commands/ModifyFleetCommand";
import {
  ModifyFpgaImageAttributeCommandInput,
  ModifyFpgaImageAttributeCommandOutput,
} from "../commands/ModifyFpgaImageAttributeCommand";
import { ModifyHostsCommandInput, ModifyHostsCommandOutput } from "../commands/ModifyHostsCommand";
import {
  ModifyIdentityIdFormatCommandInput,
  ModifyIdentityIdFormatCommandOutput,
} from "../commands/ModifyIdentityIdFormatCommand";
import { ModifyIdFormatCommandInput, ModifyIdFormatCommandOutput } from "../commands/ModifyIdFormatCommand";
import {
  ModifyImageAttributeCommandInput,
  ModifyImageAttributeCommandOutput,
} from "../commands/ModifyImageAttributeCommand";
import {
  ModifyInstanceAttributeCommandInput,
  ModifyInstanceAttributeCommandOutput,
} from "../commands/ModifyInstanceAttributeCommand";
import {
  ModifyInstanceCapacityReservationAttributesCommandInput,
  ModifyInstanceCapacityReservationAttributesCommandOutput,
} from "../commands/ModifyInstanceCapacityReservationAttributesCommand";
import {
  ModifyInstanceCreditSpecificationCommandInput,
  ModifyInstanceCreditSpecificationCommandOutput,
} from "../commands/ModifyInstanceCreditSpecificationCommand";
import {
  ModifyInstanceEventStartTimeCommandInput,
  ModifyInstanceEventStartTimeCommandOutput,
} from "../commands/ModifyInstanceEventStartTimeCommand";
import {
  ModifyInstanceEventWindowCommandInput,
  ModifyInstanceEventWindowCommandOutput,
} from "../commands/ModifyInstanceEventWindowCommand";
import {
  ModifyInstanceMaintenanceOptionsCommandInput,
  ModifyInstanceMaintenanceOptionsCommandOutput,
} from "../commands/ModifyInstanceMaintenanceOptionsCommand";
import {
  ModifyInstanceMetadataOptionsCommandInput,
  ModifyInstanceMetadataOptionsCommandOutput,
} from "../commands/ModifyInstanceMetadataOptionsCommand";
import {
  ModifyInstancePlacementCommandInput,
  ModifyInstancePlacementCommandOutput,
} from "../commands/ModifyInstancePlacementCommand";
import { ModifyIpamCommandInput, ModifyIpamCommandOutput } from "../commands/ModifyIpamCommand";
import { ModifyIpamPoolCommandInput, ModifyIpamPoolCommandOutput } from "../commands/ModifyIpamPoolCommand";
import {
  ModifyIpamResourceCidrCommandInput,
  ModifyIpamResourceCidrCommandOutput,
} from "../commands/ModifyIpamResourceCidrCommand";
import {
  ModifyIpamResourceDiscoveryCommandInput,
  ModifyIpamResourceDiscoveryCommandOutput,
} from "../commands/ModifyIpamResourceDiscoveryCommand";
import { ModifyIpamScopeCommandInput, ModifyIpamScopeCommandOutput } from "../commands/ModifyIpamScopeCommand";
import {
  ModifyLaunchTemplateCommandInput,
  ModifyLaunchTemplateCommandOutput,
} from "../commands/ModifyLaunchTemplateCommand";
import {
  ModifyLocalGatewayRouteCommandInput,
  ModifyLocalGatewayRouteCommandOutput,
} from "../commands/ModifyLocalGatewayRouteCommand";
import {
  ModifyManagedPrefixListCommandInput,
  ModifyManagedPrefixListCommandOutput,
} from "../commands/ModifyManagedPrefixListCommand";
import {
  ModifyNetworkInterfaceAttributeCommandInput,
  ModifyNetworkInterfaceAttributeCommandOutput,
} from "../commands/ModifyNetworkInterfaceAttributeCommand";
import {
  ModifyPrivateDnsNameOptionsCommandInput,
  ModifyPrivateDnsNameOptionsCommandOutput,
} from "../commands/ModifyPrivateDnsNameOptionsCommand";
import {
  ModifyReservedInstancesCommandInput,
  ModifyReservedInstancesCommandOutput,
} from "../commands/ModifyReservedInstancesCommand";
import {
  ModifySecurityGroupRulesCommandInput,
  ModifySecurityGroupRulesCommandOutput,
} from "../commands/ModifySecurityGroupRulesCommand";
import {
  ModifySnapshotAttributeCommandInput,
  ModifySnapshotAttributeCommandOutput,
} from "../commands/ModifySnapshotAttributeCommand";
import { ModifySnapshotTierCommandInput, ModifySnapshotTierCommandOutput } from "../commands/ModifySnapshotTierCommand";
import {
  ModifySpotFleetRequestCommandInput,
  ModifySpotFleetRequestCommandOutput,
} from "../commands/ModifySpotFleetRequestCommand";
import {
  ModifySubnetAttributeCommandInput,
  ModifySubnetAttributeCommandOutput,
} from "../commands/ModifySubnetAttributeCommand";
import {
  ModifyTrafficMirrorFilterNetworkServicesCommandInput,
  ModifyTrafficMirrorFilterNetworkServicesCommandOutput,
} from "../commands/ModifyTrafficMirrorFilterNetworkServicesCommand";
import {
  ModifyTrafficMirrorFilterRuleCommandInput,
  ModifyTrafficMirrorFilterRuleCommandOutput,
} from "../commands/ModifyTrafficMirrorFilterRuleCommand";
import {
  ModifyTrafficMirrorSessionCommandInput,
  ModifyTrafficMirrorSessionCommandOutput,
} from "../commands/ModifyTrafficMirrorSessionCommand";
import {
  ModifyTransitGatewayCommandInput,
  ModifyTransitGatewayCommandOutput,
} from "../commands/ModifyTransitGatewayCommand";
import {
  ModifyTransitGatewayPrefixListReferenceCommandInput,
  ModifyTransitGatewayPrefixListReferenceCommandOutput,
} from "../commands/ModifyTransitGatewayPrefixListReferenceCommand";
import {
  ModifyTransitGatewayVpcAttachmentCommandInput,
  ModifyTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/ModifyTransitGatewayVpcAttachmentCommand";
import {
  ModifyVerifiedAccessEndpointCommandInput,
  ModifyVerifiedAccessEndpointCommandOutput,
} from "../commands/ModifyVerifiedAccessEndpointCommand";
import {
  ModifyVerifiedAccessEndpointPolicyCommandInput,
  ModifyVerifiedAccessEndpointPolicyCommandOutput,
} from "../commands/ModifyVerifiedAccessEndpointPolicyCommand";
import {
  ModifyVerifiedAccessGroupCommandInput,
  ModifyVerifiedAccessGroupCommandOutput,
} from "../commands/ModifyVerifiedAccessGroupCommand";
import {
  ModifyVerifiedAccessGroupPolicyCommandInput,
  ModifyVerifiedAccessGroupPolicyCommandOutput,
} from "../commands/ModifyVerifiedAccessGroupPolicyCommand";
import {
  ModifyVerifiedAccessInstanceCommandInput,
  ModifyVerifiedAccessInstanceCommandOutput,
} from "../commands/ModifyVerifiedAccessInstanceCommand";
import {
  ModifyVerifiedAccessInstanceLoggingConfigurationCommandInput,
  ModifyVerifiedAccessInstanceLoggingConfigurationCommandOutput,
} from "../commands/ModifyVerifiedAccessInstanceLoggingConfigurationCommand";
import {
  ModifyVerifiedAccessTrustProviderCommandInput,
  ModifyVerifiedAccessTrustProviderCommandOutput,
} from "../commands/ModifyVerifiedAccessTrustProviderCommand";
import {
  ModifyVolumeAttributeCommandInput,
  ModifyVolumeAttributeCommandOutput,
} from "../commands/ModifyVolumeAttributeCommand";
import { ModifyVolumeCommandInput, ModifyVolumeCommandOutput } from "../commands/ModifyVolumeCommand";
import { ModifyVpcAttributeCommandInput, ModifyVpcAttributeCommandOutput } from "../commands/ModifyVpcAttributeCommand";
import { ModifyVpcEndpointCommandInput, ModifyVpcEndpointCommandOutput } from "../commands/ModifyVpcEndpointCommand";
import {
  ModifyVpcEndpointConnectionNotificationCommandInput,
  ModifyVpcEndpointConnectionNotificationCommandOutput,
} from "../commands/ModifyVpcEndpointConnectionNotificationCommand";
import {
  ModifyVpcEndpointServiceConfigurationCommandInput,
  ModifyVpcEndpointServiceConfigurationCommandOutput,
} from "../commands/ModifyVpcEndpointServiceConfigurationCommand";
import {
  ModifyVpcEndpointServicePayerResponsibilityCommandInput,
  ModifyVpcEndpointServicePayerResponsibilityCommandOutput,
} from "../commands/ModifyVpcEndpointServicePayerResponsibilityCommand";
import {
  ModifyVpcEndpointServicePermissionsCommandInput,
  ModifyVpcEndpointServicePermissionsCommandOutput,
} from "../commands/ModifyVpcEndpointServicePermissionsCommand";
import {
  ModifyVpcPeeringConnectionOptionsCommandInput,
  ModifyVpcPeeringConnectionOptionsCommandOutput,
} from "../commands/ModifyVpcPeeringConnectionOptionsCommand";
import { ModifyVpcTenancyCommandInput, ModifyVpcTenancyCommandOutput } from "../commands/ModifyVpcTenancyCommand";
import {
  ModifyVpnConnectionCommandInput,
  ModifyVpnConnectionCommandOutput,
} from "../commands/ModifyVpnConnectionCommand";
import {
  ModifyVpnConnectionOptionsCommandInput,
  ModifyVpnConnectionOptionsCommandOutput,
} from "../commands/ModifyVpnConnectionOptionsCommand";
import {
  ModifyVpnTunnelCertificateCommandInput,
  ModifyVpnTunnelCertificateCommandOutput,
} from "../commands/ModifyVpnTunnelCertificateCommand";
import {
  ModifyVpnTunnelOptionsCommandInput,
  ModifyVpnTunnelOptionsCommandOutput,
} from "../commands/ModifyVpnTunnelOptionsCommand";
import { MonitorInstancesCommandInput, MonitorInstancesCommandOutput } from "../commands/MonitorInstancesCommand";
import { MoveAddressToVpcCommandInput, MoveAddressToVpcCommandOutput } from "../commands/MoveAddressToVpcCommand";
import {
  MoveByoipCidrToIpamCommandInput,
  MoveByoipCidrToIpamCommandOutput,
} from "../commands/MoveByoipCidrToIpamCommand";
import { ProvisionByoipCidrCommandInput, ProvisionByoipCidrCommandOutput } from "../commands/ProvisionByoipCidrCommand";
import {
  ProvisionIpamByoasnCommandInput,
  ProvisionIpamByoasnCommandOutput,
} from "../commands/ProvisionIpamByoasnCommand";
import {
  ProvisionIpamPoolCidrCommandInput,
  ProvisionIpamPoolCidrCommandOutput,
} from "../commands/ProvisionIpamPoolCidrCommand";
import {
  ProvisionPublicIpv4PoolCidrCommandInput,
  ProvisionPublicIpv4PoolCidrCommandOutput,
} from "../commands/ProvisionPublicIpv4PoolCidrCommand";
import {
  PurchaseCapacityBlockCommandInput,
  PurchaseCapacityBlockCommandOutput,
} from "../commands/PurchaseCapacityBlockCommand";
import {
  PurchaseHostReservationCommandInput,
  PurchaseHostReservationCommandOutput,
} from "../commands/PurchaseHostReservationCommand";
import {
  PurchaseReservedInstancesOfferingCommandInput,
  PurchaseReservedInstancesOfferingCommandOutput,
} from "../commands/PurchaseReservedInstancesOfferingCommand";
import {
  PurchaseScheduledInstancesCommandInput,
  PurchaseScheduledInstancesCommandOutput,
} from "../commands/PurchaseScheduledInstancesCommand";
import { RebootInstancesCommandInput, RebootInstancesCommandOutput } from "../commands/RebootInstancesCommand";
import { RegisterImageCommandInput, RegisterImageCommandOutput } from "../commands/RegisterImageCommand";
import {
  RegisterInstanceEventNotificationAttributesCommandInput,
  RegisterInstanceEventNotificationAttributesCommandOutput,
} from "../commands/RegisterInstanceEventNotificationAttributesCommand";
import {
  RegisterTransitGatewayMulticastGroupMembersCommandInput,
  RegisterTransitGatewayMulticastGroupMembersCommandOutput,
} from "../commands/RegisterTransitGatewayMulticastGroupMembersCommand";
import {
  RegisterTransitGatewayMulticastGroupSourcesCommandInput,
  RegisterTransitGatewayMulticastGroupSourcesCommandOutput,
} from "../commands/RegisterTransitGatewayMulticastGroupSourcesCommand";
import {
  RejectTransitGatewayMulticastDomainAssociationsCommandInput,
  RejectTransitGatewayMulticastDomainAssociationsCommandOutput,
} from "../commands/RejectTransitGatewayMulticastDomainAssociationsCommand";
import {
  RejectTransitGatewayPeeringAttachmentCommandInput,
  RejectTransitGatewayPeeringAttachmentCommandOutput,
} from "../commands/RejectTransitGatewayPeeringAttachmentCommand";
import {
  RejectTransitGatewayVpcAttachmentCommandInput,
  RejectTransitGatewayVpcAttachmentCommandOutput,
} from "../commands/RejectTransitGatewayVpcAttachmentCommand";
import {
  RejectVpcEndpointConnectionsCommandInput,
  RejectVpcEndpointConnectionsCommandOutput,
} from "../commands/RejectVpcEndpointConnectionsCommand";
import {
  RejectVpcPeeringConnectionCommandInput,
  RejectVpcPeeringConnectionCommandOutput,
} from "../commands/RejectVpcPeeringConnectionCommand";
import { ReleaseAddressCommandInput, ReleaseAddressCommandOutput } from "../commands/ReleaseAddressCommand";
import { ReleaseHostsCommandInput, ReleaseHostsCommandOutput } from "../commands/ReleaseHostsCommand";
import {
  ReleaseIpamPoolAllocationCommandInput,
  ReleaseIpamPoolAllocationCommandOutput,
} from "../commands/ReleaseIpamPoolAllocationCommand";
import {
  ReplaceIamInstanceProfileAssociationCommandInput,
  ReplaceIamInstanceProfileAssociationCommandOutput,
} from "../commands/ReplaceIamInstanceProfileAssociationCommand";
import {
  ReplaceNetworkAclAssociationCommandInput,
  ReplaceNetworkAclAssociationCommandOutput,
} from "../commands/ReplaceNetworkAclAssociationCommand";
import {
  ReplaceNetworkAclEntryCommandInput,
  ReplaceNetworkAclEntryCommandOutput,
} from "../commands/ReplaceNetworkAclEntryCommand";
import { ReplaceRouteCommandInput, ReplaceRouteCommandOutput } from "../commands/ReplaceRouteCommand";
import {
  ReplaceRouteTableAssociationCommandInput,
  ReplaceRouteTableAssociationCommandOutput,
} from "../commands/ReplaceRouteTableAssociationCommand";
import {
  ReplaceTransitGatewayRouteCommandInput,
  ReplaceTransitGatewayRouteCommandOutput,
} from "../commands/ReplaceTransitGatewayRouteCommand";
import { ReplaceVpnTunnelCommandInput, ReplaceVpnTunnelCommandOutput } from "../commands/ReplaceVpnTunnelCommand";
import {
  ReportInstanceStatusCommandInput,
  ReportInstanceStatusCommandOutput,
} from "../commands/ReportInstanceStatusCommand";
import { RequestSpotFleetCommandInput, RequestSpotFleetCommandOutput } from "../commands/RequestSpotFleetCommand";
import {
  RequestSpotInstancesCommandInput,
  RequestSpotInstancesCommandOutput,
} from "../commands/RequestSpotInstancesCommand";
import {
  ResetAddressAttributeCommandInput,
  ResetAddressAttributeCommandOutput,
} from "../commands/ResetAddressAttributeCommand";
import {
  ResetEbsDefaultKmsKeyIdCommandInput,
  ResetEbsDefaultKmsKeyIdCommandOutput,
} from "../commands/ResetEbsDefaultKmsKeyIdCommand";
import {
  ResetFpgaImageAttributeCommandInput,
  ResetFpgaImageAttributeCommandOutput,
} from "../commands/ResetFpgaImageAttributeCommand";
import {
  ResetImageAttributeCommandInput,
  ResetImageAttributeCommandOutput,
} from "../commands/ResetImageAttributeCommand";
import {
  ResetInstanceAttributeCommandInput,
  ResetInstanceAttributeCommandOutput,
} from "../commands/ResetInstanceAttributeCommand";
import {
  ResetNetworkInterfaceAttributeCommandInput,
  ResetNetworkInterfaceAttributeCommandOutput,
} from "../commands/ResetNetworkInterfaceAttributeCommand";
import {
  ResetSnapshotAttributeCommandInput,
  ResetSnapshotAttributeCommandOutput,
} from "../commands/ResetSnapshotAttributeCommand";
import {
  RestoreAddressToClassicCommandInput,
  RestoreAddressToClassicCommandOutput,
} from "../commands/RestoreAddressToClassicCommand";
import {
  RestoreImageFromRecycleBinCommandInput,
  RestoreImageFromRecycleBinCommandOutput,
} from "../commands/RestoreImageFromRecycleBinCommand";
import {
  RestoreManagedPrefixListVersionCommandInput,
  RestoreManagedPrefixListVersionCommandOutput,
} from "../commands/RestoreManagedPrefixListVersionCommand";
import {
  RestoreSnapshotFromRecycleBinCommandInput,
  RestoreSnapshotFromRecycleBinCommandOutput,
} from "../commands/RestoreSnapshotFromRecycleBinCommand";
import {
  RestoreSnapshotTierCommandInput,
  RestoreSnapshotTierCommandOutput,
} from "../commands/RestoreSnapshotTierCommand";
import {
  RevokeClientVpnIngressCommandInput,
  RevokeClientVpnIngressCommandOutput,
} from "../commands/RevokeClientVpnIngressCommand";
import {
  RevokeSecurityGroupEgressCommandInput,
  RevokeSecurityGroupEgressCommandOutput,
} from "../commands/RevokeSecurityGroupEgressCommand";
import {
  RevokeSecurityGroupIngressCommandInput,
  RevokeSecurityGroupIngressCommandOutput,
} from "../commands/RevokeSecurityGroupIngressCommand";
import { RunInstancesCommandInput, RunInstancesCommandOutput } from "../commands/RunInstancesCommand";
import {
  RunScheduledInstancesCommandInput,
  RunScheduledInstancesCommandOutput,
} from "../commands/RunScheduledInstancesCommand";
import {
  SearchLocalGatewayRoutesCommandInput,
  SearchLocalGatewayRoutesCommandOutput,
} from "../commands/SearchLocalGatewayRoutesCommand";
import {
  SearchTransitGatewayMulticastGroupsCommandInput,
  SearchTransitGatewayMulticastGroupsCommandOutput,
} from "../commands/SearchTransitGatewayMulticastGroupsCommand";
import {
  SearchTransitGatewayRoutesCommandInput,
  SearchTransitGatewayRoutesCommandOutput,
} from "../commands/SearchTransitGatewayRoutesCommand";
import {
  SendDiagnosticInterruptCommandInput,
  SendDiagnosticInterruptCommandOutput,
} from "../commands/SendDiagnosticInterruptCommand";
import { StartInstancesCommandInput, StartInstancesCommandOutput } from "../commands/StartInstancesCommand";
import {
  StartNetworkInsightsAccessScopeAnalysisCommandInput,
  StartNetworkInsightsAccessScopeAnalysisCommandOutput,
} from "../commands/StartNetworkInsightsAccessScopeAnalysisCommand";
import {
  StartNetworkInsightsAnalysisCommandInput,
  StartNetworkInsightsAnalysisCommandOutput,
} from "../commands/StartNetworkInsightsAnalysisCommand";
import {
  StartVpcEndpointServicePrivateDnsVerificationCommandInput,
  StartVpcEndpointServicePrivateDnsVerificationCommandOutput,
} from "../commands/StartVpcEndpointServicePrivateDnsVerificationCommand";
import { StopInstancesCommandInput, StopInstancesCommandOutput } from "../commands/StopInstancesCommand";
import {
  TerminateClientVpnConnectionsCommandInput,
  TerminateClientVpnConnectionsCommandOutput,
} from "../commands/TerminateClientVpnConnectionsCommand";
import { TerminateInstancesCommandInput, TerminateInstancesCommandOutput } from "../commands/TerminateInstancesCommand";
import {
  UnassignIpv6AddressesCommandInput,
  UnassignIpv6AddressesCommandOutput,
} from "../commands/UnassignIpv6AddressesCommand";
import {
  UnassignPrivateIpAddressesCommandInput,
  UnassignPrivateIpAddressesCommandOutput,
} from "../commands/UnassignPrivateIpAddressesCommand";
import {
  UnassignPrivateNatGatewayAddressCommandInput,
  UnassignPrivateNatGatewayAddressCommandOutput,
} from "../commands/UnassignPrivateNatGatewayAddressCommand";
import { UnlockSnapshotCommandInput, UnlockSnapshotCommandOutput } from "../commands/UnlockSnapshotCommand";
import { UnmonitorInstancesCommandInput, UnmonitorInstancesCommandOutput } from "../commands/UnmonitorInstancesCommand";
import {
  UpdateSecurityGroupRuleDescriptionsEgressCommandInput,
  UpdateSecurityGroupRuleDescriptionsEgressCommandOutput,
} from "../commands/UpdateSecurityGroupRuleDescriptionsEgressCommand";
import {
  UpdateSecurityGroupRuleDescriptionsIngressCommandInput,
  UpdateSecurityGroupRuleDescriptionsIngressCommandOutput,
} from "../commands/UpdateSecurityGroupRuleDescriptionsIngressCommand";
import { WithdrawByoipCidrCommandInput, WithdrawByoipCidrCommandOutput } from "../commands/WithdrawByoipCidrCommand";
import { EC2ServiceException as __BaseException } from "../models/EC2ServiceException";
import {
  _InstanceType,
  AcceleratorCount,
  AcceleratorCountRequest,
  AcceleratorManufacturer,
  AcceleratorName,
  AcceleratorTotalMemoryMiB,
  AcceleratorTotalMemoryMiBRequest,
  AcceleratorType,
  AcceptAddressTransferRequest,
  AcceptAddressTransferResult,
  AcceptReservedInstancesExchangeQuoteRequest,
  AcceptReservedInstancesExchangeQuoteResult,
  AcceptTransitGatewayMulticastDomainAssociationsRequest,
  AcceptTransitGatewayMulticastDomainAssociationsResult,
  AcceptTransitGatewayPeeringAttachmentRequest,
  AcceptTransitGatewayPeeringAttachmentResult,
  AcceptTransitGatewayVpcAttachmentRequest,
  AcceptTransitGatewayVpcAttachmentResult,
  AcceptVpcEndpointConnectionsRequest,
  AcceptVpcEndpointConnectionsResult,
  AcceptVpcPeeringConnectionRequest,
  AcceptVpcPeeringConnectionResult,
  AccessScopeAnalysisFinding,
  AccessScopePath,
  AccessScopePathRequest,
  AccountAttribute,
  AccountAttributeName,
  AccountAttributeValue,
  ActiveInstance,
  AddedPrincipal,
  AddIpamOperatingRegion,
  AdditionalDetail,
  AddPrefixListEntry,
  Address,
  AddressAttribute,
  AddressTransfer,
  AdvertiseByoipCidrRequest,
  AdvertiseByoipCidrResult,
  AllocateAddressRequest,
  AllocateAddressResult,
  AllocateHostsRequest,
  AllocateHostsResult,
  AllocateIpamPoolCidrRequest,
  AllocateIpamPoolCidrResult,
  AllowedPrincipal,
  AlternatePathHint,
  AnalysisAclRule,
  AnalysisComponent,
  AnalysisLoadBalancerListener,
  AnalysisLoadBalancerTarget,
  AnalysisPacketHeader,
  AnalysisRouteTableRoute,
  AnalysisSecurityGroupRule,
  ApplySecurityGroupsToClientVpnTargetNetworkRequest,
  ApplySecurityGroupsToClientVpnTargetNetworkResult,
  AsnAssociation,
  AssignedPrivateIpAddress,
  AssignIpv6AddressesRequest,
  AssignIpv6AddressesResult,
  AssignPrivateIpAddressesRequest,
  AssignPrivateIpAddressesResult,
  AssignPrivateNatGatewayAddressRequest,
  AssignPrivateNatGatewayAddressResult,
  AssociateAddressRequest,
  AssociateAddressResult,
  AssociateClientVpnTargetNetworkRequest,
  AssociateClientVpnTargetNetworkResult,
  AssociateDhcpOptionsRequest,
  AssociateEnclaveCertificateIamRoleRequest,
  AssociateEnclaveCertificateIamRoleResult,
  AssociateIamInstanceProfileRequest,
  AssociateIamInstanceProfileResult,
  AssociateInstanceEventWindowRequest,
  AssociateInstanceEventWindowResult,
  AssociateIpamByoasnRequest,
  AssociateIpamByoasnResult,
  AssociateIpamResourceDiscoveryRequest,
  AssociateIpamResourceDiscoveryResult,
  AssociateNatGatewayAddressRequest,
  AssociateNatGatewayAddressResult,
  AssociateRouteTableRequest,
  AssociateRouteTableResult,
  AssociateSubnetCidrBlockRequest,
  AssociateSubnetCidrBlockResult,
  AssociateTransitGatewayMulticastDomainRequest,
  AssociateTransitGatewayMulticastDomainResult,
  AssociateTransitGatewayPolicyTableRequest,
  AssociateTransitGatewayPolicyTableResult,
  AssociateTransitGatewayRouteTableRequest,
  AssociateTransitGatewayRouteTableResult,
  AssociateTrunkInterfaceRequest,
  AssociateTrunkInterfaceResult,
  AssociateVpcCidrBlockRequest,
  AssociateVpcCidrBlockResult,
  AssociationStatus,
  AttachClassicLinkVpcRequest,
  AttachClassicLinkVpcResult,
  AttachInternetGatewayRequest,
  AttachNetworkInterfaceRequest,
  AttachNetworkInterfaceResult,
  AttachVerifiedAccessTrustProviderRequest,
  AttachVerifiedAccessTrustProviderResult,
  AttachVolumeRequest,
  AttachVpnGatewayRequest,
  AttachVpnGatewayResult,
  AuthorizeClientVpnIngressRequest,
  AuthorizeClientVpnIngressResult,
  AuthorizeSecurityGroupEgressRequest,
  AuthorizeSecurityGroupEgressResult,
  AuthorizeSecurityGroupIngressRequest,
  AuthorizeSecurityGroupIngressResult,
  BundleInstanceRequest,
  BundleInstanceResult,
  BundleTask,
  BundleTaskError,
  ByoipCidr,
  CancelBundleTaskRequest,
  CancelBundleTaskResult,
  CancelCapacityReservationFleetError,
  CancelCapacityReservationFleetsRequest,
  CancelCapacityReservationFleetsResult,
  CancelCapacityReservationRequest,
  CancelCapacityReservationResult,
  CancelConversionRequest,
  CancelExportTaskRequest,
  CancelImageLaunchPermissionRequest,
  CancelImageLaunchPermissionResult,
  CancelImportTaskRequest,
  CancelImportTaskResult,
  CancelledSpotInstanceRequest,
  CancelReservedInstancesListingRequest,
  CancelReservedInstancesListingResult,
  CancelSpotFleetRequestsError,
  CancelSpotFleetRequestsErrorItem,
  CancelSpotFleetRequestsRequest,
  CancelSpotFleetRequestsResponse,
  CancelSpotFleetRequestsSuccessItem,
  CancelSpotInstanceRequestsRequest,
  CancelSpotInstanceRequestsResult,
  CapacityAllocation,
  CapacityReservation,
  CapacityReservationFleetCancellationState,
  CidrBlock,
  ClientVpnAuthorizationRuleStatus,
  ConfirmProductInstanceRequest,
  ConfirmProductInstanceResult,
  CopyFpgaImageRequest,
  CopyFpgaImageResult,
  CopyImageRequest,
  CopyImageResult,
  CopySnapshotRequest,
  CopySnapshotResult,
  CreateCapacityReservationFleetRequest,
  CreateCapacityReservationFleetResult,
  CreateCapacityReservationRequest,
  CreateCapacityReservationResult,
  DeviceOptions,
  EnaSrdSpecification,
  EnaSrdUdpSpecification,
  Explanation,
  FailedCapacityReservationFleetCancellationResult,
  FirewallStatefulRule,
  FirewallStatelessRule,
  FleetCapacityReservation,
  IamInstanceProfile,
  IamInstanceProfileAssociation,
  IamInstanceProfileSpecification,
  InstanceCount,
  InstanceEventWindow,
  InstanceEventWindowAssociationRequest,
  InstanceEventWindowAssociationTarget,
  InstanceEventWindowTimeRange,
  IpamPoolAllocation,
  IpamResourceDiscoveryAssociation,
  IpPermission,
  IpRange,
  Ipv4PrefixSpecification,
  Ipv6CidrBlock,
  Ipv6Range,
  NatGatewayAddress,
  OidcOptions,
  PacketHeaderStatement,
  PacketHeaderStatementRequest,
  PathComponent,
  PathStatement,
  PathStatementRequest,
  PeeringAttachmentStatus,
  PeeringTgwInfo,
  PortRange,
  PrefixListId,
  PriceSchedule,
  Protocol,
  PtrUpdateStatus,
  ReferencedSecurityGroup,
  ReservationFleetInstanceSpecification,
  ReservedInstancesListing,
  ResourceStatement,
  ResourceStatementRequest,
  RouteTableAssociationState,
  RuleGroupRuleOptionsPair,
  RuleGroupTypePair,
  RuleOption,
  S3Storage,
  SecurityGroupRule,
  Storage,
  SubnetAssociation,
  SubnetCidrBlockState,
  SubnetIpv6CidrBlockAssociation,
  Tag,
  TagSpecification,
  TargetConfigurationRequest,
  ThroughResourcesStatement,
  ThroughResourcesStatementRequest,
  TransitGatewayAssociation,
  TransitGatewayMulticastDomainAssociations,
  TransitGatewayPeeringAttachment,
  TransitGatewayPeeringAttachmentOptions,
  TransitGatewayPolicyTableAssociation,
  TransitGatewayRouteTableRoute,
  TransitGatewayVpcAttachment,
  TransitGatewayVpcAttachmentOptions,
  TrunkInterfaceAssociation,
  UnsuccessfulItem,
  UnsuccessfulItemError,
  UserIdGroupPair,
  VerifiedAccessInstance,
  VerifiedAccessSseSpecificationResponse,
  VerifiedAccessTrustProvider,
  VerifiedAccessTrustProviderCondensed,
  VolumeAttachment,
  VpcAttachment,
  VpcCidrBlockAssociation,
  VpcCidrBlockState,
  VpcIpv6CidrBlockAssociation,
  VpcPeeringConnection,
  VpcPeeringConnectionOptionsDescription,
  VpcPeeringConnectionStateReason,
  VpcPeeringConnectionVpcInfo,
} from "../models/models_0";
import {
  AttachmentEnaSrdSpecification,
  AttachmentEnaSrdUdpSpecification,
  AttributeValue,
  BaselineEbsBandwidthMbps,
  BaselineEbsBandwidthMbpsRequest,
  BlockDeviceMapping,
  CapacityReservationOptionsRequest,
  CapacityReservationTarget,
  CapacityReservationTargetResponse,
  CarrierGateway,
  CertificateAuthenticationRequest,
  ClientConnectOptions,
  ClientLoginBannerOptions,
  ClientVpnAuthenticationRequest,
  ClientVpnEndpointStatus,
  ClientVpnRouteStatus,
  CoipCidr,
  CoipPool,
  ConnectionLogOptions,
  ConnectionTrackingConfiguration,
  ConnectionTrackingSpecification,
  ConnectionTrackingSpecificationRequest,
  CpuManufacturer,
  CreateCarrierGatewayRequest,
  CreateCarrierGatewayResult,
  CreateClientVpnEndpointRequest,
  CreateClientVpnEndpointResult,
  CreateClientVpnRouteRequest,
  CreateClientVpnRouteResult,
  CreateCoipCidrRequest,
  CreateCoipCidrResult,
  CreateCoipPoolRequest,
  CreateCoipPoolResult,
  CreateCustomerGatewayRequest,
  CreateCustomerGatewayResult,
  CreateDefaultSubnetRequest,
  CreateDefaultSubnetResult,
  CreateDefaultVpcRequest,
  CreateDefaultVpcResult,
  CreateDhcpOptionsRequest,
  CreateDhcpOptionsResult,
  CreateEgressOnlyInternetGatewayRequest,
  CreateEgressOnlyInternetGatewayResult,
  CreateFleetError,
  CreateFleetInstance,
  CreateFleetRequest,
  CreateFleetResult,
  CreateFlowLogsRequest,
  CreateFlowLogsResult,
  CreateFpgaImageRequest,
  CreateFpgaImageResult,
  CreateImageRequest,
  CreateImageResult,
  CreateInstanceConnectEndpointRequest,
  CreateInstanceConnectEndpointResult,
  CreateInstanceEventWindowRequest,
  CreateInstanceEventWindowResult,
  CreateInstanceExportTaskRequest,
  CreateInstanceExportTaskResult,
  CreateInternetGatewayRequest,
  CreateInternetGatewayResult,
  CreateIpamPoolRequest,
  CreateIpamPoolResult,
  CreateIpamRequest,
  CreateIpamResourceDiscoveryRequest,
  CreateIpamResourceDiscoveryResult,
  CreateIpamResult,
  CreateIpamScopeRequest,
  CreateIpamScopeResult,
  CreateKeyPairRequest,
  CreateLaunchTemplateRequest,
  CreateLaunchTemplateResult,
  CreateLaunchTemplateVersionRequest,
  CreateLaunchTemplateVersionResult,
  CreateLocalGatewayRouteRequest,
  CreateLocalGatewayRouteResult,
  CreateLocalGatewayRouteTableRequest,
  CreateLocalGatewayRouteTableResult,
  CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest,
  CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult,
  CreateLocalGatewayRouteTableVpcAssociationRequest,
  CreateLocalGatewayRouteTableVpcAssociationResult,
  CreateManagedPrefixListRequest,
  CreateManagedPrefixListResult,
  CreateNatGatewayRequest,
  CreateNatGatewayResult,
  CreateNetworkAclEntryRequest,
  CreateNetworkAclRequest,
  CreateNetworkAclResult,
  CreateNetworkInsightsAccessScopeRequest,
  CreateNetworkInsightsAccessScopeResult,
  CreateNetworkInsightsPathRequest,
  CreateNetworkInsightsPathResult,
  CreateNetworkInterfaceRequest,
  CreditSpecification,
  CreditSpecificationRequest,
  CustomerGateway,
  DestinationOptionsRequest,
  DhcpConfiguration,
  DhcpOptions,
  DirectoryServiceAuthenticationRequest,
  EbsBlockDevice,
  Ec2InstanceConnectEndpoint,
  EgressOnlyInternetGateway,
  ElasticGpuSpecification,
  ElasticGpuSpecificationResponse,
  EnaSrdSpecificationRequest,
  EnaSrdUdpSpecificationRequest,
  ExportTask,
  ExportToS3Task,
  ExportToS3TaskSpecification,
  FederatedAuthenticationRequest,
  FilterPortRange,
  FleetLaunchTemplateConfigRequest,
  FleetLaunchTemplateOverrides,
  FleetLaunchTemplateOverridesRequest,
  FleetLaunchTemplateSpecification,
  FleetLaunchTemplateSpecificationRequest,
  FleetSpotCapacityRebalanceRequest,
  FleetSpotMaintenanceStrategiesRequest,
  GroupIdentifier,
  IcmpTypeCode,
  InstanceEventWindowTimeRangeRequest,
  InstanceExportDetails,
  InstanceGeneration,
  InstanceIpv6Address,
  InstanceIpv6AddressRequest,
  InstanceRequirements,
  InstanceRequirementsRequest,
  InternetGateway,
  InternetGatewayAttachment,
  Ipam,
  IpamOperatingRegion,
  IpamPool,
  IpamPoolSourceResource,
  IpamPoolSourceResourceRequest,
  IpamResourceDiscovery,
  IpamResourceTag,
  IpamScope,
  Ipv4PrefixSpecificationRequest,
  Ipv4PrefixSpecificationResponse,
  Ipv6PrefixSpecificationRequest,
  Ipv6PrefixSpecificationResponse,
  KeyPair,
  LaunchTemplate,
  LaunchTemplateAndOverridesResponse,
  LaunchTemplateBlockDeviceMapping,
  LaunchTemplateBlockDeviceMappingRequest,
  LaunchTemplateCapacityReservationSpecificationRequest,
  LaunchTemplateCapacityReservationSpecificationResponse,
  LaunchTemplateCpuOptions,
  LaunchTemplateCpuOptionsRequest,
  LaunchTemplateEbsBlockDevice,
  LaunchTemplateEbsBlockDeviceRequest,
  LaunchTemplateElasticInferenceAccelerator,
  LaunchTemplateElasticInferenceAcceleratorResponse,
  LaunchTemplateEnaSrdSpecification,
  LaunchTemplateEnaSrdUdpSpecification,
  LaunchTemplateEnclaveOptions,
  LaunchTemplateEnclaveOptionsRequest,
  LaunchTemplateHibernationOptions,
  LaunchTemplateHibernationOptionsRequest,
  LaunchTemplateIamInstanceProfileSpecification,
  LaunchTemplateIamInstanceProfileSpecificationRequest,
  LaunchTemplateInstanceMaintenanceOptions,
  LaunchTemplateInstanceMaintenanceOptionsRequest,
  LaunchTemplateInstanceMarketOptions,
  LaunchTemplateInstanceMarketOptionsRequest,
  LaunchTemplateInstanceMetadataOptions,
  LaunchTemplateInstanceMetadataOptionsRequest,
  LaunchTemplateInstanceNetworkInterfaceSpecification,
  LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
  LaunchTemplateLicenseConfiguration,
  LaunchTemplateLicenseConfigurationRequest,
  LaunchTemplatePlacement,
  LaunchTemplatePlacementRequest,
  LaunchTemplatePrivateDnsNameOptions,
  LaunchTemplatePrivateDnsNameOptionsRequest,
  LaunchTemplatesMonitoring,
  LaunchTemplatesMonitoringRequest,
  LaunchTemplateSpotMarketOptions,
  LaunchTemplateSpotMarketOptionsRequest,
  LaunchTemplateTagSpecification,
  LaunchTemplateTagSpecificationRequest,
  LaunchTemplateVersion,
  LocalGatewayRoute,
  LocalGatewayRouteTable,
  LocalGatewayRouteTableVirtualInterfaceGroupAssociation,
  LocalGatewayRouteTableVpcAssociation,
  LocalStorageType,
  ManagedPrefixList,
  MemoryGiBPerVCpu,
  MemoryGiBPerVCpuRequest,
  MemoryMiB,
  MemoryMiBRequest,
  NatGateway,
  NetworkAcl,
  NetworkAclAssociation,
  NetworkAclEntry,
  NetworkBandwidthGbps,
  NetworkBandwidthGbpsRequest,
  NetworkInsightsAccessScope,
  NetworkInsightsAccessScopeContent,
  NetworkInsightsPath,
  NetworkInterfaceAssociation,
  NetworkInterfaceAttachment,
  NetworkInterfaceCount,
  NetworkInterfaceCountRequest,
  NewDhcpConfiguration,
  OnDemandOptionsRequest,
  PathFilter,
  PathRequestFilter,
  Placement,
  PlacementResponse,
  PrivateDnsNameOptionsOnLaunch,
  PrivateIpAddressSpecification,
  ProvisionedBandwidth,
  RequestFilterPortRange,
  RequestIpamResourceTag,
  RequestLaunchTemplateData,
  ResponseLaunchTemplateData,
  SpotOptionsRequest,
  StateReason,
  StorageLocation,
  Subnet,
  TargetCapacitySpecificationRequest,
  TotalLocalStorageGB,
  TotalLocalStorageGBRequest,
  ValidationError,
  ValidationWarning,
  VCpuCountRange,
  VCpuCountRangeRequest,
  Vpc,
} from "../models/models_1";
import {
  CloudWatchLogOptions,
  CloudWatchLogOptionsSpecification,
  ConnectionNotification,
  CreateNetworkInterfacePermissionRequest,
  CreateNetworkInterfacePermissionResult,
  CreateNetworkInterfaceResult,
  CreatePlacementGroupRequest,
  CreatePlacementGroupResult,
  CreatePublicIpv4PoolRequest,
  CreatePublicIpv4PoolResult,
  CreateReplaceRootVolumeTaskRequest,
  CreateReplaceRootVolumeTaskResult,
  CreateReservedInstancesListingRequest,
  CreateReservedInstancesListingResult,
  CreateRestoreImageTaskRequest,
  CreateRestoreImageTaskResult,
  CreateRouteRequest,
  CreateRouteResult,
  CreateRouteTableRequest,
  CreateRouteTableResult,
  CreateSecurityGroupRequest,
  CreateSecurityGroupResult,
  CreateSnapshotRequest,
  CreateSnapshotsRequest,
  CreateSnapshotsResult,
  CreateSpotDatafeedSubscriptionRequest,
  CreateSpotDatafeedSubscriptionResult,
  CreateStoreImageTaskRequest,
  CreateStoreImageTaskResult,
  CreateSubnetCidrReservationRequest,
  CreateSubnetCidrReservationResult,
  CreateSubnetRequest,
  CreateSubnetResult,
  CreateTagsRequest,
  CreateTrafficMirrorFilterRequest,
  CreateTrafficMirrorFilterResult,
  CreateTrafficMirrorFilterRuleRequest,
  CreateTrafficMirrorFilterRuleResult,
  CreateTrafficMirrorSessionRequest,
  CreateTrafficMirrorSessionResult,
  CreateTrafficMirrorTargetRequest,
  CreateTrafficMirrorTargetResult,
  CreateTransitGatewayConnectPeerRequest,
  CreateTransitGatewayConnectPeerResult,
  CreateTransitGatewayConnectRequest,
  CreateTransitGatewayConnectRequestOptions,
  CreateTransitGatewayConnectResult,
  CreateTransitGatewayMulticastDomainRequest,
  CreateTransitGatewayMulticastDomainRequestOptions,
  CreateTransitGatewayMulticastDomainResult,
  CreateTransitGatewayPeeringAttachmentRequest,
  CreateTransitGatewayPeeringAttachmentRequestOptions,
  CreateTransitGatewayPeeringAttachmentResult,
  CreateTransitGatewayPolicyTableRequest,
  CreateTransitGatewayPolicyTableResult,
  CreateTransitGatewayPrefixListReferenceRequest,
  CreateTransitGatewayPrefixListReferenceResult,
  CreateTransitGatewayRequest,
  CreateTransitGatewayResult,
  CreateTransitGatewayRouteRequest,
  CreateTransitGatewayRouteResult,
  CreateTransitGatewayRouteTableAnnouncementRequest,
  CreateTransitGatewayRouteTableAnnouncementResult,
  CreateTransitGatewayRouteTableRequest,
  CreateTransitGatewayRouteTableResult,
  CreateTransitGatewayVpcAttachmentRequest,
  CreateTransitGatewayVpcAttachmentRequestOptions,
  CreateTransitGatewayVpcAttachmentResult,
  CreateVerifiedAccessEndpointEniOptions,
  CreateVerifiedAccessEndpointLoadBalancerOptions,
  CreateVerifiedAccessEndpointRequest,
  CreateVerifiedAccessEndpointResult,
  CreateVerifiedAccessGroupRequest,
  CreateVerifiedAccessGroupResult,
  CreateVerifiedAccessInstanceRequest,
  CreateVerifiedAccessInstanceResult,
  CreateVerifiedAccessTrustProviderDeviceOptions,
  CreateVerifiedAccessTrustProviderOidcOptions,
  CreateVerifiedAccessTrustProviderRequest,
  CreateVerifiedAccessTrustProviderResult,
  CreateVolumeRequest,
  CreateVpcEndpointConnectionNotificationRequest,
  CreateVpcEndpointConnectionNotificationResult,
  CreateVpcEndpointRequest,
  CreateVpcEndpointResult,
  CreateVpcEndpointServiceConfigurationRequest,
  CreateVpcEndpointServiceConfigurationResult,
  CreateVpcPeeringConnectionRequest,
  CreateVpcPeeringConnectionResult,
  CreateVpcRequest,
  CreateVpcResult,
  CreateVpnConnectionRequest,
  CreateVpnConnectionResult,
  CreateVpnConnectionRouteRequest,
  CreateVpnGatewayRequest,
  CreateVpnGatewayResult,
  DeleteCarrierGatewayRequest,
  DeleteCarrierGatewayResult,
  DeleteClientVpnEndpointRequest,
  DeleteClientVpnEndpointResult,
  DeleteClientVpnRouteRequest,
  DeleteClientVpnRouteResult,
  DeleteCoipCidrRequest,
  DeleteCoipCidrResult,
  DeleteCoipPoolRequest,
  DeleteCoipPoolResult,
  DeleteCustomerGatewayRequest,
  DeleteDhcpOptionsRequest,
  DeleteEgressOnlyInternetGatewayRequest,
  DeleteEgressOnlyInternetGatewayResult,
  DeleteFleetError,
  DeleteFleetErrorItem,
  DeleteFleetsRequest,
  DeleteFleetsResult,
  DeleteFleetSuccessItem,
  DeleteFlowLogsRequest,
  DeleteFlowLogsResult,
  DeleteFpgaImageRequest,
  DeleteFpgaImageResult,
  DeleteInstanceConnectEndpointRequest,
  DeleteInstanceConnectEndpointResult,
  DeleteInstanceEventWindowRequest,
  DeleteInstanceEventWindowResult,
  DeleteInternetGatewayRequest,
  DeleteIpamPoolRequest,
  DeleteIpamPoolResult,
  DeleteIpamRequest,
  DeleteIpamResourceDiscoveryRequest,
  DeleteIpamResourceDiscoveryResult,
  DeleteIpamResult,
  DeleteIpamScopeRequest,
  DeleteIpamScopeResult,
  DeleteKeyPairRequest,
  DeleteKeyPairResult,
  DeleteLaunchTemplateRequest,
  DeleteLaunchTemplateResult,
  DeleteLaunchTemplateVersionsRequest,
  DeleteLaunchTemplateVersionsResponseErrorItem,
  DeleteLaunchTemplateVersionsResponseSuccessItem,
  DeleteLaunchTemplateVersionsResult,
  DeleteLocalGatewayRouteRequest,
  DeleteLocalGatewayRouteResult,
  DeleteLocalGatewayRouteTableRequest,
  DeleteLocalGatewayRouteTableResult,
  DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest,
  DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult,
  DeleteLocalGatewayRouteTableVpcAssociationRequest,
  DeleteLocalGatewayRouteTableVpcAssociationResult,
  DeleteManagedPrefixListRequest,
  DeleteManagedPrefixListResult,
  DnsEntry,
  DnsOptions,
  DnsOptionsSpecification,
  IKEVersionsListValue,
  IKEVersionsRequestListValue,
  InstanceEventWindowStateChange,
  InstanceSpecification,
  Ipv6PrefixSpecification,
  LastError,
  NetworkInterface,
  NetworkInterfaceIpv6Address,
  NetworkInterfacePermission,
  NetworkInterfacePermissionState,
  NetworkInterfacePrivateIpAddress,
  Phase1DHGroupNumbersListValue,
  Phase1DHGroupNumbersRequestListValue,
  Phase1EncryptionAlgorithmsListValue,
  Phase1EncryptionAlgorithmsRequestListValue,
  Phase1IntegrityAlgorithmsListValue,
  Phase1IntegrityAlgorithmsRequestListValue,
  Phase2DHGroupNumbersListValue,
  Phase2DHGroupNumbersRequestListValue,
  Phase2EncryptionAlgorithmsListValue,
  Phase2EncryptionAlgorithmsRequestListValue,
  Phase2IntegrityAlgorithmsListValue,
  Phase2IntegrityAlgorithmsRequestListValue,
  PlacementGroup,
  PriceScheduleSpecification,
  PrivateDnsNameConfiguration,
  PropagatingVgw,
  ReplaceRootVolumeTask,
  ResponseError,
  Route,
  RouteTable,
  RouteTableAssociation,
  S3ObjectTag,
  SecurityGroupIdentifier,
  ServiceConfiguration,
  ServiceConnectivityType,
  ServiceTypeDetail,
  Snapshot,
  SnapshotInfo,
  SpotDatafeedSubscription,
  SpotInstanceStateFault,
  SubnetCidrReservation,
  SubnetConfiguration,
  TrafficMirrorFilter,
  TrafficMirrorFilterRule,
  TrafficMirrorNetworkService,
  TrafficMirrorPortRange,
  TrafficMirrorPortRangeRequest,
  TrafficMirrorSession,
  TrafficMirrorTarget,
  TransitGateway,
  TransitGatewayAttachmentBgpConfiguration,
  TransitGatewayConnect,
  TransitGatewayConnectOptions,
  TransitGatewayConnectPeer,
  TransitGatewayConnectPeerConfiguration,
  TransitGatewayConnectRequestBgpOptions,
  TransitGatewayMulticastDomain,
  TransitGatewayMulticastDomainOptions,
  TransitGatewayOptions,
  TransitGatewayPolicyTable,
  TransitGatewayPrefixListAttachment,
  TransitGatewayPrefixListReference,
  TransitGatewayRequestOptions,
  TransitGatewayRoute,
  TransitGatewayRouteAttachment,
  TransitGatewayRouteTable,
  TransitGatewayRouteTableAnnouncement,
  TunnelOption,
  VerifiedAccessEndpoint,
  VerifiedAccessEndpointEniOptions,
  VerifiedAccessEndpointLoadBalancerOptions,
  VerifiedAccessEndpointStatus,
  VerifiedAccessGroup,
  VerifiedAccessSseSpecificationRequest,
  VgwTelemetry,
  Volume,
  VpcEndpoint,
  VpnConnection,
  VpnConnectionOptions,
  VpnConnectionOptionsSpecification,
  VpnGateway,
  VpnStaticRoute,
  VpnTunnelLogOptions,
  VpnTunnelLogOptionsSpecification,
  VpnTunnelOptionsSpecification,
} from "../models/models_2";
import {
  AssociatedTargetNetwork,
  AuthorizationRule,
  AvailabilityZone,
  AvailabilityZoneMessage,
  AvailableCapacity,
  Byoasn,
  CapacityBlockOffering,
  CapacityReservationFleet,
  CapacityReservationOptions,
  CertificateAuthentication,
  ClassicLinkInstance,
  ClientConnectResponseOptions,
  ClientLoginBannerResponseOptions,
  ClientVpnAuthentication,
  ClientVpnConnection,
  ClientVpnConnectionStatus,
  ClientVpnEndpoint,
  ClientVpnEndpointAttributeStatus,
  ClientVpnRoute,
  ConnectionLogResponseOptions,
  ConversionTask,
  DeleteNatGatewayRequest,
  DeleteNatGatewayResult,
  DeleteNetworkAclEntryRequest,
  DeleteNetworkAclRequest,
  DeleteNetworkInsightsAccessScopeAnalysisRequest,
  DeleteNetworkInsightsAccessScopeAnalysisResult,
  DeleteNetworkInsightsAccessScopeRequest,
  DeleteNetworkInsightsAccessScopeResult,
  DeleteNetworkInsightsAnalysisRequest,
  DeleteNetworkInsightsAnalysisResult,
  DeleteNetworkInsightsPathRequest,
  DeleteNetworkInsightsPathResult,
  DeleteNetworkInterfacePermissionRequest,
  DeleteNetworkInterfacePermissionResult,
  DeleteNetworkInterfaceRequest,
  DeletePlacementGroupRequest,
  DeletePublicIpv4PoolRequest,
  DeletePublicIpv4PoolResult,
  DeleteQueuedReservedInstancesError,
  DeleteQueuedReservedInstancesRequest,
  DeleteQueuedReservedInstancesResult,
  DeleteRouteRequest,
  DeleteRouteTableRequest,
  DeleteSecurityGroupRequest,
  DeleteSnapshotRequest,
  DeleteSpotDatafeedSubscriptionRequest,
  DeleteSubnetCidrReservationRequest,
  DeleteSubnetCidrReservationResult,
  DeleteSubnetRequest,
  DeleteTagsRequest,
  DeleteTrafficMirrorFilterRequest,
  DeleteTrafficMirrorFilterResult,
  DeleteTrafficMirrorFilterRuleRequest,
  DeleteTrafficMirrorFilterRuleResult,
  DeleteTrafficMirrorSessionRequest,
  DeleteTrafficMirrorSessionResult,
  DeleteTrafficMirrorTargetRequest,
  DeleteTrafficMirrorTargetResult,
  DeleteTransitGatewayConnectPeerRequest,
  DeleteTransitGatewayConnectPeerResult,
  DeleteTransitGatewayConnectRequest,
  DeleteTransitGatewayConnectResult,
  DeleteTransitGatewayMulticastDomainRequest,
  DeleteTransitGatewayMulticastDomainResult,
  DeleteTransitGatewayPeeringAttachmentRequest,
  DeleteTransitGatewayPeeringAttachmentResult,
  DeleteTransitGatewayPolicyTableRequest,
  DeleteTransitGatewayPolicyTableResult,
  DeleteTransitGatewayPrefixListReferenceRequest,
  DeleteTransitGatewayPrefixListReferenceResult,
  DeleteTransitGatewayRequest,
  DeleteTransitGatewayResult,
  DeleteTransitGatewayRouteRequest,
  DeleteTransitGatewayRouteResult,
  DeleteTransitGatewayRouteTableAnnouncementRequest,
  DeleteTransitGatewayRouteTableAnnouncementResult,
  DeleteTransitGatewayRouteTableRequest,
  DeleteTransitGatewayRouteTableResult,
  DeleteTransitGatewayVpcAttachmentRequest,
  DeleteTransitGatewayVpcAttachmentResult,
  DeleteVerifiedAccessEndpointRequest,
  DeleteVerifiedAccessEndpointResult,
  DeleteVerifiedAccessGroupRequest,
  DeleteVerifiedAccessGroupResult,
  DeleteVerifiedAccessInstanceRequest,
  DeleteVerifiedAccessInstanceResult,
  DeleteVerifiedAccessTrustProviderRequest,
  DeleteVerifiedAccessTrustProviderResult,
  DeleteVolumeRequest,
  DeleteVpcEndpointConnectionNotificationsRequest,
  DeleteVpcEndpointConnectionNotificationsResult,
  DeleteVpcEndpointServiceConfigurationsRequest,
  DeleteVpcEndpointServiceConfigurationsResult,
  DeleteVpcEndpointsRequest,
  DeleteVpcEndpointsResult,
  DeleteVpcPeeringConnectionRequest,
  DeleteVpcPeeringConnectionResult,
  DeleteVpcRequest,
  DeleteVpnConnectionRequest,
  DeleteVpnConnectionRouteRequest,
  DeleteVpnGatewayRequest,
  DeprovisionByoipCidrRequest,
  DeprovisionByoipCidrResult,
  DeprovisionIpamByoasnRequest,
  DeprovisionIpamByoasnResult,
  DeprovisionIpamPoolCidrRequest,
  DeprovisionIpamPoolCidrResult,
  DeprovisionPublicIpv4PoolCidrRequest,
  DeprovisionPublicIpv4PoolCidrResult,
  DeregisterImageRequest,
  DeregisterInstanceEventNotificationAttributesRequest,
  DeregisterInstanceEventNotificationAttributesResult,
  DeregisterInstanceTagAttributeRequest,
  DeregisterTransitGatewayMulticastGroupMembersRequest,
  DeregisterTransitGatewayMulticastGroupMembersResult,
  DeregisterTransitGatewayMulticastGroupSourcesRequest,
  DeregisterTransitGatewayMulticastGroupSourcesResult,
  DescribeAccountAttributesRequest,
  DescribeAccountAttributesResult,
  DescribeAddressesAttributeRequest,
  DescribeAddressesAttributeResult,
  DescribeAddressesRequest,
  DescribeAddressesResult,
  DescribeAddressTransfersRequest,
  DescribeAddressTransfersResult,
  DescribeAggregateIdFormatRequest,
  DescribeAggregateIdFormatResult,
  DescribeAvailabilityZonesRequest,
  DescribeAvailabilityZonesResult,
  DescribeAwsNetworkPerformanceMetricSubscriptionsRequest,
  DescribeAwsNetworkPerformanceMetricSubscriptionsResult,
  DescribeBundleTasksRequest,
  DescribeBundleTasksResult,
  DescribeByoipCidrsRequest,
  DescribeByoipCidrsResult,
  DescribeCapacityBlockOfferingsRequest,
  DescribeCapacityBlockOfferingsResult,
  DescribeCapacityReservationFleetsRequest,
  DescribeCapacityReservationFleetsResult,
  DescribeCapacityReservationsRequest,
  DescribeCapacityReservationsResult,
  DescribeCarrierGatewaysRequest,
  DescribeCarrierGatewaysResult,
  DescribeClassicLinkInstancesRequest,
  DescribeClassicLinkInstancesResult,
  DescribeClientVpnAuthorizationRulesRequest,
  DescribeClientVpnAuthorizationRulesResult,
  DescribeClientVpnConnectionsRequest,
  DescribeClientVpnConnectionsResult,
  DescribeClientVpnEndpointsRequest,
  DescribeClientVpnEndpointsResult,
  DescribeClientVpnRoutesRequest,
  DescribeClientVpnRoutesResult,
  DescribeClientVpnTargetNetworksRequest,
  DescribeClientVpnTargetNetworksResult,
  DescribeCoipPoolsRequest,
  DescribeCoipPoolsResult,
  DescribeConversionTasksRequest,
  DescribeConversionTasksResult,
  DescribeCustomerGatewaysRequest,
  DescribeCustomerGatewaysResult,
  DescribeDhcpOptionsRequest,
  DescribeDhcpOptionsResult,
  DescribeEgressOnlyInternetGatewaysRequest,
  DescribeEgressOnlyInternetGatewaysResult,
  DescribeElasticGpusRequest,
  DescribeElasticGpusResult,
  DescribeExportImageTasksRequest,
  DescribeExportImageTasksResult,
  DescribeExportTasksRequest,
  DescribeExportTasksResult,
  DescribeFastLaunchImagesRequest,
  DescribeFastLaunchImagesResult,
  DescribeFastLaunchImagesSuccessItem,
  DescribeFastSnapshotRestoresRequest,
  DescribeFastSnapshotRestoresResult,
  DescribeFastSnapshotRestoreSuccessItem,
  DescribeFleetError,
  DescribeFleetHistoryRequest,
  DescribeFleetHistoryResult,
  DescribeFleetInstancesRequest,
  DescribeFleetInstancesResult,
  DescribeFleetsInstances,
  DescribeFleetsRequest,
  DescribeFleetsResult,
  DescribeFlowLogsRequest,
  DescribeFlowLogsResult,
  DescribeFpgaImageAttributeRequest,
  DescribeFpgaImageAttributeResult,
  DescribeFpgaImagesRequest,
  DescribeFpgaImagesResult,
  DescribeHostReservationOfferingsRequest,
  DescribeHostReservationOfferingsResult,
  DescribeHostReservationsRequest,
  DescribeHostReservationsResult,
  DescribeHostsRequest,
  DescribeHostsResult,
  DescribeIamInstanceProfileAssociationsRequest,
  DescribeIamInstanceProfileAssociationsResult,
  DescribeIdentityIdFormatRequest,
  DescribeIdentityIdFormatResult,
  DescribeIdFormatRequest,
  DescribeIdFormatResult,
  DescribeImageAttributeRequest,
  DescribeImagesRequest,
  DescribeImagesResult,
  DescribeImportImageTasksRequest,
  DescribeImportImageTasksResult,
  DestinationOptionsResponse,
  DirectoryServiceAuthentication,
  DiskImageDescription,
  DiskImageVolumeDescription,
  ElasticGpuHealth,
  ElasticGpus,
  EventInformation,
  ExportImageTask,
  ExportTaskS3Location,
  FailedQueuedPurchaseDeletion,
  FastLaunchLaunchTemplateSpecificationResponse,
  FastLaunchSnapshotConfigurationResponse,
  FederatedAuthentication,
  Filter,
  FleetData,
  FleetLaunchTemplateConfig,
  FleetSpotCapacityRebalance,
  FleetSpotMaintenanceStrategies,
  FlowLog,
  FpgaImage,
  FpgaImageAttribute,
  FpgaImageState,
  HistoryRecordEntry,
  Host,
  HostInstance,
  HostOffering,
  HostProperties,
  HostReservation,
  IdFormat,
  Image,
  ImageAttribute,
  ImportImageLicenseConfigurationResponse,
  ImportImageTask,
  ImportInstanceTaskDetails,
  ImportInstanceVolumeDetailItem,
  ImportVolumeTaskDetails,
  InstanceCapacity,
  InstanceTagNotificationAttribute,
  IpamPoolCidr,
  IpamPoolCidrFailureReason,
  LaunchPermission,
  LoadPermission,
  OnDemandOptions,
  PciId,
  ProductCode,
  SnapshotDetail,
  SpotOptions,
  Subscription,
  SuccessfulQueuedPurchaseDeletion,
  TargetCapacitySpecification,
  TargetNetwork,
  TransitGatewayMulticastDeregisteredGroupMembers,
  TransitGatewayMulticastDeregisteredGroupSources,
  UserBucketDetails,
  VirtualizationType,
} from "../models/models_3";
import {
  ArchitectureType,
  AttributeBooleanValue,
  BootModeType,
  CapacityReservationSpecificationResponse,
  ClassicLoadBalancer,
  ClassicLoadBalancersConfig,
  ConnectionTrackingSpecificationResponse,
  CpuOptions,
  CreateVolumePermission,
  DescribeImportSnapshotTasksRequest,
  DescribeImportSnapshotTasksResult,
  DescribeInstanceAttributeRequest,
  DescribeInstanceConnectEndpointsRequest,
  DescribeInstanceConnectEndpointsResult,
  DescribeInstanceCreditSpecificationsRequest,
  DescribeInstanceCreditSpecificationsResult,
  DescribeInstanceEventNotificationAttributesRequest,
  DescribeInstanceEventNotificationAttributesResult,
  DescribeInstanceEventWindowsRequest,
  DescribeInstanceEventWindowsResult,
  DescribeInstancesRequest,
  DescribeInstancesResult,
  DescribeInstanceStatusRequest,
  DescribeInstanceStatusResult,
  DescribeInstanceTopologyRequest,
  DescribeInstanceTopologyResult,
  DescribeInstanceTypeOfferingsRequest,
  DescribeInstanceTypeOfferingsResult,
  DescribeInstanceTypesRequest,
  DescribeInstanceTypesResult,
  DescribeInternetGatewaysRequest,
  DescribeInternetGatewaysResult,
  DescribeIpamByoasnRequest,
  DescribeIpamByoasnResult,
  DescribeIpamPoolsRequest,
  DescribeIpamPoolsResult,
  DescribeIpamResourceDiscoveriesRequest,
  DescribeIpamResourceDiscoveriesResult,
  DescribeIpamResourceDiscoveryAssociationsRequest,
  DescribeIpamResourceDiscoveryAssociationsResult,
  DescribeIpamScopesRequest,
  DescribeIpamScopesResult,
  DescribeIpamsRequest,
  DescribeIpamsResult,
  DescribeIpv6PoolsRequest,
  DescribeIpv6PoolsResult,
  DescribeKeyPairsRequest,
  DescribeKeyPairsResult,
  DescribeLaunchTemplatesRequest,
  DescribeLaunchTemplatesResult,
  DescribeLaunchTemplateVersionsRequest,
  DescribeLaunchTemplateVersionsResult,
  DescribeLocalGatewayRouteTablesRequest,
  DescribeLocalGatewayRouteTablesResult,
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest,
  DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult,
  DescribeLocalGatewayRouteTableVpcAssociationsRequest,
  DescribeLocalGatewayRouteTableVpcAssociationsResult,
  DescribeLocalGatewaysRequest,
  DescribeLocalGatewaysResult,
  DescribeLocalGatewayVirtualInterfaceGroupsRequest,
  DescribeLocalGatewayVirtualInterfaceGroupsResult,
  DescribeLocalGatewayVirtualInterfacesRequest,
  DescribeLocalGatewayVirtualInterfacesResult,
  DescribeLockedSnapshotsRequest,
  DescribeLockedSnapshotsResult,
  DescribeManagedPrefixListsRequest,
  DescribeManagedPrefixListsResult,
  DescribeMovingAddressesRequest,
  DescribeMovingAddressesResult,
  DescribeNatGatewaysRequest,
  DescribeNatGatewaysResult,
  DescribeNetworkAclsRequest,
  DescribeNetworkAclsResult,
  DescribeNetworkInsightsAccessScopeAnalysesRequest,
  DescribeNetworkInsightsAccessScopeAnalysesResult,
  DescribeNetworkInsightsAccessScopesRequest,
  DescribeNetworkInsightsAccessScopesResult,
  DescribeNetworkInsightsAnalysesRequest,
  DescribeNetworkInsightsAnalysesResult,
  DescribeNetworkInsightsPathsRequest,
  DescribeNetworkInsightsPathsResult,
  DescribeNetworkInterfaceAttributeRequest,
  DescribeNetworkInterfaceAttributeResult,
  DescribeNetworkInterfacePermissionsRequest,
  DescribeNetworkInterfacePermissionsResult,
  DescribeNetworkInterfacesRequest,
  DescribeNetworkInterfacesResult,
  DescribePlacementGroupsRequest,
  DescribePlacementGroupsResult,
  DescribePrefixListsRequest,
  DescribePrefixListsResult,
  DescribePrincipalIdFormatRequest,
  DescribePrincipalIdFormatResult,
  DescribePublicIpv4PoolsRequest,
  DescribePublicIpv4PoolsResult,
  DescribeRegionsRequest,
  DescribeRegionsResult,
  DescribeReplaceRootVolumeTasksRequest,
  DescribeReplaceRootVolumeTasksResult,
  DescribeReservedInstancesListingsRequest,
  DescribeReservedInstancesListingsResult,
  DescribeReservedInstancesModificationsRequest,
  DescribeReservedInstancesModificationsResult,
  DescribeReservedInstancesOfferingsRequest,
  DescribeReservedInstancesOfferingsResult,
  DescribeReservedInstancesRequest,
  DescribeReservedInstancesResult,
  DescribeRouteTablesRequest,
  DescribeRouteTablesResult,
  DescribeScheduledInstanceAvailabilityRequest,
  DescribeScheduledInstanceAvailabilityResult,
  DescribeScheduledInstancesRequest,
  DescribeScheduledInstancesResult,
  DescribeSecurityGroupReferencesRequest,
  DescribeSecurityGroupReferencesResult,
  DescribeSecurityGroupRulesRequest,
  DescribeSecurityGroupRulesResult,
  DescribeSecurityGroupsRequest,
  DescribeSecurityGroupsResult,
  DescribeSnapshotAttributeRequest,
  DescribeSnapshotAttributeResult,
  DescribeSnapshotsRequest,
  DescribeSnapshotsResult,
  DescribeSnapshotTierStatusRequest,
  DescribeSnapshotTierStatusResult,
  DescribeSpotDatafeedSubscriptionRequest,
  DescribeSpotDatafeedSubscriptionResult,
  DescribeSpotFleetInstancesRequest,
  DescribeSpotFleetInstancesResponse,
  DescribeSpotFleetRequestHistoryRequest,
  DescribeSpotFleetRequestHistoryResponse,
  DescribeSpotFleetRequestsRequest,
  DescribeSpotFleetRequestsResponse,
  DescribeSpotInstanceRequestsRequest,
  DescribeSpotInstanceRequestsResult,
  DescribeSpotPriceHistoryRequest,
  DescribeSpotPriceHistoryResult,
  DescribeStaleSecurityGroupsRequest,
  DescribeStaleSecurityGroupsResult,
  DescribeStoreImageTasksRequest,
  DescribeStoreImageTasksResult,
  DescribeSubnetsRequest,
  DiskInfo,
  EbsInfo,
  EbsInstanceBlockDevice,
  EbsOptimizedInfo,
  EfaInfo,
  ElasticGpuAssociation,
  ElasticInferenceAcceleratorAssociation,
  EnclaveOptions,
  FpgaDeviceInfo,
  FpgaDeviceMemoryInfo,
  FpgaInfo,
  GpuDeviceInfo,
  GpuDeviceMemoryInfo,
  GpuInfo,
  HibernationOptions,
  HistoryRecord,
  ImportSnapshotTask,
  InferenceAcceleratorInfo,
  InferenceDeviceInfo,
  InferenceDeviceMemoryInfo,
  Instance,
  InstanceAttachmentEnaSrdSpecification,
  InstanceAttachmentEnaSrdUdpSpecification,
  InstanceAttribute,
  InstanceBlockDeviceMapping,
  InstanceCreditSpecification,
  InstanceIpv4Prefix,
  InstanceIpv6Prefix,
  InstanceMaintenanceOptions,
  InstanceMetadataOptionsResponse,
  InstanceNetworkInterface,
  InstanceNetworkInterfaceAssociation,
  InstanceNetworkInterfaceAttachment,
  InstanceNetworkInterfaceSpecification,
  InstancePrivateIpAddress,
  InstanceState,
  InstanceStatus,
  InstanceStatusDetails,
  InstanceStatusEvent,
  InstanceStatusSummary,
  InstanceStorageInfo,
  InstanceTopology,
  InstanceTypeInfo,
  InstanceTypeOffering,
  Ipv6Pool,
  KeyPairInfo,
  LaunchSpecification,
  LaunchTemplateConfig,
  LaunchTemplateOverrides,
  LicenseConfiguration,
  LoadBalancersConfig,
  LocalGateway,
  LocalGatewayVirtualInterface,
  LocalGatewayVirtualInterfaceGroup,
  LockedSnapshotsInfo,
  MemoryInfo,
  Monitoring,
  MovingAddressStatus,
  NetworkCardInfo,
  NetworkInfo,
  NetworkInsightsAccessScopeAnalysis,
  NetworkInsightsAnalysis,
  NitroTpmInfo,
  PlacementGroupInfo,
  PlacementGroupStrategy,
  PoolCidrBlock,
  PrefixList,
  PricingDetail,
  PrincipalIdFormat,
  PrivateDnsNameOptionsResponse,
  ProcessorInfo,
  PublicIpv4Pool,
  PublicIpv4PoolRange,
  RecurringCharge,
  Region,
  Reservation,
  ReservedInstances,
  ReservedInstancesConfiguration,
  ReservedInstancesId,
  ReservedInstancesModification,
  ReservedInstancesModificationResult,
  ReservedInstancesOffering,
  RootDeviceType,
  RunInstancesMonitoringEnabled,
  ScheduledInstance,
  ScheduledInstanceAvailability,
  ScheduledInstanceRecurrence,
  ScheduledInstanceRecurrenceRequest,
  SecurityGroup,
  SecurityGroupReference,
  SlotDateTimeRangeRequest,
  SlotStartTimeRangeRequest,
  SnapshotTaskDetail,
  SnapshotTierStatus,
  SpotCapacityRebalance,
  SpotFleetLaunchSpecification,
  SpotFleetMonitoring,
  SpotFleetRequestConfig,
  SpotFleetRequestConfigData,
  SpotFleetTagSpecification,
  SpotInstanceRequest,
  SpotInstanceStatus,
  SpotMaintenanceStrategies,
  SpotPlacement,
  SpotPrice,
  StaleIpPermission,
  StaleSecurityGroup,
  StoreImageTaskResult,
  SupportedAdditionalProcessorFeature,
  TargetGroup,
  TargetGroupsConfig,
  UsageClassType,
  VCpuInfo,
} from "../models/models_4";
import {
  AssociatedRole,
  AthenaIntegration,
  CapacityReservationGroup,
  ClassicLinkDnsSupport,
  ClientCertificateRevocationListStatus,
  CoipAddressUsage,
  DataQuery,
  DataResponse,
  DescribeSubnetsResult,
  DescribeTagsRequest,
  DescribeTagsResult,
  DescribeTrafficMirrorFiltersRequest,
  DescribeTrafficMirrorFiltersResult,
  DescribeTrafficMirrorSessionsRequest,
  DescribeTrafficMirrorSessionsResult,
  DescribeTrafficMirrorTargetsRequest,
  DescribeTrafficMirrorTargetsResult,
  DescribeTransitGatewayAttachmentsRequest,
  DescribeTransitGatewayAttachmentsResult,
  DescribeTransitGatewayConnectPeersRequest,
  DescribeTransitGatewayConnectPeersResult,
  DescribeTransitGatewayConnectsRequest,
  DescribeTransitGatewayConnectsResult,
  DescribeTransitGatewayMulticastDomainsRequest,
  DescribeTransitGatewayMulticastDomainsResult,
  DescribeTransitGatewayPeeringAttachmentsRequest,
  DescribeTransitGatewayPeeringAttachmentsResult,
  DescribeTransitGatewayPolicyTablesRequest,
  DescribeTransitGatewayPolicyTablesResult,
  DescribeTransitGatewayRouteTableAnnouncementsRequest,
  DescribeTransitGatewayRouteTableAnnouncementsResult,
  DescribeTransitGatewayRouteTablesRequest,
  DescribeTransitGatewayRouteTablesResult,
  DescribeTransitGatewaysRequest,
  DescribeTransitGatewaysResult,
  DescribeTransitGatewayVpcAttachmentsRequest,
  DescribeTransitGatewayVpcAttachmentsResult,
  DescribeTrunkInterfaceAssociationsRequest,
  DescribeTrunkInterfaceAssociationsResult,
  DescribeVerifiedAccessEndpointsRequest,
  DescribeVerifiedAccessEndpointsResult,
  DescribeVerifiedAccessGroupsRequest,
  DescribeVerifiedAccessGroupsResult,
  DescribeVerifiedAccessInstanceLoggingConfigurationsRequest,
  DescribeVerifiedAccessInstanceLoggingConfigurationsResult,
  DescribeVerifiedAccessInstancesRequest,
  DescribeVerifiedAccessInstancesResult,
  DescribeVerifiedAccessTrustProvidersRequest,
  DescribeVerifiedAccessTrustProvidersResult,
  DescribeVolumeAttributeRequest,
  DescribeVolumeAttributeResult,
  DescribeVolumesModificationsRequest,
  DescribeVolumesModificationsResult,
  DescribeVolumesRequest,
  DescribeVolumesResult,
  DescribeVolumeStatusRequest,
  DescribeVolumeStatusResult,
  DescribeVpcAttributeRequest,
  DescribeVpcAttributeResult,
  DescribeVpcClassicLinkDnsSupportRequest,
  DescribeVpcClassicLinkDnsSupportResult,
  DescribeVpcClassicLinkRequest,
  DescribeVpcClassicLinkResult,
  DescribeVpcEndpointConnectionNotificationsRequest,
  DescribeVpcEndpointConnectionNotificationsResult,
  DescribeVpcEndpointConnectionsRequest,
  DescribeVpcEndpointConnectionsResult,
  DescribeVpcEndpointServiceConfigurationsRequest,
  DescribeVpcEndpointServiceConfigurationsResult,
  DescribeVpcEndpointServicePermissionsRequest,
  DescribeVpcEndpointServicePermissionsResult,
  DescribeVpcEndpointServicesRequest,
  DescribeVpcEndpointServicesResult,
  DescribeVpcEndpointsRequest,
  DescribeVpcEndpointsResult,
  DescribeVpcPeeringConnectionsRequest,
  DescribeVpcPeeringConnectionsResult,
  DescribeVpcsRequest,
  DescribeVpcsResult,
  DescribeVpnConnectionsRequest,
  DescribeVpnConnectionsResult,
  DescribeVpnGatewaysRequest,
  DescribeVpnGatewaysResult,
  DetachClassicLinkVpcRequest,
  DetachClassicLinkVpcResult,
  DetachInternetGatewayRequest,
  DetachNetworkInterfaceRequest,
  DetachVerifiedAccessTrustProviderRequest,
  DetachVerifiedAccessTrustProviderResult,
  DetachVolumeRequest,
  DetachVpnGatewayRequest,
  DisableAddressTransferRequest,
  DisableAddressTransferResult,
  DisableAwsNetworkPerformanceMetricSubscriptionRequest,
  DisableAwsNetworkPerformanceMetricSubscriptionResult,
  DisableEbsEncryptionByDefaultRequest,
  DisableEbsEncryptionByDefaultResult,
  DisableFastLaunchRequest,
  DisableFastLaunchResult,
  DisableFastSnapshotRestoreErrorItem,
  DisableFastSnapshotRestoresRequest,
  DisableFastSnapshotRestoresResult,
  DisableFastSnapshotRestoreStateError,
  DisableFastSnapshotRestoreStateErrorItem,
  DisableFastSnapshotRestoreSuccessItem,
  DisableImageBlockPublicAccessRequest,
  DisableImageBlockPublicAccessResult,
  DisableImageDeprecationRequest,
  DisableImageDeprecationResult,
  DisableImageRequest,
  DisableImageResult,
  DisableIpamOrganizationAdminAccountRequest,
  DisableIpamOrganizationAdminAccountResult,
  DisableSerialConsoleAccessRequest,
  DisableSerialConsoleAccessResult,
  DisableSnapshotBlockPublicAccessRequest,
  DisableSnapshotBlockPublicAccessResult,
  DisableTransitGatewayRouteTablePropagationRequest,
  DisableTransitGatewayRouteTablePropagationResult,
  DisableVgwRoutePropagationRequest,
  DisableVpcClassicLinkDnsSupportRequest,
  DisableVpcClassicLinkDnsSupportResult,
  DisableVpcClassicLinkRequest,
  DisableVpcClassicLinkResult,
  DisassociateAddressRequest,
  DisassociateClientVpnTargetNetworkRequest,
  DisassociateClientVpnTargetNetworkResult,
  DisassociateEnclaveCertificateIamRoleRequest,
  DisassociateEnclaveCertificateIamRoleResult,
  DisassociateIamInstanceProfileRequest,
  DisassociateIamInstanceProfileResult,
  DisassociateInstanceEventWindowRequest,
  DisassociateInstanceEventWindowResult,
  DisassociateIpamByoasnRequest,
  DisassociateIpamByoasnResult,
  DisassociateIpamResourceDiscoveryRequest,
  DisassociateIpamResourceDiscoveryResult,
  DisassociateNatGatewayAddressRequest,
  DisassociateNatGatewayAddressResult,
  DisassociateRouteTableRequest,
  DisassociateSubnetCidrBlockRequest,
  DisassociateSubnetCidrBlockResult,
  DisassociateTransitGatewayMulticastDomainRequest,
  DisassociateTransitGatewayMulticastDomainResult,
  DisassociateTransitGatewayPolicyTableRequest,
  DisassociateTransitGatewayPolicyTableResult,
  DisassociateTransitGatewayRouteTableRequest,
  DisassociateTransitGatewayRouteTableResult,
  DisassociateTrunkInterfaceRequest,
  DisassociateTrunkInterfaceResult,
  DisassociateVpcCidrBlockRequest,
  DisassociateVpcCidrBlockResult,
  EnableAddressTransferRequest,
  EnableAddressTransferResult,
  EnableAwsNetworkPerformanceMetricSubscriptionRequest,
  EnableAwsNetworkPerformanceMetricSubscriptionResult,
  EnableEbsEncryptionByDefaultRequest,
  EnableEbsEncryptionByDefaultResult,
  EnableFastLaunchRequest,
  EnableFastLaunchResult,
  EnableFastSnapshotRestoreErrorItem,
  EnableFastSnapshotRestoresRequest,
  EnableFastSnapshotRestoresResult,
  EnableFastSnapshotRestoreStateError,
  EnableFastSnapshotRestoreStateErrorItem,
  EnableFastSnapshotRestoreSuccessItem,
  EnableImageBlockPublicAccessRequest,
  EnableImageBlockPublicAccessResult,
  EnableImageDeprecationRequest,
  EnableImageDeprecationResult,
  EnableImageRequest,
  EnableImageResult,
  EnableIpamOrganizationAdminAccountRequest,
  EnableIpamOrganizationAdminAccountResult,
  EnableReachabilityAnalyzerOrganizationSharingRequest,
  EnableReachabilityAnalyzerOrganizationSharingResult,
  EnableSerialConsoleAccessRequest,
  EnableSerialConsoleAccessResult,
  EnableSnapshotBlockPublicAccessRequest,
  EnableSnapshotBlockPublicAccessResult,
  EnableTransitGatewayRouteTablePropagationRequest,
  EnableTransitGatewayRouteTablePropagationResult,
  EnableVgwRoutePropagationRequest,
  EnableVolumeIORequest,
  EnableVpcClassicLinkDnsSupportRequest,
  EnableVpcClassicLinkDnsSupportResult,
  EnableVpcClassicLinkRequest,
  EnableVpcClassicLinkResult,
  ExportClientVpnClientCertificateRevocationListRequest,
  ExportClientVpnClientCertificateRevocationListResult,
  ExportClientVpnClientConfigurationRequest,
  ExportClientVpnClientConfigurationResult,
  ExportImageRequest,
  ExportImageResult,
  ExportTaskS3LocationRequest,
  ExportTransitGatewayRoutesRequest,
  ExportTransitGatewayRoutesResult,
  FastLaunchLaunchTemplateSpecificationRequest,
  FastLaunchSnapshotConfigurationRequest,
  GetAssociatedEnclaveCertificateIamRolesRequest,
  GetAssociatedEnclaveCertificateIamRolesResult,
  GetAssociatedIpv6PoolCidrsRequest,
  GetAssociatedIpv6PoolCidrsResult,
  GetAwsNetworkPerformanceDataRequest,
  GetAwsNetworkPerformanceDataResult,
  GetCapacityReservationUsageRequest,
  GetCapacityReservationUsageResult,
  GetCoipPoolUsageRequest,
  GetCoipPoolUsageResult,
  GetConsoleOutputRequest,
  GetConsoleOutputResult,
  GetConsoleScreenshotRequest,
  GetConsoleScreenshotResult,
  GetDefaultCreditSpecificationRequest,
  GetDefaultCreditSpecificationResult,
  GetEbsDefaultKmsKeyIdRequest,
  GetEbsDefaultKmsKeyIdResult,
  GetEbsEncryptionByDefaultRequest,
  GetEbsEncryptionByDefaultResult,
  GetFlowLogsIntegrationTemplateRequest,
  GetFlowLogsIntegrationTemplateResult,
  GetGroupsForCapacityReservationRequest,
  GetGroupsForCapacityReservationResult,
  GetHostReservationPurchasePreviewRequest,
  GetHostReservationPurchasePreviewResult,
  GetImageBlockPublicAccessStateRequest,
  GetImageBlockPublicAccessStateResult,
  GetInstanceTypesFromInstanceRequirementsRequest,
  GetInstanceTypesFromInstanceRequirementsResult,
  GetInstanceUefiDataRequest,
  GetInstanceUefiDataResult,
  GetIpamAddressHistoryRequest,
  GetIpamAddressHistoryResult,
  GetIpamDiscoveredAccountsRequest,
  GetIpamDiscoveredAccountsResult,
  GetIpamDiscoveredPublicAddressesRequest,
  GetIpamDiscoveredPublicAddressesResult,
  GetIpamDiscoveredResourceCidrsRequest,
  GetIpamDiscoveredResourceCidrsResult,
  GetIpamPoolAllocationsRequest,
  GetIpamPoolAllocationsResult,
  GetIpamPoolCidrsRequest,
  InstanceEventWindowDisassociationRequest,
  InstanceFamilyCreditSpecification,
  InstanceTypeInfoFromInstanceRequirements,
  InstanceUsage,
  IntegrateServices,
  IpamAddressHistoryRecord,
  IpamDiscoveredAccount,
  IpamDiscoveredPublicAddress,
  IpamDiscoveredResourceCidr,
  IpamDiscoveryFailureReason,
  IpamPublicAddressSecurityGroup,
  IpamPublicAddressTag,
  IpamPublicAddressTags,
  Ipv6CidrAssociation,
  MetricPoint,
  PrivateDnsDetails,
  Purchase,
  ServiceDetail,
  TagDescription,
  TransitGatewayAttachment,
  TransitGatewayAttachmentAssociation,
  TransitGatewayPropagation,
  VerifiedAccessInstanceLoggingConfiguration,
  VerifiedAccessLogCloudWatchLogsDestination,
  VerifiedAccessLogDeliveryStatus,
  VerifiedAccessLogKinesisDataFirehoseDestination,
  VerifiedAccessLogs,
  VerifiedAccessLogS3Destination,
  VolumeModification,
  VolumeStatusAction,
  VolumeStatusAttachmentStatus,
  VolumeStatusDetails,
  VolumeStatusEvent,
  VolumeStatusInfo,
  VolumeStatusItem,
  VpcClassicLink,
  VpcEndpointConnection,
} from "../models/models_5";
import {
  AsnAuthorizationContext,
  BlobAttributeValue,
  CapacityReservationSpecification,
  CidrAuthorizationContext,
  ClientData,
  CreateVolumePermissionModifications,
  DiskImage,
  DiskImageDetail,
  DnsServersOptionsModifyStructure,
  EbsInstanceBlockDeviceSpecification,
  GetIpamPoolCidrsResult,
  GetIpamResourceCidrsRequest,
  GetIpamResourceCidrsResult,
  GetLaunchTemplateDataRequest,
  GetLaunchTemplateDataResult,
  GetManagedPrefixListAssociationsRequest,
  GetManagedPrefixListAssociationsResult,
  GetManagedPrefixListEntriesRequest,
  GetManagedPrefixListEntriesResult,
  GetNetworkInsightsAccessScopeAnalysisFindingsRequest,
  GetNetworkInsightsAccessScopeAnalysisFindingsResult,
  GetNetworkInsightsAccessScopeContentRequest,
  GetNetworkInsightsAccessScopeContentResult,
  GetPasswordDataRequest,
  GetPasswordDataResult,
  GetReservedInstancesExchangeQuoteRequest,
  GetReservedInstancesExchangeQuoteResult,
  GetSecurityGroupsForVpcRequest,
  GetSecurityGroupsForVpcResult,
  GetSerialConsoleAccessStatusRequest,
  GetSerialConsoleAccessStatusResult,
  GetSnapshotBlockPublicAccessStateRequest,
  GetSnapshotBlockPublicAccessStateResult,
  GetSpotPlacementScoresRequest,
  GetSpotPlacementScoresResult,
  GetSubnetCidrReservationsRequest,
  GetSubnetCidrReservationsResult,
  GetTransitGatewayAttachmentPropagationsRequest,
  GetTransitGatewayAttachmentPropagationsResult,
  GetTransitGatewayMulticastDomainAssociationsRequest,
  GetTransitGatewayMulticastDomainAssociationsResult,
  GetTransitGatewayPolicyTableAssociationsRequest,
  GetTransitGatewayPolicyTableAssociationsResult,
  GetTransitGatewayPolicyTableEntriesRequest,
  GetTransitGatewayPolicyTableEntriesResult,
  GetTransitGatewayPrefixListReferencesRequest,
  GetTransitGatewayPrefixListReferencesResult,
  GetTransitGatewayRouteTableAssociationsRequest,
  GetTransitGatewayRouteTableAssociationsResult,
  GetTransitGatewayRouteTablePropagationsRequest,
  GetTransitGatewayRouteTablePropagationsResult,
  GetVerifiedAccessEndpointPolicyRequest,
  GetVerifiedAccessEndpointPolicyResult,
  GetVerifiedAccessGroupPolicyRequest,
  GetVerifiedAccessGroupPolicyResult,
  GetVpnConnectionDeviceSampleConfigurationRequest,
  GetVpnConnectionDeviceSampleConfigurationResult,
  GetVpnConnectionDeviceTypesRequest,
  GetVpnConnectionDeviceTypesResult,
  GetVpnTunnelReplacementStatusRequest,
  GetVpnTunnelReplacementStatusResult,
  ImageDiskContainer,
  ImageRecycleBinInfo,
  ImportClientVpnClientCertificateRevocationListRequest,
  ImportClientVpnClientCertificateRevocationListResult,
  ImportImageLicenseConfigurationRequest,
  ImportImageRequest,
  ImportImageResult,
  ImportInstanceLaunchSpecification,
  ImportInstanceRequest,
  ImportInstanceResult,
  ImportKeyPairRequest,
  ImportKeyPairResult,
  ImportSnapshotRequest,
  ImportSnapshotResult,
  ImportVolumeRequest,
  ImportVolumeResult,
  InstanceBlockDeviceMappingSpecification,
  InstanceCreditSpecificationRequest,
  InstanceMonitoring,
  InstanceRequirementsWithMetadataRequest,
  IpamCidrAuthorizationContext,
  IpamResourceCidr,
  LaunchPermissionModifications,
  ListImagesInRecycleBinRequest,
  ListImagesInRecycleBinResult,
  ListSnapshotsInRecycleBinRequest,
  ListSnapshotsInRecycleBinResult,
  LoadPermissionModifications,
  LoadPermissionRequest,
  LockSnapshotRequest,
  LockSnapshotResult,
  MaintenanceDetails,
  ModifyAddressAttributeRequest,
  ModifyAddressAttributeResult,
  ModifyAvailabilityZoneGroupRequest,
  ModifyAvailabilityZoneGroupResult,
  ModifyCapacityReservationFleetRequest,
  ModifyCapacityReservationFleetResult,
  ModifyCapacityReservationRequest,
  ModifyCapacityReservationResult,
  ModifyClientVpnEndpointRequest,
  ModifyClientVpnEndpointResult,
  ModifyDefaultCreditSpecificationRequest,
  ModifyDefaultCreditSpecificationResult,
  ModifyEbsDefaultKmsKeyIdRequest,
  ModifyEbsDefaultKmsKeyIdResult,
  ModifyFleetRequest,
  ModifyFleetResult,
  ModifyFpgaImageAttributeRequest,
  ModifyFpgaImageAttributeResult,
  ModifyHostsRequest,
  ModifyHostsResult,
  ModifyIdentityIdFormatRequest,
  ModifyIdFormatRequest,
  ModifyImageAttributeRequest,
  ModifyInstanceAttributeRequest,
  ModifyInstanceCapacityReservationAttributesRequest,
  ModifyInstanceCapacityReservationAttributesResult,
  ModifyInstanceCreditSpecificationRequest,
  ModifyInstanceCreditSpecificationResult,
  ModifyInstanceEventStartTimeRequest,
  ModifyInstanceEventStartTimeResult,
  ModifyInstanceEventWindowRequest,
  ModifyInstanceEventWindowResult,
  ModifyInstanceMaintenanceOptionsRequest,
  ModifyInstanceMaintenanceOptionsResult,
  ModifyInstanceMetadataOptionsRequest,
  ModifyInstanceMetadataOptionsResult,
  ModifyInstancePlacementRequest,
  ModifyInstancePlacementResult,
  ModifyIpamPoolRequest,
  ModifyIpamPoolResult,
  ModifyIpamRequest,
  ModifyIpamResourceCidrRequest,
  ModifyIpamResourceCidrResult,
  ModifyIpamResourceDiscoveryRequest,
  ModifyIpamResourceDiscoveryResult,
  ModifyIpamResult,
  ModifyIpamScopeRequest,
  ModifyIpamScopeResult,
  ModifyLaunchTemplateRequest,
  ModifyLaunchTemplateResult,
  ModifyLocalGatewayRouteRequest,
  ModifyLocalGatewayRouteResult,
  ModifyManagedPrefixListRequest,
  ModifyManagedPrefixListResult,
  ModifyNetworkInterfaceAttributeRequest,
  ModifyPrivateDnsNameOptionsRequest,
  ModifyPrivateDnsNameOptionsResult,
  ModifyReservedInstancesRequest,
  ModifyReservedInstancesResult,
  ModifySecurityGroupRulesRequest,
  ModifySecurityGroupRulesResult,
  ModifySnapshotAttributeRequest,
  ModifySnapshotTierRequest,
  ModifySnapshotTierResult,
  ModifySpotFleetRequestRequest,
  ModifySpotFleetRequestResponse,
  ModifySubnetAttributeRequest,
  ModifyTrafficMirrorFilterNetworkServicesRequest,
  ModifyTrafficMirrorFilterNetworkServicesResult,
  ModifyTrafficMirrorFilterRuleRequest,
  ModifyTrafficMirrorFilterRuleResult,
  ModifyTrafficMirrorSessionRequest,
  ModifyTrafficMirrorSessionResult,
  ModifyTransitGatewayOptions,
  ModifyTransitGatewayPrefixListReferenceRequest,
  ModifyTransitGatewayPrefixListReferenceResult,
  ModifyTransitGatewayRequest,
  ModifyTransitGatewayResult,
  ModifyTransitGatewayVpcAttachmentRequest,
  ModifyTransitGatewayVpcAttachmentRequestOptions,
  ModifyTransitGatewayVpcAttachmentResult,
  ModifyVerifiedAccessEndpointEniOptions,
  ModifyVerifiedAccessEndpointLoadBalancerOptions,
  ModifyVerifiedAccessEndpointPolicyRequest,
  ModifyVerifiedAccessEndpointPolicyResult,
  ModifyVerifiedAccessEndpointRequest,
  ModifyVerifiedAccessEndpointResult,
  ModifyVerifiedAccessGroupPolicyRequest,
  ModifyVerifiedAccessGroupPolicyResult,
  ModifyVerifiedAccessGroupRequest,
  ModifyVerifiedAccessGroupResult,
  ModifyVerifiedAccessInstanceLoggingConfigurationRequest,
  ModifyVerifiedAccessInstanceLoggingConfigurationResult,
  ModifyVerifiedAccessInstanceRequest,
  ModifyVerifiedAccessInstanceResult,
  ModifyVerifiedAccessTrustProviderDeviceOptions,
  ModifyVerifiedAccessTrustProviderOidcOptions,
  ModifyVerifiedAccessTrustProviderRequest,
  ModifyVerifiedAccessTrustProviderResult,
  ModifyVolumeAttributeRequest,
  ModifyVolumeRequest,
  ModifyVolumeResult,
  ModifyVpcAttributeRequest,
  ModifyVpcEndpointConnectionNotificationRequest,
  ModifyVpcEndpointConnectionNotificationResult,
  ModifyVpcEndpointRequest,
  ModifyVpcEndpointResult,
  ModifyVpcEndpointServiceConfigurationRequest,
  ModifyVpcEndpointServiceConfigurationResult,
  ModifyVpcEndpointServicePayerResponsibilityRequest,
  ModifyVpcEndpointServicePayerResponsibilityResult,
  ModifyVpcEndpointServicePermissionsRequest,
  ModifyVpcEndpointServicePermissionsResult,
  ModifyVpcPeeringConnectionOptionsRequest,
  ModifyVpcPeeringConnectionOptionsResult,
  ModifyVpcTenancyRequest,
  ModifyVpcTenancyResult,
  ModifyVpnConnectionOptionsRequest,
  ModifyVpnConnectionOptionsResult,
  ModifyVpnConnectionRequest,
  ModifyVpnConnectionResult,
  ModifyVpnTunnelCertificateRequest,
  ModifyVpnTunnelCertificateResult,
  ModifyVpnTunnelOptionsRequest,
  ModifyVpnTunnelOptionsResult,
  ModifyVpnTunnelOptionsSpecification,
  MonitorInstancesRequest,
  MonitorInstancesResult,
  MoveAddressToVpcRequest,
  MoveAddressToVpcResult,
  MoveByoipCidrToIpamRequest,
  MoveByoipCidrToIpamResult,
  NetworkInterfaceAttachmentChanges,
  PeeringConnectionOptions,
  PeeringConnectionOptionsRequest,
  PrefixListAssociation,
  PrefixListEntry,
  ProvisionByoipCidrRequest,
  ProvisionByoipCidrResult,
  ProvisionIpamByoasnRequest,
  ProvisionIpamByoasnResult,
  ProvisionIpamPoolCidrRequest,
  ProvisionIpamPoolCidrResult,
  ProvisionPublicIpv4PoolCidrRequest,
  ProvisionPublicIpv4PoolCidrResult,
  PurchaseCapacityBlockRequest,
  PurchaseCapacityBlockResult,
  PurchaseHostReservationRequest,
  PurchaseHostReservationResult,
  PurchaseRequest,
  PurchaseReservedInstancesOfferingRequest,
  PurchaseReservedInstancesOfferingResult,
  PurchaseScheduledInstancesRequest,
  PurchaseScheduledInstancesResult,
  RebootInstancesRequest,
  RegisterImageRequest,
  RegisterImageResult,
  RegisterInstanceEventNotificationAttributesRequest,
  RegisterInstanceEventNotificationAttributesResult,
  RegisterInstanceTagAttributeRequest,
  RegisterTransitGatewayMulticastGroupMembersRequest,
  RegisterTransitGatewayMulticastGroupMembersResult,
  RegisterTransitGatewayMulticastGroupSourcesRequest,
  RemoveIpamOperatingRegion,
  RemovePrefixListEntry,
  ReservationValue,
  ReservedInstanceLimitPrice,
  ReservedInstanceReservationValue,
  SecurityGroupForVpc,
  SecurityGroupRuleRequest,
  SecurityGroupRuleUpdate,
  SnapshotDiskContainer,
  SnapshotRecycleBinInfo,
  SpotPlacementScore,
  SuccessfulInstanceCreditSpecificationItem,
  TargetConfiguration,
  TargetReservationValue,
  TrafficMirrorFilterRuleField,
  TrafficMirrorSessionField,
  TransitGatewayAttachmentPropagation,
  TransitGatewayMulticastDomainAssociation,
  TransitGatewayMulticastRegisteredGroupMembers,
  TransitGatewayMulticastRegisteredGroupSources,
  TransitGatewayPolicyRule,
  TransitGatewayPolicyRuleMetaData,
  TransitGatewayPolicyTableEntry,
  TransitGatewayRouteTableAssociation,
  TransitGatewayRouteTablePropagation,
  UnsuccessfulInstanceCreditSpecificationItem,
  UnsuccessfulInstanceCreditSpecificationItemError,
  UserBucket,
  UserData,
  VerifiedAccessLogCloudWatchLogsDestinationOptions,
  VerifiedAccessLogKinesisDataFirehoseDestinationOptions,
  VerifiedAccessLogOptions,
  VerifiedAccessLogS3DestinationOptions,
  VolumeDetail,
  VpnConnectionDeviceType,
} from "../models/models_6";
import {
  CpuOptionsRequest,
  ElasticInferenceAccelerator,
  EnclaveOptionsRequest,
  HibernationOptionsRequest,
  InstanceMaintenanceOptionsRequest,
  InstanceMarketOptionsRequest,
  InstanceMetadataOptionsRequest,
  InstanceStateChange,
  LaunchTemplateSpecification,
  LicenseConfigurationRequest,
  PrivateDnsNameOptionsRequest,
  RegisterTransitGatewayMulticastGroupSourcesResult,
  RejectTransitGatewayMulticastDomainAssociationsRequest,
  RejectTransitGatewayMulticastDomainAssociationsResult,
  RejectTransitGatewayPeeringAttachmentRequest,
  RejectTransitGatewayPeeringAttachmentResult,
  RejectTransitGatewayVpcAttachmentRequest,
  RejectTransitGatewayVpcAttachmentResult,
  RejectVpcEndpointConnectionsRequest,
  RejectVpcEndpointConnectionsResult,
  RejectVpcPeeringConnectionRequest,
  RejectVpcPeeringConnectionResult,
  ReleaseAddressRequest,
  ReleaseHostsRequest,
  ReleaseHostsResult,
  ReleaseIpamPoolAllocationRequest,
  ReleaseIpamPoolAllocationResult,
  ReplaceIamInstanceProfileAssociationRequest,
  ReplaceIamInstanceProfileAssociationResult,
  ReplaceNetworkAclAssociationRequest,
  ReplaceNetworkAclAssociationResult,
  ReplaceNetworkAclEntryRequest,
  ReplaceRouteRequest,
  ReplaceRouteTableAssociationRequest,
  ReplaceRouteTableAssociationResult,
  ReplaceTransitGatewayRouteRequest,
  ReplaceTransitGatewayRouteResult,
  ReplaceVpnTunnelRequest,
  ReplaceVpnTunnelResult,
  ReportInstanceReasonCodes,
  ReportInstanceStatusRequest,
  RequestSpotFleetRequest,
  RequestSpotFleetResponse,
  RequestSpotInstancesRequest,
  RequestSpotInstancesResult,
  RequestSpotLaunchSpecification,
  ResetAddressAttributeRequest,
  ResetAddressAttributeResult,
  ResetEbsDefaultKmsKeyIdRequest,
  ResetEbsDefaultKmsKeyIdResult,
  ResetFpgaImageAttributeRequest,
  ResetFpgaImageAttributeResult,
  ResetImageAttributeRequest,
  ResetInstanceAttributeRequest,
  ResetNetworkInterfaceAttributeRequest,
  ResetSnapshotAttributeRequest,
  RestoreAddressToClassicRequest,
  RestoreAddressToClassicResult,
  RestoreImageFromRecycleBinRequest,
  RestoreImageFromRecycleBinResult,
  RestoreManagedPrefixListVersionRequest,
  RestoreManagedPrefixListVersionResult,
  RestoreSnapshotFromRecycleBinRequest,
  RestoreSnapshotFromRecycleBinResult,
  RestoreSnapshotTierRequest,
  RestoreSnapshotTierResult,
  RevokeClientVpnIngressRequest,
  RevokeClientVpnIngressResult,
  RevokeSecurityGroupEgressRequest,
  RevokeSecurityGroupEgressResult,
  RevokeSecurityGroupIngressRequest,
  RevokeSecurityGroupIngressResult,
  RunInstancesRequest,
  RunScheduledInstancesRequest,
  RunScheduledInstancesResult,
  ScheduledInstancesBlockDeviceMapping,
  ScheduledInstancesEbs,
  ScheduledInstancesIamInstanceProfile,
  ScheduledInstancesIpv6Address,
  ScheduledInstancesLaunchSpecification,
  ScheduledInstancesMonitoring,
  ScheduledInstancesNetworkInterface,
  ScheduledInstancesPlacement,
  ScheduledInstancesPrivateIpAddressConfig,
  SearchLocalGatewayRoutesRequest,
  SearchLocalGatewayRoutesResult,
  SearchTransitGatewayMulticastGroupsRequest,
  SearchTransitGatewayMulticastGroupsResult,
  SearchTransitGatewayRoutesRequest,
  SearchTransitGatewayRoutesResult,
  SecurityGroupRuleDescription,
  SendDiagnosticInterruptRequest,
  SpotMarketOptions,
  StartInstancesRequest,
  StartInstancesResult,
  StartNetworkInsightsAccessScopeAnalysisRequest,
  StartNetworkInsightsAccessScopeAnalysisResult,
  StartNetworkInsightsAnalysisRequest,
  StartNetworkInsightsAnalysisResult,
  StartVpcEndpointServicePrivateDnsVerificationRequest,
  StartVpcEndpointServicePrivateDnsVerificationResult,
  StopInstancesRequest,
  StopInstancesResult,
  TerminateClientVpnConnectionsRequest,
  TerminateClientVpnConnectionsResult,
  TerminateConnectionStatus,
  TerminateInstancesRequest,
  TerminateInstancesResult,
  TransitGatewayMulticastGroup,
  UnassignIpv6AddressesRequest,
  UnassignIpv6AddressesResult,
  UnassignPrivateIpAddressesRequest,
  UnassignPrivateNatGatewayAddressRequest,
  UnassignPrivateNatGatewayAddressResult,
  UnlockSnapshotRequest,
  UnlockSnapshotResult,
  UnmonitorInstancesRequest,
  UnmonitorInstancesResult,
  UpdateSecurityGroupRuleDescriptionsEgressRequest,
  UpdateSecurityGroupRuleDescriptionsEgressResult,
  UpdateSecurityGroupRuleDescriptionsIngressRequest,
  UpdateSecurityGroupRuleDescriptionsIngressResult,
  WithdrawByoipCidrRequest,
  WithdrawByoipCidrResult,
} from "../models/models_7";

/**
 * serializeAws_ec2AcceptAddressTransferCommand
 */
export const se_AcceptAddressTransferCommand = async (
  input: AcceptAddressTransferCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptAddressTransferRequest(input, context),
    [_A]: _AAT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand
 */
export const se_AcceptReservedInstancesExchangeQuoteCommand = async (
  input: AcceptReservedInstancesExchangeQuoteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptReservedInstancesExchangeQuoteRequest(input, context),
    [_A]: _ARIEQ,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand
 */
export const se_AcceptTransitGatewayMulticastDomainAssociationsCommand = async (
  input: AcceptTransitGatewayMulticastDomainAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptTransitGatewayMulticastDomainAssociationsRequest(input, context),
    [_A]: _ATGMDA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand
 */
export const se_AcceptTransitGatewayPeeringAttachmentCommand = async (
  input: AcceptTransitGatewayPeeringAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptTransitGatewayPeeringAttachmentRequest(input, context),
    [_A]: _ATGPA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand
 */
export const se_AcceptTransitGatewayVpcAttachmentCommand = async (
  input: AcceptTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptTransitGatewayVpcAttachmentRequest(input, context),
    [_A]: _ATGVA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AcceptVpcEndpointConnectionsCommand
 */
export const se_AcceptVpcEndpointConnectionsCommand = async (
  input: AcceptVpcEndpointConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptVpcEndpointConnectionsRequest(input, context),
    [_A]: _AVEC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AcceptVpcPeeringConnectionCommand
 */
export const se_AcceptVpcPeeringConnectionCommand = async (
  input: AcceptVpcPeeringConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AcceptVpcPeeringConnectionRequest(input, context),
    [_A]: _AVPC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AdvertiseByoipCidrCommand
 */
export const se_AdvertiseByoipCidrCommand = async (
  input: AdvertiseByoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AdvertiseByoipCidrRequest(input, context),
    [_A]: _ABC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AllocateAddressCommand
 */
export const se_AllocateAddressCommand = async (
  input: AllocateAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AllocateAddressRequest(input, context),
    [_A]: _AA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AllocateHostsCommand
 */
export const se_AllocateHostsCommand = async (
  input: AllocateHostsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AllocateHostsRequest(input, context),
    [_A]: _AH,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AllocateIpamPoolCidrCommand
 */
export const se_AllocateIpamPoolCidrCommand = async (
  input: AllocateIpamPoolCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AllocateIpamPoolCidrRequest(input, context),
    [_A]: _AIPC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand
 */
export const se_ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (
  input: ApplySecurityGroupsToClientVpnTargetNetworkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ApplySecurityGroupsToClientVpnTargetNetworkRequest(input, context),
    [_A]: _ASGTCVTN,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssignIpv6AddressesCommand
 */
export const se_AssignIpv6AddressesCommand = async (
  input: AssignIpv6AddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssignIpv6AddressesRequest(input, context),
    [_A]: _AIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssignPrivateIpAddressesCommand
 */
export const se_AssignPrivateIpAddressesCommand = async (
  input: AssignPrivateIpAddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssignPrivateIpAddressesRequest(input, context),
    [_A]: _APIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssignPrivateNatGatewayAddressCommand
 */
export const se_AssignPrivateNatGatewayAddressCommand = async (
  input: AssignPrivateNatGatewayAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssignPrivateNatGatewayAddressRequest(input, context),
    [_A]: _APNGA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateAddressCommand
 */
export const se_AssociateAddressCommand = async (
  input: AssociateAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateAddressRequest(input, context),
    [_A]: _AAs,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateClientVpnTargetNetworkCommand
 */
export const se_AssociateClientVpnTargetNetworkCommand = async (
  input: AssociateClientVpnTargetNetworkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateClientVpnTargetNetworkRequest(input, context),
    [_A]: _ACVTN,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateDhcpOptionsCommand
 */
export const se_AssociateDhcpOptionsCommand = async (
  input: AssociateDhcpOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateDhcpOptionsRequest(input, context),
    [_A]: _ADO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateEnclaveCertificateIamRoleCommand
 */
export const se_AssociateEnclaveCertificateIamRoleCommand = async (
  input: AssociateEnclaveCertificateIamRoleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateEnclaveCertificateIamRoleRequest(input, context),
    [_A]: _AECIR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateIamInstanceProfileCommand
 */
export const se_AssociateIamInstanceProfileCommand = async (
  input: AssociateIamInstanceProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateIamInstanceProfileRequest(input, context),
    [_A]: _AIIP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateInstanceEventWindowCommand
 */
export const se_AssociateInstanceEventWindowCommand = async (
  input: AssociateInstanceEventWindowCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateInstanceEventWindowRequest(input, context),
    [_A]: _AIEW,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateIpamByoasnCommand
 */
export const se_AssociateIpamByoasnCommand = async (
  input: AssociateIpamByoasnCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateIpamByoasnRequest(input, context),
    [_A]: _AIB,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateIpamResourceDiscoveryCommand
 */
export const se_AssociateIpamResourceDiscoveryCommand = async (
  input: AssociateIpamResourceDiscoveryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateIpamResourceDiscoveryRequest(input, context),
    [_A]: _AIRD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateNatGatewayAddressCommand
 */
export const se_AssociateNatGatewayAddressCommand = async (
  input: AssociateNatGatewayAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateNatGatewayAddressRequest(input, context),
    [_A]: _ANGA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateRouteTableCommand
 */
export const se_AssociateRouteTableCommand = async (
  input: AssociateRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateRouteTableRequest(input, context),
    [_A]: _ART,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateSubnetCidrBlockCommand
 */
export const se_AssociateSubnetCidrBlockCommand = async (
  input: AssociateSubnetCidrBlockCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateSubnetCidrBlockRequest(input, context),
    [_A]: _ASCB,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateTransitGatewayMulticastDomainCommand
 */
export const se_AssociateTransitGatewayMulticastDomainCommand = async (
  input: AssociateTransitGatewayMulticastDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateTransitGatewayMulticastDomainRequest(input, context),
    [_A]: _ATGMD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateTransitGatewayPolicyTableCommand
 */
export const se_AssociateTransitGatewayPolicyTableCommand = async (
  input: AssociateTransitGatewayPolicyTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateTransitGatewayPolicyTableRequest(input, context),
    [_A]: _ATGPT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateTransitGatewayRouteTableCommand
 */
export const se_AssociateTransitGatewayRouteTableCommand = async (
  input: AssociateTransitGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateTransitGatewayRouteTableRequest(input, context),
    [_A]: _ATGRT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateTrunkInterfaceCommand
 */
export const se_AssociateTrunkInterfaceCommand = async (
  input: AssociateTrunkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateTrunkInterfaceRequest(input, context),
    [_A]: _ATI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AssociateVpcCidrBlockCommand
 */
export const se_AssociateVpcCidrBlockCommand = async (
  input: AssociateVpcCidrBlockCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AssociateVpcCidrBlockRequest(input, context),
    [_A]: _AVCB,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AttachClassicLinkVpcCommand
 */
export const se_AttachClassicLinkVpcCommand = async (
  input: AttachClassicLinkVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AttachClassicLinkVpcRequest(input, context),
    [_A]: _ACLV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AttachInternetGatewayCommand
 */
export const se_AttachInternetGatewayCommand = async (
  input: AttachInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AttachInternetGatewayRequest(input, context),
    [_A]: _AIG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AttachNetworkInterfaceCommand
 */
export const se_AttachNetworkInterfaceCommand = async (
  input: AttachNetworkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AttachNetworkInterfaceRequest(input, context),
    [_A]: _ANI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AttachVerifiedAccessTrustProviderCommand
 */
export const se_AttachVerifiedAccessTrustProviderCommand = async (
  input: AttachVerifiedAccessTrustProviderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AttachVerifiedAccessTrustProviderRequest(input, context),
    [_A]: _AVATP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AttachVolumeCommand
 */
export const se_AttachVolumeCommand = async (
  input: AttachVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AttachVolumeRequest(input, context),
    [_A]: _AV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AttachVpnGatewayCommand
 */
export const se_AttachVpnGatewayCommand = async (
  input: AttachVpnGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AttachVpnGatewayRequest(input, context),
    [_A]: _AVG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AuthorizeClientVpnIngressCommand
 */
export const se_AuthorizeClientVpnIngressCommand = async (
  input: AuthorizeClientVpnIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AuthorizeClientVpnIngressRequest(input, context),
    [_A]: _ACVI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AuthorizeSecurityGroupEgressCommand
 */
export const se_AuthorizeSecurityGroupEgressCommand = async (
  input: AuthorizeSecurityGroupEgressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AuthorizeSecurityGroupEgressRequest(input, context),
    [_A]: _ASGE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2AuthorizeSecurityGroupIngressCommand
 */
export const se_AuthorizeSecurityGroupIngressCommand = async (
  input: AuthorizeSecurityGroupIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_AuthorizeSecurityGroupIngressRequest(input, context),
    [_A]: _ASGI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2BundleInstanceCommand
 */
export const se_BundleInstanceCommand = async (
  input: BundleInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_BundleInstanceRequest(input, context),
    [_A]: _BI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelBundleTaskCommand
 */
export const se_CancelBundleTaskCommand = async (
  input: CancelBundleTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelBundleTaskRequest(input, context),
    [_A]: _CBT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelCapacityReservationCommand
 */
export const se_CancelCapacityReservationCommand = async (
  input: CancelCapacityReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelCapacityReservationRequest(input, context),
    [_A]: _CCR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelCapacityReservationFleetsCommand
 */
export const se_CancelCapacityReservationFleetsCommand = async (
  input: CancelCapacityReservationFleetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelCapacityReservationFleetsRequest(input, context),
    [_A]: _CCRF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelConversionTaskCommand
 */
export const se_CancelConversionTaskCommand = async (
  input: CancelConversionTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelConversionRequest(input, context),
    [_A]: _CCT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelExportTaskCommand
 */
export const se_CancelExportTaskCommand = async (
  input: CancelExportTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelExportTaskRequest(input, context),
    [_A]: _CET,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelImageLaunchPermissionCommand
 */
export const se_CancelImageLaunchPermissionCommand = async (
  input: CancelImageLaunchPermissionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelImageLaunchPermissionRequest(input, context),
    [_A]: _CILP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelImportTaskCommand
 */
export const se_CancelImportTaskCommand = async (
  input: CancelImportTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelImportTaskRequest(input, context),
    [_A]: _CIT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelReservedInstancesListingCommand
 */
export const se_CancelReservedInstancesListingCommand = async (
  input: CancelReservedInstancesListingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelReservedInstancesListingRequest(input, context),
    [_A]: _CRIL,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelSpotFleetRequestsCommand
 */
export const se_CancelSpotFleetRequestsCommand = async (
  input: CancelSpotFleetRequestsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelSpotFleetRequestsRequest(input, context),
    [_A]: _CSFR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CancelSpotInstanceRequestsCommand
 */
export const se_CancelSpotInstanceRequestsCommand = async (
  input: CancelSpotInstanceRequestsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CancelSpotInstanceRequestsRequest(input, context),
    [_A]: _CSIR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ConfirmProductInstanceCommand
 */
export const se_ConfirmProductInstanceCommand = async (
  input: ConfirmProductInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ConfirmProductInstanceRequest(input, context),
    [_A]: _CPI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CopyFpgaImageCommand
 */
export const se_CopyFpgaImageCommand = async (
  input: CopyFpgaImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CopyFpgaImageRequest(input, context),
    [_A]: _CFI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CopyImageCommand
 */
export const se_CopyImageCommand = async (
  input: CopyImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CopyImageRequest(input, context),
    [_A]: _CI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CopySnapshotCommand
 */
export const se_CopySnapshotCommand = async (
  input: CopySnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CopySnapshotRequest(input, context),
    [_A]: _CS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateCapacityReservationCommand
 */
export const se_CreateCapacityReservationCommand = async (
  input: CreateCapacityReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateCapacityReservationRequest(input, context),
    [_A]: _CCRr,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateCapacityReservationFleetCommand
 */
export const se_CreateCapacityReservationFleetCommand = async (
  input: CreateCapacityReservationFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateCapacityReservationFleetRequest(input, context),
    [_A]: _CCRFr,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateCarrierGatewayCommand
 */
export const se_CreateCarrierGatewayCommand = async (
  input: CreateCarrierGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateCarrierGatewayRequest(input, context),
    [_A]: _CCG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateClientVpnEndpointCommand
 */
export const se_CreateClientVpnEndpointCommand = async (
  input: CreateClientVpnEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateClientVpnEndpointRequest(input, context),
    [_A]: _CCVE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateClientVpnRouteCommand
 */
export const se_CreateClientVpnRouteCommand = async (
  input: CreateClientVpnRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateClientVpnRouteRequest(input, context),
    [_A]: _CCVR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateCoipCidrCommand
 */
export const se_CreateCoipCidrCommand = async (
  input: CreateCoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateCoipCidrRequest(input, context),
    [_A]: _CCC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateCoipPoolCommand
 */
export const se_CreateCoipPoolCommand = async (
  input: CreateCoipPoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateCoipPoolRequest(input, context),
    [_A]: _CCP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateCustomerGatewayCommand
 */
export const se_CreateCustomerGatewayCommand = async (
  input: CreateCustomerGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateCustomerGatewayRequest(input, context),
    [_A]: _CCGr,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateDefaultSubnetCommand
 */
export const se_CreateDefaultSubnetCommand = async (
  input: CreateDefaultSubnetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateDefaultSubnetRequest(input, context),
    [_A]: _CDS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateDefaultVpcCommand
 */
export const se_CreateDefaultVpcCommand = async (
  input: CreateDefaultVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateDefaultVpcRequest(input, context),
    [_A]: _CDV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateDhcpOptionsCommand
 */
export const se_CreateDhcpOptionsCommand = async (
  input: CreateDhcpOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateDhcpOptionsRequest(input, context),
    [_A]: _CDO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateEgressOnlyInternetGatewayCommand
 */
export const se_CreateEgressOnlyInternetGatewayCommand = async (
  input: CreateEgressOnlyInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateEgressOnlyInternetGatewayRequest(input, context),
    [_A]: _CEOIG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateFleetCommand
 */
export const se_CreateFleetCommand = async (
  input: CreateFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateFleetRequest(input, context),
    [_A]: _CF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateFlowLogsCommand
 */
export const se_CreateFlowLogsCommand = async (
  input: CreateFlowLogsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateFlowLogsRequest(input, context),
    [_A]: _CFL,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateFpgaImageCommand
 */
export const se_CreateFpgaImageCommand = async (
  input: CreateFpgaImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateFpgaImageRequest(input, context),
    [_A]: _CFIr,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateImageCommand
 */
export const se_CreateImageCommand = async (
  input: CreateImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateImageRequest(input, context),
    [_A]: _CIr,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateInstanceConnectEndpointCommand
 */
export const se_CreateInstanceConnectEndpointCommand = async (
  input: CreateInstanceConnectEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateInstanceConnectEndpointRequest(input, context),
    [_A]: _CICE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateInstanceEventWindowCommand
 */
export const se_CreateInstanceEventWindowCommand = async (
  input: CreateInstanceEventWindowCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateInstanceEventWindowRequest(input, context),
    [_A]: _CIEW,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateInstanceExportTaskCommand
 */
export const se_CreateInstanceExportTaskCommand = async (
  input: CreateInstanceExportTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateInstanceExportTaskRequest(input, context),
    [_A]: _CIET,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateInternetGatewayCommand
 */
export const se_CreateInternetGatewayCommand = async (
  input: CreateInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateInternetGatewayRequest(input, context),
    [_A]: _CIG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateIpamCommand
 */
export const se_CreateIpamCommand = async (
  input: CreateIpamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateIpamRequest(input, context),
    [_A]: _CIre,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateIpamPoolCommand
 */
export const se_CreateIpamPoolCommand = async (
  input: CreateIpamPoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateIpamPoolRequest(input, context),
    [_A]: _CIP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateIpamResourceDiscoveryCommand
 */
export const se_CreateIpamResourceDiscoveryCommand = async (
  input: CreateIpamResourceDiscoveryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateIpamResourceDiscoveryRequest(input, context),
    [_A]: _CIRD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateIpamScopeCommand
 */
export const se_CreateIpamScopeCommand = async (
  input: CreateIpamScopeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateIpamScopeRequest(input, context),
    [_A]: _CIS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateKeyPairCommand
 */
export const se_CreateKeyPairCommand = async (
  input: CreateKeyPairCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateKeyPairRequest(input, context),
    [_A]: _CKP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateLaunchTemplateCommand
 */
export const se_CreateLaunchTemplateCommand = async (
  input: CreateLaunchTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateLaunchTemplateRequest(input, context),
    [_A]: _CLT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateLaunchTemplateVersionCommand
 */
export const se_CreateLaunchTemplateVersionCommand = async (
  input: CreateLaunchTemplateVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateLaunchTemplateVersionRequest(input, context),
    [_A]: _CLTV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteCommand
 */
export const se_CreateLocalGatewayRouteCommand = async (
  input: CreateLocalGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateLocalGatewayRouteRequest(input, context),
    [_A]: _CLGR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteTableCommand
 */
export const se_CreateLocalGatewayRouteTableCommand = async (
  input: CreateLocalGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateLocalGatewayRouteTableRequest(input, context),
    [_A]: _CLGRT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand
 */
export const se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (
  input: CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(input, context),
    [_A]: _CLGRTVIGA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand
 */
export const se_CreateLocalGatewayRouteTableVpcAssociationCommand = async (
  input: CreateLocalGatewayRouteTableVpcAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateLocalGatewayRouteTableVpcAssociationRequest(input, context),
    [_A]: _CLGRTVA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateManagedPrefixListCommand
 */
export const se_CreateManagedPrefixListCommand = async (
  input: CreateManagedPrefixListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateManagedPrefixListRequest(input, context),
    [_A]: _CMPL,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNatGatewayCommand
 */
export const se_CreateNatGatewayCommand = async (
  input: CreateNatGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNatGatewayRequest(input, context),
    [_A]: _CNG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNetworkAclCommand
 */
export const se_CreateNetworkAclCommand = async (
  input: CreateNetworkAclCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkAclRequest(input, context),
    [_A]: _CNA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNetworkAclEntryCommand
 */
export const se_CreateNetworkAclEntryCommand = async (
  input: CreateNetworkAclEntryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkAclEntryRequest(input, context),
    [_A]: _CNAE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNetworkInsightsAccessScopeCommand
 */
export const se_CreateNetworkInsightsAccessScopeCommand = async (
  input: CreateNetworkInsightsAccessScopeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkInsightsAccessScopeRequest(input, context),
    [_A]: _CNIAS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNetworkInsightsPathCommand
 */
export const se_CreateNetworkInsightsPathCommand = async (
  input: CreateNetworkInsightsPathCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkInsightsPathRequest(input, context),
    [_A]: _CNIP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNetworkInterfaceCommand
 */
export const se_CreateNetworkInterfaceCommand = async (
  input: CreateNetworkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkInterfaceRequest(input, context),
    [_A]: _CNI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateNetworkInterfacePermissionCommand
 */
export const se_CreateNetworkInterfacePermissionCommand = async (
  input: CreateNetworkInterfacePermissionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateNetworkInterfacePermissionRequest(input, context),
    [_A]: _CNIPr,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreatePlacementGroupCommand
 */
export const se_CreatePlacementGroupCommand = async (
  input: CreatePlacementGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreatePlacementGroupRequest(input, context),
    [_A]: _CPG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreatePublicIpv4PoolCommand
 */
export const se_CreatePublicIpv4PoolCommand = async (
  input: CreatePublicIpv4PoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreatePublicIpv4PoolRequest(input, context),
    [_A]: _CPIP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateReplaceRootVolumeTaskCommand
 */
export const se_CreateReplaceRootVolumeTaskCommand = async (
  input: CreateReplaceRootVolumeTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateReplaceRootVolumeTaskRequest(input, context),
    [_A]: _CRRVT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateReservedInstancesListingCommand
 */
export const se_CreateReservedInstancesListingCommand = async (
  input: CreateReservedInstancesListingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateReservedInstancesListingRequest(input, context),
    [_A]: _CRILr,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateRestoreImageTaskCommand
 */
export const se_CreateRestoreImageTaskCommand = async (
  input: CreateRestoreImageTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateRestoreImageTaskRequest(input, context),
    [_A]: _CRIT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateRouteCommand
 */
export const se_CreateRouteCommand = async (
  input: CreateRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateRouteRequest(input, context),
    [_A]: _CR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateRouteTableCommand
 */
export const se_CreateRouteTableCommand = async (
  input: CreateRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateRouteTableRequest(input, context),
    [_A]: _CRT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateSecurityGroupCommand
 */
export const se_CreateSecurityGroupCommand = async (
  input: CreateSecurityGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateSecurityGroupRequest(input, context),
    [_A]: _CSG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateSnapshotCommand
 */
export const se_CreateSnapshotCommand = async (
  input: CreateSnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateSnapshotRequest(input, context),
    [_A]: _CSr,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateSnapshotsCommand
 */
export const se_CreateSnapshotsCommand = async (
  input: CreateSnapshotsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateSnapshotsRequest(input, context),
    [_A]: _CSre,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateSpotDatafeedSubscriptionCommand
 */
export const se_CreateSpotDatafeedSubscriptionCommand = async (
  input: CreateSpotDatafeedSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateSpotDatafeedSubscriptionRequest(input, context),
    [_A]: _CSDS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateStoreImageTaskCommand
 */
export const se_CreateStoreImageTaskCommand = async (
  input: CreateStoreImageTaskCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateStoreImageTaskRequest(input, context),
    [_A]: _CSIT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateSubnetCommand
 */
export const se_CreateSubnetCommand = async (
  input: CreateSubnetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateSubnetRequest(input, context),
    [_A]: _CSrea,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateSubnetCidrReservationCommand
 */
export const se_CreateSubnetCidrReservationCommand = async (
  input: CreateSubnetCidrReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateSubnetCidrReservationRequest(input, context),
    [_A]: _CSCR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTagsCommand
 */
export const se_CreateTagsCommand = async (
  input: CreateTagsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTagsRequest(input, context),
    [_A]: _CT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTrafficMirrorFilterCommand
 */
export const se_CreateTrafficMirrorFilterCommand = async (
  input: CreateTrafficMirrorFilterCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTrafficMirrorFilterRequest(input, context),
    [_A]: _CTMF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTrafficMirrorFilterRuleCommand
 */
export const se_CreateTrafficMirrorFilterRuleCommand = async (
  input: CreateTrafficMirrorFilterRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTrafficMirrorFilterRuleRequest(input, context),
    [_A]: _CTMFR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTrafficMirrorSessionCommand
 */
export const se_CreateTrafficMirrorSessionCommand = async (
  input: CreateTrafficMirrorSessionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTrafficMirrorSessionRequest(input, context),
    [_A]: _CTMS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTrafficMirrorTargetCommand
 */
export const se_CreateTrafficMirrorTargetCommand = async (
  input: CreateTrafficMirrorTargetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTrafficMirrorTargetRequest(input, context),
    [_A]: _CTMT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayCommand
 */
export const se_CreateTransitGatewayCommand = async (
  input: CreateTransitGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayRequest(input, context),
    [_A]: _CTG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayConnectCommand
 */
export const se_CreateTransitGatewayConnectCommand = async (
  input: CreateTransitGatewayConnectCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayConnectRequest(input, context),
    [_A]: _CTGC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayConnectPeerCommand
 */
export const se_CreateTransitGatewayConnectPeerCommand = async (
  input: CreateTransitGatewayConnectPeerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayConnectPeerRequest(input, context),
    [_A]: _CTGCP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayMulticastDomainCommand
 */
export const se_CreateTransitGatewayMulticastDomainCommand = async (
  input: CreateTransitGatewayMulticastDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayMulticastDomainRequest(input, context),
    [_A]: _CTGMD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand
 */
export const se_CreateTransitGatewayPeeringAttachmentCommand = async (
  input: CreateTransitGatewayPeeringAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayPeeringAttachmentRequest(input, context),
    [_A]: _CTGPA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayPolicyTableCommand
 */
export const se_CreateTransitGatewayPolicyTableCommand = async (
  input: CreateTransitGatewayPolicyTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayPolicyTableRequest(input, context),
    [_A]: _CTGPT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand
 */
export const se_CreateTransitGatewayPrefixListReferenceCommand = async (
  input: CreateTransitGatewayPrefixListReferenceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayPrefixListReferenceRequest(input, context),
    [_A]: _CTGPLR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayRouteCommand
 */
export const se_CreateTransitGatewayRouteCommand = async (
  input: CreateTransitGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayRouteRequest(input, context),
    [_A]: _CTGR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayRouteTableCommand
 */
export const se_CreateTransitGatewayRouteTableCommand = async (
  input: CreateTransitGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayRouteTableRequest(input, context),
    [_A]: _CTGRT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayRouteTableAnnouncementCommand
 */
export const se_CreateTransitGatewayRouteTableAnnouncementCommand = async (
  input: CreateTransitGatewayRouteTableAnnouncementCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayRouteTableAnnouncementRequest(input, context),
    [_A]: _CTGRTA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateTransitGatewayVpcAttachmentCommand
 */
export const se_CreateTransitGatewayVpcAttachmentCommand = async (
  input: CreateTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateTransitGatewayVpcAttachmentRequest(input, context),
    [_A]: _CTGVA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVerifiedAccessEndpointCommand
 */
export const se_CreateVerifiedAccessEndpointCommand = async (
  input: CreateVerifiedAccessEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVerifiedAccessEndpointRequest(input, context),
    [_A]: _CVAE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVerifiedAccessGroupCommand
 */
export const se_CreateVerifiedAccessGroupCommand = async (
  input: CreateVerifiedAccessGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVerifiedAccessGroupRequest(input, context),
    [_A]: _CVAG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVerifiedAccessInstanceCommand
 */
export const se_CreateVerifiedAccessInstanceCommand = async (
  input: CreateVerifiedAccessInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVerifiedAccessInstanceRequest(input, context),
    [_A]: _CVAI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVerifiedAccessTrustProviderCommand
 */
export const se_CreateVerifiedAccessTrustProviderCommand = async (
  input: CreateVerifiedAccessTrustProviderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVerifiedAccessTrustProviderRequest(input, context),
    [_A]: _CVATP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVolumeCommand
 */
export const se_CreateVolumeCommand = async (
  input: CreateVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVolumeRequest(input, context),
    [_A]: _CV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpcCommand
 */
export const se_CreateVpcCommand = async (
  input: CreateVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpcRequest(input, context),
    [_A]: _CVr,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpcEndpointCommand
 */
export const se_CreateVpcEndpointCommand = async (
  input: CreateVpcEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpcEndpointRequest(input, context),
    [_A]: _CVE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpcEndpointConnectionNotificationCommand
 */
export const se_CreateVpcEndpointConnectionNotificationCommand = async (
  input: CreateVpcEndpointConnectionNotificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpcEndpointConnectionNotificationRequest(input, context),
    [_A]: _CVECN,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpcEndpointServiceConfigurationCommand
 */
export const se_CreateVpcEndpointServiceConfigurationCommand = async (
  input: CreateVpcEndpointServiceConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpcEndpointServiceConfigurationRequest(input, context),
    [_A]: _CVESC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpcPeeringConnectionCommand
 */
export const se_CreateVpcPeeringConnectionCommand = async (
  input: CreateVpcPeeringConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpcPeeringConnectionRequest(input, context),
    [_A]: _CVPC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpnConnectionCommand
 */
export const se_CreateVpnConnectionCommand = async (
  input: CreateVpnConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpnConnectionRequest(input, context),
    [_A]: _CVC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpnConnectionRouteCommand
 */
export const se_CreateVpnConnectionRouteCommand = async (
  input: CreateVpnConnectionRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpnConnectionRouteRequest(input, context),
    [_A]: _CVCR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2CreateVpnGatewayCommand
 */
export const se_CreateVpnGatewayCommand = async (
  input: CreateVpnGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_CreateVpnGatewayRequest(input, context),
    [_A]: _CVG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteCarrierGatewayCommand
 */
export const se_DeleteCarrierGatewayCommand = async (
  input: DeleteCarrierGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteCarrierGatewayRequest(input, context),
    [_A]: _DCG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteClientVpnEndpointCommand
 */
export const se_DeleteClientVpnEndpointCommand = async (
  input: DeleteClientVpnEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteClientVpnEndpointRequest(input, context),
    [_A]: _DCVE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteClientVpnRouteCommand
 */
export const se_DeleteClientVpnRouteCommand = async (
  input: DeleteClientVpnRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteClientVpnRouteRequest(input, context),
    [_A]: _DCVR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteCoipCidrCommand
 */
export const se_DeleteCoipCidrCommand = async (
  input: DeleteCoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteCoipCidrRequest(input, context),
    [_A]: _DCC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteCoipPoolCommand
 */
export const se_DeleteCoipPoolCommand = async (
  input: DeleteCoipPoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteCoipPoolRequest(input, context),
    [_A]: _DCP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteCustomerGatewayCommand
 */
export const se_DeleteCustomerGatewayCommand = async (
  input: DeleteCustomerGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteCustomerGatewayRequest(input, context),
    [_A]: _DCGe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteDhcpOptionsCommand
 */
export const se_DeleteDhcpOptionsCommand = async (
  input: DeleteDhcpOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteDhcpOptionsRequest(input, context),
    [_A]: _DDO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteEgressOnlyInternetGatewayCommand
 */
export const se_DeleteEgressOnlyInternetGatewayCommand = async (
  input: DeleteEgressOnlyInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteEgressOnlyInternetGatewayRequest(input, context),
    [_A]: _DEOIG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteFleetsCommand
 */
export const se_DeleteFleetsCommand = async (
  input: DeleteFleetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteFleetsRequest(input, context),
    [_A]: _DF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteFlowLogsCommand
 */
export const se_DeleteFlowLogsCommand = async (
  input: DeleteFlowLogsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteFlowLogsRequest(input, context),
    [_A]: _DFL,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteFpgaImageCommand
 */
export const se_DeleteFpgaImageCommand = async (
  input: DeleteFpgaImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteFpgaImageRequest(input, context),
    [_A]: _DFI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteInstanceConnectEndpointCommand
 */
export const se_DeleteInstanceConnectEndpointCommand = async (
  input: DeleteInstanceConnectEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteInstanceConnectEndpointRequest(input, context),
    [_A]: _DICE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteInstanceEventWindowCommand
 */
export const se_DeleteInstanceEventWindowCommand = async (
  input: DeleteInstanceEventWindowCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteInstanceEventWindowRequest(input, context),
    [_A]: _DIEW,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteInternetGatewayCommand
 */
export const se_DeleteInternetGatewayCommand = async (
  input: DeleteInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteInternetGatewayRequest(input, context),
    [_A]: _DIG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteIpamCommand
 */
export const se_DeleteIpamCommand = async (
  input: DeleteIpamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteIpamRequest(input, context),
    [_A]: _DI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteIpamPoolCommand
 */
export const se_DeleteIpamPoolCommand = async (
  input: DeleteIpamPoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteIpamPoolRequest(input, context),
    [_A]: _DIP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteIpamResourceDiscoveryCommand
 */
export const se_DeleteIpamResourceDiscoveryCommand = async (
  input: DeleteIpamResourceDiscoveryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteIpamResourceDiscoveryRequest(input, context),
    [_A]: _DIRD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteIpamScopeCommand
 */
export const se_DeleteIpamScopeCommand = async (
  input: DeleteIpamScopeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteIpamScopeRequest(input, context),
    [_A]: _DIS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteKeyPairCommand
 */
export const se_DeleteKeyPairCommand = async (
  input: DeleteKeyPairCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteKeyPairRequest(input, context),
    [_A]: _DKP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteLaunchTemplateCommand
 */
export const se_DeleteLaunchTemplateCommand = async (
  input: DeleteLaunchTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteLaunchTemplateRequest(input, context),
    [_A]: _DLT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteLaunchTemplateVersionsCommand
 */
export const se_DeleteLaunchTemplateVersionsCommand = async (
  input: DeleteLaunchTemplateVersionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteLaunchTemplateVersionsRequest(input, context),
    [_A]: _DLTV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteCommand
 */
export const se_DeleteLocalGatewayRouteCommand = async (
  input: DeleteLocalGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteLocalGatewayRouteRequest(input, context),
    [_A]: _DLGR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteTableCommand
 */
export const se_DeleteLocalGatewayRouteTableCommand = async (
  input: DeleteLocalGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteLocalGatewayRouteTableRequest(input, context),
    [_A]: _DLGRT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand
 */
export const se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (
  input: DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(input, context),
    [_A]: _DLGRTVIGA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand
 */
export const se_DeleteLocalGatewayRouteTableVpcAssociationCommand = async (
  input: DeleteLocalGatewayRouteTableVpcAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteLocalGatewayRouteTableVpcAssociationRequest(input, context),
    [_A]: _DLGRTVA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteManagedPrefixListCommand
 */
export const se_DeleteManagedPrefixListCommand = async (
  input: DeleteManagedPrefixListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteManagedPrefixListRequest(input, context),
    [_A]: _DMPL,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNatGatewayCommand
 */
export const se_DeleteNatGatewayCommand = async (
  input: DeleteNatGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNatGatewayRequest(input, context),
    [_A]: _DNG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkAclCommand
 */
export const se_DeleteNetworkAclCommand = async (
  input: DeleteNetworkAclCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkAclRequest(input, context),
    [_A]: _DNA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkAclEntryCommand
 */
export const se_DeleteNetworkAclEntryCommand = async (
  input: DeleteNetworkAclEntryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkAclEntryRequest(input, context),
    [_A]: _DNAE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkInsightsAccessScopeCommand
 */
export const se_DeleteNetworkInsightsAccessScopeCommand = async (
  input: DeleteNetworkInsightsAccessScopeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInsightsAccessScopeRequest(input, context),
    [_A]: _DNIAS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand
 */
export const se_DeleteNetworkInsightsAccessScopeAnalysisCommand = async (
  input: DeleteNetworkInsightsAccessScopeAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInsightsAccessScopeAnalysisRequest(input, context),
    [_A]: _DNIASA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkInsightsAnalysisCommand
 */
export const se_DeleteNetworkInsightsAnalysisCommand = async (
  input: DeleteNetworkInsightsAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInsightsAnalysisRequest(input, context),
    [_A]: _DNIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkInsightsPathCommand
 */
export const se_DeleteNetworkInsightsPathCommand = async (
  input: DeleteNetworkInsightsPathCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInsightsPathRequest(input, context),
    [_A]: _DNIP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkInterfaceCommand
 */
export const se_DeleteNetworkInterfaceCommand = async (
  input: DeleteNetworkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInterfaceRequest(input, context),
    [_A]: _DNI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteNetworkInterfacePermissionCommand
 */
export const se_DeleteNetworkInterfacePermissionCommand = async (
  input: DeleteNetworkInterfacePermissionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteNetworkInterfacePermissionRequest(input, context),
    [_A]: _DNIPe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeletePlacementGroupCommand
 */
export const se_DeletePlacementGroupCommand = async (
  input: DeletePlacementGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeletePlacementGroupRequest(input, context),
    [_A]: _DPG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeletePublicIpv4PoolCommand
 */
export const se_DeletePublicIpv4PoolCommand = async (
  input: DeletePublicIpv4PoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeletePublicIpv4PoolRequest(input, context),
    [_A]: _DPIP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteQueuedReservedInstancesCommand
 */
export const se_DeleteQueuedReservedInstancesCommand = async (
  input: DeleteQueuedReservedInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteQueuedReservedInstancesRequest(input, context),
    [_A]: _DQRI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteRouteCommand
 */
export const se_DeleteRouteCommand = async (
  input: DeleteRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteRouteRequest(input, context),
    [_A]: _DR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteRouteTableCommand
 */
export const se_DeleteRouteTableCommand = async (
  input: DeleteRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteRouteTableRequest(input, context),
    [_A]: _DRT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteSecurityGroupCommand
 */
export const se_DeleteSecurityGroupCommand = async (
  input: DeleteSecurityGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteSecurityGroupRequest(input, context),
    [_A]: _DSG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteSnapshotCommand
 */
export const se_DeleteSnapshotCommand = async (
  input: DeleteSnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteSnapshotRequest(input, context),
    [_A]: _DS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteSpotDatafeedSubscriptionCommand
 */
export const se_DeleteSpotDatafeedSubscriptionCommand = async (
  input: DeleteSpotDatafeedSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteSpotDatafeedSubscriptionRequest(input, context),
    [_A]: _DSDS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteSubnetCommand
 */
export const se_DeleteSubnetCommand = async (
  input: DeleteSubnetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteSubnetRequest(input, context),
    [_A]: _DSe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteSubnetCidrReservationCommand
 */
export const se_DeleteSubnetCidrReservationCommand = async (
  input: DeleteSubnetCidrReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteSubnetCidrReservationRequest(input, context),
    [_A]: _DSCR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTagsCommand
 */
export const se_DeleteTagsCommand = async (
  input: DeleteTagsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTagsRequest(input, context),
    [_A]: _DT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTrafficMirrorFilterCommand
 */
export const se_DeleteTrafficMirrorFilterCommand = async (
  input: DeleteTrafficMirrorFilterCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTrafficMirrorFilterRequest(input, context),
    [_A]: _DTMF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTrafficMirrorFilterRuleCommand
 */
export const se_DeleteTrafficMirrorFilterRuleCommand = async (
  input: DeleteTrafficMirrorFilterRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTrafficMirrorFilterRuleRequest(input, context),
    [_A]: _DTMFR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTrafficMirrorSessionCommand
 */
export const se_DeleteTrafficMirrorSessionCommand = async (
  input: DeleteTrafficMirrorSessionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTrafficMirrorSessionRequest(input, context),
    [_A]: _DTMS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTrafficMirrorTargetCommand
 */
export const se_DeleteTrafficMirrorTargetCommand = async (
  input: DeleteTrafficMirrorTargetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTrafficMirrorTargetRequest(input, context),
    [_A]: _DTMT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayCommand
 */
export const se_DeleteTransitGatewayCommand = async (
  input: DeleteTransitGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayRequest(input, context),
    [_A]: _DTG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayConnectCommand
 */
export const se_DeleteTransitGatewayConnectCommand = async (
  input: DeleteTransitGatewayConnectCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayConnectRequest(input, context),
    [_A]: _DTGC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayConnectPeerCommand
 */
export const se_DeleteTransitGatewayConnectPeerCommand = async (
  input: DeleteTransitGatewayConnectPeerCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayConnectPeerRequest(input, context),
    [_A]: _DTGCP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayMulticastDomainCommand
 */
export const se_DeleteTransitGatewayMulticastDomainCommand = async (
  input: DeleteTransitGatewayMulticastDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayMulticastDomainRequest(input, context),
    [_A]: _DTGMD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand
 */
export const se_DeleteTransitGatewayPeeringAttachmentCommand = async (
  input: DeleteTransitGatewayPeeringAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayPeeringAttachmentRequest(input, context),
    [_A]: _DTGPA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayPolicyTableCommand
 */
export const se_DeleteTransitGatewayPolicyTableCommand = async (
  input: DeleteTransitGatewayPolicyTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayPolicyTableRequest(input, context),
    [_A]: _DTGPT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand
 */
export const se_DeleteTransitGatewayPrefixListReferenceCommand = async (
  input: DeleteTransitGatewayPrefixListReferenceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayPrefixListReferenceRequest(input, context),
    [_A]: _DTGPLR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayRouteCommand
 */
export const se_DeleteTransitGatewayRouteCommand = async (
  input: DeleteTransitGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayRouteRequest(input, context),
    [_A]: _DTGR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayRouteTableCommand
 */
export const se_DeleteTransitGatewayRouteTableCommand = async (
  input: DeleteTransitGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayRouteTableRequest(input, context),
    [_A]: _DTGRT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayRouteTableAnnouncementCommand
 */
export const se_DeleteTransitGatewayRouteTableAnnouncementCommand = async (
  input: DeleteTransitGatewayRouteTableAnnouncementCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayRouteTableAnnouncementRequest(input, context),
    [_A]: _DTGRTA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand
 */
export const se_DeleteTransitGatewayVpcAttachmentCommand = async (
  input: DeleteTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteTransitGatewayVpcAttachmentRequest(input, context),
    [_A]: _DTGVA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVerifiedAccessEndpointCommand
 */
export const se_DeleteVerifiedAccessEndpointCommand = async (
  input: DeleteVerifiedAccessEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVerifiedAccessEndpointRequest(input, context),
    [_A]: _DVAE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVerifiedAccessGroupCommand
 */
export const se_DeleteVerifiedAccessGroupCommand = async (
  input: DeleteVerifiedAccessGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVerifiedAccessGroupRequest(input, context),
    [_A]: _DVAG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVerifiedAccessInstanceCommand
 */
export const se_DeleteVerifiedAccessInstanceCommand = async (
  input: DeleteVerifiedAccessInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVerifiedAccessInstanceRequest(input, context),
    [_A]: _DVAI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVerifiedAccessTrustProviderCommand
 */
export const se_DeleteVerifiedAccessTrustProviderCommand = async (
  input: DeleteVerifiedAccessTrustProviderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVerifiedAccessTrustProviderRequest(input, context),
    [_A]: _DVATP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVolumeCommand
 */
export const se_DeleteVolumeCommand = async (
  input: DeleteVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVolumeRequest(input, context),
    [_A]: _DV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpcCommand
 */
export const se_DeleteVpcCommand = async (
  input: DeleteVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcRequest(input, context),
    [_A]: _DVe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand
 */
export const se_DeleteVpcEndpointConnectionNotificationsCommand = async (
  input: DeleteVpcEndpointConnectionNotificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcEndpointConnectionNotificationsRequest(input, context),
    [_A]: _DVECN,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpcEndpointsCommand
 */
export const se_DeleteVpcEndpointsCommand = async (
  input: DeleteVpcEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcEndpointsRequest(input, context),
    [_A]: _DVE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand
 */
export const se_DeleteVpcEndpointServiceConfigurationsCommand = async (
  input: DeleteVpcEndpointServiceConfigurationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcEndpointServiceConfigurationsRequest(input, context),
    [_A]: _DVESC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpcPeeringConnectionCommand
 */
export const se_DeleteVpcPeeringConnectionCommand = async (
  input: DeleteVpcPeeringConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpcPeeringConnectionRequest(input, context),
    [_A]: _DVPC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpnConnectionCommand
 */
export const se_DeleteVpnConnectionCommand = async (
  input: DeleteVpnConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpnConnectionRequest(input, context),
    [_A]: _DVC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpnConnectionRouteCommand
 */
export const se_DeleteVpnConnectionRouteCommand = async (
  input: DeleteVpnConnectionRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpnConnectionRouteRequest(input, context),
    [_A]: _DVCR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeleteVpnGatewayCommand
 */
export const se_DeleteVpnGatewayCommand = async (
  input: DeleteVpnGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeleteVpnGatewayRequest(input, context),
    [_A]: _DVG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeprovisionByoipCidrCommand
 */
export const se_DeprovisionByoipCidrCommand = async (
  input: DeprovisionByoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeprovisionByoipCidrRequest(input, context),
    [_A]: _DBC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeprovisionIpamByoasnCommand
 */
export const se_DeprovisionIpamByoasnCommand = async (
  input: DeprovisionIpamByoasnCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeprovisionIpamByoasnRequest(input, context),
    [_A]: _DIB,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeprovisionIpamPoolCidrCommand
 */
export const se_DeprovisionIpamPoolCidrCommand = async (
  input: DeprovisionIpamPoolCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeprovisionIpamPoolCidrRequest(input, context),
    [_A]: _DIPC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand
 */
export const se_DeprovisionPublicIpv4PoolCidrCommand = async (
  input: DeprovisionPublicIpv4PoolCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeprovisionPublicIpv4PoolCidrRequest(input, context),
    [_A]: _DPIPC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeregisterImageCommand
 */
export const se_DeregisterImageCommand = async (
  input: DeregisterImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeregisterImageRequest(input, context),
    [_A]: _DIe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand
 */
export const se_DeregisterInstanceEventNotificationAttributesCommand = async (
  input: DeregisterInstanceEventNotificationAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeregisterInstanceEventNotificationAttributesRequest(input, context),
    [_A]: _DIENA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand
 */
export const se_DeregisterTransitGatewayMulticastGroupMembersCommand = async (
  input: DeregisterTransitGatewayMulticastGroupMembersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeregisterTransitGatewayMulticastGroupMembersRequest(input, context),
    [_A]: _DTGMGM,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand
 */
export const se_DeregisterTransitGatewayMulticastGroupSourcesCommand = async (
  input: DeregisterTransitGatewayMulticastGroupSourcesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DeregisterTransitGatewayMulticastGroupSourcesRequest(input, context),
    [_A]: _DTGMGS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAccountAttributesCommand
 */
export const se_DescribeAccountAttributesCommand = async (
  input: DescribeAccountAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAccountAttributesRequest(input, context),
    [_A]: _DAA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAddressesCommand
 */
export const se_DescribeAddressesCommand = async (
  input: DescribeAddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAddressesRequest(input, context),
    [_A]: _DA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAddressesAttributeCommand
 */
export const se_DescribeAddressesAttributeCommand = async (
  input: DescribeAddressesAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAddressesAttributeRequest(input, context),
    [_A]: _DAAe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAddressTransfersCommand
 */
export const se_DescribeAddressTransfersCommand = async (
  input: DescribeAddressTransfersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAddressTransfersRequest(input, context),
    [_A]: _DAT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAggregateIdFormatCommand
 */
export const se_DescribeAggregateIdFormatCommand = async (
  input: DescribeAggregateIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAggregateIdFormatRequest(input, context),
    [_A]: _DAIF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAvailabilityZonesCommand
 */
export const se_DescribeAvailabilityZonesCommand = async (
  input: DescribeAvailabilityZonesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAvailabilityZonesRequest(input, context),
    [_A]: _DAZ,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeAwsNetworkPerformanceMetricSubscriptionsCommand
 */
export const se_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand = async (
  input: DescribeAwsNetworkPerformanceMetricSubscriptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeAwsNetworkPerformanceMetricSubscriptionsRequest(input, context),
    [_A]: _DANPMS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeBundleTasksCommand
 */
export const se_DescribeBundleTasksCommand = async (
  input: DescribeBundleTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeBundleTasksRequest(input, context),
    [_A]: _DBT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeByoipCidrsCommand
 */
export const se_DescribeByoipCidrsCommand = async (
  input: DescribeByoipCidrsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeByoipCidrsRequest(input, context),
    [_A]: _DBCe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeCapacityBlockOfferingsCommand
 */
export const se_DescribeCapacityBlockOfferingsCommand = async (
  input: DescribeCapacityBlockOfferingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeCapacityBlockOfferingsRequest(input, context),
    [_A]: _DCBO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeCapacityReservationFleetsCommand
 */
export const se_DescribeCapacityReservationFleetsCommand = async (
  input: DescribeCapacityReservationFleetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeCapacityReservationFleetsRequest(input, context),
    [_A]: _DCRF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeCapacityReservationsCommand
 */
export const se_DescribeCapacityReservationsCommand = async (
  input: DescribeCapacityReservationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeCapacityReservationsRequest(input, context),
    [_A]: _DCR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeCarrierGatewaysCommand
 */
export const se_DescribeCarrierGatewaysCommand = async (
  input: DescribeCarrierGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeCarrierGatewaysRequest(input, context),
    [_A]: _DCGes,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeClassicLinkInstancesCommand
 */
export const se_DescribeClassicLinkInstancesCommand = async (
  input: DescribeClassicLinkInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeClassicLinkInstancesRequest(input, context),
    [_A]: _DCLI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeClientVpnAuthorizationRulesCommand
 */
export const se_DescribeClientVpnAuthorizationRulesCommand = async (
  input: DescribeClientVpnAuthorizationRulesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnAuthorizationRulesRequest(input, context),
    [_A]: _DCVAR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeClientVpnConnectionsCommand
 */
export const se_DescribeClientVpnConnectionsCommand = async (
  input: DescribeClientVpnConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnConnectionsRequest(input, context),
    [_A]: _DCVC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeClientVpnEndpointsCommand
 */
export const se_DescribeClientVpnEndpointsCommand = async (
  input: DescribeClientVpnEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnEndpointsRequest(input, context),
    [_A]: _DCVEe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeClientVpnRoutesCommand
 */
export const se_DescribeClientVpnRoutesCommand = async (
  input: DescribeClientVpnRoutesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnRoutesRequest(input, context),
    [_A]: _DCVRe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeClientVpnTargetNetworksCommand
 */
export const se_DescribeClientVpnTargetNetworksCommand = async (
  input: DescribeClientVpnTargetNetworksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeClientVpnTargetNetworksRequest(input, context),
    [_A]: _DCVTN,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeCoipPoolsCommand
 */
export const se_DescribeCoipPoolsCommand = async (
  input: DescribeCoipPoolsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeCoipPoolsRequest(input, context),
    [_A]: _DCPe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeConversionTasksCommand
 */
export const se_DescribeConversionTasksCommand = async (
  input: DescribeConversionTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeConversionTasksRequest(input, context),
    [_A]: _DCT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeCustomerGatewaysCommand
 */
export const se_DescribeCustomerGatewaysCommand = async (
  input: DescribeCustomerGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeCustomerGatewaysRequest(input, context),
    [_A]: _DCGesc,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeDhcpOptionsCommand
 */
export const se_DescribeDhcpOptionsCommand = async (
  input: DescribeDhcpOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeDhcpOptionsRequest(input, context),
    [_A]: _DDOe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand
 */
export const se_DescribeEgressOnlyInternetGatewaysCommand = async (
  input: DescribeEgressOnlyInternetGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeEgressOnlyInternetGatewaysRequest(input, context),
    [_A]: _DEOIGe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeElasticGpusCommand
 */
export const se_DescribeElasticGpusCommand = async (
  input: DescribeElasticGpusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeElasticGpusRequest(input, context),
    [_A]: _DEG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeExportImageTasksCommand
 */
export const se_DescribeExportImageTasksCommand = async (
  input: DescribeExportImageTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeExportImageTasksRequest(input, context),
    [_A]: _DEIT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeExportTasksCommand
 */
export const se_DescribeExportTasksCommand = async (
  input: DescribeExportTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeExportTasksRequest(input, context),
    [_A]: _DET,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFastLaunchImagesCommand
 */
export const se_DescribeFastLaunchImagesCommand = async (
  input: DescribeFastLaunchImagesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFastLaunchImagesRequest(input, context),
    [_A]: _DFLI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFastSnapshotRestoresCommand
 */
export const se_DescribeFastSnapshotRestoresCommand = async (
  input: DescribeFastSnapshotRestoresCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFastSnapshotRestoresRequest(input, context),
    [_A]: _DFSR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFleetHistoryCommand
 */
export const se_DescribeFleetHistoryCommand = async (
  input: DescribeFleetHistoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFleetHistoryRequest(input, context),
    [_A]: _DFH,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFleetInstancesCommand
 */
export const se_DescribeFleetInstancesCommand = async (
  input: DescribeFleetInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFleetInstancesRequest(input, context),
    [_A]: _DFIe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFleetsCommand
 */
export const se_DescribeFleetsCommand = async (
  input: DescribeFleetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFleetsRequest(input, context),
    [_A]: _DFe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFlowLogsCommand
 */
export const se_DescribeFlowLogsCommand = async (
  input: DescribeFlowLogsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFlowLogsRequest(input, context),
    [_A]: _DFLe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFpgaImageAttributeCommand
 */
export const se_DescribeFpgaImageAttributeCommand = async (
  input: DescribeFpgaImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFpgaImageAttributeRequest(input, context),
    [_A]: _DFIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeFpgaImagesCommand
 */
export const se_DescribeFpgaImagesCommand = async (
  input: DescribeFpgaImagesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeFpgaImagesRequest(input, context),
    [_A]: _DFIes,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeHostReservationOfferingsCommand
 */
export const se_DescribeHostReservationOfferingsCommand = async (
  input: DescribeHostReservationOfferingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeHostReservationOfferingsRequest(input, context),
    [_A]: _DHRO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeHostReservationsCommand
 */
export const se_DescribeHostReservationsCommand = async (
  input: DescribeHostReservationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeHostReservationsRequest(input, context),
    [_A]: _DHR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeHostsCommand
 */
export const se_DescribeHostsCommand = async (
  input: DescribeHostsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeHostsRequest(input, context),
    [_A]: _DH,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIamInstanceProfileAssociationsCommand
 */
export const se_DescribeIamInstanceProfileAssociationsCommand = async (
  input: DescribeIamInstanceProfileAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIamInstanceProfileAssociationsRequest(input, context),
    [_A]: _DIIPA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIdentityIdFormatCommand
 */
export const se_DescribeIdentityIdFormatCommand = async (
  input: DescribeIdentityIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIdentityIdFormatRequest(input, context),
    [_A]: _DIIF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIdFormatCommand
 */
export const se_DescribeIdFormatCommand = async (
  input: DescribeIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIdFormatRequest(input, context),
    [_A]: _DIF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeImageAttributeCommand
 */
export const se_DescribeImageAttributeCommand = async (
  input: DescribeImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeImageAttributeRequest(input, context),
    [_A]: _DIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeImagesCommand
 */
export const se_DescribeImagesCommand = async (
  input: DescribeImagesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeImagesRequest(input, context),
    [_A]: _DIes,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeImportImageTasksCommand
 */
export const se_DescribeImportImageTasksCommand = async (
  input: DescribeImportImageTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeImportImageTasksRequest(input, context),
    [_A]: _DIIT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeImportSnapshotTasksCommand
 */
export const se_DescribeImportSnapshotTasksCommand = async (
  input: DescribeImportSnapshotTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeImportSnapshotTasksRequest(input, context),
    [_A]: _DIST,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceAttributeCommand
 */
export const se_DescribeInstanceAttributeCommand = async (
  input: DescribeInstanceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceAttributeRequest(input, context),
    [_A]: _DIAe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceConnectEndpointsCommand
 */
export const se_DescribeInstanceConnectEndpointsCommand = async (
  input: DescribeInstanceConnectEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceConnectEndpointsRequest(input, context),
    [_A]: _DICEe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceCreditSpecificationsCommand
 */
export const se_DescribeInstanceCreditSpecificationsCommand = async (
  input: DescribeInstanceCreditSpecificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceCreditSpecificationsRequest(input, context),
    [_A]: _DICS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceEventNotificationAttributesCommand
 */
export const se_DescribeInstanceEventNotificationAttributesCommand = async (
  input: DescribeInstanceEventNotificationAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceEventNotificationAttributesRequest(input, context),
    [_A]: _DIENAe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceEventWindowsCommand
 */
export const se_DescribeInstanceEventWindowsCommand = async (
  input: DescribeInstanceEventWindowsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceEventWindowsRequest(input, context),
    [_A]: _DIEWe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstancesCommand
 */
export const se_DescribeInstancesCommand = async (
  input: DescribeInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstancesRequest(input, context),
    [_A]: _DIesc,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceStatusCommand
 */
export const se_DescribeInstanceStatusCommand = async (
  input: DescribeInstanceStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceStatusRequest(input, context),
    [_A]: _DISe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceTopologyCommand
 */
export const se_DescribeInstanceTopologyCommand = async (
  input: DescribeInstanceTopologyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceTopologyRequest(input, context),
    [_A]: _DIT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceTypeOfferingsCommand
 */
export const se_DescribeInstanceTypeOfferingsCommand = async (
  input: DescribeInstanceTypeOfferingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceTypeOfferingsRequest(input, context),
    [_A]: _DITO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInstanceTypesCommand
 */
export const se_DescribeInstanceTypesCommand = async (
  input: DescribeInstanceTypesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInstanceTypesRequest(input, context),
    [_A]: _DITe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeInternetGatewaysCommand
 */
export const se_DescribeInternetGatewaysCommand = async (
  input: DescribeInternetGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeInternetGatewaysRequest(input, context),
    [_A]: _DIGe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIpamByoasnCommand
 */
export const se_DescribeIpamByoasnCommand = async (
  input: DescribeIpamByoasnCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamByoasnRequest(input, context),
    [_A]: _DIBe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIpamPoolsCommand
 */
export const se_DescribeIpamPoolsCommand = async (
  input: DescribeIpamPoolsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamPoolsRequest(input, context),
    [_A]: _DIPe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIpamResourceDiscoveriesCommand
 */
export const se_DescribeIpamResourceDiscoveriesCommand = async (
  input: DescribeIpamResourceDiscoveriesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamResourceDiscoveriesRequest(input, context),
    [_A]: _DIRDe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIpamResourceDiscoveryAssociationsCommand
 */
export const se_DescribeIpamResourceDiscoveryAssociationsCommand = async (
  input: DescribeIpamResourceDiscoveryAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamResourceDiscoveryAssociationsRequest(input, context),
    [_A]: _DIRDA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIpamsCommand
 */
export const se_DescribeIpamsCommand = async (
  input: DescribeIpamsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamsRequest(input, context),
    [_A]: _DIescr,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIpamScopesCommand
 */
export const se_DescribeIpamScopesCommand = async (
  input: DescribeIpamScopesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIpamScopesRequest(input, context),
    [_A]: _DISes,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeIpv6PoolsCommand
 */
export const se_DescribeIpv6PoolsCommand = async (
  input: DescribeIpv6PoolsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeIpv6PoolsRequest(input, context),
    [_A]: _DIPes,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeKeyPairsCommand
 */
export const se_DescribeKeyPairsCommand = async (
  input: DescribeKeyPairsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeKeyPairsRequest(input, context),
    [_A]: _DKPe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLaunchTemplatesCommand
 */
export const se_DescribeLaunchTemplatesCommand = async (
  input: DescribeLaunchTemplatesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLaunchTemplatesRequest(input, context),
    [_A]: _DLTe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLaunchTemplateVersionsCommand
 */
export const se_DescribeLaunchTemplateVersionsCommand = async (
  input: DescribeLaunchTemplateVersionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLaunchTemplateVersionsRequest(input, context),
    [_A]: _DLTVe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLocalGatewayRouteTablesCommand
 */
export const se_DescribeLocalGatewayRouteTablesCommand = async (
  input: DescribeLocalGatewayRouteTablesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayRouteTablesRequest(input, context),
    [_A]: _DLGRTe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand
 */
export const se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (
  input: DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(input, context),
    [_A]: _DLGRTVIGAe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand
 */
export const se_DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (
  input: DescribeLocalGatewayRouteTableVpcAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayRouteTableVpcAssociationsRequest(input, context),
    [_A]: _DLGRTVAe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLocalGatewaysCommand
 */
export const se_DescribeLocalGatewaysCommand = async (
  input: DescribeLocalGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewaysRequest(input, context),
    [_A]: _DLG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand
 */
export const se_DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (
  input: DescribeLocalGatewayVirtualInterfaceGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayVirtualInterfaceGroupsRequest(input, context),
    [_A]: _DLGVIG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand
 */
export const se_DescribeLocalGatewayVirtualInterfacesCommand = async (
  input: DescribeLocalGatewayVirtualInterfacesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLocalGatewayVirtualInterfacesRequest(input, context),
    [_A]: _DLGVI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeLockedSnapshotsCommand
 */
export const se_DescribeLockedSnapshotsCommand = async (
  input: DescribeLockedSnapshotsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeLockedSnapshotsRequest(input, context),
    [_A]: _DLS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeManagedPrefixListsCommand
 */
export const se_DescribeManagedPrefixListsCommand = async (
  input: DescribeManagedPrefixListsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeManagedPrefixListsRequest(input, context),
    [_A]: _DMPLe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeMovingAddressesCommand
 */
export const se_DescribeMovingAddressesCommand = async (
  input: DescribeMovingAddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeMovingAddressesRequest(input, context),
    [_A]: _DMA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNatGatewaysCommand
 */
export const se_DescribeNatGatewaysCommand = async (
  input: DescribeNatGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNatGatewaysRequest(input, context),
    [_A]: _DNGe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkAclsCommand
 */
export const se_DescribeNetworkAclsCommand = async (
  input: DescribeNetworkAclsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkAclsRequest(input, context),
    [_A]: _DNAe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand
 */
export const se_DescribeNetworkInsightsAccessScopeAnalysesCommand = async (
  input: DescribeNetworkInsightsAccessScopeAnalysesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInsightsAccessScopeAnalysesRequest(input, context),
    [_A]: _DNIASAe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInsightsAccessScopesCommand
 */
export const se_DescribeNetworkInsightsAccessScopesCommand = async (
  input: DescribeNetworkInsightsAccessScopesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInsightsAccessScopesRequest(input, context),
    [_A]: _DNIASe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInsightsAnalysesCommand
 */
export const se_DescribeNetworkInsightsAnalysesCommand = async (
  input: DescribeNetworkInsightsAnalysesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInsightsAnalysesRequest(input, context),
    [_A]: _DNIAe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInsightsPathsCommand
 */
export const se_DescribeNetworkInsightsPathsCommand = async (
  input: DescribeNetworkInsightsPathsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInsightsPathsRequest(input, context),
    [_A]: _DNIPes,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInterfaceAttributeCommand
 */
export const se_DescribeNetworkInterfaceAttributeCommand = async (
  input: DescribeNetworkInterfaceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInterfaceAttributeRequest(input, context),
    [_A]: _DNIAes,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInterfacePermissionsCommand
 */
export const se_DescribeNetworkInterfacePermissionsCommand = async (
  input: DescribeNetworkInterfacePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInterfacePermissionsRequest(input, context),
    [_A]: _DNIPesc,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeNetworkInterfacesCommand
 */
export const se_DescribeNetworkInterfacesCommand = async (
  input: DescribeNetworkInterfacesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeNetworkInterfacesRequest(input, context),
    [_A]: _DNIe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribePlacementGroupsCommand
 */
export const se_DescribePlacementGroupsCommand = async (
  input: DescribePlacementGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribePlacementGroupsRequest(input, context),
    [_A]: _DPGe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribePrefixListsCommand
 */
export const se_DescribePrefixListsCommand = async (
  input: DescribePrefixListsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribePrefixListsRequest(input, context),
    [_A]: _DPL,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribePrincipalIdFormatCommand
 */
export const se_DescribePrincipalIdFormatCommand = async (
  input: DescribePrincipalIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribePrincipalIdFormatRequest(input, context),
    [_A]: _DPIF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribePublicIpv4PoolsCommand
 */
export const se_DescribePublicIpv4PoolsCommand = async (
  input: DescribePublicIpv4PoolsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribePublicIpv4PoolsRequest(input, context),
    [_A]: _DPIPe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeRegionsCommand
 */
export const se_DescribeRegionsCommand = async (
  input: DescribeRegionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeRegionsRequest(input, context),
    [_A]: _DRe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeReplaceRootVolumeTasksCommand
 */
export const se_DescribeReplaceRootVolumeTasksCommand = async (
  input: DescribeReplaceRootVolumeTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeReplaceRootVolumeTasksRequest(input, context),
    [_A]: _DRRVT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeReservedInstancesCommand
 */
export const se_DescribeReservedInstancesCommand = async (
  input: DescribeReservedInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedInstancesRequest(input, context),
    [_A]: _DRI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeReservedInstancesListingsCommand
 */
export const se_DescribeReservedInstancesListingsCommand = async (
  input: DescribeReservedInstancesListingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedInstancesListingsRequest(input, context),
    [_A]: _DRIL,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeReservedInstancesModificationsCommand
 */
export const se_DescribeReservedInstancesModificationsCommand = async (
  input: DescribeReservedInstancesModificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedInstancesModificationsRequest(input, context),
    [_A]: _DRIM,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeReservedInstancesOfferingsCommand
 */
export const se_DescribeReservedInstancesOfferingsCommand = async (
  input: DescribeReservedInstancesOfferingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeReservedInstancesOfferingsRequest(input, context),
    [_A]: _DRIO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeRouteTablesCommand
 */
export const se_DescribeRouteTablesCommand = async (
  input: DescribeRouteTablesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeRouteTablesRequest(input, context),
    [_A]: _DRTe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeScheduledInstanceAvailabilityCommand
 */
export const se_DescribeScheduledInstanceAvailabilityCommand = async (
  input: DescribeScheduledInstanceAvailabilityCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeScheduledInstanceAvailabilityRequest(input, context),
    [_A]: _DSIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeScheduledInstancesCommand
 */
export const se_DescribeScheduledInstancesCommand = async (
  input: DescribeScheduledInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeScheduledInstancesRequest(input, context),
    [_A]: _DSI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSecurityGroupReferencesCommand
 */
export const se_DescribeSecurityGroupReferencesCommand = async (
  input: DescribeSecurityGroupReferencesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSecurityGroupReferencesRequest(input, context),
    [_A]: _DSGR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSecurityGroupRulesCommand
 */
export const se_DescribeSecurityGroupRulesCommand = async (
  input: DescribeSecurityGroupRulesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSecurityGroupRulesRequest(input, context),
    [_A]: _DSGRe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSecurityGroupsCommand
 */
export const se_DescribeSecurityGroupsCommand = async (
  input: DescribeSecurityGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSecurityGroupsRequest(input, context),
    [_A]: _DSGe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSnapshotAttributeCommand
 */
export const se_DescribeSnapshotAttributeCommand = async (
  input: DescribeSnapshotAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSnapshotAttributeRequest(input, context),
    [_A]: _DSA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSnapshotsCommand
 */
export const se_DescribeSnapshotsCommand = async (
  input: DescribeSnapshotsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSnapshotsRequest(input, context),
    [_A]: _DSes,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSnapshotTierStatusCommand
 */
export const se_DescribeSnapshotTierStatusCommand = async (
  input: DescribeSnapshotTierStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSnapshotTierStatusRequest(input, context),
    [_A]: _DSTS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSpotDatafeedSubscriptionCommand
 */
export const se_DescribeSpotDatafeedSubscriptionCommand = async (
  input: DescribeSpotDatafeedSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotDatafeedSubscriptionRequest(input, context),
    [_A]: _DSDSe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSpotFleetInstancesCommand
 */
export const se_DescribeSpotFleetInstancesCommand = async (
  input: DescribeSpotFleetInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotFleetInstancesRequest(input, context),
    [_A]: _DSFI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSpotFleetRequestHistoryCommand
 */
export const se_DescribeSpotFleetRequestHistoryCommand = async (
  input: DescribeSpotFleetRequestHistoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotFleetRequestHistoryRequest(input, context),
    [_A]: _DSFRH,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSpotFleetRequestsCommand
 */
export const se_DescribeSpotFleetRequestsCommand = async (
  input: DescribeSpotFleetRequestsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotFleetRequestsRequest(input, context),
    [_A]: _DSFR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSpotInstanceRequestsCommand
 */
export const se_DescribeSpotInstanceRequestsCommand = async (
  input: DescribeSpotInstanceRequestsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotInstanceRequestsRequest(input, context),
    [_A]: _DSIR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSpotPriceHistoryCommand
 */
export const se_DescribeSpotPriceHistoryCommand = async (
  input: DescribeSpotPriceHistoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSpotPriceHistoryRequest(input, context),
    [_A]: _DSPH,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeStaleSecurityGroupsCommand
 */
export const se_DescribeStaleSecurityGroupsCommand = async (
  input: DescribeStaleSecurityGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeStaleSecurityGroupsRequest(input, context),
    [_A]: _DSSG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeStoreImageTasksCommand
 */
export const se_DescribeStoreImageTasksCommand = async (
  input: DescribeStoreImageTasksCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeStoreImageTasksRequest(input, context),
    [_A]: _DSIT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeSubnetsCommand
 */
export const se_DescribeSubnetsCommand = async (
  input: DescribeSubnetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeSubnetsRequest(input, context),
    [_A]: _DSesc,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTagsCommand
 */
export const se_DescribeTagsCommand = async (
  input: DescribeTagsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTagsRequest(input, context),
    [_A]: _DTe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTrafficMirrorFiltersCommand
 */
export const se_DescribeTrafficMirrorFiltersCommand = async (
  input: DescribeTrafficMirrorFiltersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTrafficMirrorFiltersRequest(input, context),
    [_A]: _DTMFe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTrafficMirrorSessionsCommand
 */
export const se_DescribeTrafficMirrorSessionsCommand = async (
  input: DescribeTrafficMirrorSessionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTrafficMirrorSessionsRequest(input, context),
    [_A]: _DTMSe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTrafficMirrorTargetsCommand
 */
export const se_DescribeTrafficMirrorTargetsCommand = async (
  input: DescribeTrafficMirrorTargetsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTrafficMirrorTargetsRequest(input, context),
    [_A]: _DTMTe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayAttachmentsCommand
 */
export const se_DescribeTransitGatewayAttachmentsCommand = async (
  input: DescribeTransitGatewayAttachmentsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayAttachmentsRequest(input, context),
    [_A]: _DTGA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayConnectPeersCommand
 */
export const se_DescribeTransitGatewayConnectPeersCommand = async (
  input: DescribeTransitGatewayConnectPeersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayConnectPeersRequest(input, context),
    [_A]: _DTGCPe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayConnectsCommand
 */
export const se_DescribeTransitGatewayConnectsCommand = async (
  input: DescribeTransitGatewayConnectsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayConnectsRequest(input, context),
    [_A]: _DTGCe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand
 */
export const se_DescribeTransitGatewayMulticastDomainsCommand = async (
  input: DescribeTransitGatewayMulticastDomainsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayMulticastDomainsRequest(input, context),
    [_A]: _DTGMDe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand
 */
export const se_DescribeTransitGatewayPeeringAttachmentsCommand = async (
  input: DescribeTransitGatewayPeeringAttachmentsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayPeeringAttachmentsRequest(input, context),
    [_A]: _DTGPAe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayPolicyTablesCommand
 */
export const se_DescribeTransitGatewayPolicyTablesCommand = async (
  input: DescribeTransitGatewayPolicyTablesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayPolicyTablesRequest(input, context),
    [_A]: _DTGPTe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayRouteTableAnnouncementsCommand
 */
export const se_DescribeTransitGatewayRouteTableAnnouncementsCommand = async (
  input: DescribeTransitGatewayRouteTableAnnouncementsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayRouteTableAnnouncementsRequest(input, context),
    [_A]: _DTGRTAe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayRouteTablesCommand
 */
export const se_DescribeTransitGatewayRouteTablesCommand = async (
  input: DescribeTransitGatewayRouteTablesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayRouteTablesRequest(input, context),
    [_A]: _DTGRTe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewaysCommand
 */
export const se_DescribeTransitGatewaysCommand = async (
  input: DescribeTransitGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewaysRequest(input, context),
    [_A]: _DTGe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand
 */
export const se_DescribeTransitGatewayVpcAttachmentsCommand = async (
  input: DescribeTransitGatewayVpcAttachmentsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTransitGatewayVpcAttachmentsRequest(input, context),
    [_A]: _DTGVAe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeTrunkInterfaceAssociationsCommand
 */
export const se_DescribeTrunkInterfaceAssociationsCommand = async (
  input: DescribeTrunkInterfaceAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeTrunkInterfaceAssociationsRequest(input, context),
    [_A]: _DTIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVerifiedAccessEndpointsCommand
 */
export const se_DescribeVerifiedAccessEndpointsCommand = async (
  input: DescribeVerifiedAccessEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessEndpointsRequest(input, context),
    [_A]: _DVAEe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVerifiedAccessGroupsCommand
 */
export const se_DescribeVerifiedAccessGroupsCommand = async (
  input: DescribeVerifiedAccessGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessGroupsRequest(input, context),
    [_A]: _DVAGe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVerifiedAccessInstanceLoggingConfigurationsCommand
 */
export const se_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand = async (
  input: DescribeVerifiedAccessInstanceLoggingConfigurationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessInstanceLoggingConfigurationsRequest(input, context),
    [_A]: _DVAILC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVerifiedAccessInstancesCommand
 */
export const se_DescribeVerifiedAccessInstancesCommand = async (
  input: DescribeVerifiedAccessInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessInstancesRequest(input, context),
    [_A]: _DVAIe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVerifiedAccessTrustProvidersCommand
 */
export const se_DescribeVerifiedAccessTrustProvidersCommand = async (
  input: DescribeVerifiedAccessTrustProvidersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVerifiedAccessTrustProvidersRequest(input, context),
    [_A]: _DVATPe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVolumeAttributeCommand
 */
export const se_DescribeVolumeAttributeCommand = async (
  input: DescribeVolumeAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVolumeAttributeRequest(input, context),
    [_A]: _DVA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVolumesCommand
 */
export const se_DescribeVolumesCommand = async (
  input: DescribeVolumesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVolumesRequest(input, context),
    [_A]: _DVes,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVolumesModificationsCommand
 */
export const se_DescribeVolumesModificationsCommand = async (
  input: DescribeVolumesModificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVolumesModificationsRequest(input, context),
    [_A]: _DVM,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVolumeStatusCommand
 */
export const se_DescribeVolumeStatusCommand = async (
  input: DescribeVolumeStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVolumeStatusRequest(input, context),
    [_A]: _DVS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcAttributeCommand
 */
export const se_DescribeVpcAttributeCommand = async (
  input: DescribeVpcAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcAttributeRequest(input, context),
    [_A]: _DVAe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcClassicLinkCommand
 */
export const se_DescribeVpcClassicLinkCommand = async (
  input: DescribeVpcClassicLinkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcClassicLinkRequest(input, context),
    [_A]: _DVCL,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand
 */
export const se_DescribeVpcClassicLinkDnsSupportCommand = async (
  input: DescribeVpcClassicLinkDnsSupportCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcClassicLinkDnsSupportRequest(input, context),
    [_A]: _DVCLDS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand
 */
export const se_DescribeVpcEndpointConnectionNotificationsCommand = async (
  input: DescribeVpcEndpointConnectionNotificationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointConnectionNotificationsRequest(input, context),
    [_A]: _DVECNe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcEndpointConnectionsCommand
 */
export const se_DescribeVpcEndpointConnectionsCommand = async (
  input: DescribeVpcEndpointConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointConnectionsRequest(input, context),
    [_A]: _DVEC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcEndpointsCommand
 */
export const se_DescribeVpcEndpointsCommand = async (
  input: DescribeVpcEndpointsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointsRequest(input, context),
    [_A]: _DVEe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand
 */
export const se_DescribeVpcEndpointServiceConfigurationsCommand = async (
  input: DescribeVpcEndpointServiceConfigurationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointServiceConfigurationsRequest(input, context),
    [_A]: _DVESCe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcEndpointServicePermissionsCommand
 */
export const se_DescribeVpcEndpointServicePermissionsCommand = async (
  input: DescribeVpcEndpointServicePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointServicePermissionsRequest(input, context),
    [_A]: _DVESP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcEndpointServicesCommand
 */
export const se_DescribeVpcEndpointServicesCommand = async (
  input: DescribeVpcEndpointServicesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcEndpointServicesRequest(input, context),
    [_A]: _DVES,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcPeeringConnectionsCommand
 */
export const se_DescribeVpcPeeringConnectionsCommand = async (
  input: DescribeVpcPeeringConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcPeeringConnectionsRequest(input, context),
    [_A]: _DVPCe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpcsCommand
 */
export const se_DescribeVpcsCommand = async (
  input: DescribeVpcsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpcsRequest(input, context),
    [_A]: _DVesc,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpnConnectionsCommand
 */
export const se_DescribeVpnConnectionsCommand = async (
  input: DescribeVpnConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpnConnectionsRequest(input, context),
    [_A]: _DVCe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DescribeVpnGatewaysCommand
 */
export const se_DescribeVpnGatewaysCommand = async (
  input: DescribeVpnGatewaysCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DescribeVpnGatewaysRequest(input, context),
    [_A]: _DVGe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DetachClassicLinkVpcCommand
 */
export const se_DetachClassicLinkVpcCommand = async (
  input: DetachClassicLinkVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DetachClassicLinkVpcRequest(input, context),
    [_A]: _DCLV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DetachInternetGatewayCommand
 */
export const se_DetachInternetGatewayCommand = async (
  input: DetachInternetGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DetachInternetGatewayRequest(input, context),
    [_A]: _DIGet,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DetachNetworkInterfaceCommand
 */
export const se_DetachNetworkInterfaceCommand = async (
  input: DetachNetworkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DetachNetworkInterfaceRequest(input, context),
    [_A]: _DNIet,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DetachVerifiedAccessTrustProviderCommand
 */
export const se_DetachVerifiedAccessTrustProviderCommand = async (
  input: DetachVerifiedAccessTrustProviderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DetachVerifiedAccessTrustProviderRequest(input, context),
    [_A]: _DVATPet,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DetachVolumeCommand
 */
export const se_DetachVolumeCommand = async (
  input: DetachVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DetachVolumeRequest(input, context),
    [_A]: _DVet,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DetachVpnGatewayCommand
 */
export const se_DetachVpnGatewayCommand = async (
  input: DetachVpnGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DetachVpnGatewayRequest(input, context),
    [_A]: _DVGet,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableAddressTransferCommand
 */
export const se_DisableAddressTransferCommand = async (
  input: DisableAddressTransferCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableAddressTransferRequest(input, context),
    [_A]: _DATi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableAwsNetworkPerformanceMetricSubscriptionCommand
 */
export const se_DisableAwsNetworkPerformanceMetricSubscriptionCommand = async (
  input: DisableAwsNetworkPerformanceMetricSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableAwsNetworkPerformanceMetricSubscriptionRequest(input, context),
    [_A]: _DANPMSi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableEbsEncryptionByDefaultCommand
 */
export const se_DisableEbsEncryptionByDefaultCommand = async (
  input: DisableEbsEncryptionByDefaultCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableEbsEncryptionByDefaultRequest(input, context),
    [_A]: _DEEBD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableFastLaunchCommand
 */
export const se_DisableFastLaunchCommand = async (
  input: DisableFastLaunchCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableFastLaunchRequest(input, context),
    [_A]: _DFLi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableFastSnapshotRestoresCommand
 */
export const se_DisableFastSnapshotRestoresCommand = async (
  input: DisableFastSnapshotRestoresCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableFastSnapshotRestoresRequest(input, context),
    [_A]: _DFSRi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableImageCommand
 */
export const se_DisableImageCommand = async (
  input: DisableImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableImageRequest(input, context),
    [_A]: _DIi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableImageBlockPublicAccessCommand
 */
export const se_DisableImageBlockPublicAccessCommand = async (
  input: DisableImageBlockPublicAccessCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableImageBlockPublicAccessRequest(input, context),
    [_A]: _DIBPA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableImageDeprecationCommand
 */
export const se_DisableImageDeprecationCommand = async (
  input: DisableImageDeprecationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableImageDeprecationRequest(input, context),
    [_A]: _DID,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableIpamOrganizationAdminAccountCommand
 */
export const se_DisableIpamOrganizationAdminAccountCommand = async (
  input: DisableIpamOrganizationAdminAccountCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableIpamOrganizationAdminAccountRequest(input, context),
    [_A]: _DIOAA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableSerialConsoleAccessCommand
 */
export const se_DisableSerialConsoleAccessCommand = async (
  input: DisableSerialConsoleAccessCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableSerialConsoleAccessRequest(input, context),
    [_A]: _DSCA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableSnapshotBlockPublicAccessCommand
 */
export const se_DisableSnapshotBlockPublicAccessCommand = async (
  input: DisableSnapshotBlockPublicAccessCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableSnapshotBlockPublicAccessRequest(input, context),
    [_A]: _DSBPA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand
 */
export const se_DisableTransitGatewayRouteTablePropagationCommand = async (
  input: DisableTransitGatewayRouteTablePropagationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableTransitGatewayRouteTablePropagationRequest(input, context),
    [_A]: _DTGRTP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableVgwRoutePropagationCommand
 */
export const se_DisableVgwRoutePropagationCommand = async (
  input: DisableVgwRoutePropagationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableVgwRoutePropagationRequest(input, context),
    [_A]: _DVRP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableVpcClassicLinkCommand
 */
export const se_DisableVpcClassicLinkCommand = async (
  input: DisableVpcClassicLinkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableVpcClassicLinkRequest(input, context),
    [_A]: _DVCLi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisableVpcClassicLinkDnsSupportCommand
 */
export const se_DisableVpcClassicLinkDnsSupportCommand = async (
  input: DisableVpcClassicLinkDnsSupportCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisableVpcClassicLinkDnsSupportRequest(input, context),
    [_A]: _DVCLDSi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateAddressCommand
 */
export const se_DisassociateAddressCommand = async (
  input: DisassociateAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateAddressRequest(input, context),
    [_A]: _DAi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateClientVpnTargetNetworkCommand
 */
export const se_DisassociateClientVpnTargetNetworkCommand = async (
  input: DisassociateClientVpnTargetNetworkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateClientVpnTargetNetworkRequest(input, context),
    [_A]: _DCVTNi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand
 */
export const se_DisassociateEnclaveCertificateIamRoleCommand = async (
  input: DisassociateEnclaveCertificateIamRoleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateEnclaveCertificateIamRoleRequest(input, context),
    [_A]: _DECIR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateIamInstanceProfileCommand
 */
export const se_DisassociateIamInstanceProfileCommand = async (
  input: DisassociateIamInstanceProfileCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateIamInstanceProfileRequest(input, context),
    [_A]: _DIIP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateInstanceEventWindowCommand
 */
export const se_DisassociateInstanceEventWindowCommand = async (
  input: DisassociateInstanceEventWindowCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateInstanceEventWindowRequest(input, context),
    [_A]: _DIEWi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateIpamByoasnCommand
 */
export const se_DisassociateIpamByoasnCommand = async (
  input: DisassociateIpamByoasnCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateIpamByoasnRequest(input, context),
    [_A]: _DIBi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateIpamResourceDiscoveryCommand
 */
export const se_DisassociateIpamResourceDiscoveryCommand = async (
  input: DisassociateIpamResourceDiscoveryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateIpamResourceDiscoveryRequest(input, context),
    [_A]: _DIRDi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateNatGatewayAddressCommand
 */
export const se_DisassociateNatGatewayAddressCommand = async (
  input: DisassociateNatGatewayAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateNatGatewayAddressRequest(input, context),
    [_A]: _DNGA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateRouteTableCommand
 */
export const se_DisassociateRouteTableCommand = async (
  input: DisassociateRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateRouteTableRequest(input, context),
    [_A]: _DRTi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateSubnetCidrBlockCommand
 */
export const se_DisassociateSubnetCidrBlockCommand = async (
  input: DisassociateSubnetCidrBlockCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateSubnetCidrBlockRequest(input, context),
    [_A]: _DSCB,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand
 */
export const se_DisassociateTransitGatewayMulticastDomainCommand = async (
  input: DisassociateTransitGatewayMulticastDomainCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateTransitGatewayMulticastDomainRequest(input, context),
    [_A]: _DTGMDi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateTransitGatewayPolicyTableCommand
 */
export const se_DisassociateTransitGatewayPolicyTableCommand = async (
  input: DisassociateTransitGatewayPolicyTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateTransitGatewayPolicyTableRequest(input, context),
    [_A]: _DTGPTi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateTransitGatewayRouteTableCommand
 */
export const se_DisassociateTransitGatewayRouteTableCommand = async (
  input: DisassociateTransitGatewayRouteTableCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateTransitGatewayRouteTableRequest(input, context),
    [_A]: _DTGRTi,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateTrunkInterfaceCommand
 */
export const se_DisassociateTrunkInterfaceCommand = async (
  input: DisassociateTrunkInterfaceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateTrunkInterfaceRequest(input, context),
    [_A]: _DTI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2DisassociateVpcCidrBlockCommand
 */
export const se_DisassociateVpcCidrBlockCommand = async (
  input: DisassociateVpcCidrBlockCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_DisassociateVpcCidrBlockRequest(input, context),
    [_A]: _DVCB,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableAddressTransferCommand
 */
export const se_EnableAddressTransferCommand = async (
  input: EnableAddressTransferCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableAddressTransferRequest(input, context),
    [_A]: _EAT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableAwsNetworkPerformanceMetricSubscriptionCommand
 */
export const se_EnableAwsNetworkPerformanceMetricSubscriptionCommand = async (
  input: EnableAwsNetworkPerformanceMetricSubscriptionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableAwsNetworkPerformanceMetricSubscriptionRequest(input, context),
    [_A]: _EANPMS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableEbsEncryptionByDefaultCommand
 */
export const se_EnableEbsEncryptionByDefaultCommand = async (
  input: EnableEbsEncryptionByDefaultCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableEbsEncryptionByDefaultRequest(input, context),
    [_A]: _EEEBD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableFastLaunchCommand
 */
export const se_EnableFastLaunchCommand = async (
  input: EnableFastLaunchCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableFastLaunchRequest(input, context),
    [_A]: _EFL,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableFastSnapshotRestoresCommand
 */
export const se_EnableFastSnapshotRestoresCommand = async (
  input: EnableFastSnapshotRestoresCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableFastSnapshotRestoresRequest(input, context),
    [_A]: _EFSR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableImageCommand
 */
export const se_EnableImageCommand = async (
  input: EnableImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableImageRequest(input, context),
    [_A]: _EI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableImageBlockPublicAccessCommand
 */
export const se_EnableImageBlockPublicAccessCommand = async (
  input: EnableImageBlockPublicAccessCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableImageBlockPublicAccessRequest(input, context),
    [_A]: _EIBPA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableImageDeprecationCommand
 */
export const se_EnableImageDeprecationCommand = async (
  input: EnableImageDeprecationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableImageDeprecationRequest(input, context),
    [_A]: _EID,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableIpamOrganizationAdminAccountCommand
 */
export const se_EnableIpamOrganizationAdminAccountCommand = async (
  input: EnableIpamOrganizationAdminAccountCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableIpamOrganizationAdminAccountRequest(input, context),
    [_A]: _EIOAA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableReachabilityAnalyzerOrganizationSharingCommand
 */
export const se_EnableReachabilityAnalyzerOrganizationSharingCommand = async (
  input: EnableReachabilityAnalyzerOrganizationSharingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableReachabilityAnalyzerOrganizationSharingRequest(input, context),
    [_A]: _ERAOS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableSerialConsoleAccessCommand
 */
export const se_EnableSerialConsoleAccessCommand = async (
  input: EnableSerialConsoleAccessCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableSerialConsoleAccessRequest(input, context),
    [_A]: _ESCA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableSnapshotBlockPublicAccessCommand
 */
export const se_EnableSnapshotBlockPublicAccessCommand = async (
  input: EnableSnapshotBlockPublicAccessCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableSnapshotBlockPublicAccessRequest(input, context),
    [_A]: _ESBPA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand
 */
export const se_EnableTransitGatewayRouteTablePropagationCommand = async (
  input: EnableTransitGatewayRouteTablePropagationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableTransitGatewayRouteTablePropagationRequest(input, context),
    [_A]: _ETGRTP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableVgwRoutePropagationCommand
 */
export const se_EnableVgwRoutePropagationCommand = async (
  input: EnableVgwRoutePropagationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableVgwRoutePropagationRequest(input, context),
    [_A]: _EVRP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableVolumeIOCommand
 */
export const se_EnableVolumeIOCommand = async (
  input: EnableVolumeIOCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableVolumeIORequest(input, context),
    [_A]: _EVIO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableVpcClassicLinkCommand
 */
export const se_EnableVpcClassicLinkCommand = async (
  input: EnableVpcClassicLinkCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableVpcClassicLinkRequest(input, context),
    [_A]: _EVCL,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2EnableVpcClassicLinkDnsSupportCommand
 */
export const se_EnableVpcClassicLinkDnsSupportCommand = async (
  input: EnableVpcClassicLinkDnsSupportCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_EnableVpcClassicLinkDnsSupportRequest(input, context),
    [_A]: _EVCLDS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand
 */
export const se_ExportClientVpnClientCertificateRevocationListCommand = async (
  input: ExportClientVpnClientCertificateRevocationListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ExportClientVpnClientCertificateRevocationListRequest(input, context),
    [_A]: _ECVCCRL,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ExportClientVpnClientConfigurationCommand
 */
export const se_ExportClientVpnClientConfigurationCommand = async (
  input: ExportClientVpnClientConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ExportClientVpnClientConfigurationRequest(input, context),
    [_A]: _ECVCC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ExportImageCommand
 */
export const se_ExportImageCommand = async (
  input: ExportImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ExportImageRequest(input, context),
    [_A]: _EIx,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ExportTransitGatewayRoutesCommand
 */
export const se_ExportTransitGatewayRoutesCommand = async (
  input: ExportTransitGatewayRoutesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ExportTransitGatewayRoutesRequest(input, context),
    [_A]: _ETGR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand
 */
export const se_GetAssociatedEnclaveCertificateIamRolesCommand = async (
  input: GetAssociatedEnclaveCertificateIamRolesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetAssociatedEnclaveCertificateIamRolesRequest(input, context),
    [_A]: _GAECIR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetAssociatedIpv6PoolCidrsCommand
 */
export const se_GetAssociatedIpv6PoolCidrsCommand = async (
  input: GetAssociatedIpv6PoolCidrsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetAssociatedIpv6PoolCidrsRequest(input, context),
    [_A]: _GAIPC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetAwsNetworkPerformanceDataCommand
 */
export const se_GetAwsNetworkPerformanceDataCommand = async (
  input: GetAwsNetworkPerformanceDataCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetAwsNetworkPerformanceDataRequest(input, context),
    [_A]: _GANPD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetCapacityReservationUsageCommand
 */
export const se_GetCapacityReservationUsageCommand = async (
  input: GetCapacityReservationUsageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetCapacityReservationUsageRequest(input, context),
    [_A]: _GCRU,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetCoipPoolUsageCommand
 */
export const se_GetCoipPoolUsageCommand = async (
  input: GetCoipPoolUsageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetCoipPoolUsageRequest(input, context),
    [_A]: _GCPU,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetConsoleOutputCommand
 */
export const se_GetConsoleOutputCommand = async (
  input: GetConsoleOutputCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetConsoleOutputRequest(input, context),
    [_A]: _GCO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetConsoleScreenshotCommand
 */
export const se_GetConsoleScreenshotCommand = async (
  input: GetConsoleScreenshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetConsoleScreenshotRequest(input, context),
    [_A]: _GCS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetDefaultCreditSpecificationCommand
 */
export const se_GetDefaultCreditSpecificationCommand = async (
  input: GetDefaultCreditSpecificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetDefaultCreditSpecificationRequest(input, context),
    [_A]: _GDCS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetEbsDefaultKmsKeyIdCommand
 */
export const se_GetEbsDefaultKmsKeyIdCommand = async (
  input: GetEbsDefaultKmsKeyIdCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetEbsDefaultKmsKeyIdRequest(input, context),
    [_A]: _GEDKKI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetEbsEncryptionByDefaultCommand
 */
export const se_GetEbsEncryptionByDefaultCommand = async (
  input: GetEbsEncryptionByDefaultCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetEbsEncryptionByDefaultRequest(input, context),
    [_A]: _GEEBD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetFlowLogsIntegrationTemplateCommand
 */
export const se_GetFlowLogsIntegrationTemplateCommand = async (
  input: GetFlowLogsIntegrationTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetFlowLogsIntegrationTemplateRequest(input, context),
    [_A]: _GFLIT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetGroupsForCapacityReservationCommand
 */
export const se_GetGroupsForCapacityReservationCommand = async (
  input: GetGroupsForCapacityReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetGroupsForCapacityReservationRequest(input, context),
    [_A]: _GGFCR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetHostReservationPurchasePreviewCommand
 */
export const se_GetHostReservationPurchasePreviewCommand = async (
  input: GetHostReservationPurchasePreviewCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetHostReservationPurchasePreviewRequest(input, context),
    [_A]: _GHRPP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetImageBlockPublicAccessStateCommand
 */
export const se_GetImageBlockPublicAccessStateCommand = async (
  input: GetImageBlockPublicAccessStateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetImageBlockPublicAccessStateRequest(input, context),
    [_A]: _GIBPAS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand
 */
export const se_GetInstanceTypesFromInstanceRequirementsCommand = async (
  input: GetInstanceTypesFromInstanceRequirementsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetInstanceTypesFromInstanceRequirementsRequest(input, context),
    [_A]: _GITFIR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetInstanceUefiDataCommand
 */
export const se_GetInstanceUefiDataCommand = async (
  input: GetInstanceUefiDataCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetInstanceUefiDataRequest(input, context),
    [_A]: _GIUD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetIpamAddressHistoryCommand
 */
export const se_GetIpamAddressHistoryCommand = async (
  input: GetIpamAddressHistoryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetIpamAddressHistoryRequest(input, context),
    [_A]: _GIAH,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetIpamDiscoveredAccountsCommand
 */
export const se_GetIpamDiscoveredAccountsCommand = async (
  input: GetIpamDiscoveredAccountsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetIpamDiscoveredAccountsRequest(input, context),
    [_A]: _GIDA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetIpamDiscoveredPublicAddressesCommand
 */
export const se_GetIpamDiscoveredPublicAddressesCommand = async (
  input: GetIpamDiscoveredPublicAddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetIpamDiscoveredPublicAddressesRequest(input, context),
    [_A]: _GIDPA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetIpamDiscoveredResourceCidrsCommand
 */
export const se_GetIpamDiscoveredResourceCidrsCommand = async (
  input: GetIpamDiscoveredResourceCidrsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetIpamDiscoveredResourceCidrsRequest(input, context),
    [_A]: _GIDRC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetIpamPoolAllocationsCommand
 */
export const se_GetIpamPoolAllocationsCommand = async (
  input: GetIpamPoolAllocationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetIpamPoolAllocationsRequest(input, context),
    [_A]: _GIPA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetIpamPoolCidrsCommand
 */
export const se_GetIpamPoolCidrsCommand = async (
  input: GetIpamPoolCidrsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetIpamPoolCidrsRequest(input, context),
    [_A]: _GIPC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetIpamResourceCidrsCommand
 */
export const se_GetIpamResourceCidrsCommand = async (
  input: GetIpamResourceCidrsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetIpamResourceCidrsRequest(input, context),
    [_A]: _GIRC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetLaunchTemplateDataCommand
 */
export const se_GetLaunchTemplateDataCommand = async (
  input: GetLaunchTemplateDataCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetLaunchTemplateDataRequest(input, context),
    [_A]: _GLTD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetManagedPrefixListAssociationsCommand
 */
export const se_GetManagedPrefixListAssociationsCommand = async (
  input: GetManagedPrefixListAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetManagedPrefixListAssociationsRequest(input, context),
    [_A]: _GMPLA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetManagedPrefixListEntriesCommand
 */
export const se_GetManagedPrefixListEntriesCommand = async (
  input: GetManagedPrefixListEntriesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetManagedPrefixListEntriesRequest(input, context),
    [_A]: _GMPLE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand
 */
export const se_GetNetworkInsightsAccessScopeAnalysisFindingsCommand = async (
  input: GetNetworkInsightsAccessScopeAnalysisFindingsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetNetworkInsightsAccessScopeAnalysisFindingsRequest(input, context),
    [_A]: _GNIASAF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetNetworkInsightsAccessScopeContentCommand
 */
export const se_GetNetworkInsightsAccessScopeContentCommand = async (
  input: GetNetworkInsightsAccessScopeContentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetNetworkInsightsAccessScopeContentRequest(input, context),
    [_A]: _GNIASC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetPasswordDataCommand
 */
export const se_GetPasswordDataCommand = async (
  input: GetPasswordDataCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetPasswordDataRequest(input, context),
    [_A]: _GPD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetReservedInstancesExchangeQuoteCommand
 */
export const se_GetReservedInstancesExchangeQuoteCommand = async (
  input: GetReservedInstancesExchangeQuoteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetReservedInstancesExchangeQuoteRequest(input, context),
    [_A]: _GRIEQ,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetSecurityGroupsForVpcCommand
 */
export const se_GetSecurityGroupsForVpcCommand = async (
  input: GetSecurityGroupsForVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetSecurityGroupsForVpcRequest(input, context),
    [_A]: _GSGFV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetSerialConsoleAccessStatusCommand
 */
export const se_GetSerialConsoleAccessStatusCommand = async (
  input: GetSerialConsoleAccessStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetSerialConsoleAccessStatusRequest(input, context),
    [_A]: _GSCAS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetSnapshotBlockPublicAccessStateCommand
 */
export const se_GetSnapshotBlockPublicAccessStateCommand = async (
  input: GetSnapshotBlockPublicAccessStateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetSnapshotBlockPublicAccessStateRequest(input, context),
    [_A]: _GSBPAS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetSpotPlacementScoresCommand
 */
export const se_GetSpotPlacementScoresCommand = async (
  input: GetSpotPlacementScoresCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetSpotPlacementScoresRequest(input, context),
    [_A]: _GSPS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetSubnetCidrReservationsCommand
 */
export const se_GetSubnetCidrReservationsCommand = async (
  input: GetSubnetCidrReservationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetSubnetCidrReservationsRequest(input, context),
    [_A]: _GSCR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand
 */
export const se_GetTransitGatewayAttachmentPropagationsCommand = async (
  input: GetTransitGatewayAttachmentPropagationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayAttachmentPropagationsRequest(input, context),
    [_A]: _GTGAP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand
 */
export const se_GetTransitGatewayMulticastDomainAssociationsCommand = async (
  input: GetTransitGatewayMulticastDomainAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayMulticastDomainAssociationsRequest(input, context),
    [_A]: _GTGMDA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayPolicyTableAssociationsCommand
 */
export const se_GetTransitGatewayPolicyTableAssociationsCommand = async (
  input: GetTransitGatewayPolicyTableAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayPolicyTableAssociationsRequest(input, context),
    [_A]: _GTGPTA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayPolicyTableEntriesCommand
 */
export const se_GetTransitGatewayPolicyTableEntriesCommand = async (
  input: GetTransitGatewayPolicyTableEntriesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayPolicyTableEntriesRequest(input, context),
    [_A]: _GTGPTE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayPrefixListReferencesCommand
 */
export const se_GetTransitGatewayPrefixListReferencesCommand = async (
  input: GetTransitGatewayPrefixListReferencesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayPrefixListReferencesRequest(input, context),
    [_A]: _GTGPLR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand
 */
export const se_GetTransitGatewayRouteTableAssociationsCommand = async (
  input: GetTransitGatewayRouteTableAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayRouteTableAssociationsRequest(input, context),
    [_A]: _GTGRTA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand
 */
export const se_GetTransitGatewayRouteTablePropagationsCommand = async (
  input: GetTransitGatewayRouteTablePropagationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetTransitGatewayRouteTablePropagationsRequest(input, context),
    [_A]: _GTGRTP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetVerifiedAccessEndpointPolicyCommand
 */
export const se_GetVerifiedAccessEndpointPolicyCommand = async (
  input: GetVerifiedAccessEndpointPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetVerifiedAccessEndpointPolicyRequest(input, context),
    [_A]: _GVAEP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetVerifiedAccessGroupPolicyCommand
 */
export const se_GetVerifiedAccessGroupPolicyCommand = async (
  input: GetVerifiedAccessGroupPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetVerifiedAccessGroupPolicyRequest(input, context),
    [_A]: _GVAGP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand
 */
export const se_GetVpnConnectionDeviceSampleConfigurationCommand = async (
  input: GetVpnConnectionDeviceSampleConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetVpnConnectionDeviceSampleConfigurationRequest(input, context),
    [_A]: _GVCDSC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetVpnConnectionDeviceTypesCommand
 */
export const se_GetVpnConnectionDeviceTypesCommand = async (
  input: GetVpnConnectionDeviceTypesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetVpnConnectionDeviceTypesRequest(input, context),
    [_A]: _GVCDT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2GetVpnTunnelReplacementStatusCommand
 */
export const se_GetVpnTunnelReplacementStatusCommand = async (
  input: GetVpnTunnelReplacementStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_GetVpnTunnelReplacementStatusRequest(input, context),
    [_A]: _GVTRS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand
 */
export const se_ImportClientVpnClientCertificateRevocationListCommand = async (
  input: ImportClientVpnClientCertificateRevocationListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ImportClientVpnClientCertificateRevocationListRequest(input, context),
    [_A]: _ICVCCRL,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ImportImageCommand
 */
export const se_ImportImageCommand = async (
  input: ImportImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ImportImageRequest(input, context),
    [_A]: _II,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ImportInstanceCommand
 */
export const se_ImportInstanceCommand = async (
  input: ImportInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ImportInstanceRequest(input, context),
    [_A]: _IIm,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ImportKeyPairCommand
 */
export const se_ImportKeyPairCommand = async (
  input: ImportKeyPairCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ImportKeyPairRequest(input, context),
    [_A]: _IKP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ImportSnapshotCommand
 */
export const se_ImportSnapshotCommand = async (
  input: ImportSnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ImportSnapshotRequest(input, context),
    [_A]: _IS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ImportVolumeCommand
 */
export const se_ImportVolumeCommand = async (
  input: ImportVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ImportVolumeRequest(input, context),
    [_A]: _IV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ListImagesInRecycleBinCommand
 */
export const se_ListImagesInRecycleBinCommand = async (
  input: ListImagesInRecycleBinCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ListImagesInRecycleBinRequest(input, context),
    [_A]: _LIIRB,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ListSnapshotsInRecycleBinCommand
 */
export const se_ListSnapshotsInRecycleBinCommand = async (
  input: ListSnapshotsInRecycleBinCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ListSnapshotsInRecycleBinRequest(input, context),
    [_A]: _LSIRB,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2LockSnapshotCommand
 */
export const se_LockSnapshotCommand = async (
  input: LockSnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_LockSnapshotRequest(input, context),
    [_A]: _LS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyAddressAttributeCommand
 */
export const se_ModifyAddressAttributeCommand = async (
  input: ModifyAddressAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyAddressAttributeRequest(input, context),
    [_A]: _MAA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyAvailabilityZoneGroupCommand
 */
export const se_ModifyAvailabilityZoneGroupCommand = async (
  input: ModifyAvailabilityZoneGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyAvailabilityZoneGroupRequest(input, context),
    [_A]: _MAZG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyCapacityReservationCommand
 */
export const se_ModifyCapacityReservationCommand = async (
  input: ModifyCapacityReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyCapacityReservationRequest(input, context),
    [_A]: _MCR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyCapacityReservationFleetCommand
 */
export const se_ModifyCapacityReservationFleetCommand = async (
  input: ModifyCapacityReservationFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyCapacityReservationFleetRequest(input, context),
    [_A]: _MCRF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyClientVpnEndpointCommand
 */
export const se_ModifyClientVpnEndpointCommand = async (
  input: ModifyClientVpnEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyClientVpnEndpointRequest(input, context),
    [_A]: _MCVE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyDefaultCreditSpecificationCommand
 */
export const se_ModifyDefaultCreditSpecificationCommand = async (
  input: ModifyDefaultCreditSpecificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyDefaultCreditSpecificationRequest(input, context),
    [_A]: _MDCS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand
 */
export const se_ModifyEbsDefaultKmsKeyIdCommand = async (
  input: ModifyEbsDefaultKmsKeyIdCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyEbsDefaultKmsKeyIdRequest(input, context),
    [_A]: _MEDKKI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyFleetCommand
 */
export const se_ModifyFleetCommand = async (
  input: ModifyFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyFleetRequest(input, context),
    [_A]: _MF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyFpgaImageAttributeCommand
 */
export const se_ModifyFpgaImageAttributeCommand = async (
  input: ModifyFpgaImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyFpgaImageAttributeRequest(input, context),
    [_A]: _MFIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyHostsCommand
 */
export const se_ModifyHostsCommand = async (
  input: ModifyHostsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyHostsRequest(input, context),
    [_A]: _MH,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIdentityIdFormatCommand
 */
export const se_ModifyIdentityIdFormatCommand = async (
  input: ModifyIdentityIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIdentityIdFormatRequest(input, context),
    [_A]: _MIIF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIdFormatCommand
 */
export const se_ModifyIdFormatCommand = async (
  input: ModifyIdFormatCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIdFormatRequest(input, context),
    [_A]: _MIF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyImageAttributeCommand
 */
export const se_ModifyImageAttributeCommand = async (
  input: ModifyImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyImageAttributeRequest(input, context),
    [_A]: _MIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceAttributeCommand
 */
export const se_ModifyInstanceAttributeCommand = async (
  input: ModifyInstanceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceAttributeRequest(input, context),
    [_A]: _MIAo,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand
 */
export const se_ModifyInstanceCapacityReservationAttributesCommand = async (
  input: ModifyInstanceCapacityReservationAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceCapacityReservationAttributesRequest(input, context),
    [_A]: _MICRA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceCreditSpecificationCommand
 */
export const se_ModifyInstanceCreditSpecificationCommand = async (
  input: ModifyInstanceCreditSpecificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceCreditSpecificationRequest(input, context),
    [_A]: _MICS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceEventStartTimeCommand
 */
export const se_ModifyInstanceEventStartTimeCommand = async (
  input: ModifyInstanceEventStartTimeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceEventStartTimeRequest(input, context),
    [_A]: _MIEST,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceEventWindowCommand
 */
export const se_ModifyInstanceEventWindowCommand = async (
  input: ModifyInstanceEventWindowCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceEventWindowRequest(input, context),
    [_A]: _MIEW,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceMaintenanceOptionsCommand
 */
export const se_ModifyInstanceMaintenanceOptionsCommand = async (
  input: ModifyInstanceMaintenanceOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceMaintenanceOptionsRequest(input, context),
    [_A]: _MIMO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstanceMetadataOptionsCommand
 */
export const se_ModifyInstanceMetadataOptionsCommand = async (
  input: ModifyInstanceMetadataOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstanceMetadataOptionsRequest(input, context),
    [_A]: _MIMOo,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyInstancePlacementCommand
 */
export const se_ModifyInstancePlacementCommand = async (
  input: ModifyInstancePlacementCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyInstancePlacementRequest(input, context),
    [_A]: _MIP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIpamCommand
 */
export const se_ModifyIpamCommand = async (
  input: ModifyIpamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamRequest(input, context),
    [_A]: _MI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIpamPoolCommand
 */
export const se_ModifyIpamPoolCommand = async (
  input: ModifyIpamPoolCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamPoolRequest(input, context),
    [_A]: _MIPo,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIpamResourceCidrCommand
 */
export const se_ModifyIpamResourceCidrCommand = async (
  input: ModifyIpamResourceCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamResourceCidrRequest(input, context),
    [_A]: _MIRC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIpamResourceDiscoveryCommand
 */
export const se_ModifyIpamResourceDiscoveryCommand = async (
  input: ModifyIpamResourceDiscoveryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamResourceDiscoveryRequest(input, context),
    [_A]: _MIRD,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyIpamScopeCommand
 */
export const se_ModifyIpamScopeCommand = async (
  input: ModifyIpamScopeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyIpamScopeRequest(input, context),
    [_A]: _MIS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyLaunchTemplateCommand
 */
export const se_ModifyLaunchTemplateCommand = async (
  input: ModifyLaunchTemplateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyLaunchTemplateRequest(input, context),
    [_A]: _MLT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyLocalGatewayRouteCommand
 */
export const se_ModifyLocalGatewayRouteCommand = async (
  input: ModifyLocalGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyLocalGatewayRouteRequest(input, context),
    [_A]: _MLGR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyManagedPrefixListCommand
 */
export const se_ModifyManagedPrefixListCommand = async (
  input: ModifyManagedPrefixListCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyManagedPrefixListRequest(input, context),
    [_A]: _MMPL,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyNetworkInterfaceAttributeCommand
 */
export const se_ModifyNetworkInterfaceAttributeCommand = async (
  input: ModifyNetworkInterfaceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyNetworkInterfaceAttributeRequest(input, context),
    [_A]: _MNIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyPrivateDnsNameOptionsCommand
 */
export const se_ModifyPrivateDnsNameOptionsCommand = async (
  input: ModifyPrivateDnsNameOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyPrivateDnsNameOptionsRequest(input, context),
    [_A]: _MPDNO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyReservedInstancesCommand
 */
export const se_ModifyReservedInstancesCommand = async (
  input: ModifyReservedInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyReservedInstancesRequest(input, context),
    [_A]: _MRI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifySecurityGroupRulesCommand
 */
export const se_ModifySecurityGroupRulesCommand = async (
  input: ModifySecurityGroupRulesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifySecurityGroupRulesRequest(input, context),
    [_A]: _MSGR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifySnapshotAttributeCommand
 */
export const se_ModifySnapshotAttributeCommand = async (
  input: ModifySnapshotAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifySnapshotAttributeRequest(input, context),
    [_A]: _MSA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifySnapshotTierCommand
 */
export const se_ModifySnapshotTierCommand = async (
  input: ModifySnapshotTierCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifySnapshotTierRequest(input, context),
    [_A]: _MST,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifySpotFleetRequestCommand
 */
export const se_ModifySpotFleetRequestCommand = async (
  input: ModifySpotFleetRequestCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifySpotFleetRequestRequest(input, context),
    [_A]: _MSFR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifySubnetAttributeCommand
 */
export const se_ModifySubnetAttributeCommand = async (
  input: ModifySubnetAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifySubnetAttributeRequest(input, context),
    [_A]: _MSAo,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand
 */
export const se_ModifyTrafficMirrorFilterNetworkServicesCommand = async (
  input: ModifyTrafficMirrorFilterNetworkServicesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyTrafficMirrorFilterNetworkServicesRequest(input, context),
    [_A]: _MTMFNS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyTrafficMirrorFilterRuleCommand
 */
export const se_ModifyTrafficMirrorFilterRuleCommand = async (
  input: ModifyTrafficMirrorFilterRuleCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyTrafficMirrorFilterRuleRequest(input, context),
    [_A]: _MTMFR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyTrafficMirrorSessionCommand
 */
export const se_ModifyTrafficMirrorSessionCommand = async (
  input: ModifyTrafficMirrorSessionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyTrafficMirrorSessionRequest(input, context),
    [_A]: _MTMS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyTransitGatewayCommand
 */
export const se_ModifyTransitGatewayCommand = async (
  input: ModifyTransitGatewayCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyTransitGatewayRequest(input, context),
    [_A]: _MTG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand
 */
export const se_ModifyTransitGatewayPrefixListReferenceCommand = async (
  input: ModifyTransitGatewayPrefixListReferenceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyTransitGatewayPrefixListReferenceRequest(input, context),
    [_A]: _MTGPLR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand
 */
export const se_ModifyTransitGatewayVpcAttachmentCommand = async (
  input: ModifyTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyTransitGatewayVpcAttachmentRequest(input, context),
    [_A]: _MTGVA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointCommand
 */
export const se_ModifyVerifiedAccessEndpointCommand = async (
  input: ModifyVerifiedAccessEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessEndpointRequest(input, context),
    [_A]: _MVAE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointPolicyCommand
 */
export const se_ModifyVerifiedAccessEndpointPolicyCommand = async (
  input: ModifyVerifiedAccessEndpointPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessEndpointPolicyRequest(input, context),
    [_A]: _MVAEP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessGroupCommand
 */
export const se_ModifyVerifiedAccessGroupCommand = async (
  input: ModifyVerifiedAccessGroupCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessGroupRequest(input, context),
    [_A]: _MVAG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessGroupPolicyCommand
 */
export const se_ModifyVerifiedAccessGroupPolicyCommand = async (
  input: ModifyVerifiedAccessGroupPolicyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessGroupPolicyRequest(input, context),
    [_A]: _MVAGP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessInstanceCommand
 */
export const se_ModifyVerifiedAccessInstanceCommand = async (
  input: ModifyVerifiedAccessInstanceCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessInstanceRequest(input, context),
    [_A]: _MVAI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessInstanceLoggingConfigurationCommand
 */
export const se_ModifyVerifiedAccessInstanceLoggingConfigurationCommand = async (
  input: ModifyVerifiedAccessInstanceLoggingConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessInstanceLoggingConfigurationRequest(input, context),
    [_A]: _MVAILC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVerifiedAccessTrustProviderCommand
 */
export const se_ModifyVerifiedAccessTrustProviderCommand = async (
  input: ModifyVerifiedAccessTrustProviderCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVerifiedAccessTrustProviderRequest(input, context),
    [_A]: _MVATP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVolumeCommand
 */
export const se_ModifyVolumeCommand = async (
  input: ModifyVolumeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVolumeRequest(input, context),
    [_A]: _MV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVolumeAttributeCommand
 */
export const se_ModifyVolumeAttributeCommand = async (
  input: ModifyVolumeAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVolumeAttributeRequest(input, context),
    [_A]: _MVA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcAttributeCommand
 */
export const se_ModifyVpcAttributeCommand = async (
  input: ModifyVpcAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcAttributeRequest(input, context),
    [_A]: _MVAo,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcEndpointCommand
 */
export const se_ModifyVpcEndpointCommand = async (
  input: ModifyVpcEndpointCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointRequest(input, context),
    [_A]: _MVE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand
 */
export const se_ModifyVpcEndpointConnectionNotificationCommand = async (
  input: ModifyVpcEndpointConnectionNotificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointConnectionNotificationRequest(input, context),
    [_A]: _MVECN,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand
 */
export const se_ModifyVpcEndpointServiceConfigurationCommand = async (
  input: ModifyVpcEndpointServiceConfigurationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointServiceConfigurationRequest(input, context),
    [_A]: _MVESC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand
 */
export const se_ModifyVpcEndpointServicePayerResponsibilityCommand = async (
  input: ModifyVpcEndpointServicePayerResponsibilityCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointServicePayerResponsibilityRequest(input, context),
    [_A]: _MVESPR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcEndpointServicePermissionsCommand
 */
export const se_ModifyVpcEndpointServicePermissionsCommand = async (
  input: ModifyVpcEndpointServicePermissionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcEndpointServicePermissionsRequest(input, context),
    [_A]: _MVESP,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand
 */
export const se_ModifyVpcPeeringConnectionOptionsCommand = async (
  input: ModifyVpcPeeringConnectionOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcPeeringConnectionOptionsRequest(input, context),
    [_A]: _MVPCO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpcTenancyCommand
 */
export const se_ModifyVpcTenancyCommand = async (
  input: ModifyVpcTenancyCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpcTenancyRequest(input, context),
    [_A]: _MVT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpnConnectionCommand
 */
export const se_ModifyVpnConnectionCommand = async (
  input: ModifyVpnConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpnConnectionRequest(input, context),
    [_A]: _MVC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpnConnectionOptionsCommand
 */
export const se_ModifyVpnConnectionOptionsCommand = async (
  input: ModifyVpnConnectionOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpnConnectionOptionsRequest(input, context),
    [_A]: _MVCO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpnTunnelCertificateCommand
 */
export const se_ModifyVpnTunnelCertificateCommand = async (
  input: ModifyVpnTunnelCertificateCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpnTunnelCertificateRequest(input, context),
    [_A]: _MVTC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ModifyVpnTunnelOptionsCommand
 */
export const se_ModifyVpnTunnelOptionsCommand = async (
  input: ModifyVpnTunnelOptionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ModifyVpnTunnelOptionsRequest(input, context),
    [_A]: _MVTO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2MonitorInstancesCommand
 */
export const se_MonitorInstancesCommand = async (
  input: MonitorInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_MonitorInstancesRequest(input, context),
    [_A]: _MIo,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2MoveAddressToVpcCommand
 */
export const se_MoveAddressToVpcCommand = async (
  input: MoveAddressToVpcCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_MoveAddressToVpcRequest(input, context),
    [_A]: _MATV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2MoveByoipCidrToIpamCommand
 */
export const se_MoveByoipCidrToIpamCommand = async (
  input: MoveByoipCidrToIpamCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_MoveByoipCidrToIpamRequest(input, context),
    [_A]: _MBCTI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ProvisionByoipCidrCommand
 */
export const se_ProvisionByoipCidrCommand = async (
  input: ProvisionByoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ProvisionByoipCidrRequest(input, context),
    [_A]: _PBC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ProvisionIpamByoasnCommand
 */
export const se_ProvisionIpamByoasnCommand = async (
  input: ProvisionIpamByoasnCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ProvisionIpamByoasnRequest(input, context),
    [_A]: _PIB,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ProvisionIpamPoolCidrCommand
 */
export const se_ProvisionIpamPoolCidrCommand = async (
  input: ProvisionIpamPoolCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ProvisionIpamPoolCidrRequest(input, context),
    [_A]: _PIPC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ProvisionPublicIpv4PoolCidrCommand
 */
export const se_ProvisionPublicIpv4PoolCidrCommand = async (
  input: ProvisionPublicIpv4PoolCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ProvisionPublicIpv4PoolCidrRequest(input, context),
    [_A]: _PPIPC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2PurchaseCapacityBlockCommand
 */
export const se_PurchaseCapacityBlockCommand = async (
  input: PurchaseCapacityBlockCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_PurchaseCapacityBlockRequest(input, context),
    [_A]: _PCB,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2PurchaseHostReservationCommand
 */
export const se_PurchaseHostReservationCommand = async (
  input: PurchaseHostReservationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_PurchaseHostReservationRequest(input, context),
    [_A]: _PHR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2PurchaseReservedInstancesOfferingCommand
 */
export const se_PurchaseReservedInstancesOfferingCommand = async (
  input: PurchaseReservedInstancesOfferingCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_PurchaseReservedInstancesOfferingRequest(input, context),
    [_A]: _PRIO,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2PurchaseScheduledInstancesCommand
 */
export const se_PurchaseScheduledInstancesCommand = async (
  input: PurchaseScheduledInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_PurchaseScheduledInstancesRequest(input, context),
    [_A]: _PSI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RebootInstancesCommand
 */
export const se_RebootInstancesCommand = async (
  input: RebootInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RebootInstancesRequest(input, context),
    [_A]: _RI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RegisterImageCommand
 */
export const se_RegisterImageCommand = async (
  input: RegisterImageCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RegisterImageRequest(input, context),
    [_A]: _RIe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RegisterInstanceEventNotificationAttributesCommand
 */
export const se_RegisterInstanceEventNotificationAttributesCommand = async (
  input: RegisterInstanceEventNotificationAttributesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RegisterInstanceEventNotificationAttributesRequest(input, context),
    [_A]: _RIENA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand
 */
export const se_RegisterTransitGatewayMulticastGroupMembersCommand = async (
  input: RegisterTransitGatewayMulticastGroupMembersCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RegisterTransitGatewayMulticastGroupMembersRequest(input, context),
    [_A]: _RTGMGM,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand
 */
export const se_RegisterTransitGatewayMulticastGroupSourcesCommand = async (
  input: RegisterTransitGatewayMulticastGroupSourcesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RegisterTransitGatewayMulticastGroupSourcesRequest(input, context),
    [_A]: _RTGMGS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand
 */
export const se_RejectTransitGatewayMulticastDomainAssociationsCommand = async (
  input: RejectTransitGatewayMulticastDomainAssociationsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RejectTransitGatewayMulticastDomainAssociationsRequest(input, context),
    [_A]: _RTGMDA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand
 */
export const se_RejectTransitGatewayPeeringAttachmentCommand = async (
  input: RejectTransitGatewayPeeringAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RejectTransitGatewayPeeringAttachmentRequest(input, context),
    [_A]: _RTGPA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RejectTransitGatewayVpcAttachmentCommand
 */
export const se_RejectTransitGatewayVpcAttachmentCommand = async (
  input: RejectTransitGatewayVpcAttachmentCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RejectTransitGatewayVpcAttachmentRequest(input, context),
    [_A]: _RTGVA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RejectVpcEndpointConnectionsCommand
 */
export const se_RejectVpcEndpointConnectionsCommand = async (
  input: RejectVpcEndpointConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RejectVpcEndpointConnectionsRequest(input, context),
    [_A]: _RVEC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RejectVpcPeeringConnectionCommand
 */
export const se_RejectVpcPeeringConnectionCommand = async (
  input: RejectVpcPeeringConnectionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RejectVpcPeeringConnectionRequest(input, context),
    [_A]: _RVPC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReleaseAddressCommand
 */
export const se_ReleaseAddressCommand = async (
  input: ReleaseAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReleaseAddressRequest(input, context),
    [_A]: _RA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReleaseHostsCommand
 */
export const se_ReleaseHostsCommand = async (
  input: ReleaseHostsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReleaseHostsRequest(input, context),
    [_A]: _RH,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReleaseIpamPoolAllocationCommand
 */
export const se_ReleaseIpamPoolAllocationCommand = async (
  input: ReleaseIpamPoolAllocationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReleaseIpamPoolAllocationRequest(input, context),
    [_A]: _RIPA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceIamInstanceProfileAssociationCommand
 */
export const se_ReplaceIamInstanceProfileAssociationCommand = async (
  input: ReplaceIamInstanceProfileAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceIamInstanceProfileAssociationRequest(input, context),
    [_A]: _RIIPA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceNetworkAclAssociationCommand
 */
export const se_ReplaceNetworkAclAssociationCommand = async (
  input: ReplaceNetworkAclAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceNetworkAclAssociationRequest(input, context),
    [_A]: _RNAA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceNetworkAclEntryCommand
 */
export const se_ReplaceNetworkAclEntryCommand = async (
  input: ReplaceNetworkAclEntryCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceNetworkAclEntryRequest(input, context),
    [_A]: _RNAE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceRouteCommand
 */
export const se_ReplaceRouteCommand = async (
  input: ReplaceRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceRouteRequest(input, context),
    [_A]: _RR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceRouteTableAssociationCommand
 */
export const se_ReplaceRouteTableAssociationCommand = async (
  input: ReplaceRouteTableAssociationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceRouteTableAssociationRequest(input, context),
    [_A]: _RRTA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceTransitGatewayRouteCommand
 */
export const se_ReplaceTransitGatewayRouteCommand = async (
  input: ReplaceTransitGatewayRouteCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceTransitGatewayRouteRequest(input, context),
    [_A]: _RTGR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReplaceVpnTunnelCommand
 */
export const se_ReplaceVpnTunnelCommand = async (
  input: ReplaceVpnTunnelCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReplaceVpnTunnelRequest(input, context),
    [_A]: _RVT,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ReportInstanceStatusCommand
 */
export const se_ReportInstanceStatusCommand = async (
  input: ReportInstanceStatusCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ReportInstanceStatusRequest(input, context),
    [_A]: _RIS,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RequestSpotFleetCommand
 */
export const se_RequestSpotFleetCommand = async (
  input: RequestSpotFleetCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RequestSpotFleetRequest(input, context),
    [_A]: _RSF,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RequestSpotInstancesCommand
 */
export const se_RequestSpotInstancesCommand = async (
  input: RequestSpotInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RequestSpotInstancesRequest(input, context),
    [_A]: _RSI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetAddressAttributeCommand
 */
export const se_ResetAddressAttributeCommand = async (
  input: ResetAddressAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetAddressAttributeRequest(input, context),
    [_A]: _RAA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetEbsDefaultKmsKeyIdCommand
 */
export const se_ResetEbsDefaultKmsKeyIdCommand = async (
  input: ResetEbsDefaultKmsKeyIdCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetEbsDefaultKmsKeyIdRequest(input, context),
    [_A]: _REDKKI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetFpgaImageAttributeCommand
 */
export const se_ResetFpgaImageAttributeCommand = async (
  input: ResetFpgaImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetFpgaImageAttributeRequest(input, context),
    [_A]: _RFIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetImageAttributeCommand
 */
export const se_ResetImageAttributeCommand = async (
  input: ResetImageAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetImageAttributeRequest(input, context),
    [_A]: _RIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetInstanceAttributeCommand
 */
export const se_ResetInstanceAttributeCommand = async (
  input: ResetInstanceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetInstanceAttributeRequest(input, context),
    [_A]: _RIAe,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetNetworkInterfaceAttributeCommand
 */
export const se_ResetNetworkInterfaceAttributeCommand = async (
  input: ResetNetworkInterfaceAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetNetworkInterfaceAttributeRequest(input, context),
    [_A]: _RNIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2ResetSnapshotAttributeCommand
 */
export const se_ResetSnapshotAttributeCommand = async (
  input: ResetSnapshotAttributeCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_ResetSnapshotAttributeRequest(input, context),
    [_A]: _RSA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RestoreAddressToClassicCommand
 */
export const se_RestoreAddressToClassicCommand = async (
  input: RestoreAddressToClassicCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RestoreAddressToClassicRequest(input, context),
    [_A]: _RATC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RestoreImageFromRecycleBinCommand
 */
export const se_RestoreImageFromRecycleBinCommand = async (
  input: RestoreImageFromRecycleBinCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RestoreImageFromRecycleBinRequest(input, context),
    [_A]: _RIFRB,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RestoreManagedPrefixListVersionCommand
 */
export const se_RestoreManagedPrefixListVersionCommand = async (
  input: RestoreManagedPrefixListVersionCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RestoreManagedPrefixListVersionRequest(input, context),
    [_A]: _RMPLV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RestoreSnapshotFromRecycleBinCommand
 */
export const se_RestoreSnapshotFromRecycleBinCommand = async (
  input: RestoreSnapshotFromRecycleBinCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RestoreSnapshotFromRecycleBinRequest(input, context),
    [_A]: _RSFRB,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RestoreSnapshotTierCommand
 */
export const se_RestoreSnapshotTierCommand = async (
  input: RestoreSnapshotTierCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RestoreSnapshotTierRequest(input, context),
    [_A]: _RST,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RevokeClientVpnIngressCommand
 */
export const se_RevokeClientVpnIngressCommand = async (
  input: RevokeClientVpnIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RevokeClientVpnIngressRequest(input, context),
    [_A]: _RCVI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RevokeSecurityGroupEgressCommand
 */
export const se_RevokeSecurityGroupEgressCommand = async (
  input: RevokeSecurityGroupEgressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RevokeSecurityGroupEgressRequest(input, context),
    [_A]: _RSGE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RevokeSecurityGroupIngressCommand
 */
export const se_RevokeSecurityGroupIngressCommand = async (
  input: RevokeSecurityGroupIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RevokeSecurityGroupIngressRequest(input, context),
    [_A]: _RSGI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RunInstancesCommand
 */
export const se_RunInstancesCommand = async (
  input: RunInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RunInstancesRequest(input, context),
    [_A]: _RIu,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2RunScheduledInstancesCommand
 */
export const se_RunScheduledInstancesCommand = async (
  input: RunScheduledInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_RunScheduledInstancesRequest(input, context),
    [_A]: _RSIu,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2SearchLocalGatewayRoutesCommand
 */
export const se_SearchLocalGatewayRoutesCommand = async (
  input: SearchLocalGatewayRoutesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_SearchLocalGatewayRoutesRequest(input, context),
    [_A]: _SLGR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2SearchTransitGatewayMulticastGroupsCommand
 */
export const se_SearchTransitGatewayMulticastGroupsCommand = async (
  input: SearchTransitGatewayMulticastGroupsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_SearchTransitGatewayMulticastGroupsRequest(input, context),
    [_A]: _STGMG,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2SearchTransitGatewayRoutesCommand
 */
export const se_SearchTransitGatewayRoutesCommand = async (
  input: SearchTransitGatewayRoutesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_SearchTransitGatewayRoutesRequest(input, context),
    [_A]: _STGR,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2SendDiagnosticInterruptCommand
 */
export const se_SendDiagnosticInterruptCommand = async (
  input: SendDiagnosticInterruptCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_SendDiagnosticInterruptRequest(input, context),
    [_A]: _SDI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2StartInstancesCommand
 */
export const se_StartInstancesCommand = async (
  input: StartInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_StartInstancesRequest(input, context),
    [_A]: _SI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand
 */
export const se_StartNetworkInsightsAccessScopeAnalysisCommand = async (
  input: StartNetworkInsightsAccessScopeAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_StartNetworkInsightsAccessScopeAnalysisRequest(input, context),
    [_A]: _SNIASA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2StartNetworkInsightsAnalysisCommand
 */
export const se_StartNetworkInsightsAnalysisCommand = async (
  input: StartNetworkInsightsAnalysisCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_StartNetworkInsightsAnalysisRequest(input, context),
    [_A]: _SNIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand
 */
export const se_StartVpcEndpointServicePrivateDnsVerificationCommand = async (
  input: StartVpcEndpointServicePrivateDnsVerificationCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_StartVpcEndpointServicePrivateDnsVerificationRequest(input, context),
    [_A]: _SVESPDV,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2StopInstancesCommand
 */
export const se_StopInstancesCommand = async (
  input: StopInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_StopInstancesRequest(input, context),
    [_A]: _SIt,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2TerminateClientVpnConnectionsCommand
 */
export const se_TerminateClientVpnConnectionsCommand = async (
  input: TerminateClientVpnConnectionsCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_TerminateClientVpnConnectionsRequest(input, context),
    [_A]: _TCVC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2TerminateInstancesCommand
 */
export const se_TerminateInstancesCommand = async (
  input: TerminateInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_TerminateInstancesRequest(input, context),
    [_A]: _TI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2UnassignIpv6AddressesCommand
 */
export const se_UnassignIpv6AddressesCommand = async (
  input: UnassignIpv6AddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_UnassignIpv6AddressesRequest(input, context),
    [_A]: _UIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2UnassignPrivateIpAddressesCommand
 */
export const se_UnassignPrivateIpAddressesCommand = async (
  input: UnassignPrivateIpAddressesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_UnassignPrivateIpAddressesRequest(input, context),
    [_A]: _UPIA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2UnassignPrivateNatGatewayAddressCommand
 */
export const se_UnassignPrivateNatGatewayAddressCommand = async (
  input: UnassignPrivateNatGatewayAddressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_UnassignPrivateNatGatewayAddressRequest(input, context),
    [_A]: _UPNGA,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2UnlockSnapshotCommand
 */
export const se_UnlockSnapshotCommand = async (
  input: UnlockSnapshotCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_UnlockSnapshotRequest(input, context),
    [_A]: _US,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2UnmonitorInstancesCommand
 */
export const se_UnmonitorInstancesCommand = async (
  input: UnmonitorInstancesCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_UnmonitorInstancesRequest(input, context),
    [_A]: _UI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand
 */
export const se_UpdateSecurityGroupRuleDescriptionsEgressCommand = async (
  input: UpdateSecurityGroupRuleDescriptionsEgressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_UpdateSecurityGroupRuleDescriptionsEgressRequest(input, context),
    [_A]: _USGRDE,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand
 */
export const se_UpdateSecurityGroupRuleDescriptionsIngressCommand = async (
  input: UpdateSecurityGroupRuleDescriptionsIngressCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_UpdateSecurityGroupRuleDescriptionsIngressRequest(input, context),
    [_A]: _USGRDI,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * serializeAws_ec2WithdrawByoipCidrCommand
 */
export const se_WithdrawByoipCidrCommand = async (
  input: WithdrawByoipCidrCommandInput,
  context: __SerdeContext
): Promise<__HttpRequest> => {
  const headers: __HeaderBag = SHARED_HEADERS;
  let body: any;
  body = buildFormUrlencodedString({
    ...se_WithdrawByoipCidrRequest(input, context),
    [_A]: _WBC,
    [_V]: _,
  });
  return buildHttpRpcRequest(context, headers, "/", undefined, body);
};

/**
 * deserializeAws_ec2AcceptAddressTransferCommand
 */
export const de_AcceptAddressTransferCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptAddressTransferCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptAddressTransferCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptAddressTransferResult(data, context);
  const response: AcceptAddressTransferCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptAddressTransferCommandError
 */
const de_AcceptAddressTransferCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptAddressTransferCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommand
 */
export const de_AcceptReservedInstancesExchangeQuoteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptReservedInstancesExchangeQuoteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptReservedInstancesExchangeQuoteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptReservedInstancesExchangeQuoteResult(data, context);
  const response: AcceptReservedInstancesExchangeQuoteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptReservedInstancesExchangeQuoteCommandError
 */
const de_AcceptReservedInstancesExchangeQuoteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptReservedInstancesExchangeQuoteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommand
 */
export const de_AcceptTransitGatewayMulticastDomainAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptTransitGatewayMulticastDomainAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptTransitGatewayMulticastDomainAssociationsResult(data, context);
  const response: AcceptTransitGatewayMulticastDomainAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsCommandError
 */
const de_AcceptTransitGatewayMulticastDomainAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommand
 */
export const de_AcceptTransitGatewayPeeringAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayPeeringAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptTransitGatewayPeeringAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptTransitGatewayPeeringAttachmentResult(data, context);
  const response: AcceptTransitGatewayPeeringAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentCommandError
 */
const de_AcceptTransitGatewayPeeringAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayPeeringAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommand
 */
export const de_AcceptTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptTransitGatewayVpcAttachmentResult(data, context);
  const response: AcceptTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptTransitGatewayVpcAttachmentCommandError
 */
const de_AcceptTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AcceptVpcEndpointConnectionsCommand
 */
export const de_AcceptVpcEndpointConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptVpcEndpointConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptVpcEndpointConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptVpcEndpointConnectionsResult(data, context);
  const response: AcceptVpcEndpointConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptVpcEndpointConnectionsCommandError
 */
const de_AcceptVpcEndpointConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptVpcEndpointConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AcceptVpcPeeringConnectionCommand
 */
export const de_AcceptVpcPeeringConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptVpcPeeringConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AcceptVpcPeeringConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AcceptVpcPeeringConnectionResult(data, context);
  const response: AcceptVpcPeeringConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AcceptVpcPeeringConnectionCommandError
 */
const de_AcceptVpcPeeringConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AcceptVpcPeeringConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AdvertiseByoipCidrCommand
 */
export const de_AdvertiseByoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AdvertiseByoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AdvertiseByoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AdvertiseByoipCidrResult(data, context);
  const response: AdvertiseByoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AdvertiseByoipCidrCommandError
 */
const de_AdvertiseByoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AdvertiseByoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AllocateAddressCommand
 */
export const de_AllocateAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AllocateAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AllocateAddressResult(data, context);
  const response: AllocateAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AllocateAddressCommandError
 */
const de_AllocateAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AllocateHostsCommand
 */
export const de_AllocateHostsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateHostsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AllocateHostsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AllocateHostsResult(data, context);
  const response: AllocateHostsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AllocateHostsCommandError
 */
const de_AllocateHostsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateHostsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AllocateIpamPoolCidrCommand
 */
export const de_AllocateIpamPoolCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateIpamPoolCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AllocateIpamPoolCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AllocateIpamPoolCidrResult(data, context);
  const response: AllocateIpamPoolCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AllocateIpamPoolCidrCommandError
 */
const de_AllocateIpamPoolCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AllocateIpamPoolCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommand
 */
export const de_ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ApplySecurityGroupsToClientVpnTargetNetworkCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ApplySecurityGroupsToClientVpnTargetNetworkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ApplySecurityGroupsToClientVpnTargetNetworkResult(data, context);
  const response: ApplySecurityGroupsToClientVpnTargetNetworkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkCommandError
 */
const de_ApplySecurityGroupsToClientVpnTargetNetworkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ApplySecurityGroupsToClientVpnTargetNetworkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssignIpv6AddressesCommand
 */
export const de_AssignIpv6AddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignIpv6AddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssignIpv6AddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssignIpv6AddressesResult(data, context);
  const response: AssignIpv6AddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssignIpv6AddressesCommandError
 */
const de_AssignIpv6AddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignIpv6AddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssignPrivateIpAddressesCommand
 */
export const de_AssignPrivateIpAddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignPrivateIpAddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssignPrivateIpAddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssignPrivateIpAddressesResult(data, context);
  const response: AssignPrivateIpAddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssignPrivateIpAddressesCommandError
 */
const de_AssignPrivateIpAddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignPrivateIpAddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssignPrivateNatGatewayAddressCommand
 */
export const de_AssignPrivateNatGatewayAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignPrivateNatGatewayAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssignPrivateNatGatewayAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssignPrivateNatGatewayAddressResult(data, context);
  const response: AssignPrivateNatGatewayAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssignPrivateNatGatewayAddressCommandError
 */
const de_AssignPrivateNatGatewayAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssignPrivateNatGatewayAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateAddressCommand
 */
export const de_AssociateAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateAddressResult(data, context);
  const response: AssociateAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateAddressCommandError
 */
const de_AssociateAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateClientVpnTargetNetworkCommand
 */
export const de_AssociateClientVpnTargetNetworkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateClientVpnTargetNetworkCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateClientVpnTargetNetworkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateClientVpnTargetNetworkResult(data, context);
  const response: AssociateClientVpnTargetNetworkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateClientVpnTargetNetworkCommandError
 */
const de_AssociateClientVpnTargetNetworkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateClientVpnTargetNetworkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateDhcpOptionsCommand
 */
export const de_AssociateDhcpOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateDhcpOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateDhcpOptionsCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: AssociateDhcpOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateDhcpOptionsCommandError
 */
const de_AssociateDhcpOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateDhcpOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommand
 */
export const de_AssociateEnclaveCertificateIamRoleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateEnclaveCertificateIamRoleCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateEnclaveCertificateIamRoleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateEnclaveCertificateIamRoleResult(data, context);
  const response: AssociateEnclaveCertificateIamRoleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateEnclaveCertificateIamRoleCommandError
 */
const de_AssociateEnclaveCertificateIamRoleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateEnclaveCertificateIamRoleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateIamInstanceProfileCommand
 */
export const de_AssociateIamInstanceProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateIamInstanceProfileCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateIamInstanceProfileCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateIamInstanceProfileResult(data, context);
  const response: AssociateIamInstanceProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateIamInstanceProfileCommandError
 */
const de_AssociateIamInstanceProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateIamInstanceProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateInstanceEventWindowCommand
 */
export const de_AssociateInstanceEventWindowCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateInstanceEventWindowCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateInstanceEventWindowCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateInstanceEventWindowResult(data, context);
  const response: AssociateInstanceEventWindowCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateInstanceEventWindowCommandError
 */
const de_AssociateInstanceEventWindowCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateInstanceEventWindowCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateIpamByoasnCommand
 */
export const de_AssociateIpamByoasnCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateIpamByoasnCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateIpamByoasnCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateIpamByoasnResult(data, context);
  const response: AssociateIpamByoasnCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateIpamByoasnCommandError
 */
const de_AssociateIpamByoasnCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateIpamByoasnCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateIpamResourceDiscoveryCommand
 */
export const de_AssociateIpamResourceDiscoveryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateIpamResourceDiscoveryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateIpamResourceDiscoveryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateIpamResourceDiscoveryResult(data, context);
  const response: AssociateIpamResourceDiscoveryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateIpamResourceDiscoveryCommandError
 */
const de_AssociateIpamResourceDiscoveryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateIpamResourceDiscoveryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateNatGatewayAddressCommand
 */
export const de_AssociateNatGatewayAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateNatGatewayAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateNatGatewayAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateNatGatewayAddressResult(data, context);
  const response: AssociateNatGatewayAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateNatGatewayAddressCommandError
 */
const de_AssociateNatGatewayAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateNatGatewayAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateRouteTableCommand
 */
export const de_AssociateRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateRouteTableResult(data, context);
  const response: AssociateRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateRouteTableCommandError
 */
const de_AssociateRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateSubnetCidrBlockCommand
 */
export const de_AssociateSubnetCidrBlockCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateSubnetCidrBlockCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateSubnetCidrBlockCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateSubnetCidrBlockResult(data, context);
  const response: AssociateSubnetCidrBlockCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateSubnetCidrBlockCommandError
 */
const de_AssociateSubnetCidrBlockCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateSubnetCidrBlockCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommand
 */
export const de_AssociateTransitGatewayMulticastDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayMulticastDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateTransitGatewayMulticastDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateTransitGatewayMulticastDomainResult(data, context);
  const response: AssociateTransitGatewayMulticastDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateTransitGatewayMulticastDomainCommandError
 */
const de_AssociateTransitGatewayMulticastDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayMulticastDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateTransitGatewayPolicyTableCommand
 */
export const de_AssociateTransitGatewayPolicyTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayPolicyTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateTransitGatewayPolicyTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateTransitGatewayPolicyTableResult(data, context);
  const response: AssociateTransitGatewayPolicyTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateTransitGatewayPolicyTableCommandError
 */
const de_AssociateTransitGatewayPolicyTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayPolicyTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateTransitGatewayRouteTableCommand
 */
export const de_AssociateTransitGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateTransitGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateTransitGatewayRouteTableResult(data, context);
  const response: AssociateTransitGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateTransitGatewayRouteTableCommandError
 */
const de_AssociateTransitGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTransitGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateTrunkInterfaceCommand
 */
export const de_AssociateTrunkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTrunkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateTrunkInterfaceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateTrunkInterfaceResult(data, context);
  const response: AssociateTrunkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateTrunkInterfaceCommandError
 */
const de_AssociateTrunkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateTrunkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AssociateVpcCidrBlockCommand
 */
export const de_AssociateVpcCidrBlockCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateVpcCidrBlockCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AssociateVpcCidrBlockCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AssociateVpcCidrBlockResult(data, context);
  const response: AssociateVpcCidrBlockCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AssociateVpcCidrBlockCommandError
 */
const de_AssociateVpcCidrBlockCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AssociateVpcCidrBlockCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AttachClassicLinkVpcCommand
 */
export const de_AttachClassicLinkVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachClassicLinkVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AttachClassicLinkVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AttachClassicLinkVpcResult(data, context);
  const response: AttachClassicLinkVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AttachClassicLinkVpcCommandError
 */
const de_AttachClassicLinkVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachClassicLinkVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AttachInternetGatewayCommand
 */
export const de_AttachInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AttachInternetGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: AttachInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2AttachInternetGatewayCommandError
 */
const de_AttachInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AttachNetworkInterfaceCommand
 */
export const de_AttachNetworkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachNetworkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AttachNetworkInterfaceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AttachNetworkInterfaceResult(data, context);
  const response: AttachNetworkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AttachNetworkInterfaceCommandError
 */
const de_AttachNetworkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachNetworkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AttachVerifiedAccessTrustProviderCommand
 */
export const de_AttachVerifiedAccessTrustProviderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVerifiedAccessTrustProviderCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AttachVerifiedAccessTrustProviderCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AttachVerifiedAccessTrustProviderResult(data, context);
  const response: AttachVerifiedAccessTrustProviderCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AttachVerifiedAccessTrustProviderCommandError
 */
const de_AttachVerifiedAccessTrustProviderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVerifiedAccessTrustProviderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AttachVolumeCommand
 */
export const de_AttachVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AttachVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_VolumeAttachment(data, context);
  const response: AttachVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AttachVolumeCommandError
 */
const de_AttachVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AttachVpnGatewayCommand
 */
export const de_AttachVpnGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVpnGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AttachVpnGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AttachVpnGatewayResult(data, context);
  const response: AttachVpnGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AttachVpnGatewayCommandError
 */
const de_AttachVpnGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AttachVpnGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AuthorizeClientVpnIngressCommand
 */
export const de_AuthorizeClientVpnIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeClientVpnIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AuthorizeClientVpnIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AuthorizeClientVpnIngressResult(data, context);
  const response: AuthorizeClientVpnIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AuthorizeClientVpnIngressCommandError
 */
const de_AuthorizeClientVpnIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeClientVpnIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AuthorizeSecurityGroupEgressCommand
 */
export const de_AuthorizeSecurityGroupEgressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeSecurityGroupEgressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AuthorizeSecurityGroupEgressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AuthorizeSecurityGroupEgressResult(data, context);
  const response: AuthorizeSecurityGroupEgressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AuthorizeSecurityGroupEgressCommandError
 */
const de_AuthorizeSecurityGroupEgressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeSecurityGroupEgressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2AuthorizeSecurityGroupIngressCommand
 */
export const de_AuthorizeSecurityGroupIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeSecurityGroupIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_AuthorizeSecurityGroupIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_AuthorizeSecurityGroupIngressResult(data, context);
  const response: AuthorizeSecurityGroupIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2AuthorizeSecurityGroupIngressCommandError
 */
const de_AuthorizeSecurityGroupIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<AuthorizeSecurityGroupIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2BundleInstanceCommand
 */
export const de_BundleInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<BundleInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_BundleInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_BundleInstanceResult(data, context);
  const response: BundleInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2BundleInstanceCommandError
 */
const de_BundleInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<BundleInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelBundleTaskCommand
 */
export const de_CancelBundleTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelBundleTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelBundleTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelBundleTaskResult(data, context);
  const response: CancelBundleTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelBundleTaskCommandError
 */
const de_CancelBundleTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelBundleTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelCapacityReservationCommand
 */
export const de_CancelCapacityReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelCapacityReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelCapacityReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelCapacityReservationResult(data, context);
  const response: CancelCapacityReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelCapacityReservationCommandError
 */
const de_CancelCapacityReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelCapacityReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelCapacityReservationFleetsCommand
 */
export const de_CancelCapacityReservationFleetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelCapacityReservationFleetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelCapacityReservationFleetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelCapacityReservationFleetsResult(data, context);
  const response: CancelCapacityReservationFleetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelCapacityReservationFleetsCommandError
 */
const de_CancelCapacityReservationFleetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelCapacityReservationFleetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelConversionTaskCommand
 */
export const de_CancelConversionTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelConversionTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelConversionTaskCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CancelConversionTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2CancelConversionTaskCommandError
 */
const de_CancelConversionTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelConversionTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelExportTaskCommand
 */
export const de_CancelExportTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelExportTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelExportTaskCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CancelExportTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2CancelExportTaskCommandError
 */
const de_CancelExportTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelExportTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelImageLaunchPermissionCommand
 */
export const de_CancelImageLaunchPermissionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelImageLaunchPermissionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelImageLaunchPermissionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelImageLaunchPermissionResult(data, context);
  const response: CancelImageLaunchPermissionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelImageLaunchPermissionCommandError
 */
const de_CancelImageLaunchPermissionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelImageLaunchPermissionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelImportTaskCommand
 */
export const de_CancelImportTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelImportTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelImportTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelImportTaskResult(data, context);
  const response: CancelImportTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelImportTaskCommandError
 */
const de_CancelImportTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelImportTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelReservedInstancesListingCommand
 */
export const de_CancelReservedInstancesListingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelReservedInstancesListingCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelReservedInstancesListingCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelReservedInstancesListingResult(data, context);
  const response: CancelReservedInstancesListingCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelReservedInstancesListingCommandError
 */
const de_CancelReservedInstancesListingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelReservedInstancesListingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsCommand
 */
export const de_CancelSpotFleetRequestsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelSpotFleetRequestsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelSpotFleetRequestsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelSpotFleetRequestsResponse(data, context);
  const response: CancelSpotFleetRequestsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsCommandError
 */
const de_CancelSpotFleetRequestsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelSpotFleetRequestsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CancelSpotInstanceRequestsCommand
 */
export const de_CancelSpotInstanceRequestsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelSpotInstanceRequestsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CancelSpotInstanceRequestsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CancelSpotInstanceRequestsResult(data, context);
  const response: CancelSpotInstanceRequestsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CancelSpotInstanceRequestsCommandError
 */
const de_CancelSpotInstanceRequestsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CancelSpotInstanceRequestsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ConfirmProductInstanceCommand
 */
export const de_ConfirmProductInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ConfirmProductInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ConfirmProductInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ConfirmProductInstanceResult(data, context);
  const response: ConfirmProductInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ConfirmProductInstanceCommandError
 */
const de_ConfirmProductInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ConfirmProductInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CopyFpgaImageCommand
 */
export const de_CopyFpgaImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopyFpgaImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CopyFpgaImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CopyFpgaImageResult(data, context);
  const response: CopyFpgaImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CopyFpgaImageCommandError
 */
const de_CopyFpgaImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopyFpgaImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CopyImageCommand
 */
export const de_CopyImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopyImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CopyImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CopyImageResult(data, context);
  const response: CopyImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CopyImageCommandError
 */
const de_CopyImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopyImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CopySnapshotCommand
 */
export const de_CopySnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopySnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CopySnapshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CopySnapshotResult(data, context);
  const response: CopySnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CopySnapshotCommandError
 */
const de_CopySnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CopySnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateCapacityReservationCommand
 */
export const de_CreateCapacityReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCapacityReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateCapacityReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateCapacityReservationResult(data, context);
  const response: CreateCapacityReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateCapacityReservationCommandError
 */
const de_CreateCapacityReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCapacityReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateCapacityReservationFleetCommand
 */
export const de_CreateCapacityReservationFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCapacityReservationFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateCapacityReservationFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateCapacityReservationFleetResult(data, context);
  const response: CreateCapacityReservationFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateCapacityReservationFleetCommandError
 */
const de_CreateCapacityReservationFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCapacityReservationFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateCarrierGatewayCommand
 */
export const de_CreateCarrierGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCarrierGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateCarrierGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateCarrierGatewayResult(data, context);
  const response: CreateCarrierGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateCarrierGatewayCommandError
 */
const de_CreateCarrierGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCarrierGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateClientVpnEndpointCommand
 */
export const de_CreateClientVpnEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateClientVpnEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateClientVpnEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateClientVpnEndpointResult(data, context);
  const response: CreateClientVpnEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateClientVpnEndpointCommandError
 */
const de_CreateClientVpnEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateClientVpnEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateClientVpnRouteCommand
 */
export const de_CreateClientVpnRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateClientVpnRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateClientVpnRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateClientVpnRouteResult(data, context);
  const response: CreateClientVpnRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateClientVpnRouteCommandError
 */
const de_CreateClientVpnRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateClientVpnRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateCoipCidrCommand
 */
export const de_CreateCoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateCoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateCoipCidrResult(data, context);
  const response: CreateCoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateCoipCidrCommandError
 */
const de_CreateCoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateCoipPoolCommand
 */
export const de_CreateCoipPoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCoipPoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateCoipPoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateCoipPoolResult(data, context);
  const response: CreateCoipPoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateCoipPoolCommandError
 */
const de_CreateCoipPoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCoipPoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateCustomerGatewayCommand
 */
export const de_CreateCustomerGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCustomerGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateCustomerGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateCustomerGatewayResult(data, context);
  const response: CreateCustomerGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateCustomerGatewayCommandError
 */
const de_CreateCustomerGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateCustomerGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateDefaultSubnetCommand
 */
export const de_CreateDefaultSubnetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDefaultSubnetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateDefaultSubnetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateDefaultSubnetResult(data, context);
  const response: CreateDefaultSubnetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateDefaultSubnetCommandError
 */
const de_CreateDefaultSubnetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDefaultSubnetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateDefaultVpcCommand
 */
export const de_CreateDefaultVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDefaultVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateDefaultVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateDefaultVpcResult(data, context);
  const response: CreateDefaultVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateDefaultVpcCommandError
 */
const de_CreateDefaultVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDefaultVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateDhcpOptionsCommand
 */
export const de_CreateDhcpOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDhcpOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateDhcpOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateDhcpOptionsResult(data, context);
  const response: CreateDhcpOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateDhcpOptionsCommandError
 */
const de_CreateDhcpOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateDhcpOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateEgressOnlyInternetGatewayCommand
 */
export const de_CreateEgressOnlyInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateEgressOnlyInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateEgressOnlyInternetGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateEgressOnlyInternetGatewayResult(data, context);
  const response: CreateEgressOnlyInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateEgressOnlyInternetGatewayCommandError
 */
const de_CreateEgressOnlyInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateEgressOnlyInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateFleetCommand
 */
export const de_CreateFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateFleetResult(data, context);
  const response: CreateFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateFleetCommandError
 */
const de_CreateFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateFlowLogsCommand
 */
export const de_CreateFlowLogsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFlowLogsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateFlowLogsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateFlowLogsResult(data, context);
  const response: CreateFlowLogsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateFlowLogsCommandError
 */
const de_CreateFlowLogsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFlowLogsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateFpgaImageCommand
 */
export const de_CreateFpgaImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFpgaImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateFpgaImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateFpgaImageResult(data, context);
  const response: CreateFpgaImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateFpgaImageCommandError
 */
const de_CreateFpgaImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateFpgaImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateImageCommand
 */
export const de_CreateImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateImageResult(data, context);
  const response: CreateImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateImageCommandError
 */
const de_CreateImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateInstanceConnectEndpointCommand
 */
export const de_CreateInstanceConnectEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceConnectEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateInstanceConnectEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateInstanceConnectEndpointResult(data, context);
  const response: CreateInstanceConnectEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateInstanceConnectEndpointCommandError
 */
const de_CreateInstanceConnectEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceConnectEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateInstanceEventWindowCommand
 */
export const de_CreateInstanceEventWindowCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceEventWindowCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateInstanceEventWindowCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateInstanceEventWindowResult(data, context);
  const response: CreateInstanceEventWindowCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateInstanceEventWindowCommandError
 */
const de_CreateInstanceEventWindowCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceEventWindowCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateInstanceExportTaskCommand
 */
export const de_CreateInstanceExportTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceExportTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateInstanceExportTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateInstanceExportTaskResult(data, context);
  const response: CreateInstanceExportTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateInstanceExportTaskCommandError
 */
const de_CreateInstanceExportTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInstanceExportTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateInternetGatewayCommand
 */
export const de_CreateInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateInternetGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateInternetGatewayResult(data, context);
  const response: CreateInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateInternetGatewayCommandError
 */
const de_CreateInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateIpamCommand
 */
export const de_CreateIpamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateIpamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateIpamResult(data, context);
  const response: CreateIpamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateIpamCommandError
 */
const de_CreateIpamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateIpamPoolCommand
 */
export const de_CreateIpamPoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamPoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateIpamPoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateIpamPoolResult(data, context);
  const response: CreateIpamPoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateIpamPoolCommandError
 */
const de_CreateIpamPoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamPoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateIpamResourceDiscoveryCommand
 */
export const de_CreateIpamResourceDiscoveryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamResourceDiscoveryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateIpamResourceDiscoveryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateIpamResourceDiscoveryResult(data, context);
  const response: CreateIpamResourceDiscoveryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateIpamResourceDiscoveryCommandError
 */
const de_CreateIpamResourceDiscoveryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamResourceDiscoveryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateIpamScopeCommand
 */
export const de_CreateIpamScopeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamScopeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateIpamScopeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateIpamScopeResult(data, context);
  const response: CreateIpamScopeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateIpamScopeCommandError
 */
const de_CreateIpamScopeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateIpamScopeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateKeyPairCommand
 */
export const de_CreateKeyPairCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateKeyPairCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateKeyPairCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_KeyPair(data, context);
  const response: CreateKeyPairCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateKeyPairCommandError
 */
const de_CreateKeyPairCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateKeyPairCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateLaunchTemplateCommand
 */
export const de_CreateLaunchTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLaunchTemplateCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateLaunchTemplateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateLaunchTemplateResult(data, context);
  const response: CreateLaunchTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateLaunchTemplateCommandError
 */
const de_CreateLaunchTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLaunchTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateLaunchTemplateVersionCommand
 */
export const de_CreateLaunchTemplateVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLaunchTemplateVersionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateLaunchTemplateVersionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateLaunchTemplateVersionResult(data, context);
  const response: CreateLaunchTemplateVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateLaunchTemplateVersionCommandError
 */
const de_CreateLaunchTemplateVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLaunchTemplateVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteCommand
 */
export const de_CreateLocalGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateLocalGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateLocalGatewayRouteResult(data, context);
  const response: CreateLocalGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteCommandError
 */
const de_CreateLocalGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableCommand
 */
export const de_CreateLocalGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateLocalGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateLocalGatewayRouteTableResult(data, context);
  const response: CreateLocalGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableCommandError
 */
const de_CreateLocalGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand
 */
export const de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult(data, context);
  const response: CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError
 */
const de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommand
 */
export const de_CreateLocalGatewayRouteTableVpcAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableVpcAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateLocalGatewayRouteTableVpcAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateLocalGatewayRouteTableVpcAssociationResult(data, context);
  const response: CreateLocalGatewayRouteTableVpcAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationCommandError
 */
const de_CreateLocalGatewayRouteTableVpcAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateLocalGatewayRouteTableVpcAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateManagedPrefixListCommand
 */
export const de_CreateManagedPrefixListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateManagedPrefixListCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateManagedPrefixListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateManagedPrefixListResult(data, context);
  const response: CreateManagedPrefixListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateManagedPrefixListCommandError
 */
const de_CreateManagedPrefixListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateManagedPrefixListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNatGatewayCommand
 */
export const de_CreateNatGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNatGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNatGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateNatGatewayResult(data, context);
  const response: CreateNatGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNatGatewayCommandError
 */
const de_CreateNatGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNatGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNetworkAclCommand
 */
export const de_CreateNetworkAclCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkAclCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNetworkAclCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateNetworkAclResult(data, context);
  const response: CreateNetworkAclCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNetworkAclCommandError
 */
const de_CreateNetworkAclCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkAclCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNetworkAclEntryCommand
 */
export const de_CreateNetworkAclEntryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkAclEntryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNetworkAclEntryCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CreateNetworkAclEntryCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNetworkAclEntryCommandError
 */
const de_CreateNetworkAclEntryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkAclEntryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNetworkInsightsAccessScopeCommand
 */
export const de_CreateNetworkInsightsAccessScopeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInsightsAccessScopeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNetworkInsightsAccessScopeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateNetworkInsightsAccessScopeResult(data, context);
  const response: CreateNetworkInsightsAccessScopeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNetworkInsightsAccessScopeCommandError
 */
const de_CreateNetworkInsightsAccessScopeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInsightsAccessScopeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNetworkInsightsPathCommand
 */
export const de_CreateNetworkInsightsPathCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInsightsPathCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNetworkInsightsPathCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateNetworkInsightsPathResult(data, context);
  const response: CreateNetworkInsightsPathCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNetworkInsightsPathCommandError
 */
const de_CreateNetworkInsightsPathCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInsightsPathCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNetworkInterfaceCommand
 */
export const de_CreateNetworkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNetworkInterfaceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateNetworkInterfaceResult(data, context);
  const response: CreateNetworkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNetworkInterfaceCommandError
 */
const de_CreateNetworkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateNetworkInterfacePermissionCommand
 */
export const de_CreateNetworkInterfacePermissionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInterfacePermissionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateNetworkInterfacePermissionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateNetworkInterfacePermissionResult(data, context);
  const response: CreateNetworkInterfacePermissionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateNetworkInterfacePermissionCommandError
 */
const de_CreateNetworkInterfacePermissionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateNetworkInterfacePermissionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreatePlacementGroupCommand
 */
export const de_CreatePlacementGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePlacementGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreatePlacementGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreatePlacementGroupResult(data, context);
  const response: CreatePlacementGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreatePlacementGroupCommandError
 */
const de_CreatePlacementGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePlacementGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreatePublicIpv4PoolCommand
 */
export const de_CreatePublicIpv4PoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePublicIpv4PoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreatePublicIpv4PoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreatePublicIpv4PoolResult(data, context);
  const response: CreatePublicIpv4PoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreatePublicIpv4PoolCommandError
 */
const de_CreatePublicIpv4PoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreatePublicIpv4PoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateReplaceRootVolumeTaskCommand
 */
export const de_CreateReplaceRootVolumeTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateReplaceRootVolumeTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateReplaceRootVolumeTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateReplaceRootVolumeTaskResult(data, context);
  const response: CreateReplaceRootVolumeTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateReplaceRootVolumeTaskCommandError
 */
const de_CreateReplaceRootVolumeTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateReplaceRootVolumeTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateReservedInstancesListingCommand
 */
export const de_CreateReservedInstancesListingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateReservedInstancesListingCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateReservedInstancesListingCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateReservedInstancesListingResult(data, context);
  const response: CreateReservedInstancesListingCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateReservedInstancesListingCommandError
 */
const de_CreateReservedInstancesListingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateReservedInstancesListingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateRestoreImageTaskCommand
 */
export const de_CreateRestoreImageTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRestoreImageTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateRestoreImageTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateRestoreImageTaskResult(data, context);
  const response: CreateRestoreImageTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateRestoreImageTaskCommandError
 */
const de_CreateRestoreImageTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRestoreImageTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateRouteCommand
 */
export const de_CreateRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateRouteResult(data, context);
  const response: CreateRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateRouteCommandError
 */
const de_CreateRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateRouteTableCommand
 */
export const de_CreateRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateRouteTableResult(data, context);
  const response: CreateRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateRouteTableCommandError
 */
const de_CreateRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateSecurityGroupCommand
 */
export const de_CreateSecurityGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSecurityGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateSecurityGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateSecurityGroupResult(data, context);
  const response: CreateSecurityGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateSecurityGroupCommandError
 */
const de_CreateSecurityGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSecurityGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateSnapshotCommand
 */
export const de_CreateSnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateSnapshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_Snapshot(data, context);
  const response: CreateSnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateSnapshotCommandError
 */
const de_CreateSnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateSnapshotsCommand
 */
export const de_CreateSnapshotsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSnapshotsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateSnapshotsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateSnapshotsResult(data, context);
  const response: CreateSnapshotsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateSnapshotsCommandError
 */
const de_CreateSnapshotsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSnapshotsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateSpotDatafeedSubscriptionCommand
 */
export const de_CreateSpotDatafeedSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSpotDatafeedSubscriptionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateSpotDatafeedSubscriptionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateSpotDatafeedSubscriptionResult(data, context);
  const response: CreateSpotDatafeedSubscriptionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateSpotDatafeedSubscriptionCommandError
 */
const de_CreateSpotDatafeedSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSpotDatafeedSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateStoreImageTaskCommand
 */
export const de_CreateStoreImageTaskCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateStoreImageTaskCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateStoreImageTaskCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateStoreImageTaskResult(data, context);
  const response: CreateStoreImageTaskCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateStoreImageTaskCommandError
 */
const de_CreateStoreImageTaskCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateStoreImageTaskCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateSubnetCommand
 */
export const de_CreateSubnetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSubnetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateSubnetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateSubnetResult(data, context);
  const response: CreateSubnetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateSubnetCommandError
 */
const de_CreateSubnetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSubnetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateSubnetCidrReservationCommand
 */
export const de_CreateSubnetCidrReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSubnetCidrReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateSubnetCidrReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateSubnetCidrReservationResult(data, context);
  const response: CreateSubnetCidrReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateSubnetCidrReservationCommandError
 */
const de_CreateSubnetCidrReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateSubnetCidrReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTagsCommand
 */
export const de_CreateTagsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTagsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTagsCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CreateTagsCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTagsCommandError
 */
const de_CreateTagsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTagsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTrafficMirrorFilterCommand
 */
export const de_CreateTrafficMirrorFilterCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorFilterCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTrafficMirrorFilterCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTrafficMirrorFilterResult(data, context);
  const response: CreateTrafficMirrorFilterCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorFilterCommandError
 */
const de_CreateTrafficMirrorFilterCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorFilterCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTrafficMirrorFilterRuleCommand
 */
export const de_CreateTrafficMirrorFilterRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorFilterRuleCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTrafficMirrorFilterRuleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTrafficMirrorFilterRuleResult(data, context);
  const response: CreateTrafficMirrorFilterRuleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorFilterRuleCommandError
 */
const de_CreateTrafficMirrorFilterRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorFilterRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTrafficMirrorSessionCommand
 */
export const de_CreateTrafficMirrorSessionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorSessionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTrafficMirrorSessionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTrafficMirrorSessionResult(data, context);
  const response: CreateTrafficMirrorSessionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorSessionCommandError
 */
const de_CreateTrafficMirrorSessionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorSessionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTrafficMirrorTargetCommand
 */
export const de_CreateTrafficMirrorTargetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorTargetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTrafficMirrorTargetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTrafficMirrorTargetResult(data, context);
  const response: CreateTrafficMirrorTargetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorTargetCommandError
 */
const de_CreateTrafficMirrorTargetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTrafficMirrorTargetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayCommand
 */
export const de_CreateTransitGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayResult(data, context);
  const response: CreateTransitGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayCommandError
 */
const de_CreateTransitGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayConnectCommand
 */
export const de_CreateTransitGatewayConnectCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayConnectCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayConnectCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayConnectResult(data, context);
  const response: CreateTransitGatewayConnectCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayConnectCommandError
 */
const de_CreateTransitGatewayConnectCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayConnectCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayConnectPeerCommand
 */
export const de_CreateTransitGatewayConnectPeerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayConnectPeerCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayConnectPeerCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayConnectPeerResult(data, context);
  const response: CreateTransitGatewayConnectPeerCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayConnectPeerCommandError
 */
const de_CreateTransitGatewayConnectPeerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayConnectPeerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayMulticastDomainCommand
 */
export const de_CreateTransitGatewayMulticastDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayMulticastDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayMulticastDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayMulticastDomainResult(data, context);
  const response: CreateTransitGatewayMulticastDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayMulticastDomainCommandError
 */
const de_CreateTransitGatewayMulticastDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayMulticastDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommand
 */
export const de_CreateTransitGatewayPeeringAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPeeringAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayPeeringAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayPeeringAttachmentResult(data, context);
  const response: CreateTransitGatewayPeeringAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayPeeringAttachmentCommandError
 */
const de_CreateTransitGatewayPeeringAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPeeringAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayPolicyTableCommand
 */
export const de_CreateTransitGatewayPolicyTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPolicyTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayPolicyTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayPolicyTableResult(data, context);
  const response: CreateTransitGatewayPolicyTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayPolicyTableCommandError
 */
const de_CreateTransitGatewayPolicyTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPolicyTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommand
 */
export const de_CreateTransitGatewayPrefixListReferenceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPrefixListReferenceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayPrefixListReferenceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayPrefixListReferenceResult(data, context);
  const response: CreateTransitGatewayPrefixListReferenceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayPrefixListReferenceCommandError
 */
const de_CreateTransitGatewayPrefixListReferenceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayPrefixListReferenceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteCommand
 */
export const de_CreateTransitGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayRouteResult(data, context);
  const response: CreateTransitGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteCommandError
 */
const de_CreateTransitGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteTableCommand
 */
export const de_CreateTransitGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayRouteTableResult(data, context);
  const response: CreateTransitGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteTableCommandError
 */
const de_CreateTransitGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteTableAnnouncementCommand
 */
export const de_CreateTransitGatewayRouteTableAnnouncementCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteTableAnnouncementCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayRouteTableAnnouncementCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayRouteTableAnnouncementResult(data, context);
  const response: CreateTransitGatewayRouteTableAnnouncementCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteTableAnnouncementCommandError
 */
const de_CreateTransitGatewayRouteTableAnnouncementCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayRouteTableAnnouncementCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommand
 */
export const de_CreateTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateTransitGatewayVpcAttachmentResult(data, context);
  const response: CreateTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateTransitGatewayVpcAttachmentCommandError
 */
const de_CreateTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVerifiedAccessEndpointCommand
 */
export const de_CreateVerifiedAccessEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVerifiedAccessEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVerifiedAccessEndpointResult(data, context);
  const response: CreateVerifiedAccessEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessEndpointCommandError
 */
const de_CreateVerifiedAccessEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVerifiedAccessGroupCommand
 */
export const de_CreateVerifiedAccessGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVerifiedAccessGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVerifiedAccessGroupResult(data, context);
  const response: CreateVerifiedAccessGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessGroupCommandError
 */
const de_CreateVerifiedAccessGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVerifiedAccessInstanceCommand
 */
export const de_CreateVerifiedAccessInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVerifiedAccessInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVerifiedAccessInstanceResult(data, context);
  const response: CreateVerifiedAccessInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessInstanceCommandError
 */
const de_CreateVerifiedAccessInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVerifiedAccessTrustProviderCommand
 */
export const de_CreateVerifiedAccessTrustProviderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessTrustProviderCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVerifiedAccessTrustProviderCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVerifiedAccessTrustProviderResult(data, context);
  const response: CreateVerifiedAccessTrustProviderCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessTrustProviderCommandError
 */
const de_CreateVerifiedAccessTrustProviderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVerifiedAccessTrustProviderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVolumeCommand
 */
export const de_CreateVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_Volume(data, context);
  const response: CreateVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVolumeCommandError
 */
const de_CreateVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpcCommand
 */
export const de_CreateVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpcResult(data, context);
  const response: CreateVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpcCommandError
 */
const de_CreateVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpcEndpointCommand
 */
export const de_CreateVpcEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpcEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpcEndpointResult(data, context);
  const response: CreateVpcEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpcEndpointCommandError
 */
const de_CreateVpcEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommand
 */
export const de_CreateVpcEndpointConnectionNotificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointConnectionNotificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpcEndpointConnectionNotificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpcEndpointConnectionNotificationResult(data, context);
  const response: CreateVpcEndpointConnectionNotificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpcEndpointConnectionNotificationCommandError
 */
const de_CreateVpcEndpointConnectionNotificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointConnectionNotificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommand
 */
export const de_CreateVpcEndpointServiceConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointServiceConfigurationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpcEndpointServiceConfigurationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpcEndpointServiceConfigurationResult(data, context);
  const response: CreateVpcEndpointServiceConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpcEndpointServiceConfigurationCommandError
 */
const de_CreateVpcEndpointServiceConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcEndpointServiceConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpcPeeringConnectionCommand
 */
export const de_CreateVpcPeeringConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcPeeringConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpcPeeringConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpcPeeringConnectionResult(data, context);
  const response: CreateVpcPeeringConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpcPeeringConnectionCommandError
 */
const de_CreateVpcPeeringConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpcPeeringConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpnConnectionCommand
 */
export const de_CreateVpnConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpnConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpnConnectionResult(data, context);
  const response: CreateVpnConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpnConnectionCommandError
 */
const de_CreateVpnConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpnConnectionRouteCommand
 */
export const de_CreateVpnConnectionRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnConnectionRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpnConnectionRouteCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: CreateVpnConnectionRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpnConnectionRouteCommandError
 */
const de_CreateVpnConnectionRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnConnectionRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2CreateVpnGatewayCommand
 */
export const de_CreateVpnGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_CreateVpnGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_CreateVpnGatewayResult(data, context);
  const response: CreateVpnGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2CreateVpnGatewayCommandError
 */
const de_CreateVpnGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<CreateVpnGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteCarrierGatewayCommand
 */
export const de_DeleteCarrierGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCarrierGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteCarrierGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteCarrierGatewayResult(data, context);
  const response: DeleteCarrierGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteCarrierGatewayCommandError
 */
const de_DeleteCarrierGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCarrierGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteClientVpnEndpointCommand
 */
export const de_DeleteClientVpnEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteClientVpnEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteClientVpnEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteClientVpnEndpointResult(data, context);
  const response: DeleteClientVpnEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteClientVpnEndpointCommandError
 */
const de_DeleteClientVpnEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteClientVpnEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteClientVpnRouteCommand
 */
export const de_DeleteClientVpnRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteClientVpnRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteClientVpnRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteClientVpnRouteResult(data, context);
  const response: DeleteClientVpnRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteClientVpnRouteCommandError
 */
const de_DeleteClientVpnRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteClientVpnRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteCoipCidrCommand
 */
export const de_DeleteCoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteCoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteCoipCidrResult(data, context);
  const response: DeleteCoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteCoipCidrCommandError
 */
const de_DeleteCoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteCoipPoolCommand
 */
export const de_DeleteCoipPoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCoipPoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteCoipPoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteCoipPoolResult(data, context);
  const response: DeleteCoipPoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteCoipPoolCommandError
 */
const de_DeleteCoipPoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCoipPoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteCustomerGatewayCommand
 */
export const de_DeleteCustomerGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCustomerGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteCustomerGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteCustomerGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteCustomerGatewayCommandError
 */
const de_DeleteCustomerGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteCustomerGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteDhcpOptionsCommand
 */
export const de_DeleteDhcpOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDhcpOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteDhcpOptionsCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteDhcpOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteDhcpOptionsCommandError
 */
const de_DeleteDhcpOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteDhcpOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommand
 */
export const de_DeleteEgressOnlyInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteEgressOnlyInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteEgressOnlyInternetGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteEgressOnlyInternetGatewayResult(data, context);
  const response: DeleteEgressOnlyInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteEgressOnlyInternetGatewayCommandError
 */
const de_DeleteEgressOnlyInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteEgressOnlyInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteFleetsCommand
 */
export const de_DeleteFleetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFleetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteFleetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteFleetsResult(data, context);
  const response: DeleteFleetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteFleetsCommandError
 */
const de_DeleteFleetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFleetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteFlowLogsCommand
 */
export const de_DeleteFlowLogsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFlowLogsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteFlowLogsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteFlowLogsResult(data, context);
  const response: DeleteFlowLogsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteFlowLogsCommandError
 */
const de_DeleteFlowLogsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFlowLogsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteFpgaImageCommand
 */
export const de_DeleteFpgaImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFpgaImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteFpgaImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteFpgaImageResult(data, context);
  const response: DeleteFpgaImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteFpgaImageCommandError
 */
const de_DeleteFpgaImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteFpgaImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteInstanceConnectEndpointCommand
 */
export const de_DeleteInstanceConnectEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInstanceConnectEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteInstanceConnectEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteInstanceConnectEndpointResult(data, context);
  const response: DeleteInstanceConnectEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteInstanceConnectEndpointCommandError
 */
const de_DeleteInstanceConnectEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInstanceConnectEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteInstanceEventWindowCommand
 */
export const de_DeleteInstanceEventWindowCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInstanceEventWindowCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteInstanceEventWindowCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteInstanceEventWindowResult(data, context);
  const response: DeleteInstanceEventWindowCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteInstanceEventWindowCommandError
 */
const de_DeleteInstanceEventWindowCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInstanceEventWindowCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteInternetGatewayCommand
 */
export const de_DeleteInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteInternetGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteInternetGatewayCommandError
 */
const de_DeleteInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteIpamCommand
 */
export const de_DeleteIpamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteIpamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteIpamResult(data, context);
  const response: DeleteIpamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteIpamCommandError
 */
const de_DeleteIpamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteIpamPoolCommand
 */
export const de_DeleteIpamPoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamPoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteIpamPoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteIpamPoolResult(data, context);
  const response: DeleteIpamPoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteIpamPoolCommandError
 */
const de_DeleteIpamPoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamPoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteIpamResourceDiscoveryCommand
 */
export const de_DeleteIpamResourceDiscoveryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamResourceDiscoveryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteIpamResourceDiscoveryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteIpamResourceDiscoveryResult(data, context);
  const response: DeleteIpamResourceDiscoveryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteIpamResourceDiscoveryCommandError
 */
const de_DeleteIpamResourceDiscoveryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamResourceDiscoveryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteIpamScopeCommand
 */
export const de_DeleteIpamScopeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamScopeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteIpamScopeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteIpamScopeResult(data, context);
  const response: DeleteIpamScopeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteIpamScopeCommandError
 */
const de_DeleteIpamScopeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteIpamScopeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteKeyPairCommand
 */
export const de_DeleteKeyPairCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteKeyPairCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteKeyPairCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteKeyPairResult(data, context);
  const response: DeleteKeyPairCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteKeyPairCommandError
 */
const de_DeleteKeyPairCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteKeyPairCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateCommand
 */
export const de_DeleteLaunchTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLaunchTemplateCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteLaunchTemplateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteLaunchTemplateResult(data, context);
  const response: DeleteLaunchTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateCommandError
 */
const de_DeleteLaunchTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLaunchTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsCommand
 */
export const de_DeleteLaunchTemplateVersionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLaunchTemplateVersionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteLaunchTemplateVersionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteLaunchTemplateVersionsResult(data, context);
  const response: DeleteLaunchTemplateVersionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsCommandError
 */
const de_DeleteLaunchTemplateVersionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLaunchTemplateVersionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteCommand
 */
export const de_DeleteLocalGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteLocalGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteLocalGatewayRouteResult(data, context);
  const response: DeleteLocalGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteCommandError
 */
const de_DeleteLocalGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableCommand
 */
export const de_DeleteLocalGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteLocalGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteLocalGatewayRouteTableResult(data, context);
  const response: DeleteLocalGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableCommandError
 */
const de_DeleteLocalGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand
 */
export const de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult(data, context);
  const response: DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError
 */
const de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommand
 */
export const de_DeleteLocalGatewayRouteTableVpcAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableVpcAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteLocalGatewayRouteTableVpcAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteLocalGatewayRouteTableVpcAssociationResult(data, context);
  const response: DeleteLocalGatewayRouteTableVpcAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationCommandError
 */
const de_DeleteLocalGatewayRouteTableVpcAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteLocalGatewayRouteTableVpcAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteManagedPrefixListCommand
 */
export const de_DeleteManagedPrefixListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteManagedPrefixListCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteManagedPrefixListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteManagedPrefixListResult(data, context);
  const response: DeleteManagedPrefixListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteManagedPrefixListCommandError
 */
const de_DeleteManagedPrefixListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteManagedPrefixListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNatGatewayCommand
 */
export const de_DeleteNatGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNatGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNatGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteNatGatewayResult(data, context);
  const response: DeleteNatGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNatGatewayCommandError
 */
const de_DeleteNatGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNatGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkAclCommand
 */
export const de_DeleteNetworkAclCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkAclCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkAclCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteNetworkAclCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkAclCommandError
 */
const de_DeleteNetworkAclCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkAclCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkAclEntryCommand
 */
export const de_DeleteNetworkAclEntryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkAclEntryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkAclEntryCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteNetworkAclEntryCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkAclEntryCommandError
 */
const de_DeleteNetworkAclEntryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkAclEntryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAccessScopeCommand
 */
export const de_DeleteNetworkInsightsAccessScopeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAccessScopeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkInsightsAccessScopeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteNetworkInsightsAccessScopeResult(data, context);
  const response: DeleteNetworkInsightsAccessScopeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAccessScopeCommandError
 */
const de_DeleteNetworkInsightsAccessScopeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAccessScopeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommand
 */
export const de_DeleteNetworkInsightsAccessScopeAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAccessScopeAnalysisCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkInsightsAccessScopeAnalysisCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteNetworkInsightsAccessScopeAnalysisResult(data, context);
  const response: DeleteNetworkInsightsAccessScopeAnalysisCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisCommandError
 */
const de_DeleteNetworkInsightsAccessScopeAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAccessScopeAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAnalysisCommand
 */
export const de_DeleteNetworkInsightsAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAnalysisCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkInsightsAnalysisCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteNetworkInsightsAnalysisResult(data, context);
  const response: DeleteNetworkInsightsAnalysisCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAnalysisCommandError
 */
const de_DeleteNetworkInsightsAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsPathCommand
 */
export const de_DeleteNetworkInsightsPathCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsPathCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkInsightsPathCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteNetworkInsightsPathResult(data, context);
  const response: DeleteNetworkInsightsPathCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsPathCommandError
 */
const de_DeleteNetworkInsightsPathCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInsightsPathCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkInterfaceCommand
 */
export const de_DeleteNetworkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkInterfaceCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteNetworkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkInterfaceCommandError
 */
const de_DeleteNetworkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteNetworkInterfacePermissionCommand
 */
export const de_DeleteNetworkInterfacePermissionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInterfacePermissionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteNetworkInterfacePermissionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteNetworkInterfacePermissionResult(data, context);
  const response: DeleteNetworkInterfacePermissionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteNetworkInterfacePermissionCommandError
 */
const de_DeleteNetworkInterfacePermissionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteNetworkInterfacePermissionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeletePlacementGroupCommand
 */
export const de_DeletePlacementGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePlacementGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeletePlacementGroupCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeletePlacementGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeletePlacementGroupCommandError
 */
const de_DeletePlacementGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePlacementGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeletePublicIpv4PoolCommand
 */
export const de_DeletePublicIpv4PoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePublicIpv4PoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeletePublicIpv4PoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeletePublicIpv4PoolResult(data, context);
  const response: DeletePublicIpv4PoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeletePublicIpv4PoolCommandError
 */
const de_DeletePublicIpv4PoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeletePublicIpv4PoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteQueuedReservedInstancesCommand
 */
export const de_DeleteQueuedReservedInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteQueuedReservedInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteQueuedReservedInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteQueuedReservedInstancesResult(data, context);
  const response: DeleteQueuedReservedInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteQueuedReservedInstancesCommandError
 */
const de_DeleteQueuedReservedInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteQueuedReservedInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteRouteCommand
 */
export const de_DeleteRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteRouteCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteRouteCommandError
 */
const de_DeleteRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteRouteTableCommand
 */
export const de_DeleteRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteRouteTableCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteRouteTableCommandError
 */
const de_DeleteRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteSecurityGroupCommand
 */
export const de_DeleteSecurityGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSecurityGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteSecurityGroupCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteSecurityGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteSecurityGroupCommandError
 */
const de_DeleteSecurityGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSecurityGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteSnapshotCommand
 */
export const de_DeleteSnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteSnapshotCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteSnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteSnapshotCommandError
 */
const de_DeleteSnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommand
 */
export const de_DeleteSpotDatafeedSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSpotDatafeedSubscriptionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteSpotDatafeedSubscriptionCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteSpotDatafeedSubscriptionCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteSpotDatafeedSubscriptionCommandError
 */
const de_DeleteSpotDatafeedSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSpotDatafeedSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteSubnetCommand
 */
export const de_DeleteSubnetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSubnetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteSubnetCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteSubnetCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteSubnetCommandError
 */
const de_DeleteSubnetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSubnetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteSubnetCidrReservationCommand
 */
export const de_DeleteSubnetCidrReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSubnetCidrReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteSubnetCidrReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteSubnetCidrReservationResult(data, context);
  const response: DeleteSubnetCidrReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteSubnetCidrReservationCommandError
 */
const de_DeleteSubnetCidrReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteSubnetCidrReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTagsCommand
 */
export const de_DeleteTagsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTagsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTagsCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteTagsCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTagsCommandError
 */
const de_DeleteTagsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTagsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorFilterCommand
 */
export const de_DeleteTrafficMirrorFilterCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorFilterCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTrafficMirrorFilterCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTrafficMirrorFilterResult(data, context);
  const response: DeleteTrafficMirrorFilterCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorFilterCommandError
 */
const de_DeleteTrafficMirrorFilterCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorFilterCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommand
 */
export const de_DeleteTrafficMirrorFilterRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorFilterRuleCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTrafficMirrorFilterRuleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTrafficMirrorFilterRuleResult(data, context);
  const response: DeleteTrafficMirrorFilterRuleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorFilterRuleCommandError
 */
const de_DeleteTrafficMirrorFilterRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorFilterRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorSessionCommand
 */
export const de_DeleteTrafficMirrorSessionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorSessionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTrafficMirrorSessionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTrafficMirrorSessionResult(data, context);
  const response: DeleteTrafficMirrorSessionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorSessionCommandError
 */
const de_DeleteTrafficMirrorSessionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorSessionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorTargetCommand
 */
export const de_DeleteTrafficMirrorTargetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorTargetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTrafficMirrorTargetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTrafficMirrorTargetResult(data, context);
  const response: DeleteTrafficMirrorTargetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorTargetCommandError
 */
const de_DeleteTrafficMirrorTargetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTrafficMirrorTargetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayCommand
 */
export const de_DeleteTransitGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayResult(data, context);
  const response: DeleteTransitGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayCommandError
 */
const de_DeleteTransitGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayConnectCommand
 */
export const de_DeleteTransitGatewayConnectCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayConnectCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayConnectCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayConnectResult(data, context);
  const response: DeleteTransitGatewayConnectCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayConnectCommandError
 */
const de_DeleteTransitGatewayConnectCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayConnectCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayConnectPeerCommand
 */
export const de_DeleteTransitGatewayConnectPeerCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayConnectPeerCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayConnectPeerCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayConnectPeerResult(data, context);
  const response: DeleteTransitGatewayConnectPeerCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayConnectPeerCommandError
 */
const de_DeleteTransitGatewayConnectPeerCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayConnectPeerCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommand
 */
export const de_DeleteTransitGatewayMulticastDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayMulticastDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayMulticastDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayMulticastDomainResult(data, context);
  const response: DeleteTransitGatewayMulticastDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayMulticastDomainCommandError
 */
const de_DeleteTransitGatewayMulticastDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayMulticastDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommand
 */
export const de_DeleteTransitGatewayPeeringAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPeeringAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayPeeringAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayPeeringAttachmentResult(data, context);
  const response: DeleteTransitGatewayPeeringAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentCommandError
 */
const de_DeleteTransitGatewayPeeringAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPeeringAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPolicyTableCommand
 */
export const de_DeleteTransitGatewayPolicyTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPolicyTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayPolicyTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayPolicyTableResult(data, context);
  const response: DeleteTransitGatewayPolicyTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPolicyTableCommandError
 */
const de_DeleteTransitGatewayPolicyTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPolicyTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommand
 */
export const de_DeleteTransitGatewayPrefixListReferenceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPrefixListReferenceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayPrefixListReferenceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayPrefixListReferenceResult(data, context);
  const response: DeleteTransitGatewayPrefixListReferenceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceCommandError
 */
const de_DeleteTransitGatewayPrefixListReferenceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayPrefixListReferenceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteCommand
 */
export const de_DeleteTransitGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayRouteResult(data, context);
  const response: DeleteTransitGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteCommandError
 */
const de_DeleteTransitGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteTableCommand
 */
export const de_DeleteTransitGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayRouteTableResult(data, context);
  const response: DeleteTransitGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteTableCommandError
 */
const de_DeleteTransitGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteTableAnnouncementCommand
 */
export const de_DeleteTransitGatewayRouteTableAnnouncementCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteTableAnnouncementCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayRouteTableAnnouncementCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayRouteTableAnnouncementResult(data, context);
  const response: DeleteTransitGatewayRouteTableAnnouncementCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteTableAnnouncementCommandError
 */
const de_DeleteTransitGatewayRouteTableAnnouncementCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayRouteTableAnnouncementCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommand
 */
export const de_DeleteTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteTransitGatewayVpcAttachmentResult(data, context);
  const response: DeleteTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayVpcAttachmentCommandError
 */
const de_DeleteTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessEndpointCommand
 */
export const de_DeleteVerifiedAccessEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVerifiedAccessEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVerifiedAccessEndpointResult(data, context);
  const response: DeleteVerifiedAccessEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessEndpointCommandError
 */
const de_DeleteVerifiedAccessEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessGroupCommand
 */
export const de_DeleteVerifiedAccessGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVerifiedAccessGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVerifiedAccessGroupResult(data, context);
  const response: DeleteVerifiedAccessGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessGroupCommandError
 */
const de_DeleteVerifiedAccessGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessInstanceCommand
 */
export const de_DeleteVerifiedAccessInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVerifiedAccessInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVerifiedAccessInstanceResult(data, context);
  const response: DeleteVerifiedAccessInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessInstanceCommandError
 */
const de_DeleteVerifiedAccessInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessTrustProviderCommand
 */
export const de_DeleteVerifiedAccessTrustProviderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessTrustProviderCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVerifiedAccessTrustProviderCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVerifiedAccessTrustProviderResult(data, context);
  const response: DeleteVerifiedAccessTrustProviderCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessTrustProviderCommandError
 */
const de_DeleteVerifiedAccessTrustProviderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVerifiedAccessTrustProviderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVolumeCommand
 */
export const de_DeleteVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVolumeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVolumeCommandError
 */
const de_DeleteVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpcCommand
 */
export const de_DeleteVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpcCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpcCommandError
 */
const de_DeleteVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommand
 */
export const de_DeleteVpcEndpointConnectionNotificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointConnectionNotificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpcEndpointConnectionNotificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVpcEndpointConnectionNotificationsResult(data, context);
  const response: DeleteVpcEndpointConnectionNotificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsCommandError
 */
const de_DeleteVpcEndpointConnectionNotificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointConnectionNotificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpcEndpointsCommand
 */
export const de_DeleteVpcEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpcEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVpcEndpointsResult(data, context);
  const response: DeleteVpcEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpcEndpointsCommandError
 */
const de_DeleteVpcEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommand
 */
export const de_DeleteVpcEndpointServiceConfigurationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointServiceConfigurationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpcEndpointServiceConfigurationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVpcEndpointServiceConfigurationsResult(data, context);
  const response: DeleteVpcEndpointServiceConfigurationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsCommandError
 */
const de_DeleteVpcEndpointServiceConfigurationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcEndpointServiceConfigurationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpcPeeringConnectionCommand
 */
export const de_DeleteVpcPeeringConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcPeeringConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpcPeeringConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeleteVpcPeeringConnectionResult(data, context);
  const response: DeleteVpcPeeringConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpcPeeringConnectionCommandError
 */
const de_DeleteVpcPeeringConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpcPeeringConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpnConnectionCommand
 */
export const de_DeleteVpnConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpnConnectionCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVpnConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpnConnectionCommandError
 */
const de_DeleteVpnConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpnConnectionRouteCommand
 */
export const de_DeleteVpnConnectionRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnConnectionRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpnConnectionRouteCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVpnConnectionRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpnConnectionRouteCommandError
 */
const de_DeleteVpnConnectionRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnConnectionRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeleteVpnGatewayCommand
 */
export const de_DeleteVpnGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeleteVpnGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeleteVpnGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeleteVpnGatewayCommandError
 */
const de_DeleteVpnGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeleteVpnGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeprovisionByoipCidrCommand
 */
export const de_DeprovisionByoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionByoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeprovisionByoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeprovisionByoipCidrResult(data, context);
  const response: DeprovisionByoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeprovisionByoipCidrCommandError
 */
const de_DeprovisionByoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionByoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeprovisionIpamByoasnCommand
 */
export const de_DeprovisionIpamByoasnCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionIpamByoasnCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeprovisionIpamByoasnCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeprovisionIpamByoasnResult(data, context);
  const response: DeprovisionIpamByoasnCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeprovisionIpamByoasnCommandError
 */
const de_DeprovisionIpamByoasnCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionIpamByoasnCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeprovisionIpamPoolCidrCommand
 */
export const de_DeprovisionIpamPoolCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionIpamPoolCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeprovisionIpamPoolCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeprovisionIpamPoolCidrResult(data, context);
  const response: DeprovisionIpamPoolCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeprovisionIpamPoolCidrCommandError
 */
const de_DeprovisionIpamPoolCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionIpamPoolCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeprovisionPublicIpv4PoolCidrCommand
 */
export const de_DeprovisionPublicIpv4PoolCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionPublicIpv4PoolCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeprovisionPublicIpv4PoolCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeprovisionPublicIpv4PoolCidrResult(data, context);
  const response: DeprovisionPublicIpv4PoolCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeprovisionPublicIpv4PoolCidrCommandError
 */
const de_DeprovisionPublicIpv4PoolCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeprovisionPublicIpv4PoolCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeregisterImageCommand
 */
export const de_DeregisterImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeregisterImageCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DeregisterImageCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DeregisterImageCommandError
 */
const de_DeregisterImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommand
 */
export const de_DeregisterInstanceEventNotificationAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterInstanceEventNotificationAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeregisterInstanceEventNotificationAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeregisterInstanceEventNotificationAttributesResult(data, context);
  const response: DeregisterInstanceEventNotificationAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeregisterInstanceEventNotificationAttributesCommandError
 */
const de_DeregisterInstanceEventNotificationAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterInstanceEventNotificationAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommand
 */
export const de_DeregisterTransitGatewayMulticastGroupMembersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterTransitGatewayMulticastGroupMembersCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeregisterTransitGatewayMulticastGroupMembersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeregisterTransitGatewayMulticastGroupMembersResult(data, context);
  const response: DeregisterTransitGatewayMulticastGroupMembersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersCommandError
 */
const de_DeregisterTransitGatewayMulticastGroupMembersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterTransitGatewayMulticastGroupMembersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommand
 */
export const de_DeregisterTransitGatewayMulticastGroupSourcesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterTransitGatewayMulticastGroupSourcesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DeregisterTransitGatewayMulticastGroupSourcesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DeregisterTransitGatewayMulticastGroupSourcesResult(data, context);
  const response: DeregisterTransitGatewayMulticastGroupSourcesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesCommandError
 */
const de_DeregisterTransitGatewayMulticastGroupSourcesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DeregisterTransitGatewayMulticastGroupSourcesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAccountAttributesCommand
 */
export const de_DescribeAccountAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAccountAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAccountAttributesResult(data, context);
  const response: DescribeAccountAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAccountAttributesCommandError
 */
const de_DescribeAccountAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAccountAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAddressesCommand
 */
export const de_DescribeAddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAddressesResult(data, context);
  const response: DescribeAddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAddressesCommandError
 */
const de_DescribeAddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAddressesAttributeCommand
 */
export const de_DescribeAddressesAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressesAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAddressesAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAddressesAttributeResult(data, context);
  const response: DescribeAddressesAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAddressesAttributeCommandError
 */
const de_DescribeAddressesAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressesAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAddressTransfersCommand
 */
export const de_DescribeAddressTransfersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressTransfersCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAddressTransfersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAddressTransfersResult(data, context);
  const response: DescribeAddressTransfersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAddressTransfersCommandError
 */
const de_DescribeAddressTransfersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAddressTransfersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAggregateIdFormatCommand
 */
export const de_DescribeAggregateIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAggregateIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAggregateIdFormatCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAggregateIdFormatResult(data, context);
  const response: DescribeAggregateIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAggregateIdFormatCommandError
 */
const de_DescribeAggregateIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAggregateIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAvailabilityZonesCommand
 */
export const de_DescribeAvailabilityZonesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAvailabilityZonesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAvailabilityZonesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAvailabilityZonesResult(data, context);
  const response: DescribeAvailabilityZonesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAvailabilityZonesCommandError
 */
const de_DescribeAvailabilityZonesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAvailabilityZonesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeAwsNetworkPerformanceMetricSubscriptionsCommand
 */
export const de_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAwsNetworkPerformanceMetricSubscriptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeAwsNetworkPerformanceMetricSubscriptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeAwsNetworkPerformanceMetricSubscriptionsResult(data, context);
  const response: DescribeAwsNetworkPerformanceMetricSubscriptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeAwsNetworkPerformanceMetricSubscriptionsCommandError
 */
const de_DescribeAwsNetworkPerformanceMetricSubscriptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeAwsNetworkPerformanceMetricSubscriptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeBundleTasksCommand
 */
export const de_DescribeBundleTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeBundleTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeBundleTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeBundleTasksResult(data, context);
  const response: DescribeBundleTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeBundleTasksCommandError
 */
const de_DescribeBundleTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeBundleTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeByoipCidrsCommand
 */
export const de_DescribeByoipCidrsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeByoipCidrsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeByoipCidrsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeByoipCidrsResult(data, context);
  const response: DescribeByoipCidrsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeByoipCidrsCommandError
 */
const de_DescribeByoipCidrsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeByoipCidrsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeCapacityBlockOfferingsCommand
 */
export const de_DescribeCapacityBlockOfferingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCapacityBlockOfferingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeCapacityBlockOfferingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeCapacityBlockOfferingsResult(data, context);
  const response: DescribeCapacityBlockOfferingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeCapacityBlockOfferingsCommandError
 */
const de_DescribeCapacityBlockOfferingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCapacityBlockOfferingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeCapacityReservationFleetsCommand
 */
export const de_DescribeCapacityReservationFleetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCapacityReservationFleetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeCapacityReservationFleetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeCapacityReservationFleetsResult(data, context);
  const response: DescribeCapacityReservationFleetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeCapacityReservationFleetsCommandError
 */
const de_DescribeCapacityReservationFleetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCapacityReservationFleetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeCapacityReservationsCommand
 */
export const de_DescribeCapacityReservationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCapacityReservationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeCapacityReservationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeCapacityReservationsResult(data, context);
  const response: DescribeCapacityReservationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeCapacityReservationsCommandError
 */
const de_DescribeCapacityReservationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCapacityReservationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeCarrierGatewaysCommand
 */
export const de_DescribeCarrierGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCarrierGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeCarrierGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeCarrierGatewaysResult(data, context);
  const response: DescribeCarrierGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeCarrierGatewaysCommandError
 */
const de_DescribeCarrierGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCarrierGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeClassicLinkInstancesCommand
 */
export const de_DescribeClassicLinkInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClassicLinkInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeClassicLinkInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeClassicLinkInstancesResult(data, context);
  const response: DescribeClassicLinkInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeClassicLinkInstancesCommandError
 */
const de_DescribeClassicLinkInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClassicLinkInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommand
 */
export const de_DescribeClientVpnAuthorizationRulesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnAuthorizationRulesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeClientVpnAuthorizationRulesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeClientVpnAuthorizationRulesResult(data, context);
  const response: DescribeClientVpnAuthorizationRulesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeClientVpnAuthorizationRulesCommandError
 */
const de_DescribeClientVpnAuthorizationRulesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnAuthorizationRulesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeClientVpnConnectionsCommand
 */
export const de_DescribeClientVpnConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeClientVpnConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeClientVpnConnectionsResult(data, context);
  const response: DescribeClientVpnConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeClientVpnConnectionsCommandError
 */
const de_DescribeClientVpnConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeClientVpnEndpointsCommand
 */
export const de_DescribeClientVpnEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeClientVpnEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeClientVpnEndpointsResult(data, context);
  const response: DescribeClientVpnEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeClientVpnEndpointsCommandError
 */
const de_DescribeClientVpnEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeClientVpnRoutesCommand
 */
export const de_DescribeClientVpnRoutesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnRoutesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeClientVpnRoutesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeClientVpnRoutesResult(data, context);
  const response: DescribeClientVpnRoutesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeClientVpnRoutesCommandError
 */
const de_DescribeClientVpnRoutesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnRoutesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeClientVpnTargetNetworksCommand
 */
export const de_DescribeClientVpnTargetNetworksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnTargetNetworksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeClientVpnTargetNetworksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeClientVpnTargetNetworksResult(data, context);
  const response: DescribeClientVpnTargetNetworksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeClientVpnTargetNetworksCommandError
 */
const de_DescribeClientVpnTargetNetworksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeClientVpnTargetNetworksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeCoipPoolsCommand
 */
export const de_DescribeCoipPoolsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCoipPoolsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeCoipPoolsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeCoipPoolsResult(data, context);
  const response: DescribeCoipPoolsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeCoipPoolsCommandError
 */
const de_DescribeCoipPoolsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCoipPoolsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeConversionTasksCommand
 */
export const de_DescribeConversionTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeConversionTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeConversionTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeConversionTasksResult(data, context);
  const response: DescribeConversionTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeConversionTasksCommandError
 */
const de_DescribeConversionTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeConversionTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeCustomerGatewaysCommand
 */
export const de_DescribeCustomerGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCustomerGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeCustomerGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeCustomerGatewaysResult(data, context);
  const response: DescribeCustomerGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeCustomerGatewaysCommandError
 */
const de_DescribeCustomerGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeCustomerGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeDhcpOptionsCommand
 */
export const de_DescribeDhcpOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDhcpOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeDhcpOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeDhcpOptionsResult(data, context);
  const response: DescribeDhcpOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeDhcpOptionsCommandError
 */
const de_DescribeDhcpOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeDhcpOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommand
 */
export const de_DescribeEgressOnlyInternetGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEgressOnlyInternetGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeEgressOnlyInternetGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeEgressOnlyInternetGatewaysResult(data, context);
  const response: DescribeEgressOnlyInternetGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeEgressOnlyInternetGatewaysCommandError
 */
const de_DescribeEgressOnlyInternetGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeEgressOnlyInternetGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeElasticGpusCommand
 */
export const de_DescribeElasticGpusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeElasticGpusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeElasticGpusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeElasticGpusResult(data, context);
  const response: DescribeElasticGpusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeElasticGpusCommandError
 */
const de_DescribeElasticGpusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeElasticGpusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeExportImageTasksCommand
 */
export const de_DescribeExportImageTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExportImageTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeExportImageTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeExportImageTasksResult(data, context);
  const response: DescribeExportImageTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeExportImageTasksCommandError
 */
const de_DescribeExportImageTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExportImageTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeExportTasksCommand
 */
export const de_DescribeExportTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExportTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeExportTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeExportTasksResult(data, context);
  const response: DescribeExportTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeExportTasksCommandError
 */
const de_DescribeExportTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeExportTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFastLaunchImagesCommand
 */
export const de_DescribeFastLaunchImagesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFastLaunchImagesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFastLaunchImagesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFastLaunchImagesResult(data, context);
  const response: DescribeFastLaunchImagesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFastLaunchImagesCommandError
 */
const de_DescribeFastLaunchImagesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFastLaunchImagesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFastSnapshotRestoresCommand
 */
export const de_DescribeFastSnapshotRestoresCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFastSnapshotRestoresCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFastSnapshotRestoresCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFastSnapshotRestoresResult(data, context);
  const response: DescribeFastSnapshotRestoresCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFastSnapshotRestoresCommandError
 */
const de_DescribeFastSnapshotRestoresCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFastSnapshotRestoresCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFleetHistoryCommand
 */
export const de_DescribeFleetHistoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetHistoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFleetHistoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFleetHistoryResult(data, context);
  const response: DescribeFleetHistoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFleetHistoryCommandError
 */
const de_DescribeFleetHistoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetHistoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFleetInstancesCommand
 */
export const de_DescribeFleetInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFleetInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFleetInstancesResult(data, context);
  const response: DescribeFleetInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFleetInstancesCommandError
 */
const de_DescribeFleetInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFleetsCommand
 */
export const de_DescribeFleetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFleetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFleetsResult(data, context);
  const response: DescribeFleetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFleetsCommandError
 */
const de_DescribeFleetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFleetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFlowLogsCommand
 */
export const de_DescribeFlowLogsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFlowLogsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFlowLogsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFlowLogsResult(data, context);
  const response: DescribeFlowLogsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFlowLogsCommandError
 */
const de_DescribeFlowLogsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFlowLogsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFpgaImageAttributeCommand
 */
export const de_DescribeFpgaImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFpgaImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFpgaImageAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFpgaImageAttributeResult(data, context);
  const response: DescribeFpgaImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFpgaImageAttributeCommandError
 */
const de_DescribeFpgaImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFpgaImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeFpgaImagesCommand
 */
export const de_DescribeFpgaImagesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFpgaImagesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeFpgaImagesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeFpgaImagesResult(data, context);
  const response: DescribeFpgaImagesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeFpgaImagesCommandError
 */
const de_DescribeFpgaImagesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeFpgaImagesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeHostReservationOfferingsCommand
 */
export const de_DescribeHostReservationOfferingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostReservationOfferingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeHostReservationOfferingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeHostReservationOfferingsResult(data, context);
  const response: DescribeHostReservationOfferingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeHostReservationOfferingsCommandError
 */
const de_DescribeHostReservationOfferingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostReservationOfferingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeHostReservationsCommand
 */
export const de_DescribeHostReservationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostReservationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeHostReservationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeHostReservationsResult(data, context);
  const response: DescribeHostReservationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeHostReservationsCommandError
 */
const de_DescribeHostReservationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostReservationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeHostsCommand
 */
export const de_DescribeHostsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeHostsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeHostsResult(data, context);
  const response: DescribeHostsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeHostsCommandError
 */
const de_DescribeHostsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeHostsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommand
 */
export const de_DescribeIamInstanceProfileAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIamInstanceProfileAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIamInstanceProfileAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIamInstanceProfileAssociationsResult(data, context);
  const response: DescribeIamInstanceProfileAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIamInstanceProfileAssociationsCommandError
 */
const de_DescribeIamInstanceProfileAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIamInstanceProfileAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIdentityIdFormatCommand
 */
export const de_DescribeIdentityIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIdentityIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIdentityIdFormatCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIdentityIdFormatResult(data, context);
  const response: DescribeIdentityIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIdentityIdFormatCommandError
 */
const de_DescribeIdentityIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIdentityIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIdFormatCommand
 */
export const de_DescribeIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIdFormatCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIdFormatResult(data, context);
  const response: DescribeIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIdFormatCommandError
 */
const de_DescribeIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeImageAttributeCommand
 */
export const de_DescribeImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeImageAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImageAttribute(data, context);
  const response: DescribeImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeImageAttributeCommandError
 */
const de_DescribeImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeImagesCommand
 */
export const de_DescribeImagesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImagesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeImagesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeImagesResult(data, context);
  const response: DescribeImagesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeImagesCommandError
 */
const de_DescribeImagesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImagesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeImportImageTasksCommand
 */
export const de_DescribeImportImageTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImportImageTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeImportImageTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeImportImageTasksResult(data, context);
  const response: DescribeImportImageTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeImportImageTasksCommandError
 */
const de_DescribeImportImageTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImportImageTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeImportSnapshotTasksCommand
 */
export const de_DescribeImportSnapshotTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImportSnapshotTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeImportSnapshotTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeImportSnapshotTasksResult(data, context);
  const response: DescribeImportSnapshotTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeImportSnapshotTasksCommandError
 */
const de_DescribeImportSnapshotTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeImportSnapshotTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceAttributeCommand
 */
export const de_DescribeInstanceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_InstanceAttribute(data, context);
  const response: DescribeInstanceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceAttributeCommandError
 */
const de_DescribeInstanceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceConnectEndpointsCommand
 */
export const de_DescribeInstanceConnectEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceConnectEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceConnectEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceConnectEndpointsResult(data, context);
  const response: DescribeInstanceConnectEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceConnectEndpointsCommandError
 */
const de_DescribeInstanceConnectEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceConnectEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceCreditSpecificationsCommand
 */
export const de_DescribeInstanceCreditSpecificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceCreditSpecificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceCreditSpecificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceCreditSpecificationsResult(data, context);
  const response: DescribeInstanceCreditSpecificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceCreditSpecificationsCommandError
 */
const de_DescribeInstanceCreditSpecificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceCreditSpecificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommand
 */
export const de_DescribeInstanceEventNotificationAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceEventNotificationAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceEventNotificationAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceEventNotificationAttributesResult(data, context);
  const response: DescribeInstanceEventNotificationAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceEventNotificationAttributesCommandError
 */
const de_DescribeInstanceEventNotificationAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceEventNotificationAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceEventWindowsCommand
 */
export const de_DescribeInstanceEventWindowsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceEventWindowsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceEventWindowsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceEventWindowsResult(data, context);
  const response: DescribeInstanceEventWindowsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceEventWindowsCommandError
 */
const de_DescribeInstanceEventWindowsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceEventWindowsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstancesCommand
 */
export const de_DescribeInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstancesResult(data, context);
  const response: DescribeInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstancesCommandError
 */
const de_DescribeInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceStatusCommand
 */
export const de_DescribeInstanceStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceStatusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceStatusResult(data, context);
  const response: DescribeInstanceStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceStatusCommandError
 */
const de_DescribeInstanceStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceTopologyCommand
 */
export const de_DescribeInstanceTopologyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTopologyCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceTopologyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceTopologyResult(data, context);
  const response: DescribeInstanceTopologyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceTopologyCommandError
 */
const de_DescribeInstanceTopologyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTopologyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceTypeOfferingsCommand
 */
export const de_DescribeInstanceTypeOfferingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTypeOfferingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceTypeOfferingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceTypeOfferingsResult(data, context);
  const response: DescribeInstanceTypeOfferingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceTypeOfferingsCommandError
 */
const de_DescribeInstanceTypeOfferingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTypeOfferingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInstanceTypesCommand
 */
export const de_DescribeInstanceTypesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTypesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInstanceTypesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInstanceTypesResult(data, context);
  const response: DescribeInstanceTypesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInstanceTypesCommandError
 */
const de_DescribeInstanceTypesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInstanceTypesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeInternetGatewaysCommand
 */
export const de_DescribeInternetGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInternetGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeInternetGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeInternetGatewaysResult(data, context);
  const response: DescribeInternetGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeInternetGatewaysCommandError
 */
const de_DescribeInternetGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeInternetGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIpamByoasnCommand
 */
export const de_DescribeIpamByoasnCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamByoasnCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIpamByoasnCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIpamByoasnResult(data, context);
  const response: DescribeIpamByoasnCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIpamByoasnCommandError
 */
const de_DescribeIpamByoasnCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamByoasnCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIpamPoolsCommand
 */
export const de_DescribeIpamPoolsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamPoolsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIpamPoolsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIpamPoolsResult(data, context);
  const response: DescribeIpamPoolsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIpamPoolsCommandError
 */
const de_DescribeIpamPoolsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamPoolsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIpamResourceDiscoveriesCommand
 */
export const de_DescribeIpamResourceDiscoveriesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamResourceDiscoveriesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIpamResourceDiscoveriesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIpamResourceDiscoveriesResult(data, context);
  const response: DescribeIpamResourceDiscoveriesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIpamResourceDiscoveriesCommandError
 */
const de_DescribeIpamResourceDiscoveriesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamResourceDiscoveriesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIpamResourceDiscoveryAssociationsCommand
 */
export const de_DescribeIpamResourceDiscoveryAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamResourceDiscoveryAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIpamResourceDiscoveryAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIpamResourceDiscoveryAssociationsResult(data, context);
  const response: DescribeIpamResourceDiscoveryAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIpamResourceDiscoveryAssociationsCommandError
 */
const de_DescribeIpamResourceDiscoveryAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamResourceDiscoveryAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIpamsCommand
 */
export const de_DescribeIpamsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIpamsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIpamsResult(data, context);
  const response: DescribeIpamsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIpamsCommandError
 */
const de_DescribeIpamsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIpamScopesCommand
 */
export const de_DescribeIpamScopesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamScopesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIpamScopesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIpamScopesResult(data, context);
  const response: DescribeIpamScopesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIpamScopesCommandError
 */
const de_DescribeIpamScopesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpamScopesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeIpv6PoolsCommand
 */
export const de_DescribeIpv6PoolsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpv6PoolsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeIpv6PoolsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeIpv6PoolsResult(data, context);
  const response: DescribeIpv6PoolsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeIpv6PoolsCommandError
 */
const de_DescribeIpv6PoolsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeIpv6PoolsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeKeyPairsCommand
 */
export const de_DescribeKeyPairsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeKeyPairsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeKeyPairsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeKeyPairsResult(data, context);
  const response: DescribeKeyPairsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeKeyPairsCommandError
 */
const de_DescribeKeyPairsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeKeyPairsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLaunchTemplatesCommand
 */
export const de_DescribeLaunchTemplatesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLaunchTemplatesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLaunchTemplatesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLaunchTemplatesResult(data, context);
  const response: DescribeLaunchTemplatesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLaunchTemplatesCommandError
 */
const de_DescribeLaunchTemplatesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLaunchTemplatesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLaunchTemplateVersionsCommand
 */
export const de_DescribeLaunchTemplateVersionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLaunchTemplateVersionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLaunchTemplateVersionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLaunchTemplateVersionsResult(data, context);
  const response: DescribeLaunchTemplateVersionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLaunchTemplateVersionsCommandError
 */
const de_DescribeLaunchTemplateVersionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLaunchTemplateVersionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTablesCommand
 */
export const de_DescribeLocalGatewayRouteTablesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTablesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLocalGatewayRouteTablesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLocalGatewayRouteTablesResult(data, context);
  const response: DescribeLocalGatewayRouteTablesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTablesCommandError
 */
const de_DescribeLocalGatewayRouteTablesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTablesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand
 */
export const de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult(data, context);
  const response: DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError
 */
const de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommand
 */
export const de_DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTableVpcAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLocalGatewayRouteTableVpcAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLocalGatewayRouteTableVpcAssociationsResult(data, context);
  const response: DescribeLocalGatewayRouteTableVpcAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsCommandError
 */
const de_DescribeLocalGatewayRouteTableVpcAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayRouteTableVpcAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLocalGatewaysCommand
 */
export const de_DescribeLocalGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLocalGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLocalGatewaysResult(data, context);
  const response: DescribeLocalGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLocalGatewaysCommandError
 */
const de_DescribeLocalGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommand
 */
export const de_DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayVirtualInterfaceGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLocalGatewayVirtualInterfaceGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLocalGatewayVirtualInterfaceGroupsResult(data, context);
  const response: DescribeLocalGatewayVirtualInterfaceGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsCommandError
 */
const de_DescribeLocalGatewayVirtualInterfaceGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayVirtualInterfaceGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommand
 */
export const de_DescribeLocalGatewayVirtualInterfacesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayVirtualInterfacesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLocalGatewayVirtualInterfacesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLocalGatewayVirtualInterfacesResult(data, context);
  const response: DescribeLocalGatewayVirtualInterfacesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesCommandError
 */
const de_DescribeLocalGatewayVirtualInterfacesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLocalGatewayVirtualInterfacesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeLockedSnapshotsCommand
 */
export const de_DescribeLockedSnapshotsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLockedSnapshotsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeLockedSnapshotsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeLockedSnapshotsResult(data, context);
  const response: DescribeLockedSnapshotsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeLockedSnapshotsCommandError
 */
const de_DescribeLockedSnapshotsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeLockedSnapshotsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeManagedPrefixListsCommand
 */
export const de_DescribeManagedPrefixListsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeManagedPrefixListsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeManagedPrefixListsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeManagedPrefixListsResult(data, context);
  const response: DescribeManagedPrefixListsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeManagedPrefixListsCommandError
 */
const de_DescribeManagedPrefixListsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeManagedPrefixListsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeMovingAddressesCommand
 */
export const de_DescribeMovingAddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeMovingAddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeMovingAddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeMovingAddressesResult(data, context);
  const response: DescribeMovingAddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeMovingAddressesCommandError
 */
const de_DescribeMovingAddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeMovingAddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNatGatewaysCommand
 */
export const de_DescribeNatGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNatGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNatGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNatGatewaysResult(data, context);
  const response: DescribeNatGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNatGatewaysCommandError
 */
const de_DescribeNatGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNatGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkAclsCommand
 */
export const de_DescribeNetworkAclsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkAclsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkAclsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkAclsResult(data, context);
  const response: DescribeNetworkAclsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkAclsCommandError
 */
const de_DescribeNetworkAclsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkAclsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommand
 */
export const de_DescribeNetworkInsightsAccessScopeAnalysesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAccessScopeAnalysesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInsightsAccessScopeAnalysesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInsightsAccessScopeAnalysesResult(data, context);
  const response: DescribeNetworkInsightsAccessScopeAnalysesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesCommandError
 */
const de_DescribeNetworkInsightsAccessScopeAnalysesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAccessScopeAnalysesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAccessScopesCommand
 */
export const de_DescribeNetworkInsightsAccessScopesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAccessScopesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInsightsAccessScopesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInsightsAccessScopesResult(data, context);
  const response: DescribeNetworkInsightsAccessScopesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAccessScopesCommandError
 */
const de_DescribeNetworkInsightsAccessScopesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAccessScopesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAnalysesCommand
 */
export const de_DescribeNetworkInsightsAnalysesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAnalysesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInsightsAnalysesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInsightsAnalysesResult(data, context);
  const response: DescribeNetworkInsightsAnalysesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAnalysesCommandError
 */
const de_DescribeNetworkInsightsAnalysesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsAnalysesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsPathsCommand
 */
export const de_DescribeNetworkInsightsPathsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsPathsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInsightsPathsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInsightsPathsResult(data, context);
  const response: DescribeNetworkInsightsPathsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsPathsCommandError
 */
const de_DescribeNetworkInsightsPathsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInsightsPathsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInterfaceAttributeCommand
 */
export const de_DescribeNetworkInterfaceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfaceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInterfaceAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInterfaceAttributeResult(data, context);
  const response: DescribeNetworkInterfaceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInterfaceAttributeCommandError
 */
const de_DescribeNetworkInterfaceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfaceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInterfacePermissionsCommand
 */
export const de_DescribeNetworkInterfacePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfacePermissionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInterfacePermissionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInterfacePermissionsResult(data, context);
  const response: DescribeNetworkInterfacePermissionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInterfacePermissionsCommandError
 */
const de_DescribeNetworkInterfacePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfacePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeNetworkInterfacesCommand
 */
export const de_DescribeNetworkInterfacesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfacesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeNetworkInterfacesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeNetworkInterfacesResult(data, context);
  const response: DescribeNetworkInterfacesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeNetworkInterfacesCommandError
 */
const de_DescribeNetworkInterfacesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeNetworkInterfacesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribePlacementGroupsCommand
 */
export const de_DescribePlacementGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePlacementGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribePlacementGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribePlacementGroupsResult(data, context);
  const response: DescribePlacementGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribePlacementGroupsCommandError
 */
const de_DescribePlacementGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePlacementGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribePrefixListsCommand
 */
export const de_DescribePrefixListsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePrefixListsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribePrefixListsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribePrefixListsResult(data, context);
  const response: DescribePrefixListsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribePrefixListsCommandError
 */
const de_DescribePrefixListsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePrefixListsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribePrincipalIdFormatCommand
 */
export const de_DescribePrincipalIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePrincipalIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribePrincipalIdFormatCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribePrincipalIdFormatResult(data, context);
  const response: DescribePrincipalIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribePrincipalIdFormatCommandError
 */
const de_DescribePrincipalIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePrincipalIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribePublicIpv4PoolsCommand
 */
export const de_DescribePublicIpv4PoolsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePublicIpv4PoolsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribePublicIpv4PoolsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribePublicIpv4PoolsResult(data, context);
  const response: DescribePublicIpv4PoolsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribePublicIpv4PoolsCommandError
 */
const de_DescribePublicIpv4PoolsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribePublicIpv4PoolsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeRegionsCommand
 */
export const de_DescribeRegionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRegionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeRegionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeRegionsResult(data, context);
  const response: DescribeRegionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeRegionsCommandError
 */
const de_DescribeRegionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRegionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeReplaceRootVolumeTasksCommand
 */
export const de_DescribeReplaceRootVolumeTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReplaceRootVolumeTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeReplaceRootVolumeTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeReplaceRootVolumeTasksResult(data, context);
  const response: DescribeReplaceRootVolumeTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeReplaceRootVolumeTasksCommandError
 */
const de_DescribeReplaceRootVolumeTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReplaceRootVolumeTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeReservedInstancesCommand
 */
export const de_DescribeReservedInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeReservedInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeReservedInstancesResult(data, context);
  const response: DescribeReservedInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesCommandError
 */
const de_DescribeReservedInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeReservedInstancesListingsCommand
 */
export const de_DescribeReservedInstancesListingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesListingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeReservedInstancesListingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeReservedInstancesListingsResult(data, context);
  const response: DescribeReservedInstancesListingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesListingsCommandError
 */
const de_DescribeReservedInstancesListingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesListingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeReservedInstancesModificationsCommand
 */
export const de_DescribeReservedInstancesModificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesModificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeReservedInstancesModificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeReservedInstancesModificationsResult(data, context);
  const response: DescribeReservedInstancesModificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesModificationsCommandError
 */
const de_DescribeReservedInstancesModificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesModificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeReservedInstancesOfferingsCommand
 */
export const de_DescribeReservedInstancesOfferingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesOfferingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeReservedInstancesOfferingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeReservedInstancesOfferingsResult(data, context);
  const response: DescribeReservedInstancesOfferingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesOfferingsCommandError
 */
const de_DescribeReservedInstancesOfferingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeReservedInstancesOfferingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeRouteTablesCommand
 */
export const de_DescribeRouteTablesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRouteTablesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeRouteTablesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeRouteTablesResult(data, context);
  const response: DescribeRouteTablesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeRouteTablesCommandError
 */
const de_DescribeRouteTablesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeRouteTablesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommand
 */
export const de_DescribeScheduledInstanceAvailabilityCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledInstanceAvailabilityCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeScheduledInstanceAvailabilityCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeScheduledInstanceAvailabilityResult(data, context);
  const response: DescribeScheduledInstanceAvailabilityCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeScheduledInstanceAvailabilityCommandError
 */
const de_DescribeScheduledInstanceAvailabilityCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledInstanceAvailabilityCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeScheduledInstancesCommand
 */
export const de_DescribeScheduledInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeScheduledInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeScheduledInstancesResult(data, context);
  const response: DescribeScheduledInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeScheduledInstancesCommandError
 */
const de_DescribeScheduledInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeScheduledInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSecurityGroupReferencesCommand
 */
export const de_DescribeSecurityGroupReferencesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupReferencesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSecurityGroupReferencesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSecurityGroupReferencesResult(data, context);
  const response: DescribeSecurityGroupReferencesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSecurityGroupReferencesCommandError
 */
const de_DescribeSecurityGroupReferencesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupReferencesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSecurityGroupRulesCommand
 */
export const de_DescribeSecurityGroupRulesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupRulesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSecurityGroupRulesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSecurityGroupRulesResult(data, context);
  const response: DescribeSecurityGroupRulesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSecurityGroupRulesCommandError
 */
const de_DescribeSecurityGroupRulesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupRulesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSecurityGroupsCommand
 */
export const de_DescribeSecurityGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSecurityGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSecurityGroupsResult(data, context);
  const response: DescribeSecurityGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSecurityGroupsCommandError
 */
const de_DescribeSecurityGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSecurityGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSnapshotAttributeCommand
 */
export const de_DescribeSnapshotAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSnapshotAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSnapshotAttributeResult(data, context);
  const response: DescribeSnapshotAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSnapshotAttributeCommandError
 */
const de_DescribeSnapshotAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSnapshotsCommand
 */
export const de_DescribeSnapshotsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSnapshotsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSnapshotsResult(data, context);
  const response: DescribeSnapshotsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSnapshotsCommandError
 */
const de_DescribeSnapshotsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSnapshotTierStatusCommand
 */
export const de_DescribeSnapshotTierStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotTierStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSnapshotTierStatusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSnapshotTierStatusResult(data, context);
  const response: DescribeSnapshotTierStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSnapshotTierStatusCommandError
 */
const de_DescribeSnapshotTierStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSnapshotTierStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommand
 */
export const de_DescribeSpotDatafeedSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotDatafeedSubscriptionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSpotDatafeedSubscriptionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSpotDatafeedSubscriptionResult(data, context);
  const response: DescribeSpotDatafeedSubscriptionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSpotDatafeedSubscriptionCommandError
 */
const de_DescribeSpotDatafeedSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotDatafeedSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSpotFleetInstancesCommand
 */
export const de_DescribeSpotFleetInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSpotFleetInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSpotFleetInstancesResponse(data, context);
  const response: DescribeSpotFleetInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSpotFleetInstancesCommandError
 */
const de_DescribeSpotFleetInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSpotFleetRequestHistoryCommand
 */
export const de_DescribeSpotFleetRequestHistoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetRequestHistoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSpotFleetRequestHistoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSpotFleetRequestHistoryResponse(data, context);
  const response: DescribeSpotFleetRequestHistoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSpotFleetRequestHistoryCommandError
 */
const de_DescribeSpotFleetRequestHistoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetRequestHistoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSpotFleetRequestsCommand
 */
export const de_DescribeSpotFleetRequestsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetRequestsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSpotFleetRequestsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSpotFleetRequestsResponse(data, context);
  const response: DescribeSpotFleetRequestsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSpotFleetRequestsCommandError
 */
const de_DescribeSpotFleetRequestsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotFleetRequestsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSpotInstanceRequestsCommand
 */
export const de_DescribeSpotInstanceRequestsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotInstanceRequestsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSpotInstanceRequestsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSpotInstanceRequestsResult(data, context);
  const response: DescribeSpotInstanceRequestsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSpotInstanceRequestsCommandError
 */
const de_DescribeSpotInstanceRequestsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotInstanceRequestsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSpotPriceHistoryCommand
 */
export const de_DescribeSpotPriceHistoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotPriceHistoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSpotPriceHistoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSpotPriceHistoryResult(data, context);
  const response: DescribeSpotPriceHistoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSpotPriceHistoryCommandError
 */
const de_DescribeSpotPriceHistoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSpotPriceHistoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeStaleSecurityGroupsCommand
 */
export const de_DescribeStaleSecurityGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeStaleSecurityGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeStaleSecurityGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeStaleSecurityGroupsResult(data, context);
  const response: DescribeStaleSecurityGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeStaleSecurityGroupsCommandError
 */
const de_DescribeStaleSecurityGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeStaleSecurityGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeStoreImageTasksCommand
 */
export const de_DescribeStoreImageTasksCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeStoreImageTasksCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeStoreImageTasksCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeStoreImageTasksResult(data, context);
  const response: DescribeStoreImageTasksCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeStoreImageTasksCommandError
 */
const de_DescribeStoreImageTasksCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeStoreImageTasksCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeSubnetsCommand
 */
export const de_DescribeSubnetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSubnetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeSubnetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeSubnetsResult(data, context);
  const response: DescribeSubnetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeSubnetsCommandError
 */
const de_DescribeSubnetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeSubnetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTagsCommand
 */
export const de_DescribeTagsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTagsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTagsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTagsResult(data, context);
  const response: DescribeTagsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTagsCommandError
 */
const de_DescribeTagsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTagsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorFiltersCommand
 */
export const de_DescribeTrafficMirrorFiltersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorFiltersCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTrafficMirrorFiltersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTrafficMirrorFiltersResult(data, context);
  const response: DescribeTrafficMirrorFiltersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorFiltersCommandError
 */
const de_DescribeTrafficMirrorFiltersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorFiltersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorSessionsCommand
 */
export const de_DescribeTrafficMirrorSessionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorSessionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTrafficMirrorSessionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTrafficMirrorSessionsResult(data, context);
  const response: DescribeTrafficMirrorSessionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorSessionsCommandError
 */
const de_DescribeTrafficMirrorSessionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorSessionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorTargetsCommand
 */
export const de_DescribeTrafficMirrorTargetsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorTargetsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTrafficMirrorTargetsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTrafficMirrorTargetsResult(data, context);
  const response: DescribeTrafficMirrorTargetsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorTargetsCommandError
 */
const de_DescribeTrafficMirrorTargetsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrafficMirrorTargetsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayAttachmentsCommand
 */
export const de_DescribeTransitGatewayAttachmentsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayAttachmentsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayAttachmentsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayAttachmentsResult(data, context);
  const response: DescribeTransitGatewayAttachmentsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayAttachmentsCommandError
 */
const de_DescribeTransitGatewayAttachmentsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayAttachmentsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayConnectPeersCommand
 */
export const de_DescribeTransitGatewayConnectPeersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayConnectPeersCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayConnectPeersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayConnectPeersResult(data, context);
  const response: DescribeTransitGatewayConnectPeersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayConnectPeersCommandError
 */
const de_DescribeTransitGatewayConnectPeersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayConnectPeersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayConnectsCommand
 */
export const de_DescribeTransitGatewayConnectsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayConnectsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayConnectsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayConnectsResult(data, context);
  const response: DescribeTransitGatewayConnectsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayConnectsCommandError
 */
const de_DescribeTransitGatewayConnectsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayConnectsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommand
 */
export const de_DescribeTransitGatewayMulticastDomainsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayMulticastDomainsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayMulticastDomainsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayMulticastDomainsResult(data, context);
  const response: DescribeTransitGatewayMulticastDomainsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayMulticastDomainsCommandError
 */
const de_DescribeTransitGatewayMulticastDomainsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayMulticastDomainsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommand
 */
export const de_DescribeTransitGatewayPeeringAttachmentsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayPeeringAttachmentsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayPeeringAttachmentsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayPeeringAttachmentsResult(data, context);
  const response: DescribeTransitGatewayPeeringAttachmentsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsCommandError
 */
const de_DescribeTransitGatewayPeeringAttachmentsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayPeeringAttachmentsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayPolicyTablesCommand
 */
export const de_DescribeTransitGatewayPolicyTablesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayPolicyTablesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayPolicyTablesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayPolicyTablesResult(data, context);
  const response: DescribeTransitGatewayPolicyTablesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayPolicyTablesCommandError
 */
const de_DescribeTransitGatewayPolicyTablesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayPolicyTablesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayRouteTableAnnouncementsCommand
 */
export const de_DescribeTransitGatewayRouteTableAnnouncementsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayRouteTableAnnouncementsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayRouteTableAnnouncementsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayRouteTableAnnouncementsResult(data, context);
  const response: DescribeTransitGatewayRouteTableAnnouncementsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayRouteTableAnnouncementsCommandError
 */
const de_DescribeTransitGatewayRouteTableAnnouncementsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayRouteTableAnnouncementsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayRouteTablesCommand
 */
export const de_DescribeTransitGatewayRouteTablesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayRouteTablesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayRouteTablesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayRouteTablesResult(data, context);
  const response: DescribeTransitGatewayRouteTablesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayRouteTablesCommandError
 */
const de_DescribeTransitGatewayRouteTablesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayRouteTablesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewaysCommand
 */
export const de_DescribeTransitGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewaysResult(data, context);
  const response: DescribeTransitGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewaysCommandError
 */
const de_DescribeTransitGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommand
 */
export const de_DescribeTransitGatewayVpcAttachmentsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayVpcAttachmentsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTransitGatewayVpcAttachmentsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTransitGatewayVpcAttachmentsResult(data, context);
  const response: DescribeTransitGatewayVpcAttachmentsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsCommandError
 */
const de_DescribeTransitGatewayVpcAttachmentsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTransitGatewayVpcAttachmentsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeTrunkInterfaceAssociationsCommand
 */
export const de_DescribeTrunkInterfaceAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrunkInterfaceAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeTrunkInterfaceAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeTrunkInterfaceAssociationsResult(data, context);
  const response: DescribeTrunkInterfaceAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeTrunkInterfaceAssociationsCommandError
 */
const de_DescribeTrunkInterfaceAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeTrunkInterfaceAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessEndpointsCommand
 */
export const de_DescribeVerifiedAccessEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVerifiedAccessEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVerifiedAccessEndpointsResult(data, context);
  const response: DescribeVerifiedAccessEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessEndpointsCommandError
 */
const de_DescribeVerifiedAccessEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessGroupsCommand
 */
export const de_DescribeVerifiedAccessGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVerifiedAccessGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVerifiedAccessGroupsResult(data, context);
  const response: DescribeVerifiedAccessGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessGroupsCommandError
 */
const de_DescribeVerifiedAccessGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessInstanceLoggingConfigurationsCommand
 */
export const de_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessInstanceLoggingConfigurationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVerifiedAccessInstanceLoggingConfigurationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVerifiedAccessInstanceLoggingConfigurationsResult(data, context);
  const response: DescribeVerifiedAccessInstanceLoggingConfigurationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessInstanceLoggingConfigurationsCommandError
 */
const de_DescribeVerifiedAccessInstanceLoggingConfigurationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessInstanceLoggingConfigurationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessInstancesCommand
 */
export const de_DescribeVerifiedAccessInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVerifiedAccessInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVerifiedAccessInstancesResult(data, context);
  const response: DescribeVerifiedAccessInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessInstancesCommandError
 */
const de_DescribeVerifiedAccessInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessTrustProvidersCommand
 */
export const de_DescribeVerifiedAccessTrustProvidersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessTrustProvidersCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVerifiedAccessTrustProvidersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVerifiedAccessTrustProvidersResult(data, context);
  const response: DescribeVerifiedAccessTrustProvidersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessTrustProvidersCommandError
 */
const de_DescribeVerifiedAccessTrustProvidersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVerifiedAccessTrustProvidersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVolumeAttributeCommand
 */
export const de_DescribeVolumeAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumeAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVolumeAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVolumeAttributeResult(data, context);
  const response: DescribeVolumeAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVolumeAttributeCommandError
 */
const de_DescribeVolumeAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumeAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVolumesCommand
 */
export const de_DescribeVolumesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVolumesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVolumesResult(data, context);
  const response: DescribeVolumesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVolumesCommandError
 */
const de_DescribeVolumesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVolumesModificationsCommand
 */
export const de_DescribeVolumesModificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumesModificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVolumesModificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVolumesModificationsResult(data, context);
  const response: DescribeVolumesModificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVolumesModificationsCommandError
 */
const de_DescribeVolumesModificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumesModificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVolumeStatusCommand
 */
export const de_DescribeVolumeStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumeStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVolumeStatusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVolumeStatusResult(data, context);
  const response: DescribeVolumeStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVolumeStatusCommandError
 */
const de_DescribeVolumeStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVolumeStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcAttributeCommand
 */
export const de_DescribeVpcAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcAttributeResult(data, context);
  const response: DescribeVpcAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcAttributeCommandError
 */
const de_DescribeVpcAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcClassicLinkCommand
 */
export const de_DescribeVpcClassicLinkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcClassicLinkCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcClassicLinkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcClassicLinkResult(data, context);
  const response: DescribeVpcClassicLinkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcClassicLinkCommandError
 */
const de_DescribeVpcClassicLinkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcClassicLinkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommand
 */
export const de_DescribeVpcClassicLinkDnsSupportCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcClassicLinkDnsSupportCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcClassicLinkDnsSupportCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcClassicLinkDnsSupportResult(data, context);
  const response: DescribeVpcClassicLinkDnsSupportCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcClassicLinkDnsSupportCommandError
 */
const de_DescribeVpcClassicLinkDnsSupportCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcClassicLinkDnsSupportCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommand
 */
export const de_DescribeVpcEndpointConnectionNotificationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointConnectionNotificationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcEndpointConnectionNotificationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcEndpointConnectionNotificationsResult(data, context);
  const response: DescribeVpcEndpointConnectionNotificationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsCommandError
 */
const de_DescribeVpcEndpointConnectionNotificationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointConnectionNotificationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcEndpointConnectionsCommand
 */
export const de_DescribeVpcEndpointConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcEndpointConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcEndpointConnectionsResult(data, context);
  const response: DescribeVpcEndpointConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointConnectionsCommandError
 */
const de_DescribeVpcEndpointConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcEndpointsCommand
 */
export const de_DescribeVpcEndpointsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcEndpointsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcEndpointsResult(data, context);
  const response: DescribeVpcEndpointsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointsCommandError
 */
const de_DescribeVpcEndpointsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommand
 */
export const de_DescribeVpcEndpointServiceConfigurationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServiceConfigurationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcEndpointServiceConfigurationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcEndpointServiceConfigurationsResult(data, context);
  const response: DescribeVpcEndpointServiceConfigurationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsCommandError
 */
const de_DescribeVpcEndpointServiceConfigurationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServiceConfigurationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommand
 */
export const de_DescribeVpcEndpointServicePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServicePermissionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcEndpointServicePermissionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcEndpointServicePermissionsResult(data, context);
  const response: DescribeVpcEndpointServicePermissionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServicePermissionsCommandError
 */
const de_DescribeVpcEndpointServicePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServicePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServicesCommand
 */
export const de_DescribeVpcEndpointServicesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServicesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcEndpointServicesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcEndpointServicesResult(data, context);
  const response: DescribeVpcEndpointServicesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServicesCommandError
 */
const de_DescribeVpcEndpointServicesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcEndpointServicesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcPeeringConnectionsCommand
 */
export const de_DescribeVpcPeeringConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcPeeringConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcPeeringConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcPeeringConnectionsResult(data, context);
  const response: DescribeVpcPeeringConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcPeeringConnectionsCommandError
 */
const de_DescribeVpcPeeringConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcPeeringConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpcsCommand
 */
export const de_DescribeVpcsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpcsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpcsResult(data, context);
  const response: DescribeVpcsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpcsCommandError
 */
const de_DescribeVpcsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpcsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpnConnectionsCommand
 */
export const de_DescribeVpnConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpnConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpnConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpnConnectionsResult(data, context);
  const response: DescribeVpnConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpnConnectionsCommandError
 */
const de_DescribeVpnConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpnConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DescribeVpnGatewaysCommand
 */
export const de_DescribeVpnGatewaysCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpnGatewaysCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DescribeVpnGatewaysCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DescribeVpnGatewaysResult(data, context);
  const response: DescribeVpnGatewaysCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DescribeVpnGatewaysCommandError
 */
const de_DescribeVpnGatewaysCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DescribeVpnGatewaysCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DetachClassicLinkVpcCommand
 */
export const de_DetachClassicLinkVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachClassicLinkVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DetachClassicLinkVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DetachClassicLinkVpcResult(data, context);
  const response: DetachClassicLinkVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DetachClassicLinkVpcCommandError
 */
const de_DetachClassicLinkVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachClassicLinkVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DetachInternetGatewayCommand
 */
export const de_DetachInternetGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachInternetGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DetachInternetGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DetachInternetGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DetachInternetGatewayCommandError
 */
const de_DetachInternetGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachInternetGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DetachNetworkInterfaceCommand
 */
export const de_DetachNetworkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachNetworkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DetachNetworkInterfaceCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DetachNetworkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DetachNetworkInterfaceCommandError
 */
const de_DetachNetworkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachNetworkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DetachVerifiedAccessTrustProviderCommand
 */
export const de_DetachVerifiedAccessTrustProviderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVerifiedAccessTrustProviderCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DetachVerifiedAccessTrustProviderCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DetachVerifiedAccessTrustProviderResult(data, context);
  const response: DetachVerifiedAccessTrustProviderCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DetachVerifiedAccessTrustProviderCommandError
 */
const de_DetachVerifiedAccessTrustProviderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVerifiedAccessTrustProviderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DetachVolumeCommand
 */
export const de_DetachVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DetachVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_VolumeAttachment(data, context);
  const response: DetachVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DetachVolumeCommandError
 */
const de_DetachVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DetachVpnGatewayCommand
 */
export const de_DetachVpnGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVpnGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DetachVpnGatewayCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DetachVpnGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DetachVpnGatewayCommandError
 */
const de_DetachVpnGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DetachVpnGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableAddressTransferCommand
 */
export const de_DisableAddressTransferCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableAddressTransferCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableAddressTransferCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableAddressTransferResult(data, context);
  const response: DisableAddressTransferCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableAddressTransferCommandError
 */
const de_DisableAddressTransferCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableAddressTransferCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableAwsNetworkPerformanceMetricSubscriptionCommand
 */
export const de_DisableAwsNetworkPerformanceMetricSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableAwsNetworkPerformanceMetricSubscriptionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableAwsNetworkPerformanceMetricSubscriptionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableAwsNetworkPerformanceMetricSubscriptionResult(data, context);
  const response: DisableAwsNetworkPerformanceMetricSubscriptionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableAwsNetworkPerformanceMetricSubscriptionCommandError
 */
const de_DisableAwsNetworkPerformanceMetricSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableAwsNetworkPerformanceMetricSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableEbsEncryptionByDefaultCommand
 */
export const de_DisableEbsEncryptionByDefaultCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableEbsEncryptionByDefaultCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableEbsEncryptionByDefaultCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableEbsEncryptionByDefaultResult(data, context);
  const response: DisableEbsEncryptionByDefaultCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableEbsEncryptionByDefaultCommandError
 */
const de_DisableEbsEncryptionByDefaultCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableEbsEncryptionByDefaultCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableFastLaunchCommand
 */
export const de_DisableFastLaunchCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableFastLaunchCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableFastLaunchCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableFastLaunchResult(data, context);
  const response: DisableFastLaunchCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableFastLaunchCommandError
 */
const de_DisableFastLaunchCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableFastLaunchCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoresCommand
 */
export const de_DisableFastSnapshotRestoresCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableFastSnapshotRestoresCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableFastSnapshotRestoresCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableFastSnapshotRestoresResult(data, context);
  const response: DisableFastSnapshotRestoresCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoresCommandError
 */
const de_DisableFastSnapshotRestoresCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableFastSnapshotRestoresCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableImageCommand
 */
export const de_DisableImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableImageResult(data, context);
  const response: DisableImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableImageCommandError
 */
const de_DisableImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableImageBlockPublicAccessCommand
 */
export const de_DisableImageBlockPublicAccessCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableImageBlockPublicAccessCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableImageBlockPublicAccessCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableImageBlockPublicAccessResult(data, context);
  const response: DisableImageBlockPublicAccessCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableImageBlockPublicAccessCommandError
 */
const de_DisableImageBlockPublicAccessCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableImageBlockPublicAccessCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableImageDeprecationCommand
 */
export const de_DisableImageDeprecationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableImageDeprecationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableImageDeprecationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableImageDeprecationResult(data, context);
  const response: DisableImageDeprecationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableImageDeprecationCommandError
 */
const de_DisableImageDeprecationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableImageDeprecationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableIpamOrganizationAdminAccountCommand
 */
export const de_DisableIpamOrganizationAdminAccountCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableIpamOrganizationAdminAccountCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableIpamOrganizationAdminAccountCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableIpamOrganizationAdminAccountResult(data, context);
  const response: DisableIpamOrganizationAdminAccountCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableIpamOrganizationAdminAccountCommandError
 */
const de_DisableIpamOrganizationAdminAccountCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableIpamOrganizationAdminAccountCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableSerialConsoleAccessCommand
 */
export const de_DisableSerialConsoleAccessCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableSerialConsoleAccessCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableSerialConsoleAccessCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableSerialConsoleAccessResult(data, context);
  const response: DisableSerialConsoleAccessCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableSerialConsoleAccessCommandError
 */
const de_DisableSerialConsoleAccessCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableSerialConsoleAccessCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableSnapshotBlockPublicAccessCommand
 */
export const de_DisableSnapshotBlockPublicAccessCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableSnapshotBlockPublicAccessCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableSnapshotBlockPublicAccessCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableSnapshotBlockPublicAccessResult(data, context);
  const response: DisableSnapshotBlockPublicAccessCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableSnapshotBlockPublicAccessCommandError
 */
const de_DisableSnapshotBlockPublicAccessCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableSnapshotBlockPublicAccessCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommand
 */
export const de_DisableTransitGatewayRouteTablePropagationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableTransitGatewayRouteTablePropagationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableTransitGatewayRouteTablePropagationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableTransitGatewayRouteTablePropagationResult(data, context);
  const response: DisableTransitGatewayRouteTablePropagationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableTransitGatewayRouteTablePropagationCommandError
 */
const de_DisableTransitGatewayRouteTablePropagationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableTransitGatewayRouteTablePropagationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableVgwRoutePropagationCommand
 */
export const de_DisableVgwRoutePropagationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVgwRoutePropagationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableVgwRoutePropagationCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DisableVgwRoutePropagationCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DisableVgwRoutePropagationCommandError
 */
const de_DisableVgwRoutePropagationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVgwRoutePropagationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableVpcClassicLinkCommand
 */
export const de_DisableVpcClassicLinkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVpcClassicLinkCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableVpcClassicLinkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableVpcClassicLinkResult(data, context);
  const response: DisableVpcClassicLinkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableVpcClassicLinkCommandError
 */
const de_DisableVpcClassicLinkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVpcClassicLinkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommand
 */
export const de_DisableVpcClassicLinkDnsSupportCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVpcClassicLinkDnsSupportCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisableVpcClassicLinkDnsSupportCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisableVpcClassicLinkDnsSupportResult(data, context);
  const response: DisableVpcClassicLinkDnsSupportCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisableVpcClassicLinkDnsSupportCommandError
 */
const de_DisableVpcClassicLinkDnsSupportCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisableVpcClassicLinkDnsSupportCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateAddressCommand
 */
export const de_DisassociateAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateAddressCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DisassociateAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateAddressCommandError
 */
const de_DisassociateAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateClientVpnTargetNetworkCommand
 */
export const de_DisassociateClientVpnTargetNetworkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateClientVpnTargetNetworkCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateClientVpnTargetNetworkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateClientVpnTargetNetworkResult(data, context);
  const response: DisassociateClientVpnTargetNetworkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateClientVpnTargetNetworkCommandError
 */
const de_DisassociateClientVpnTargetNetworkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateClientVpnTargetNetworkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommand
 */
export const de_DisassociateEnclaveCertificateIamRoleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateEnclaveCertificateIamRoleCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateEnclaveCertificateIamRoleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateEnclaveCertificateIamRoleResult(data, context);
  const response: DisassociateEnclaveCertificateIamRoleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateEnclaveCertificateIamRoleCommandError
 */
const de_DisassociateEnclaveCertificateIamRoleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateEnclaveCertificateIamRoleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateIamInstanceProfileCommand
 */
export const de_DisassociateIamInstanceProfileCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateIamInstanceProfileCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateIamInstanceProfileCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateIamInstanceProfileResult(data, context);
  const response: DisassociateIamInstanceProfileCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateIamInstanceProfileCommandError
 */
const de_DisassociateIamInstanceProfileCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateIamInstanceProfileCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateInstanceEventWindowCommand
 */
export const de_DisassociateInstanceEventWindowCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateInstanceEventWindowCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateInstanceEventWindowCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateInstanceEventWindowResult(data, context);
  const response: DisassociateInstanceEventWindowCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateInstanceEventWindowCommandError
 */
const de_DisassociateInstanceEventWindowCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateInstanceEventWindowCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateIpamByoasnCommand
 */
export const de_DisassociateIpamByoasnCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateIpamByoasnCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateIpamByoasnCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateIpamByoasnResult(data, context);
  const response: DisassociateIpamByoasnCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateIpamByoasnCommandError
 */
const de_DisassociateIpamByoasnCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateIpamByoasnCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateIpamResourceDiscoveryCommand
 */
export const de_DisassociateIpamResourceDiscoveryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateIpamResourceDiscoveryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateIpamResourceDiscoveryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateIpamResourceDiscoveryResult(data, context);
  const response: DisassociateIpamResourceDiscoveryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateIpamResourceDiscoveryCommandError
 */
const de_DisassociateIpamResourceDiscoveryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateIpamResourceDiscoveryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateNatGatewayAddressCommand
 */
export const de_DisassociateNatGatewayAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateNatGatewayAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateNatGatewayAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateNatGatewayAddressResult(data, context);
  const response: DisassociateNatGatewayAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateNatGatewayAddressCommandError
 */
const de_DisassociateNatGatewayAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateNatGatewayAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateRouteTableCommand
 */
export const de_DisassociateRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateRouteTableCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: DisassociateRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateRouteTableCommandError
 */
const de_DisassociateRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateSubnetCidrBlockCommand
 */
export const de_DisassociateSubnetCidrBlockCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateSubnetCidrBlockCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateSubnetCidrBlockCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateSubnetCidrBlockResult(data, context);
  const response: DisassociateSubnetCidrBlockCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateSubnetCidrBlockCommandError
 */
const de_DisassociateSubnetCidrBlockCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateSubnetCidrBlockCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommand
 */
export const de_DisassociateTransitGatewayMulticastDomainCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayMulticastDomainCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateTransitGatewayMulticastDomainCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateTransitGatewayMulticastDomainResult(data, context);
  const response: DisassociateTransitGatewayMulticastDomainCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayMulticastDomainCommandError
 */
const de_DisassociateTransitGatewayMulticastDomainCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayMulticastDomainCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayPolicyTableCommand
 */
export const de_DisassociateTransitGatewayPolicyTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayPolicyTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateTransitGatewayPolicyTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateTransitGatewayPolicyTableResult(data, context);
  const response: DisassociateTransitGatewayPolicyTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayPolicyTableCommandError
 */
const de_DisassociateTransitGatewayPolicyTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayPolicyTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayRouteTableCommand
 */
export const de_DisassociateTransitGatewayRouteTableCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayRouteTableCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateTransitGatewayRouteTableCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateTransitGatewayRouteTableResult(data, context);
  const response: DisassociateTransitGatewayRouteTableCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayRouteTableCommandError
 */
const de_DisassociateTransitGatewayRouteTableCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTransitGatewayRouteTableCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateTrunkInterfaceCommand
 */
export const de_DisassociateTrunkInterfaceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTrunkInterfaceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateTrunkInterfaceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateTrunkInterfaceResult(data, context);
  const response: DisassociateTrunkInterfaceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateTrunkInterfaceCommandError
 */
const de_DisassociateTrunkInterfaceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateTrunkInterfaceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2DisassociateVpcCidrBlockCommand
 */
export const de_DisassociateVpcCidrBlockCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateVpcCidrBlockCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_DisassociateVpcCidrBlockCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_DisassociateVpcCidrBlockResult(data, context);
  const response: DisassociateVpcCidrBlockCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2DisassociateVpcCidrBlockCommandError
 */
const de_DisassociateVpcCidrBlockCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<DisassociateVpcCidrBlockCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableAddressTransferCommand
 */
export const de_EnableAddressTransferCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableAddressTransferCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableAddressTransferCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableAddressTransferResult(data, context);
  const response: EnableAddressTransferCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableAddressTransferCommandError
 */
const de_EnableAddressTransferCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableAddressTransferCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableAwsNetworkPerformanceMetricSubscriptionCommand
 */
export const de_EnableAwsNetworkPerformanceMetricSubscriptionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableAwsNetworkPerformanceMetricSubscriptionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableAwsNetworkPerformanceMetricSubscriptionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableAwsNetworkPerformanceMetricSubscriptionResult(data, context);
  const response: EnableAwsNetworkPerformanceMetricSubscriptionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableAwsNetworkPerformanceMetricSubscriptionCommandError
 */
const de_EnableAwsNetworkPerformanceMetricSubscriptionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableAwsNetworkPerformanceMetricSubscriptionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableEbsEncryptionByDefaultCommand
 */
export const de_EnableEbsEncryptionByDefaultCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableEbsEncryptionByDefaultCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableEbsEncryptionByDefaultCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableEbsEncryptionByDefaultResult(data, context);
  const response: EnableEbsEncryptionByDefaultCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableEbsEncryptionByDefaultCommandError
 */
const de_EnableEbsEncryptionByDefaultCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableEbsEncryptionByDefaultCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableFastLaunchCommand
 */
export const de_EnableFastLaunchCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableFastLaunchCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableFastLaunchCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableFastLaunchResult(data, context);
  const response: EnableFastLaunchCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableFastLaunchCommandError
 */
const de_EnableFastLaunchCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableFastLaunchCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoresCommand
 */
export const de_EnableFastSnapshotRestoresCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableFastSnapshotRestoresCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableFastSnapshotRestoresCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableFastSnapshotRestoresResult(data, context);
  const response: EnableFastSnapshotRestoresCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoresCommandError
 */
const de_EnableFastSnapshotRestoresCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableFastSnapshotRestoresCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableImageCommand
 */
export const de_EnableImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableImageResult(data, context);
  const response: EnableImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableImageCommandError
 */
const de_EnableImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableImageBlockPublicAccessCommand
 */
export const de_EnableImageBlockPublicAccessCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableImageBlockPublicAccessCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableImageBlockPublicAccessCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableImageBlockPublicAccessResult(data, context);
  const response: EnableImageBlockPublicAccessCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableImageBlockPublicAccessCommandError
 */
const de_EnableImageBlockPublicAccessCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableImageBlockPublicAccessCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableImageDeprecationCommand
 */
export const de_EnableImageDeprecationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableImageDeprecationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableImageDeprecationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableImageDeprecationResult(data, context);
  const response: EnableImageDeprecationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableImageDeprecationCommandError
 */
const de_EnableImageDeprecationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableImageDeprecationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableIpamOrganizationAdminAccountCommand
 */
export const de_EnableIpamOrganizationAdminAccountCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableIpamOrganizationAdminAccountCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableIpamOrganizationAdminAccountCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableIpamOrganizationAdminAccountResult(data, context);
  const response: EnableIpamOrganizationAdminAccountCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableIpamOrganizationAdminAccountCommandError
 */
const de_EnableIpamOrganizationAdminAccountCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableIpamOrganizationAdminAccountCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableReachabilityAnalyzerOrganizationSharingCommand
 */
export const de_EnableReachabilityAnalyzerOrganizationSharingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableReachabilityAnalyzerOrganizationSharingCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableReachabilityAnalyzerOrganizationSharingCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableReachabilityAnalyzerOrganizationSharingResult(data, context);
  const response: EnableReachabilityAnalyzerOrganizationSharingCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableReachabilityAnalyzerOrganizationSharingCommandError
 */
const de_EnableReachabilityAnalyzerOrganizationSharingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableReachabilityAnalyzerOrganizationSharingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableSerialConsoleAccessCommand
 */
export const de_EnableSerialConsoleAccessCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableSerialConsoleAccessCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableSerialConsoleAccessCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableSerialConsoleAccessResult(data, context);
  const response: EnableSerialConsoleAccessCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableSerialConsoleAccessCommandError
 */
const de_EnableSerialConsoleAccessCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableSerialConsoleAccessCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableSnapshotBlockPublicAccessCommand
 */
export const de_EnableSnapshotBlockPublicAccessCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableSnapshotBlockPublicAccessCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableSnapshotBlockPublicAccessCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableSnapshotBlockPublicAccessResult(data, context);
  const response: EnableSnapshotBlockPublicAccessCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableSnapshotBlockPublicAccessCommandError
 */
const de_EnableSnapshotBlockPublicAccessCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableSnapshotBlockPublicAccessCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommand
 */
export const de_EnableTransitGatewayRouteTablePropagationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableTransitGatewayRouteTablePropagationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableTransitGatewayRouteTablePropagationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableTransitGatewayRouteTablePropagationResult(data, context);
  const response: EnableTransitGatewayRouteTablePropagationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableTransitGatewayRouteTablePropagationCommandError
 */
const de_EnableTransitGatewayRouteTablePropagationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableTransitGatewayRouteTablePropagationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableVgwRoutePropagationCommand
 */
export const de_EnableVgwRoutePropagationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVgwRoutePropagationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableVgwRoutePropagationCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: EnableVgwRoutePropagationCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2EnableVgwRoutePropagationCommandError
 */
const de_EnableVgwRoutePropagationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVgwRoutePropagationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableVolumeIOCommand
 */
export const de_EnableVolumeIOCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVolumeIOCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableVolumeIOCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: EnableVolumeIOCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2EnableVolumeIOCommandError
 */
const de_EnableVolumeIOCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVolumeIOCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableVpcClassicLinkCommand
 */
export const de_EnableVpcClassicLinkCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVpcClassicLinkCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableVpcClassicLinkCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableVpcClassicLinkResult(data, context);
  const response: EnableVpcClassicLinkCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableVpcClassicLinkCommandError
 */
const de_EnableVpcClassicLinkCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVpcClassicLinkCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommand
 */
export const de_EnableVpcClassicLinkDnsSupportCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVpcClassicLinkDnsSupportCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_EnableVpcClassicLinkDnsSupportCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_EnableVpcClassicLinkDnsSupportResult(data, context);
  const response: EnableVpcClassicLinkDnsSupportCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2EnableVpcClassicLinkDnsSupportCommandError
 */
const de_EnableVpcClassicLinkDnsSupportCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<EnableVpcClassicLinkDnsSupportCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommand
 */
export const de_ExportClientVpnClientCertificateRevocationListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportClientVpnClientCertificateRevocationListCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ExportClientVpnClientCertificateRevocationListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ExportClientVpnClientCertificateRevocationListResult(data, context);
  const response: ExportClientVpnClientCertificateRevocationListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ExportClientVpnClientCertificateRevocationListCommandError
 */
const de_ExportClientVpnClientCertificateRevocationListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportClientVpnClientCertificateRevocationListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ExportClientVpnClientConfigurationCommand
 */
export const de_ExportClientVpnClientConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportClientVpnClientConfigurationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ExportClientVpnClientConfigurationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ExportClientVpnClientConfigurationResult(data, context);
  const response: ExportClientVpnClientConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ExportClientVpnClientConfigurationCommandError
 */
const de_ExportClientVpnClientConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportClientVpnClientConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ExportImageCommand
 */
export const de_ExportImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ExportImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ExportImageResult(data, context);
  const response: ExportImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ExportImageCommandError
 */
const de_ExportImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ExportTransitGatewayRoutesCommand
 */
export const de_ExportTransitGatewayRoutesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportTransitGatewayRoutesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ExportTransitGatewayRoutesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ExportTransitGatewayRoutesResult(data, context);
  const response: ExportTransitGatewayRoutesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ExportTransitGatewayRoutesCommandError
 */
const de_ExportTransitGatewayRoutesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ExportTransitGatewayRoutesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommand
 */
export const de_GetAssociatedEnclaveCertificateIamRolesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAssociatedEnclaveCertificateIamRolesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetAssociatedEnclaveCertificateIamRolesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetAssociatedEnclaveCertificateIamRolesResult(data, context);
  const response: GetAssociatedEnclaveCertificateIamRolesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesCommandError
 */
const de_GetAssociatedEnclaveCertificateIamRolesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAssociatedEnclaveCertificateIamRolesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommand
 */
export const de_GetAssociatedIpv6PoolCidrsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAssociatedIpv6PoolCidrsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetAssociatedIpv6PoolCidrsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetAssociatedIpv6PoolCidrsResult(data, context);
  const response: GetAssociatedIpv6PoolCidrsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetAssociatedIpv6PoolCidrsCommandError
 */
const de_GetAssociatedIpv6PoolCidrsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAssociatedIpv6PoolCidrsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetAwsNetworkPerformanceDataCommand
 */
export const de_GetAwsNetworkPerformanceDataCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAwsNetworkPerformanceDataCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetAwsNetworkPerformanceDataCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetAwsNetworkPerformanceDataResult(data, context);
  const response: GetAwsNetworkPerformanceDataCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetAwsNetworkPerformanceDataCommandError
 */
const de_GetAwsNetworkPerformanceDataCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetAwsNetworkPerformanceDataCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetCapacityReservationUsageCommand
 */
export const de_GetCapacityReservationUsageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCapacityReservationUsageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetCapacityReservationUsageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetCapacityReservationUsageResult(data, context);
  const response: GetCapacityReservationUsageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetCapacityReservationUsageCommandError
 */
const de_GetCapacityReservationUsageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCapacityReservationUsageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetCoipPoolUsageCommand
 */
export const de_GetCoipPoolUsageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCoipPoolUsageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetCoipPoolUsageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetCoipPoolUsageResult(data, context);
  const response: GetCoipPoolUsageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetCoipPoolUsageCommandError
 */
const de_GetCoipPoolUsageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetCoipPoolUsageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetConsoleOutputCommand
 */
export const de_GetConsoleOutputCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetConsoleOutputCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetConsoleOutputCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetConsoleOutputResult(data, context);
  const response: GetConsoleOutputCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetConsoleOutputCommandError
 */
const de_GetConsoleOutputCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetConsoleOutputCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetConsoleScreenshotCommand
 */
export const de_GetConsoleScreenshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetConsoleScreenshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetConsoleScreenshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetConsoleScreenshotResult(data, context);
  const response: GetConsoleScreenshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetConsoleScreenshotCommandError
 */
const de_GetConsoleScreenshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetConsoleScreenshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetDefaultCreditSpecificationCommand
 */
export const de_GetDefaultCreditSpecificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetDefaultCreditSpecificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetDefaultCreditSpecificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetDefaultCreditSpecificationResult(data, context);
  const response: GetDefaultCreditSpecificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetDefaultCreditSpecificationCommandError
 */
const de_GetDefaultCreditSpecificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetDefaultCreditSpecificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetEbsDefaultKmsKeyIdCommand
 */
export const de_GetEbsDefaultKmsKeyIdCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEbsDefaultKmsKeyIdCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetEbsDefaultKmsKeyIdCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetEbsDefaultKmsKeyIdResult(data, context);
  const response: GetEbsDefaultKmsKeyIdCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetEbsDefaultKmsKeyIdCommandError
 */
const de_GetEbsDefaultKmsKeyIdCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEbsDefaultKmsKeyIdCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetEbsEncryptionByDefaultCommand
 */
export const de_GetEbsEncryptionByDefaultCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEbsEncryptionByDefaultCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetEbsEncryptionByDefaultCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetEbsEncryptionByDefaultResult(data, context);
  const response: GetEbsEncryptionByDefaultCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetEbsEncryptionByDefaultCommandError
 */
const de_GetEbsEncryptionByDefaultCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetEbsEncryptionByDefaultCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetFlowLogsIntegrationTemplateCommand
 */
export const de_GetFlowLogsIntegrationTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetFlowLogsIntegrationTemplateCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetFlowLogsIntegrationTemplateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetFlowLogsIntegrationTemplateResult(data, context);
  const response: GetFlowLogsIntegrationTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetFlowLogsIntegrationTemplateCommandError
 */
const de_GetFlowLogsIntegrationTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetFlowLogsIntegrationTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetGroupsForCapacityReservationCommand
 */
export const de_GetGroupsForCapacityReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetGroupsForCapacityReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetGroupsForCapacityReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetGroupsForCapacityReservationResult(data, context);
  const response: GetGroupsForCapacityReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetGroupsForCapacityReservationCommandError
 */
const de_GetGroupsForCapacityReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetGroupsForCapacityReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetHostReservationPurchasePreviewCommand
 */
export const de_GetHostReservationPurchasePreviewCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetHostReservationPurchasePreviewCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetHostReservationPurchasePreviewCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetHostReservationPurchasePreviewResult(data, context);
  const response: GetHostReservationPurchasePreviewCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetHostReservationPurchasePreviewCommandError
 */
const de_GetHostReservationPurchasePreviewCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetHostReservationPurchasePreviewCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetImageBlockPublicAccessStateCommand
 */
export const de_GetImageBlockPublicAccessStateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetImageBlockPublicAccessStateCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetImageBlockPublicAccessStateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetImageBlockPublicAccessStateResult(data, context);
  const response: GetImageBlockPublicAccessStateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetImageBlockPublicAccessStateCommandError
 */
const de_GetImageBlockPublicAccessStateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetImageBlockPublicAccessStateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommand
 */
export const de_GetInstanceTypesFromInstanceRequirementsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetInstanceTypesFromInstanceRequirementsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetInstanceTypesFromInstanceRequirementsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetInstanceTypesFromInstanceRequirementsResult(data, context);
  const response: GetInstanceTypesFromInstanceRequirementsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsCommandError
 */
const de_GetInstanceTypesFromInstanceRequirementsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetInstanceTypesFromInstanceRequirementsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetInstanceUefiDataCommand
 */
export const de_GetInstanceUefiDataCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetInstanceUefiDataCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetInstanceUefiDataCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetInstanceUefiDataResult(data, context);
  const response: GetInstanceUefiDataCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetInstanceUefiDataCommandError
 */
const de_GetInstanceUefiDataCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetInstanceUefiDataCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetIpamAddressHistoryCommand
 */
export const de_GetIpamAddressHistoryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamAddressHistoryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetIpamAddressHistoryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetIpamAddressHistoryResult(data, context);
  const response: GetIpamAddressHistoryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetIpamAddressHistoryCommandError
 */
const de_GetIpamAddressHistoryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamAddressHistoryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetIpamDiscoveredAccountsCommand
 */
export const de_GetIpamDiscoveredAccountsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamDiscoveredAccountsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetIpamDiscoveredAccountsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetIpamDiscoveredAccountsResult(data, context);
  const response: GetIpamDiscoveredAccountsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetIpamDiscoveredAccountsCommandError
 */
const de_GetIpamDiscoveredAccountsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamDiscoveredAccountsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetIpamDiscoveredPublicAddressesCommand
 */
export const de_GetIpamDiscoveredPublicAddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamDiscoveredPublicAddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetIpamDiscoveredPublicAddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetIpamDiscoveredPublicAddressesResult(data, context);
  const response: GetIpamDiscoveredPublicAddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetIpamDiscoveredPublicAddressesCommandError
 */
const de_GetIpamDiscoveredPublicAddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamDiscoveredPublicAddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetIpamDiscoveredResourceCidrsCommand
 */
export const de_GetIpamDiscoveredResourceCidrsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamDiscoveredResourceCidrsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetIpamDiscoveredResourceCidrsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetIpamDiscoveredResourceCidrsResult(data, context);
  const response: GetIpamDiscoveredResourceCidrsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetIpamDiscoveredResourceCidrsCommandError
 */
const de_GetIpamDiscoveredResourceCidrsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamDiscoveredResourceCidrsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetIpamPoolAllocationsCommand
 */
export const de_GetIpamPoolAllocationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamPoolAllocationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetIpamPoolAllocationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetIpamPoolAllocationsResult(data, context);
  const response: GetIpamPoolAllocationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetIpamPoolAllocationsCommandError
 */
const de_GetIpamPoolAllocationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamPoolAllocationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetIpamPoolCidrsCommand
 */
export const de_GetIpamPoolCidrsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamPoolCidrsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetIpamPoolCidrsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetIpamPoolCidrsResult(data, context);
  const response: GetIpamPoolCidrsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetIpamPoolCidrsCommandError
 */
const de_GetIpamPoolCidrsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamPoolCidrsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetIpamResourceCidrsCommand
 */
export const de_GetIpamResourceCidrsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamResourceCidrsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetIpamResourceCidrsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetIpamResourceCidrsResult(data, context);
  const response: GetIpamResourceCidrsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetIpamResourceCidrsCommandError
 */
const de_GetIpamResourceCidrsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetIpamResourceCidrsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetLaunchTemplateDataCommand
 */
export const de_GetLaunchTemplateDataCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetLaunchTemplateDataCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetLaunchTemplateDataCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetLaunchTemplateDataResult(data, context);
  const response: GetLaunchTemplateDataCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetLaunchTemplateDataCommandError
 */
const de_GetLaunchTemplateDataCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetLaunchTemplateDataCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetManagedPrefixListAssociationsCommand
 */
export const de_GetManagedPrefixListAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetManagedPrefixListAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetManagedPrefixListAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetManagedPrefixListAssociationsResult(data, context);
  const response: GetManagedPrefixListAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetManagedPrefixListAssociationsCommandError
 */
const de_GetManagedPrefixListAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetManagedPrefixListAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetManagedPrefixListEntriesCommand
 */
export const de_GetManagedPrefixListEntriesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetManagedPrefixListEntriesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetManagedPrefixListEntriesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetManagedPrefixListEntriesResult(data, context);
  const response: GetManagedPrefixListEntriesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetManagedPrefixListEntriesCommandError
 */
const de_GetManagedPrefixListEntriesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetManagedPrefixListEntriesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommand
 */
export const de_GetNetworkInsightsAccessScopeAnalysisFindingsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetNetworkInsightsAccessScopeAnalysisFindingsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetNetworkInsightsAccessScopeAnalysisFindingsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetNetworkInsightsAccessScopeAnalysisFindingsResult(data, context);
  const response: GetNetworkInsightsAccessScopeAnalysisFindingsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsCommandError
 */
const de_GetNetworkInsightsAccessScopeAnalysisFindingsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetNetworkInsightsAccessScopeAnalysisFindingsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetNetworkInsightsAccessScopeContentCommand
 */
export const de_GetNetworkInsightsAccessScopeContentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetNetworkInsightsAccessScopeContentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetNetworkInsightsAccessScopeContentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetNetworkInsightsAccessScopeContentResult(data, context);
  const response: GetNetworkInsightsAccessScopeContentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetNetworkInsightsAccessScopeContentCommandError
 */
const de_GetNetworkInsightsAccessScopeContentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetNetworkInsightsAccessScopeContentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetPasswordDataCommand
 */
export const de_GetPasswordDataCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetPasswordDataCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetPasswordDataCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetPasswordDataResult(data, context);
  const response: GetPasswordDataCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetPasswordDataCommandError
 */
const de_GetPasswordDataCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetPasswordDataCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetReservedInstancesExchangeQuoteCommand
 */
export const de_GetReservedInstancesExchangeQuoteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetReservedInstancesExchangeQuoteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetReservedInstancesExchangeQuoteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetReservedInstancesExchangeQuoteResult(data, context);
  const response: GetReservedInstancesExchangeQuoteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetReservedInstancesExchangeQuoteCommandError
 */
const de_GetReservedInstancesExchangeQuoteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetReservedInstancesExchangeQuoteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetSecurityGroupsForVpcCommand
 */
export const de_GetSecurityGroupsForVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSecurityGroupsForVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetSecurityGroupsForVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetSecurityGroupsForVpcResult(data, context);
  const response: GetSecurityGroupsForVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetSecurityGroupsForVpcCommandError
 */
const de_GetSecurityGroupsForVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSecurityGroupsForVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetSerialConsoleAccessStatusCommand
 */
export const de_GetSerialConsoleAccessStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSerialConsoleAccessStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetSerialConsoleAccessStatusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetSerialConsoleAccessStatusResult(data, context);
  const response: GetSerialConsoleAccessStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetSerialConsoleAccessStatusCommandError
 */
const de_GetSerialConsoleAccessStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSerialConsoleAccessStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetSnapshotBlockPublicAccessStateCommand
 */
export const de_GetSnapshotBlockPublicAccessStateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSnapshotBlockPublicAccessStateCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetSnapshotBlockPublicAccessStateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetSnapshotBlockPublicAccessStateResult(data, context);
  const response: GetSnapshotBlockPublicAccessStateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetSnapshotBlockPublicAccessStateCommandError
 */
const de_GetSnapshotBlockPublicAccessStateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSnapshotBlockPublicAccessStateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetSpotPlacementScoresCommand
 */
export const de_GetSpotPlacementScoresCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSpotPlacementScoresCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetSpotPlacementScoresCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetSpotPlacementScoresResult(data, context);
  const response: GetSpotPlacementScoresCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetSpotPlacementScoresCommandError
 */
const de_GetSpotPlacementScoresCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSpotPlacementScoresCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetSubnetCidrReservationsCommand
 */
export const de_GetSubnetCidrReservationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSubnetCidrReservationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetSubnetCidrReservationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetSubnetCidrReservationsResult(data, context);
  const response: GetSubnetCidrReservationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetSubnetCidrReservationsCommandError
 */
const de_GetSubnetCidrReservationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetSubnetCidrReservationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommand
 */
export const de_GetTransitGatewayAttachmentPropagationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayAttachmentPropagationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayAttachmentPropagationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayAttachmentPropagationsResult(data, context);
  const response: GetTransitGatewayAttachmentPropagationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayAttachmentPropagationsCommandError
 */
const de_GetTransitGatewayAttachmentPropagationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayAttachmentPropagationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommand
 */
export const de_GetTransitGatewayMulticastDomainAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayMulticastDomainAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayMulticastDomainAssociationsResult(data, context);
  const response: GetTransitGatewayMulticastDomainAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsCommandError
 */
const de_GetTransitGatewayMulticastDomainAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayPolicyTableAssociationsCommand
 */
export const de_GetTransitGatewayPolicyTableAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPolicyTableAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayPolicyTableAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayPolicyTableAssociationsResult(data, context);
  const response: GetTransitGatewayPolicyTableAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayPolicyTableAssociationsCommandError
 */
const de_GetTransitGatewayPolicyTableAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPolicyTableAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayPolicyTableEntriesCommand
 */
export const de_GetTransitGatewayPolicyTableEntriesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPolicyTableEntriesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayPolicyTableEntriesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayPolicyTableEntriesResult(data, context);
  const response: GetTransitGatewayPolicyTableEntriesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayPolicyTableEntriesCommandError
 */
const de_GetTransitGatewayPolicyTableEntriesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPolicyTableEntriesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommand
 */
export const de_GetTransitGatewayPrefixListReferencesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPrefixListReferencesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayPrefixListReferencesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayPrefixListReferencesResult(data, context);
  const response: GetTransitGatewayPrefixListReferencesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayPrefixListReferencesCommandError
 */
const de_GetTransitGatewayPrefixListReferencesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayPrefixListReferencesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommand
 */
export const de_GetTransitGatewayRouteTableAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayRouteTableAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayRouteTableAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayRouteTableAssociationsResult(data, context);
  const response: GetTransitGatewayRouteTableAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayRouteTableAssociationsCommandError
 */
const de_GetTransitGatewayRouteTableAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayRouteTableAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommand
 */
export const de_GetTransitGatewayRouteTablePropagationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayRouteTablePropagationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetTransitGatewayRouteTablePropagationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetTransitGatewayRouteTablePropagationsResult(data, context);
  const response: GetTransitGatewayRouteTablePropagationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetTransitGatewayRouteTablePropagationsCommandError
 */
const de_GetTransitGatewayRouteTablePropagationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetTransitGatewayRouteTablePropagationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetVerifiedAccessEndpointPolicyCommand
 */
export const de_GetVerifiedAccessEndpointPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVerifiedAccessEndpointPolicyCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetVerifiedAccessEndpointPolicyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetVerifiedAccessEndpointPolicyResult(data, context);
  const response: GetVerifiedAccessEndpointPolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetVerifiedAccessEndpointPolicyCommandError
 */
const de_GetVerifiedAccessEndpointPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVerifiedAccessEndpointPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetVerifiedAccessGroupPolicyCommand
 */
export const de_GetVerifiedAccessGroupPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVerifiedAccessGroupPolicyCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetVerifiedAccessGroupPolicyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetVerifiedAccessGroupPolicyResult(data, context);
  const response: GetVerifiedAccessGroupPolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetVerifiedAccessGroupPolicyCommandError
 */
const de_GetVerifiedAccessGroupPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVerifiedAccessGroupPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommand
 */
export const de_GetVpnConnectionDeviceSampleConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVpnConnectionDeviceSampleConfigurationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetVpnConnectionDeviceSampleConfigurationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetVpnConnectionDeviceSampleConfigurationResult(data, context);
  const response: GetVpnConnectionDeviceSampleConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationCommandError
 */
const de_GetVpnConnectionDeviceSampleConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVpnConnectionDeviceSampleConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetVpnConnectionDeviceTypesCommand
 */
export const de_GetVpnConnectionDeviceTypesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVpnConnectionDeviceTypesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetVpnConnectionDeviceTypesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetVpnConnectionDeviceTypesResult(data, context);
  const response: GetVpnConnectionDeviceTypesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetVpnConnectionDeviceTypesCommandError
 */
const de_GetVpnConnectionDeviceTypesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVpnConnectionDeviceTypesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2GetVpnTunnelReplacementStatusCommand
 */
export const de_GetVpnTunnelReplacementStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVpnTunnelReplacementStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_GetVpnTunnelReplacementStatusCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_GetVpnTunnelReplacementStatusResult(data, context);
  const response: GetVpnTunnelReplacementStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2GetVpnTunnelReplacementStatusCommandError
 */
const de_GetVpnTunnelReplacementStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<GetVpnTunnelReplacementStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommand
 */
export const de_ImportClientVpnClientCertificateRevocationListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportClientVpnClientCertificateRevocationListCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ImportClientVpnClientCertificateRevocationListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImportClientVpnClientCertificateRevocationListResult(data, context);
  const response: ImportClientVpnClientCertificateRevocationListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ImportClientVpnClientCertificateRevocationListCommandError
 */
const de_ImportClientVpnClientCertificateRevocationListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportClientVpnClientCertificateRevocationListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ImportImageCommand
 */
export const de_ImportImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ImportImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImportImageResult(data, context);
  const response: ImportImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ImportImageCommandError
 */
const de_ImportImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ImportInstanceCommand
 */
export const de_ImportInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ImportInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImportInstanceResult(data, context);
  const response: ImportInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ImportInstanceCommandError
 */
const de_ImportInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ImportKeyPairCommand
 */
export const de_ImportKeyPairCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportKeyPairCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ImportKeyPairCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImportKeyPairResult(data, context);
  const response: ImportKeyPairCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ImportKeyPairCommandError
 */
const de_ImportKeyPairCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportKeyPairCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ImportSnapshotCommand
 */
export const de_ImportSnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportSnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ImportSnapshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImportSnapshotResult(data, context);
  const response: ImportSnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ImportSnapshotCommandError
 */
const de_ImportSnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportSnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ImportVolumeCommand
 */
export const de_ImportVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ImportVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ImportVolumeResult(data, context);
  const response: ImportVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ImportVolumeCommandError
 */
const de_ImportVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ImportVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ListImagesInRecycleBinCommand
 */
export const de_ListImagesInRecycleBinCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListImagesInRecycleBinCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ListImagesInRecycleBinCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ListImagesInRecycleBinResult(data, context);
  const response: ListImagesInRecycleBinCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ListImagesInRecycleBinCommandError
 */
const de_ListImagesInRecycleBinCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListImagesInRecycleBinCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ListSnapshotsInRecycleBinCommand
 */
export const de_ListSnapshotsInRecycleBinCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListSnapshotsInRecycleBinCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ListSnapshotsInRecycleBinCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ListSnapshotsInRecycleBinResult(data, context);
  const response: ListSnapshotsInRecycleBinCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ListSnapshotsInRecycleBinCommandError
 */
const de_ListSnapshotsInRecycleBinCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ListSnapshotsInRecycleBinCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2LockSnapshotCommand
 */
export const de_LockSnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<LockSnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_LockSnapshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_LockSnapshotResult(data, context);
  const response: LockSnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2LockSnapshotCommandError
 */
const de_LockSnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<LockSnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyAddressAttributeCommand
 */
export const de_ModifyAddressAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyAddressAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyAddressAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyAddressAttributeResult(data, context);
  const response: ModifyAddressAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyAddressAttributeCommandError
 */
const de_ModifyAddressAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyAddressAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyAvailabilityZoneGroupCommand
 */
export const de_ModifyAvailabilityZoneGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyAvailabilityZoneGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyAvailabilityZoneGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyAvailabilityZoneGroupResult(data, context);
  const response: ModifyAvailabilityZoneGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyAvailabilityZoneGroupCommandError
 */
const de_ModifyAvailabilityZoneGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyAvailabilityZoneGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyCapacityReservationCommand
 */
export const de_ModifyCapacityReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyCapacityReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyCapacityReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyCapacityReservationResult(data, context);
  const response: ModifyCapacityReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyCapacityReservationCommandError
 */
const de_ModifyCapacityReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyCapacityReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyCapacityReservationFleetCommand
 */
export const de_ModifyCapacityReservationFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyCapacityReservationFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyCapacityReservationFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyCapacityReservationFleetResult(data, context);
  const response: ModifyCapacityReservationFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyCapacityReservationFleetCommandError
 */
const de_ModifyCapacityReservationFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyCapacityReservationFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyClientVpnEndpointCommand
 */
export const de_ModifyClientVpnEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyClientVpnEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyClientVpnEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyClientVpnEndpointResult(data, context);
  const response: ModifyClientVpnEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyClientVpnEndpointCommandError
 */
const de_ModifyClientVpnEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyClientVpnEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyDefaultCreditSpecificationCommand
 */
export const de_ModifyDefaultCreditSpecificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyDefaultCreditSpecificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyDefaultCreditSpecificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyDefaultCreditSpecificationResult(data, context);
  const response: ModifyDefaultCreditSpecificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyDefaultCreditSpecificationCommandError
 */
const de_ModifyDefaultCreditSpecificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyDefaultCreditSpecificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommand
 */
export const de_ModifyEbsDefaultKmsKeyIdCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyEbsDefaultKmsKeyIdCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyEbsDefaultKmsKeyIdCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyEbsDefaultKmsKeyIdResult(data, context);
  const response: ModifyEbsDefaultKmsKeyIdCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyEbsDefaultKmsKeyIdCommandError
 */
const de_ModifyEbsDefaultKmsKeyIdCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyEbsDefaultKmsKeyIdCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyFleetCommand
 */
export const de_ModifyFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyFleetResult(data, context);
  const response: ModifyFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyFleetCommandError
 */
const de_ModifyFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyFpgaImageAttributeCommand
 */
export const de_ModifyFpgaImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyFpgaImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyFpgaImageAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyFpgaImageAttributeResult(data, context);
  const response: ModifyFpgaImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyFpgaImageAttributeCommandError
 */
const de_ModifyFpgaImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyFpgaImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyHostsCommand
 */
export const de_ModifyHostsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyHostsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyHostsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyHostsResult(data, context);
  const response: ModifyHostsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyHostsCommandError
 */
const de_ModifyHostsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyHostsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIdentityIdFormatCommand
 */
export const de_ModifyIdentityIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIdentityIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIdentityIdFormatCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyIdentityIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIdentityIdFormatCommandError
 */
const de_ModifyIdentityIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIdentityIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIdFormatCommand
 */
export const de_ModifyIdFormatCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIdFormatCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIdFormatCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyIdFormatCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIdFormatCommandError
 */
const de_ModifyIdFormatCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIdFormatCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyImageAttributeCommand
 */
export const de_ModifyImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyImageAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyImageAttributeCommandError
 */
const de_ModifyImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceAttributeCommand
 */
export const de_ModifyInstanceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyInstanceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceAttributeCommandError
 */
const de_ModifyInstanceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommand
 */
export const de_ModifyInstanceCapacityReservationAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceCapacityReservationAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceCapacityReservationAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstanceCapacityReservationAttributesResult(data, context);
  const response: ModifyInstanceCapacityReservationAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceCapacityReservationAttributesCommandError
 */
const de_ModifyInstanceCapacityReservationAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceCapacityReservationAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceCreditSpecificationCommand
 */
export const de_ModifyInstanceCreditSpecificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceCreditSpecificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceCreditSpecificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstanceCreditSpecificationResult(data, context);
  const response: ModifyInstanceCreditSpecificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceCreditSpecificationCommandError
 */
const de_ModifyInstanceCreditSpecificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceCreditSpecificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceEventStartTimeCommand
 */
export const de_ModifyInstanceEventStartTimeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceEventStartTimeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceEventStartTimeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstanceEventStartTimeResult(data, context);
  const response: ModifyInstanceEventStartTimeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceEventStartTimeCommandError
 */
const de_ModifyInstanceEventStartTimeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceEventStartTimeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceEventWindowCommand
 */
export const de_ModifyInstanceEventWindowCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceEventWindowCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceEventWindowCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstanceEventWindowResult(data, context);
  const response: ModifyInstanceEventWindowCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceEventWindowCommandError
 */
const de_ModifyInstanceEventWindowCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceEventWindowCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceMaintenanceOptionsCommand
 */
export const de_ModifyInstanceMaintenanceOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceMaintenanceOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceMaintenanceOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstanceMaintenanceOptionsResult(data, context);
  const response: ModifyInstanceMaintenanceOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceMaintenanceOptionsCommandError
 */
const de_ModifyInstanceMaintenanceOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceMaintenanceOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstanceMetadataOptionsCommand
 */
export const de_ModifyInstanceMetadataOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceMetadataOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstanceMetadataOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstanceMetadataOptionsResult(data, context);
  const response: ModifyInstanceMetadataOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstanceMetadataOptionsCommandError
 */
const de_ModifyInstanceMetadataOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstanceMetadataOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyInstancePlacementCommand
 */
export const de_ModifyInstancePlacementCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstancePlacementCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyInstancePlacementCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyInstancePlacementResult(data, context);
  const response: ModifyInstancePlacementCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyInstancePlacementCommandError
 */
const de_ModifyInstancePlacementCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyInstancePlacementCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIpamCommand
 */
export const de_ModifyIpamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIpamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyIpamResult(data, context);
  const response: ModifyIpamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIpamCommandError
 */
const de_ModifyIpamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIpamPoolCommand
 */
export const de_ModifyIpamPoolCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamPoolCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIpamPoolCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyIpamPoolResult(data, context);
  const response: ModifyIpamPoolCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIpamPoolCommandError
 */
const de_ModifyIpamPoolCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamPoolCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIpamResourceCidrCommand
 */
export const de_ModifyIpamResourceCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamResourceCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIpamResourceCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyIpamResourceCidrResult(data, context);
  const response: ModifyIpamResourceCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIpamResourceCidrCommandError
 */
const de_ModifyIpamResourceCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamResourceCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIpamResourceDiscoveryCommand
 */
export const de_ModifyIpamResourceDiscoveryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamResourceDiscoveryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIpamResourceDiscoveryCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyIpamResourceDiscoveryResult(data, context);
  const response: ModifyIpamResourceDiscoveryCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIpamResourceDiscoveryCommandError
 */
const de_ModifyIpamResourceDiscoveryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamResourceDiscoveryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyIpamScopeCommand
 */
export const de_ModifyIpamScopeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamScopeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyIpamScopeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyIpamScopeResult(data, context);
  const response: ModifyIpamScopeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyIpamScopeCommandError
 */
const de_ModifyIpamScopeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyIpamScopeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyLaunchTemplateCommand
 */
export const de_ModifyLaunchTemplateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyLaunchTemplateCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyLaunchTemplateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyLaunchTemplateResult(data, context);
  const response: ModifyLaunchTemplateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyLaunchTemplateCommandError
 */
const de_ModifyLaunchTemplateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyLaunchTemplateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyLocalGatewayRouteCommand
 */
export const de_ModifyLocalGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyLocalGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyLocalGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyLocalGatewayRouteResult(data, context);
  const response: ModifyLocalGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyLocalGatewayRouteCommandError
 */
const de_ModifyLocalGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyLocalGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyManagedPrefixListCommand
 */
export const de_ModifyManagedPrefixListCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyManagedPrefixListCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyManagedPrefixListCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyManagedPrefixListResult(data, context);
  const response: ModifyManagedPrefixListCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyManagedPrefixListCommandError
 */
const de_ModifyManagedPrefixListCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyManagedPrefixListCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyNetworkInterfaceAttributeCommand
 */
export const de_ModifyNetworkInterfaceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyNetworkInterfaceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyNetworkInterfaceAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyNetworkInterfaceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyNetworkInterfaceAttributeCommandError
 */
const de_ModifyNetworkInterfaceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyNetworkInterfaceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyPrivateDnsNameOptionsCommand
 */
export const de_ModifyPrivateDnsNameOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyPrivateDnsNameOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyPrivateDnsNameOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyPrivateDnsNameOptionsResult(data, context);
  const response: ModifyPrivateDnsNameOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyPrivateDnsNameOptionsCommandError
 */
const de_ModifyPrivateDnsNameOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyPrivateDnsNameOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyReservedInstancesCommand
 */
export const de_ModifyReservedInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyReservedInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyReservedInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyReservedInstancesResult(data, context);
  const response: ModifyReservedInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyReservedInstancesCommandError
 */
const de_ModifyReservedInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyReservedInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifySecurityGroupRulesCommand
 */
export const de_ModifySecurityGroupRulesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySecurityGroupRulesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifySecurityGroupRulesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifySecurityGroupRulesResult(data, context);
  const response: ModifySecurityGroupRulesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifySecurityGroupRulesCommandError
 */
const de_ModifySecurityGroupRulesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySecurityGroupRulesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifySnapshotAttributeCommand
 */
export const de_ModifySnapshotAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySnapshotAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifySnapshotAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifySnapshotAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifySnapshotAttributeCommandError
 */
const de_ModifySnapshotAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySnapshotAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifySnapshotTierCommand
 */
export const de_ModifySnapshotTierCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySnapshotTierCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifySnapshotTierCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifySnapshotTierResult(data, context);
  const response: ModifySnapshotTierCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifySnapshotTierCommandError
 */
const de_ModifySnapshotTierCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySnapshotTierCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifySpotFleetRequestCommand
 */
export const de_ModifySpotFleetRequestCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySpotFleetRequestCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifySpotFleetRequestCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifySpotFleetRequestResponse(data, context);
  const response: ModifySpotFleetRequestCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifySpotFleetRequestCommandError
 */
const de_ModifySpotFleetRequestCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySpotFleetRequestCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifySubnetAttributeCommand
 */
export const de_ModifySubnetAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySubnetAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifySubnetAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifySubnetAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifySubnetAttributeCommandError
 */
const de_ModifySubnetAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifySubnetAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommand
 */
export const de_ModifyTrafficMirrorFilterNetworkServicesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorFilterNetworkServicesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyTrafficMirrorFilterNetworkServicesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyTrafficMirrorFilterNetworkServicesResult(data, context);
  const response: ModifyTrafficMirrorFilterNetworkServicesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesCommandError
 */
const de_ModifyTrafficMirrorFilterNetworkServicesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorFilterNetworkServicesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommand
 */
export const de_ModifyTrafficMirrorFilterRuleCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorFilterRuleCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyTrafficMirrorFilterRuleCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyTrafficMirrorFilterRuleResult(data, context);
  const response: ModifyTrafficMirrorFilterRuleCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorFilterRuleCommandError
 */
const de_ModifyTrafficMirrorFilterRuleCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorFilterRuleCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorSessionCommand
 */
export const de_ModifyTrafficMirrorSessionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorSessionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyTrafficMirrorSessionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyTrafficMirrorSessionResult(data, context);
  const response: ModifyTrafficMirrorSessionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorSessionCommandError
 */
const de_ModifyTrafficMirrorSessionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTrafficMirrorSessionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyTransitGatewayCommand
 */
export const de_ModifyTransitGatewayCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyTransitGatewayCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyTransitGatewayResult(data, context);
  const response: ModifyTransitGatewayCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyTransitGatewayCommandError
 */
const de_ModifyTransitGatewayCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommand
 */
export const de_ModifyTransitGatewayPrefixListReferenceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayPrefixListReferenceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyTransitGatewayPrefixListReferenceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyTransitGatewayPrefixListReferenceResult(data, context);
  const response: ModifyTransitGatewayPrefixListReferenceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceCommandError
 */
const de_ModifyTransitGatewayPrefixListReferenceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayPrefixListReferenceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommand
 */
export const de_ModifyTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyTransitGatewayVpcAttachmentResult(data, context);
  const response: ModifyTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyTransitGatewayVpcAttachmentCommandError
 */
const de_ModifyTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessEndpointCommand
 */
export const de_ModifyVerifiedAccessEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessEndpointResult(data, context);
  const response: ModifyVerifiedAccessEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessEndpointCommandError
 */
const de_ModifyVerifiedAccessEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessEndpointPolicyCommand
 */
export const de_ModifyVerifiedAccessEndpointPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessEndpointPolicyCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessEndpointPolicyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessEndpointPolicyResult(data, context);
  const response: ModifyVerifiedAccessEndpointPolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessEndpointPolicyCommandError
 */
const de_ModifyVerifiedAccessEndpointPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessEndpointPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessGroupCommand
 */
export const de_ModifyVerifiedAccessGroupCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessGroupCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessGroupCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessGroupResult(data, context);
  const response: ModifyVerifiedAccessGroupCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessGroupCommandError
 */
const de_ModifyVerifiedAccessGroupCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessGroupCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessGroupPolicyCommand
 */
export const de_ModifyVerifiedAccessGroupPolicyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessGroupPolicyCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessGroupPolicyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessGroupPolicyResult(data, context);
  const response: ModifyVerifiedAccessGroupPolicyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessGroupPolicyCommandError
 */
const de_ModifyVerifiedAccessGroupPolicyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessGroupPolicyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessInstanceCommand
 */
export const de_ModifyVerifiedAccessInstanceCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessInstanceCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessInstanceCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessInstanceResult(data, context);
  const response: ModifyVerifiedAccessInstanceCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessInstanceCommandError
 */
const de_ModifyVerifiedAccessInstanceCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessInstanceCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessInstanceLoggingConfigurationCommand
 */
export const de_ModifyVerifiedAccessInstanceLoggingConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessInstanceLoggingConfigurationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessInstanceLoggingConfigurationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessInstanceLoggingConfigurationResult(data, context);
  const response: ModifyVerifiedAccessInstanceLoggingConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessInstanceLoggingConfigurationCommandError
 */
const de_ModifyVerifiedAccessInstanceLoggingConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessInstanceLoggingConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessTrustProviderCommand
 */
export const de_ModifyVerifiedAccessTrustProviderCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessTrustProviderCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVerifiedAccessTrustProviderCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVerifiedAccessTrustProviderResult(data, context);
  const response: ModifyVerifiedAccessTrustProviderCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessTrustProviderCommandError
 */
const de_ModifyVerifiedAccessTrustProviderCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVerifiedAccessTrustProviderCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVolumeCommand
 */
export const de_ModifyVolumeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVolumeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVolumeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVolumeResult(data, context);
  const response: ModifyVolumeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVolumeCommandError
 */
const de_ModifyVolumeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVolumeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVolumeAttributeCommand
 */
export const de_ModifyVolumeAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVolumeAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVolumeAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyVolumeAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVolumeAttributeCommandError
 */
const de_ModifyVolumeAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVolumeAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcAttributeCommand
 */
export const de_ModifyVpcAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ModifyVpcAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcAttributeCommandError
 */
const de_ModifyVpcAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcEndpointCommand
 */
export const de_ModifyVpcEndpointCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcEndpointCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcEndpointResult(data, context);
  const response: ModifyVpcEndpointCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointCommandError
 */
const de_ModifyVpcEndpointCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommand
 */
export const de_ModifyVpcEndpointConnectionNotificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointConnectionNotificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcEndpointConnectionNotificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcEndpointConnectionNotificationResult(data, context);
  const response: ModifyVpcEndpointConnectionNotificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointConnectionNotificationCommandError
 */
const de_ModifyVpcEndpointConnectionNotificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointConnectionNotificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommand
 */
export const de_ModifyVpcEndpointServiceConfigurationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServiceConfigurationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcEndpointServiceConfigurationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcEndpointServiceConfigurationResult(data, context);
  const response: ModifyVpcEndpointServiceConfigurationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServiceConfigurationCommandError
 */
const de_ModifyVpcEndpointServiceConfigurationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServiceConfigurationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommand
 */
export const de_ModifyVpcEndpointServicePayerResponsibilityCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServicePayerResponsibilityCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcEndpointServicePayerResponsibilityCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcEndpointServicePayerResponsibilityResult(data, context);
  const response: ModifyVpcEndpointServicePayerResponsibilityCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityCommandError
 */
const de_ModifyVpcEndpointServicePayerResponsibilityCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServicePayerResponsibilityCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommand
 */
export const de_ModifyVpcEndpointServicePermissionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServicePermissionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcEndpointServicePermissionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcEndpointServicePermissionsResult(data, context);
  const response: ModifyVpcEndpointServicePermissionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServicePermissionsCommandError
 */
const de_ModifyVpcEndpointServicePermissionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcEndpointServicePermissionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommand
 */
export const de_ModifyVpcPeeringConnectionOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcPeeringConnectionOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcPeeringConnectionOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcPeeringConnectionOptionsResult(data, context);
  const response: ModifyVpcPeeringConnectionOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcPeeringConnectionOptionsCommandError
 */
const de_ModifyVpcPeeringConnectionOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcPeeringConnectionOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpcTenancyCommand
 */
export const de_ModifyVpcTenancyCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcTenancyCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpcTenancyCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpcTenancyResult(data, context);
  const response: ModifyVpcTenancyCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpcTenancyCommandError
 */
const de_ModifyVpcTenancyCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpcTenancyCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpnConnectionCommand
 */
export const de_ModifyVpnConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpnConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpnConnectionResult(data, context);
  const response: ModifyVpnConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpnConnectionCommandError
 */
const de_ModifyVpnConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpnConnectionOptionsCommand
 */
export const de_ModifyVpnConnectionOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnConnectionOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpnConnectionOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpnConnectionOptionsResult(data, context);
  const response: ModifyVpnConnectionOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpnConnectionOptionsCommandError
 */
const de_ModifyVpnConnectionOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnConnectionOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpnTunnelCertificateCommand
 */
export const de_ModifyVpnTunnelCertificateCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnTunnelCertificateCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpnTunnelCertificateCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpnTunnelCertificateResult(data, context);
  const response: ModifyVpnTunnelCertificateCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpnTunnelCertificateCommandError
 */
const de_ModifyVpnTunnelCertificateCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnTunnelCertificateCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ModifyVpnTunnelOptionsCommand
 */
export const de_ModifyVpnTunnelOptionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnTunnelOptionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ModifyVpnTunnelOptionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ModifyVpnTunnelOptionsResult(data, context);
  const response: ModifyVpnTunnelOptionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ModifyVpnTunnelOptionsCommandError
 */
const de_ModifyVpnTunnelOptionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ModifyVpnTunnelOptionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2MonitorInstancesCommand
 */
export const de_MonitorInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MonitorInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_MonitorInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_MonitorInstancesResult(data, context);
  const response: MonitorInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2MonitorInstancesCommandError
 */
const de_MonitorInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MonitorInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2MoveAddressToVpcCommand
 */
export const de_MoveAddressToVpcCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MoveAddressToVpcCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_MoveAddressToVpcCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_MoveAddressToVpcResult(data, context);
  const response: MoveAddressToVpcCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2MoveAddressToVpcCommandError
 */
const de_MoveAddressToVpcCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MoveAddressToVpcCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2MoveByoipCidrToIpamCommand
 */
export const de_MoveByoipCidrToIpamCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MoveByoipCidrToIpamCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_MoveByoipCidrToIpamCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_MoveByoipCidrToIpamResult(data, context);
  const response: MoveByoipCidrToIpamCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2MoveByoipCidrToIpamCommandError
 */
const de_MoveByoipCidrToIpamCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<MoveByoipCidrToIpamCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ProvisionByoipCidrCommand
 */
export const de_ProvisionByoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionByoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ProvisionByoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ProvisionByoipCidrResult(data, context);
  const response: ProvisionByoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ProvisionByoipCidrCommandError
 */
const de_ProvisionByoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionByoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ProvisionIpamByoasnCommand
 */
export const de_ProvisionIpamByoasnCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionIpamByoasnCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ProvisionIpamByoasnCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ProvisionIpamByoasnResult(data, context);
  const response: ProvisionIpamByoasnCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ProvisionIpamByoasnCommandError
 */
const de_ProvisionIpamByoasnCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionIpamByoasnCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ProvisionIpamPoolCidrCommand
 */
export const de_ProvisionIpamPoolCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionIpamPoolCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ProvisionIpamPoolCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ProvisionIpamPoolCidrResult(data, context);
  const response: ProvisionIpamPoolCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ProvisionIpamPoolCidrCommandError
 */
const de_ProvisionIpamPoolCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionIpamPoolCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ProvisionPublicIpv4PoolCidrCommand
 */
export const de_ProvisionPublicIpv4PoolCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionPublicIpv4PoolCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ProvisionPublicIpv4PoolCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ProvisionPublicIpv4PoolCidrResult(data, context);
  const response: ProvisionPublicIpv4PoolCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ProvisionPublicIpv4PoolCidrCommandError
 */
const de_ProvisionPublicIpv4PoolCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ProvisionPublicIpv4PoolCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2PurchaseCapacityBlockCommand
 */
export const de_PurchaseCapacityBlockCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseCapacityBlockCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_PurchaseCapacityBlockCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_PurchaseCapacityBlockResult(data, context);
  const response: PurchaseCapacityBlockCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2PurchaseCapacityBlockCommandError
 */
const de_PurchaseCapacityBlockCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseCapacityBlockCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2PurchaseHostReservationCommand
 */
export const de_PurchaseHostReservationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseHostReservationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_PurchaseHostReservationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_PurchaseHostReservationResult(data, context);
  const response: PurchaseHostReservationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2PurchaseHostReservationCommandError
 */
const de_PurchaseHostReservationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseHostReservationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2PurchaseReservedInstancesOfferingCommand
 */
export const de_PurchaseReservedInstancesOfferingCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseReservedInstancesOfferingCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_PurchaseReservedInstancesOfferingCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_PurchaseReservedInstancesOfferingResult(data, context);
  const response: PurchaseReservedInstancesOfferingCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2PurchaseReservedInstancesOfferingCommandError
 */
const de_PurchaseReservedInstancesOfferingCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseReservedInstancesOfferingCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2PurchaseScheduledInstancesCommand
 */
export const de_PurchaseScheduledInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseScheduledInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_PurchaseScheduledInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_PurchaseScheduledInstancesResult(data, context);
  const response: PurchaseScheduledInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2PurchaseScheduledInstancesCommandError
 */
const de_PurchaseScheduledInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<PurchaseScheduledInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RebootInstancesCommand
 */
export const de_RebootInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RebootInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RebootInstancesCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: RebootInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2RebootInstancesCommandError
 */
const de_RebootInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RebootInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RegisterImageCommand
 */
export const de_RegisterImageCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterImageCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RegisterImageCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RegisterImageResult(data, context);
  const response: RegisterImageCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RegisterImageCommandError
 */
const de_RegisterImageCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterImageCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommand
 */
export const de_RegisterInstanceEventNotificationAttributesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterInstanceEventNotificationAttributesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RegisterInstanceEventNotificationAttributesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RegisterInstanceEventNotificationAttributesResult(data, context);
  const response: RegisterInstanceEventNotificationAttributesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RegisterInstanceEventNotificationAttributesCommandError
 */
const de_RegisterInstanceEventNotificationAttributesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterInstanceEventNotificationAttributesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommand
 */
export const de_RegisterTransitGatewayMulticastGroupMembersCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterTransitGatewayMulticastGroupMembersCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RegisterTransitGatewayMulticastGroupMembersCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RegisterTransitGatewayMulticastGroupMembersResult(data, context);
  const response: RegisterTransitGatewayMulticastGroupMembersCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersCommandError
 */
const de_RegisterTransitGatewayMulticastGroupMembersCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterTransitGatewayMulticastGroupMembersCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommand
 */
export const de_RegisterTransitGatewayMulticastGroupSourcesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterTransitGatewayMulticastGroupSourcesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RegisterTransitGatewayMulticastGroupSourcesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RegisterTransitGatewayMulticastGroupSourcesResult(data, context);
  const response: RegisterTransitGatewayMulticastGroupSourcesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesCommandError
 */
const de_RegisterTransitGatewayMulticastGroupSourcesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RegisterTransitGatewayMulticastGroupSourcesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommand
 */
export const de_RejectTransitGatewayMulticastDomainAssociationsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RejectTransitGatewayMulticastDomainAssociationsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RejectTransitGatewayMulticastDomainAssociationsResult(data, context);
  const response: RejectTransitGatewayMulticastDomainAssociationsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsCommandError
 */
const de_RejectTransitGatewayMulticastDomainAssociationsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayMulticastDomainAssociationsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommand
 */
export const de_RejectTransitGatewayPeeringAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayPeeringAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RejectTransitGatewayPeeringAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RejectTransitGatewayPeeringAttachmentResult(data, context);
  const response: RejectTransitGatewayPeeringAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RejectTransitGatewayPeeringAttachmentCommandError
 */
const de_RejectTransitGatewayPeeringAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayPeeringAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommand
 */
export const de_RejectTransitGatewayVpcAttachmentCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayVpcAttachmentCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RejectTransitGatewayVpcAttachmentCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RejectTransitGatewayVpcAttachmentResult(data, context);
  const response: RejectTransitGatewayVpcAttachmentCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RejectTransitGatewayVpcAttachmentCommandError
 */
const de_RejectTransitGatewayVpcAttachmentCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectTransitGatewayVpcAttachmentCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RejectVpcEndpointConnectionsCommand
 */
export const de_RejectVpcEndpointConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectVpcEndpointConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RejectVpcEndpointConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RejectVpcEndpointConnectionsResult(data, context);
  const response: RejectVpcEndpointConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RejectVpcEndpointConnectionsCommandError
 */
const de_RejectVpcEndpointConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectVpcEndpointConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RejectVpcPeeringConnectionCommand
 */
export const de_RejectVpcPeeringConnectionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectVpcPeeringConnectionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RejectVpcPeeringConnectionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RejectVpcPeeringConnectionResult(data, context);
  const response: RejectVpcPeeringConnectionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RejectVpcPeeringConnectionCommandError
 */
const de_RejectVpcPeeringConnectionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RejectVpcPeeringConnectionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReleaseAddressCommand
 */
export const de_ReleaseAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReleaseAddressCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ReleaseAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ReleaseAddressCommandError
 */
const de_ReleaseAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReleaseHostsCommand
 */
export const de_ReleaseHostsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseHostsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReleaseHostsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReleaseHostsResult(data, context);
  const response: ReleaseHostsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReleaseHostsCommandError
 */
const de_ReleaseHostsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseHostsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReleaseIpamPoolAllocationCommand
 */
export const de_ReleaseIpamPoolAllocationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseIpamPoolAllocationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReleaseIpamPoolAllocationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReleaseIpamPoolAllocationResult(data, context);
  const response: ReleaseIpamPoolAllocationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReleaseIpamPoolAllocationCommandError
 */
const de_ReleaseIpamPoolAllocationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReleaseIpamPoolAllocationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommand
 */
export const de_ReplaceIamInstanceProfileAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceIamInstanceProfileAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceIamInstanceProfileAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReplaceIamInstanceProfileAssociationResult(data, context);
  const response: ReplaceIamInstanceProfileAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceIamInstanceProfileAssociationCommandError
 */
const de_ReplaceIamInstanceProfileAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceIamInstanceProfileAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceNetworkAclAssociationCommand
 */
export const de_ReplaceNetworkAclAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceNetworkAclAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceNetworkAclAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReplaceNetworkAclAssociationResult(data, context);
  const response: ReplaceNetworkAclAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceNetworkAclAssociationCommandError
 */
const de_ReplaceNetworkAclAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceNetworkAclAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceNetworkAclEntryCommand
 */
export const de_ReplaceNetworkAclEntryCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceNetworkAclEntryCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceNetworkAclEntryCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ReplaceNetworkAclEntryCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceNetworkAclEntryCommandError
 */
const de_ReplaceNetworkAclEntryCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceNetworkAclEntryCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceRouteCommand
 */
export const de_ReplaceRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceRouteCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ReplaceRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceRouteCommandError
 */
const de_ReplaceRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceRouteTableAssociationCommand
 */
export const de_ReplaceRouteTableAssociationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceRouteTableAssociationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceRouteTableAssociationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReplaceRouteTableAssociationResult(data, context);
  const response: ReplaceRouteTableAssociationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceRouteTableAssociationCommandError
 */
const de_ReplaceRouteTableAssociationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceRouteTableAssociationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceTransitGatewayRouteCommand
 */
export const de_ReplaceTransitGatewayRouteCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceTransitGatewayRouteCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceTransitGatewayRouteCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReplaceTransitGatewayRouteResult(data, context);
  const response: ReplaceTransitGatewayRouteCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceTransitGatewayRouteCommandError
 */
const de_ReplaceTransitGatewayRouteCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceTransitGatewayRouteCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReplaceVpnTunnelCommand
 */
export const de_ReplaceVpnTunnelCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceVpnTunnelCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReplaceVpnTunnelCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ReplaceVpnTunnelResult(data, context);
  const response: ReplaceVpnTunnelCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ReplaceVpnTunnelCommandError
 */
const de_ReplaceVpnTunnelCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReplaceVpnTunnelCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ReportInstanceStatusCommand
 */
export const de_ReportInstanceStatusCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReportInstanceStatusCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ReportInstanceStatusCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ReportInstanceStatusCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ReportInstanceStatusCommandError
 */
const de_ReportInstanceStatusCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ReportInstanceStatusCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RequestSpotFleetCommand
 */
export const de_RequestSpotFleetCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RequestSpotFleetCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RequestSpotFleetCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RequestSpotFleetResponse(data, context);
  const response: RequestSpotFleetCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RequestSpotFleetCommandError
 */
const de_RequestSpotFleetCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RequestSpotFleetCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RequestSpotInstancesCommand
 */
export const de_RequestSpotInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RequestSpotInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RequestSpotInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RequestSpotInstancesResult(data, context);
  const response: RequestSpotInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RequestSpotInstancesCommandError
 */
const de_RequestSpotInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RequestSpotInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetAddressAttributeCommand
 */
export const de_ResetAddressAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetAddressAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetAddressAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ResetAddressAttributeResult(data, context);
  const response: ResetAddressAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ResetAddressAttributeCommandError
 */
const de_ResetAddressAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetAddressAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommand
 */
export const de_ResetEbsDefaultKmsKeyIdCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetEbsDefaultKmsKeyIdCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetEbsDefaultKmsKeyIdCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ResetEbsDefaultKmsKeyIdResult(data, context);
  const response: ResetEbsDefaultKmsKeyIdCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ResetEbsDefaultKmsKeyIdCommandError
 */
const de_ResetEbsDefaultKmsKeyIdCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetEbsDefaultKmsKeyIdCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetFpgaImageAttributeCommand
 */
export const de_ResetFpgaImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetFpgaImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetFpgaImageAttributeCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_ResetFpgaImageAttributeResult(data, context);
  const response: ResetFpgaImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2ResetFpgaImageAttributeCommandError
 */
const de_ResetFpgaImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetFpgaImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetImageAttributeCommand
 */
export const de_ResetImageAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetImageAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetImageAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ResetImageAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ResetImageAttributeCommandError
 */
const de_ResetImageAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetImageAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetInstanceAttributeCommand
 */
export const de_ResetInstanceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetInstanceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetInstanceAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ResetInstanceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ResetInstanceAttributeCommandError
 */
const de_ResetInstanceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetInstanceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetNetworkInterfaceAttributeCommand
 */
export const de_ResetNetworkInterfaceAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetNetworkInterfaceAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetNetworkInterfaceAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ResetNetworkInterfaceAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ResetNetworkInterfaceAttributeCommandError
 */
const de_ResetNetworkInterfaceAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetNetworkInterfaceAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2ResetSnapshotAttributeCommand
 */
export const de_ResetSnapshotAttributeCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetSnapshotAttributeCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_ResetSnapshotAttributeCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: ResetSnapshotAttributeCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2ResetSnapshotAttributeCommandError
 */
const de_ResetSnapshotAttributeCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<ResetSnapshotAttributeCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RestoreAddressToClassicCommand
 */
export const de_RestoreAddressToClassicCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreAddressToClassicCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RestoreAddressToClassicCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RestoreAddressToClassicResult(data, context);
  const response: RestoreAddressToClassicCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RestoreAddressToClassicCommandError
 */
const de_RestoreAddressToClassicCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreAddressToClassicCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RestoreImageFromRecycleBinCommand
 */
export const de_RestoreImageFromRecycleBinCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreImageFromRecycleBinCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RestoreImageFromRecycleBinCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RestoreImageFromRecycleBinResult(data, context);
  const response: RestoreImageFromRecycleBinCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RestoreImageFromRecycleBinCommandError
 */
const de_RestoreImageFromRecycleBinCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreImageFromRecycleBinCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RestoreManagedPrefixListVersionCommand
 */
export const de_RestoreManagedPrefixListVersionCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreManagedPrefixListVersionCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RestoreManagedPrefixListVersionCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RestoreManagedPrefixListVersionResult(data, context);
  const response: RestoreManagedPrefixListVersionCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RestoreManagedPrefixListVersionCommandError
 */
const de_RestoreManagedPrefixListVersionCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreManagedPrefixListVersionCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RestoreSnapshotFromRecycleBinCommand
 */
export const de_RestoreSnapshotFromRecycleBinCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreSnapshotFromRecycleBinCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RestoreSnapshotFromRecycleBinCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RestoreSnapshotFromRecycleBinResult(data, context);
  const response: RestoreSnapshotFromRecycleBinCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RestoreSnapshotFromRecycleBinCommandError
 */
const de_RestoreSnapshotFromRecycleBinCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreSnapshotFromRecycleBinCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RestoreSnapshotTierCommand
 */
export const de_RestoreSnapshotTierCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreSnapshotTierCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RestoreSnapshotTierCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RestoreSnapshotTierResult(data, context);
  const response: RestoreSnapshotTierCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RestoreSnapshotTierCommandError
 */
const de_RestoreSnapshotTierCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RestoreSnapshotTierCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RevokeClientVpnIngressCommand
 */
export const de_RevokeClientVpnIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeClientVpnIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RevokeClientVpnIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RevokeClientVpnIngressResult(data, context);
  const response: RevokeClientVpnIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RevokeClientVpnIngressCommandError
 */
const de_RevokeClientVpnIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeClientVpnIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RevokeSecurityGroupEgressCommand
 */
export const de_RevokeSecurityGroupEgressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeSecurityGroupEgressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RevokeSecurityGroupEgressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RevokeSecurityGroupEgressResult(data, context);
  const response: RevokeSecurityGroupEgressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RevokeSecurityGroupEgressCommandError
 */
const de_RevokeSecurityGroupEgressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeSecurityGroupEgressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RevokeSecurityGroupIngressCommand
 */
export const de_RevokeSecurityGroupIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeSecurityGroupIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RevokeSecurityGroupIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RevokeSecurityGroupIngressResult(data, context);
  const response: RevokeSecurityGroupIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RevokeSecurityGroupIngressCommandError
 */
const de_RevokeSecurityGroupIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RevokeSecurityGroupIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RunInstancesCommand
 */
export const de_RunInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RunInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RunInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_Reservation(data, context);
  const response: RunInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RunInstancesCommandError
 */
const de_RunInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RunInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2RunScheduledInstancesCommand
 */
export const de_RunScheduledInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RunScheduledInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_RunScheduledInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_RunScheduledInstancesResult(data, context);
  const response: RunScheduledInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2RunScheduledInstancesCommandError
 */
const de_RunScheduledInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<RunScheduledInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2SearchLocalGatewayRoutesCommand
 */
export const de_SearchLocalGatewayRoutesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchLocalGatewayRoutesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_SearchLocalGatewayRoutesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_SearchLocalGatewayRoutesResult(data, context);
  const response: SearchLocalGatewayRoutesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2SearchLocalGatewayRoutesCommandError
 */
const de_SearchLocalGatewayRoutesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchLocalGatewayRoutesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommand
 */
export const de_SearchTransitGatewayMulticastGroupsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchTransitGatewayMulticastGroupsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_SearchTransitGatewayMulticastGroupsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_SearchTransitGatewayMulticastGroupsResult(data, context);
  const response: SearchTransitGatewayMulticastGroupsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2SearchTransitGatewayMulticastGroupsCommandError
 */
const de_SearchTransitGatewayMulticastGroupsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchTransitGatewayMulticastGroupsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2SearchTransitGatewayRoutesCommand
 */
export const de_SearchTransitGatewayRoutesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchTransitGatewayRoutesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_SearchTransitGatewayRoutesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_SearchTransitGatewayRoutesResult(data, context);
  const response: SearchTransitGatewayRoutesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2SearchTransitGatewayRoutesCommandError
 */
const de_SearchTransitGatewayRoutesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SearchTransitGatewayRoutesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2SendDiagnosticInterruptCommand
 */
export const de_SendDiagnosticInterruptCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SendDiagnosticInterruptCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_SendDiagnosticInterruptCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: SendDiagnosticInterruptCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2SendDiagnosticInterruptCommandError
 */
const de_SendDiagnosticInterruptCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<SendDiagnosticInterruptCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2StartInstancesCommand
 */
export const de_StartInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_StartInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_StartInstancesResult(data, context);
  const response: StartInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2StartInstancesCommandError
 */
const de_StartInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommand
 */
export const de_StartNetworkInsightsAccessScopeAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartNetworkInsightsAccessScopeAnalysisCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_StartNetworkInsightsAccessScopeAnalysisCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_StartNetworkInsightsAccessScopeAnalysisResult(data, context);
  const response: StartNetworkInsightsAccessScopeAnalysisCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisCommandError
 */
const de_StartNetworkInsightsAccessScopeAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartNetworkInsightsAccessScopeAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2StartNetworkInsightsAnalysisCommand
 */
export const de_StartNetworkInsightsAnalysisCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartNetworkInsightsAnalysisCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_StartNetworkInsightsAnalysisCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_StartNetworkInsightsAnalysisResult(data, context);
  const response: StartNetworkInsightsAnalysisCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2StartNetworkInsightsAnalysisCommandError
 */
const de_StartNetworkInsightsAnalysisCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartNetworkInsightsAnalysisCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommand
 */
export const de_StartVpcEndpointServicePrivateDnsVerificationCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartVpcEndpointServicePrivateDnsVerificationCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_StartVpcEndpointServicePrivateDnsVerificationCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_StartVpcEndpointServicePrivateDnsVerificationResult(data, context);
  const response: StartVpcEndpointServicePrivateDnsVerificationCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationCommandError
 */
const de_StartVpcEndpointServicePrivateDnsVerificationCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StartVpcEndpointServicePrivateDnsVerificationCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2StopInstancesCommand
 */
export const de_StopInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_StopInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_StopInstancesResult(data, context);
  const response: StopInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2StopInstancesCommandError
 */
const de_StopInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<StopInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2TerminateClientVpnConnectionsCommand
 */
export const de_TerminateClientVpnConnectionsCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TerminateClientVpnConnectionsCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_TerminateClientVpnConnectionsCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_TerminateClientVpnConnectionsResult(data, context);
  const response: TerminateClientVpnConnectionsCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2TerminateClientVpnConnectionsCommandError
 */
const de_TerminateClientVpnConnectionsCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TerminateClientVpnConnectionsCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2TerminateInstancesCommand
 */
export const de_TerminateInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TerminateInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_TerminateInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_TerminateInstancesResult(data, context);
  const response: TerminateInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2TerminateInstancesCommandError
 */
const de_TerminateInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<TerminateInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2UnassignIpv6AddressesCommand
 */
export const de_UnassignIpv6AddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignIpv6AddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_UnassignIpv6AddressesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_UnassignIpv6AddressesResult(data, context);
  const response: UnassignIpv6AddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2UnassignIpv6AddressesCommandError
 */
const de_UnassignIpv6AddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignIpv6AddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2UnassignPrivateIpAddressesCommand
 */
export const de_UnassignPrivateIpAddressesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignPrivateIpAddressesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_UnassignPrivateIpAddressesCommandError(output, context);
  }
  await collectBody(output.body, context);
  const response: UnassignPrivateIpAddressesCommandOutput = {
    $metadata: deserializeMetadata(output),
  };
  return response;
};

/**
 * deserializeAws_ec2UnassignPrivateIpAddressesCommandError
 */
const de_UnassignPrivateIpAddressesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignPrivateIpAddressesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2UnassignPrivateNatGatewayAddressCommand
 */
export const de_UnassignPrivateNatGatewayAddressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignPrivateNatGatewayAddressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_UnassignPrivateNatGatewayAddressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_UnassignPrivateNatGatewayAddressResult(data, context);
  const response: UnassignPrivateNatGatewayAddressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2UnassignPrivateNatGatewayAddressCommandError
 */
const de_UnassignPrivateNatGatewayAddressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnassignPrivateNatGatewayAddressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2UnlockSnapshotCommand
 */
export const de_UnlockSnapshotCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnlockSnapshotCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_UnlockSnapshotCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_UnlockSnapshotResult(data, context);
  const response: UnlockSnapshotCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2UnlockSnapshotCommandError
 */
const de_UnlockSnapshotCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnlockSnapshotCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2UnmonitorInstancesCommand
 */
export const de_UnmonitorInstancesCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnmonitorInstancesCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_UnmonitorInstancesCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_UnmonitorInstancesResult(data, context);
  const response: UnmonitorInstancesCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2UnmonitorInstancesCommandError
 */
const de_UnmonitorInstancesCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UnmonitorInstancesCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommand
 */
export const de_UpdateSecurityGroupRuleDescriptionsEgressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityGroupRuleDescriptionsEgressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_UpdateSecurityGroupRuleDescriptionsEgressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_UpdateSecurityGroupRuleDescriptionsEgressResult(data, context);
  const response: UpdateSecurityGroupRuleDescriptionsEgressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressCommandError
 */
const de_UpdateSecurityGroupRuleDescriptionsEgressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityGroupRuleDescriptionsEgressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommand
 */
export const de_UpdateSecurityGroupRuleDescriptionsIngressCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityGroupRuleDescriptionsIngressCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_UpdateSecurityGroupRuleDescriptionsIngressCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_UpdateSecurityGroupRuleDescriptionsIngressResult(data, context);
  const response: UpdateSecurityGroupRuleDescriptionsIngressCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressCommandError
 */
const de_UpdateSecurityGroupRuleDescriptionsIngressCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<UpdateSecurityGroupRuleDescriptionsIngressCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * deserializeAws_ec2WithdrawByoipCidrCommand
 */
export const de_WithdrawByoipCidrCommand = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<WithdrawByoipCidrCommandOutput> => {
  if (output.statusCode >= 300) {
    return de_WithdrawByoipCidrCommandError(output, context);
  }
  const data: any = await parseBody(output.body, context);
  let contents: any = {};
  contents = de_WithdrawByoipCidrResult(data, context);
  const response: WithdrawByoipCidrCommandOutput = {
    $metadata: deserializeMetadata(output),
    ...contents,
  };
  return response;
};

/**
 * deserializeAws_ec2WithdrawByoipCidrCommandError
 */
const de_WithdrawByoipCidrCommandError = async (
  output: __HttpResponse,
  context: __SerdeContext
): Promise<WithdrawByoipCidrCommandOutput> => {
  const parsedOutput: any = {
    ...output,
    body: await parseErrorBody(output.body, context),
  };
  const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
  const parsedBody = parsedOutput.body;
  return throwDefaultError({
    output,
    parsedBody: parsedBody.Errors.Error,
    errorCode,
  });
};

/**
 * serializeAws_ec2AcceleratorCount
 */
const se_AcceleratorCount = (input: AcceleratorCount, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};

/**
 * serializeAws_ec2AcceleratorCountRequest
 */
const se_AcceleratorCountRequest = (input: AcceleratorCountRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};

/**
 * serializeAws_ec2AcceleratorManufacturerSet
 */
const se_AcceleratorManufacturerSet = (input: AcceleratorManufacturer[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceleratorNameSet
 */
const se_AcceleratorNameSet = (input: AcceleratorName[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceleratorTotalMemoryMiB
 */
const se_AcceleratorTotalMemoryMiB = (input: AcceleratorTotalMemoryMiB, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};

/**
 * serializeAws_ec2AcceleratorTotalMemoryMiBRequest
 */
const se_AcceleratorTotalMemoryMiBRequest = (input: AcceleratorTotalMemoryMiBRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};

/**
 * serializeAws_ec2AcceleratorTypeSet
 */
const se_AcceleratorTypeSet = (input: AcceleratorType[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptAddressTransferRequest
 */
const se_AcceptAddressTransferRequest = (input: AcceptAddressTransferRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Ad] != null) {
    entries[_Ad] = input[_Ad];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptReservedInstancesExchangeQuoteRequest
 */
const se_AcceptReservedInstancesExchangeQuoteRequest = (
  input: AcceptReservedInstancesExchangeQuoteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RII] != null) {
    const memberEntries = se_ReservedInstanceIdSet(input[_RII], context);
    if (input[_RII]?.length === 0) {
      entries.ReservedInstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TC] != null) {
    const memberEntries = se_TargetConfigurationRequestSet(input[_TC], context);
    if (input[_TC]?.length === 0) {
      entries.TargetConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsRequest
 */
const se_AcceptTransitGatewayMulticastDomainAssociationsRequest = (
  input: AcceptTransitGatewayMulticastDomainAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_ValueStringList(input[_SIu], context);
    if (input[_SIu]?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptTransitGatewayPeeringAttachmentRequest
 */
const se_AcceptTransitGatewayPeeringAttachmentRequest = (
  input: AcceptTransitGatewayPeeringAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptTransitGatewayVpcAttachmentRequest
 */
const se_AcceptTransitGatewayVpcAttachmentRequest = (
  input: AcceptTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptVpcEndpointConnectionsRequest
 */
const se_AcceptVpcEndpointConnectionsRequest = (
  input: AcceptVpcEndpointConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_VEI] != null) {
    const memberEntries = se_VpcEndpointIdList(input[_VEI], context);
    if (input[_VEI]?.length === 0) {
      entries.VpcEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AcceptVpcPeeringConnectionRequest
 */
const se_AcceptVpcPeeringConnectionRequest = (
  input: AcceptVpcPeeringConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  return entries;
};

/**
 * serializeAws_ec2AccessScopePathListRequest
 */
const se_AccessScopePathListRequest = (input: AccessScopePathRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_AccessScopePathRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AccessScopePathRequest
 */
const se_AccessScopePathRequest = (input: AccessScopePathRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_S] != null) {
    const memberEntries = se_PathStatementRequest(input[_S], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Source.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_D] != null) {
    const memberEntries = se_PathStatementRequest(input[_D], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Destination.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TR] != null) {
    const memberEntries = se_ThroughResourcesStatementRequestList(input[_TR], context);
    if (input[_TR]?.length === 0) {
      entries.ThroughResource = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ThroughResource.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AccountAttributeNameStringList
 */
const se_AccountAttributeNameStringList = (input: AccountAttributeName[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AttributeName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AddIpamOperatingRegion
 */
const se_AddIpamOperatingRegion = (input: AddIpamOperatingRegion, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  return entries;
};

/**
 * serializeAws_ec2AddIpamOperatingRegionSet
 */
const se_AddIpamOperatingRegionSet = (input: AddIpamOperatingRegion[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_AddIpamOperatingRegion(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AddPrefixListEntries
 */
const se_AddPrefixListEntries = (input: AddPrefixListEntry[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_AddPrefixListEntry(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AddPrefixListEntry
 */
const se_AddPrefixListEntry = (input: AddPrefixListEntry, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  return entries;
};

/**
 * serializeAws_ec2AdvertiseByoipCidrRequest
 */
const se_AdvertiseByoipCidrRequest = (input: AdvertiseByoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_As] != null) {
    entries[_As] = input[_As];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AllocateAddressRequest
 */
const se_AllocateAddressRequest = (input: AllocateAddressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Do] != null) {
    entries[_Do] = input[_Do];
  }
  if (input[_Ad] != null) {
    entries[_Ad] = input[_Ad];
  }
  if (input[_PIP] != null) {
    entries[_PIP] = input[_PIP];
  }
  if (input[_NBG] != null) {
    entries[_NBG] = input[_NBG];
  }
  if (input[_COIP] != null) {
    entries[_COIP] = input[_COIP];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AllocateHostsRequest
 */
const se_AllocateHostsRequest = (input: AllocateHostsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AP] != null) {
    entries[_AP] = input[_AP];
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_IF] != null) {
    entries[_IF] = input[_IF];
  }
  if (input[_Q] != null) {
    entries[_Q] = input[_Q];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_HR] != null) {
    entries[_HR] = input[_HR];
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_HM] != null) {
    entries[_HM] = input[_HM];
  }
  if (input[_AI] != null) {
    const memberEntries = se_AssetIdList(input[_AI], context);
    if (input[_AI]?.length === 0) {
      entries.AssetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AllocateIpamPoolCidrRequest
 */
const se_AllocateIpamPoolCidrRequest = (input: AllocateIpamPoolCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_NL] != null) {
    entries[_NL] = input[_NL];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_PNC] != null) {
    entries[_PNC] = input[_PNC];
  }
  if (input[_AC] != null) {
    const memberEntries = se_IpamPoolAllocationAllowedCidrs(input[_AC], context);
    if (input[_AC]?.length === 0) {
      entries.AllowedCidr = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllowedCidr.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DC] != null) {
    const memberEntries = se_IpamPoolAllocationDisallowedCidrs(input[_DC], context);
    if (input[_DC]?.length === 0) {
      entries.DisallowedCidr = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisallowedCidr.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AllocationIdList
 */
const se_AllocationIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AllocationId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AllocationIds
 */
const se_AllocationIds = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AllowedInstanceTypeSet
 */
const se_AllowedInstanceTypeSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkRequest
 */
const se_ApplySecurityGroupsToClientVpnTargetNetworkRequest = (
  input: ApplySecurityGroupsToClientVpnTargetNetworkRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_ClientVpnSecurityGroupIdSet(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ArchitectureTypeSet
 */
const se_ArchitectureTypeSet = (input: ArchitectureType[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ArnList
 */
const se_ArnList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AsnAuthorizationContext
 */
const se_AsnAuthorizationContext = (input: AsnAuthorizationContext, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Me] != null) {
    entries[_Me] = input[_Me];
  }
  if (input[_Si] != null) {
    entries[_Si] = input[_Si];
  }
  return entries;
};

/**
 * serializeAws_ec2AssetIdList
 */
const se_AssetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AssignIpv6AddressesRequest
 */
const se_AssignIpv6AddressesRequest = (input: AssignIpv6AddressesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IAC] != null) {
    entries[_IAC] = input[_IAC];
  }
  if (input[_IA] != null) {
    const memberEntries = se_Ipv6AddressList(input[_IA], context);
    if (input[_IA]?.length === 0) {
      entries.Ipv6Addresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPC] != null) {
    entries[_IPC] = input[_IPC];
  }
  if (input[_IP] != null) {
    const memberEntries = se_IpPrefixList(input[_IP], context);
    if (input[_IP]?.length === 0) {
      entries.Ipv6Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  return entries;
};

/**
 * serializeAws_ec2AssignPrivateIpAddressesRequest
 */
const se_AssignPrivateIpAddressesRequest = (input: AssignPrivateIpAddressesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AR] != null) {
    entries[_AR] = input[_AR];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_PIA] != null) {
    const memberEntries = se_PrivateIpAddressStringList(input[_PIA], context);
    if (input[_PIA]?.length === 0) {
      entries.PrivateIpAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIAC] != null) {
    entries[_SPIAC] = input[_SPIAC];
  }
  if (input[_IPp] != null) {
    const memberEntries = se_IpPrefixList(input[_IPp], context);
    if (input[_IPp]?.length === 0) {
      entries.Ipv4Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPCp] != null) {
    entries[_IPCp] = input[_IPCp];
  }
  return entries;
};

/**
 * serializeAws_ec2AssignPrivateNatGatewayAddressRequest
 */
const se_AssignPrivateNatGatewayAddressRequest = (
  input: AssignPrivateNatGatewayAddressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_PIA] != null) {
    const memberEntries = se_IpList(input[_PIA], context);
    if (input[_PIA]?.length === 0) {
      entries.PrivateIpAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIAC] != null) {
    entries[_PIAC] = input[_PIAC];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateAddressRequest
 */
const se_AssociateAddressRequest = (input: AssociateAddressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_PI] != null) {
    entries[_PI] = input[_PI];
  }
  if (input[_ARl] != null) {
    entries[_ARl] = input[_ARl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateClientVpnTargetNetworkRequest
 */
const se_AssociateClientVpnTargetNetworkRequest = (
  input: AssociateClientVpnTargetNetworkRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateDhcpOptionsRequest
 */
const se_AssociateDhcpOptionsRequest = (input: AssociateDhcpOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DOI] != null) {
    entries[_DOI] = input[_DOI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateEnclaveCertificateIamRoleRequest
 */
const se_AssociateEnclaveCertificateIamRoleRequest = (
  input: AssociateEnclaveCertificateIamRoleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CA] != null) {
    entries[_CA] = input[_CA];
  }
  if (input[_RAo] != null) {
    entries[_RAo] = input[_RAo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateIamInstanceProfileRequest
 */
const se_AssociateIamInstanceProfileRequest = (
  input: AssociateIamInstanceProfileRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IIP] != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateInstanceEventWindowRequest
 */
const se_AssociateInstanceEventWindowRequest = (
  input: AssociateInstanceEventWindowRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IEWI] != null) {
    entries[_IEWI] = input[_IEWI];
  }
  if (input[_AT] != null) {
    const memberEntries = se_InstanceEventWindowAssociationRequest(input[_AT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateIpamByoasnRequest
 */
const se_AssociateIpamByoasnRequest = (input: AssociateIpamByoasnRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_As] != null) {
    entries[_As] = input[_As];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateIpamResourceDiscoveryRequest
 */
const se_AssociateIpamResourceDiscoveryRequest = (
  input: AssociateIpamResourceDiscoveryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIp] != null) {
    entries[_IIp] = input[_IIp];
  }
  if (input[_IRDI] != null) {
    entries[_IRDI] = input[_IRDI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateNatGatewayAddressRequest
 */
const se_AssociateNatGatewayAddressRequest = (
  input: AssociateNatGatewayAddressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_AIll] != null) {
    const memberEntries = se_AllocationIdList(input[_AIll], context);
    if (input[_AIll]?.length === 0) {
      entries.AllocationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIA] != null) {
    const memberEntries = se_IpList(input[_PIA], context);
    if (input[_PIA]?.length === 0) {
      entries.PrivateIpAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateRouteTableRequest
 */
const se_AssociateRouteTableRequest = (input: AssociateRouteTableRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_GI] != null) {
    entries[_GI] = input[_GI];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateSubnetCidrBlockRequest
 */
const se_AssociateSubnetCidrBlockRequest = (input: AssociateSubnetCidrBlockRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ICB] != null) {
    entries[_ICB] = input[_ICB];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_IIPI] != null) {
    entries[_IIPI] = input[_IIPI];
  }
  if (input[_INL] != null) {
    entries[_INL] = input[_INL];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateTransitGatewayMulticastDomainRequest
 */
const se_AssociateTransitGatewayMulticastDomainRequest = (
  input: AssociateTransitGatewayMulticastDomainRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input[_SIu], context);
    if (input[_SIu]?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateTransitGatewayPolicyTableRequest
 */
const se_AssociateTransitGatewayPolicyTableRequest = (
  input: AssociateTransitGatewayPolicyTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGPTI] != null) {
    entries[_TGPTI] = input[_TGPTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateTransitGatewayRouteTableRequest
 */
const se_AssociateTransitGatewayRouteTableRequest = (
  input: AssociateTransitGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateTrunkInterfaceRequest
 */
const se_AssociateTrunkInterfaceRequest = (input: AssociateTrunkInterfaceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_BII] != null) {
    entries[_BII] = input[_BII];
  }
  if (input[_TII] != null) {
    entries[_TII] = input[_TII];
  }
  if (input[_VIl] != null) {
    entries[_VIl] = input[_VIl];
  }
  if (input[_GK] != null) {
    entries[_GK] = input[_GK];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociateVpcCidrBlockRequest
 */
const se_AssociateVpcCidrBlockRequest = (input: AssociateVpcCidrBlockRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_APICB] != null) {
    entries[_APICB] = input[_APICB];
  }
  if (input[_CB] != null) {
    entries[_CB] = input[_CB];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_ICBNBG] != null) {
    entries[_ICBNBG] = input[_ICBNBG];
  }
  if (input[_IPpv] != null) {
    entries[_IPpv] = input[_IPpv];
  }
  if (input[_ICB] != null) {
    entries[_ICB] = input[_ICB];
  }
  if (input[_IIPIp] != null) {
    entries[_IIPIp] = input[_IIPIp];
  }
  if (input[_INLp] != null) {
    entries[_INLp] = input[_INLp];
  }
  if (input[_IIPI] != null) {
    entries[_IIPI] = input[_IIPI];
  }
  if (input[_INL] != null) {
    entries[_INL] = input[_INL];
  }
  return entries;
};

/**
 * serializeAws_ec2AssociationIdList
 */
const se_AssociationIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AssociationId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AthenaIntegration
 */
const se_AthenaIntegration = (input: AthenaIntegration, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IRSDA] != null) {
    entries[_IRSDA] = input[_IRSDA];
  }
  if (input[_PLF] != null) {
    entries[_PLF] = input[_PLF];
  }
  if (input[_PSD] != null) {
    entries[_PSD] = input[_PSD].toISOString().split(".")[0] + "Z";
  }
  if (input[_PED] != null) {
    entries[_PED] = input[_PED].toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2AthenaIntegrationsSet
 */
const se_AthenaIntegrationsSet = (input: AthenaIntegration[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_AthenaIntegration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2AttachClassicLinkVpcRequest
 */
const se_AttachClassicLinkVpcRequest = (input: AttachClassicLinkVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_G] != null) {
    const memberEntries = se_GroupIdStringList(input[_G], context);
    if (input[_G]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};

/**
 * serializeAws_ec2AttachInternetGatewayRequest
 */
const se_AttachInternetGatewayRequest = (input: AttachInternetGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IGI] != null) {
    entries[_IGI] = input[_IGI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};

/**
 * serializeAws_ec2AttachNetworkInterfaceRequest
 */
const se_AttachNetworkInterfaceRequest = (input: AttachNetworkInterfaceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DIev] != null) {
    entries[_DIev] = input[_DIev];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_NCI] != null) {
    entries[_NCI] = input[_NCI];
  }
  if (input[_ESS] != null) {
    const memberEntries = se_EnaSrdSpecification(input[_ESS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AttachVerifiedAccessTrustProviderRequest
 */
const se_AttachVerifiedAccessTrustProviderRequest = (
  input: AttachVerifiedAccessTrustProviderRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_VATPI] != null) {
    entries[_VATPI] = input[_VATPI];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AttachVolumeRequest
 */
const se_AttachVolumeRequest = (input: AttachVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Dev] != null) {
    entries[_Dev] = input[_Dev];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AttachVpnGatewayRequest
 */
const se_AttachVpnGatewayRequest = (input: AttachVpnGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_VGI] != null) {
    entries[_VGI] = input[_VGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AttributeBooleanValue
 */
const se_AttributeBooleanValue = (input: AttributeBooleanValue, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};

/**
 * serializeAws_ec2AttributeValue
 */
const se_AttributeValue = (input: AttributeValue, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};

/**
 * serializeAws_ec2AuthorizeClientVpnIngressRequest
 */
const se_AuthorizeClientVpnIngressRequest = (input: AuthorizeClientVpnIngressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_TNC] != null) {
    entries[_TNC] = input[_TNC];
  }
  if (input[_AGI] != null) {
    entries[_AGI] = input[_AGI];
  }
  if (input[_AAG] != null) {
    entries[_AAG] = input[_AAG];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2AuthorizeSecurityGroupEgressRequest
 */
const se_AuthorizeSecurityGroupEgressRequest = (
  input: AuthorizeSecurityGroupEgressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_IPpe] != null) {
    const memberEntries = se_IpPermissionList(input[_IPpe], context);
    if (input[_IPpe]?.length === 0) {
      entries.IpPermissions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CIi] != null) {
    entries[_CIi] = input[_CIi];
  }
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_IPpr] != null) {
    entries[_IPpr] = input[_IPpr];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  if (input[_SSGN] != null) {
    entries[_SSGN] = input[_SSGN];
  }
  if (input[_SSGOI] != null) {
    entries[_SSGOI] = input[_SSGOI];
  }
  return entries;
};

/**
 * serializeAws_ec2AuthorizeSecurityGroupIngressRequest
 */
const se_AuthorizeSecurityGroupIngressRequest = (
  input: AuthorizeSecurityGroupIngressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CIi] != null) {
    entries[_CIi] = input[_CIi];
  }
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_IPpe] != null) {
    const memberEntries = se_IpPermissionList(input[_IPpe], context);
    if (input[_IPpe]?.length === 0) {
      entries.IpPermissions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPpr] != null) {
    entries[_IPpr] = input[_IPpr];
  }
  if (input[_SSGN] != null) {
    entries[_SSGN] = input[_SSGN];
  }
  if (input[_SSGOI] != null) {
    entries[_SSGOI] = input[_SSGOI];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2AvailabilityZoneStringList
 */
const se_AvailabilityZoneStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`AvailabilityZone.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2BaselineEbsBandwidthMbps
 */
const se_BaselineEbsBandwidthMbps = (input: BaselineEbsBandwidthMbps, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};

/**
 * serializeAws_ec2BaselineEbsBandwidthMbpsRequest
 */
const se_BaselineEbsBandwidthMbpsRequest = (input: BaselineEbsBandwidthMbpsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};

/**
 * serializeAws_ec2BillingProductList
 */
const se_BillingProductList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2BlobAttributeValue
 */
const se_BlobAttributeValue = (input: BlobAttributeValue, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Va] != null) {
    entries[_Va] = context.base64Encoder(input[_Va]);
  }
  return entries;
};

/**
 * serializeAws_ec2BlockDeviceMapping
 */
const se_BlockDeviceMapping = (input: BlockDeviceMapping, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_VN] != null) {
    entries[_VN] = input[_VN];
  }
  if (input[_E] != null) {
    const memberEntries = se_EbsBlockDevice(input[_E], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ND] != null) {
    entries[_ND] = input[_ND];
  }
  return entries;
};

/**
 * serializeAws_ec2BlockDeviceMappingList
 */
const se_BlockDeviceMappingList = (input: BlockDeviceMapping[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_BlockDeviceMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2BlockDeviceMappingRequestList
 */
const se_BlockDeviceMappingRequestList = (input: BlockDeviceMapping[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_BlockDeviceMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`BlockDeviceMapping.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2BundleIdStringList
 */
const se_BundleIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`BundleId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2BundleInstanceRequest
 */
const se_BundleInstanceRequest = (input: BundleInstanceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_St] != null) {
    const memberEntries = se_Storage(input[_St], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Storage.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CancelBundleTaskRequest
 */
const se_CancelBundleTaskRequest = (input: CancelBundleTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_BIu] != null) {
    entries[_BIu] = input[_BIu];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CancelCapacityReservationFleetsRequest
 */
const se_CancelCapacityReservationFleetsRequest = (
  input: CancelCapacityReservationFleetsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CRFI] != null) {
    const memberEntries = se_CapacityReservationFleetIdSet(input[_CRFI], context);
    if (input[_CRFI]?.length === 0) {
      entries.CapacityReservationFleetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationFleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CancelCapacityReservationRequest
 */
const se_CancelCapacityReservationRequest = (input: CancelCapacityReservationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CancelConversionRequest
 */
const se_CancelConversionRequest = (input: CancelConversionRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CTI] != null) {
    entries[_CTI] = input[_CTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RM] != null) {
    entries[_RM] = input[_RM];
  }
  return entries;
};

/**
 * serializeAws_ec2CancelExportTaskRequest
 */
const se_CancelExportTaskRequest = (input: CancelExportTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ETI] != null) {
    entries[_ETI] = input[_ETI];
  }
  return entries;
};

/**
 * serializeAws_ec2CancelImageLaunchPermissionRequest
 */
const se_CancelImageLaunchPermissionRequest = (
  input: CancelImageLaunchPermissionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CancelImportTaskRequest
 */
const se_CancelImportTaskRequest = (input: CancelImportTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CRa] != null) {
    entries[_CRa] = input[_CRa];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ITI] != null) {
    entries[_ITI] = input[_ITI];
  }
  return entries;
};

/**
 * serializeAws_ec2CancelReservedInstancesListingRequest
 */
const se_CancelReservedInstancesListingRequest = (
  input: CancelReservedInstancesListingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_RILI] != null) {
    entries[_RILI] = input[_RILI];
  }
  return entries;
};

/**
 * serializeAws_ec2CancelSpotFleetRequestsRequest
 */
const se_CancelSpotFleetRequestsRequest = (input: CancelSpotFleetRequestsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SFRI] != null) {
    const memberEntries = se_SpotFleetRequestIdList(input[_SFRI], context);
    if (input[_SFRI]?.length === 0) {
      entries.SpotFleetRequestId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TI] != null) {
    entries[_TI] = input[_TI];
  }
  return entries;
};

/**
 * serializeAws_ec2CancelSpotInstanceRequestsRequest
 */
const se_CancelSpotInstanceRequestsRequest = (
  input: CancelSpotInstanceRequestsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIRI] != null) {
    const memberEntries = se_SpotInstanceRequestIdList(input[_SIRI], context);
    if (input[_SIRI]?.length === 0) {
      entries.SpotInstanceRequestId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CapacityReservationFleetIdSet
 */
const se_CapacityReservationFleetIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CapacityReservationIdSet
 */
const se_CapacityReservationIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CapacityReservationOptionsRequest
 */
const se_CapacityReservationOptionsRequest = (
  input: CapacityReservationOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_USs] != null) {
    entries[_USs] = input[_USs];
  }
  return entries;
};

/**
 * serializeAws_ec2CapacityReservationSpecification
 */
const se_CapacityReservationSpecification = (input: CapacityReservationSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CRP] != null) {
    entries[_CRP] = input[_CRP];
  }
  if (input[_CRTa] != null) {
    const memberEntries = se_CapacityReservationTarget(input[_CRTa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CapacityReservationTarget
 */
const se_CapacityReservationTarget = (input: CapacityReservationTarget, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_CRRGA] != null) {
    entries[_CRRGA] = input[_CRRGA];
  }
  return entries;
};

/**
 * serializeAws_ec2CarrierGatewayIdSet
 */
const se_CarrierGatewayIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CertificateAuthenticationRequest
 */
const se_CertificateAuthenticationRequest = (input: CertificateAuthenticationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CRCCA] != null) {
    entries[_CRCCA] = input[_CRCCA];
  }
  return entries;
};

/**
 * serializeAws_ec2CidrAuthorizationContext
 */
const se_CidrAuthorizationContext = (input: CidrAuthorizationContext, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Me] != null) {
    entries[_Me] = input[_Me];
  }
  if (input[_Si] != null) {
    entries[_Si] = input[_Si];
  }
  return entries;
};

/**
 * serializeAws_ec2ClassicLoadBalancer
 */
const se_ClassicLoadBalancer = (input: ClassicLoadBalancer, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  return entries;
};

/**
 * serializeAws_ec2ClassicLoadBalancers
 */
const se_ClassicLoadBalancers = (input: ClassicLoadBalancer[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ClassicLoadBalancer(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ClassicLoadBalancersConfig
 */
const se_ClassicLoadBalancersConfig = (input: ClassicLoadBalancersConfig, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CLB] != null) {
    const memberEntries = se_ClassicLoadBalancers(input[_CLB], context);
    if (input[_CLB]?.length === 0) {
      entries.ClassicLoadBalancers = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClassicLoadBalancers.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ClientConnectOptions
 */
const se_ClientConnectOptions = (input: ClientConnectOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_LFA] != null) {
    entries[_LFA] = input[_LFA];
  }
  return entries;
};

/**
 * serializeAws_ec2ClientData
 */
const se_ClientData = (input: ClientData, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Co] != null) {
    entries[_Co] = input[_Co];
  }
  if (input[_UE] != null) {
    entries[_UE] = input[_UE].toISOString().split(".")[0] + "Z";
  }
  if (input[_USp] != null) {
    entries[_USp] = __serializeFloat(input[_USp]);
  }
  if (input[_USpl] != null) {
    entries[_USpl] = input[_USpl].toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2ClientLoginBannerOptions
 */
const se_ClientLoginBannerOptions = (input: ClientLoginBannerOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_BT] != null) {
    entries[_BT] = input[_BT];
  }
  return entries;
};

/**
 * serializeAws_ec2ClientVpnAuthenticationRequest
 */
const se_ClientVpnAuthenticationRequest = (input: ClientVpnAuthenticationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_AD] != null) {
    const memberEntries = se_DirectoryServiceAuthenticationRequest(input[_AD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ActiveDirectory.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MA] != null) {
    const memberEntries = se_CertificateAuthenticationRequest(input[_MA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MutualAuthentication.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_FA] != null) {
    const memberEntries = se_FederatedAuthenticationRequest(input[_FA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FederatedAuthentication.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ClientVpnAuthenticationRequestList
 */
const se_ClientVpnAuthenticationRequestList = (
  input: ClientVpnAuthenticationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ClientVpnAuthenticationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ClientVpnEndpointIdList
 */
const se_ClientVpnEndpointIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ClientVpnSecurityGroupIdSet
 */
const se_ClientVpnSecurityGroupIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CloudWatchLogOptionsSpecification
 */
const se_CloudWatchLogOptionsSpecification = (
  input: CloudWatchLogOptionsSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LE] != null) {
    entries[_LE] = input[_LE];
  }
  if (input[_LGA] != null) {
    entries[_LGA] = input[_LGA];
  }
  if (input[_LOF] != null) {
    entries[_LOF] = input[_LOF];
  }
  return entries;
};

/**
 * serializeAws_ec2CoipPoolIdSet
 */
const se_CoipPoolIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ConfirmProductInstanceRequest
 */
const se_ConfirmProductInstanceRequest = (input: ConfirmProductInstanceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_PC] != null) {
    entries[_PC] = input[_PC];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ConnectionLogOptions
 */
const se_ConnectionLogOptions = (input: ConnectionLogOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_CLG] != null) {
    entries[_CLG] = input[_CLG];
  }
  if (input[_CLS] != null) {
    entries[_CLS] = input[_CLS];
  }
  return entries;
};

/**
 * serializeAws_ec2ConnectionNotificationIdsList
 */
const se_ConnectionNotificationIdsList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ConnectionTrackingSpecificationRequest
 */
const se_ConnectionTrackingSpecificationRequest = (
  input: ConnectionTrackingSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TET] != null) {
    entries[_TET] = input[_TET];
  }
  if (input[_UST] != null) {
    entries[_UST] = input[_UST];
  }
  if (input[_UT] != null) {
    entries[_UT] = input[_UT];
  }
  return entries;
};

/**
 * serializeAws_ec2ConversionIdStringList
 */
const se_ConversionIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CopyFpgaImageRequest
 */
const se_CopyFpgaImageRequest = (input: CopyFpgaImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SFII] != null) {
    entries[_SFII] = input[_SFII];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_SR] != null) {
    entries[_SR] = input[_SR];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2CopyImageRequest
 */
const se_CopyImageRequest = (input: CopyImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_SII] != null) {
    entries[_SII] = input[_SII];
  }
  if (input[_SR] != null) {
    entries[_SR] = input[_SR];
  }
  if (input[_DOA] != null) {
    entries[_DOA] = input[_DOA];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CITo] != null) {
    entries[_CITo] = input[_CITo];
  }
  return entries;
};

/**
 * serializeAws_ec2CopySnapshotRequest
 */
const se_CopySnapshotRequest = (input: CopySnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DOA] != null) {
    entries[_DOA] = input[_DOA];
  }
  if (input[_DRes] != null) {
    entries[_DRes] = input[_DRes];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_PU] != null) {
    entries[_PU] = input[_PU];
  }
  if (input[_SR] != null) {
    entries[_SR] = input[_SR];
  }
  if (input[_SSI] != null) {
    entries[_SSI] = input[_SSI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CpuManufacturerSet
 */
const se_CpuManufacturerSet = (input: CpuManufacturer[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CpuOptionsRequest
 */
const se_CpuOptionsRequest = (input: CpuOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CC] != null) {
    entries[_CC] = input[_CC];
  }
  if (input[_TPC] != null) {
    entries[_TPC] = input[_TPC];
  }
  if (input[_ASS] != null) {
    entries[_ASS] = input[_ASS];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateCapacityReservationFleetRequest
 */
const se_CreateCapacityReservationFleetRequest = (
  input: CreateCapacityReservationFleetRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AS] != null) {
    entries[_AS] = input[_AS];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_ITS] != null) {
    const memberEntries = se_ReservationFleetInstanceSpecificationList(input[_ITS], context);
    if (input[_ITS]?.length === 0) {
      entries.InstanceTypeSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTypeSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Te] != null) {
    entries[_Te] = input[_Te];
  }
  if (input[_TTC] != null) {
    entries[_TTC] = input[_TTC];
  }
  if (input[_ED] != null) {
    entries[_ED] = input[_ED].toISOString().split(".")[0] + "Z";
  }
  if (input[_IMC] != null) {
    entries[_IMC] = input[_IMC];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateCapacityReservationRequest
 */
const se_CreateCapacityReservationRequest = (input: CreateCapacityReservationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_IPn] != null) {
    entries[_IPn] = input[_IPn];
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_AZI] != null) {
    entries[_AZI] = input[_AZI];
  }
  if (input[_Te] != null) {
    entries[_Te] = input[_Te];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_ES] != null) {
    entries[_ES] = input[_ES];
  }
  if (input[_ED] != null) {
    entries[_ED] = input[_ED].toISOString().split(".")[0] + "Z";
  }
  if (input[_EDT] != null) {
    entries[_EDT] = input[_EDT];
  }
  if (input[_IMC] != null) {
    entries[_IMC] = input[_IMC];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecifications = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_PGA] != null) {
    entries[_PGA] = input[_PGA];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateCarrierGatewayRequest
 */
const se_CreateCarrierGatewayRequest = (input: CreateCarrierGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateClientVpnEndpointRequest
 */
const se_CreateClientVpnEndpointRequest = (input: CreateClientVpnEndpointRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CCB] != null) {
    entries[_CCB] = input[_CCB];
  }
  if (input[_SCA] != null) {
    entries[_SCA] = input[_SCA];
  }
  if (input[_AO] != null) {
    const memberEntries = se_ClientVpnAuthenticationRequestList(input[_AO], context);
    if (input[_AO]?.length === 0) {
      entries.Authentication = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Authentication.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CLO] != null) {
    const memberEntries = se_ConnectionLogOptions(input[_CLO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionLogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DSn] != null) {
    const memberEntries = se_ValueStringList(input[_DSn], context);
    if (input[_DSn]?.length === 0) {
      entries.DnsServers = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsServers.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TPr] != null) {
    entries[_TPr] = input[_TPr];
  }
  if (input[_VP] != null) {
    entries[_VP] = input[_VP];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_ST] != null) {
    entries[_ST] = input[_ST];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SGI] != null) {
    const memberEntries = se_ClientVpnSecurityGroupIdSet(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_SSP] != null) {
    entries[_SSP] = input[_SSP];
  }
  if (input[_CCO] != null) {
    const memberEntries = se_ClientConnectOptions(input[_CCO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientConnectOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_STH] != null) {
    entries[_STH] = input[_STH];
  }
  if (input[_CLBO] != null) {
    const memberEntries = se_ClientLoginBannerOptions(input[_CLBO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientLoginBannerOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateClientVpnRouteRequest
 */
const se_CreateClientVpnRouteRequest = (input: CreateClientVpnRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_TVSI] != null) {
    entries[_TVSI] = input[_TVSI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateCoipCidrRequest
 */
const se_CreateCoipCidrRequest = (input: CreateCoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_CPIo] != null) {
    entries[_CPIo] = input[_CPIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateCoipPoolRequest
 */
const se_CreateCoipPoolRequest = (input: CreateCoipPoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateCustomerGatewayRequest
 */
const se_CreateCustomerGatewayRequest = (input: CreateCustomerGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_BA] != null) {
    entries[_BA] = input[_BA];
  }
  if (input[_PI] != null) {
    entries[_PI] = input[_PI];
  }
  if (input[_CA] != null) {
    entries[_CA] = input[_CA];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_IAp] != null) {
    entries[_IAp] = input[_IAp];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateDefaultSubnetRequest
 */
const se_CreateDefaultSubnetRequest = (input: CreateDefaultSubnetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IN] != null) {
    entries[_IN] = input[_IN];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateDefaultVpcRequest
 */
const se_CreateDefaultVpcRequest = (input: CreateDefaultVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateDhcpOptionsRequest
 */
const se_CreateDhcpOptionsRequest = (input: CreateDhcpOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DCh] != null) {
    const memberEntries = se_NewDhcpConfigurationList(input[_DCh], context);
    if (input[_DCh]?.length === 0) {
      entries.DhcpConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DhcpConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateEgressOnlyInternetGatewayRequest
 */
const se_CreateEgressOnlyInternetGatewayRequest = (
  input: CreateEgressOnlyInternetGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateFleetRequest
 */
const se_CreateFleetRequest = (input: CreateFleetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_SO] != null) {
    const memberEntries = se_SpotOptionsRequest(input[_SO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ODO] != null) {
    const memberEntries = se_OnDemandOptionsRequest(input[_ODO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OnDemandOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ECTP] != null) {
    entries[_ECTP] = input[_ECTP];
  }
  if (input[_LTC] != null) {
    const memberEntries = se_FleetLaunchTemplateConfigListRequest(input[_LTC], context);
    if (input[_LTC]?.length === 0) {
      entries.LaunchTemplateConfigs = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TCS] != null) {
    const memberEntries = se_TargetCapacitySpecificationRequest(input[_TCS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetCapacitySpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TIWE] != null) {
    entries[_TIWE] = input[_TIWE];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_VF] != null) {
    entries[_VF] = input[_VF].toISOString().split(".")[0] + "Z";
  }
  if (input[_VU] != null) {
    entries[_VU] = input[_VU].toISOString().split(".")[0] + "Z";
  }
  if (input[_RUI] != null) {
    entries[_RUI] = input[_RUI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Con] != null) {
    entries[_Con] = input[_Con];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateFlowLogsRequest
 */
const se_CreateFlowLogsRequest = (input: CreateFlowLogsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DLPA] != null) {
    entries[_DLPA] = input[_DLPA];
  }
  if (input[_DCAR] != null) {
    entries[_DCAR] = input[_DCAR];
  }
  if (input[_LGN] != null) {
    entries[_LGN] = input[_LGN];
  }
  if (input[_RIes] != null) {
    const memberEntries = se_FlowLogResourceIds(input[_RIes], context);
    if (input[_RIes]?.length === 0) {
      entries.ResourceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_TT] != null) {
    entries[_TT] = input[_TT];
  }
  if (input[_LDT] != null) {
    entries[_LDT] = input[_LDT];
  }
  if (input[_LD] != null) {
    entries[_LD] = input[_LD];
  }
  if (input[_LF] != null) {
    entries[_LF] = input[_LF];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MAI] != null) {
    entries[_MAI] = input[_MAI];
  }
  if (input[_DO] != null) {
    const memberEntries = se_DestinationOptionsRequest(input[_DO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateFpgaImageRequest
 */
const se_CreateFpgaImageRequest = (input: CreateFpgaImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ISL] != null) {
    const memberEntries = se_StorageLocation(input[_ISL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InputStorageLocation.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LSL] != null) {
    const memberEntries = se_StorageLocation(input[_LSL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogsStorageLocation.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateImageRequest
 */
const se_CreateImageRequest = (input: CreateImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_BDM] != null) {
    const memberEntries = se_BlockDeviceMappingRequestList(input[_BDM], context);
    if (input[_BDM]?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_NR] != null) {
    entries[_NR] = input[_NR];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateInstanceConnectEndpointRequest
 */
const se_CreateInstanceConnectEndpointRequest = (
  input: CreateInstanceConnectEndpointRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdStringListRequest(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PCI] != null) {
    entries[_PCI] = input[_PCI];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateInstanceEventWindowRequest
 */
const se_CreateInstanceEventWindowRequest = (input: CreateInstanceEventWindowRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_TRi] != null) {
    const memberEntries = se_InstanceEventWindowTimeRangeRequestSet(input[_TRi], context);
    if (input[_TRi]?.length === 0) {
      entries.TimeRange = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TimeRange.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CE] != null) {
    entries[_CE] = input[_CE];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateInstanceExportTaskRequest
 */
const se_CreateInstanceExportTaskRequest = (input: CreateInstanceExportTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_ETST] != null) {
    const memberEntries = se_ExportToS3TaskSpecification(input[_ETST], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExportToS3.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_TE] != null) {
    entries[_TE] = input[_TE];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateInternetGatewayRequest
 */
const se_CreateInternetGatewayRequest = (input: CreateInternetGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateIpamPoolRequest
 */
const se_CreateIpamPoolRequest = (input: CreateIpamPoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ISI] != null) {
    entries[_ISI] = input[_ISI];
  }
  if (input[_L] != null) {
    entries[_L] = input[_L];
  }
  if (input[_SIPI] != null) {
    entries[_SIPI] = input[_SIPI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_AF] != null) {
    entries[_AF] = input[_AF];
  }
  if (input[_AIu] != null) {
    entries[_AIu] = input[_AIu];
  }
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_AMNL] != null) {
    entries[_AMNL] = input[_AMNL];
  }
  if (input[_AMNLl] != null) {
    entries[_AMNLl] = input[_AMNLl];
  }
  if (input[_ADNL] != null) {
    entries[_ADNL] = input[_ADNL];
  }
  if (input[_ARTl] != null) {
    const memberEntries = se_RequestIpamResourceTagList(input[_ARTl], context);
    if (input[_ARTl]?.length === 0) {
      entries.AllocationResourceTag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_ASw] != null) {
    entries[_ASw] = input[_ASw];
  }
  if (input[_PIS] != null) {
    entries[_PIS] = input[_PIS];
  }
  if (input[_SRo] != null) {
    const memberEntries = se_IpamPoolSourceResourceRequest(input[_SRo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceResource.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateIpamRequest
 */
const se_CreateIpamRequest = (input: CreateIpamRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_OR] != null) {
    const memberEntries = se_AddIpamOperatingRegionSet(input[_OR], context);
    if (input[_OR]?.length === 0) {
      entries.OperatingRegion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_Ti] != null) {
    entries[_Ti] = input[_Ti];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateIpamResourceDiscoveryRequest
 */
const se_CreateIpamResourceDiscoveryRequest = (
  input: CreateIpamResourceDiscoveryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_OR] != null) {
    const memberEntries = se_AddIpamOperatingRegionSet(input[_OR], context);
    if (input[_OR]?.length === 0) {
      entries.OperatingRegion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateIpamScopeRequest
 */
const se_CreateIpamScopeRequest = (input: CreateIpamScopeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIp] != null) {
    entries[_IIp] = input[_IIp];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateKeyPairRequest
 */
const se_CreateKeyPairRequest = (input: CreateKeyPairRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_KT] != null) {
    entries[_KT] = input[_KT];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_KF] != null) {
    entries[_KF] = input[_KF];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateLaunchTemplateRequest
 */
const se_CreateLaunchTemplateRequest = (input: CreateLaunchTemplateRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_VD] != null) {
    entries[_VD] = input[_VD];
  }
  if (input[_LTD] != null) {
    const memberEntries = se_RequestLaunchTemplateData(input[_LTD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateData.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateLaunchTemplateVersionRequest
 */
const se_CreateLaunchTemplateVersionRequest = (
  input: CreateLaunchTemplateVersionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_SV] != null) {
    entries[_SV] = input[_SV];
  }
  if (input[_VD] != null) {
    entries[_VD] = input[_VD];
  }
  if (input[_LTD] != null) {
    const memberEntries = se_RequestLaunchTemplateData(input[_LTD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateData.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RAe] != null) {
    entries[_RAe] = input[_RAe];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteRequest
 */
const se_CreateLocalGatewayRouteRequest = (input: CreateLocalGatewayRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_LGVIGI] != null) {
    entries[_LGVIGI] = input[_LGVIGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_DPLI] != null) {
    entries[_DPLI] = input[_DPLI];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteTableRequest
 */
const se_CreateLocalGatewayRouteTableRequest = (
  input: CreateLocalGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LGI] != null) {
    entries[_LGI] = input[_LGI];
  }
  if (input[_Mo] != null) {
    entries[_Mo] = input[_Mo];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest
 */
const se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest = (
  input: CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_LGVIGI] != null) {
    entries[_LGVIGI] = input[_LGVIGI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationRequest
 */
const se_CreateLocalGatewayRouteTableVpcAssociationRequest = (
  input: CreateLocalGatewayRouteTableVpcAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateManagedPrefixListRequest
 */
const se_CreateManagedPrefixListRequest = (input: CreateManagedPrefixListRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PLN] != null) {
    entries[_PLN] = input[_PLN];
  }
  if (input[_Ent] != null) {
    const memberEntries = se_AddPrefixListEntries(input[_Ent], context);
    if (input[_Ent]?.length === 0) {
      entries.Entry = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Entry.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ME] != null) {
    entries[_ME] = input[_ME];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AF] != null) {
    entries[_AF] = input[_AF];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNatGatewayRequest
 */
const se_CreateNatGatewayRequest = (input: CreateNatGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTo] != null) {
    entries[_CTo] = input[_CTo];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_SAI] != null) {
    const memberEntries = se_AllocationIdList(input[_SAI], context);
    if (input[_SAI]?.length === 0) {
      entries.SecondaryAllocationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecondaryAllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIA] != null) {
    const memberEntries = se_IpList(input[_SPIA], context);
    if (input[_SPIA]?.length === 0) {
      entries.SecondaryPrivateIpAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecondaryPrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIAC] != null) {
    entries[_SPIAC] = input[_SPIAC];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNetworkAclEntryRequest
 */
const se_CreateNetworkAclEntryRequest = (input: CreateNetworkAclEntryRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CB] != null) {
    entries[_CB] = input[_CB];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Eg] != null) {
    entries[_Eg] = input[_Eg];
  }
  if (input[_ITC] != null) {
    const memberEntries = se_IcmpTypeCode(input[_ITC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Icmp.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ICB] != null) {
    entries[_ICB] = input[_ICB];
  }
  if (input[_NAI] != null) {
    entries[_NAI] = input[_NAI];
  }
  if (input[_PR] != null) {
    const memberEntries = se_PortRange(input[_PR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_RAu] != null) {
    entries[_RAu] = input[_RAu];
  }
  if (input[_RNu] != null) {
    entries[_RNu] = input[_RNu];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNetworkAclRequest
 */
const se_CreateNetworkAclRequest = (input: CreateNetworkAclRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNetworkInsightsAccessScopeRequest
 */
const se_CreateNetworkInsightsAccessScopeRequest = (
  input: CreateNetworkInsightsAccessScopeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_MP] != null) {
    const memberEntries = se_AccessScopePathListRequest(input[_MP], context);
    if (input[_MP]?.length === 0) {
      entries.MatchPath = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MatchPath.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EP] != null) {
    const memberEntries = se_AccessScopePathListRequest(input[_EP], context);
    if (input[_EP]?.length === 0) {
      entries.ExcludePath = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludePath.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNetworkInsightsPathRequest
 */
const se_CreateNetworkInsightsPathRequest = (input: CreateNetworkInsightsPathRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SIo] != null) {
    entries[_SIo] = input[_SIo];
  }
  if (input[_DIest] != null) {
    entries[_DIest] = input[_DIest];
  }
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_DP] != null) {
    entries[_DP] = input[_DP];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_FAS] != null) {
    const memberEntries = se_PathRequestFilter(input[_FAS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FilterAtSource.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_FAD] != null) {
    const memberEntries = se_PathRequestFilter(input[_FAD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FilterAtDestination.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNetworkInterfacePermissionRequest
 */
const se_CreateNetworkInterfacePermissionRequest = (
  input: CreateNetworkInterfacePermissionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_AAI] != null) {
    entries[_AAI] = input[_AAI];
  }
  if (input[_ASw] != null) {
    entries[_ASw] = input[_ASw];
  }
  if (input[_Pe] != null) {
    entries[_Pe] = input[_Pe];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateNetworkInterfaceRequest
 */
const se_CreateNetworkInterfaceRequest = (input: CreateNetworkInterfaceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_G] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_G], context);
    if (input[_G]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IAC] != null) {
    entries[_IAC] = input[_IAC];
  }
  if (input[_IA] != null) {
    const memberEntries = se_InstanceIpv6AddressList(input[_IA], context);
    if (input[_IA]?.length === 0) {
      entries.Ipv6Addresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_PIA] != null) {
    const memberEntries = se_PrivateIpAddressSpecificationList(input[_PIA], context);
    if (input[_PIA]?.length === 0) {
      entries.PrivateIpAddresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIAC] != null) {
    entries[_SPIAC] = input[_SPIAC];
  }
  if (input[_IPp] != null) {
    const memberEntries = se_Ipv4PrefixList(input[_IPp], context);
    if (input[_IPp]?.length === 0) {
      entries.Ipv4Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPCp] != null) {
    entries[_IPCp] = input[_IPCp];
  }
  if (input[_IP] != null) {
    const memberEntries = se_Ipv6PrefixList(input[_IP], context);
    if (input[_IP]?.length === 0) {
      entries.Ipv6Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPC] != null) {
    entries[_IPC] = input[_IPC];
  }
  if (input[_ITn] != null) {
    entries[_ITn] = input[_ITn];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_EPI] != null) {
    entries[_EPI] = input[_EPI];
  }
  if (input[_CTS] != null) {
    const memberEntries = se_ConnectionTrackingSpecificationRequest(input[_CTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionTrackingSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreatePlacementGroupRequest
 */
const se_CreatePlacementGroupRequest = (input: CreatePlacementGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_Str] != null) {
    entries[_Str] = input[_Str];
  }
  if (input[_PCa] != null) {
    entries[_PCa] = input[_PCa];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SL] != null) {
    entries[_SL] = input[_SL];
  }
  return entries;
};

/**
 * serializeAws_ec2CreatePublicIpv4PoolRequest
 */
const se_CreatePublicIpv4PoolRequest = (input: CreatePublicIpv4PoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateReplaceRootVolumeTaskRequest
 */
const se_CreateReplaceRootVolumeTaskRequest = (
  input: CreateReplaceRootVolumeTaskRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRRV] != null) {
    entries[_DRRV] = input[_DRRV];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateReservedInstancesListingRequest
 */
const se_CreateReservedInstancesListingRequest = (
  input: CreateReservedInstancesListingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_PS] != null) {
    const memberEntries = se_PriceScheduleSpecificationList(input[_PS], context);
    if (input[_PS]?.length === 0) {
      entries.PriceSchedules = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PriceSchedules.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RIIe] != null) {
    entries[_RIIe] = input[_RIIe];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateRestoreImageTaskRequest
 */
const se_CreateRestoreImageTaskRequest = (input: CreateRestoreImageTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_B] != null) {
    entries[_B] = input[_B];
  }
  if (input[_OK] != null) {
    entries[_OK] = input[_OK];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateRouteRequest
 */
const se_CreateRouteRequest = (input: CreateRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_DICB] != null) {
    entries[_DICB] = input[_DICB];
  }
  if (input[_DPLI] != null) {
    entries[_DPLI] = input[_DPLI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VEIp] != null) {
    entries[_VEIp] = input[_VEIp];
  }
  if (input[_EOIGI] != null) {
    entries[_EOIGI] = input[_EOIGI];
  }
  if (input[_GI] != null) {
    entries[_GI] = input[_GI];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_LGI] != null) {
    entries[_LGI] = input[_LGI];
  }
  if (input[_CGI] != null) {
    entries[_CGI] = input[_CGI];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  if (input[_CNAo] != null) {
    entries[_CNAo] = input[_CNAo];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateRouteTableRequest
 */
const se_CreateRouteTableRequest = (input: CreateRouteTableRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateSecurityGroupRequest
 */
const se_CreateSecurityGroupRequest = (input: CreateSecurityGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_GD] = input[_De];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateSnapshotRequest
 */
const se_CreateSnapshotRequest = (input: CreateSnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateSnapshotsRequest
 */
const se_CreateSnapshotsRequest = (input: CreateSnapshotsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_ISn] != null) {
    const memberEntries = se_InstanceSpecification(input[_ISn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTFS] != null) {
    entries[_CTFS] = input[_CTFS];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateSpotDatafeedSubscriptionRequest
 */
const se_CreateSpotDatafeedSubscriptionRequest = (
  input: CreateSpotDatafeedSubscriptionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_B] != null) {
    entries[_B] = input[_B];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Pr] != null) {
    entries[_Pr] = input[_Pr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateStoreImageTaskRequest
 */
const se_CreateStoreImageTaskRequest = (input: CreateStoreImageTaskRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_B] != null) {
    entries[_B] = input[_B];
  }
  if (input[_SOT] != null) {
    const memberEntries = se_S3ObjectTagList(input[_SOT], context);
    if (input[_SOT]?.length === 0) {
      entries.S3ObjectTag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3ObjectTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateSubnetCidrReservationRequest
 */
const se_CreateSubnetCidrReservationRequest = (
  input: CreateSubnetCidrReservationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_RTe] != null) {
    entries[_RTe] = input[_RTe];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateSubnetRequest
 */
const se_CreateSubnetRequest = (input: CreateSubnetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_AZI] != null) {
    entries[_AZI] = input[_AZI];
  }
  if (input[_CB] != null) {
    entries[_CB] = input[_CB];
  }
  if (input[_ICB] != null) {
    entries[_ICB] = input[_ICB];
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IN] != null) {
    entries[_IN] = input[_IN];
  }
  if (input[_IIPIp] != null) {
    entries[_IIPIp] = input[_IIPIp];
  }
  if (input[_INLp] != null) {
    entries[_INLp] = input[_INLp];
  }
  if (input[_IIPI] != null) {
    entries[_IIPI] = input[_IIPI];
  }
  if (input[_INL] != null) {
    entries[_INL] = input[_INL];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTagsRequest
 */
const se_CreateTagsRequest = (input: CreateTagsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_R] != null) {
    const memberEntries = se_ResourceIdList(input[_R], context);
    if (input[_R]?.length === 0) {
      entries.ResourceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    if (input[_Ta]?.length === 0) {
      entries.Tag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTrafficMirrorFilterRequest
 */
const se_CreateTrafficMirrorFilterRequest = (input: CreateTrafficMirrorFilterRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTrafficMirrorFilterRuleRequest
 */
const se_CreateTrafficMirrorFilterRuleRequest = (
  input: CreateTrafficMirrorFilterRuleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TMFI] != null) {
    entries[_TMFI] = input[_TMFI];
  }
  if (input[_TD] != null) {
    entries[_TD] = input[_TD];
  }
  if (input[_RNu] != null) {
    entries[_RNu] = input[_RNu];
  }
  if (input[_RAu] != null) {
    entries[_RAu] = input[_RAu];
  }
  if (input[_DPR] != null) {
    const memberEntries = se_TrafficMirrorPortRangeRequest(input[_DPR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SPR] != null) {
    const memberEntries = se_TrafficMirrorPortRangeRequest(input[_SPR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_SCB] != null) {
    entries[_SCB] = input[_SCB];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTrafficMirrorSessionRequest
 */
const se_CreateTrafficMirrorSessionRequest = (
  input: CreateTrafficMirrorSessionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_TMTI] != null) {
    entries[_TMTI] = input[_TMTI];
  }
  if (input[_TMFI] != null) {
    entries[_TMFI] = input[_TMFI];
  }
  if (input[_PL] != null) {
    entries[_PL] = input[_PL];
  }
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  if (input[_VNI] != null) {
    entries[_VNI] = input[_VNI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTrafficMirrorTargetRequest
 */
const se_CreateTrafficMirrorTargetRequest = (input: CreateTrafficMirrorTargetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_NLBA] != null) {
    entries[_NLBA] = input[_NLBA];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_GLBEI] != null) {
    entries[_GLBEI] = input[_GLBEI];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayConnectPeerRequest
 */
const se_CreateTransitGatewayConnectPeerRequest = (
  input: CreateTransitGatewayConnectPeerRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_TGA] != null) {
    entries[_TGA] = input[_TGA];
  }
  if (input[_PAe] != null) {
    entries[_PAe] = input[_PAe];
  }
  if (input[_BO] != null) {
    const memberEntries = se_TransitGatewayConnectRequestBgpOptions(input[_BO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BgpOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ICBn] != null) {
    const memberEntries = se_InsideCidrBlocksStringList(input[_ICBn], context);
    if (input[_ICBn]?.length === 0) {
      entries.InsideCidrBlocks = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InsideCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayConnectRequest
 */
const se_CreateTransitGatewayConnectRequest = (
  input: CreateTransitGatewayConnectRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TTGAI] != null) {
    entries[_TTGAI] = input[_TTGAI];
  }
  if (input[_O] != null) {
    const memberEntries = se_CreateTransitGatewayConnectRequestOptions(input[_O], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayConnectRequestOptions
 */
const se_CreateTransitGatewayConnectRequestOptions = (
  input: CreateTransitGatewayConnectRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayMulticastDomainRequest
 */
const se_CreateTransitGatewayMulticastDomainRequest = (
  input: CreateTransitGatewayMulticastDomainRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_O] != null) {
    const memberEntries = se_CreateTransitGatewayMulticastDomainRequestOptions(input[_O], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayMulticastDomainRequestOptions
 */
const se_CreateTransitGatewayMulticastDomainRequestOptions = (
  input: CreateTransitGatewayMulticastDomainRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_ISg] != null) {
    entries[_ISg] = input[_ISg];
  }
  if (input[_SSS] != null) {
    entries[_SSS] = input[_SSS];
  }
  if (input[_AASA] != null) {
    entries[_AASA] = input[_AASA];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayPeeringAttachmentRequest
 */
const se_CreateTransitGatewayPeeringAttachmentRequest = (
  input: CreateTransitGatewayPeeringAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_PTGI] != null) {
    entries[_PTGI] = input[_PTGI];
  }
  if (input[_PAI] != null) {
    entries[_PAI] = input[_PAI];
  }
  if (input[_PRe] != null) {
    entries[_PRe] = input[_PRe];
  }
  if (input[_O] != null) {
    const memberEntries = se_CreateTransitGatewayPeeringAttachmentRequestOptions(input[_O], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayPeeringAttachmentRequestOptions
 */
const se_CreateTransitGatewayPeeringAttachmentRequestOptions = (
  input: CreateTransitGatewayPeeringAttachmentRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRy] != null) {
    entries[_DRy] = input[_DRy];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayPolicyTableRequest
 */
const se_CreateTransitGatewayPolicyTableRequest = (
  input: CreateTransitGatewayPolicyTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecifications = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayPrefixListReferenceRequest
 */
const se_CreateTransitGatewayPrefixListReferenceRequest = (
  input: CreateTransitGatewayPrefixListReferenceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_Bl] != null) {
    entries[_Bl] = input[_Bl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayRequest
 */
const se_CreateTransitGatewayRequest = (input: CreateTransitGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_O] != null) {
    const memberEntries = se_TransitGatewayRequestOptions(input[_O], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayRouteRequest
 */
const se_CreateTransitGatewayRouteRequest = (input: CreateTransitGatewayRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_Bl] != null) {
    entries[_Bl] = input[_Bl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayRouteTableAnnouncementRequest
 */
const se_CreateTransitGatewayRouteTableAnnouncementRequest = (
  input: CreateTransitGatewayRouteTableAnnouncementRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_PAIe] != null) {
    entries[_PAIe] = input[_PAIe];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayRouteTableRequest
 */
const se_CreateTransitGatewayRouteTableRequest = (
  input: CreateTransitGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecifications = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayVpcAttachmentRequest
 */
const se_CreateTransitGatewayVpcAttachmentRequest = (
  input: CreateTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input[_SIu], context);
    if (input[_SIu]?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_O] != null) {
    const memberEntries = se_CreateTransitGatewayVpcAttachmentRequestOptions(input[_O], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecifications = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateTransitGatewayVpcAttachmentRequestOptions
 */
const se_CreateTransitGatewayVpcAttachmentRequestOptions = (
  input: CreateTransitGatewayVpcAttachmentRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DSns] != null) {
    entries[_DSns] = input[_DSns];
  }
  if (input[_SGRS] != null) {
    entries[_SGRS] = input[_SGRS];
  }
  if (input[_ISp] != null) {
    entries[_ISp] = input[_ISp];
  }
  if (input[_AMS] != null) {
    entries[_AMS] = input[_AMS];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessEndpointEniOptions
 */
const se_CreateVerifiedAccessEndpointEniOptions = (
  input: CreateVerifiedAccessEndpointEniOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessEndpointLoadBalancerOptions
 */
const se_CreateVerifiedAccessEndpointLoadBalancerOptions = (
  input: CreateVerifiedAccessEndpointLoadBalancerOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  if (input[_LBA] != null) {
    entries[_LBA] = input[_LBA];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointSubnetIdList(input[_SIu], context);
    if (input[_SIu]?.length === 0) {
      entries.SubnetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessEndpointRequest
 */
const se_CreateVerifiedAccessEndpointRequest = (
  input: CreateVerifiedAccessEndpointRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_ET] != null) {
    entries[_ET] = input[_ET];
  }
  if (input[_ATt] != null) {
    entries[_ATt] = input[_ATt];
  }
  if (input[_DCA] != null) {
    entries[_DCA] = input[_DCA];
  }
  if (input[_ADp] != null) {
    entries[_ADp] = input[_ADp];
  }
  if (input[_EDP] != null) {
    entries[_EDP] = input[_EDP];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdList(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LBO] != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointLoadBalancerOptions(input[_LBO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancerOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NIO] != null) {
    const memberEntries = se_CreateVerifiedAccessEndpointEniOptions(input[_NIO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SS] != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessEndpointSubnetIdList
 */
const se_CreateVerifiedAccessEndpointSubnetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessGroupRequest
 */
const se_CreateVerifiedAccessGroupRequest = (input: CreateVerifiedAccessGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SS] != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessInstanceRequest
 */
const se_CreateVerifiedAccessInstanceRequest = (
  input: CreateVerifiedAccessInstanceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FIPSE] != null) {
    entries[_FIPSE] = input[_FIPSE];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessTrustProviderDeviceOptions
 */
const se_CreateVerifiedAccessTrustProviderDeviceOptions = (
  input: CreateVerifiedAccessTrustProviderDeviceOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TIe] != null) {
    entries[_TIe] = input[_TIe];
  }
  if (input[_PSKU] != null) {
    entries[_PSKU] = input[_PSKU];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessTrustProviderOidcOptions
 */
const se_CreateVerifiedAccessTrustProviderOidcOptions = (
  input: CreateVerifiedAccessTrustProviderOidcOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_I] != null) {
    entries[_I] = input[_I];
  }
  if (input[_AE] != null) {
    entries[_AE] = input[_AE];
  }
  if (input[_TEo] != null) {
    entries[_TEo] = input[_TEo];
  }
  if (input[_UIE] != null) {
    entries[_UIE] = input[_UIE];
  }
  if (input[_CIl] != null) {
    entries[_CIl] = input[_CIl];
  }
  if (input[_CSl] != null) {
    entries[_CSl] = input[_CSl];
  }
  if (input[_Sc] != null) {
    entries[_Sc] = input[_Sc];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVerifiedAccessTrustProviderRequest
 */
const se_CreateVerifiedAccessTrustProviderRequest = (
  input: CreateVerifiedAccessTrustProviderRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TPT] != null) {
    entries[_TPT] = input[_TPT];
  }
  if (input[_UTPT] != null) {
    entries[_UTPT] = input[_UTPT];
  }
  if (input[_DTPT] != null) {
    entries[_DTPT] = input[_DTPT];
  }
  if (input[_OO] != null) {
    const memberEntries = se_CreateVerifiedAccessTrustProviderOidcOptions(input[_OO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OidcOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DOe] != null) {
    const memberEntries = se_CreateVerifiedAccessTrustProviderDeviceOptions(input[_DOe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DeviceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PRN] != null) {
    entries[_PRN] = input[_PRN];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SS] != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVolumePermission
 */
const se_CreateVolumePermission = (input: CreateVolumePermission, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Gr] != null) {
    entries[_Gr] = input[_Gr];
  }
  if (input[_UIs] != null) {
    entries[_UIs] = input[_UIs];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVolumePermissionList
 */
const se_CreateVolumePermissionList = (input: CreateVolumePermission[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_CreateVolumePermission(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVolumePermissionModifications
 */
const se_CreateVolumePermissionModifications = (
  input: CreateVolumePermissionModifications,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Add] != null) {
    const memberEntries = se_CreateVolumePermissionList(input[_Add], context);
    if (input[_Add]?.length === 0) {
      entries.Add = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Re] != null) {
    const memberEntries = se_CreateVolumePermissionList(input[_Re], context);
    if (input[_Re]?.length === 0) {
      entries.Remove = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVolumeRequest
 */
const se_CreateVolumeRequest = (input: CreateVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_Io] != null) {
    entries[_Io] = input[_Io];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_Siz] != null) {
    entries[_Siz] = input[_Siz];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_VT] != null) {
    entries[_VT] = input[_VT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MAE] != null) {
    entries[_MAE] = input[_MAE];
  }
  if (input[_Th] != null) {
    entries[_Th] = input[_Th];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpcEndpointConnectionNotificationRequest
 */
const se_CreateVpcEndpointConnectionNotificationRequest = (
  input: CreateVpcEndpointConnectionNotificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_VEIp] != null) {
    entries[_VEIp] = input[_VEIp];
  }
  if (input[_CNAon] != null) {
    entries[_CNAon] = input[_CNAon];
  }
  if (input[_CEo] != null) {
    const memberEntries = se_ValueStringList(input[_CEo], context);
    if (input[_CEo]?.length === 0) {
      entries.ConnectionEvents = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpcEndpointRequest
 */
const se_CreateVpcEndpointRequest = (input: CreateVpcEndpointRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VET] != null) {
    entries[_VET] = input[_VET];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_SNe] != null) {
    entries[_SNe] = input[_SNe];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_RTIo] != null) {
    const memberEntries = se_VpcEndpointRouteTableIdList(input[_RTIo], context);
    if (input[_RTIo]?.length === 0) {
      entries.RouteTableId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIu] != null) {
    const memberEntries = se_VpcEndpointSubnetIdList(input[_SIu], context);
    if (input[_SIu]?.length === 0) {
      entries.SubnetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SGI] != null) {
    const memberEntries = se_VpcEndpointSecurityGroupIdList(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IAT] != null) {
    entries[_IAT] = input[_IAT];
  }
  if (input[_DOn] != null) {
    const memberEntries = se_DnsOptionsSpecification(input[_DOn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_PDE] != null) {
    entries[_PDE] = input[_PDE];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SC] != null) {
    const memberEntries = se_SubnetConfigurationsList(input[_SC], context);
    if (input[_SC]?.length === 0) {
      entries.SubnetConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpcEndpointServiceConfigurationRequest
 */
const se_CreateVpcEndpointServiceConfigurationRequest = (
  input: CreateVpcEndpointServiceConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ARc] != null) {
    entries[_ARc] = input[_ARc];
  }
  if (input[_PDN] != null) {
    entries[_PDN] = input[_PDN];
  }
  if (input[_NLBAe] != null) {
    const memberEntries = se_ValueStringList(input[_NLBAe], context);
    if (input[_NLBAe]?.length === 0) {
      entries.NetworkLoadBalancerArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_GLBA] != null) {
    const memberEntries = se_ValueStringList(input[_GLBA], context);
    if (input[_GLBA]?.length === 0) {
      entries.GatewayLoadBalancerArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIAT] != null) {
    const memberEntries = se_ValueStringList(input[_SIAT], context);
    if (input[_SIAT]?.length === 0) {
      entries.SupportedIpAddressType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpcPeeringConnectionRequest
 */
const se_CreateVpcPeeringConnectionRequest = (
  input: CreateVpcPeeringConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_POI] != null) {
    entries[_POI] = input[_POI];
  }
  if (input[_PVI] != null) {
    entries[_PVI] = input[_PVI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_PRe] != null) {
    entries[_PRe] = input[_PRe];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpcRequest
 */
const se_CreateVpcRequest = (input: CreateVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CB] != null) {
    entries[_CB] = input[_CB];
  }
  if (input[_APICB] != null) {
    entries[_APICB] = input[_APICB];
  }
  if (input[_IPpv] != null) {
    entries[_IPpv] = input[_IPpv];
  }
  if (input[_ICB] != null) {
    entries[_ICB] = input[_ICB];
  }
  if (input[_IIPIp] != null) {
    entries[_IIPIp] = input[_IIPIp];
  }
  if (input[_INLp] != null) {
    entries[_INLp] = input[_INLp];
  }
  if (input[_IIPI] != null) {
    entries[_IIPI] = input[_IIPI];
  }
  if (input[_INL] != null) {
    entries[_INL] = input[_INL];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ITns] != null) {
    entries[_ITns] = input[_ITns];
  }
  if (input[_ICBNBG] != null) {
    entries[_ICBNBG] = input[_ICBNBG];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpnConnectionRequest
 */
const se_CreateVpnConnectionRequest = (input: CreateVpnConnectionRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CGIu] != null) {
    entries[_CGIu] = input[_CGIu];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_VGI] != null) {
    entries[_VGI] = input[_VGI];
  }
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_O] != null) {
    const memberEntries = se_VpnConnectionOptionsSpecification(input[_O], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpnConnectionRouteRequest
 */
const se_CreateVpnConnectionRouteRequest = (input: CreateVpnConnectionRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  return entries;
};

/**
 * serializeAws_ec2CreateVpnGatewayRequest
 */
const se_CreateVpnGatewayRequest = (input: CreateVpnGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ASA] != null) {
    entries[_ASA] = input[_ASA];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2CreditSpecificationRequest
 */
const se_CreditSpecificationRequest = (input: CreditSpecificationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CCp] != null) {
    entries[_CCp] = input[_CCp];
  }
  return entries;
};

/**
 * serializeAws_ec2CustomerGatewayIdStringList
 */
const se_CustomerGatewayIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`CustomerGatewayId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DataQueries
 */
const se_DataQueries = (input: DataQuery[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_DataQuery(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DataQuery
 */
const se_DataQuery = (input: DataQuery, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Id] != null) {
    entries[_Id] = input[_Id];
  }
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_Met] != null) {
    entries[_Met] = input[_Met];
  }
  if (input[_Sta] != null) {
    entries[_Sta] = input[_Sta];
  }
  if (input[_Per] != null) {
    entries[_Per] = input[_Per];
  }
  return entries;
};

/**
 * serializeAws_ec2DedicatedHostIdList
 */
const se_DedicatedHostIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteCarrierGatewayRequest
 */
const se_DeleteCarrierGatewayRequest = (input: DeleteCarrierGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CGI] != null) {
    entries[_CGI] = input[_CGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteClientVpnEndpointRequest
 */
const se_DeleteClientVpnEndpointRequest = (input: DeleteClientVpnEndpointRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteClientVpnRouteRequest
 */
const se_DeleteClientVpnRouteRequest = (input: DeleteClientVpnRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_TVSI] != null) {
    entries[_TVSI] = input[_TVSI];
  }
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteCoipCidrRequest
 */
const se_DeleteCoipCidrRequest = (input: DeleteCoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_CPIo] != null) {
    entries[_CPIo] = input[_CPIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteCoipPoolRequest
 */
const se_DeleteCoipPoolRequest = (input: DeleteCoipPoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CPIo] != null) {
    entries[_CPIo] = input[_CPIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteCustomerGatewayRequest
 */
const se_DeleteCustomerGatewayRequest = (input: DeleteCustomerGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CGIu] != null) {
    entries[_CGIu] = input[_CGIu];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteDhcpOptionsRequest
 */
const se_DeleteDhcpOptionsRequest = (input: DeleteDhcpOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DOI] != null) {
    entries[_DOI] = input[_DOI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteEgressOnlyInternetGatewayRequest
 */
const se_DeleteEgressOnlyInternetGatewayRequest = (
  input: DeleteEgressOnlyInternetGatewayRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_EOIGI] != null) {
    entries[_EOIGI] = input[_EOIGI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteFleetsRequest
 */
const se_DeleteFleetsRequest = (input: DeleteFleetsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FI] != null) {
    const memberEntries = se_FleetIdSet(input[_FI], context);
    if (input[_FI]?.length === 0) {
      entries.FleetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TI] != null) {
    entries[_TI] = input[_TI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteFlowLogsRequest
 */
const se_DeleteFlowLogsRequest = (input: DeleteFlowLogsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FLI] != null) {
    const memberEntries = se_FlowLogIdList(input[_FLI], context);
    if (input[_FLI]?.length === 0) {
      entries.FlowLogId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteFpgaImageRequest
 */
const se_DeleteFpgaImageRequest = (input: DeleteFpgaImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FII] != null) {
    entries[_FII] = input[_FII];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteInstanceConnectEndpointRequest
 */
const se_DeleteInstanceConnectEndpointRequest = (
  input: DeleteInstanceConnectEndpointRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ICEI] != null) {
    entries[_ICEI] = input[_ICEI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteInstanceEventWindowRequest
 */
const se_DeleteInstanceEventWindowRequest = (input: DeleteInstanceEventWindowRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FD] != null) {
    entries[_FD] = input[_FD];
  }
  if (input[_IEWI] != null) {
    entries[_IEWI] = input[_IEWI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteInternetGatewayRequest
 */
const se_DeleteInternetGatewayRequest = (input: DeleteInternetGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IGI] != null) {
    entries[_IGI] = input[_IGI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteIpamPoolRequest
 */
const se_DeleteIpamPoolRequest = (input: DeleteIpamPoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_Ca] != null) {
    entries[_Ca] = input[_Ca];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteIpamRequest
 */
const se_DeleteIpamRequest = (input: DeleteIpamRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIp] != null) {
    entries[_IIp] = input[_IIp];
  }
  if (input[_Ca] != null) {
    entries[_Ca] = input[_Ca];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteIpamResourceDiscoveryRequest
 */
const se_DeleteIpamResourceDiscoveryRequest = (
  input: DeleteIpamResourceDiscoveryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDI] != null) {
    entries[_IRDI] = input[_IRDI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteIpamScopeRequest
 */
const se_DeleteIpamScopeRequest = (input: DeleteIpamScopeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ISI] != null) {
    entries[_ISI] = input[_ISI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteKeyPairRequest
 */
const se_DeleteKeyPairRequest = (input: DeleteKeyPairRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_KPI] != null) {
    entries[_KPI] = input[_KPI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteLaunchTemplateRequest
 */
const se_DeleteLaunchTemplateRequest = (input: DeleteLaunchTemplateRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteLaunchTemplateVersionsRequest
 */
const se_DeleteLaunchTemplateVersionsRequest = (
  input: DeleteLaunchTemplateVersionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_Ve] != null) {
    const memberEntries = se_VersionStringList(input[_Ve], context);
    if (input[_Ve]?.length === 0) {
      entries.LaunchTemplateVersion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteRequest
 */
const se_DeleteLocalGatewayRouteRequest = (input: DeleteLocalGatewayRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_DPLI] != null) {
    entries[_DPLI] = input[_DPLI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteTableRequest
 */
const se_DeleteLocalGatewayRouteTableRequest = (
  input: DeleteLocalGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest
 */
const se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest = (
  input: DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LGRTVIGAI] != null) {
    entries[_LGRTVIGAI] = input[_LGRTVIGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationRequest
 */
const se_DeleteLocalGatewayRouteTableVpcAssociationRequest = (
  input: DeleteLocalGatewayRouteTableVpcAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LGRTVAI] != null) {
    entries[_LGRTVAI] = input[_LGRTVAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteManagedPrefixListRequest
 */
const se_DeleteManagedPrefixListRequest = (input: DeleteManagedPrefixListRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNatGatewayRequest
 */
const se_DeleteNatGatewayRequest = (input: DeleteNatGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkAclEntryRequest
 */
const se_DeleteNetworkAclEntryRequest = (input: DeleteNetworkAclEntryRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Eg] != null) {
    entries[_Eg] = input[_Eg];
  }
  if (input[_NAI] != null) {
    entries[_NAI] = input[_NAI];
  }
  if (input[_RNu] != null) {
    entries[_RNu] = input[_RNu];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkAclRequest
 */
const se_DeleteNetworkAclRequest = (input: DeleteNetworkAclRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NAI] != null) {
    entries[_NAI] = input[_NAI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisRequest
 */
const se_DeleteNetworkInsightsAccessScopeAnalysisRequest = (
  input: DeleteNetworkInsightsAccessScopeAnalysisRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NIASAI] != null) {
    entries[_NIASAI] = input[_NIASAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkInsightsAccessScopeRequest
 */
const se_DeleteNetworkInsightsAccessScopeRequest = (
  input: DeleteNetworkInsightsAccessScopeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NIASI] != null) {
    entries[_NIASI] = input[_NIASI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkInsightsAnalysisRequest
 */
const se_DeleteNetworkInsightsAnalysisRequest = (
  input: DeleteNetworkInsightsAnalysisRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NIAI] != null) {
    entries[_NIAI] = input[_NIAI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkInsightsPathRequest
 */
const se_DeleteNetworkInsightsPathRequest = (input: DeleteNetworkInsightsPathRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NIPI] != null) {
    entries[_NIPI] = input[_NIPI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkInterfacePermissionRequest
 */
const se_DeleteNetworkInterfacePermissionRequest = (
  input: DeleteNetworkInterfacePermissionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NIPIe] != null) {
    entries[_NIPIe] = input[_NIPIe];
  }
  if (input[_F] != null) {
    entries[_F] = input[_F];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteNetworkInterfaceRequest
 */
const se_DeleteNetworkInterfaceRequest = (input: DeleteNetworkInterfaceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  return entries;
};

/**
 * serializeAws_ec2DeletePlacementGroupRequest
 */
const se_DeletePlacementGroupRequest = (input: DeletePlacementGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  return entries;
};

/**
 * serializeAws_ec2DeletePublicIpv4PoolRequest
 */
const se_DeletePublicIpv4PoolRequest = (input: DeletePublicIpv4PoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PIo] != null) {
    entries[_PIo] = input[_PIo];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteQueuedReservedInstancesIdList
 */
const se_DeleteQueuedReservedInstancesIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteQueuedReservedInstancesRequest
 */
const se_DeleteQueuedReservedInstancesRequest = (
  input: DeleteQueuedReservedInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RIIes] != null) {
    const memberEntries = se_DeleteQueuedReservedInstancesIdList(input[_RIIes], context);
    if (input[_RIIes]?.length === 0) {
      entries.ReservedInstancesId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteRouteRequest
 */
const se_DeleteRouteRequest = (input: DeleteRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_DICB] != null) {
    entries[_DICB] = input[_DICB];
  }
  if (input[_DPLI] != null) {
    entries[_DPLI] = input[_DPLI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteRouteTableRequest
 */
const se_DeleteRouteTableRequest = (input: DeleteRouteTableRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteSecurityGroupRequest
 */
const se_DeleteSecurityGroupRequest = (input: DeleteSecurityGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteSnapshotRequest
 */
const se_DeleteSnapshotRequest = (input: DeleteSnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteSpotDatafeedSubscriptionRequest
 */
const se_DeleteSpotDatafeedSubscriptionRequest = (
  input: DeleteSpotDatafeedSubscriptionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteSubnetCidrReservationRequest
 */
const se_DeleteSubnetCidrReservationRequest = (
  input: DeleteSubnetCidrReservationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_SCRI] != null) {
    entries[_SCRI] = input[_SCRI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteSubnetRequest
 */
const se_DeleteSubnetRequest = (input: DeleteSubnetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTagsRequest
 */
const se_DeleteTagsRequest = (input: DeleteTagsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_R] != null) {
    const memberEntries = se_ResourceIdList(input[_R], context);
    if (input[_R]?.length === 0) {
      entries.ResourceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    if (input[_Ta]?.length === 0) {
      entries.Tag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTrafficMirrorFilterRequest
 */
const se_DeleteTrafficMirrorFilterRequest = (input: DeleteTrafficMirrorFilterRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_TMFI] != null) {
    entries[_TMFI] = input[_TMFI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTrafficMirrorFilterRuleRequest
 */
const se_DeleteTrafficMirrorFilterRuleRequest = (
  input: DeleteTrafficMirrorFilterRuleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TMFRI] != null) {
    entries[_TMFRI] = input[_TMFRI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTrafficMirrorSessionRequest
 */
const se_DeleteTrafficMirrorSessionRequest = (
  input: DeleteTrafficMirrorSessionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TMSI] != null) {
    entries[_TMSI] = input[_TMSI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTrafficMirrorTargetRequest
 */
const se_DeleteTrafficMirrorTargetRequest = (input: DeleteTrafficMirrorTargetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_TMTI] != null) {
    entries[_TMTI] = input[_TMTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayConnectPeerRequest
 */
const se_DeleteTransitGatewayConnectPeerRequest = (
  input: DeleteTransitGatewayConnectPeerRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGCPI] != null) {
    entries[_TGCPI] = input[_TGCPI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayConnectRequest
 */
const se_DeleteTransitGatewayConnectRequest = (
  input: DeleteTransitGatewayConnectRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayMulticastDomainRequest
 */
const se_DeleteTransitGatewayMulticastDomainRequest = (
  input: DeleteTransitGatewayMulticastDomainRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayPeeringAttachmentRequest
 */
const se_DeleteTransitGatewayPeeringAttachmentRequest = (
  input: DeleteTransitGatewayPeeringAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayPolicyTableRequest
 */
const se_DeleteTransitGatewayPolicyTableRequest = (
  input: DeleteTransitGatewayPolicyTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGPTI] != null) {
    entries[_TGPTI] = input[_TGPTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayPrefixListReferenceRequest
 */
const se_DeleteTransitGatewayPrefixListReferenceRequest = (
  input: DeleteTransitGatewayPrefixListReferenceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayRequest
 */
const se_DeleteTransitGatewayRequest = (input: DeleteTransitGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayRouteRequest
 */
const se_DeleteTransitGatewayRouteRequest = (input: DeleteTransitGatewayRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayRouteTableAnnouncementRequest
 */
const se_DeleteTransitGatewayRouteTableAnnouncementRequest = (
  input: DeleteTransitGatewayRouteTableAnnouncementRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTAI] != null) {
    entries[_TGRTAI] = input[_TGRTAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayRouteTableRequest
 */
const se_DeleteTransitGatewayRouteTableRequest = (
  input: DeleteTransitGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteTransitGatewayVpcAttachmentRequest
 */
const se_DeleteTransitGatewayVpcAttachmentRequest = (
  input: DeleteTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVerifiedAccessEndpointRequest
 */
const se_DeleteVerifiedAccessEndpointRequest = (
  input: DeleteVerifiedAccessEndpointRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAEI] != null) {
    entries[_VAEI] = input[_VAEI];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVerifiedAccessGroupRequest
 */
const se_DeleteVerifiedAccessGroupRequest = (input: DeleteVerifiedAccessGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVerifiedAccessInstanceRequest
 */
const se_DeleteVerifiedAccessInstanceRequest = (
  input: DeleteVerifiedAccessInstanceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVerifiedAccessTrustProviderRequest
 */
const se_DeleteVerifiedAccessTrustProviderRequest = (
  input: DeleteVerifiedAccessTrustProviderRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VATPI] != null) {
    entries[_VATPI] = input[_VATPI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVolumeRequest
 */
const se_DeleteVolumeRequest = (input: DeleteVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpcEndpointConnectionNotificationsRequest
 */
const se_DeleteVpcEndpointConnectionNotificationsRequest = (
  input: DeleteVpcEndpointConnectionNotificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CNIo] != null) {
    const memberEntries = se_ConnectionNotificationIdsList(input[_CNIo], context);
    if (input[_CNIo]?.length === 0) {
      entries.ConnectionNotificationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionNotificationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpcEndpointServiceConfigurationsRequest
 */
const se_DeleteVpcEndpointServiceConfigurationsRequest = (
  input: DeleteVpcEndpointServiceConfigurationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIer] != null) {
    const memberEntries = se_VpcEndpointServiceIdList(input[_SIer], context);
    if (input[_SIer]?.length === 0) {
      entries.ServiceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpcEndpointsRequest
 */
const se_DeleteVpcEndpointsRequest = (input: DeleteVpcEndpointsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VEI] != null) {
    const memberEntries = se_VpcEndpointIdList(input[_VEI], context);
    if (input[_VEI]?.length === 0) {
      entries.VpcEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpcPeeringConnectionRequest
 */
const se_DeleteVpcPeeringConnectionRequest = (
  input: DeleteVpcPeeringConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpcRequest
 */
const se_DeleteVpcRequest = (input: DeleteVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpnConnectionRequest
 */
const se_DeleteVpnConnectionRequest = (input: DeleteVpnConnectionRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpnConnectionRouteRequest
 */
const se_DeleteVpnConnectionRouteRequest = (input: DeleteVpnConnectionRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  return entries;
};

/**
 * serializeAws_ec2DeleteVpnGatewayRequest
 */
const se_DeleteVpnGatewayRequest = (input: DeleteVpnGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VGI] != null) {
    entries[_VGI] = input[_VGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeprovisionByoipCidrRequest
 */
const se_DeprovisionByoipCidrRequest = (input: DeprovisionByoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeprovisionIpamByoasnRequest
 */
const se_DeprovisionIpamByoasnRequest = (input: DeprovisionIpamByoasnRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIp] != null) {
    entries[_IIp] = input[_IIp];
  }
  if (input[_As] != null) {
    entries[_As] = input[_As];
  }
  return entries;
};

/**
 * serializeAws_ec2DeprovisionIpamPoolCidrRequest
 */
const se_DeprovisionIpamPoolCidrRequest = (input: DeprovisionIpamPoolCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  return entries;
};

/**
 * serializeAws_ec2DeprovisionPublicIpv4PoolCidrRequest
 */
const se_DeprovisionPublicIpv4PoolCidrRequest = (
  input: DeprovisionPublicIpv4PoolCidrRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PIo] != null) {
    entries[_PIo] = input[_PIo];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  return entries;
};

/**
 * serializeAws_ec2DeregisterImageRequest
 */
const se_DeregisterImageRequest = (input: DeregisterImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeregisterInstanceEventNotificationAttributesRequest
 */
const se_DeregisterInstanceEventNotificationAttributesRequest = (
  input: DeregisterInstanceEventNotificationAttributesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ITA] != null) {
    const memberEntries = se_DeregisterInstanceTagAttributeRequest(input[_ITA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagAttribute.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeregisterInstanceTagAttributeRequest
 */
const se_DeregisterInstanceTagAttributeRequest = (
  input: DeregisterInstanceTagAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IATOI] != null) {
    entries[_IATOI] = input[_IATOI];
  }
  if (input[_ITK] != null) {
    const memberEntries = se_InstanceTagKeySet(input[_ITK], context);
    if (input[_ITK]?.length === 0) {
      entries.InstanceTagKey = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersRequest
 */
const se_DeregisterTransitGatewayMulticastGroupMembersRequest = (
  input: DeregisterTransitGatewayMulticastGroupMembersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_GIA] != null) {
    entries[_GIA] = input[_GIA];
  }
  if (input[_NIIe] != null) {
    const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input[_NIIe], context);
    if (input[_NIIe]?.length === 0) {
      entries.NetworkInterfaceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesRequest
 */
const se_DeregisterTransitGatewayMulticastGroupSourcesRequest = (
  input: DeregisterTransitGatewayMulticastGroupSourcesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_GIA] != null) {
    entries[_GIA] = input[_GIA];
  }
  if (input[_NIIe] != null) {
    const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input[_NIIe], context);
    if (input[_NIIe]?.length === 0) {
      entries.NetworkInterfaceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAccountAttributesRequest
 */
const se_DescribeAccountAttributesRequest = (input: DescribeAccountAttributesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AN] != null) {
    const memberEntries = se_AccountAttributeNameStringList(input[_AN], context);
    if (input[_AN]?.length === 0) {
      entries.AttributeName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AttributeName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAddressesAttributeRequest
 */
const se_DescribeAddressesAttributeRequest = (
  input: DescribeAddressesAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AIll] != null) {
    const memberEntries = se_AllocationIds(input[_AIll], context);
    if (input[_AIll]?.length === 0) {
      entries.AllocationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAddressesRequest
 */
const se_DescribeAddressesRequest = (input: DescribeAddressesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIu] != null) {
    const memberEntries = se_PublicIpStringList(input[_PIu], context);
    if (input[_PIu]?.length === 0) {
      entries.PublicIp = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AIll] != null) {
    const memberEntries = se_AllocationIdList(input[_AIll], context);
    if (input[_AIll]?.length === 0) {
      entries.AllocationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAddressTransfersRequest
 */
const se_DescribeAddressTransfersRequest = (input: DescribeAddressTransfersRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIll] != null) {
    const memberEntries = se_AllocationIdList(input[_AIll], context);
    if (input[_AIll]?.length === 0) {
      entries.AllocationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAggregateIdFormatRequest
 */
const se_DescribeAggregateIdFormatRequest = (input: DescribeAggregateIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAvailabilityZonesRequest
 */
const se_DescribeAvailabilityZonesRequest = (input: DescribeAvailabilityZonesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ZN] != null) {
    const memberEntries = se_ZoneNameStringList(input[_ZN], context);
    if (input[_ZN]?.length === 0) {
      entries.ZoneName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ZoneName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ZI] != null) {
    const memberEntries = se_ZoneIdStringList(input[_ZI], context);
    if (input[_ZI]?.length === 0) {
      entries.ZoneId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ZoneId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AAZ] != null) {
    entries[_AAZ] = input[_AAZ];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeAwsNetworkPerformanceMetricSubscriptionsRequest
 */
const se_DescribeAwsNetworkPerformanceMetricSubscriptionsRequest = (
  input: DescribeAwsNetworkPerformanceMetricSubscriptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeBundleTasksRequest
 */
const se_DescribeBundleTasksRequest = (input: DescribeBundleTasksRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_BIun] != null) {
    const memberEntries = se_BundleIdStringList(input[_BIun], context);
    if (input[_BIun]?.length === 0) {
      entries.BundleId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BundleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeByoipCidrsRequest
 */
const se_DescribeByoipCidrsRequest = (input: DescribeByoipCidrsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeCapacityBlockOfferingsRequest
 */
const se_DescribeCapacityBlockOfferingsRequest = (
  input: DescribeCapacityBlockOfferingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_SDR] != null) {
    entries[_SDR] = input[_SDR].toISOString().split(".")[0] + "Z";
  }
  if (input[_EDR] != null) {
    entries[_EDR] = input[_EDR].toISOString().split(".")[0] + "Z";
  }
  if (input[_CDH] != null) {
    entries[_CDH] = input[_CDH];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeCapacityReservationFleetsRequest
 */
const se_DescribeCapacityReservationFleetsRequest = (
  input: DescribeCapacityReservationFleetsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CRFI] != null) {
    const memberEntries = se_CapacityReservationFleetIdSet(input[_CRFI], context);
    if (input[_CRFI]?.length === 0) {
      entries.CapacityReservationFleetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationFleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeCapacityReservationsRequest
 */
const se_DescribeCapacityReservationsRequest = (
  input: DescribeCapacityReservationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CRIa] != null) {
    const memberEntries = se_CapacityReservationIdSet(input[_CRIa], context);
    if (input[_CRIa]?.length === 0) {
      entries.CapacityReservationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeCarrierGatewaysRequest
 */
const se_DescribeCarrierGatewaysRequest = (input: DescribeCarrierGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CGIa] != null) {
    const memberEntries = se_CarrierGatewayIdSet(input[_CGIa], context);
    if (input[_CGIa]?.length === 0) {
      entries.CarrierGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CarrierGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeClassicLinkInstancesRequest
 */
const se_DescribeClassicLinkInstancesRequest = (
  input: DescribeClassicLinkInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    if (input[_IIns]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeClientVpnAuthorizationRulesRequest
 */
const se_DescribeClientVpnAuthorizationRulesRequest = (
  input: DescribeClientVpnAuthorizationRulesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeClientVpnConnectionsRequest
 */
const se_DescribeClientVpnConnectionsRequest = (
  input: DescribeClientVpnConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeClientVpnEndpointsRequest
 */
const se_DescribeClientVpnEndpointsRequest = (
  input: DescribeClientVpnEndpointsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CVEIl] != null) {
    const memberEntries = se_ClientVpnEndpointIdList(input[_CVEIl], context);
    if (input[_CVEIl]?.length === 0) {
      entries.ClientVpnEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientVpnEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeClientVpnRoutesRequest
 */
const se_DescribeClientVpnRoutesRequest = (input: DescribeClientVpnRoutesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeClientVpnTargetNetworksRequest
 */
const se_DescribeClientVpnTargetNetworksRequest = (
  input: DescribeClientVpnTargetNetworksRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_AIs] != null) {
    const memberEntries = se_ValueStringList(input[_AIs], context);
    if (input[_AIs]?.length === 0) {
      entries.AssociationIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeCoipPoolsRequest
 */
const se_DescribeCoipPoolsRequest = (input: DescribeCoipPoolsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_PIoo] != null) {
    const memberEntries = se_CoipPoolIdSet(input[_PIoo], context);
    if (input[_PIoo]?.length === 0) {
      entries.PoolId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeConversionTasksRequest
 */
const se_DescribeConversionTasksRequest = (input: DescribeConversionTasksRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CTIo] != null) {
    const memberEntries = se_ConversionIdStringList(input[_CTIo], context);
    if (input[_CTIo]?.length === 0) {
      entries.ConversionTaskId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConversionTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeCustomerGatewaysRequest
 */
const se_DescribeCustomerGatewaysRequest = (input: DescribeCustomerGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CGIus] != null) {
    const memberEntries = se_CustomerGatewayIdStringList(input[_CGIus], context);
    if (input[_CGIus]?.length === 0) {
      entries.CustomerGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomerGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeDhcpOptionsRequest
 */
const se_DescribeDhcpOptionsRequest = (input: DescribeDhcpOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DOIh] != null) {
    const memberEntries = se_DhcpOptionsIdStringList(input[_DOIh], context);
    if (input[_DOIh]?.length === 0) {
      entries.DhcpOptionsId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DhcpOptionsId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeEgressOnlyInternetGatewaysRequest
 */
const se_DescribeEgressOnlyInternetGatewaysRequest = (
  input: DescribeEgressOnlyInternetGatewaysRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_EOIGIg] != null) {
    const memberEntries = se_EgressOnlyInternetGatewayIdList(input[_EOIGIg], context);
    if (input[_EOIGIg]?.length === 0) {
      entries.EgressOnlyInternetGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EgressOnlyInternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeElasticGpusRequest
 */
const se_DescribeElasticGpusRequest = (input: DescribeElasticGpusRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_EGI] != null) {
    const memberEntries = se_ElasticGpuIdSet(input[_EGI], context);
    if (input[_EGI]?.length === 0) {
      entries.ElasticGpuId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticGpuId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeExportImageTasksRequest
 */
const se_DescribeExportImageTasksRequest = (input: DescribeExportImageTasksRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EITI] != null) {
    const memberEntries = se_ExportImageTaskIdList(input[_EITI], context);
    if (input[_EITI]?.length === 0) {
      entries.ExportImageTaskId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExportImageTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeExportTasksRequest
 */
const se_DescribeExportTasksRequest = (input: DescribeExportTasksRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ETIx] != null) {
    const memberEntries = se_ExportTaskIdStringList(input[_ETIx], context);
    if (input[_ETIx]?.length === 0) {
      entries.ExportTaskId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExportTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFastLaunchImagesRequest
 */
const se_DescribeFastLaunchImagesRequest = (input: DescribeFastLaunchImagesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IImag] != null) {
    const memberEntries = se_FastLaunchImageIdList(input[_IImag], context);
    if (input[_IImag]?.length === 0) {
      entries.ImageId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFastSnapshotRestoresRequest
 */
const se_DescribeFastSnapshotRestoresRequest = (
  input: DescribeFastSnapshotRestoresRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFleetHistoryRequest
 */
const se_DescribeFleetHistoryRequest = (input: DescribeFleetHistoryRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ETv] != null) {
    entries[_ETv] = input[_ETv];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_FIl] != null) {
    entries[_FIl] = input[_FIl];
  }
  if (input[_STt] != null) {
    entries[_STt] = input[_STt].toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFleetInstancesRequest
 */
const se_DescribeFleetInstancesRequest = (input: DescribeFleetInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_FIl] != null) {
    entries[_FIl] = input[_FIl];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFleetsRequest
 */
const se_DescribeFleetsRequest = (input: DescribeFleetsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_FI] != null) {
    const memberEntries = se_FleetIdSet(input[_FI], context);
    if (input[_FI]?.length === 0) {
      entries.FleetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFlowLogsRequest
 */
const se_DescribeFlowLogsRequest = (input: DescribeFlowLogsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fil] != null) {
    const memberEntries = se_FilterList(input[_Fil], context);
    if (input[_Fil]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_FLI] != null) {
    const memberEntries = se_FlowLogIdList(input[_FLI], context);
    if (input[_FLI]?.length === 0) {
      entries.FlowLogId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFpgaImageAttributeRequest
 */
const se_DescribeFpgaImageAttributeRequest = (
  input: DescribeFpgaImageAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FII] != null) {
    entries[_FII] = input[_FII];
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeFpgaImagesRequest
 */
const se_DescribeFpgaImagesRequest = (input: DescribeFpgaImagesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FIIp] != null) {
    const memberEntries = se_FpgaImageIdList(input[_FIIp], context);
    if (input[_FIIp]?.length === 0) {
      entries.FpgaImageId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FpgaImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Ow] != null) {
    const memberEntries = se_OwnerStringList(input[_Ow], context);
    if (input[_Ow]?.length === 0) {
      entries.Owner = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeHostReservationOfferingsRequest
 */
const se_DescribeHostReservationOfferingsRequest = (
  input: DescribeHostReservationOfferingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Fil] != null) {
    const memberEntries = se_FilterList(input[_Fil], context);
    if (input[_Fil]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MD] != null) {
    entries[_MD] = input[_MD];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_MDi] != null) {
    entries[_MDi] = input[_MDi];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_OI] != null) {
    entries[_OI] = input[_OI];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeHostReservationsRequest
 */
const se_DescribeHostReservationsRequest = (input: DescribeHostReservationsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fil] != null) {
    const memberEntries = se_FilterList(input[_Fil], context);
    if (input[_Fil]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_HRIS] != null) {
    const memberEntries = se_HostReservationIdSet(input[_HRIS], context);
    if (input[_HRIS]?.length === 0) {
      entries.HostReservationIdSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostReservationIdSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeHostsRequest
 */
const se_DescribeHostsRequest = (input: DescribeHostsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fil] != null) {
    const memberEntries = se_FilterList(input[_Fil], context);
    if (input[_Fil]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_HI] != null) {
    const memberEntries = se_RequestHostIdList(input[_HI], context);
    if (input[_HI]?.length === 0) {
      entries.HostId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIamInstanceProfileAssociationsRequest
 */
const se_DescribeIamInstanceProfileAssociationsRequest = (
  input: DescribeIamInstanceProfileAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AIs] != null) {
    const memberEntries = se_AssociationIdList(input[_AIs], context);
    if (input[_AIs]?.length === 0) {
      entries.AssociationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIdentityIdFormatRequest
 */
const se_DescribeIdentityIdFormatRequest = (input: DescribeIdentityIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_PAr] != null) {
    entries[_PAr] = input[_PAr];
  }
  if (input[_Res] != null) {
    entries[_Res] = input[_Res];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIdFormatRequest
 */
const se_DescribeIdFormatRequest = (input: DescribeIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Res] != null) {
    entries[_Res] = input[_Res];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeImageAttributeRequest
 */
const se_DescribeImageAttributeRequest = (input: DescribeImageAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeImagesRequest
 */
const se_DescribeImagesRequest = (input: DescribeImagesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_EU] != null) {
    const memberEntries = se_ExecutableByStringList(input[_EU], context);
    if (input[_EU]?.length === 0) {
      entries.ExecutableBy = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExecutableBy.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IImag] != null) {
    const memberEntries = se_ImageIdStringList(input[_IImag], context);
    if (input[_IImag]?.length === 0) {
      entries.ImageId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Ow] != null) {
    const memberEntries = se_OwnerStringList(input[_Ow], context);
    if (input[_Ow]?.length === 0) {
      entries.Owner = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ID] != null) {
    entries[_ID] = input[_ID];
  }
  if (input[_IDn] != null) {
    entries[_IDn] = input[_IDn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeImportImageTasksRequest
 */
const se_DescribeImportImageTasksRequest = (input: DescribeImportImageTasksRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ITIm] != null) {
    const memberEntries = se_ImportTaskIdList(input[_ITIm], context);
    if (input[_ITIm]?.length === 0) {
      entries.ImportTaskId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeImportSnapshotTasksRequest
 */
const se_DescribeImportSnapshotTasksRequest = (
  input: DescribeImportSnapshotTasksRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filters = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ITIm] != null) {
    const memberEntries = se_ImportSnapshotTaskIdList(input[_ITIm], context);
    if (input[_ITIm]?.length === 0) {
      entries.ImportTaskId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceAttributeRequest
 */
const se_DescribeInstanceAttributeRequest = (input: DescribeInstanceAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceConnectEndpointsRequest
 */
const se_DescribeInstanceConnectEndpointsRequest = (
  input: DescribeInstanceConnectEndpointsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ICEIn] != null) {
    const memberEntries = se_ValueStringList(input[_ICEIn], context);
    if (input[_ICEIn]?.length === 0) {
      entries.InstanceConnectEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceConnectEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceCreditSpecificationsRequest
 */
const se_DescribeInstanceCreditSpecificationsRequest = (
  input: DescribeInstanceCreditSpecificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    if (input[_IIns]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceEventNotificationAttributesRequest
 */
const se_DescribeInstanceEventNotificationAttributesRequest = (
  input: DescribeInstanceEventNotificationAttributesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceEventWindowsRequest
 */
const se_DescribeInstanceEventWindowsRequest = (
  input: DescribeInstanceEventWindowsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IEWIn] != null) {
    const memberEntries = se_InstanceEventWindowIdSet(input[_IEWIn], context);
    if (input[_IEWIn]?.length === 0) {
      entries.InstanceEventWindowId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceEventWindowId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstancesRequest
 */
const se_DescribeInstancesRequest = (input: DescribeInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    if (input[_IIns]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceStatusRequest
 */
const se_DescribeInstanceStatusRequest = (input: DescribeInstanceStatusRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    if (input[_IIns]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IAI] != null) {
    entries[_IAI] = input[_IAI];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceTopologyGroupNameSet
 */
const se_DescribeInstanceTopologyGroupNameSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceTopologyInstanceIdSet
 */
const se_DescribeInstanceTopologyInstanceIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceTopologyRequest
 */
const se_DescribeInstanceTopologyRequest = (input: DescribeInstanceTopologyRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_IIns] != null) {
    const memberEntries = se_DescribeInstanceTopologyInstanceIdSet(input[_IIns], context);
    if (input[_IIns]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_GNr] != null) {
    const memberEntries = se_DescribeInstanceTopologyGroupNameSet(input[_GNr], context);
    if (input[_GNr]?.length === 0) {
      entries.GroupName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceTypeOfferingsRequest
 */
const se_DescribeInstanceTypeOfferingsRequest = (
  input: DescribeInstanceTypeOfferingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LT] != null) {
    entries[_LT] = input[_LT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInstanceTypesRequest
 */
const se_DescribeInstanceTypesRequest = (input: DescribeInstanceTypesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ITnst] != null) {
    const memberEntries = se_RequestInstanceTypeList(input[_ITnst], context);
    if (input[_ITnst]?.length === 0) {
      entries.InstanceType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeInternetGatewaysRequest
 */
const se_DescribeInternetGatewaysRequest = (input: DescribeInternetGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IGIn] != null) {
    const memberEntries = se_InternetGatewayIdList(input[_IGIn], context);
    if (input[_IGIn]?.length === 0) {
      entries.InternetGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIpamByoasnRequest
 */
const se_DescribeIpamByoasnRequest = (input: DescribeIpamByoasnRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIpamPoolsRequest
 */
const se_DescribeIpamPoolsRequest = (input: DescribeIpamPoolsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_IPIp] != null) {
    const memberEntries = se_ValueStringList(input[_IPIp], context);
    if (input[_IPIp]?.length === 0) {
      entries.IpamPoolId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamPoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIpamResourceDiscoveriesRequest
 */
const se_DescribeIpamResourceDiscoveriesRequest = (
  input: DescribeIpamResourceDiscoveriesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDIp] != null) {
    const memberEntries = se_ValueStringList(input[_IRDIp], context);
    if (input[_IRDIp]?.length === 0) {
      entries.IpamResourceDiscoveryId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamResourceDiscoveryId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIpamResourceDiscoveryAssociationsRequest
 */
const se_DescribeIpamResourceDiscoveryAssociationsRequest = (
  input: DescribeIpamResourceDiscoveryAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDAI] != null) {
    const memberEntries = se_ValueStringList(input[_IRDAI], context);
    if (input[_IRDAI]?.length === 0) {
      entries.IpamResourceDiscoveryAssociationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamResourceDiscoveryAssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIpamScopesRequest
 */
const se_DescribeIpamScopesRequest = (input: DescribeIpamScopesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_ISIp] != null) {
    const memberEntries = se_ValueStringList(input[_ISIp], context);
    if (input[_ISIp]?.length === 0) {
      entries.IpamScopeId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamScopeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIpamsRequest
 */
const se_DescribeIpamsRequest = (input: DescribeIpamsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_IIpa] != null) {
    const memberEntries = se_ValueStringList(input[_IIpa], context);
    if (input[_IIpa]?.length === 0) {
      entries.IpamId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpamId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeIpv6PoolsRequest
 */
const se_DescribeIpv6PoolsRequest = (input: DescribeIpv6PoolsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_PIoo] != null) {
    const memberEntries = se_Ipv6PoolIdList(input[_PIoo], context);
    if (input[_PIoo]?.length === 0) {
      entries.PoolId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeKeyPairsRequest
 */
const se_DescribeKeyPairsRequest = (input: DescribeKeyPairsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_KNe] != null) {
    const memberEntries = se_KeyNameStringList(input[_KNe], context);
    if (input[_KNe]?.length === 0) {
      entries.KeyName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `KeyName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_KPIe] != null) {
    const memberEntries = se_KeyPairIdStringList(input[_KPIe], context);
    if (input[_KPIe]?.length === 0) {
      entries.KeyPairId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `KeyPairId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPK] != null) {
    entries[_IPK] = input[_IPK];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLaunchTemplatesRequest
 */
const se_DescribeLaunchTemplatesRequest = (input: DescribeLaunchTemplatesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LTIa] != null) {
    const memberEntries = se_LaunchTemplateIdStringList(input[_LTIa], context);
    if (input[_LTIa]?.length === 0) {
      entries.LaunchTemplateId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LTNa] != null) {
    const memberEntries = se_LaunchTemplateNameStringList(input[_LTNa], context);
    if (input[_LTNa]?.length === 0) {
      entries.LaunchTemplateName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLaunchTemplateVersionsRequest
 */
const se_DescribeLaunchTemplateVersionsRequest = (
  input: DescribeLaunchTemplateVersionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_Ve] != null) {
    const memberEntries = se_VersionStringList(input[_Ve], context);
    if (input[_Ve]?.length === 0) {
      entries.LaunchTemplateVersion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MVi] != null) {
    entries[_MVi] = input[_MVi];
  }
  if (input[_MVa] != null) {
    entries[_MVa] = input[_MVa];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RAe] != null) {
    entries[_RAe] = input[_RAe];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLocalGatewayRouteTablesRequest
 */
const se_DescribeLocalGatewayRouteTablesRequest = (
  input: DescribeLocalGatewayRouteTablesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LGRTIo] != null) {
    const memberEntries = se_LocalGatewayRouteTableIdSet(input[_LGRTIo], context);
    if (input[_LGRTIo]?.length === 0) {
      entries.LocalGatewayRouteTableId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest
 */
const se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest = (
  input: DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LGRTVIGAIo] != null) {
    const memberEntries = se_LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet(input[_LGRTVIGAIo], context);
    if (input[_LGRTVIGAIo]?.length === 0) {
      entries.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayRouteTableVirtualInterfaceGroupAssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsRequest
 */
const se_DescribeLocalGatewayRouteTableVpcAssociationsRequest = (
  input: DescribeLocalGatewayRouteTableVpcAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LGRTVAIo] != null) {
    const memberEntries = se_LocalGatewayRouteTableVpcAssociationIdSet(input[_LGRTVAIo], context);
    if (input[_LGRTVAIo]?.length === 0) {
      entries.LocalGatewayRouteTableVpcAssociationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayRouteTableVpcAssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLocalGatewaysRequest
 */
const se_DescribeLocalGatewaysRequest = (input: DescribeLocalGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_LGIo] != null) {
    const memberEntries = se_LocalGatewayIdSet(input[_LGIo], context);
    if (input[_LGIo]?.length === 0) {
      entries.LocalGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsRequest
 */
const se_DescribeLocalGatewayVirtualInterfaceGroupsRequest = (
  input: DescribeLocalGatewayVirtualInterfaceGroupsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LGVIGIo] != null) {
    const memberEntries = se_LocalGatewayVirtualInterfaceGroupIdSet(input[_LGVIGIo], context);
    if (input[_LGVIGIo]?.length === 0) {
      entries.LocalGatewayVirtualInterfaceGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayVirtualInterfaceGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLocalGatewayVirtualInterfacesRequest
 */
const se_DescribeLocalGatewayVirtualInterfacesRequest = (
  input: DescribeLocalGatewayVirtualInterfacesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LGVII] != null) {
    const memberEntries = se_LocalGatewayVirtualInterfaceIdSet(input[_LGVII], context);
    if (input[_LGVII]?.length === 0) {
      entries.LocalGatewayVirtualInterfaceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalGatewayVirtualInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeLockedSnapshotsRequest
 */
const se_DescribeLockedSnapshotsRequest = (input: DescribeLockedSnapshotsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_SIna] != null) {
    const memberEntries = se_SnapshotIdStringList(input[_SIna], context);
    if (input[_SIna]?.length === 0) {
      entries.SnapshotId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeManagedPrefixListsRequest
 */
const se_DescribeManagedPrefixListsRequest = (
  input: DescribeManagedPrefixListsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_PLIr] != null) {
    const memberEntries = se_ValueStringList(input[_PLIr], context);
    if (input[_PLIr]?.length === 0) {
      entries.PrefixListId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeMovingAddressesRequest
 */
const se_DescribeMovingAddressesRequest = (input: DescribeMovingAddressesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_PIu] != null) {
    const memberEntries = se_ValueStringList(input[_PIu], context);
    if (input[_PIu]?.length === 0) {
      entries.PublicIp = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNatGatewaysRequest
 */
const se_DescribeNatGatewaysRequest = (input: DescribeNatGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fil] != null) {
    const memberEntries = se_FilterList(input[_Fil], context);
    if (input[_Fil]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NGIa] != null) {
    const memberEntries = se_NatGatewayIdStringList(input[_NGIa], context);
    if (input[_NGIa]?.length === 0) {
      entries.NatGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NatGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkAclsRequest
 */
const se_DescribeNetworkAclsRequest = (input: DescribeNetworkAclsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NAIe] != null) {
    const memberEntries = se_NetworkAclIdStringList(input[_NAIe], context);
    if (input[_NAIe]?.length === 0) {
      entries.NetworkAclId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkAclId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesRequest
 */
const se_DescribeNetworkInsightsAccessScopeAnalysesRequest = (
  input: DescribeNetworkInsightsAccessScopeAnalysesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NIASAIe] != null) {
    const memberEntries = se_NetworkInsightsAccessScopeAnalysisIdList(input[_NIASAIe], context);
    if (input[_NIASAIe]?.length === 0) {
      entries.NetworkInsightsAccessScopeAnalysisId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsAccessScopeAnalysisId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NIASI] != null) {
    entries[_NIASI] = input[_NIASI];
  }
  if (input[_ASTB] != null) {
    entries[_ASTB] = input[_ASTB].toISOString().split(".")[0] + "Z";
  }
  if (input[_ASTE] != null) {
    entries[_ASTE] = input[_ASTE].toISOString().split(".")[0] + "Z";
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInsightsAccessScopesRequest
 */
const se_DescribeNetworkInsightsAccessScopesRequest = (
  input: DescribeNetworkInsightsAccessScopesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NIASIe] != null) {
    const memberEntries = se_NetworkInsightsAccessScopeIdList(input[_NIASIe], context);
    if (input[_NIASIe]?.length === 0) {
      entries.NetworkInsightsAccessScopeId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsAccessScopeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInsightsAnalysesRequest
 */
const se_DescribeNetworkInsightsAnalysesRequest = (
  input: DescribeNetworkInsightsAnalysesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NIAIe] != null) {
    const memberEntries = se_NetworkInsightsAnalysisIdList(input[_NIAIe], context);
    if (input[_NIAIe]?.length === 0) {
      entries.NetworkInsightsAnalysisId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsAnalysisId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NIPI] != null) {
    entries[_NIPI] = input[_NIPI];
  }
  if (input[_AST] != null) {
    entries[_AST] = input[_AST].toISOString().split(".")[0] + "Z";
  }
  if (input[_AET] != null) {
    entries[_AET] = input[_AET].toISOString().split(".")[0] + "Z";
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInsightsPathsRequest
 */
const se_DescribeNetworkInsightsPathsRequest = (
  input: DescribeNetworkInsightsPathsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NIPIet] != null) {
    const memberEntries = se_NetworkInsightsPathIdList(input[_NIPIet], context);
    if (input[_NIPIet]?.length === 0) {
      entries.NetworkInsightsPathId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInsightsPathId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInterfaceAttributeRequest
 */
const se_DescribeNetworkInterfaceAttributeRequest = (
  input: DescribeNetworkInterfaceAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInterfacePermissionsRequest
 */
const se_DescribeNetworkInterfacePermissionsRequest = (
  input: DescribeNetworkInterfacePermissionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NIPIetw] != null) {
    const memberEntries = se_NetworkInterfacePermissionIdList(input[_NIPIetw], context);
    if (input[_NIPIetw]?.length === 0) {
      entries.NetworkInterfacePermissionId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfacePermissionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeNetworkInterfacesRequest
 */
const se_DescribeNetworkInterfacesRequest = (input: DescribeNetworkInterfacesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NIIe] != null) {
    const memberEntries = se_NetworkInterfaceIdList(input[_NIIe], context);
    if (input[_NIIe]?.length === 0) {
      entries.NetworkInterfaceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribePlacementGroupsRequest
 */
const se_DescribePlacementGroupsRequest = (input: DescribePlacementGroupsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GNr] != null) {
    const memberEntries = se_PlacementGroupStringList(input[_GNr], context);
    if (input[_GNr]?.length === 0) {
      entries.GroupName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_GIro] != null) {
    const memberEntries = se_PlacementGroupIdStringList(input[_GIro], context);
    if (input[_GIro]?.length === 0) {
      entries.GroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribePrefixListsRequest
 */
const se_DescribePrefixListsRequest = (input: DescribePrefixListsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_PLIr] != null) {
    const memberEntries = se_PrefixListResourceIdStringList(input[_PLIr], context);
    if (input[_PLIr]?.length === 0) {
      entries.PrefixListId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribePrincipalIdFormatRequest
 */
const se_DescribePrincipalIdFormatRequest = (input: DescribePrincipalIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_R] != null) {
    const memberEntries = se_ResourceList(input[_R], context);
    if (input[_R]?.length === 0) {
      entries.Resource = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Resource.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribePublicIpv4PoolsRequest
 */
const se_DescribePublicIpv4PoolsRequest = (input: DescribePublicIpv4PoolsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_PIoo] != null) {
    const memberEntries = se_PublicIpv4PoolIdStringList(input[_PIoo], context);
    if (input[_PIoo]?.length === 0) {
      entries.PoolId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeRegionsRequest
 */
const se_DescribeRegionsRequest = (input: DescribeRegionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RNe] != null) {
    const memberEntries = se_RegionNameStringList(input[_RNe], context);
    if (input[_RNe]?.length === 0) {
      entries.RegionName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RegionName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ARll] != null) {
    entries[_ARll] = input[_ARll];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeReplaceRootVolumeTasksRequest
 */
const se_DescribeReplaceRootVolumeTasksRequest = (
  input: DescribeReplaceRootVolumeTasksRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_RRVTI] != null) {
    const memberEntries = se_ReplaceRootVolumeTaskIds(input[_RRVTI], context);
    if (input[_RRVTI]?.length === 0) {
      entries.ReplaceRootVolumeTaskId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReplaceRootVolumeTaskId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeReservedInstancesListingsRequest
 */
const se_DescribeReservedInstancesListingsRequest = (
  input: DescribeReservedInstancesListingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RIIe] != null) {
    entries[_RIIe] = input[_RIIe];
  }
  if (input[_RILI] != null) {
    entries[_RILI] = input[_RILI];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeReservedInstancesModificationsRequest
 */
const se_DescribeReservedInstancesModificationsRequest = (
  input: DescribeReservedInstancesModificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RIMI] != null) {
    const memberEntries = se_ReservedInstancesModificationIdStringList(input[_RIMI], context);
    if (input[_RIMI]?.length === 0) {
      entries.ReservedInstancesModificationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesModificationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeReservedInstancesOfferingsRequest
 */
const se_DescribeReservedInstancesOfferingsRequest = (
  input: DescribeReservedInstancesOfferingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IM] != null) {
    entries[_IM] = input[_IM];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_MD] != null) {
    entries[_MD] = input[_MD];
  }
  if (input[_MIC] != null) {
    entries[_MIC] = input[_MIC];
  }
  if (input[_MDi] != null) {
    entries[_MDi] = input[_MDi];
  }
  if (input[_OC] != null) {
    entries[_OC] = input[_OC];
  }
  if (input[_PDr] != null) {
    entries[_PDr] = input[_PDr];
  }
  if (input[_RIOI] != null) {
    const memberEntries = se_ReservedInstancesOfferingIdStringList(input[_RIOI], context);
    if (input[_RIOI]?.length === 0) {
      entries.ReservedInstancesOfferingId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesOfferingId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ITns] != null) {
    entries[_ITns] = input[_ITns];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_OT] != null) {
    entries[_OT] = input[_OT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeReservedInstancesRequest
 */
const se_DescribeReservedInstancesRequest = (input: DescribeReservedInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_OC] != null) {
    entries[_OC] = input[_OC];
  }
  if (input[_RIIes] != null) {
    const memberEntries = se_ReservedInstancesIdStringList(input[_RIIes], context);
    if (input[_RIIes]?.length === 0) {
      entries.ReservedInstancesId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_OT] != null) {
    entries[_OT] = input[_OT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeRouteTablesRequest
 */
const se_DescribeRouteTablesRequest = (input: DescribeRouteTablesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RTIo] != null) {
    const memberEntries = se_RouteTableIdStringList(input[_RTIo], context);
    if (input[_RTIo]?.length === 0) {
      entries.RouteTableId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeScheduledInstanceAvailabilityRequest
 */
const se_DescribeScheduledInstanceAvailabilityRequest = (
  input: DescribeScheduledInstanceAvailabilityRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_FSSTR] != null) {
    const memberEntries = se_SlotDateTimeRangeRequest(input[_FSSTR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FirstSlotStartTimeRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_MSDIH] != null) {
    entries[_MSDIH] = input[_MSDIH];
  }
  if (input[_MSDIHi] != null) {
    entries[_MSDIHi] = input[_MSDIHi];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Rec] != null) {
    const memberEntries = se_ScheduledInstanceRecurrenceRequest(input[_Rec], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Recurrence.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeScheduledInstancesRequest
 */
const se_DescribeScheduledInstancesRequest = (
  input: DescribeScheduledInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_SIIc] != null) {
    const memberEntries = se_ScheduledInstanceIdRequestSet(input[_SIIc], context);
    if (input[_SIIc]?.length === 0) {
      entries.ScheduledInstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ScheduledInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SSTR] != null) {
    const memberEntries = se_SlotStartTimeRangeRequest(input[_SSTR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SlotStartTimeRange.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSecurityGroupReferencesRequest
 */
const se_DescribeSecurityGroupReferencesRequest = (
  input: DescribeSecurityGroupReferencesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GIr] != null) {
    const memberEntries = se_GroupIds(input[_GIr], context);
    if (input[_GIr]?.length === 0) {
      entries.GroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSecurityGroupRulesRequest
 */
const se_DescribeSecurityGroupRulesRequest = (
  input: DescribeSecurityGroupRulesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SGRI] != null) {
    const memberEntries = se_SecurityGroupRuleIdList(input[_SGRI], context);
    if (input[_SGRI]?.length === 0) {
      entries.SecurityGroupRuleId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSecurityGroupsRequest
 */
const se_DescribeSecurityGroupsRequest = (input: DescribeSecurityGroupsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_GIro] != null) {
    const memberEntries = se_GroupIdStringList(input[_GIro], context);
    if (input[_GIro]?.length === 0) {
      entries.GroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_GNr] != null) {
    const memberEntries = se_GroupNameStringList(input[_GNr], context);
    if (input[_GNr]?.length === 0) {
      entries.GroupName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSnapshotAttributeRequest
 */
const se_DescribeSnapshotAttributeRequest = (input: DescribeSnapshotAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSnapshotsRequest
 */
const se_DescribeSnapshotsRequest = (input: DescribeSnapshotsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_OIw] != null) {
    const memberEntries = se_OwnerStringList(input[_OIw], context);
    if (input[_OIw]?.length === 0) {
      entries.Owner = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RBUI] != null) {
    const memberEntries = se_RestorableByStringList(input[_RBUI], context);
    if (input[_RBUI]?.length === 0) {
      entries.RestorableBy = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RestorableBy.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIna] != null) {
    const memberEntries = se_SnapshotIdStringList(input[_SIna], context);
    if (input[_SIna]?.length === 0) {
      entries.SnapshotId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSnapshotTierStatusRequest
 */
const se_DescribeSnapshotTierStatusRequest = (
  input: DescribeSnapshotTierStatusRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSpotDatafeedSubscriptionRequest
 */
const se_DescribeSpotDatafeedSubscriptionRequest = (
  input: DescribeSpotDatafeedSubscriptionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSpotFleetInstancesRequest
 */
const se_DescribeSpotFleetInstancesRequest = (
  input: DescribeSpotFleetInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_SFRIp] != null) {
    entries[_SFRIp] = input[_SFRIp];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSpotFleetRequestHistoryRequest
 */
const se_DescribeSpotFleetRequestHistoryRequest = (
  input: DescribeSpotFleetRequestHistoryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ETv] != null) {
    entries[_ETv] = input[_ETv];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_SFRIp] != null) {
    entries[_SFRIp] = input[_SFRIp];
  }
  if (input[_STt] != null) {
    entries[_STt] = input[_STt].toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSpotFleetRequestsRequest
 */
const se_DescribeSpotFleetRequestsRequest = (input: DescribeSpotFleetRequestsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_SFRI] != null) {
    const memberEntries = se_SpotFleetRequestIdList(input[_SFRI], context);
    if (input[_SFRI]?.length === 0) {
      entries.SpotFleetRequestId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSpotInstanceRequestsRequest
 */
const se_DescribeSpotInstanceRequestsRequest = (
  input: DescribeSpotInstanceRequestsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIRI] != null) {
    const memberEntries = se_SpotInstanceRequestIdList(input[_SIRI], context);
    if (input[_SIRI]?.length === 0) {
      entries.SpotInstanceRequestId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSpotPriceHistoryRequest
 */
const se_DescribeSpotPriceHistoryRequest = (input: DescribeSpotPriceHistoryRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ETn] != null) {
    entries[_ETn] = input[_ETn].toISOString().split(".")[0] + "Z";
  }
  if (input[_ITnst] != null) {
    const memberEntries = se_InstanceTypeList(input[_ITnst], context);
    if (input[_ITnst]?.length === 0) {
      entries.InstanceType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_PDro] != null) {
    const memberEntries = se_ProductDescriptionList(input[_PDro], context);
    if (input[_PDro]?.length === 0) {
      entries.ProductDescription = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ProductDescription.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_STt] != null) {
    entries[_STt] = input[_STt].toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeStaleSecurityGroupsRequest
 */
const se_DescribeStaleSecurityGroupsRequest = (
  input: DescribeStaleSecurityGroupsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeStoreImageTasksRequest
 */
const se_DescribeStoreImageTasksRequest = (input: DescribeStoreImageTasksRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IImag] != null) {
    const memberEntries = se_ImageIdList(input[_IImag], context);
    if (input[_IImag]?.length === 0) {
      entries.ImageId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeSubnetsRequest
 */
const se_DescribeSubnetsRequest = (input: DescribeSubnetsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIu] != null) {
    const memberEntries = se_SubnetIdStringList(input[_SIu], context);
    if (input[_SIu]?.length === 0) {
      entries.SubnetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTagsRequest
 */
const se_DescribeTagsRequest = (input: DescribeTagsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTrafficMirrorFiltersRequest
 */
const se_DescribeTrafficMirrorFiltersRequest = (
  input: DescribeTrafficMirrorFiltersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TMFIr] != null) {
    const memberEntries = se_TrafficMirrorFilterIdList(input[_TMFIr], context);
    if (input[_TMFIr]?.length === 0) {
      entries.TrafficMirrorFilterId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficMirrorFilterId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTrafficMirrorSessionsRequest
 */
const se_DescribeTrafficMirrorSessionsRequest = (
  input: DescribeTrafficMirrorSessionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TMSIr] != null) {
    const memberEntries = se_TrafficMirrorSessionIdList(input[_TMSIr], context);
    if (input[_TMSIr]?.length === 0) {
      entries.TrafficMirrorSessionId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficMirrorSessionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTrafficMirrorTargetsRequest
 */
const se_DescribeTrafficMirrorTargetsRequest = (
  input: DescribeTrafficMirrorTargetsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TMTIr] != null) {
    const memberEntries = se_TrafficMirrorTargetIdList(input[_TMTIr], context);
    if (input[_TMTIr]?.length === 0) {
      entries.TrafficMirrorTargetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TrafficMirrorTargetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayAttachmentsRequest
 */
const se_DescribeTransitGatewayAttachmentsRequest = (
  input: DescribeTransitGatewayAttachmentsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAIr] != null) {
    const memberEntries = se_TransitGatewayAttachmentIdStringList(input[_TGAIr], context);
    if (input[_TGAIr]?.length === 0) {
      entries.TransitGatewayAttachmentIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayConnectPeersRequest
 */
const se_DescribeTransitGatewayConnectPeersRequest = (
  input: DescribeTransitGatewayConnectPeersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGCPIr] != null) {
    const memberEntries = se_TransitGatewayConnectPeerIdStringList(input[_TGCPIr], context);
    if (input[_TGCPIr]?.length === 0) {
      entries.TransitGatewayConnectPeerIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayConnectPeerIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayConnectsRequest
 */
const se_DescribeTransitGatewayConnectsRequest = (
  input: DescribeTransitGatewayConnectsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAIr] != null) {
    const memberEntries = se_TransitGatewayAttachmentIdStringList(input[_TGAIr], context);
    if (input[_TGAIr]?.length === 0) {
      entries.TransitGatewayAttachmentIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayMulticastDomainsRequest
 */
const se_DescribeTransitGatewayMulticastDomainsRequest = (
  input: DescribeTransitGatewayMulticastDomainsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGMDIr] != null) {
    const memberEntries = se_TransitGatewayMulticastDomainIdStringList(input[_TGMDIr], context);
    if (input[_TGMDIr]?.length === 0) {
      entries.TransitGatewayMulticastDomainIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayMulticastDomainIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayPeeringAttachmentsRequest
 */
const se_DescribeTransitGatewayPeeringAttachmentsRequest = (
  input: DescribeTransitGatewayPeeringAttachmentsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAIr] != null) {
    const memberEntries = se_TransitGatewayAttachmentIdStringList(input[_TGAIr], context);
    if (input[_TGAIr]?.length === 0) {
      entries.TransitGatewayAttachmentIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayPolicyTablesRequest
 */
const se_DescribeTransitGatewayPolicyTablesRequest = (
  input: DescribeTransitGatewayPolicyTablesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGPTIr] != null) {
    const memberEntries = se_TransitGatewayPolicyTableIdStringList(input[_TGPTIr], context);
    if (input[_TGPTIr]?.length === 0) {
      entries.TransitGatewayPolicyTableIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayPolicyTableIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayRouteTableAnnouncementsRequest
 */
const se_DescribeTransitGatewayRouteTableAnnouncementsRequest = (
  input: DescribeTransitGatewayRouteTableAnnouncementsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTAIr] != null) {
    const memberEntries = se_TransitGatewayRouteTableAnnouncementIdStringList(input[_TGRTAIr], context);
    if (input[_TGRTAIr]?.length === 0) {
      entries.TransitGatewayRouteTableAnnouncementIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayRouteTableAnnouncementIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayRouteTablesRequest
 */
const se_DescribeTransitGatewayRouteTablesRequest = (
  input: DescribeTransitGatewayRouteTablesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTIr] != null) {
    const memberEntries = se_TransitGatewayRouteTableIdStringList(input[_TGRTIr], context);
    if (input[_TGRTIr]?.length === 0) {
      entries.TransitGatewayRouteTableIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayRouteTableIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewaysRequest
 */
const se_DescribeTransitGatewaysRequest = (input: DescribeTransitGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_TGIr] != null) {
    const memberEntries = se_TransitGatewayIdStringList(input[_TGIr], context);
    if (input[_TGIr]?.length === 0) {
      entries.TransitGatewayIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTransitGatewayVpcAttachmentsRequest
 */
const se_DescribeTransitGatewayVpcAttachmentsRequest = (
  input: DescribeTransitGatewayVpcAttachmentsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAIr] != null) {
    const memberEntries = se_TransitGatewayAttachmentIdStringList(input[_TGAIr], context);
    if (input[_TGAIr]?.length === 0) {
      entries.TransitGatewayAttachmentIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeTrunkInterfaceAssociationsRequest
 */
const se_DescribeTrunkInterfaceAssociationsRequest = (
  input: DescribeTrunkInterfaceAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AIs] != null) {
    const memberEntries = se_TrunkInterfaceAssociationIdList(input[_AIs], context);
    if (input[_AIs]?.length === 0) {
      entries.AssociationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVerifiedAccessEndpointsRequest
 */
const se_DescribeVerifiedAccessEndpointsRequest = (
  input: DescribeVerifiedAccessEndpointsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAEIe] != null) {
    const memberEntries = se_VerifiedAccessEndpointIdList(input[_VAEIe], context);
    if (input[_VAEIe]?.length === 0) {
      entries.VerifiedAccessEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVerifiedAccessGroupsRequest
 */
const se_DescribeVerifiedAccessGroupsRequest = (
  input: DescribeVerifiedAccessGroupsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAGIe] != null) {
    const memberEntries = se_VerifiedAccessGroupIdList(input[_VAGIe], context);
    if (input[_VAGIe]?.length === 0) {
      entries.VerifiedAccessGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVerifiedAccessInstanceLoggingConfigurationsRequest
 */
const se_DescribeVerifiedAccessInstanceLoggingConfigurationsRequest = (
  input: DescribeVerifiedAccessInstanceLoggingConfigurationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAIIe] != null) {
    const memberEntries = se_VerifiedAccessInstanceIdList(input[_VAIIe], context);
    if (input[_VAIIe]?.length === 0) {
      entries.VerifiedAccessInstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVerifiedAccessInstancesRequest
 */
const se_DescribeVerifiedAccessInstancesRequest = (
  input: DescribeVerifiedAccessInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAIIe] != null) {
    const memberEntries = se_VerifiedAccessInstanceIdList(input[_VAIIe], context);
    if (input[_VAIIe]?.length === 0) {
      entries.VerifiedAccessInstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVerifiedAccessTrustProvidersRequest
 */
const se_DescribeVerifiedAccessTrustProvidersRequest = (
  input: DescribeVerifiedAccessTrustProvidersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VATPIe] != null) {
    const memberEntries = se_VerifiedAccessTrustProviderIdList(input[_VATPIe], context);
    if (input[_VATPIe]?.length === 0) {
      entries.VerifiedAccessTrustProviderId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VerifiedAccessTrustProviderId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVolumeAttributeRequest
 */
const se_DescribeVolumeAttributeRequest = (input: DescribeVolumeAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVolumesModificationsRequest
 */
const se_DescribeVolumesModificationsRequest = (
  input: DescribeVolumesModificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VIol] != null) {
    const memberEntries = se_VolumeIdStringList(input[_VIol], context);
    if (input[_VIol]?.length === 0) {
      entries.VolumeId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVolumesRequest
 */
const se_DescribeVolumesRequest = (input: DescribeVolumesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VIol] != null) {
    const memberEntries = se_VolumeIdStringList(input[_VIol], context);
    if (input[_VIol]?.length === 0) {
      entries.VolumeId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVolumeStatusRequest
 */
const se_DescribeVolumeStatusRequest = (input: DescribeVolumeStatusRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_VIol] != null) {
    const memberEntries = se_VolumeIdStringList(input[_VIol], context);
    if (input[_VIol]?.length === 0) {
      entries.VolumeId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcAttributeRequest
 */
const se_DescribeVpcAttributeRequest = (input: DescribeVpcAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcClassicLinkDnsSupportRequest
 */
const se_DescribeVpcClassicLinkDnsSupportRequest = (
  input: DescribeVpcClassicLinkDnsSupportRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_VIp] != null) {
    const memberEntries = se_VpcClassicLinkIdList(input[_VIp], context);
    if (input[_VIp]?.length === 0) {
      entries.VpcIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcClassicLinkRequest
 */
const se_DescribeVpcClassicLinkRequest = (input: DescribeVpcClassicLinkRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VIp] != null) {
    const memberEntries = se_VpcClassicLinkIdList(input[_VIp], context);
    if (input[_VIp]?.length === 0) {
      entries.VpcId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcEndpointConnectionNotificationsRequest
 */
const se_DescribeVpcEndpointConnectionNotificationsRequest = (
  input: DescribeVpcEndpointConnectionNotificationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CNIon] != null) {
    entries[_CNIon] = input[_CNIon];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcEndpointConnectionsRequest
 */
const se_DescribeVpcEndpointConnectionsRequest = (
  input: DescribeVpcEndpointConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcEndpointServiceConfigurationsRequest
 */
const se_DescribeVpcEndpointServiceConfigurationsRequest = (
  input: DescribeVpcEndpointServiceConfigurationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIer] != null) {
    const memberEntries = se_VpcEndpointServiceIdList(input[_SIer], context);
    if (input[_SIer]?.length === 0) {
      entries.ServiceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcEndpointServicePermissionsRequest
 */
const se_DescribeVpcEndpointServicePermissionsRequest = (
  input: DescribeVpcEndpointServicePermissionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcEndpointServicesRequest
 */
const se_DescribeVpcEndpointServicesRequest = (
  input: DescribeVpcEndpointServicesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SNer] != null) {
    const memberEntries = se_ValueStringList(input[_SNer], context);
    if (input[_SNer]?.length === 0) {
      entries.ServiceName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ServiceName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcEndpointsRequest
 */
const se_DescribeVpcEndpointsRequest = (input: DescribeVpcEndpointsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VEI] != null) {
    const memberEntries = se_VpcEndpointIdList(input[_VEI], context);
    if (input[_VEI]?.length === 0) {
      entries.VpcEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcPeeringConnectionsRequest
 */
const se_DescribeVpcPeeringConnectionsRequest = (
  input: DescribeVpcPeeringConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VPCIp] != null) {
    const memberEntries = se_VpcPeeringConnectionIdList(input[_VPCIp], context);
    if (input[_VPCIp]?.length === 0) {
      entries.VpcPeeringConnectionId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcPeeringConnectionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpcsRequest
 */
const se_DescribeVpcsRequest = (input: DescribeVpcsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VIp] != null) {
    const memberEntries = se_VpcIdStringList(input[_VIp], context);
    if (input[_VIp]?.length === 0) {
      entries.VpcId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpnConnectionsRequest
 */
const se_DescribeVpnConnectionsRequest = (input: DescribeVpnConnectionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VCIp] != null) {
    const memberEntries = se_VpnConnectionIdStringList(input[_VCIp], context);
    if (input[_VCIp]?.length === 0) {
      entries.VpnConnectionId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpnConnectionId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DescribeVpnGatewaysRequest
 */
const se_DescribeVpnGatewaysRequest = (input: DescribeVpnGatewaysRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VGIp] != null) {
    const memberEntries = se_VpnGatewayIdStringList(input[_VGIp], context);
    if (input[_VGIp]?.length === 0) {
      entries.VpnGatewayId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpnGatewayId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DestinationOptionsRequest
 */
const se_DestinationOptionsRequest = (input: DestinationOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_FF] != null) {
    entries[_FF] = input[_FF];
  }
  if (input[_HCP] != null) {
    entries[_HCP] = input[_HCP];
  }
  if (input[_PHP] != null) {
    entries[_PHP] = input[_PHP];
  }
  return entries;
};

/**
 * serializeAws_ec2DetachClassicLinkVpcRequest
 */
const se_DetachClassicLinkVpcRequest = (input: DetachClassicLinkVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};

/**
 * serializeAws_ec2DetachInternetGatewayRequest
 */
const se_DetachInternetGatewayRequest = (input: DetachInternetGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IGI] != null) {
    entries[_IGI] = input[_IGI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};

/**
 * serializeAws_ec2DetachNetworkInterfaceRequest
 */
const se_DetachNetworkInterfaceRequest = (input: DetachNetworkInterfaceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIt] != null) {
    entries[_AIt] = input[_AIt];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_F] != null) {
    entries[_F] = input[_F];
  }
  return entries;
};

/**
 * serializeAws_ec2DetachVerifiedAccessTrustProviderRequest
 */
const se_DetachVerifiedAccessTrustProviderRequest = (
  input: DetachVerifiedAccessTrustProviderRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_VATPI] != null) {
    entries[_VATPI] = input[_VATPI];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DetachVolumeRequest
 */
const se_DetachVolumeRequest = (input: DetachVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Dev] != null) {
    entries[_Dev] = input[_Dev];
  }
  if (input[_F] != null) {
    entries[_F] = input[_F];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DetachVpnGatewayRequest
 */
const se_DetachVpnGatewayRequest = (input: DetachVpnGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_VGI] != null) {
    entries[_VGI] = input[_VGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DhcpOptionsIdStringList
 */
const se_DhcpOptionsIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`DhcpOptionsId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DirectoryServiceAuthenticationRequest
 */
const se_DirectoryServiceAuthenticationRequest = (
  input: DirectoryServiceAuthenticationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DIir] != null) {
    entries[_DIir] = input[_DIir];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableAddressTransferRequest
 */
const se_DisableAddressTransferRequest = (input: DisableAddressTransferRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableAwsNetworkPerformanceMetricSubscriptionRequest
 */
const se_DisableAwsNetworkPerformanceMetricSubscriptionRequest = (
  input: DisableAwsNetworkPerformanceMetricSubscriptionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_Met] != null) {
    entries[_Met] = input[_Met];
  }
  if (input[_Sta] != null) {
    entries[_Sta] = input[_Sta];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableEbsEncryptionByDefaultRequest
 */
const se_DisableEbsEncryptionByDefaultRequest = (
  input: DisableEbsEncryptionByDefaultRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableFastLaunchRequest
 */
const se_DisableFastLaunchRequest = (input: DisableFastLaunchRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_F] != null) {
    entries[_F] = input[_F];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableFastSnapshotRestoresRequest
 */
const se_DisableFastSnapshotRestoresRequest = (
  input: DisableFastSnapshotRestoresRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AZv] != null) {
    const memberEntries = se_AvailabilityZoneStringList(input[_AZv], context);
    if (input[_AZv]?.length === 0) {
      entries.AvailabilityZone = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SSIo] != null) {
    const memberEntries = se_SnapshotIdStringList(input[_SSIo], context);
    if (input[_SSIo]?.length === 0) {
      entries.SourceSnapshotId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableImageBlockPublicAccessRequest
 */
const se_DisableImageBlockPublicAccessRequest = (
  input: DisableImageBlockPublicAccessRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableImageDeprecationRequest
 */
const se_DisableImageDeprecationRequest = (input: DisableImageDeprecationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableImageRequest
 */
const se_DisableImageRequest = (input: DisableImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableIpamOrganizationAdminAccountRequest
 */
const se_DisableIpamOrganizationAdminAccountRequest = (
  input: DisableIpamOrganizationAdminAccountRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_DAAI] != null) {
    entries[_DAAI] = input[_DAAI];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableSerialConsoleAccessRequest
 */
const se_DisableSerialConsoleAccessRequest = (
  input: DisableSerialConsoleAccessRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableSnapshotBlockPublicAccessRequest
 */
const se_DisableSnapshotBlockPublicAccessRequest = (
  input: DisableSnapshotBlockPublicAccessRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableTransitGatewayRouteTablePropagationRequest
 */
const se_DisableTransitGatewayRouteTablePropagationRequest = (
  input: DisableTransitGatewayRouteTablePropagationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TGRTAI] != null) {
    entries[_TGRTAI] = input[_TGRTAI];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableVgwRoutePropagationRequest
 */
const se_DisableVgwRoutePropagationRequest = (
  input: DisableVgwRoutePropagationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_GI] != null) {
    entries[_GI] = input[_GI];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableVpcClassicLinkDnsSupportRequest
 */
const se_DisableVpcClassicLinkDnsSupportRequest = (
  input: DisableVpcClassicLinkDnsSupportRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};

/**
 * serializeAws_ec2DisableVpcClassicLinkRequest
 */
const se_DisableVpcClassicLinkRequest = (input: DisableVpcClassicLinkRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateAddressRequest
 */
const se_DisassociateAddressRequest = (input: DisassociateAddressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  if (input[_PI] != null) {
    entries[_PI] = input[_PI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateClientVpnTargetNetworkRequest
 */
const se_DisassociateClientVpnTargetNetworkRequest = (
  input: DisassociateClientVpnTargetNetworkRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateEnclaveCertificateIamRoleRequest
 */
const se_DisassociateEnclaveCertificateIamRoleRequest = (
  input: DisassociateEnclaveCertificateIamRoleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CA] != null) {
    entries[_CA] = input[_CA];
  }
  if (input[_RAo] != null) {
    entries[_RAo] = input[_RAo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateIamInstanceProfileRequest
 */
const se_DisassociateIamInstanceProfileRequest = (
  input: DisassociateIamInstanceProfileRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateInstanceEventWindowRequest
 */
const se_DisassociateInstanceEventWindowRequest = (
  input: DisassociateInstanceEventWindowRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IEWI] != null) {
    entries[_IEWI] = input[_IEWI];
  }
  if (input[_AT] != null) {
    const memberEntries = se_InstanceEventWindowDisassociationRequest(input[_AT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateIpamByoasnRequest
 */
const se_DisassociateIpamByoasnRequest = (input: DisassociateIpamByoasnRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_As] != null) {
    entries[_As] = input[_As];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateIpamResourceDiscoveryRequest
 */
const se_DisassociateIpamResourceDiscoveryRequest = (
  input: DisassociateIpamResourceDiscoveryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDAIp] != null) {
    entries[_IRDAIp] = input[_IRDAIp];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateNatGatewayAddressRequest
 */
const se_DisassociateNatGatewayAddressRequest = (
  input: DisassociateNatGatewayAddressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_AIs] != null) {
    const memberEntries = se_EipAssociationIdList(input[_AIs], context);
    if (input[_AIs]?.length === 0) {
      entries.AssociationId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MDDS] != null) {
    entries[_MDDS] = input[_MDDS];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateRouteTableRequest
 */
const se_DisassociateRouteTableRequest = (input: DisassociateRouteTableRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateSubnetCidrBlockRequest
 */
const se_DisassociateSubnetCidrBlockRequest = (
  input: DisassociateSubnetCidrBlockRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateTransitGatewayMulticastDomainRequest
 */
const se_DisassociateTransitGatewayMulticastDomainRequest = (
  input: DisassociateTransitGatewayMulticastDomainRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input[_SIu], context);
    if (input[_SIu]?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateTransitGatewayPolicyTableRequest
 */
const se_DisassociateTransitGatewayPolicyTableRequest = (
  input: DisassociateTransitGatewayPolicyTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGPTI] != null) {
    entries[_TGPTI] = input[_TGPTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateTransitGatewayRouteTableRequest
 */
const se_DisassociateTransitGatewayRouteTableRequest = (
  input: DisassociateTransitGatewayRouteTableRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateTrunkInterfaceRequest
 */
const se_DisassociateTrunkInterfaceRequest = (
  input: DisassociateTrunkInterfaceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2DisassociateVpcCidrBlockRequest
 */
const se_DisassociateVpcCidrBlockRequest = (input: DisassociateVpcCidrBlockRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  return entries;
};

/**
 * serializeAws_ec2DiskImage
 */
const se_DiskImage = (input: DiskImage, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_Im] != null) {
    const memberEntries = se_DiskImageDetail(input[_Im], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Image.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Vo] != null) {
    const memberEntries = se_VolumeDetail(input[_Vo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Volume.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2DiskImageDetail
 */
const se_DiskImageDetail = (input: DiskImageDetail, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_By] != null) {
    entries[_By] = input[_By];
  }
  if (input[_Fo] != null) {
    entries[_Fo] = input[_Fo];
  }
  if (input[_IMU] != null) {
    entries[_IMU] = input[_IMU];
  }
  return entries;
};

/**
 * serializeAws_ec2DiskImageList
 */
const se_DiskImageList = (input: DiskImage[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_DiskImage(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2DnsOptionsSpecification
 */
const se_DnsOptionsSpecification = (input: DnsOptionsSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRIT] != null) {
    entries[_DRIT] = input[_DRIT];
  }
  if (input[_PDOFIRE] != null) {
    entries[_PDOFIRE] = input[_PDOFIRE];
  }
  return entries;
};

/**
 * serializeAws_ec2DnsServersOptionsModifyStructure
 */
const se_DnsServersOptionsModifyStructure = (input: DnsServersOptionsModifyStructure, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CDSu] != null) {
    const memberEntries = se_ValueStringList(input[_CDSu], context);
    if (input[_CDSu]?.length === 0) {
      entries.CustomDnsServers = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CustomDnsServers.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};

/**
 * serializeAws_ec2EbsBlockDevice
 */
const se_EbsBlockDevice = (input: EbsBlockDevice, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_Io] != null) {
    entries[_Io] = input[_Io];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_VS] != null) {
    entries[_VS] = input[_VS];
  }
  if (input[_VT] != null) {
    entries[_VT] = input[_VT];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_Th] != null) {
    entries[_Th] = input[_Th];
  }
  if (input[_OA] != null) {
    entries[_OA] = input[_OA];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  return entries;
};

/**
 * serializeAws_ec2EbsInstanceBlockDeviceSpecification
 */
const se_EbsInstanceBlockDeviceSpecification = (
  input: EbsInstanceBlockDeviceSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  return entries;
};

/**
 * serializeAws_ec2EgressOnlyInternetGatewayIdList
 */
const se_EgressOnlyInternetGatewayIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2EipAssociationIdList
 */
const se_EipAssociationIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ElasticGpuIdSet
 */
const se_ElasticGpuIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ElasticGpuSpecification
 */
const se_ElasticGpuSpecification = (input: ElasticGpuSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  return entries;
};

/**
 * serializeAws_ec2ElasticGpuSpecificationList
 */
const se_ElasticGpuSpecificationList = (input: ElasticGpuSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ElasticGpuSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`ElasticGpuSpecification.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ElasticGpuSpecifications
 */
const se_ElasticGpuSpecifications = (input: ElasticGpuSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ElasticGpuSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ElasticInferenceAccelerator
 */
const se_ElasticInferenceAccelerator = (input: ElasticInferenceAccelerator, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_Cou] != null) {
    entries[_Cou] = input[_Cou];
  }
  return entries;
};

/**
 * serializeAws_ec2ElasticInferenceAccelerators
 */
const se_ElasticInferenceAccelerators = (input: ElasticInferenceAccelerator[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ElasticInferenceAccelerator(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2EnableAddressTransferRequest
 */
const se_EnableAddressTransferRequest = (input: EnableAddressTransferRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_TAI] != null) {
    entries[_TAI] = input[_TAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableAwsNetworkPerformanceMetricSubscriptionRequest
 */
const se_EnableAwsNetworkPerformanceMetricSubscriptionRequest = (
  input: EnableAwsNetworkPerformanceMetricSubscriptionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_S] != null) {
    entries[_S] = input[_S];
  }
  if (input[_D] != null) {
    entries[_D] = input[_D];
  }
  if (input[_Met] != null) {
    entries[_Met] = input[_Met];
  }
  if (input[_Sta] != null) {
    entries[_Sta] = input[_Sta];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableEbsEncryptionByDefaultRequest
 */
const se_EnableEbsEncryptionByDefaultRequest = (
  input: EnableEbsEncryptionByDefaultRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableFastLaunchRequest
 */
const se_EnableFastLaunchRequest = (input: EnableFastLaunchRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_SCn] != null) {
    const memberEntries = se_FastLaunchSnapshotConfigurationRequest(input[_SCn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotConfiguration.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LTa] != null) {
    const memberEntries = se_FastLaunchLaunchTemplateSpecificationRequest(input[_LTa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplate.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MPL] != null) {
    entries[_MPL] = input[_MPL];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableFastSnapshotRestoresRequest
 */
const se_EnableFastSnapshotRestoresRequest = (
  input: EnableFastSnapshotRestoresRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AZv] != null) {
    const memberEntries = se_AvailabilityZoneStringList(input[_AZv], context);
    if (input[_AZv]?.length === 0) {
      entries.AvailabilityZone = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SSIo] != null) {
    const memberEntries = se_SnapshotIdStringList(input[_SSIo], context);
    if (input[_SSIo]?.length === 0) {
      entries.SourceSnapshotId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableImageBlockPublicAccessRequest
 */
const se_EnableImageBlockPublicAccessRequest = (
  input: EnableImageBlockPublicAccessRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IBPAS] != null) {
    entries[_IBPAS] = input[_IBPAS];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableImageDeprecationRequest
 */
const se_EnableImageDeprecationRequest = (input: EnableImageDeprecationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DAe] != null) {
    entries[_DAe] = input[_DAe].toISOString().split(".")[0] + "Z";
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableImageRequest
 */
const se_EnableImageRequest = (input: EnableImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableIpamOrganizationAdminAccountRequest
 */
const se_EnableIpamOrganizationAdminAccountRequest = (
  input: EnableIpamOrganizationAdminAccountRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_DAAI] != null) {
    entries[_DAAI] = input[_DAAI];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableReachabilityAnalyzerOrganizationSharingRequest
 */
const se_EnableReachabilityAnalyzerOrganizationSharingRequest = (
  input: EnableReachabilityAnalyzerOrganizationSharingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableSerialConsoleAccessRequest
 */
const se_EnableSerialConsoleAccessRequest = (input: EnableSerialConsoleAccessRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableSnapshotBlockPublicAccessRequest
 */
const se_EnableSnapshotBlockPublicAccessRequest = (
  input: EnableSnapshotBlockPublicAccessRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Stat] != null) {
    entries[_Stat] = input[_Stat];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableTransitGatewayRouteTablePropagationRequest
 */
const se_EnableTransitGatewayRouteTablePropagationRequest = (
  input: EnableTransitGatewayRouteTablePropagationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TGRTAI] != null) {
    entries[_TGRTAI] = input[_TGRTAI];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableVgwRoutePropagationRequest
 */
const se_EnableVgwRoutePropagationRequest = (input: EnableVgwRoutePropagationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_GI] != null) {
    entries[_GI] = input[_GI];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableVolumeIORequest
 */
const se_EnableVolumeIORequest = (input: EnableVolumeIORequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableVpcClassicLinkDnsSupportRequest
 */
const se_EnableVpcClassicLinkDnsSupportRequest = (
  input: EnableVpcClassicLinkDnsSupportRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};

/**
 * serializeAws_ec2EnableVpcClassicLinkRequest
 */
const se_EnableVpcClassicLinkRequest = (input: EnableVpcClassicLinkRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  return entries;
};

/**
 * serializeAws_ec2EnaSrdSpecification
 */
const se_EnaSrdSpecification = (input: EnaSrdSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ESE] != null) {
    entries[_ESE] = input[_ESE];
  }
  if (input[_ESUS] != null) {
    const memberEntries = se_EnaSrdUdpSpecification(input[_ESUS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdUdpSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2EnaSrdSpecificationRequest
 */
const se_EnaSrdSpecificationRequest = (input: EnaSrdSpecificationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ESE] != null) {
    entries[_ESE] = input[_ESE];
  }
  if (input[_ESUS] != null) {
    const memberEntries = se_EnaSrdUdpSpecificationRequest(input[_ESUS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdUdpSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2EnaSrdUdpSpecification
 */
const se_EnaSrdUdpSpecification = (input: EnaSrdUdpSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ESUE] != null) {
    entries[_ESUE] = input[_ESUE];
  }
  return entries;
};

/**
 * serializeAws_ec2EnaSrdUdpSpecificationRequest
 */
const se_EnaSrdUdpSpecificationRequest = (input: EnaSrdUdpSpecificationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ESUE] != null) {
    entries[_ESUE] = input[_ESUE];
  }
  return entries;
};

/**
 * serializeAws_ec2EnclaveOptionsRequest
 */
const se_EnclaveOptionsRequest = (input: EnclaveOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};

/**
 * serializeAws_ec2ExcludedInstanceTypeSet
 */
const se_ExcludedInstanceTypeSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ExecutableByStringList
 */
const se_ExecutableByStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ExecutableBy.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ExportClientVpnClientCertificateRevocationListRequest
 */
const se_ExportClientVpnClientCertificateRevocationListRequest = (
  input: ExportClientVpnClientCertificateRevocationListRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ExportClientVpnClientConfigurationRequest
 */
const se_ExportClientVpnClientConfigurationRequest = (
  input: ExportClientVpnClientConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ExportImageRequest
 */
const se_ExportImageRequest = (input: ExportImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DIFi] != null) {
    entries[_DIFi] = input[_DIFi];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_SEL] != null) {
    const memberEntries = se_ExportTaskS3LocationRequest(input[_SEL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3ExportLocation.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RNo] != null) {
    entries[_RNo] = input[_RNo];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ExportImageTaskIdList
 */
const se_ExportImageTaskIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ExportImageTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ExportTaskIdStringList
 */
const se_ExportTaskIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ExportTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ExportTaskS3LocationRequest
 */
const se_ExportTaskS3LocationRequest = (input: ExportTaskS3LocationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SB] != null) {
    entries[_SB] = input[_SB];
  }
  if (input[_SP] != null) {
    entries[_SP] = input[_SP];
  }
  return entries;
};

/**
 * serializeAws_ec2ExportToS3TaskSpecification
 */
const se_ExportToS3TaskSpecification = (input: ExportToS3TaskSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CFo] != null) {
    entries[_CFo] = input[_CFo];
  }
  if (input[_DIFi] != null) {
    entries[_DIFi] = input[_DIFi];
  }
  if (input[_SB] != null) {
    entries[_SB] = input[_SB];
  }
  if (input[_SP] != null) {
    entries[_SP] = input[_SP];
  }
  return entries;
};

/**
 * serializeAws_ec2ExportTransitGatewayRoutesRequest
 */
const se_ExportTransitGatewayRoutesRequest = (
  input: ExportTransitGatewayRoutesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SB] != null) {
    entries[_SB] = input[_SB];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2FastLaunchImageIdList
 */
const se_FastLaunchImageIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImageId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FastLaunchLaunchTemplateSpecificationRequest
 */
const se_FastLaunchLaunchTemplateSpecificationRequest = (
  input: FastLaunchLaunchTemplateSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_V] != null) {
    entries[_V] = input[_V];
  }
  return entries;
};

/**
 * serializeAws_ec2FastLaunchSnapshotConfigurationRequest
 */
const se_FastLaunchSnapshotConfigurationRequest = (
  input: FastLaunchSnapshotConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TRC] != null) {
    entries[_TRC] = input[_TRC];
  }
  return entries;
};

/**
 * serializeAws_ec2FederatedAuthenticationRequest
 */
const se_FederatedAuthenticationRequest = (input: FederatedAuthenticationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SAMLPA] != null) {
    entries[_SAMLPA] = input[_SAMLPA];
  }
  if (input[_SSSAMLPA] != null) {
    entries[_SSSAMLPA] = input[_SSSAMLPA];
  }
  return entries;
};

/**
 * serializeAws_ec2Filter
 */
const se_Filter = (input: Filter, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_Val] != null) {
    const memberEntries = se_ValueStringList(input[_Val], context);
    if (input[_Val]?.length === 0) {
      entries.Value = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2FilterList
 */
const se_FilterList = (input: Filter[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Filter(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Filter.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FleetIdSet
 */
const se_FleetIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FleetLaunchTemplateConfigListRequest
 */
const se_FleetLaunchTemplateConfigListRequest = (
  input: FleetLaunchTemplateConfigRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_FleetLaunchTemplateConfigRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FleetLaunchTemplateConfigRequest
 */
const se_FleetLaunchTemplateConfigRequest = (input: FleetLaunchTemplateConfigRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_LTS] != null) {
    const memberEntries = se_FleetLaunchTemplateSpecificationRequest(input[_LTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ov] != null) {
    const memberEntries = se_FleetLaunchTemplateOverridesListRequest(input[_Ov], context);
    if (input[_Ov]?.length === 0) {
      entries.Overrides = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2FleetLaunchTemplateOverridesListRequest
 */
const se_FleetLaunchTemplateOverridesListRequest = (
  input: FleetLaunchTemplateOverridesRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_FleetLaunchTemplateOverridesRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FleetLaunchTemplateOverridesRequest
 */
const se_FleetLaunchTemplateOverridesRequest = (
  input: FleetLaunchTemplateOverridesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_MPa] != null) {
    entries[_MPa] = input[_MPa];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_WC] != null) {
    entries[_WC] = __serializeFloat(input[_WC]);
  }
  if (input[_Pri] != null) {
    entries[_Pri] = __serializeFloat(input[_Pri]);
  }
  if (input[_Pl] != null) {
    const memberEntries = se_Placement(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IR] != null) {
    const memberEntries = se_InstanceRequirementsRequest(input[_IR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  return entries;
};

/**
 * serializeAws_ec2FleetLaunchTemplateSpecification
 */
const se_FleetLaunchTemplateSpecification = (input: FleetLaunchTemplateSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_V] != null) {
    entries[_V] = input[_V];
  }
  return entries;
};

/**
 * serializeAws_ec2FleetLaunchTemplateSpecificationRequest
 */
const se_FleetLaunchTemplateSpecificationRequest = (
  input: FleetLaunchTemplateSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_V] != null) {
    entries[_V] = input[_V];
  }
  return entries;
};

/**
 * serializeAws_ec2FleetSpotCapacityRebalanceRequest
 */
const se_FleetSpotCapacityRebalanceRequest = (
  input: FleetSpotCapacityRebalanceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_RS] != null) {
    entries[_RS] = input[_RS];
  }
  if (input[_TDe] != null) {
    entries[_TDe] = input[_TDe];
  }
  return entries;
};

/**
 * serializeAws_ec2FleetSpotMaintenanceStrategiesRequest
 */
const se_FleetSpotMaintenanceStrategiesRequest = (
  input: FleetSpotMaintenanceStrategiesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CRap] != null) {
    const memberEntries = se_FleetSpotCapacityRebalanceRequest(input[_CRap], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityRebalance.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2FlowLogIdList
 */
const se_FlowLogIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FlowLogResourceIds
 */
const se_FlowLogResourceIds = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2FpgaImageIdList
 */
const se_FpgaImageIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2GetAssociatedEnclaveCertificateIamRolesRequest
 */
const se_GetAssociatedEnclaveCertificateIamRolesRequest = (
  input: GetAssociatedEnclaveCertificateIamRolesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CA] != null) {
    entries[_CA] = input[_CA];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetAssociatedIpv6PoolCidrsRequest
 */
const se_GetAssociatedIpv6PoolCidrsRequest = (
  input: GetAssociatedIpv6PoolCidrsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_PIo] != null) {
    entries[_PIo] = input[_PIo];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetAwsNetworkPerformanceDataRequest
 */
const se_GetAwsNetworkPerformanceDataRequest = (
  input: GetAwsNetworkPerformanceDataRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DQ] != null) {
    const memberEntries = se_DataQueries(input[_DQ], context);
    if (input[_DQ]?.length === 0) {
      entries.DataQuery = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DataQuery.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_STt] != null) {
    entries[_STt] = input[_STt].toISOString().split(".")[0] + "Z";
  }
  if (input[_ETn] != null) {
    entries[_ETn] = input[_ETn].toISOString().split(".")[0] + "Z";
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetCapacityReservationUsageRequest
 */
const se_GetCapacityReservationUsageRequest = (
  input: GetCapacityReservationUsageRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetCoipPoolUsageRequest
 */
const se_GetCoipPoolUsageRequest = (input: GetCoipPoolUsageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_PIo] != null) {
    entries[_PIo] = input[_PIo];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetConsoleOutputRequest
 */
const se_GetConsoleOutputRequest = (input: GetConsoleOutputRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_La] != null) {
    entries[_La] = input[_La];
  }
  return entries;
};

/**
 * serializeAws_ec2GetConsoleScreenshotRequest
 */
const se_GetConsoleScreenshotRequest = (input: GetConsoleScreenshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_WU] != null) {
    entries[_WU] = input[_WU];
  }
  return entries;
};

/**
 * serializeAws_ec2GetDefaultCreditSpecificationRequest
 */
const se_GetDefaultCreditSpecificationRequest = (
  input: GetDefaultCreditSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IF] != null) {
    entries[_IF] = input[_IF];
  }
  return entries;
};

/**
 * serializeAws_ec2GetEbsDefaultKmsKeyIdRequest
 */
const se_GetEbsDefaultKmsKeyIdRequest = (input: GetEbsDefaultKmsKeyIdRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetEbsEncryptionByDefaultRequest
 */
const se_GetEbsEncryptionByDefaultRequest = (input: GetEbsEncryptionByDefaultRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetFlowLogsIntegrationTemplateRequest
 */
const se_GetFlowLogsIntegrationTemplateRequest = (
  input: GetFlowLogsIntegrationTemplateRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FLIl] != null) {
    entries[_FLIl] = input[_FLIl];
  }
  if (input[_CDSDA] != null) {
    entries[_CDSDA] = input[_CDSDA];
  }
  if (input[_ISnt] != null) {
    const memberEntries = se_IntegrateServices(input[_ISnt], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IntegrateService.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2GetGroupsForCapacityReservationRequest
 */
const se_GetGroupsForCapacityReservationRequest = (
  input: GetGroupsForCapacityReservationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetHostReservationPurchasePreviewRequest
 */
const se_GetHostReservationPurchasePreviewRequest = (
  input: GetHostReservationPurchasePreviewRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_HIS] != null) {
    const memberEntries = se_RequestHostIdSet(input[_HIS], context);
    if (input[_HIS]?.length === 0) {
      entries.HostIdSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_OI] != null) {
    entries[_OI] = input[_OI];
  }
  return entries;
};

/**
 * serializeAws_ec2GetImageBlockPublicAccessStateRequest
 */
const se_GetImageBlockPublicAccessStateRequest = (
  input: GetImageBlockPublicAccessStateRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetInstanceTypesFromInstanceRequirementsRequest
 */
const se_GetInstanceTypesFromInstanceRequirementsRequest = (
  input: GetInstanceTypesFromInstanceRequirementsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ATr] != null) {
    const memberEntries = se_ArchitectureTypeSet(input[_ATr], context);
    if (input[_ATr]?.length === 0) {
      entries.ArchitectureType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ArchitectureType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VTi] != null) {
    const memberEntries = se_VirtualizationTypeSet(input[_VTi], context);
    if (input[_VTi]?.length === 0) {
      entries.VirtualizationType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VirtualizationType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IR] != null) {
    const memberEntries = se_InstanceRequirementsRequest(input[_IR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2GetInstanceUefiDataRequest
 */
const se_GetInstanceUefiDataRequest = (input: GetInstanceUefiDataRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetIpamAddressHistoryRequest
 */
const se_GetIpamAddressHistoryRequest = (input: GetIpamAddressHistoryRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_ISI] != null) {
    entries[_ISI] = input[_ISI];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_STt] != null) {
    entries[_STt] = input[_STt].toISOString().split(".")[0] + "Z";
  }
  if (input[_ETn] != null) {
    entries[_ETn] = input[_ETn].toISOString().split(".")[0] + "Z";
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2GetIpamDiscoveredAccountsRequest
 */
const se_GetIpamDiscoveredAccountsRequest = (input: GetIpamDiscoveredAccountsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDI] != null) {
    entries[_IRDI] = input[_IRDI];
  }
  if (input[_DRi] != null) {
    entries[_DRi] = input[_DRi];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2GetIpamDiscoveredPublicAddressesRequest
 */
const se_GetIpamDiscoveredPublicAddressesRequest = (
  input: GetIpamDiscoveredPublicAddressesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDI] != null) {
    entries[_IRDI] = input[_IRDI];
  }
  if (input[_ARd] != null) {
    entries[_ARd] = input[_ARd];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2GetIpamDiscoveredResourceCidrsRequest
 */
const se_GetIpamDiscoveredResourceCidrsRequest = (
  input: GetIpamDiscoveredResourceCidrsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDI] != null) {
    entries[_IRDI] = input[_IRDI];
  }
  if (input[_RRe] != null) {
    entries[_RRe] = input[_RRe];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2GetIpamPoolAllocationsRequest
 */
const se_GetIpamPoolAllocationsRequest = (input: GetIpamPoolAllocationsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_IPAI] != null) {
    entries[_IPAI] = input[_IPAI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2GetIpamPoolCidrsRequest
 */
const se_GetIpamPoolCidrsRequest = (input: GetIpamPoolCidrsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2GetIpamResourceCidrsRequest
 */
const se_GetIpamResourceCidrsRequest = (input: GetIpamResourceCidrsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_ISI] != null) {
    entries[_ISI] = input[_ISI];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_RIeso] != null) {
    entries[_RIeso] = input[_RIeso];
  }
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_RTes] != null) {
    const memberEntries = se_RequestIpamResourceTag(input[_RTes], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceTag.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RO] != null) {
    entries[_RO] = input[_RO];
  }
  return entries;
};

/**
 * serializeAws_ec2GetLaunchTemplateDataRequest
 */
const se_GetLaunchTemplateDataRequest = (input: GetLaunchTemplateDataRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  return entries;
};

/**
 * serializeAws_ec2GetManagedPrefixListAssociationsRequest
 */
const se_GetManagedPrefixListAssociationsRequest = (
  input: GetManagedPrefixListAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2GetManagedPrefixListEntriesRequest
 */
const se_GetManagedPrefixListEntriesRequest = (
  input: GetManagedPrefixListEntriesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_TV] != null) {
    entries[_TV] = input[_TV];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsRequest
 */
const se_GetNetworkInsightsAccessScopeAnalysisFindingsRequest = (
  input: GetNetworkInsightsAccessScopeAnalysisFindingsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NIASAI] != null) {
    entries[_NIASAI] = input[_NIASAI];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetNetworkInsightsAccessScopeContentRequest
 */
const se_GetNetworkInsightsAccessScopeContentRequest = (
  input: GetNetworkInsightsAccessScopeContentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NIASI] != null) {
    entries[_NIASI] = input[_NIASI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetPasswordDataRequest
 */
const se_GetPasswordDataRequest = (input: GetPasswordDataRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetReservedInstancesExchangeQuoteRequest
 */
const se_GetReservedInstancesExchangeQuoteRequest = (
  input: GetReservedInstancesExchangeQuoteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RII] != null) {
    const memberEntries = se_ReservedInstanceIdSet(input[_RII], context);
    if (input[_RII]?.length === 0) {
      entries.ReservedInstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TC] != null) {
    const memberEntries = se_TargetConfigurationRequestSet(input[_TC], context);
    if (input[_TC]?.length === 0) {
      entries.TargetConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2GetSecurityGroupsForVpcRequest
 */
const se_GetSecurityGroupsForVpcRequest = (input: GetSecurityGroupsForVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetSerialConsoleAccessStatusRequest
 */
const se_GetSerialConsoleAccessStatusRequest = (
  input: GetSerialConsoleAccessStatusRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetSnapshotBlockPublicAccessStateRequest
 */
const se_GetSnapshotBlockPublicAccessStateRequest = (
  input: GetSnapshotBlockPublicAccessStateRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetSpotPlacementScoresRequest
 */
const se_GetSpotPlacementScoresRequest = (input: GetSpotPlacementScoresRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ITnst] != null) {
    const memberEntries = se_InstanceTypes(input[_ITnst], context);
    if (input[_ITnst]?.length === 0) {
      entries.InstanceType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TCa] != null) {
    entries[_TCa] = input[_TCa];
  }
  if (input[_TCUT] != null) {
    entries[_TCUT] = input[_TCUT];
  }
  if (input[_SAZ] != null) {
    entries[_SAZ] = input[_SAZ];
  }
  if (input[_RNe] != null) {
    const memberEntries = se_RegionNames(input[_RNe], context);
    if (input[_RNe]?.length === 0) {
      entries.RegionName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RegionName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IRWM] != null) {
    const memberEntries = se_InstanceRequirementsWithMetadataRequest(input[_IRWM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirementsWithMetadata.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  return entries;
};

/**
 * serializeAws_ec2GetSubnetCidrReservationsRequest
 */
const se_GetSubnetCidrReservationsRequest = (input: GetSubnetCidrReservationsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayAttachmentPropagationsRequest
 */
const se_GetTransitGatewayAttachmentPropagationsRequest = (
  input: GetTransitGatewayAttachmentPropagationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayMulticastDomainAssociationsRequest
 */
const se_GetTransitGatewayMulticastDomainAssociationsRequest = (
  input: GetTransitGatewayMulticastDomainAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayPolicyTableAssociationsRequest
 */
const se_GetTransitGatewayPolicyTableAssociationsRequest = (
  input: GetTransitGatewayPolicyTableAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGPTI] != null) {
    entries[_TGPTI] = input[_TGPTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayPolicyTableEntriesRequest
 */
const se_GetTransitGatewayPolicyTableEntriesRequest = (
  input: GetTransitGatewayPolicyTableEntriesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGPTI] != null) {
    entries[_TGPTI] = input[_TGPTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayPrefixListReferencesRequest
 */
const se_GetTransitGatewayPrefixListReferencesRequest = (
  input: GetTransitGatewayPrefixListReferencesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayRouteTableAssociationsRequest
 */
const se_GetTransitGatewayRouteTableAssociationsRequest = (
  input: GetTransitGatewayRouteTableAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetTransitGatewayRouteTablePropagationsRequest
 */
const se_GetTransitGatewayRouteTablePropagationsRequest = (
  input: GetTransitGatewayRouteTablePropagationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetVerifiedAccessEndpointPolicyRequest
 */
const se_GetVerifiedAccessEndpointPolicyRequest = (
  input: GetVerifiedAccessEndpointPolicyRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAEI] != null) {
    entries[_VAEI] = input[_VAEI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetVerifiedAccessGroupPolicyRequest
 */
const se_GetVerifiedAccessGroupPolicyRequest = (
  input: GetVerifiedAccessGroupPolicyRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetVpnConnectionDeviceSampleConfigurationRequest
 */
const se_GetVpnConnectionDeviceSampleConfigurationRequest = (
  input: GetVpnConnectionDeviceSampleConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_VCDTI] != null) {
    entries[_VCDTI] = input[_VCDTI];
  }
  if (input[_IKEV] != null) {
    entries[_IKEV] = input[_IKEV];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetVpnConnectionDeviceTypesRequest
 */
const se_GetVpnConnectionDeviceTypesRequest = (
  input: GetVpnConnectionDeviceTypesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GetVpnTunnelReplacementStatusRequest
 */
const se_GetVpnTunnelReplacementStatusRequest = (
  input: GetVpnTunnelReplacementStatusRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_VTOIA] != null) {
    entries[_VTOIA] = input[_VTOIA];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2GroupIdentifier
 */
const se_GroupIdentifier = (input: GroupIdentifier, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  return entries;
};

/**
 * serializeAws_ec2GroupIdentifierList
 */
const se_GroupIdentifierList = (input: GroupIdentifier[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_GroupIdentifier(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2GroupIds
 */
const se_GroupIds = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2GroupIdStringList
 */
const se_GroupIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`GroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2GroupNameStringList
 */
const se_GroupNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`GroupName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2HibernationOptionsRequest
 */
const se_HibernationOptionsRequest = (input: HibernationOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Conf] != null) {
    entries[_Conf] = input[_Conf];
  }
  return entries;
};

/**
 * serializeAws_ec2HostReservationIdSet
 */
const se_HostReservationIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IamInstanceProfileSpecification
 */
const se_IamInstanceProfileSpecification = (input: IamInstanceProfileSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Ar] != null) {
    entries[_Ar] = input[_Ar];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  return entries;
};

/**
 * serializeAws_ec2IcmpTypeCode
 */
const se_IcmpTypeCode = (input: IcmpTypeCode, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Cod] != null) {
    entries[_Cod] = input[_Cod];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  return entries;
};

/**
 * serializeAws_ec2IKEVersionsRequestList
 */
const se_IKEVersionsRequestList = (input: IKEVersionsRequestListValue[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_IKEVersionsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IKEVersionsRequestListValue
 */
const se_IKEVersionsRequestListValue = (input: IKEVersionsRequestListValue, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};

/**
 * serializeAws_ec2ImageDiskContainer
 */
const se_ImageDiskContainer = (input: ImageDiskContainer, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_Fo] != null) {
    entries[_Fo] = input[_Fo];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_U] != null) {
    entries[_U] = input[_U];
  }
  if (input[_UB] != null) {
    const memberEntries = se_UserBucket(input[_UB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserBucket.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ImageDiskContainerList
 */
const se_ImageDiskContainerList = (input: ImageDiskContainer[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ImageDiskContainer(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ImageIdList
 */
const se_ImageIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ImageIdStringList
 */
const se_ImageIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImageId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ImportClientVpnClientCertificateRevocationListRequest
 */
const se_ImportClientVpnClientCertificateRevocationListRequest = (
  input: ImportClientVpnClientCertificateRevocationListRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_CRL] != null) {
    entries[_CRL] = input[_CRL];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ImportImageLicenseConfigurationRequest
 */
const se_ImportImageLicenseConfigurationRequest = (
  input: ImportImageLicenseConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LCA] != null) {
    entries[_LCA] = input[_LCA];
  }
  return entries;
};

/**
 * serializeAws_ec2ImportImageLicenseSpecificationListRequest
 */
const se_ImportImageLicenseSpecificationListRequest = (
  input: ImportImageLicenseConfigurationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ImportImageLicenseConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ImportImageRequest
 */
const se_ImportImageRequest = (input: ImportImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Arc] != null) {
    entries[_Arc] = input[_Arc];
  }
  if (input[_CD] != null) {
    const memberEntries = se_ClientData(input[_CD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientData.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DCi] != null) {
    const memberEntries = se_ImageDiskContainerList(input[_DCi], context);
    if (input[_DCi]?.length === 0) {
      entries.DiskContainer = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DiskContainer.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_H] != null) {
    entries[_H] = input[_H];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_LTi] != null) {
    entries[_LTi] = input[_LTi];
  }
  if (input[_Pla] != null) {
    entries[_Pla] = input[_Pla];
  }
  if (input[_RNo] != null) {
    entries[_RNo] = input[_RNo];
  }
  if (input[_LSi] != null) {
    const memberEntries = se_ImportImageLicenseSpecificationListRequest(input[_LSi], context);
    if (input[_LSi]?.length === 0) {
      entries.LicenseSpecifications = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LicenseSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_UO] != null) {
    entries[_UO] = input[_UO];
  }
  if (input[_BM] != null) {
    entries[_BM] = input[_BM];
  }
  return entries;
};

/**
 * serializeAws_ec2ImportInstanceLaunchSpecification
 */
const se_ImportInstanceLaunchSpecification = (
  input: ImportInstanceLaunchSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AId] != null) {
    entries[_AId] = input[_AId];
  }
  if (input[_Arc] != null) {
    entries[_Arc] = input[_Arc];
  }
  if (input[_GIro] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_GIro], context);
    if (input[_GIro]?.length === 0) {
      entries.GroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_GNr] != null) {
    const memberEntries = se_SecurityGroupStringList(input[_GNr], context);
    if (input[_GNr]?.length === 0) {
      entries.GroupName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IISB] != null) {
    entries[_IISB] = input[_IISB];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_Mon] != null) {
    entries[_Mon] = input[_Mon];
  }
  if (input[_Pl] != null) {
    const memberEntries = se_Placement(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_UD] != null) {
    const memberEntries = se_UserData(input[_UD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserData.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ImportInstanceRequest
 */
const se_ImportInstanceRequest = (input: ImportInstanceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DIis] != null) {
    const memberEntries = se_DiskImageList(input[_DIis], context);
    if (input[_DIis]?.length === 0) {
      entries.DiskImage = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DiskImage.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LSa] != null) {
    const memberEntries = se_ImportInstanceLaunchSpecification(input[_LSa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Pla] != null) {
    entries[_Pla] = input[_Pla];
  }
  return entries;
};

/**
 * serializeAws_ec2ImportKeyPairRequest
 */
const se_ImportKeyPairRequest = (input: ImportKeyPairRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_PKM] != null) {
    entries[_PKM] = context.base64Encoder(input[_PKM]);
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ImportSnapshotRequest
 */
const se_ImportSnapshotRequest = (input: ImportSnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CD] != null) {
    const memberEntries = se_ClientData(input[_CD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientData.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DCis] != null) {
    const memberEntries = se_SnapshotDiskContainer(input[_DCis], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DiskContainer.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_RNo] != null) {
    entries[_RNo] = input[_RNo];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ImportSnapshotTaskIdList
 */
const se_ImportSnapshotTaskIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImportTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ImportTaskIdList
 */
const se_ImportTaskIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ImportTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ImportVolumeRequest
 */
const se_ImportVolumeRequest = (input: ImportVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Im] != null) {
    const memberEntries = se_DiskImageDetail(input[_Im], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Image.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Vo] != null) {
    const memberEntries = se_VolumeDetail(input[_Vo], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Volume.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InsideCidrBlocksStringList
 */
const se_InsideCidrBlocksStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceBlockDeviceMappingSpecification
 */
const se_InstanceBlockDeviceMappingSpecification = (
  input: InstanceBlockDeviceMappingSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_E] != null) {
    const memberEntries = se_EbsInstanceBlockDeviceSpecification(input[_E], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ND] != null) {
    entries[_ND] = input[_ND];
  }
  if (input[_VN] != null) {
    entries[_VN] = input[_VN];
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceBlockDeviceMappingSpecificationList
 */
const se_InstanceBlockDeviceMappingSpecificationList = (
  input: InstanceBlockDeviceMappingSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceBlockDeviceMappingSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceCreditSpecificationListRequest
 */
const se_InstanceCreditSpecificationListRequest = (
  input: InstanceCreditSpecificationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceCreditSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceCreditSpecificationRequest
 */
const se_InstanceCreditSpecificationRequest = (
  input: InstanceCreditSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_CCp] != null) {
    entries[_CCp] = input[_CCp];
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceEventWindowAssociationRequest
 */
const se_InstanceEventWindowAssociationRequest = (
  input: InstanceEventWindowAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdList(input[_IIns], context);
    if (input[_IIns]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ITnsta] != null) {
    const memberEntries = se_TagList(input[_ITnsta], context);
    if (input[_ITnsta]?.length === 0) {
      entries.InstanceTag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DHI] != null) {
    const memberEntries = se_DedicatedHostIdList(input[_DHI], context);
    if (input[_DHI]?.length === 0) {
      entries.DedicatedHostId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DedicatedHostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceEventWindowDisassociationRequest
 */
const se_InstanceEventWindowDisassociationRequest = (
  input: InstanceEventWindowDisassociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdList(input[_IIns], context);
    if (input[_IIns]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ITnsta] != null) {
    const memberEntries = se_TagList(input[_ITnsta], context);
    if (input[_ITnsta]?.length === 0) {
      entries.InstanceTag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DHI] != null) {
    const memberEntries = se_DedicatedHostIdList(input[_DHI], context);
    if (input[_DHI]?.length === 0) {
      entries.DedicatedHostId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DedicatedHostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceEventWindowIdSet
 */
const se_InstanceEventWindowIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`InstanceEventWindowId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceEventWindowTimeRangeRequest
 */
const se_InstanceEventWindowTimeRangeRequest = (
  input: InstanceEventWindowTimeRangeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_SWD] != null) {
    entries[_SWD] = input[_SWD];
  }
  if (input[_SH] != null) {
    entries[_SH] = input[_SH];
  }
  if (input[_EWD] != null) {
    entries[_EWD] = input[_EWD];
  }
  if (input[_EH] != null) {
    entries[_EH] = input[_EH];
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceEventWindowTimeRangeRequestSet
 */
const se_InstanceEventWindowTimeRangeRequestSet = (
  input: InstanceEventWindowTimeRangeRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceEventWindowTimeRangeRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceGenerationSet
 */
const se_InstanceGenerationSet = (input: InstanceGeneration[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceIdList
 */
const se_InstanceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceIdStringList
 */
const se_InstanceIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`InstanceId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceIpv6Address
 */
const se_InstanceIpv6Address = (input: InstanceIpv6Address, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IApv] != null) {
    entries[_IApv] = input[_IApv];
  }
  if (input[_IPIs] != null) {
    entries[_IPIs] = input[_IPIs];
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceIpv6AddressList
 */
const se_InstanceIpv6AddressList = (input: InstanceIpv6Address[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceIpv6Address(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceIpv6AddressListRequest
 */
const se_InstanceIpv6AddressListRequest = (input: InstanceIpv6AddressRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceIpv6AddressRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`InstanceIpv6Address.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceIpv6AddressRequest
 */
const se_InstanceIpv6AddressRequest = (input: InstanceIpv6AddressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IApv] != null) {
    entries[_IApv] = input[_IApv];
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceMaintenanceOptionsRequest
 */
const se_InstanceMaintenanceOptionsRequest = (
  input: InstanceMaintenanceOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_ARu] != null) {
    entries[_ARu] = input[_ARu];
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceMarketOptionsRequest
 */
const se_InstanceMarketOptionsRequest = (input: InstanceMarketOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_MT] != null) {
    entries[_MT] = input[_MT];
  }
  if (input[_SO] != null) {
    const memberEntries = se_SpotMarketOptions(input[_SO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceMetadataOptionsRequest
 */
const se_InstanceMetadataOptionsRequest = (input: InstanceMetadataOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_HT] != null) {
    entries[_HT] = input[_HT];
  }
  if (input[_HPRHL] != null) {
    entries[_HPRHL] = input[_HPRHL];
  }
  if (input[_HE] != null) {
    entries[_HE] = input[_HE];
  }
  if (input[_HPI] != null) {
    entries[_HPI] = input[_HPI];
  }
  if (input[_IMT] != null) {
    entries[_IMT] = input[_IMT];
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceNetworkInterfaceSpecification
 */
const se_InstanceNetworkInterfaceSpecification = (
  input: InstanceNetworkInterfaceSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_APIAs] != null) {
    entries[_APIAs] = input[_APIAs];
  }
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DIev] != null) {
    entries[_DIev] = input[_DIev];
  }
  if (input[_G] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_G], context);
    if (input[_G]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IAC] != null) {
    entries[_IAC] = input[_IAC];
  }
  if (input[_IA] != null) {
    const memberEntries = se_InstanceIpv6AddressList(input[_IA], context);
    if (input[_IA]?.length === 0) {
      entries.Ipv6Addresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_PIA] != null) {
    const memberEntries = se_PrivateIpAddressSpecificationList(input[_PIA], context);
    if (input[_PIA]?.length === 0) {
      entries.PrivateIpAddresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIAC] != null) {
    entries[_SPIAC] = input[_SPIAC];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_ACIA] != null) {
    entries[_ACIA] = input[_ACIA];
  }
  if (input[_ITn] != null) {
    entries[_ITn] = input[_ITn];
  }
  if (input[_NCI] != null) {
    entries[_NCI] = input[_NCI];
  }
  if (input[_IPp] != null) {
    const memberEntries = se_Ipv4PrefixList(input[_IPp], context);
    if (input[_IPp]?.length === 0) {
      entries.Ipv4Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPCp] != null) {
    entries[_IPCp] = input[_IPCp];
  }
  if (input[_IP] != null) {
    const memberEntries = se_Ipv6PrefixList(input[_IP], context);
    if (input[_IP]?.length === 0) {
      entries.Ipv6Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPC] != null) {
    entries[_IPC] = input[_IPC];
  }
  if (input[_PIr] != null) {
    entries[_PIr] = input[_PIr];
  }
  if (input[_ESS] != null) {
    const memberEntries = se_EnaSrdSpecificationRequest(input[_ESS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CTS] != null) {
    const memberEntries = se_ConnectionTrackingSpecificationRequest(input[_CTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionTrackingSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceNetworkInterfaceSpecificationList
 */
const se_InstanceNetworkInterfaceSpecificationList = (
  input: InstanceNetworkInterfaceSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_InstanceNetworkInterfaceSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceRequirements
 */
const se_InstanceRequirements = (input: InstanceRequirements, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VCC] != null) {
    const memberEntries = se_VCpuCountRange(input[_VCC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VCpuCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MMB] != null) {
    const memberEntries = se_MemoryMiB(input[_MMB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CM] != null) {
    const memberEntries = se_CpuManufacturerSet(input[_CM], context);
    if (input[_CM]?.length === 0) {
      entries.CpuManufacturerSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuManufacturerSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MGBPVC] != null) {
    const memberEntries = se_MemoryGiBPerVCpu(input[_MGBPVC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryGiBPerVCpu.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EIT] != null) {
    const memberEntries = se_ExcludedInstanceTypeSet(input[_EIT], context);
    if (input[_EIT]?.length === 0) {
      entries.ExcludedInstanceTypeSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludedInstanceTypeSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IG] != null) {
    const memberEntries = se_InstanceGenerationSet(input[_IG], context);
    if (input[_IG]?.length === 0) {
      entries.InstanceGenerationSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceGenerationSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SMPPOLP] != null) {
    entries[_SMPPOLP] = input[_SMPPOLP];
  }
  if (input[_ODMPPOLP] != null) {
    entries[_ODMPPOLP] = input[_ODMPPOLP];
  }
  if (input[_BMa] != null) {
    entries[_BMa] = input[_BMa];
  }
  if (input[_BP] != null) {
    entries[_BP] = input[_BP];
  }
  if (input[_RHS] != null) {
    entries[_RHS] = input[_RHS];
  }
  if (input[_NIC] != null) {
    const memberEntries = se_NetworkInterfaceCount(input[_NIC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LSo] != null) {
    entries[_LSo] = input[_LSo];
  }
  if (input[_LST] != null) {
    const memberEntries = se_LocalStorageTypeSet(input[_LST], context);
    if (input[_LST]?.length === 0) {
      entries.LocalStorageTypeSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalStorageTypeSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TLSGB] != null) {
    const memberEntries = se_TotalLocalStorageGB(input[_TLSGB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TotalLocalStorageGB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_BEBM] != null) {
    const memberEntries = se_BaselineEbsBandwidthMbps(input[_BEBM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BaselineEbsBandwidthMbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ATc] != null) {
    const memberEntries = se_AcceleratorTypeSet(input[_ATc], context);
    if (input[_ATc]?.length === 0) {
      entries.AcceleratorTypeSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorTypeSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ACc] != null) {
    const memberEntries = se_AcceleratorCount(input[_ACc], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AM] != null) {
    const memberEntries = se_AcceleratorManufacturerSet(input[_AM], context);
    if (input[_AM]?.length === 0) {
      entries.AcceleratorManufacturerSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorManufacturerSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ANc] != null) {
    const memberEntries = se_AcceleratorNameSet(input[_ANc], context);
    if (input[_ANc]?.length === 0) {
      entries.AcceleratorNameSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorNameSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ATMMB] != null) {
    const memberEntries = se_AcceleratorTotalMemoryMiB(input[_ATMMB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorTotalMemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NBGe] != null) {
    const memberEntries = se_NetworkBandwidthGbps(input[_NBGe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkBandwidthGbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AIT] != null) {
    const memberEntries = se_AllowedInstanceTypeSet(input[_AIT], context);
    if (input[_AIT]?.length === 0) {
      entries.AllowedInstanceTypeSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllowedInstanceTypeSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceRequirementsRequest
 */
const se_InstanceRequirementsRequest = (input: InstanceRequirementsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VCC] != null) {
    const memberEntries = se_VCpuCountRangeRequest(input[_VCC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VCpuCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MMB] != null) {
    const memberEntries = se_MemoryMiBRequest(input[_MMB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CM] != null) {
    const memberEntries = se_CpuManufacturerSet(input[_CM], context);
    if (input[_CM]?.length === 0) {
      entries.CpuManufacturer = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuManufacturer.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MGBPVC] != null) {
    const memberEntries = se_MemoryGiBPerVCpuRequest(input[_MGBPVC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MemoryGiBPerVCpu.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EIT] != null) {
    const memberEntries = se_ExcludedInstanceTypeSet(input[_EIT], context);
    if (input[_EIT]?.length === 0) {
      entries.ExcludedInstanceType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludedInstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IG] != null) {
    const memberEntries = se_InstanceGenerationSet(input[_IG], context);
    if (input[_IG]?.length === 0) {
      entries.InstanceGeneration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceGeneration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SMPPOLP] != null) {
    entries[_SMPPOLP] = input[_SMPPOLP];
  }
  if (input[_ODMPPOLP] != null) {
    entries[_ODMPPOLP] = input[_ODMPPOLP];
  }
  if (input[_BMa] != null) {
    entries[_BMa] = input[_BMa];
  }
  if (input[_BP] != null) {
    entries[_BP] = input[_BP];
  }
  if (input[_RHS] != null) {
    entries[_RHS] = input[_RHS];
  }
  if (input[_NIC] != null) {
    const memberEntries = se_NetworkInterfaceCountRequest(input[_NIC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LSo] != null) {
    entries[_LSo] = input[_LSo];
  }
  if (input[_LST] != null) {
    const memberEntries = se_LocalStorageTypeSet(input[_LST], context);
    if (input[_LST]?.length === 0) {
      entries.LocalStorageType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LocalStorageType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TLSGB] != null) {
    const memberEntries = se_TotalLocalStorageGBRequest(input[_TLSGB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TotalLocalStorageGB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_BEBM] != null) {
    const memberEntries = se_BaselineEbsBandwidthMbpsRequest(input[_BEBM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BaselineEbsBandwidthMbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ATc] != null) {
    const memberEntries = se_AcceleratorTypeSet(input[_ATc], context);
    if (input[_ATc]?.length === 0) {
      entries.AcceleratorType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ACc] != null) {
    const memberEntries = se_AcceleratorCountRequest(input[_ACc], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorCount.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AM] != null) {
    const memberEntries = se_AcceleratorManufacturerSet(input[_AM], context);
    if (input[_AM]?.length === 0) {
      entries.AcceleratorManufacturer = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorManufacturer.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ANc] != null) {
    const memberEntries = se_AcceleratorNameSet(input[_ANc], context);
    if (input[_ANc]?.length === 0) {
      entries.AcceleratorName = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorName.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ATMMB] != null) {
    const memberEntries = se_AcceleratorTotalMemoryMiBRequest(input[_ATMMB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AcceleratorTotalMemoryMiB.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NBGe] != null) {
    const memberEntries = se_NetworkBandwidthGbpsRequest(input[_NBGe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkBandwidthGbps.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AIT] != null) {
    const memberEntries = se_AllowedInstanceTypeSet(input[_AIT], context);
    if (input[_AIT]?.length === 0) {
      entries.AllowedInstanceType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AllowedInstanceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceRequirementsWithMetadataRequest
 */
const se_InstanceRequirementsWithMetadataRequest = (
  input: InstanceRequirementsWithMetadataRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_ATr] != null) {
    const memberEntries = se_ArchitectureTypeSet(input[_ATr], context);
    if (input[_ATr]?.length === 0) {
      entries.ArchitectureType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ArchitectureType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VTi] != null) {
    const memberEntries = se_VirtualizationTypeSet(input[_VTi], context);
    if (input[_VTi]?.length === 0) {
      entries.VirtualizationType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VirtualizationType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IR] != null) {
    const memberEntries = se_InstanceRequirementsRequest(input[_IR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceSpecification
 */
const se_InstanceSpecification = (input: InstanceSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_EBV] != null) {
    entries[_EBV] = input[_EBV];
  }
  if (input[_EDVI] != null) {
    const memberEntries = se_VolumeIdStringList(input[_EDVI], context);
    if (input[_EDVI]?.length === 0) {
      entries.ExcludeDataVolumeId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ExcludeDataVolumeId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceTagKeySet
 */
const se_InstanceTagKeySet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceTypeList
 */
const se_InstanceTypeList = (input: _InstanceType[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2InstanceTypes
 */
const se_InstanceTypes = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IntegrateServices
 */
const se_IntegrateServices = (input: IntegrateServices, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIth] != null) {
    const memberEntries = se_AthenaIntegrationsSet(input[_AIth], context);
    if (input[_AIth]?.length === 0) {
      entries.AthenaIntegration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AthenaIntegration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2InternetGatewayIdList
 */
const se_InternetGatewayIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IpamCidrAuthorizationContext
 */
const se_IpamCidrAuthorizationContext = (input: IpamCidrAuthorizationContext, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Me] != null) {
    entries[_Me] = input[_Me];
  }
  if (input[_Si] != null) {
    entries[_Si] = input[_Si];
  }
  return entries;
};

/**
 * serializeAws_ec2IpamPoolAllocationAllowedCidrs
 */
const se_IpamPoolAllocationAllowedCidrs = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IpamPoolAllocationDisallowedCidrs
 */
const se_IpamPoolAllocationDisallowedCidrs = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IpamPoolSourceResourceRequest
 */
const se_IpamPoolSourceResourceRequest = (input: IpamPoolSourceResourceRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_RIeso] != null) {
    entries[_RIeso] = input[_RIeso];
  }
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_RRe] != null) {
    entries[_RRe] = input[_RRe];
  }
  if (input[_RO] != null) {
    entries[_RO] = input[_RO];
  }
  return entries;
};

/**
 * serializeAws_ec2IpList
 */
const se_IpList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IpPermission
 */
const se_IpPermission = (input: IpPermission, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_IPpr] != null) {
    entries[_IPpr] = input[_IPpr];
  }
  if (input[_IRp] != null) {
    const memberEntries = se_IpRangeList(input[_IRp], context);
    if (input[_IRp]?.length === 0) {
      entries.IpRanges = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpRanges.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IRpv] != null) {
    const memberEntries = se_Ipv6RangeList(input[_IRpv], context);
    if (input[_IRpv]?.length === 0) {
      entries.Ipv6Ranges = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Ranges.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PLIr] != null) {
    const memberEntries = se_PrefixListIdList(input[_PLIr], context);
    if (input[_PLIr]?.length === 0) {
      entries.PrefixListIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrefixListIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  if (input[_UIGP] != null) {
    const memberEntries = se_UserIdGroupPairList(input[_UIGP], context);
    if (input[_UIGP]?.length === 0) {
      entries.Groups = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Groups.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2IpPermissionList
 */
const se_IpPermissionList = (input: IpPermission[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_IpPermission(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IpPrefixList
 */
const se_IpPrefixList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2IpRange
 */
const se_IpRange = (input: IpRange, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CIi] != null) {
    entries[_CIi] = input[_CIi];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  return entries;
};

/**
 * serializeAws_ec2IpRangeList
 */
const se_IpRangeList = (input: IpRange[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_IpRange(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv4PrefixList
 */
const se_Ipv4PrefixList = (input: Ipv4PrefixSpecificationRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Ipv4PrefixSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv4PrefixSpecificationRequest
 */
const se_Ipv4PrefixSpecificationRequest = (input: Ipv4PrefixSpecificationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IPpvr] != null) {
    entries[_IPpvr] = input[_IPpvr];
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv6AddressList
 */
const se_Ipv6AddressList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv6PoolIdList
 */
const se_Ipv6PoolIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv6PrefixList
 */
const se_Ipv6PrefixList = (input: Ipv6PrefixSpecificationRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Ipv6PrefixSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv6PrefixSpecificationRequest
 */
const se_Ipv6PrefixSpecificationRequest = (input: Ipv6PrefixSpecificationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IPpvre] != null) {
    entries[_IPpvre] = input[_IPpvre];
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv6Range
 */
const se_Ipv6Range = (input: Ipv6Range, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CIid] != null) {
    entries[_CIid] = input[_CIid];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  return entries;
};

/**
 * serializeAws_ec2Ipv6RangeList
 */
const se_Ipv6RangeList = (input: Ipv6Range[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Ipv6Range(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2KeyNameStringList
 */
const se_KeyNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`KeyName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2KeyPairIdStringList
 */
const se_KeyPairIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`KeyPairId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchPermission
 */
const se_LaunchPermission = (input: LaunchPermission, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Gr] != null) {
    entries[_Gr] = input[_Gr];
  }
  if (input[_UIs] != null) {
    entries[_UIs] = input[_UIs];
  }
  if (input[_OAr] != null) {
    entries[_OAr] = input[_OAr];
  }
  if (input[_OUA] != null) {
    entries[_OUA] = input[_OUA];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchPermissionList
 */
const se_LaunchPermissionList = (input: LaunchPermission[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchPermission(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchPermissionModifications
 */
const se_LaunchPermissionModifications = (input: LaunchPermissionModifications, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Add] != null) {
    const memberEntries = se_LaunchPermissionList(input[_Add], context);
    if (input[_Add]?.length === 0) {
      entries.Add = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Re] != null) {
    const memberEntries = se_LaunchPermissionList(input[_Re], context);
    if (input[_Re]?.length === 0) {
      entries.Remove = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchSpecsList
 */
const se_LaunchSpecsList = (input: SpotFleetLaunchSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SpotFleetLaunchSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateBlockDeviceMappingRequest
 */
const se_LaunchTemplateBlockDeviceMappingRequest = (
  input: LaunchTemplateBlockDeviceMappingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_VN] != null) {
    entries[_VN] = input[_VN];
  }
  if (input[_E] != null) {
    const memberEntries = se_LaunchTemplateEbsBlockDeviceRequest(input[_E], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ND] != null) {
    entries[_ND] = input[_ND];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateBlockDeviceMappingRequestList
 */
const se_LaunchTemplateBlockDeviceMappingRequestList = (
  input: LaunchTemplateBlockDeviceMappingRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateBlockDeviceMappingRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`BlockDeviceMapping.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateCapacityReservationSpecificationRequest
 */
const se_LaunchTemplateCapacityReservationSpecificationRequest = (
  input: LaunchTemplateCapacityReservationSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CRP] != null) {
    entries[_CRP] = input[_CRP];
  }
  if (input[_CRTa] != null) {
    const memberEntries = se_CapacityReservationTarget(input[_CRTa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationTarget.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateConfig
 */
const se_LaunchTemplateConfig = (input: LaunchTemplateConfig, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_LTS] != null) {
    const memberEntries = se_FleetLaunchTemplateSpecification(input[_LTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ov] != null) {
    const memberEntries = se_LaunchTemplateOverridesList(input[_Ov], context);
    if (input[_Ov]?.length === 0) {
      entries.Overrides = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateConfigList
 */
const se_LaunchTemplateConfigList = (input: LaunchTemplateConfig[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateConfig(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateCpuOptionsRequest
 */
const se_LaunchTemplateCpuOptionsRequest = (input: LaunchTemplateCpuOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CC] != null) {
    entries[_CC] = input[_CC];
  }
  if (input[_TPC] != null) {
    entries[_TPC] = input[_TPC];
  }
  if (input[_ASS] != null) {
    entries[_ASS] = input[_ASS];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateEbsBlockDeviceRequest
 */
const se_LaunchTemplateEbsBlockDeviceRequest = (
  input: LaunchTemplateEbsBlockDeviceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_Io] != null) {
    entries[_Io] = input[_Io];
  }
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_VS] != null) {
    entries[_VS] = input[_VS];
  }
  if (input[_VT] != null) {
    entries[_VT] = input[_VT];
  }
  if (input[_Th] != null) {
    entries[_Th] = input[_Th];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateElasticInferenceAccelerator
 */
const se_LaunchTemplateElasticInferenceAccelerator = (
  input: LaunchTemplateElasticInferenceAccelerator,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_Cou] != null) {
    entries[_Cou] = input[_Cou];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateElasticInferenceAcceleratorList
 */
const se_LaunchTemplateElasticInferenceAcceleratorList = (
  input: LaunchTemplateElasticInferenceAccelerator[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateElasticInferenceAccelerator(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateEnclaveOptionsRequest
 */
const se_LaunchTemplateEnclaveOptionsRequest = (
  input: LaunchTemplateEnclaveOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateHibernationOptionsRequest
 */
const se_LaunchTemplateHibernationOptionsRequest = (
  input: LaunchTemplateHibernationOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Conf] != null) {
    entries[_Conf] = input[_Conf];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateIamInstanceProfileSpecificationRequest
 */
const se_LaunchTemplateIamInstanceProfileSpecificationRequest = (
  input: LaunchTemplateIamInstanceProfileSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Ar] != null) {
    entries[_Ar] = input[_Ar];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateIdStringList
 */
const se_LaunchTemplateIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateInstanceMaintenanceOptionsRequest
 */
const se_LaunchTemplateInstanceMaintenanceOptionsRequest = (
  input: LaunchTemplateInstanceMaintenanceOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_ARu] != null) {
    entries[_ARu] = input[_ARu];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateInstanceMarketOptionsRequest
 */
const se_LaunchTemplateInstanceMarketOptionsRequest = (
  input: LaunchTemplateInstanceMarketOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_MT] != null) {
    entries[_MT] = input[_MT];
  }
  if (input[_SO] != null) {
    const memberEntries = se_LaunchTemplateSpotMarketOptionsRequest(input[_SO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateInstanceMetadataOptionsRequest
 */
const se_LaunchTemplateInstanceMetadataOptionsRequest = (
  input: LaunchTemplateInstanceMetadataOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_HT] != null) {
    entries[_HT] = input[_HT];
  }
  if (input[_HPRHL] != null) {
    entries[_HPRHL] = input[_HPRHL];
  }
  if (input[_HE] != null) {
    entries[_HE] = input[_HE];
  }
  if (input[_HPI] != null) {
    entries[_HPI] = input[_HPI];
  }
  if (input[_IMT] != null) {
    entries[_IMT] = input[_IMT];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequest
 */
const se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequest = (
  input: LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_ACIA] != null) {
    entries[_ACIA] = input[_ACIA];
  }
  if (input[_APIAs] != null) {
    entries[_APIAs] = input[_APIAs];
  }
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DIev] != null) {
    entries[_DIev] = input[_DIev];
  }
  if (input[_G] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_G], context);
    if (input[_G]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ITn] != null) {
    entries[_ITn] = input[_ITn];
  }
  if (input[_IAC] != null) {
    entries[_IAC] = input[_IAC];
  }
  if (input[_IA] != null) {
    const memberEntries = se_InstanceIpv6AddressListRequest(input[_IA], context);
    if (input[_IA]?.length === 0) {
      entries.Ipv6Addresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_PIA] != null) {
    const memberEntries = se_PrivateIpAddressSpecificationList(input[_PIA], context);
    if (input[_PIA]?.length === 0) {
      entries.PrivateIpAddresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIAC] != null) {
    entries[_SPIAC] = input[_SPIAC];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_NCI] != null) {
    entries[_NCI] = input[_NCI];
  }
  if (input[_IPp] != null) {
    const memberEntries = se_Ipv4PrefixList(input[_IPp], context);
    if (input[_IPp]?.length === 0) {
      entries.Ipv4Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPCp] != null) {
    entries[_IPCp] = input[_IPCp];
  }
  if (input[_IP] != null) {
    const memberEntries = se_Ipv6PrefixList(input[_IP], context);
    if (input[_IP]?.length === 0) {
      entries.Ipv6Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPC] != null) {
    entries[_IPC] = input[_IPC];
  }
  if (input[_PIr] != null) {
    entries[_PIr] = input[_PIr];
  }
  if (input[_ESS] != null) {
    const memberEntries = se_EnaSrdSpecificationRequest(input[_ESS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CTS] != null) {
    const memberEntries = se_ConnectionTrackingSpecificationRequest(input[_CTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionTrackingSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList
 */
const se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList = (
  input: LaunchTemplateInstanceNetworkInterfaceSpecificationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`InstanceNetworkInterfaceSpecification.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateLicenseConfigurationRequest
 */
const se_LaunchTemplateLicenseConfigurationRequest = (
  input: LaunchTemplateLicenseConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_LCA] != null) {
    entries[_LCA] = input[_LCA];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateLicenseSpecificationListRequest
 */
const se_LaunchTemplateLicenseSpecificationListRequest = (
  input: LaunchTemplateLicenseConfigurationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateLicenseConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateNameStringList
 */
const se_LaunchTemplateNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateOverrides
 */
const se_LaunchTemplateOverrides = (input: LaunchTemplateOverrides, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_SPp] != null) {
    entries[_SPp] = input[_SPp];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_WC] != null) {
    entries[_WC] = __serializeFloat(input[_WC]);
  }
  if (input[_Pri] != null) {
    entries[_Pri] = __serializeFloat(input[_Pri]);
  }
  if (input[_IR] != null) {
    const memberEntries = se_InstanceRequirements(input[_IR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateOverridesList
 */
const se_LaunchTemplateOverridesList = (input: LaunchTemplateOverrides[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateOverrides(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplatePlacementRequest
 */
const se_LaunchTemplatePlacementRequest = (input: LaunchTemplatePlacementRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_Af] != null) {
    entries[_Af] = input[_Af];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_HIo] != null) {
    entries[_HIo] = input[_HIo];
  }
  if (input[_Te] != null) {
    entries[_Te] = input[_Te];
  }
  if (input[_SD] != null) {
    entries[_SD] = input[_SD];
  }
  if (input[_HRGA] != null) {
    entries[_HRGA] = input[_HRGA];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplatePrivateDnsNameOptionsRequest
 */
const se_LaunchTemplatePrivateDnsNameOptionsRequest = (
  input: LaunchTemplatePrivateDnsNameOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_HTo] != null) {
    entries[_HTo] = input[_HTo];
  }
  if (input[_ERNDAR] != null) {
    entries[_ERNDAR] = input[_ERNDAR];
  }
  if (input[_ERNDAAAAR] != null) {
    entries[_ERNDAAAAR] = input[_ERNDAAAAR];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplatesMonitoringRequest
 */
const se_LaunchTemplatesMonitoringRequest = (input: LaunchTemplatesMonitoringRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateSpecification
 */
const se_LaunchTemplateSpecification = (input: LaunchTemplateSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_V] != null) {
    entries[_V] = input[_V];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateSpotMarketOptionsRequest
 */
const se_LaunchTemplateSpotMarketOptionsRequest = (
  input: LaunchTemplateSpotMarketOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_MPa] != null) {
    entries[_MPa] = input[_MPa];
  }
  if (input[_SIT] != null) {
    entries[_SIT] = input[_SIT];
  }
  if (input[_BDMl] != null) {
    entries[_BDMl] = input[_BDMl];
  }
  if (input[_VU] != null) {
    entries[_VU] = input[_VU].toISOString().split(".")[0] + "Z";
  }
  if (input[_IIB] != null) {
    entries[_IIB] = input[_IIB];
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateTagSpecificationRequest
 */
const se_LaunchTemplateTagSpecificationRequest = (
  input: LaunchTemplateTagSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    if (input[_Ta]?.length === 0) {
      entries.Tag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LaunchTemplateTagSpecificationRequestList
 */
const se_LaunchTemplateTagSpecificationRequestList = (
  input: LaunchTemplateTagSpecificationRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LaunchTemplateTagSpecificationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`LaunchTemplateTagSpecificationRequest.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LicenseConfigurationRequest
 */
const se_LicenseConfigurationRequest = (input: LicenseConfigurationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_LCA] != null) {
    entries[_LCA] = input[_LCA];
  }
  return entries;
};

/**
 * serializeAws_ec2LicenseSpecificationListRequest
 */
const se_LicenseSpecificationListRequest = (input: LicenseConfigurationRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LicenseConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ListImagesInRecycleBinRequest
 */
const se_ListImagesInRecycleBinRequest = (input: ListImagesInRecycleBinRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IImag] != null) {
    const memberEntries = se_ImageIdStringList(input[_IImag], context);
    if (input[_IImag]?.length === 0) {
      entries.ImageId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ListSnapshotsInRecycleBinRequest
 */
const se_ListSnapshotsInRecycleBinRequest = (input: ListSnapshotsInRecycleBinRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_SIna] != null) {
    const memberEntries = se_SnapshotIdStringList(input[_SIna], context);
    if (input[_SIna]?.length === 0) {
      entries.SnapshotId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2LoadBalancersConfig
 */
const se_LoadBalancersConfig = (input: LoadBalancersConfig, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CLBC] != null) {
    const memberEntries = se_ClassicLoadBalancersConfig(input[_CLBC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClassicLoadBalancersConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_TGC] != null) {
    const memberEntries = se_TargetGroupsConfig(input[_TGC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroupsConfig.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LoadPermissionListRequest
 */
const se_LoadPermissionListRequest = (input: LoadPermissionRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_LoadPermissionRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LoadPermissionModifications
 */
const se_LoadPermissionModifications = (input: LoadPermissionModifications, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Add] != null) {
    const memberEntries = se_LoadPermissionListRequest(input[_Add], context);
    if (input[_Add]?.length === 0) {
      entries.Add = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Re] != null) {
    const memberEntries = se_LoadPermissionListRequest(input[_Re], context);
    if (input[_Re]?.length === 0) {
      entries.Remove = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2LoadPermissionRequest
 */
const se_LoadPermissionRequest = (input: LoadPermissionRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Gr] != null) {
    entries[_Gr] = input[_Gr];
  }
  if (input[_UIs] != null) {
    entries[_UIs] = input[_UIs];
  }
  return entries;
};

/**
 * serializeAws_ec2LocalGatewayIdSet
 */
const se_LocalGatewayIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LocalGatewayRouteTableIdSet
 */
const se_LocalGatewayRouteTableIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet
 */
const se_LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet = (
  input: string[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LocalGatewayRouteTableVpcAssociationIdSet
 */
const se_LocalGatewayRouteTableVpcAssociationIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LocalGatewayVirtualInterfaceGroupIdSet
 */
const se_LocalGatewayVirtualInterfaceGroupIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LocalGatewayVirtualInterfaceIdSet
 */
const se_LocalGatewayVirtualInterfaceIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LocalStorageTypeSet
 */
const se_LocalStorageTypeSet = (input: LocalStorageType[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2LockSnapshotRequest
 */
const se_LockSnapshotRequest = (input: LockSnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LM] != null) {
    entries[_LM] = input[_LM];
  }
  if (input[_COP] != null) {
    entries[_COP] = input[_COP];
  }
  if (input[_LDo] != null) {
    entries[_LDo] = input[_LDo];
  }
  if (input[_EDx] != null) {
    entries[_EDx] = input[_EDx].toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2MemoryGiBPerVCpu
 */
const se_MemoryGiBPerVCpu = (input: MemoryGiBPerVCpu, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = __serializeFloat(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = __serializeFloat(input[_Ma]);
  }
  return entries;
};

/**
 * serializeAws_ec2MemoryGiBPerVCpuRequest
 */
const se_MemoryGiBPerVCpuRequest = (input: MemoryGiBPerVCpuRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = __serializeFloat(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = __serializeFloat(input[_Ma]);
  }
  return entries;
};

/**
 * serializeAws_ec2MemoryMiB
 */
const se_MemoryMiB = (input: MemoryMiB, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};

/**
 * serializeAws_ec2MemoryMiBRequest
 */
const se_MemoryMiBRequest = (input: MemoryMiBRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyAddressAttributeRequest
 */
const se_ModifyAddressAttributeRequest = (input: ModifyAddressAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_DNo] != null) {
    entries[_DNo] = input[_DNo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyAvailabilityZoneGroupRequest
 */
const se_ModifyAvailabilityZoneGroupRequest = (
  input: ModifyAvailabilityZoneGroupRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_OIS] != null) {
    entries[_OIS] = input[_OIS];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyCapacityReservationFleetRequest
 */
const se_ModifyCapacityReservationFleetRequest = (
  input: ModifyCapacityReservationFleetRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CRFIa] != null) {
    entries[_CRFIa] = input[_CRFIa];
  }
  if (input[_TTC] != null) {
    entries[_TTC] = input[_TTC];
  }
  if (input[_ED] != null) {
    entries[_ED] = input[_ED].toISOString().split(".")[0] + "Z";
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RED] != null) {
    entries[_RED] = input[_RED];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyCapacityReservationRequest
 */
const se_ModifyCapacityReservationRequest = (input: ModifyCapacityReservationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CRI] != null) {
    entries[_CRI] = input[_CRI];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_ED] != null) {
    entries[_ED] = input[_ED].toISOString().split(".")[0] + "Z";
  }
  if (input[_EDT] != null) {
    entries[_EDT] = input[_EDT];
  }
  if (input[_Ac] != null) {
    entries[_Ac] = input[_Ac];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_AId] != null) {
    entries[_AId] = input[_AId];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyClientVpnEndpointRequest
 */
const se_ModifyClientVpnEndpointRequest = (input: ModifyClientVpnEndpointRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_SCA] != null) {
    entries[_SCA] = input[_SCA];
  }
  if (input[_CLO] != null) {
    const memberEntries = se_ConnectionLogOptions(input[_CLO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionLogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DSn] != null) {
    const memberEntries = se_DnsServersOptionsModifyStructure(input[_DSn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsServers.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_VP] != null) {
    entries[_VP] = input[_VP];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_ST] != null) {
    entries[_ST] = input[_ST];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_ClientVpnSecurityGroupIdSet(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_SSP] != null) {
    entries[_SSP] = input[_SSP];
  }
  if (input[_CCO] != null) {
    const memberEntries = se_ClientConnectOptions(input[_CCO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientConnectOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_STH] != null) {
    entries[_STH] = input[_STH];
  }
  if (input[_CLBO] != null) {
    const memberEntries = se_ClientLoginBannerOptions(input[_CLBO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ClientLoginBannerOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyDefaultCreditSpecificationRequest
 */
const se_ModifyDefaultCreditSpecificationRequest = (
  input: ModifyDefaultCreditSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IF] != null) {
    entries[_IF] = input[_IF];
  }
  if (input[_CCp] != null) {
    entries[_CCp] = input[_CCp];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyEbsDefaultKmsKeyIdRequest
 */
const se_ModifyEbsDefaultKmsKeyIdRequest = (input: ModifyEbsDefaultKmsKeyIdRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_KKI] != null) {
    entries[_KKI] = input[_KKI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyFleetRequest
 */
const se_ModifyFleetRequest = (input: ModifyFleetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ECTP] != null) {
    entries[_ECTP] = input[_ECTP];
  }
  if (input[_LTC] != null) {
    const memberEntries = se_FleetLaunchTemplateConfigListRequest(input[_LTC], context);
    if (input[_LTC]?.length === 0) {
      entries.LaunchTemplateConfig = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_FIl] != null) {
    entries[_FIl] = input[_FIl];
  }
  if (input[_TCS] != null) {
    const memberEntries = se_TargetCapacitySpecificationRequest(input[_TCS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetCapacitySpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Con] != null) {
    entries[_Con] = input[_Con];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyFpgaImageAttributeRequest
 */
const se_ModifyFpgaImageAttributeRequest = (input: ModifyFpgaImageAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FII] != null) {
    entries[_FII] = input[_FII];
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_OTp] != null) {
    entries[_OTp] = input[_OTp];
  }
  if (input[_UIse] != null) {
    const memberEntries = se_UserIdStringList(input[_UIse], context);
    if (input[_UIse]?.length === 0) {
      entries.UserId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_UG] != null) {
    const memberEntries = se_UserGroupStringList(input[_UG], context);
    if (input[_UG]?.length === 0) {
      entries.UserGroup = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PCr] != null) {
    const memberEntries = se_ProductCodeStringList(input[_PCr], context);
    if (input[_PCr]?.length === 0) {
      entries.ProductCode = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LP] != null) {
    const memberEntries = se_LoadPermissionModifications(input[_LP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadPermission.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyHostsRequest
 */
const se_ModifyHostsRequest = (input: ModifyHostsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AP] != null) {
    entries[_AP] = input[_AP];
  }
  if (input[_HI] != null) {
    const memberEntries = se_RequestHostIdList(input[_HI], context);
    if (input[_HI]?.length === 0) {
      entries.HostId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_HR] != null) {
    entries[_HR] = input[_HR];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_IF] != null) {
    entries[_IF] = input[_IF];
  }
  if (input[_HM] != null) {
    entries[_HM] = input[_HM];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIdentityIdFormatRequest
 */
const se_ModifyIdentityIdFormatRequest = (input: ModifyIdentityIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_PAr] != null) {
    entries[_PAr] = input[_PAr];
  }
  if (input[_Res] != null) {
    entries[_Res] = input[_Res];
  }
  if (input[_ULI] != null) {
    entries[_ULI] = input[_ULI];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIdFormatRequest
 */
const se_ModifyIdFormatRequest = (input: ModifyIdFormatRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Res] != null) {
    entries[_Res] = input[_Res];
  }
  if (input[_ULI] != null) {
    entries[_ULI] = input[_ULI];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyImageAttributeRequest
 */
const se_ModifyImageAttributeRequest = (input: ModifyImageAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_De] != null) {
    const memberEntries = se_AttributeValue(input[_De], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Description.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_LPa] != null) {
    const memberEntries = se_LaunchPermissionModifications(input[_LPa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchPermission.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_OTp] != null) {
    entries[_OTp] = input[_OTp];
  }
  if (input[_PCr] != null) {
    const memberEntries = se_ProductCodeStringList(input[_PCr], context);
    if (input[_PCr]?.length === 0) {
      entries.ProductCode = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_UG] != null) {
    const memberEntries = se_UserGroupStringList(input[_UG], context);
    if (input[_UG]?.length === 0) {
      entries.UserGroup = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_UIse] != null) {
    const memberEntries = se_UserIdStringList(input[_UIse], context);
    if (input[_UIse]?.length === 0) {
      entries.UserId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_OArg] != null) {
    const memberEntries = se_OrganizationArnStringList(input[_OArg], context);
    if (input[_OArg]?.length === 0) {
      entries.OrganizationArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OrganizationArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_OUAr] != null) {
    const memberEntries = se_OrganizationalUnitArnStringList(input[_OUAr], context);
    if (input[_OUAr]?.length === 0) {
      entries.OrganizationalUnitArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OrganizationalUnitArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ISm] != null) {
    const memberEntries = se_AttributeValue(input[_ISm], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ImdsSupport.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceAttributeRequest
 */
const se_ModifyInstanceAttributeRequest = (input: ModifyInstanceAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SDC] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_SDC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceDestCheck.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_BDM] != null) {
    const memberEntries = se_InstanceBlockDeviceMappingSpecificationList(input[_BDM], context);
    if (input[_BDM]?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DATis] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_DATis], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisableApiTermination.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_EO] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_EO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EbsOptimized.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ESn] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_ESn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSupport.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_G] != null) {
    const memberEntries = se_GroupIdStringList(input[_G], context);
    if (input[_G]?.length === 0) {
      entries.GroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_IISB] != null) {
    const memberEntries = se_AttributeValue(input[_IISB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceInitiatedShutdownBehavior.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IT] != null) {
    const memberEntries = se_AttributeValue(input[_IT], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceType.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_K] != null) {
    const memberEntries = se_AttributeValue(input[_K], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Kernel.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Ra] != null) {
    const memberEntries = se_AttributeValue(input[_Ra], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ramdisk.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SNS] != null) {
    const memberEntries = se_AttributeValue(input[_SNS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SriovNetSupport.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_UD] != null) {
    const memberEntries = se_BlobAttributeValue(input[_UD], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserData.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  if (input[_DAS] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_DAS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisableApiStop.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceCapacityReservationAttributesRequest
 */
const se_ModifyInstanceCapacityReservationAttributesRequest = (
  input: ModifyInstanceCapacityReservationAttributesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_CRS] != null) {
    const memberEntries = se_CapacityReservationSpecification(input[_CRS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceCreditSpecificationRequest
 */
const se_ModifyInstanceCreditSpecificationRequest = (
  input: ModifyInstanceCreditSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_ICS] != null) {
    const memberEntries = se_InstanceCreditSpecificationListRequest(input[_ICS], context);
    if (input[_ICS]?.length === 0) {
      entries.InstanceCreditSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceCreditSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceEventStartTimeRequest
 */
const se_ModifyInstanceEventStartTimeRequest = (
  input: ModifyInstanceEventStartTimeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_IEI] != null) {
    entries[_IEI] = input[_IEI];
  }
  if (input[_NB] != null) {
    entries[_NB] = input[_NB].toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceEventWindowRequest
 */
const se_ModifyInstanceEventWindowRequest = (input: ModifyInstanceEventWindowRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_IEWI] != null) {
    entries[_IEWI] = input[_IEWI];
  }
  if (input[_TRi] != null) {
    const memberEntries = se_InstanceEventWindowTimeRangeRequestSet(input[_TRi], context);
    if (input[_TRi]?.length === 0) {
      entries.TimeRange = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TimeRange.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CE] != null) {
    entries[_CE] = input[_CE];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceMaintenanceOptionsRequest
 */
const se_ModifyInstanceMaintenanceOptionsRequest = (
  input: ModifyInstanceMaintenanceOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_ARu] != null) {
    entries[_ARu] = input[_ARu];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstanceMetadataOptionsRequest
 */
const se_ModifyInstanceMetadataOptionsRequest = (
  input: ModifyInstanceMetadataOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_HT] != null) {
    entries[_HT] = input[_HT];
  }
  if (input[_HPRHL] != null) {
    entries[_HPRHL] = input[_HPRHL];
  }
  if (input[_HE] != null) {
    entries[_HE] = input[_HE];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_HPI] != null) {
    entries[_HPI] = input[_HPI];
  }
  if (input[_IMT] != null) {
    entries[_IMT] = input[_IMT];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyInstancePlacementRequest
 */
const se_ModifyInstancePlacementRequest = (input: ModifyInstancePlacementRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Af] != null) {
    entries[_Af] = input[_Af];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_HIo] != null) {
    entries[_HIo] = input[_HIo];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_Te] != null) {
    entries[_Te] = input[_Te];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_HRGA] != null) {
    entries[_HRGA] = input[_HRGA];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIpamPoolRequest
 */
const se_ModifyIpamPoolRequest = (input: ModifyIpamPoolRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_AIu] != null) {
    entries[_AIu] = input[_AIu];
  }
  if (input[_AMNL] != null) {
    entries[_AMNL] = input[_AMNL];
  }
  if (input[_AMNLl] != null) {
    entries[_AMNLl] = input[_AMNLl];
  }
  if (input[_ADNL] != null) {
    entries[_ADNL] = input[_ADNL];
  }
  if (input[_CADNL] != null) {
    entries[_CADNL] = input[_CADNL];
  }
  if (input[_AART] != null) {
    const memberEntries = se_RequestIpamResourceTagList(input[_AART], context);
    if (input[_AART]?.length === 0) {
      entries.AddAllocationResourceTag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddAllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RART] != null) {
    const memberEntries = se_RequestIpamResourceTagList(input[_RART], context);
    if (input[_RART]?.length === 0) {
      entries.RemoveAllocationResourceTag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveAllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIpamRequest
 */
const se_ModifyIpamRequest = (input: ModifyIpamRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIp] != null) {
    entries[_IIp] = input[_IIp];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_AOR] != null) {
    const memberEntries = se_AddIpamOperatingRegionSet(input[_AOR], context);
    if (input[_AOR]?.length === 0) {
      entries.AddOperatingRegion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ROR] != null) {
    const memberEntries = se_RemoveIpamOperatingRegionSet(input[_ROR], context);
    if (input[_ROR]?.length === 0) {
      entries.RemoveOperatingRegion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Ti] != null) {
    entries[_Ti] = input[_Ti];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIpamResourceCidrRequest
 */
const se_ModifyIpamResourceCidrRequest = (input: ModifyIpamResourceCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RIeso] != null) {
    entries[_RIeso] = input[_RIeso];
  }
  if (input[_RC] != null) {
    entries[_RC] = input[_RC];
  }
  if (input[_RRe] != null) {
    entries[_RRe] = input[_RRe];
  }
  if (input[_CISI] != null) {
    entries[_CISI] = input[_CISI];
  }
  if (input[_DISI] != null) {
    entries[_DISI] = input[_DISI];
  }
  if (input[_Moni] != null) {
    entries[_Moni] = input[_Moni];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIpamResourceDiscoveryRequest
 */
const se_ModifyIpamResourceDiscoveryRequest = (
  input: ModifyIpamResourceDiscoveryRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IRDI] != null) {
    entries[_IRDI] = input[_IRDI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_AOR] != null) {
    const memberEntries = se_AddIpamOperatingRegionSet(input[_AOR], context);
    if (input[_AOR]?.length === 0) {
      entries.AddOperatingRegion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ROR] != null) {
    const memberEntries = se_RemoveIpamOperatingRegionSet(input[_ROR], context);
    if (input[_ROR]?.length === 0) {
      entries.RemoveOperatingRegion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyIpamScopeRequest
 */
const se_ModifyIpamScopeRequest = (input: ModifyIpamScopeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ISI] != null) {
    entries[_ISI] = input[_ISI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyLaunchTemplateRequest
 */
const se_ModifyLaunchTemplateRequest = (input: ModifyLaunchTemplateRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_LTI] != null) {
    entries[_LTI] = input[_LTI];
  }
  if (input[_LTN] != null) {
    entries[_LTN] = input[_LTN];
  }
  if (input[_DVef] != null) {
    entries[_SDV] = input[_DVef];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyLocalGatewayRouteRequest
 */
const se_ModifyLocalGatewayRouteRequest = (input: ModifyLocalGatewayRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_LGVIGI] != null) {
    entries[_LGVIGI] = input[_LGVIGI];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_DPLI] != null) {
    entries[_DPLI] = input[_DPLI];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyManagedPrefixListRequest
 */
const se_ModifyManagedPrefixListRequest = (input: ModifyManagedPrefixListRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_CVu] != null) {
    entries[_CVu] = input[_CVu];
  }
  if (input[_PLN] != null) {
    entries[_PLN] = input[_PLN];
  }
  if (input[_AEd] != null) {
    const memberEntries = se_AddPrefixListEntries(input[_AEd], context);
    if (input[_AEd]?.length === 0) {
      entries.AddEntry = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddEntry.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RE] != null) {
    const memberEntries = se_RemovePrefixListEntries(input[_RE], context);
    if (input[_RE]?.length === 0) {
      entries.RemoveEntry = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveEntry.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ME] != null) {
    entries[_ME] = input[_ME];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyNetworkInterfaceAttributeRequest
 */
const se_ModifyNetworkInterfaceAttributeRequest = (
  input: ModifyNetworkInterfaceAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Att] != null) {
    const memberEntries = se_NetworkInterfaceAttachmentChanges(input[_Att], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Attachment.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    const memberEntries = se_AttributeValue(input[_De], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Description.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_G] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_G], context);
    if (input[_G]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_SDC] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_SDC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceDestCheck.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ESS] != null) {
    const memberEntries = se_EnaSrdSpecification(input[_ESS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnaSrdSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EPI] != null) {
    entries[_EPI] = input[_EPI];
  }
  if (input[_CTS] != null) {
    const memberEntries = se_ConnectionTrackingSpecificationRequest(input[_CTS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionTrackingSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyPrivateDnsNameOptionsRequest
 */
const se_ModifyPrivateDnsNameOptionsRequest = (
  input: ModifyPrivateDnsNameOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_PDHT] != null) {
    entries[_PDHT] = input[_PDHT];
  }
  if (input[_ERNDAR] != null) {
    entries[_ERNDAR] = input[_ERNDAR];
  }
  if (input[_ERNDAAAAR] != null) {
    entries[_ERNDAAAAR] = input[_ERNDAAAAR];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyReservedInstancesRequest
 */
const se_ModifyReservedInstancesRequest = (input: ModifyReservedInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_RIIes] != null) {
    const memberEntries = se_ReservedInstancesIdStringList(input[_RIIes], context);
    if (input[_RIIes]?.length === 0) {
      entries.ReservedInstancesId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_TC] != null) {
    const memberEntries = se_ReservedInstancesConfigurationList(input[_TC], context);
    if (input[_TC]?.length === 0) {
      entries.ReservedInstancesConfigurationSetItemType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReservedInstancesConfigurationSetItemType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifySecurityGroupRulesRequest
 */
const se_ModifySecurityGroupRulesRequest = (input: ModifySecurityGroupRulesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_SGR] != null) {
    const memberEntries = se_SecurityGroupRuleUpdateList(input[_SGR], context);
    if (input[_SGR]?.length === 0) {
      entries.SecurityGroupRule = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRule.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifySnapshotAttributeRequest
 */
const se_ModifySnapshotAttributeRequest = (input: ModifySnapshotAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_CVP] != null) {
    const memberEntries = se_CreateVolumePermissionModifications(input[_CVP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CreateVolumePermission.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_GNr] != null) {
    const memberEntries = se_GroupNameStringList(input[_GNr], context);
    if (input[_GNr]?.length === 0) {
      entries.UserGroup = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_OTp] != null) {
    entries[_OTp] = input[_OTp];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_UIse] != null) {
    const memberEntries = se_UserIdStringList(input[_UIse], context);
    if (input[_UIse]?.length === 0) {
      entries.UserId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifySnapshotTierRequest
 */
const se_ModifySnapshotTierRequest = (input: ModifySnapshotTierRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_STto] != null) {
    entries[_STto] = input[_STto];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifySpotFleetRequestRequest
 */
const se_ModifySpotFleetRequestRequest = (input: ModifySpotFleetRequestRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ECTP] != null) {
    entries[_ECTP] = input[_ECTP];
  }
  if (input[_LTC] != null) {
    const memberEntries = se_LaunchTemplateConfigList(input[_LTC], context);
    if (input[_LTC]?.length === 0) {
      entries.LaunchTemplateConfig = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SFRIp] != null) {
    entries[_SFRIp] = input[_SFRIp];
  }
  if (input[_TCa] != null) {
    entries[_TCa] = input[_TCa];
  }
  if (input[_ODTC] != null) {
    entries[_ODTC] = input[_ODTC];
  }
  if (input[_Con] != null) {
    entries[_Con] = input[_Con];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifySubnetAttributeRequest
 */
const se_ModifySubnetAttributeRequest = (input: ModifySubnetAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIAOC] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_AIAOC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AssignIpv6AddressOnCreation.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MPIOL] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_MPIOL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MapPublicIpOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_MCOIOL] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_MCOIOL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MapCustomerOwnedIpOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_COIP] != null) {
    entries[_COIP] = input[_COIP];
  }
  if (input[_EDn] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_EDn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableDns64.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PDHTOL] != null) {
    entries[_PDHTOL] = input[_PDHTOL];
  }
  if (input[_ERNDAROL] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_ERNDAROL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableResourceNameDnsARecordOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ERNDAAAAROL] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_ERNDAAAAROL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableResourceNameDnsAAAARecordOnLaunch.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ELADI] != null) {
    entries[_ELADI] = input[_ELADI];
  }
  if (input[_DLADI] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_DLADI], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DisableLniAtDeviceIndex.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesRequest
 */
const se_ModifyTrafficMirrorFilterNetworkServicesRequest = (
  input: ModifyTrafficMirrorFilterNetworkServicesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TMFI] != null) {
    entries[_TMFI] = input[_TMFI];
  }
  if (input[_ANS] != null) {
    const memberEntries = se_TrafficMirrorNetworkServiceList(input[_ANS], context);
    if (input[_ANS]?.length === 0) {
      entries.AddNetworkService = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddNetworkService.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RNS] != null) {
    const memberEntries = se_TrafficMirrorNetworkServiceList(input[_RNS], context);
    if (input[_RNS]?.length === 0) {
      entries.RemoveNetworkService = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveNetworkService.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTrafficMirrorFilterRuleRequest
 */
const se_ModifyTrafficMirrorFilterRuleRequest = (
  input: ModifyTrafficMirrorFilterRuleRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TMFRI] != null) {
    entries[_TMFRI] = input[_TMFRI];
  }
  if (input[_TD] != null) {
    entries[_TD] = input[_TD];
  }
  if (input[_RNu] != null) {
    entries[_RNu] = input[_RNu];
  }
  if (input[_RAu] != null) {
    entries[_RAu] = input[_RAu];
  }
  if (input[_DPR] != null) {
    const memberEntries = se_TrafficMirrorPortRangeRequest(input[_DPR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SPR] != null) {
    const memberEntries = se_TrafficMirrorPortRangeRequest(input[_SPR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_SCB] != null) {
    entries[_SCB] = input[_SCB];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_RF] != null) {
    const memberEntries = se_TrafficMirrorFilterRuleFieldList(input[_RF], context);
    if (input[_RF]?.length === 0) {
      entries.RemoveField = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTrafficMirrorSessionRequest
 */
const se_ModifyTrafficMirrorSessionRequest = (
  input: ModifyTrafficMirrorSessionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TMSI] != null) {
    entries[_TMSI] = input[_TMSI];
  }
  if (input[_TMTI] != null) {
    entries[_TMTI] = input[_TMTI];
  }
  if (input[_TMFI] != null) {
    entries[_TMFI] = input[_TMFI];
  }
  if (input[_PL] != null) {
    entries[_PL] = input[_PL];
  }
  if (input[_SN] != null) {
    entries[_SN] = input[_SN];
  }
  if (input[_VNI] != null) {
    entries[_VNI] = input[_VNI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_RF] != null) {
    const memberEntries = se_TrafficMirrorSessionFieldList(input[_RF], context);
    if (input[_RF]?.length === 0) {
      entries.RemoveField = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTransitGatewayOptions
 */
const se_ModifyTransitGatewayOptions = (input: ModifyTransitGatewayOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ATGCB] != null) {
    const memberEntries = se_TransitGatewayCidrBlockStringList(input[_ATGCB], context);
    if (input[_ATGCB]?.length === 0) {
      entries.AddTransitGatewayCidrBlocks = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RTGCB] != null) {
    const memberEntries = se_TransitGatewayCidrBlockStringList(input[_RTGCB], context);
    if (input[_RTGCB]?.length === 0) {
      entries.RemoveTransitGatewayCidrBlocks = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_VES] != null) {
    entries[_VES] = input[_VES];
  }
  if (input[_DSns] != null) {
    entries[_DSns] = input[_DSns];
  }
  if (input[_SGRS] != null) {
    entries[_SGRS] = input[_SGRS];
  }
  if (input[_AASAu] != null) {
    entries[_AASAu] = input[_AASAu];
  }
  if (input[_DRTA] != null) {
    entries[_DRTA] = input[_DRTA];
  }
  if (input[_ADRTI] != null) {
    entries[_ADRTI] = input[_ADRTI];
  }
  if (input[_DRTP] != null) {
    entries[_DRTP] = input[_DRTP];
  }
  if (input[_PDRTI] != null) {
    entries[_PDRTI] = input[_PDRTI];
  }
  if (input[_ASA] != null) {
    entries[_ASA] = input[_ASA];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTransitGatewayPrefixListReferenceRequest
 */
const se_ModifyTransitGatewayPrefixListReferenceRequest = (
  input: ModifyTransitGatewayPrefixListReferenceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_Bl] != null) {
    entries[_Bl] = input[_Bl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTransitGatewayRequest
 */
const se_ModifyTransitGatewayRequest = (input: ModifyTransitGatewayRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_O] != null) {
    const memberEntries = se_ModifyTransitGatewayOptions(input[_O], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequest
 */
const se_ModifyTransitGatewayVpcAttachmentRequest = (
  input: ModifyTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_ASI] != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input[_ASI], context);
    if (input[_ASI]?.length === 0) {
      entries.AddSubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RSIe] != null) {
    const memberEntries = se_TransitGatewaySubnetIdList(input[_RSIe], context);
    if (input[_RSIe]?.length === 0) {
      entries.RemoveSubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_O] != null) {
    const memberEntries = se_ModifyTransitGatewayVpcAttachmentRequestOptions(input[_O], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Options.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyTransitGatewayVpcAttachmentRequestOptions
 */
const se_ModifyTransitGatewayVpcAttachmentRequestOptions = (
  input: ModifyTransitGatewayVpcAttachmentRequestOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DSns] != null) {
    entries[_DSns] = input[_DSns];
  }
  if (input[_SGRS] != null) {
    entries[_SGRS] = input[_SGRS];
  }
  if (input[_ISp] != null) {
    entries[_ISp] = input[_ISp];
  }
  if (input[_AMS] != null) {
    entries[_AMS] = input[_AMS];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointEniOptions
 */
const se_ModifyVerifiedAccessEndpointEniOptions = (
  input: ModifyVerifiedAccessEndpointEniOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointLoadBalancerOptions
 */
const se_ModifyVerifiedAccessEndpointLoadBalancerOptions = (
  input: ModifyVerifiedAccessEndpointLoadBalancerOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_SIu] != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointSubnetIdList(input[_SIu], context);
    if (input[_SIu]?.length === 0) {
      entries.SubnetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_Po] != null) {
    entries[_Po] = input[_Po];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointPolicyRequest
 */
const se_ModifyVerifiedAccessEndpointPolicyRequest = (
  input: ModifyVerifiedAccessEndpointPolicyRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAEI] != null) {
    entries[_VAEI] = input[_VAEI];
  }
  if (input[_PE] != null) {
    entries[_PE] = input[_PE];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SS] != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointRequest
 */
const se_ModifyVerifiedAccessEndpointRequest = (
  input: ModifyVerifiedAccessEndpointRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAEI] != null) {
    entries[_VAEI] = input[_VAEI];
  }
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_LBO] != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointLoadBalancerOptions(input[_LBO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancerOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NIO] != null) {
    const memberEntries = se_ModifyVerifiedAccessEndpointEniOptions(input[_NIO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessEndpointSubnetIdList
 */
const se_ModifyVerifiedAccessEndpointSubnetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessGroupPolicyRequest
 */
const se_ModifyVerifiedAccessGroupPolicyRequest = (
  input: ModifyVerifiedAccessGroupPolicyRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_PE] != null) {
    entries[_PE] = input[_PE];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SS] != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessGroupRequest
 */
const se_ModifyVerifiedAccessGroupRequest = (input: ModifyVerifiedAccessGroupRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VAGI] != null) {
    entries[_VAGI] = input[_VAGI];
  }
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessInstanceLoggingConfigurationRequest
 */
const se_ModifyVerifiedAccessInstanceLoggingConfigurationRequest = (
  input: ModifyVerifiedAccessInstanceLoggingConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_AL] != null) {
    const memberEntries = se_VerifiedAccessLogOptions(input[_AL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AccessLogs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessInstanceRequest
 */
const se_ModifyVerifiedAccessInstanceRequest = (
  input: ModifyVerifiedAccessInstanceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VAII] != null) {
    entries[_VAII] = input[_VAII];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessTrustProviderDeviceOptions
 */
const se_ModifyVerifiedAccessTrustProviderDeviceOptions = (
  input: ModifyVerifiedAccessTrustProviderDeviceOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_PSKU] != null) {
    entries[_PSKU] = input[_PSKU];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessTrustProviderOidcOptions
 */
const se_ModifyVerifiedAccessTrustProviderOidcOptions = (
  input: ModifyVerifiedAccessTrustProviderOidcOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_I] != null) {
    entries[_I] = input[_I];
  }
  if (input[_AE] != null) {
    entries[_AE] = input[_AE];
  }
  if (input[_TEo] != null) {
    entries[_TEo] = input[_TEo];
  }
  if (input[_UIE] != null) {
    entries[_UIE] = input[_UIE];
  }
  if (input[_CIl] != null) {
    entries[_CIl] = input[_CIl];
  }
  if (input[_CSl] != null) {
    entries[_CSl] = input[_CSl];
  }
  if (input[_Sc] != null) {
    entries[_Sc] = input[_Sc];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVerifiedAccessTrustProviderRequest
 */
const se_ModifyVerifiedAccessTrustProviderRequest = (
  input: ModifyVerifiedAccessTrustProviderRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VATPI] != null) {
    entries[_VATPI] = input[_VATPI];
  }
  if (input[_OO] != null) {
    const memberEntries = se_ModifyVerifiedAccessTrustProviderOidcOptions(input[_OO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OidcOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DOe] != null) {
    const memberEntries = se_ModifyVerifiedAccessTrustProviderDeviceOptions(input[_DOe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DeviceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_SS] != null) {
    const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SseSpecification.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVolumeAttributeRequest
 */
const se_ModifyVolumeAttributeRequest = (input: ModifyVolumeAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AEIO] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_AEIO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AutoEnableIO.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVolumeRequest
 */
const se_ModifyVolumeRequest = (input: ModifyVolumeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VIo] != null) {
    entries[_VIo] = input[_VIo];
  }
  if (input[_Siz] != null) {
    entries[_Siz] = input[_Siz];
  }
  if (input[_VT] != null) {
    entries[_VT] = input[_VT];
  }
  if (input[_Io] != null) {
    entries[_Io] = input[_Io];
  }
  if (input[_Th] != null) {
    entries[_Th] = input[_Th];
  }
  if (input[_MAE] != null) {
    entries[_MAE] = input[_MAE];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcAttributeRequest
 */
const se_ModifyVpcAttributeRequest = (input: ModifyVpcAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_EDH] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_EDH], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableDnsHostnames.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EDS] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_EDS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableDnsSupport.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_ENAUM] != null) {
    const memberEntries = se_AttributeBooleanValue(input[_ENAUM], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnableNetworkAddressUsageMetrics.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcEndpointConnectionNotificationRequest
 */
const se_ModifyVpcEndpointConnectionNotificationRequest = (
  input: ModifyVpcEndpointConnectionNotificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_CNIon] != null) {
    entries[_CNIon] = input[_CNIon];
  }
  if (input[_CNAon] != null) {
    entries[_CNAon] = input[_CNAon];
  }
  if (input[_CEo] != null) {
    const memberEntries = se_ValueStringList(input[_CEo], context);
    if (input[_CEo]?.length === 0) {
      entries.ConnectionEvents = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcEndpointRequest
 */
const se_ModifyVpcEndpointRequest = (input: ModifyVpcEndpointRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VEIp] != null) {
    entries[_VEIp] = input[_VEIp];
  }
  if (input[_RP] != null) {
    entries[_RP] = input[_RP];
  }
  if (input[_PD] != null) {
    entries[_PD] = input[_PD];
  }
  if (input[_ARTI] != null) {
    const memberEntries = se_VpcEndpointRouteTableIdList(input[_ARTI], context);
    if (input[_ARTI]?.length === 0) {
      entries.AddRouteTableId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RRTI] != null) {
    const memberEntries = se_VpcEndpointRouteTableIdList(input[_RRTI], context);
    if (input[_RRTI]?.length === 0) {
      entries.RemoveRouteTableId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ASI] != null) {
    const memberEntries = se_VpcEndpointSubnetIdList(input[_ASI], context);
    if (input[_ASI]?.length === 0) {
      entries.AddSubnetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RSIe] != null) {
    const memberEntries = se_VpcEndpointSubnetIdList(input[_RSIe], context);
    if (input[_RSIe]?.length === 0) {
      entries.RemoveSubnetId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSubnetId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ASGId] != null) {
    const memberEntries = se_VpcEndpointSecurityGroupIdList(input[_ASGId], context);
    if (input[_ASGId]?.length === 0) {
      entries.AddSecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RSGIe] != null) {
    const memberEntries = se_VpcEndpointSecurityGroupIdList(input[_RSGIe], context);
    if (input[_RSGIe]?.length === 0) {
      entries.RemoveSecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IAT] != null) {
    entries[_IAT] = input[_IAT];
  }
  if (input[_DOn] != null) {
    const memberEntries = se_DnsOptionsSpecification(input[_DOn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DnsOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PDE] != null) {
    entries[_PDE] = input[_PDE];
  }
  if (input[_SC] != null) {
    const memberEntries = se_SubnetConfigurationsList(input[_SC], context);
    if (input[_SC]?.length === 0) {
      entries.SubnetConfiguration = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcEndpointServiceConfigurationRequest
 */
const se_ModifyVpcEndpointServiceConfigurationRequest = (
  input: ModifyVpcEndpointServiceConfigurationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_PDN] != null) {
    entries[_PDN] = input[_PDN];
  }
  if (input[_RPDN] != null) {
    entries[_RPDN] = input[_RPDN];
  }
  if (input[_ARc] != null) {
    entries[_ARc] = input[_ARc];
  }
  if (input[_ANLBA] != null) {
    const memberEntries = se_ValueStringList(input[_ANLBA], context);
    if (input[_ANLBA]?.length === 0) {
      entries.AddNetworkLoadBalancerArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RNLBA] != null) {
    const memberEntries = se_ValueStringList(input[_RNLBA], context);
    if (input[_RNLBA]?.length === 0) {
      entries.RemoveNetworkLoadBalancerArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AGLBA] != null) {
    const memberEntries = se_ValueStringList(input[_AGLBA], context);
    if (input[_AGLBA]?.length === 0) {
      entries.AddGatewayLoadBalancerArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RGLBA] != null) {
    const memberEntries = se_ValueStringList(input[_RGLBA], context);
    if (input[_RGLBA]?.length === 0) {
      entries.RemoveGatewayLoadBalancerArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ASIAT] != null) {
    const memberEntries = se_ValueStringList(input[_ASIAT], context);
    if (input[_ASIAT]?.length === 0) {
      entries.AddSupportedIpAddressType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddSupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RSIAT] != null) {
    const memberEntries = se_ValueStringList(input[_RSIAT], context);
    if (input[_RSIAT]?.length === 0) {
      entries.RemoveSupportedIpAddressType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveSupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityRequest
 */
const se_ModifyVpcEndpointServicePayerResponsibilityRequest = (
  input: ModifyVpcEndpointServicePayerResponsibilityRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_PRa] != null) {
    entries[_PRa] = input[_PRa];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcEndpointServicePermissionsRequest
 */
const se_ModifyVpcEndpointServicePermissionsRequest = (
  input: ModifyVpcEndpointServicePermissionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_AAP] != null) {
    const memberEntries = se_ValueStringList(input[_AAP], context);
    if (input[_AAP]?.length === 0) {
      entries.AddAllowedPrincipals = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AddAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RAP] != null) {
    const memberEntries = se_ValueStringList(input[_RAP], context);
    if (input[_RAP]?.length === 0) {
      entries.RemoveAllowedPrincipals = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RemoveAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcPeeringConnectionOptionsRequest
 */
const se_ModifyVpcPeeringConnectionOptionsRequest = (
  input: ModifyVpcPeeringConnectionOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_APCO] != null) {
    const memberEntries = se_PeeringConnectionOptionsRequest(input[_APCO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AccepterPeeringConnectionOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RPCO] != null) {
    const memberEntries = se_PeeringConnectionOptionsRequest(input[_RPCO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `RequesterPeeringConnectionOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpcTenancyRequest
 */
const se_ModifyVpcTenancyRequest = (input: ModifyVpcTenancyRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_ITns] != null) {
    entries[_ITns] = input[_ITns];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpnConnectionOptionsRequest
 */
const se_ModifyVpnConnectionOptionsRequest = (
  input: ModifyVpnConnectionOptionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_LINC] != null) {
    entries[_LINC] = input[_LINC];
  }
  if (input[_RINC] != null) {
    entries[_RINC] = input[_RINC];
  }
  if (input[_LINCo] != null) {
    entries[_LINCo] = input[_LINCo];
  }
  if (input[_RINCe] != null) {
    entries[_RINCe] = input[_RINCe];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpnConnectionRequest
 */
const se_ModifyVpnConnectionRequest = (input: ModifyVpnConnectionRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_CGIu] != null) {
    entries[_CGIu] = input[_CGIu];
  }
  if (input[_VGI] != null) {
    entries[_VGI] = input[_VGI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpnTunnelCertificateRequest
 */
const se_ModifyVpnTunnelCertificateRequest = (
  input: ModifyVpnTunnelCertificateRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_VTOIA] != null) {
    entries[_VTOIA] = input[_VTOIA];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpnTunnelOptionsRequest
 */
const se_ModifyVpnTunnelOptionsRequest = (input: ModifyVpnTunnelOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_VTOIA] != null) {
    entries[_VTOIA] = input[_VTOIA];
  }
  if (input[_TO] != null) {
    const memberEntries = se_ModifyVpnTunnelOptionsSpecification(input[_TO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TunnelOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_STR] != null) {
    entries[_STR] = input[_STR];
  }
  return entries;
};

/**
 * serializeAws_ec2ModifyVpnTunnelOptionsSpecification
 */
const se_ModifyVpnTunnelOptionsSpecification = (
  input: ModifyVpnTunnelOptionsSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TIC] != null) {
    entries[_TIC] = input[_TIC];
  }
  if (input[_TIIC] != null) {
    entries[_TIIC] = input[_TIIC];
  }
  if (input[_PSK] != null) {
    entries[_PSK] = input[_PSK];
  }
  if (input[_PLS] != null) {
    entries[_PLS] = input[_PLS];
  }
  if (input[_PLSh] != null) {
    entries[_PLSh] = input[_PLSh];
  }
  if (input[_RMTS] != null) {
    entries[_RMTS] = input[_RMTS];
  }
  if (input[_RFP] != null) {
    entries[_RFP] = input[_RFP];
  }
  if (input[_RWS] != null) {
    entries[_RWS] = input[_RWS];
  }
  if (input[_DPDTS] != null) {
    entries[_DPDTS] = input[_DPDTS];
  }
  if (input[_DPDTA] != null) {
    entries[_DPDTA] = input[_DPDTA];
  }
  if (input[_PEA] != null) {
    const memberEntries = se_Phase1EncryptionAlgorithmsRequestList(input[_PEA], context);
    if (input[_PEA]?.length === 0) {
      entries.Phase1EncryptionAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PEAh] != null) {
    const memberEntries = se_Phase2EncryptionAlgorithmsRequestList(input[_PEAh], context);
    if (input[_PEAh]?.length === 0) {
      entries.Phase2EncryptionAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIAh] != null) {
    const memberEntries = se_Phase1IntegrityAlgorithmsRequestList(input[_PIAh], context);
    if (input[_PIAh]?.length === 0) {
      entries.Phase1IntegrityAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIAha] != null) {
    const memberEntries = se_Phase2IntegrityAlgorithmsRequestList(input[_PIAha], context);
    if (input[_PIAha]?.length === 0) {
      entries.Phase2IntegrityAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PDHGN] != null) {
    const memberEntries = se_Phase1DHGroupNumbersRequestList(input[_PDHGN], context);
    if (input[_PDHGN]?.length === 0) {
      entries.Phase1DHGroupNumber = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PDHGNh] != null) {
    const memberEntries = se_Phase2DHGroupNumbersRequestList(input[_PDHGNh], context);
    if (input[_PDHGNh]?.length === 0) {
      entries.Phase2DHGroupNumber = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IKEVe] != null) {
    const memberEntries = se_IKEVersionsRequestList(input[_IKEVe], context);
    if (input[_IKEVe]?.length === 0) {
      entries.IKEVersion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SA] != null) {
    entries[_SA] = input[_SA];
  }
  if (input[_LO] != null) {
    const memberEntries = se_VpnTunnelLogOptionsSpecification(input[_LO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ETLC] != null) {
    entries[_ETLC] = input[_ETLC];
  }
  return entries;
};

/**
 * serializeAws_ec2MonitorInstancesRequest
 */
const se_MonitorInstancesRequest = (input: MonitorInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    if (input[_IIns]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2MoveAddressToVpcRequest
 */
const se_MoveAddressToVpcRequest = (input: MoveAddressToVpcRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PI] != null) {
    entries[_PI] = input[_PI];
  }
  return entries;
};

/**
 * serializeAws_ec2MoveByoipCidrToIpamRequest
 */
const se_MoveByoipCidrToIpamRequest = (input: MoveByoipCidrToIpamRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_IPO] != null) {
    entries[_IPO] = input[_IPO];
  }
  return entries;
};

/**
 * serializeAws_ec2NatGatewayIdStringList
 */
const se_NatGatewayIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkAclIdStringList
 */
const se_NetworkAclIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkBandwidthGbps
 */
const se_NetworkBandwidthGbps = (input: NetworkBandwidthGbps, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = __serializeFloat(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = __serializeFloat(input[_Ma]);
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkBandwidthGbpsRequest
 */
const se_NetworkBandwidthGbpsRequest = (input: NetworkBandwidthGbpsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = __serializeFloat(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = __serializeFloat(input[_Ma]);
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInsightsAccessScopeAnalysisIdList
 */
const se_NetworkInsightsAccessScopeAnalysisIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInsightsAccessScopeIdList
 */
const se_NetworkInsightsAccessScopeIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInsightsAnalysisIdList
 */
const se_NetworkInsightsAnalysisIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInsightsPathIdList
 */
const se_NetworkInsightsPathIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInterfaceAttachmentChanges
 */
const se_NetworkInterfaceAttachmentChanges = (
  input: NetworkInterfaceAttachmentChanges,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AIt] != null) {
    entries[_AIt] = input[_AIt];
  }
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInterfaceCount
 */
const se_NetworkInterfaceCount = (input: NetworkInterfaceCount, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInterfaceCountRequest
 */
const se_NetworkInterfaceCountRequest = (input: NetworkInterfaceCountRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInterfaceIdList
 */
const se_NetworkInterfaceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NetworkInterfacePermissionIdList
 */
const se_NetworkInterfacePermissionIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2NewDhcpConfiguration
 */
const se_NewDhcpConfiguration = (input: NewDhcpConfiguration, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Ke] != null) {
    entries[_Ke] = input[_Ke];
  }
  if (input[_Val] != null) {
    const memberEntries = se_ValueStringList(input[_Val], context);
    if (input[_Val]?.length === 0) {
      entries.Value = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2NewDhcpConfigurationList
 */
const se_NewDhcpConfigurationList = (input: NewDhcpConfiguration[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_NewDhcpConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2OccurrenceDayRequestSet
 */
const se_OccurrenceDayRequestSet = (input: number[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`OccurenceDay.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2OnDemandOptionsRequest
 */
const se_OnDemandOptionsRequest = (input: OnDemandOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AS] != null) {
    entries[_AS] = input[_AS];
  }
  if (input[_CRO] != null) {
    const memberEntries = se_CapacityReservationOptionsRequest(input[_CRO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SITi] != null) {
    entries[_SITi] = input[_SITi];
  }
  if (input[_SAZ] != null) {
    entries[_SAZ] = input[_SAZ];
  }
  if (input[_MTC] != null) {
    entries[_MTC] = input[_MTC];
  }
  if (input[_MTP] != null) {
    entries[_MTP] = input[_MTP];
  }
  return entries;
};

/**
 * serializeAws_ec2OrganizationalUnitArnStringList
 */
const se_OrganizationalUnitArnStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`OrganizationalUnitArn.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2OrganizationArnStringList
 */
const se_OrganizationArnStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`OrganizationArn.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2OwnerStringList
 */
const se_OwnerStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Owner.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PacketHeaderStatementRequest
 */
const se_PacketHeaderStatementRequest = (input: PacketHeaderStatementRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SAo] != null) {
    const memberEntries = se_ValueStringList(input[_SAo], context);
    if (input[_SAo]?.length === 0) {
      entries.SourceAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourceAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DAes] != null) {
    const memberEntries = se_ValueStringList(input[_DAes], context);
    if (input[_DAes]?.length === 0) {
      entries.DestinationAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPo] != null) {
    const memberEntries = se_ValueStringList(input[_SPo], context);
    if (input[_SPo]?.length === 0) {
      entries.SourcePort = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePort.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DPe] != null) {
    const memberEntries = se_ValueStringList(input[_DPe], context);
    if (input[_DPe]?.length === 0) {
      entries.DestinationPort = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPort.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPL] != null) {
    const memberEntries = se_ValueStringList(input[_SPL], context);
    if (input[_SPL]?.length === 0) {
      entries.SourcePrefixList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePrefixList.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DPLe] != null) {
    const memberEntries = se_ValueStringList(input[_DPLe], context);
    if (input[_DPLe]?.length === 0) {
      entries.DestinationPrefixList = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPrefixList.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Pro] != null) {
    const memberEntries = se_ProtocolList(input[_Pro], context);
    if (input[_Pro]?.length === 0) {
      entries.Protocol = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Protocol.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2PathRequestFilter
 */
const se_PathRequestFilter = (input: PathRequestFilter, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SAou] != null) {
    entries[_SAou] = input[_SAou];
  }
  if (input[_SPR] != null) {
    const memberEntries = se_RequestFilterPortRange(input[_SPR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SourcePortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DAest] != null) {
    entries[_DAest] = input[_DAest];
  }
  if (input[_DPR] != null) {
    const memberEntries = se_RequestFilterPortRange(input[_DPR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `DestinationPortRange.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2PathStatementRequest
 */
const se_PathStatementRequest = (input: PathStatementRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_PHS] != null) {
    const memberEntries = se_PacketHeaderStatementRequest(input[_PHS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PacketHeaderStatement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RSe] != null) {
    const memberEntries = se_ResourceStatementRequest(input[_RSe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceStatement.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2PeeringConnectionOptionsRequest
 */
const se_PeeringConnectionOptionsRequest = (input: PeeringConnectionOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ADRFRV] != null) {
    entries[_ADRFRV] = input[_ADRFRV];
  }
  if (input[_AEFLCLTRV] != null) {
    entries[_AEFLCLTRV] = input[_AEFLCLTRV];
  }
  if (input[_AEFLVTRCL] != null) {
    entries[_AEFLVTRCL] = input[_AEFLVTRCL];
  }
  return entries;
};

/**
 * serializeAws_ec2Phase1DHGroupNumbersRequestList
 */
const se_Phase1DHGroupNumbersRequestList = (
  input: Phase1DHGroupNumbersRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase1DHGroupNumbersRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase1DHGroupNumbersRequestListValue
 */
const se_Phase1DHGroupNumbersRequestListValue = (
  input: Phase1DHGroupNumbersRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};

/**
 * serializeAws_ec2Phase1EncryptionAlgorithmsRequestList
 */
const se_Phase1EncryptionAlgorithmsRequestList = (
  input: Phase1EncryptionAlgorithmsRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase1EncryptionAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase1EncryptionAlgorithmsRequestListValue
 */
const se_Phase1EncryptionAlgorithmsRequestListValue = (
  input: Phase1EncryptionAlgorithmsRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};

/**
 * serializeAws_ec2Phase1IntegrityAlgorithmsRequestList
 */
const se_Phase1IntegrityAlgorithmsRequestList = (
  input: Phase1IntegrityAlgorithmsRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase1IntegrityAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase1IntegrityAlgorithmsRequestListValue
 */
const se_Phase1IntegrityAlgorithmsRequestListValue = (
  input: Phase1IntegrityAlgorithmsRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};

/**
 * serializeAws_ec2Phase2DHGroupNumbersRequestList
 */
const se_Phase2DHGroupNumbersRequestList = (
  input: Phase2DHGroupNumbersRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase2DHGroupNumbersRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase2DHGroupNumbersRequestListValue
 */
const se_Phase2DHGroupNumbersRequestListValue = (
  input: Phase2DHGroupNumbersRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};

/**
 * serializeAws_ec2Phase2EncryptionAlgorithmsRequestList
 */
const se_Phase2EncryptionAlgorithmsRequestList = (
  input: Phase2EncryptionAlgorithmsRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase2EncryptionAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase2EncryptionAlgorithmsRequestListValue
 */
const se_Phase2EncryptionAlgorithmsRequestListValue = (
  input: Phase2EncryptionAlgorithmsRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};

/**
 * serializeAws_ec2Phase2IntegrityAlgorithmsRequestList
 */
const se_Phase2IntegrityAlgorithmsRequestList = (
  input: Phase2IntegrityAlgorithmsRequestListValue[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Phase2IntegrityAlgorithmsRequestListValue(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Phase2IntegrityAlgorithmsRequestListValue
 */
const se_Phase2IntegrityAlgorithmsRequestListValue = (
  input: Phase2IntegrityAlgorithmsRequestListValue,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};

/**
 * serializeAws_ec2Placement
 */
const se_Placement = (input: Placement, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_Af] != null) {
    entries[_Af] = input[_Af];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_PN] != null) {
    entries[_PN] = input[_PN];
  }
  if (input[_HIo] != null) {
    entries[_HIo] = input[_HIo];
  }
  if (input[_Te] != null) {
    entries[_Te] = input[_Te];
  }
  if (input[_SD] != null) {
    entries[_SD] = input[_SD];
  }
  if (input[_HRGA] != null) {
    entries[_HRGA] = input[_HRGA];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  return entries;
};

/**
 * serializeAws_ec2PlacementGroupIdStringList
 */
const se_PlacementGroupIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`GroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PlacementGroupStringList
 */
const se_PlacementGroupStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PortRange
 */
const se_PortRange = (input: PortRange, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Fr] != null) {
    entries[_Fr] = input[_Fr];
  }
  if (input[_To] != null) {
    entries[_To] = input[_To];
  }
  return entries;
};

/**
 * serializeAws_ec2PrefixListId
 */
const se_PrefixListId = (input: PrefixListId, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  return entries;
};

/**
 * serializeAws_ec2PrefixListIdList
 */
const se_PrefixListIdList = (input: PrefixListId[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PrefixListId(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PrefixListResourceIdStringList
 */
const se_PrefixListResourceIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PriceScheduleSpecification
 */
const se_PriceScheduleSpecification = (input: PriceScheduleSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CCu] != null) {
    entries[_CCu] = input[_CCu];
  }
  if (input[_Pric] != null) {
    entries[_Pric] = __serializeFloat(input[_Pric]);
  }
  if (input[_Ter] != null) {
    entries[_Ter] = input[_Ter];
  }
  return entries;
};

/**
 * serializeAws_ec2PriceScheduleSpecificationList
 */
const se_PriceScheduleSpecificationList = (input: PriceScheduleSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PriceScheduleSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PrivateDnsNameOptionsRequest
 */
const se_PrivateDnsNameOptionsRequest = (input: PrivateDnsNameOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_HTo] != null) {
    entries[_HTo] = input[_HTo];
  }
  if (input[_ERNDAR] != null) {
    entries[_ERNDAR] = input[_ERNDAR];
  }
  if (input[_ERNDAAAAR] != null) {
    entries[_ERNDAAAAR] = input[_ERNDAAAAR];
  }
  return entries;
};

/**
 * serializeAws_ec2PrivateIpAddressConfigSet
 */
const se_PrivateIpAddressConfigSet = (
  input: ScheduledInstancesPrivateIpAddressConfig[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ScheduledInstancesPrivateIpAddressConfig(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`PrivateIpAddressConfigSet.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PrivateIpAddressSpecification
 */
const se_PrivateIpAddressSpecification = (input: PrivateIpAddressSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Prim] != null) {
    entries[_Prim] = input[_Prim];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  return entries;
};

/**
 * serializeAws_ec2PrivateIpAddressSpecificationList
 */
const se_PrivateIpAddressSpecificationList = (input: PrivateIpAddressSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PrivateIpAddressSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PrivateIpAddressStringList
 */
const se_PrivateIpAddressStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`PrivateIpAddress.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ProductCodeStringList
 */
const se_ProductCodeStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ProductCode.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ProductDescriptionList
 */
const se_ProductDescriptionList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ProtocolList
 */
const se_ProtocolList = (input: Protocol[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ProvisionByoipCidrRequest
 */
const se_ProvisionByoipCidrRequest = (input: ProvisionByoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_CAC] != null) {
    const memberEntries = se_CidrAuthorizationContext(input[_CAC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CidrAuthorizationContext.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PA] != null) {
    entries[_PA] = input[_PA];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PTS] != null) {
    const memberEntries = se_TagSpecificationList(input[_PTS], context);
    if (input[_PTS]?.length === 0) {
      entries.PoolTagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PoolTagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MRu] != null) {
    entries[_MRu] = input[_MRu];
  }
  return entries;
};

/**
 * serializeAws_ec2ProvisionIpamByoasnRequest
 */
const se_ProvisionIpamByoasnRequest = (input: ProvisionIpamByoasnRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIp] != null) {
    entries[_IIp] = input[_IIp];
  }
  if (input[_As] != null) {
    entries[_As] = input[_As];
  }
  if (input[_AAC] != null) {
    const memberEntries = se_AsnAuthorizationContext(input[_AAC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AsnAuthorizationContext.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ProvisionIpamPoolCidrRequest
 */
const se_ProvisionIpamPoolCidrRequest = (input: ProvisionIpamPoolCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_CAC] != null) {
    const memberEntries = se_IpamCidrAuthorizationContext(input[_CAC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CidrAuthorizationContext.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NL] != null) {
    entries[_NL] = input[_NL];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2ProvisionPublicIpv4PoolCidrRequest
 */
const se_ProvisionPublicIpv4PoolCidrRequest = (
  input: ProvisionPublicIpv4PoolCidrRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_PIo] != null) {
    entries[_PIo] = input[_PIo];
  }
  if (input[_NL] != null) {
    entries[_NL] = input[_NL];
  }
  return entries;
};

/**
 * serializeAws_ec2PublicIpStringList
 */
const se_PublicIpStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`PublicIp.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PublicIpv4PoolIdStringList
 */
const se_PublicIpv4PoolIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PurchaseCapacityBlockRequest
 */
const se_PurchaseCapacityBlockRequest = (input: PurchaseCapacityBlockRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CBOI] != null) {
    entries[_CBOI] = input[_CBOI];
  }
  if (input[_IPn] != null) {
    entries[_IPn] = input[_IPn];
  }
  return entries;
};

/**
 * serializeAws_ec2PurchaseHostReservationRequest
 */
const se_PurchaseHostReservationRequest = (input: PurchaseHostReservationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_CCu] != null) {
    entries[_CCu] = input[_CCu];
  }
  if (input[_HIS] != null) {
    const memberEntries = se_RequestHostIdSet(input[_HIS], context);
    if (input[_HIS]?.length === 0) {
      entries.HostIdSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LPi] != null) {
    entries[_LPi] = input[_LPi];
  }
  if (input[_OI] != null) {
    entries[_OI] = input[_OI];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2PurchaseRequest
 */
const se_PurchaseRequest = (input: PurchaseRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_PT] != null) {
    entries[_PT] = input[_PT];
  }
  return entries;
};

/**
 * serializeAws_ec2PurchaseRequestSet
 */
const se_PurchaseRequestSet = (input: PurchaseRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_PurchaseRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`PurchaseRequest.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2PurchaseReservedInstancesOfferingRequest
 */
const se_PurchaseReservedInstancesOfferingRequest = (
  input: PurchaseReservedInstancesOfferingRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_RIOIe] != null) {
    entries[_RIOIe] = input[_RIOIe];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_LPi] != null) {
    const memberEntries = se_ReservedInstanceLimitPrice(input[_LPi], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LimitPrice.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PTu] != null) {
    entries[_PTu] = input[_PTu].toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2PurchaseScheduledInstancesRequest
 */
const se_PurchaseScheduledInstancesRequest = (
  input: PurchaseScheduledInstancesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PRu] != null) {
    const memberEntries = se_PurchaseRequestSet(input[_PRu], context);
    if (input[_PRu]?.length === 0) {
      entries.PurchaseRequest = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PurchaseRequest.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ReasonCodesList
 */
const se_ReasonCodesList = (input: ReportInstanceReasonCodes[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RebootInstancesRequest
 */
const se_RebootInstancesRequest = (input: RebootInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    if (input[_IIns]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2RegionNames
 */
const se_RegionNames = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RegionNameStringList
 */
const se_RegionNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`RegionName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RegisterImageRequest
 */
const se_RegisterImageRequest = (input: RegisterImageRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IL] != null) {
    entries[_IL] = input[_IL];
  }
  if (input[_Arc] != null) {
    entries[_Arc] = input[_Arc];
  }
  if (input[_BDM] != null) {
    const memberEntries = se_BlockDeviceMappingRequestList(input[_BDM], context);
    if (input[_BDM]?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ESn] != null) {
    entries[_ESn] = input[_ESn];
  }
  if (input[_KI] != null) {
    entries[_KI] = input[_KI];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  if (input[_BPi] != null) {
    const memberEntries = se_BillingProductList(input[_BPi], context);
    if (input[_BPi]?.length === 0) {
      entries.BillingProduct = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BillingProduct.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RIa] != null) {
    entries[_RIa] = input[_RIa];
  }
  if (input[_RDN] != null) {
    entries[_RDN] = input[_RDN];
  }
  if (input[_SNS] != null) {
    entries[_SNS] = input[_SNS];
  }
  if (input[_VTir] != null) {
    entries[_VTir] = input[_VTir];
  }
  if (input[_BM] != null) {
    entries[_BM] = input[_BM];
  }
  if (input[_TSp] != null) {
    entries[_TSp] = input[_TSp];
  }
  if (input[_UDe] != null) {
    entries[_UDe] = input[_UDe];
  }
  if (input[_ISm] != null) {
    entries[_ISm] = input[_ISm];
  }
  return entries;
};

/**
 * serializeAws_ec2RegisterInstanceEventNotificationAttributesRequest
 */
const se_RegisterInstanceEventNotificationAttributesRequest = (
  input: RegisterInstanceEventNotificationAttributesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ITA] != null) {
    const memberEntries = se_RegisterInstanceTagAttributeRequest(input[_ITA], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagAttribute.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2RegisterInstanceTagAttributeRequest
 */
const se_RegisterInstanceTagAttributeRequest = (
  input: RegisterInstanceTagAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IATOI] != null) {
    entries[_IATOI] = input[_IATOI];
  }
  if (input[_ITK] != null) {
    const memberEntries = se_InstanceTagKeySet(input[_ITK], context);
    if (input[_ITK]?.length === 0) {
      entries.InstanceTagKey = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2RegisterTransitGatewayMulticastGroupMembersRequest
 */
const se_RegisterTransitGatewayMulticastGroupMembersRequest = (
  input: RegisterTransitGatewayMulticastGroupMembersRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_GIA] != null) {
    entries[_GIA] = input[_GIA];
  }
  if (input[_NIIe] != null) {
    const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input[_NIIe], context);
    if (input[_NIIe]?.length === 0) {
      entries.NetworkInterfaceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesRequest
 */
const se_RegisterTransitGatewayMulticastGroupSourcesRequest = (
  input: RegisterTransitGatewayMulticastGroupSourcesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_GIA] != null) {
    entries[_GIA] = input[_GIA];
  }
  if (input[_NIIe] != null) {
    const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input[_NIIe], context);
    if (input[_NIIe]?.length === 0) {
      entries.NetworkInterfaceIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsRequest
 */
const se_RejectTransitGatewayMulticastDomainAssociationsRequest = (
  input: RejectTransitGatewayMulticastDomainAssociationsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_SIu] != null) {
    const memberEntries = se_ValueStringList(input[_SIu], context);
    if (input[_SIu]?.length === 0) {
      entries.SubnetIds = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2RejectTransitGatewayPeeringAttachmentRequest
 */
const se_RejectTransitGatewayPeeringAttachmentRequest = (
  input: RejectTransitGatewayPeeringAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2RejectTransitGatewayVpcAttachmentRequest
 */
const se_RejectTransitGatewayVpcAttachmentRequest = (
  input: RejectTransitGatewayVpcAttachmentRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2RejectVpcEndpointConnectionsRequest
 */
const se_RejectVpcEndpointConnectionsRequest = (
  input: RejectVpcEndpointConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  if (input[_VEI] != null) {
    const memberEntries = se_VpcEndpointIdList(input[_VEI], context);
    if (input[_VEI]?.length === 0) {
      entries.VpcEndpointId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2RejectVpcPeeringConnectionRequest
 */
const se_RejectVpcPeeringConnectionRequest = (
  input: RejectVpcPeeringConnectionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  return entries;
};

/**
 * serializeAws_ec2ReleaseAddressRequest
 */
const se_ReleaseAddressRequest = (input: ReleaseAddressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_PI] != null) {
    entries[_PI] = input[_PI];
  }
  if (input[_NBG] != null) {
    entries[_NBG] = input[_NBG];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ReleaseHostsRequest
 */
const se_ReleaseHostsRequest = (input: ReleaseHostsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_HI] != null) {
    const memberEntries = se_RequestHostIdList(input[_HI], context);
    if (input[_HI]?.length === 0) {
      entries.HostId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ReleaseIpamPoolAllocationRequest
 */
const se_ReleaseIpamPoolAllocationRequest = (input: ReleaseIpamPoolAllocationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IPI] != null) {
    entries[_IPI] = input[_IPI];
  }
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_IPAI] != null) {
    entries[_IPAI] = input[_IPAI];
  }
  return entries;
};

/**
 * serializeAws_ec2RemoveIpamOperatingRegion
 */
const se_RemoveIpamOperatingRegion = (input: RemoveIpamOperatingRegion, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_RN] != null) {
    entries[_RN] = input[_RN];
  }
  return entries;
};

/**
 * serializeAws_ec2RemoveIpamOperatingRegionSet
 */
const se_RemoveIpamOperatingRegionSet = (input: RemoveIpamOperatingRegion[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RemoveIpamOperatingRegion(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RemovePrefixListEntries
 */
const se_RemovePrefixListEntries = (input: RemovePrefixListEntry[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RemovePrefixListEntry(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RemovePrefixListEntry
 */
const se_RemovePrefixListEntry = (input: RemovePrefixListEntry, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceIamInstanceProfileAssociationRequest
 */
const se_ReplaceIamInstanceProfileAssociationRequest = (
  input: ReplaceIamInstanceProfileAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IIP] != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceNetworkAclAssociationRequest
 */
const se_ReplaceNetworkAclAssociationRequest = (
  input: ReplaceNetworkAclAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NAI] != null) {
    entries[_NAI] = input[_NAI];
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceNetworkAclEntryRequest
 */
const se_ReplaceNetworkAclEntryRequest = (input: ReplaceNetworkAclEntryRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CB] != null) {
    entries[_CB] = input[_CB];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_Eg] != null) {
    entries[_Eg] = input[_Eg];
  }
  if (input[_ITC] != null) {
    const memberEntries = se_IcmpTypeCode(input[_ITC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Icmp.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ICB] != null) {
    entries[_ICB] = input[_ICB];
  }
  if (input[_NAI] != null) {
    entries[_NAI] = input[_NAI];
  }
  if (input[_PR] != null) {
    const memberEntries = se_PortRange(input[_PR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PortRange.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_P] != null) {
    entries[_P] = input[_P];
  }
  if (input[_RAu] != null) {
    entries[_RAu] = input[_RAu];
  }
  if (input[_RNu] != null) {
    entries[_RNu] = input[_RNu];
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceRootVolumeTaskIds
 */
const se_ReplaceRootVolumeTaskIds = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReplaceRootVolumeTaskId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceRouteRequest
 */
const se_ReplaceRouteRequest = (input: ReplaceRouteRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_DICB] != null) {
    entries[_DICB] = input[_DICB];
  }
  if (input[_DPLI] != null) {
    entries[_DPLI] = input[_DPLI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_VEIp] != null) {
    entries[_VEIp] = input[_VEIp];
  }
  if (input[_EOIGI] != null) {
    entries[_EOIGI] = input[_EOIGI];
  }
  if (input[_GI] != null) {
    entries[_GI] = input[_GI];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_LTo] != null) {
    entries[_LTo] = input[_LTo];
  }
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_TGI] != null) {
    entries[_TGI] = input[_TGI];
  }
  if (input[_LGI] != null) {
    entries[_LGI] = input[_LGI];
  }
  if (input[_CGI] != null) {
    entries[_CGI] = input[_CGI];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  if (input[_CNAo] != null) {
    entries[_CNAo] = input[_CNAo];
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceRouteTableAssociationRequest
 */
const se_ReplaceRouteTableAssociationRequest = (
  input: ReplaceRouteTableAssociationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_AIss] != null) {
    entries[_AIss] = input[_AIss];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_RTI] != null) {
    entries[_RTI] = input[_RTI];
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceTransitGatewayRouteRequest
 */
const se_ReplaceTransitGatewayRouteRequest = (
  input: ReplaceTransitGatewayRouteRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DCB] != null) {
    entries[_DCB] = input[_DCB];
  }
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_TGAI] != null) {
    entries[_TGAI] = input[_TGAI];
  }
  if (input[_Bl] != null) {
    entries[_Bl] = input[_Bl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ReplaceVpnTunnelRequest
 */
const se_ReplaceVpnTunnelRequest = (input: ReplaceVpnTunnelRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_VCI] != null) {
    entries[_VCI] = input[_VCI];
  }
  if (input[_VTOIA] != null) {
    entries[_VTOIA] = input[_VTOIA];
  }
  if (input[_APM] != null) {
    entries[_APM] = input[_APM];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ReportInstanceStatusRequest
 */
const se_ReportInstanceStatusRequest = (input: ReportInstanceStatusRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_ETn] != null) {
    entries[_ETn] = input[_ETn].toISOString().split(".")[0] + "Z";
  }
  if (input[_In] != null) {
    const memberEntries = se_InstanceIdStringList(input[_In], context);
    if (input[_In]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RCe] != null) {
    const memberEntries = se_ReasonCodesList(input[_RCe], context);
    if (input[_RCe]?.length === 0) {
      entries.ReasonCode = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ReasonCode.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_STt] != null) {
    entries[_STt] = input[_STt].toISOString().split(".")[0] + "Z";
  }
  if (input[_Statu] != null) {
    entries[_Statu] = input[_Statu];
  }
  return entries;
};

/**
 * serializeAws_ec2RequestFilterPortRange
 */
const se_RequestFilterPortRange = (input: RequestFilterPortRange, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  return entries;
};

/**
 * serializeAws_ec2RequestHostIdList
 */
const se_RequestHostIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestHostIdSet
 */
const se_RequestHostIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestInstanceTypeList
 */
const se_RequestInstanceTypeList = (input: _InstanceType[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestIpamResourceTag
 */
const se_RequestIpamResourceTag = (input: RequestIpamResourceTag, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Ke] != null) {
    entries[_Ke] = input[_Ke];
  }
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};

/**
 * serializeAws_ec2RequestIpamResourceTagList
 */
const se_RequestIpamResourceTagList = (input: RequestIpamResourceTag[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_RequestIpamResourceTag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestLaunchTemplateData
 */
const se_RequestLaunchTemplateData = (input: RequestLaunchTemplateData, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_KI] != null) {
    entries[_KI] = input[_KI];
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_IIP] != null) {
    const memberEntries = se_LaunchTemplateIamInstanceProfileSpecificationRequest(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_BDM] != null) {
    const memberEntries = se_LaunchTemplateBlockDeviceMappingRequestList(input[_BDM], context);
    if (input[_BDM]?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NI] != null) {
    const memberEntries = se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList(input[_NI], context);
    if (input[_NI]?.length === 0) {
      entries.NetworkInterface = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_Mon] != null) {
    const memberEntries = se_LaunchTemplatesMonitoringRequest(input[_Mon], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Pl] != null) {
    const memberEntries = se_LaunchTemplatePlacementRequest(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RDI] != null) {
    entries[_RDI] = input[_RDI];
  }
  if (input[_DATis] != null) {
    entries[_DATis] = input[_DATis];
  }
  if (input[_IISB] != null) {
    entries[_IISB] = input[_IISB];
  }
  if (input[_UD] != null) {
    entries[_UD] = input[_UD];
  }
  if (input[_TS] != null) {
    const memberEntries = se_LaunchTemplateTagSpecificationRequestList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EGS] != null) {
    const memberEntries = se_ElasticGpuSpecificationList(input[_EGS], context);
    if (input[_EGS]?.length === 0) {
      entries.ElasticGpuSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EIA] != null) {
    const memberEntries = se_LaunchTemplateElasticInferenceAcceleratorList(input[_EIA], context);
    if (input[_EIA]?.length === 0) {
      entries.ElasticInferenceAccelerator = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SG] != null) {
    const memberEntries = se_SecurityGroupStringList(input[_SG], context);
    if (input[_SG]?.length === 0) {
      entries.SecurityGroup = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IMO] != null) {
    const memberEntries = se_LaunchTemplateInstanceMarketOptionsRequest(input[_IMO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceMarketOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CSred] != null) {
    const memberEntries = se_CreditSpecificationRequest(input[_CSred], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CreditSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CO] != null) {
    const memberEntries = se_LaunchTemplateCpuOptionsRequest(input[_CO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CRS] != null) {
    const memberEntries = se_LaunchTemplateCapacityReservationSpecificationRequest(input[_CRS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LSi] != null) {
    const memberEntries = se_LaunchTemplateLicenseSpecificationListRequest(input[_LSi], context);
    if (input[_LSi]?.length === 0) {
      entries.LicenseSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_HO] != null) {
    const memberEntries = se_LaunchTemplateHibernationOptionsRequest(input[_HO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HibernationOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MO] != null) {
    const memberEntries = se_LaunchTemplateInstanceMetadataOptionsRequest(input[_MO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetadataOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EOn] != null) {
    const memberEntries = se_LaunchTemplateEnclaveOptionsRequest(input[_EOn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnclaveOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IR] != null) {
    const memberEntries = se_InstanceRequirementsRequest(input[_IR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PDNO] != null) {
    const memberEntries = se_LaunchTemplatePrivateDnsNameOptionsRequest(input[_PDNO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateDnsNameOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MOa] != null) {
    const memberEntries = se_LaunchTemplateInstanceMaintenanceOptionsRequest(input[_MOa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MaintenanceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DAS] != null) {
    entries[_DAS] = input[_DAS];
  }
  return entries;
};

/**
 * serializeAws_ec2RequestSpotFleetRequest
 */
const se_RequestSpotFleetRequest = (input: RequestSpotFleetRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SFRC] != null) {
    const memberEntries = se_SpotFleetRequestConfigData(input[_SFRC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotFleetRequestConfig.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2RequestSpotInstancesRequest
 */
const se_RequestSpotInstancesRequest = (input: RequestSpotInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AZG] != null) {
    entries[_AZG] = input[_AZG];
  }
  if (input[_BDMl] != null) {
    entries[_BDMl] = input[_BDMl];
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_LG] != null) {
    entries[_LG] = input[_LG];
  }
  if (input[_LSa] != null) {
    const memberEntries = se_RequestSpotLaunchSpecification(input[_LSa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SPp] != null) {
    entries[_SPp] = input[_SPp];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_VF] != null) {
    entries[_VF] = input[_VF].toISOString().split(".")[0] + "Z";
  }
  if (input[_VU] != null) {
    entries[_VU] = input[_VU].toISOString().split(".")[0] + "Z";
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIB] != null) {
    entries[_IIB] = input[_IIB];
  }
  return entries;
};

/**
 * serializeAws_ec2RequestSpotLaunchSpecification
 */
const se_RequestSpotLaunchSpecification = (input: RequestSpotLaunchSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SGI] != null) {
    const memberEntries = se_RequestSpotLaunchSpecificationSecurityGroupIdList(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SG] != null) {
    const memberEntries = se_RequestSpotLaunchSpecificationSecurityGroupList(input[_SG], context);
    if (input[_SG]?.length === 0) {
      entries.SecurityGroup = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ATd] != null) {
    entries[_ATd] = input[_ATd];
  }
  if (input[_BDM] != null) {
    const memberEntries = se_BlockDeviceMappingList(input[_BDM], context);
    if (input[_BDM]?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_IIP] != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_KI] != null) {
    entries[_KI] = input[_KI];
  }
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_Mon] != null) {
    const memberEntries = se_RunInstancesMonitoringEnabled(input[_Mon], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NI] != null) {
    const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input[_NI], context);
    if (input[_NI]?.length === 0) {
      entries.NetworkInterface = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Pl] != null) {
    const memberEntries = se_SpotPlacement(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RIa] != null) {
    entries[_RIa] = input[_RIa];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_UD] != null) {
    entries[_UD] = input[_UD];
  }
  return entries;
};

/**
 * serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupIdList
 */
const se_RequestSpotLaunchSpecificationSecurityGroupIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RequestSpotLaunchSpecificationSecurityGroupList
 */
const se_RequestSpotLaunchSpecificationSecurityGroupList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservationFleetInstanceSpecification
 */
const se_ReservationFleetInstanceSpecification = (
  input: ReservationFleetInstanceSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_IPn] != null) {
    entries[_IPn] = input[_IPn];
  }
  if (input[_W] != null) {
    entries[_W] = __serializeFloat(input[_W]);
  }
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_AZI] != null) {
    entries[_AZI] = input[_AZI];
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_Pri] != null) {
    entries[_Pri] = input[_Pri];
  }
  return entries;
};

/**
 * serializeAws_ec2ReservationFleetInstanceSpecificationList
 */
const se_ReservationFleetInstanceSpecificationList = (
  input: ReservationFleetInstanceSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ReservationFleetInstanceSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstanceIdSet
 */
const se_ReservedInstanceIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReservedInstanceId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstanceLimitPrice
 */
const se_ReservedInstanceLimitPrice = (input: ReservedInstanceLimitPrice, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Am] != null) {
    entries[_Am] = __serializeFloat(input[_Am]);
  }
  if (input[_CCu] != null) {
    entries[_CCu] = input[_CCu];
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstancesConfiguration
 */
const se_ReservedInstancesConfiguration = (input: ReservedInstancesConfiguration, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_Pla] != null) {
    entries[_Pla] = input[_Pla];
  }
  if (input[_Sc] != null) {
    entries[_Sc] = input[_Sc];
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstancesConfigurationList
 */
const se_ReservedInstancesConfigurationList = (
  input: ReservedInstancesConfiguration[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ReservedInstancesConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstancesIdStringList
 */
const se_ReservedInstancesIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReservedInstancesId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstancesModificationIdStringList
 */
const se_ReservedInstancesModificationIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ReservedInstancesModificationId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ReservedInstancesOfferingIdStringList
 */
const se_ReservedInstancesOfferingIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ResetAddressAttributeRequest
 */
const se_ResetAddressAttributeRequest = (input: ResetAddressAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AIl] != null) {
    entries[_AIl] = input[_AIl];
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ResetEbsDefaultKmsKeyIdRequest
 */
const se_ResetEbsDefaultKmsKeyIdRequest = (input: ResetEbsDefaultKmsKeyIdRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ResetFpgaImageAttributeRequest
 */
const se_ResetFpgaImageAttributeRequest = (input: ResetFpgaImageAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_FII] != null) {
    entries[_FII] = input[_FII];
  }
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  return entries;
};

/**
 * serializeAws_ec2ResetImageAttributeRequest
 */
const se_ResetImageAttributeRequest = (input: ResetImageAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ResetInstanceAttributeRequest
 */
const se_ResetInstanceAttributeRequest = (input: ResetInstanceAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  return entries;
};

/**
 * serializeAws_ec2ResetNetworkInterfaceAttributeRequest
 */
const se_ResetNetworkInterfaceAttributeRequest = (
  input: ResetNetworkInterfaceAttributeRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_SDC] != null) {
    entries[_SDC] = input[_SDC];
  }
  return entries;
};

/**
 * serializeAws_ec2ResetSnapshotAttributeRequest
 */
const se_ResetSnapshotAttributeRequest = (input: ResetSnapshotAttributeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_At] != null) {
    entries[_At] = input[_At];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ResourceIdList
 */
const se_ResourceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ResourceList
 */
const se_ResourceList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ResourceStatementRequest
 */
const se_ResourceStatementRequest = (input: ResourceStatementRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_R] != null) {
    const memberEntries = se_ValueStringList(input[_R], context);
    if (input[_R]?.length === 0) {
      entries.Resource = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Resource.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_RTeso] != null) {
    const memberEntries = se_ValueStringList(input[_RTeso], context);
    if (input[_RTeso]?.length === 0) {
      entries.ResourceType = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceType.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2RestorableByStringList
 */
const se_RestorableByStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RestoreAddressToClassicRequest
 */
const se_RestoreAddressToClassicRequest = (input: RestoreAddressToClassicRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PI] != null) {
    entries[_PI] = input[_PI];
  }
  return entries;
};

/**
 * serializeAws_ec2RestoreImageFromRecycleBinRequest
 */
const se_RestoreImageFromRecycleBinRequest = (
  input: RestoreImageFromRecycleBinRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2RestoreManagedPrefixListVersionRequest
 */
const se_RestoreManagedPrefixListVersionRequest = (
  input: RestoreManagedPrefixListVersionRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_PV] != null) {
    entries[_PV] = input[_PV];
  }
  if (input[_CVu] != null) {
    entries[_CVu] = input[_CVu];
  }
  return entries;
};

/**
 * serializeAws_ec2RestoreSnapshotFromRecycleBinRequest
 */
const se_RestoreSnapshotFromRecycleBinRequest = (
  input: RestoreSnapshotFromRecycleBinRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2RestoreSnapshotTierRequest
 */
const se_RestoreSnapshotTierRequest = (input: RestoreSnapshotTierRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_TRD] != null) {
    entries[_TRD] = input[_TRD];
  }
  if (input[_PRer] != null) {
    entries[_PRer] = input[_PRer];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2RevokeClientVpnIngressRequest
 */
const se_RevokeClientVpnIngressRequest = (input: RevokeClientVpnIngressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_TNC] != null) {
    entries[_TNC] = input[_TNC];
  }
  if (input[_AGI] != null) {
    entries[_AGI] = input[_AGI];
  }
  if (input[_RAG] != null) {
    entries[_RAG] = input[_RAG];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2RevokeSecurityGroupEgressRequest
 */
const se_RevokeSecurityGroupEgressRequest = (input: RevokeSecurityGroupEgressRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_IPpe] != null) {
    const memberEntries = se_IpPermissionList(input[_IPpe], context);
    if (input[_IPpe]?.length === 0) {
      entries.IpPermissions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SGRI] != null) {
    const memberEntries = se_SecurityGroupRuleIdList(input[_SGRI], context);
    if (input[_SGRI]?.length === 0) {
      entries.SecurityGroupRuleId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CIi] != null) {
    entries[_CIi] = input[_CIi];
  }
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_IPpr] != null) {
    entries[_IPpr] = input[_IPpr];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  if (input[_SSGN] != null) {
    entries[_SSGN] = input[_SSGN];
  }
  if (input[_SSGOI] != null) {
    entries[_SSGOI] = input[_SSGOI];
  }
  return entries;
};

/**
 * serializeAws_ec2RevokeSecurityGroupIngressRequest
 */
const se_RevokeSecurityGroupIngressRequest = (
  input: RevokeSecurityGroupIngressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CIi] != null) {
    entries[_CIi] = input[_CIi];
  }
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_IPpe] != null) {
    const memberEntries = se_IpPermissionList(input[_IPpe], context);
    if (input[_IPpe]?.length === 0) {
      entries.IpPermissions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPpr] != null) {
    entries[_IPpr] = input[_IPpr];
  }
  if (input[_SSGN] != null) {
    entries[_SSGN] = input[_SSGN];
  }
  if (input[_SSGOI] != null) {
    entries[_SSGOI] = input[_SSGOI];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SGRI] != null) {
    const memberEntries = se_SecurityGroupRuleIdList(input[_SGRI], context);
    if (input[_SGRI]?.length === 0) {
      entries.SecurityGroupRuleId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2RouteTableIdStringList
 */
const se_RouteTableIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2RunInstancesMonitoringEnabled
 */
const se_RunInstancesMonitoringEnabled = (input: RunInstancesMonitoringEnabled, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};

/**
 * serializeAws_ec2RunInstancesRequest
 */
const se_RunInstancesRequest = (input: RunInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_BDM] != null) {
    const memberEntries = se_BlockDeviceMappingRequestList(input[_BDM], context);
    if (input[_BDM]?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_IAC] != null) {
    entries[_IAC] = input[_IAC];
  }
  if (input[_IA] != null) {
    const memberEntries = se_InstanceIpv6AddressList(input[_IA], context);
    if (input[_IA]?.length === 0) {
      entries.Ipv6Address = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_KI] != null) {
    entries[_KI] = input[_KI];
  }
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_MC] != null) {
    entries[_MC] = input[_MC];
  }
  if (input[_MCi] != null) {
    entries[_MCi] = input[_MCi];
  }
  if (input[_Mon] != null) {
    const memberEntries = se_RunInstancesMonitoringEnabled(input[_Mon], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_Pl] != null) {
    const memberEntries = se_Placement(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RIa] != null) {
    entries[_RIa] = input[_RIa];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_SecurityGroupIdStringList(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SG] != null) {
    const memberEntries = se_SecurityGroupStringList(input[_SG], context);
    if (input[_SG]?.length === 0) {
      entries.SecurityGroup = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_UD] != null) {
    entries[_UD] = input[_UD];
  }
  if (input[_AId] != null) {
    entries[_AId] = input[_AId];
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DATis] != null) {
    entries[_DATis] = input[_DATis];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_IIP] != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IISB] != null) {
    entries[_IISB] = input[_IISB];
  }
  if (input[_NI] != null) {
    const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input[_NI], context);
    if (input[_NI]?.length === 0) {
      entries.NetworkInterface = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_EGSl] != null) {
    const memberEntries = se_ElasticGpuSpecifications(input[_EGSl], context);
    if (input[_EGSl]?.length === 0) {
      entries.ElasticGpuSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EIA] != null) {
    const memberEntries = se_ElasticInferenceAccelerators(input[_EIA], context);
    if (input[_EIA]?.length === 0) {
      entries.ElasticInferenceAccelerator = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LTa] != null) {
    const memberEntries = se_LaunchTemplateSpecification(input[_LTa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplate.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IMO] != null) {
    const memberEntries = se_InstanceMarketOptionsRequest(input[_IMO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceMarketOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CSred] != null) {
    const memberEntries = se_CreditSpecificationRequest(input[_CSred], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CreditSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CO] != null) {
    const memberEntries = se_CpuOptionsRequest(input[_CO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CpuOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CRS] != null) {
    const memberEntries = se_CapacityReservationSpecification(input[_CRS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityReservationSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_HO] != null) {
    const memberEntries = se_HibernationOptionsRequest(input[_HO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `HibernationOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LSi] != null) {
    const memberEntries = se_LicenseSpecificationListRequest(input[_LSi], context);
    if (input[_LSi]?.length === 0) {
      entries.LicenseSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MO] != null) {
    const memberEntries = se_InstanceMetadataOptionsRequest(input[_MO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MetadataOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_EOn] != null) {
    const memberEntries = se_EnclaveOptionsRequest(input[_EOn], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `EnclaveOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_PDNO] != null) {
    const memberEntries = se_PrivateDnsNameOptionsRequest(input[_PDNO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateDnsNameOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_MOa] != null) {
    const memberEntries = se_InstanceMaintenanceOptionsRequest(input[_MOa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MaintenanceOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_DAS] != null) {
    entries[_DAS] = input[_DAS];
  }
  if (input[_EPI] != null) {
    entries[_EPI] = input[_EPI];
  }
  return entries;
};

/**
 * serializeAws_ec2RunScheduledInstancesRequest
 */
const se_RunScheduledInstancesRequest = (input: RunScheduledInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_LSa] != null) {
    const memberEntries = se_ScheduledInstancesLaunchSpecification(input[_LSa], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecification.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_SIIch] != null) {
    entries[_SIIch] = input[_SIIch];
  }
  return entries;
};

/**
 * serializeAws_ec2S3ObjectTag
 */
const se_S3ObjectTag = (input: S3ObjectTag, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Ke] != null) {
    entries[_Ke] = input[_Ke];
  }
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};

/**
 * serializeAws_ec2S3ObjectTagList
 */
const se_S3ObjectTagList = (input: S3ObjectTag[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_S3ObjectTag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2S3Storage
 */
const se_S3Storage = (input: S3Storage, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AWSAKI] != null) {
    entries[_AWSAKI] = input[_AWSAKI];
  }
  if (input[_B] != null) {
    entries[_B] = input[_B];
  }
  if (input[_Pr] != null) {
    entries[_Pr] = input[_Pr];
  }
  if (input[_UP] != null) {
    entries[_UP] = context.base64Encoder(input[_UP]);
  }
  if (input[_UPS] != null) {
    entries[_UPS] = input[_UPS];
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstanceIdRequestSet
 */
const se_ScheduledInstanceIdRequestSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ScheduledInstanceId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstanceRecurrenceRequest
 */
const se_ScheduledInstanceRecurrenceRequest = (
  input: ScheduledInstanceRecurrenceRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Fre] != null) {
    entries[_Fre] = input[_Fre];
  }
  if (input[_Int] != null) {
    entries[_Int] = input[_Int];
  }
  if (input[_OD] != null) {
    const memberEntries = se_OccurrenceDayRequestSet(input[_OD], context);
    if (input[_OD]?.length === 0) {
      entries.OccurrenceDay = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `OccurrenceDay.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ORTE] != null) {
    entries[_ORTE] = input[_ORTE];
  }
  if (input[_OU] != null) {
    entries[_OU] = input[_OU];
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesBlockDeviceMapping
 */
const se_ScheduledInstancesBlockDeviceMapping = (
  input: ScheduledInstancesBlockDeviceMapping,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DN] != null) {
    entries[_DN] = input[_DN];
  }
  if (input[_E] != null) {
    const memberEntries = se_ScheduledInstancesEbs(input[_E], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ebs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ND] != null) {
    entries[_ND] = input[_ND];
  }
  if (input[_VN] != null) {
    entries[_VN] = input[_VN];
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesBlockDeviceMappingSet
 */
const se_ScheduledInstancesBlockDeviceMappingSet = (
  input: ScheduledInstancesBlockDeviceMapping[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ScheduledInstancesBlockDeviceMapping(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`BlockDeviceMapping.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesEbs
 */
const se_ScheduledInstancesEbs = (input: ScheduledInstancesEbs, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_Enc] != null) {
    entries[_Enc] = input[_Enc];
  }
  if (input[_Io] != null) {
    entries[_Io] = input[_Io];
  }
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_VS] != null) {
    entries[_VS] = input[_VS];
  }
  if (input[_VT] != null) {
    entries[_VT] = input[_VT];
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesIamInstanceProfile
 */
const se_ScheduledInstancesIamInstanceProfile = (
  input: ScheduledInstancesIamInstanceProfile,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Ar] != null) {
    entries[_Ar] = input[_Ar];
  }
  if (input[_N] != null) {
    entries[_N] = input[_N];
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesIpv6Address
 */
const se_ScheduledInstancesIpv6Address = (input: ScheduledInstancesIpv6Address, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IApv] != null) {
    entries[_IApv] = input[_IApv];
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesIpv6AddressList
 */
const se_ScheduledInstancesIpv6AddressList = (input: ScheduledInstancesIpv6Address[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ScheduledInstancesIpv6Address(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Ipv6Address.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesLaunchSpecification
 */
const se_ScheduledInstancesLaunchSpecification = (
  input: ScheduledInstancesLaunchSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_BDM] != null) {
    const memberEntries = se_ScheduledInstancesBlockDeviceMappingSet(input[_BDM], context);
    if (input[_BDM]?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_IIP] != null) {
    const memberEntries = se_ScheduledInstancesIamInstanceProfile(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_KI] != null) {
    entries[_KI] = input[_KI];
  }
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_Mon] != null) {
    const memberEntries = se_ScheduledInstancesMonitoring(input[_Mon], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NI] != null) {
    const memberEntries = se_ScheduledInstancesNetworkInterfaceSet(input[_NI], context);
    if (input[_NI]?.length === 0) {
      entries.NetworkInterface = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Pl] != null) {
    const memberEntries = se_ScheduledInstancesPlacement(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RIa] != null) {
    entries[_RIa] = input[_RIa];
  }
  if (input[_SGI] != null) {
    const memberEntries = se_ScheduledInstancesSecurityGroupIdSet(input[_SGI], context);
    if (input[_SGI]?.length === 0) {
      entries.SecurityGroupId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_UD] != null) {
    entries[_UD] = input[_UD];
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesMonitoring
 */
const se_ScheduledInstancesMonitoring = (input: ScheduledInstancesMonitoring, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesNetworkInterface
 */
const se_ScheduledInstancesNetworkInterface = (
  input: ScheduledInstancesNetworkInterface,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_APIAs] != null) {
    entries[_APIAs] = input[_APIAs];
  }
  if (input[_DOT] != null) {
    entries[_DOT] = input[_DOT];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_DIev] != null) {
    entries[_DIev] = input[_DIev];
  }
  if (input[_G] != null) {
    const memberEntries = se_ScheduledInstancesSecurityGroupIdSet(input[_G], context);
    if (input[_G]?.length === 0) {
      entries.Group = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Group.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IAC] != null) {
    entries[_IAC] = input[_IAC];
  }
  if (input[_IA] != null) {
    const memberEntries = se_ScheduledInstancesIpv6AddressList(input[_IA], context);
    if (input[_IA]?.length === 0) {
      entries.Ipv6Address = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  if (input[_PIACr] != null) {
    const memberEntries = se_PrivateIpAddressConfigSet(input[_PIACr], context);
    if (input[_PIACr]?.length === 0) {
      entries.PrivateIpAddressConfig = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddressConfig.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPIAC] != null) {
    entries[_SPIAC] = input[_SPIAC];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesNetworkInterfaceSet
 */
const se_ScheduledInstancesNetworkInterfaceSet = (
  input: ScheduledInstancesNetworkInterface[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ScheduledInstancesNetworkInterface(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`NetworkInterface.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesPlacement
 */
const se_ScheduledInstancesPlacement = (input: ScheduledInstancesPlacement, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesPrivateIpAddressConfig
 */
const se_ScheduledInstancesPrivateIpAddressConfig = (
  input: ScheduledInstancesPrivateIpAddressConfig,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_Prim] != null) {
    entries[_Prim] = input[_Prim];
  }
  if (input[_PIAr] != null) {
    entries[_PIAr] = input[_PIAr];
  }
  return entries;
};

/**
 * serializeAws_ec2ScheduledInstancesSecurityGroupIdSet
 */
const se_ScheduledInstancesSecurityGroupIdSet = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SearchLocalGatewayRoutesRequest
 */
const se_SearchLocalGatewayRoutesRequest = (input: SearchLocalGatewayRoutesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_LGRTI] != null) {
    entries[_LGRTI] = input[_LGRTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2SearchTransitGatewayMulticastGroupsRequest
 */
const se_SearchTransitGatewayMulticastGroupsRequest = (
  input: SearchTransitGatewayMulticastGroupsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGMDI] != null) {
    entries[_TGMDI] = input[_TGMDI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_NT] != null) {
    entries[_NT] = input[_NT];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2SearchTransitGatewayRoutesRequest
 */
const se_SearchTransitGatewayRoutesRequest = (
  input: SearchTransitGatewayRoutesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TGRTI] != null) {
    entries[_TGRTI] = input[_TGRTI];
  }
  if (input[_Fi] != null) {
    const memberEntries = se_FilterList(input[_Fi], context);
    if (input[_Fi]?.length === 0) {
      entries.Filter = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MR] != null) {
    entries[_MR] = input[_MR];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupIdList
 */
const se_SecurityGroupIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupIdStringList
 */
const se_SecurityGroupIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupIdStringListRequest
 */
const se_SecurityGroupIdStringListRequest = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroupId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupRuleDescription
 */
const se_SecurityGroupRuleDescription = (input: SecurityGroupRuleDescription, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SGRIe] != null) {
    entries[_SGRIe] = input[_SGRIe];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupRuleDescriptionList
 */
const se_SecurityGroupRuleDescriptionList = (input: SecurityGroupRuleDescription[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SecurityGroupRuleDescription(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupRuleIdList
 */
const se_SecurityGroupRuleIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupRuleRequest
 */
const se_SecurityGroupRuleRequest = (input: SecurityGroupRuleRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IPpr] != null) {
    entries[_IPpr] = input[_IPpr];
  }
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  if (input[_CIidr] != null) {
    entries[_CIidr] = input[_CIidr];
  }
  if (input[_CIid] != null) {
    entries[_CIid] = input[_CIid];
  }
  if (input[_PLI] != null) {
    entries[_PLI] = input[_PLI];
  }
  if (input[_RGI] != null) {
    entries[_RGI] = input[_RGI];
  }
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupRuleUpdate
 */
const se_SecurityGroupRuleUpdate = (input: SecurityGroupRuleUpdate, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SGRIe] != null) {
    entries[_SGRIe] = input[_SGRIe];
  }
  if (input[_SGRe] != null) {
    const memberEntries = se_SecurityGroupRuleRequest(input[_SGRe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRule.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupRuleUpdateList
 */
const se_SecurityGroupRuleUpdateList = (input: SecurityGroupRuleUpdate[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SecurityGroupRuleUpdate(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SecurityGroupStringList
 */
const se_SecurityGroupStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SecurityGroup.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SendDiagnosticInterruptRequest
 */
const se_SendDiagnosticInterruptRequest = (input: SendDiagnosticInterruptRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIn] != null) {
    entries[_IIn] = input[_IIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2SlotDateTimeRangeRequest
 */
const se_SlotDateTimeRangeRequest = (input: SlotDateTimeRangeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ETa] != null) {
    entries[_ETa] = input[_ETa].toISOString().split(".")[0] + "Z";
  }
  if (input[_LTat] != null) {
    entries[_LTat] = input[_LTat].toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2SlotStartTimeRangeRequest
 */
const se_SlotStartTimeRangeRequest = (input: SlotStartTimeRangeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ETa] != null) {
    entries[_ETa] = input[_ETa].toISOString().split(".")[0] + "Z";
  }
  if (input[_LTat] != null) {
    entries[_LTat] = input[_LTat].toISOString().split(".")[0] + "Z";
  }
  return entries;
};

/**
 * serializeAws_ec2SnapshotDiskContainer
 */
const se_SnapshotDiskContainer = (input: SnapshotDiskContainer, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_Fo] != null) {
    entries[_Fo] = input[_Fo];
  }
  if (input[_U] != null) {
    entries[_U] = input[_U];
  }
  if (input[_UB] != null) {
    const memberEntries = se_UserBucket(input[_UB], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `UserBucket.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2SnapshotIdStringList
 */
const se_SnapshotIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SnapshotId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SpotCapacityRebalance
 */
const se_SpotCapacityRebalance = (input: SpotCapacityRebalance, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_RS] != null) {
    entries[_RS] = input[_RS];
  }
  if (input[_TDe] != null) {
    entries[_TDe] = input[_TDe];
  }
  return entries;
};

/**
 * serializeAws_ec2SpotFleetLaunchSpecification
 */
const se_SpotFleetLaunchSpecification = (input: SpotFleetLaunchSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SG] != null) {
    const memberEntries = se_GroupIdentifierList(input[_SG], context);
    if (input[_SG]?.length === 0) {
      entries.GroupSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `GroupSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_ATd] != null) {
    entries[_ATd] = input[_ATd];
  }
  if (input[_BDM] != null) {
    const memberEntries = se_BlockDeviceMappingList(input[_BDM], context);
    if (input[_BDM]?.length === 0) {
      entries.BlockDeviceMapping = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_EO] != null) {
    entries[_EO] = input[_EO];
  }
  if (input[_IIP] != null) {
    const memberEntries = se_IamInstanceProfileSpecification(input[_IIP], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IamInstanceProfile.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIma] != null) {
    entries[_IIma] = input[_IIma];
  }
  if (input[_IT] != null) {
    entries[_IT] = input[_IT];
  }
  if (input[_KI] != null) {
    entries[_KI] = input[_KI];
  }
  if (input[_KN] != null) {
    entries[_KN] = input[_KN];
  }
  if (input[_Mon] != null) {
    const memberEntries = se_SpotFleetMonitoring(input[_Mon], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Monitoring.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_NI] != null) {
    const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input[_NI], context);
    if (input[_NI]?.length === 0) {
      entries.NetworkInterfaceSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `NetworkInterfaceSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Pl] != null) {
    const memberEntries = se_SpotPlacement(input[_Pl], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Placement.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_RIa] != null) {
    entries[_RIa] = input[_RIa];
  }
  if (input[_SPp] != null) {
    entries[_SPp] = input[_SPp];
  }
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_UD] != null) {
    entries[_UD] = input[_UD];
  }
  if (input[_WC] != null) {
    entries[_WC] = __serializeFloat(input[_WC]);
  }
  if (input[_TS] != null) {
    const memberEntries = se_SpotFleetTagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecificationSet = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecificationSet.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IR] != null) {
    const memberEntries = se_InstanceRequirements(input[_IR], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceRequirements.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2SpotFleetMonitoring
 */
const se_SpotFleetMonitoring = (input: SpotFleetMonitoring, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  return entries;
};

/**
 * serializeAws_ec2SpotFleetRequestConfigData
 */
const se_SpotFleetRequestConfigData = (input: SpotFleetRequestConfigData, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AS] != null) {
    entries[_AS] = input[_AS];
  }
  if (input[_ODAS] != null) {
    entries[_ODAS] = input[_ODAS];
  }
  if (input[_SMS] != null) {
    const memberEntries = se_SpotMaintenanceStrategies(input[_SMS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SpotMaintenanceStrategies.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  if (input[_ECTP] != null) {
    entries[_ECTP] = input[_ECTP];
  }
  if (input[_FC] != null) {
    entries[_FC] = __serializeFloat(input[_FC]);
  }
  if (input[_ODFC] != null) {
    entries[_ODFC] = __serializeFloat(input[_ODFC]);
  }
  if (input[_IFR] != null) {
    entries[_IFR] = input[_IFR];
  }
  if (input[_LSau] != null) {
    const memberEntries = se_LaunchSpecsList(input[_LSau], context);
    if (input[_LSau]?.length === 0) {
      entries.LaunchSpecifications = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchSpecifications.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LTC] != null) {
    const memberEntries = se_LaunchTemplateConfigList(input[_LTC], context);
    if (input[_LTC]?.length === 0) {
      entries.LaunchTemplateConfigs = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SPp] != null) {
    entries[_SPp] = input[_SPp];
  }
  if (input[_TCa] != null) {
    entries[_TCa] = input[_TCa];
  }
  if (input[_ODTC] != null) {
    entries[_ODTC] = input[_ODTC];
  }
  if (input[_ODMTP] != null) {
    entries[_ODMTP] = input[_ODMTP];
  }
  if (input[_SMTP] != null) {
    entries[_SMTP] = input[_SMTP];
  }
  if (input[_TIWE] != null) {
    entries[_TIWE] = input[_TIWE];
  }
  if (input[_T] != null) {
    entries[_T] = input[_T];
  }
  if (input[_VF] != null) {
    entries[_VF] = input[_VF].toISOString().split(".")[0] + "Z";
  }
  if (input[_VU] != null) {
    entries[_VU] = input[_VU].toISOString().split(".")[0] + "Z";
  }
  if (input[_RUI] != null) {
    entries[_RUI] = input[_RUI];
  }
  if (input[_IIB] != null) {
    entries[_IIB] = input[_IIB];
  }
  if (input[_LBC] != null) {
    const memberEntries = se_LoadBalancersConfig(input[_LBC], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LoadBalancersConfig.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IPTUC] != null) {
    entries[_IPTUC] = input[_IPTUC];
  }
  if (input[_Con] != null) {
    entries[_Con] = input[_Con];
  }
  if (input[_TCUT] != null) {
    entries[_TCUT] = input[_TCUT];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2SpotFleetRequestIdList
 */
const se_SpotFleetRequestIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SpotFleetTagSpecification
 */
const se_SpotFleetTagSpecification = (input: SpotFleetTagSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    if (input[_Ta]?.length === 0) {
      entries.Tag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2SpotFleetTagSpecificationList
 */
const se_SpotFleetTagSpecificationList = (input: SpotFleetTagSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SpotFleetTagSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SpotInstanceRequestIdList
 */
const se_SpotInstanceRequestIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SpotInstanceRequestId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SpotMaintenanceStrategies
 */
const se_SpotMaintenanceStrategies = (input: SpotMaintenanceStrategies, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CRap] != null) {
    const memberEntries = se_SpotCapacityRebalance(input[_CRap], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CapacityRebalance.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2SpotMarketOptions
 */
const se_SpotMarketOptions = (input: SpotMarketOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_MPa] != null) {
    entries[_MPa] = input[_MPa];
  }
  if (input[_SIT] != null) {
    entries[_SIT] = input[_SIT];
  }
  if (input[_BDMl] != null) {
    entries[_BDMl] = input[_BDMl];
  }
  if (input[_VU] != null) {
    entries[_VU] = input[_VU].toISOString().split(".")[0] + "Z";
  }
  if (input[_IIB] != null) {
    entries[_IIB] = input[_IIB];
  }
  return entries;
};

/**
 * serializeAws_ec2SpotOptionsRequest
 */
const se_SpotOptionsRequest = (input: SpotOptionsRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AS] != null) {
    entries[_AS] = input[_AS];
  }
  if (input[_MS] != null) {
    const memberEntries = se_FleetSpotMaintenanceStrategiesRequest(input[_MS], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `MaintenanceStrategies.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_IIB] != null) {
    entries[_IIB] = input[_IIB];
  }
  if (input[_IPTUC] != null) {
    entries[_IPTUC] = input[_IPTUC];
  }
  if (input[_SITi] != null) {
    entries[_SITi] = input[_SITi];
  }
  if (input[_SAZ] != null) {
    entries[_SAZ] = input[_SAZ];
  }
  if (input[_MTC] != null) {
    entries[_MTC] = input[_MTC];
  }
  if (input[_MTP] != null) {
    entries[_MTP] = input[_MTP];
  }
  return entries;
};

/**
 * serializeAws_ec2SpotPlacement
 */
const se_SpotPlacement = (input: SpotPlacement, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_AZ] != null) {
    entries[_AZ] = input[_AZ];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_Te] != null) {
    entries[_Te] = input[_Te];
  }
  return entries;
};

/**
 * serializeAws_ec2StartInstancesRequest
 */
const se_StartInstancesRequest = (input: StartInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    if (input[_IIns]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_AId] != null) {
    entries[_AId] = input[_AId];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2StartNetworkInsightsAccessScopeAnalysisRequest
 */
const se_StartNetworkInsightsAccessScopeAnalysisRequest = (
  input: StartNetworkInsightsAccessScopeAnalysisRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NIASI] != null) {
    entries[_NIASI] = input[_NIASI];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2StartNetworkInsightsAnalysisRequest
 */
const se_StartNetworkInsightsAnalysisRequest = (
  input: StartNetworkInsightsAnalysisRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NIPI] != null) {
    entries[_NIPI] = input[_NIPI];
  }
  if (input[_AAd] != null) {
    const memberEntries = se_ValueStringList(input[_AAd], context);
    if (input[_AAd]?.length === 0) {
      entries.AdditionalAccount = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `AdditionalAccount.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_FIA] != null) {
    const memberEntries = se_ArnList(input[_FIA], context);
    if (input[_FIA]?.length === 0) {
      entries.FilterInArn = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `FilterInArn.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_TS] != null) {
    const memberEntries = se_TagSpecificationList(input[_TS], context);
    if (input[_TS]?.length === 0) {
      entries.TagSpecification = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_CTl] === undefined) {
    input[_CTl] = generateIdempotencyToken();
  }
  if (input[_CTl] != null) {
    entries[_CTl] = input[_CTl];
  }
  return entries;
};

/**
 * serializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationRequest
 */
const se_StartVpcEndpointServicePrivateDnsVerificationRequest = (
  input: StartVpcEndpointServicePrivateDnsVerificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_SIe] != null) {
    entries[_SIe] = input[_SIe];
  }
  return entries;
};

/**
 * serializeAws_ec2StopInstancesRequest
 */
const se_StopInstancesRequest = (input: StopInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    if (input[_IIns]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_Hi] != null) {
    entries[_Hi] = input[_Hi];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_F] != null) {
    entries[_F] = input[_F];
  }
  return entries;
};

/**
 * serializeAws_ec2Storage
 */
const se_Storage = (input: Storage, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_S_] != null) {
    const memberEntries = se_S3Storage(input[_S_], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2StorageLocation
 */
const se_StorageLocation = (input: StorageLocation, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_B] != null) {
    entries[_B] = input[_B];
  }
  if (input[_Ke] != null) {
    entries[_Ke] = input[_Ke];
  }
  return entries;
};

/**
 * serializeAws_ec2SubnetConfiguration
 */
const se_SubnetConfiguration = (input: SubnetConfiguration, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SIub] != null) {
    entries[_SIub] = input[_SIub];
  }
  if (input[_Ip] != null) {
    entries[_Ip] = input[_Ip];
  }
  if (input[_Ipv] != null) {
    entries[_Ipv] = input[_Ipv];
  }
  return entries;
};

/**
 * serializeAws_ec2SubnetConfigurationsList
 */
const se_SubnetConfigurationsList = (input: SubnetConfiguration[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_SubnetConfiguration(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2SubnetIdStringList
 */
const se_SubnetIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`SubnetId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2Tag
 */
const se_Tag = (input: Tag, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Ke] != null) {
    entries[_Ke] = input[_Ke];
  }
  if (input[_Va] != null) {
    entries[_Va] = input[_Va];
  }
  return entries;
};

/**
 * serializeAws_ec2TagList
 */
const se_TagList = (input: Tag[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_Tag(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TagSpecification
 */
const se_TagSpecification = (input: TagSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_RT] != null) {
    entries[_RT] = input[_RT];
  }
  if (input[_Ta] != null) {
    const memberEntries = se_TagList(input[_Ta], context);
    if (input[_Ta]?.length === 0) {
      entries.Tag = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2TagSpecificationList
 */
const se_TagSpecificationList = (input: TagSpecification[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TagSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TargetCapacitySpecificationRequest
 */
const se_TargetCapacitySpecificationRequest = (
  input: TargetCapacitySpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_TTC] != null) {
    entries[_TTC] = input[_TTC];
  }
  if (input[_ODTC] != null) {
    entries[_ODTC] = input[_ODTC];
  }
  if (input[_STC] != null) {
    entries[_STC] = input[_STC];
  }
  if (input[_DTCT] != null) {
    entries[_DTCT] = input[_DTCT];
  }
  if (input[_TCUT] != null) {
    entries[_TCUT] = input[_TCUT];
  }
  return entries;
};

/**
 * serializeAws_ec2TargetConfigurationRequest
 */
const se_TargetConfigurationRequest = (input: TargetConfigurationRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IC] != null) {
    entries[_IC] = input[_IC];
  }
  if (input[_OI] != null) {
    entries[_OI] = input[_OI];
  }
  return entries;
};

/**
 * serializeAws_ec2TargetConfigurationRequestSet
 */
const se_TargetConfigurationRequestSet = (input: TargetConfigurationRequest[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TargetConfigurationRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`TargetConfigurationRequest.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TargetGroup
 */
const se_TargetGroup = (input: TargetGroup, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Ar] != null) {
    entries[_Ar] = input[_Ar];
  }
  return entries;
};

/**
 * serializeAws_ec2TargetGroups
 */
const se_TargetGroups = (input: TargetGroup[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_TargetGroup(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TargetGroupsConfig
 */
const se_TargetGroupsConfig = (input: TargetGroupsConfig, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_TG] != null) {
    const memberEntries = se_TargetGroups(input[_TG], context);
    if (input[_TG]?.length === 0) {
      entries.TargetGroups = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TargetGroups.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2TerminateClientVpnConnectionsRequest
 */
const se_TerminateClientVpnConnectionsRequest = (
  input: TerminateClientVpnConnectionsRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CVEI] != null) {
    entries[_CVEI] = input[_CVEI];
  }
  if (input[_CIo] != null) {
    entries[_CIo] = input[_CIo];
  }
  if (input[_Us] != null) {
    entries[_Us] = input[_Us];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2TerminateInstancesRequest
 */
const se_TerminateInstancesRequest = (input: TerminateInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    if (input[_IIns]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ThroughResourcesStatementRequest
 */
const se_ThroughResourcesStatementRequest = (input: ThroughResourcesStatementRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_RSe] != null) {
    const memberEntries = se_ResourceStatementRequest(input[_RSe], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `ResourceStatement.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2ThroughResourcesStatementRequestList
 */
const se_ThroughResourcesStatementRequestList = (
  input: ThroughResourcesStatementRequest[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_ThroughResourcesStatementRequest(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TotalLocalStorageGB
 */
const se_TotalLocalStorageGB = (input: TotalLocalStorageGB, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = __serializeFloat(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = __serializeFloat(input[_Ma]);
  }
  return entries;
};

/**
 * serializeAws_ec2TotalLocalStorageGBRequest
 */
const se_TotalLocalStorageGBRequest = (input: TotalLocalStorageGBRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = __serializeFloat(input[_M]);
  }
  if (input[_Ma] != null) {
    entries[_Ma] = __serializeFloat(input[_Ma]);
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorFilterIdList
 */
const se_TrafficMirrorFilterIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorFilterRuleFieldList
 */
const se_TrafficMirrorFilterRuleFieldList = (input: TrafficMirrorFilterRuleField[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorNetworkServiceList
 */
const se_TrafficMirrorNetworkServiceList = (input: TrafficMirrorNetworkService[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorPortRangeRequest
 */
const se_TrafficMirrorPortRangeRequest = (input: TrafficMirrorPortRangeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_FP] != null) {
    entries[_FP] = input[_FP];
  }
  if (input[_TP] != null) {
    entries[_TP] = input[_TP];
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorSessionFieldList
 */
const se_TrafficMirrorSessionFieldList = (input: TrafficMirrorSessionField[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorSessionIdList
 */
const se_TrafficMirrorSessionIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TrafficMirrorTargetIdList
 */
const se_TrafficMirrorTargetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayAttachmentIdStringList
 */
const se_TransitGatewayAttachmentIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Member.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayCidrBlockStringList
 */
const se_TransitGatewayCidrBlockStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayConnectPeerIdStringList
 */
const se_TransitGatewayConnectPeerIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayConnectRequestBgpOptions
 */
const se_TransitGatewayConnectRequestBgpOptions = (
  input: TransitGatewayConnectRequestBgpOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_PAee] != null) {
    entries[_PAee] = input[_PAee];
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayIdStringList
 */
const se_TransitGatewayIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayMulticastDomainIdStringList
 */
const se_TransitGatewayMulticastDomainIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayNetworkInterfaceIdList
 */
const se_TransitGatewayNetworkInterfaceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayPolicyTableIdStringList
 */
const se_TransitGatewayPolicyTableIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayRequestOptions
 */
const se_TransitGatewayRequestOptions = (input: TransitGatewayRequestOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_ASA] != null) {
    entries[_ASA] = input[_ASA];
  }
  if (input[_AASAu] != null) {
    entries[_AASAu] = input[_AASAu];
  }
  if (input[_DRTA] != null) {
    entries[_DRTA] = input[_DRTA];
  }
  if (input[_DRTP] != null) {
    entries[_DRTP] = input[_DRTP];
  }
  if (input[_VES] != null) {
    entries[_VES] = input[_VES];
  }
  if (input[_DSns] != null) {
    entries[_DSns] = input[_DSns];
  }
  if (input[_SGRS] != null) {
    entries[_SGRS] = input[_SGRS];
  }
  if (input[_MSu] != null) {
    entries[_MSu] = input[_MSu];
  }
  if (input[_TGCB] != null) {
    const memberEntries = se_TransitGatewayCidrBlockStringList(input[_TGCB], context);
    if (input[_TGCB]?.length === 0) {
      entries.TransitGatewayCidrBlocks = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayRouteTableAnnouncementIdStringList
 */
const se_TransitGatewayRouteTableAnnouncementIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewayRouteTableIdStringList
 */
const se_TransitGatewayRouteTableIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TransitGatewaySubnetIdList
 */
const se_TransitGatewaySubnetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2TrunkInterfaceAssociationIdList
 */
const se_TrunkInterfaceAssociationIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2UnassignIpv6AddressesRequest
 */
const se_UnassignIpv6AddressesRequest = (input: UnassignIpv6AddressesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IA] != null) {
    const memberEntries = se_Ipv6AddressList(input[_IA], context);
    if (input[_IA]?.length === 0) {
      entries.Ipv6Addresses = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IP] != null) {
    const memberEntries = se_IpPrefixList(input[_IP], context);
    if (input[_IP]?.length === 0) {
      entries.Ipv6Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  return entries;
};

/**
 * serializeAws_ec2UnassignPrivateIpAddressesRequest
 */
const se_UnassignPrivateIpAddressesRequest = (
  input: UnassignPrivateIpAddressesRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NII] != null) {
    entries[_NII] = input[_NII];
  }
  if (input[_PIA] != null) {
    const memberEntries = se_PrivateIpAddressStringList(input[_PIA], context);
    if (input[_PIA]?.length === 0) {
      entries.PrivateIpAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IPp] != null) {
    const memberEntries = se_IpPrefixList(input[_IPp], context);
    if (input[_IPp]?.length === 0) {
      entries.Ipv4Prefix = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2UnassignPrivateNatGatewayAddressRequest
 */
const se_UnassignPrivateNatGatewayAddressRequest = (
  input: UnassignPrivateNatGatewayAddressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_NGI] != null) {
    entries[_NGI] = input[_NGI];
  }
  if (input[_PIA] != null) {
    const memberEntries = se_IpList(input[_PIA], context);
    if (input[_PIA]?.length === 0) {
      entries.PrivateIpAddress = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_MDDS] != null) {
    entries[_MDDS] = input[_MDDS];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2UnlockSnapshotRequest
 */
const se_UnlockSnapshotRequest = (input: UnlockSnapshotRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SIn] != null) {
    entries[_SIn] = input[_SIn];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2UnmonitorInstancesRequest
 */
const se_UnmonitorInstancesRequest = (input: UnmonitorInstancesRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_IIns] != null) {
    const memberEntries = se_InstanceIdStringList(input[_IIns], context);
    if (input[_IIns]?.length === 0) {
      entries.InstanceId = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressRequest
 */
const se_UpdateSecurityGroupRuleDescriptionsEgressRequest = (
  input: UpdateSecurityGroupRuleDescriptionsEgressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_IPpe] != null) {
    const memberEntries = se_IpPermissionList(input[_IPpe], context);
    if (input[_IPpe]?.length === 0) {
      entries.IpPermissions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SGRD] != null) {
    const memberEntries = se_SecurityGroupRuleDescriptionList(input[_SGRD], context);
    if (input[_SGRD]?.length === 0) {
      entries.SecurityGroupRuleDescription = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleDescription.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressRequest
 */
const se_UpdateSecurityGroupRuleDescriptionsIngressRequest = (
  input: UpdateSecurityGroupRuleDescriptionsIngressRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_IPpe] != null) {
    const memberEntries = se_IpPermissionList(input[_IPpe], context);
    if (input[_IPpe]?.length === 0) {
      entries.IpPermissions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SGRD] != null) {
    const memberEntries = se_SecurityGroupRuleDescriptionList(input[_SGRD], context);
    if (input[_SGRD]?.length === 0) {
      entries.SecurityGroupRuleDescription = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `SecurityGroupRuleDescription.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2UserBucket
 */
const se_UserBucket = (input: UserBucket, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_SB] != null) {
    entries[_SB] = input[_SB];
  }
  if (input[_SK] != null) {
    entries[_SK] = input[_SK];
  }
  return entries;
};

/**
 * serializeAws_ec2UserData
 */
const se_UserData = (input: UserData, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Da] != null) {
    entries[_Da] = input[_Da];
  }
  return entries;
};

/**
 * serializeAws_ec2UserGroupStringList
 */
const se_UserGroupStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`UserGroup.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2UserIdGroupPair
 */
const se_UserIdGroupPair = (input: UserIdGroupPair, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_De] != null) {
    entries[_De] = input[_De];
  }
  if (input[_GIr] != null) {
    entries[_GIr] = input[_GIr];
  }
  if (input[_GN] != null) {
    entries[_GN] = input[_GN];
  }
  if (input[_PSe] != null) {
    entries[_PSe] = input[_PSe];
  }
  if (input[_UIs] != null) {
    entries[_UIs] = input[_UIs];
  }
  if (input[_VI] != null) {
    entries[_VI] = input[_VI];
  }
  if (input[_VPCI] != null) {
    entries[_VPCI] = input[_VPCI];
  }
  return entries;
};

/**
 * serializeAws_ec2UserIdGroupPairList
 */
const se_UserIdGroupPairList = (input: UserIdGroupPair[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_UserIdGroupPair(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Item.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2UserIdStringList
 */
const se_UserIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`UserId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ValueStringList
 */
const se_ValueStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VCpuCountRange
 */
const se_VCpuCountRange = (input: VCpuCountRange, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};

/**
 * serializeAws_ec2VCpuCountRangeRequest
 */
const se_VCpuCountRangeRequest = (input: VCpuCountRangeRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_M] != null) {
    entries[_M] = input[_M];
  }
  if (input[_Ma] != null) {
    entries[_Ma] = input[_Ma];
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessEndpointIdList
 */
const se_VerifiedAccessEndpointIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessGroupIdList
 */
const se_VerifiedAccessGroupIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessInstanceIdList
 */
const se_VerifiedAccessInstanceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessLogCloudWatchLogsDestinationOptions
 */
const se_VerifiedAccessLogCloudWatchLogsDestinationOptions = (
  input: VerifiedAccessLogCloudWatchLogsDestinationOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_LGo] != null) {
    entries[_LGo] = input[_LGo];
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessLogKinesisDataFirehoseDestinationOptions
 */
const se_VerifiedAccessLogKinesisDataFirehoseDestinationOptions = (
  input: VerifiedAccessLogKinesisDataFirehoseDestinationOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_DSel] != null) {
    entries[_DSel] = input[_DSel];
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessLogOptions
 */
const se_VerifiedAccessLogOptions = (input: VerifiedAccessLogOptions, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_S_] != null) {
    const memberEntries = se_VerifiedAccessLogS3DestinationOptions(input[_S_], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `S3.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_CWL] != null) {
    const memberEntries = se_VerifiedAccessLogCloudWatchLogsDestinationOptions(input[_CWL], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CloudWatchLogs.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_KDF] != null) {
    const memberEntries = se_VerifiedAccessLogKinesisDataFirehoseDestinationOptions(input[_KDF], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `KinesisDataFirehose.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_LV] != null) {
    entries[_LV] = input[_LV];
  }
  if (input[_ITCn] != null) {
    entries[_ITCn] = input[_ITCn];
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessLogS3DestinationOptions
 */
const se_VerifiedAccessLogS3DestinationOptions = (
  input: VerifiedAccessLogS3DestinationOptions,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_En] != null) {
    entries[_En] = input[_En];
  }
  if (input[_BN] != null) {
    entries[_BN] = input[_BN];
  }
  if (input[_Pr] != null) {
    entries[_Pr] = input[_Pr];
  }
  if (input[_BOu] != null) {
    entries[_BOu] = input[_BOu];
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessSseSpecificationRequest
 */
const se_VerifiedAccessSseSpecificationRequest = (
  input: VerifiedAccessSseSpecificationRequest,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_CMKE] != null) {
    entries[_CMKE] = input[_CMKE];
  }
  if (input[_KKA] != null) {
    entries[_KKA] = input[_KKA];
  }
  return entries;
};

/**
 * serializeAws_ec2VerifiedAccessTrustProviderIdList
 */
const se_VerifiedAccessTrustProviderIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VersionStringList
 */
const se_VersionStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VirtualizationTypeSet
 */
const se_VirtualizationTypeSet = (input: VirtualizationType[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VolumeDetail
 */
const se_VolumeDetail = (input: VolumeDetail, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_Siz] != null) {
    entries[_Siz] = input[_Siz];
  }
  return entries;
};

/**
 * serializeAws_ec2VolumeIdStringList
 */
const se_VolumeIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VolumeId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcClassicLinkIdList
 */
const se_VpcClassicLinkIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpcId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcEndpointIdList
 */
const se_VpcEndpointIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcEndpointRouteTableIdList
 */
const se_VpcEndpointRouteTableIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcEndpointSecurityGroupIdList
 */
const se_VpcEndpointSecurityGroupIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcEndpointServiceIdList
 */
const se_VpcEndpointServiceIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcEndpointSubnetIdList
 */
const se_VpcEndpointSubnetIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcIdStringList
 */
const se_VpcIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpcId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpcPeeringConnectionIdList
 */
const se_VpcPeeringConnectionIdList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`Item.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpnConnectionIdStringList
 */
const se_VpnConnectionIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpnConnectionId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpnConnectionOptionsSpecification
 */
const se_VpnConnectionOptionsSpecification = (
  input: VpnConnectionOptionsSpecification,
  context: __SerdeContext
): any => {
  const entries: any = {};
  if (input[_EA] != null) {
    entries[_EA] = input[_EA];
  }
  if (input[_SRO] != null) {
    entries[_SRO] = input[_SRO];
  }
  if (input[_TIIV] != null) {
    entries[_TIIV] = input[_TIIV];
  }
  if (input[_TO] != null) {
    const memberEntries = se_VpnTunnelOptionsSpecificationsList(input[_TO], context);
    if (input[_TO]?.length === 0) {
      entries.TunnelOptions = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `TunnelOptions.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_LINC] != null) {
    entries[_LINC] = input[_LINC];
  }
  if (input[_RINC] != null) {
    entries[_RINC] = input[_RINC];
  }
  if (input[_LINCo] != null) {
    entries[_LINCo] = input[_LINCo];
  }
  if (input[_RINCe] != null) {
    entries[_RINCe] = input[_RINCe];
  }
  if (input[_OIAT] != null) {
    entries[_OIAT] = input[_OIAT];
  }
  if (input[_TTGAI] != null) {
    entries[_TTGAI] = input[_TTGAI];
  }
  return entries;
};

/**
 * serializeAws_ec2VpnGatewayIdStringList
 */
const se_VpnGatewayIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`VpnGatewayId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2VpnTunnelLogOptionsSpecification
 */
const se_VpnTunnelLogOptionsSpecification = (input: VpnTunnelLogOptionsSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_CWLO] != null) {
    const memberEntries = se_CloudWatchLogOptionsSpecification(input[_CWLO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `CloudWatchLogOptions.${key}`;
      entries[loc] = value;
    });
  }
  return entries;
};

/**
 * serializeAws_ec2VpnTunnelOptionsSpecification
 */
const se_VpnTunnelOptionsSpecification = (input: VpnTunnelOptionsSpecification, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_TIC] != null) {
    entries[_TIC] = input[_TIC];
  }
  if (input[_TIIC] != null) {
    entries[_TIIC] = input[_TIIC];
  }
  if (input[_PSK] != null) {
    entries[_PSK] = input[_PSK];
  }
  if (input[_PLS] != null) {
    entries[_PLS] = input[_PLS];
  }
  if (input[_PLSh] != null) {
    entries[_PLSh] = input[_PLSh];
  }
  if (input[_RMTS] != null) {
    entries[_RMTS] = input[_RMTS];
  }
  if (input[_RFP] != null) {
    entries[_RFP] = input[_RFP];
  }
  if (input[_RWS] != null) {
    entries[_RWS] = input[_RWS];
  }
  if (input[_DPDTS] != null) {
    entries[_DPDTS] = input[_DPDTS];
  }
  if (input[_DPDTA] != null) {
    entries[_DPDTA] = input[_DPDTA];
  }
  if (input[_PEA] != null) {
    const memberEntries = se_Phase1EncryptionAlgorithmsRequestList(input[_PEA], context);
    if (input[_PEA]?.length === 0) {
      entries.Phase1EncryptionAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PEAh] != null) {
    const memberEntries = se_Phase2EncryptionAlgorithmsRequestList(input[_PEAh], context);
    if (input[_PEAh]?.length === 0) {
      entries.Phase2EncryptionAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIAh] != null) {
    const memberEntries = se_Phase1IntegrityAlgorithmsRequestList(input[_PIAh], context);
    if (input[_PIAh]?.length === 0) {
      entries.Phase1IntegrityAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PIAha] != null) {
    const memberEntries = se_Phase2IntegrityAlgorithmsRequestList(input[_PIAha], context);
    if (input[_PIAha]?.length === 0) {
      entries.Phase2IntegrityAlgorithm = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PDHGN] != null) {
    const memberEntries = se_Phase1DHGroupNumbersRequestList(input[_PDHGN], context);
    if (input[_PDHGN]?.length === 0) {
      entries.Phase1DHGroupNumber = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_PDHGNh] != null) {
    const memberEntries = se_Phase2DHGroupNumbersRequestList(input[_PDHGNh], context);
    if (input[_PDHGNh]?.length === 0) {
      entries.Phase2DHGroupNumber = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_IKEVe] != null) {
    const memberEntries = se_IKEVersionsRequestList(input[_IKEVe], context);
    if (input[_IKEVe]?.length === 0) {
      entries.IKEVersion = [];
    }
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
      entries[loc] = value;
    });
  }
  if (input[_SA] != null) {
    entries[_SA] = input[_SA];
  }
  if (input[_LO] != null) {
    const memberEntries = se_VpnTunnelLogOptionsSpecification(input[_LO], context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      const loc = `LogOptions.${key}`;
      entries[loc] = value;
    });
  }
  if (input[_ETLC] != null) {
    entries[_ETLC] = input[_ETLC];
  }
  return entries;
};

/**
 * serializeAws_ec2VpnTunnelOptionsSpecificationsList
 */
const se_VpnTunnelOptionsSpecificationsList = (
  input: VpnTunnelOptionsSpecification[],
  context: __SerdeContext
): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    const memberEntries = se_VpnTunnelOptionsSpecification(entry, context);
    Object.entries(memberEntries).forEach(([key, value]) => {
      entries[`Member.${counter}.${key}`] = value;
    });
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2WithdrawByoipCidrRequest
 */
const se_WithdrawByoipCidrRequest = (input: WithdrawByoipCidrRequest, context: __SerdeContext): any => {
  const entries: any = {};
  if (input[_C] != null) {
    entries[_C] = input[_C];
  }
  if (input[_DRr] != null) {
    entries[_DRr] = input[_DRr];
  }
  return entries;
};

/**
 * serializeAws_ec2ZoneIdStringList
 */
const se_ZoneIdStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ZoneId.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * serializeAws_ec2ZoneNameStringList
 */
const se_ZoneNameStringList = (input: string[], context: __SerdeContext): any => {
  const entries: any = {};
  let counter = 1;
  for (const entry of input) {
    if (entry === null) {
      continue;
    }
    entries[`ZoneName.${counter}`] = entry;
    counter++;
  }
  return entries;
};

/**
 * deserializeAws_ec2AcceleratorCount
 */
const de_AcceleratorCount = (output: any, context: __SerdeContext): AcceleratorCount => {
  const contents: any = {};
  if (output[_m] != null) {
    contents[_M] = __strictParseInt32(output[_m]) as number;
  }
  if (output[_ma] != null) {
    contents[_Ma] = __strictParseInt32(output[_ma]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceleratorManufacturerSet
 */
const de_AcceleratorManufacturerSet = (output: any, context: __SerdeContext): AcceleratorManufacturer[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2AcceleratorNameSet
 */
const de_AcceleratorNameSet = (output: any, context: __SerdeContext): AcceleratorName[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2AcceleratorTotalMemoryMiB
 */
const de_AcceleratorTotalMemoryMiB = (output: any, context: __SerdeContext): AcceleratorTotalMemoryMiB => {
  const contents: any = {};
  if (output[_m] != null) {
    contents[_M] = __strictParseInt32(output[_m]) as number;
  }
  if (output[_ma] != null) {
    contents[_Ma] = __strictParseInt32(output[_ma]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceleratorTypeSet
 */
const de_AcceleratorTypeSet = (output: any, context: __SerdeContext): AcceleratorType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2AcceptAddressTransferResult
 */
const de_AcceptAddressTransferResult = (output: any, context: __SerdeContext): AcceptAddressTransferResult => {
  const contents: any = {};
  if (output[_aT] != null) {
    contents[_ATdd] = de_AddressTransfer(output[_aT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceptReservedInstancesExchangeQuoteResult
 */
const de_AcceptReservedInstancesExchangeQuoteResult = (
  output: any,
  context: __SerdeContext
): AcceptReservedInstancesExchangeQuoteResult => {
  const contents: any = {};
  if (output[_eI] != null) {
    contents[_EIxc] = __expectString(output[_eI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceptTransitGatewayMulticastDomainAssociationsResult
 */
const de_AcceptTransitGatewayMulticastDomainAssociationsResult = (
  output: any,
  context: __SerdeContext
): AcceptTransitGatewayMulticastDomainAssociationsResult => {
  const contents: any = {};
  if (output[_a] != null) {
    contents[_Ass] = de_TransitGatewayMulticastDomainAssociations(output[_a], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceptTransitGatewayPeeringAttachmentResult
 */
const de_AcceptTransitGatewayPeeringAttachmentResult = (
  output: any,
  context: __SerdeContext
): AcceptTransitGatewayPeeringAttachmentResult => {
  const contents: any = {};
  if (output[_tGPA] != null) {
    contents[_TGPA] = de_TransitGatewayPeeringAttachment(output[_tGPA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceptTransitGatewayVpcAttachmentResult
 */
const de_AcceptTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): AcceptTransitGatewayVpcAttachmentResult => {
  const contents: any = {};
  if (output[_tGVA] != null) {
    contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceptVpcEndpointConnectionsResult
 */
const de_AcceptVpcEndpointConnectionsResult = (
  output: any,
  context: __SerdeContext
): AcceptVpcEndpointConnectionsResult => {
  const contents: any = {};
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AcceptVpcPeeringConnectionResult
 */
const de_AcceptVpcPeeringConnectionResult = (
  output: any,
  context: __SerdeContext
): AcceptVpcPeeringConnectionResult => {
  const contents: any = {};
  if (output[_vPC] != null) {
    contents[_VPC] = de_VpcPeeringConnection(output[_vPC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AccessScopeAnalysisFinding
 */
const de_AccessScopeAnalysisFinding = (output: any, context: __SerdeContext): AccessScopeAnalysisFinding => {
  const contents: any = {};
  if (output[_nIASAI] != null) {
    contents[_NIASAI] = __expectString(output[_nIASAI]);
  }
  if (output[_nIASI] != null) {
    contents[_NIASI] = __expectString(output[_nIASI]);
  }
  if (output[_fI] != null) {
    contents[_FIi] = __expectString(output[_fI]);
  }
  if (output.findingComponentSet === "") {
    contents[_FCi] = [];
  } else if (output[_fCS] != null && output[_fCS][_i] != null) {
    contents[_FCi] = de_PathComponentList(__getArrayIfSingleItem(output[_fCS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AccessScopeAnalysisFindingList
 */
const de_AccessScopeAnalysisFindingList = (output: any, context: __SerdeContext): AccessScopeAnalysisFinding[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AccessScopeAnalysisFinding(entry, context);
    });
};

/**
 * deserializeAws_ec2AccessScopePath
 */
const de_AccessScopePath = (output: any, context: __SerdeContext): AccessScopePath => {
  const contents: any = {};
  if (output[_s] != null) {
    contents[_S] = de_PathStatement(output[_s], context);
  }
  if (output[_d] != null) {
    contents[_D] = de_PathStatement(output[_d], context);
  }
  if (output.throughResourceSet === "") {
    contents[_TR] = [];
  } else if (output[_tRS] != null && output[_tRS][_i] != null) {
    contents[_TR] = de_ThroughResourcesStatementList(__getArrayIfSingleItem(output[_tRS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AccessScopePathList
 */
const de_AccessScopePathList = (output: any, context: __SerdeContext): AccessScopePath[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AccessScopePath(entry, context);
    });
};

/**
 * deserializeAws_ec2AccountAttribute
 */
const de_AccountAttribute = (output: any, context: __SerdeContext): AccountAttribute => {
  const contents: any = {};
  if (output[_aN] != null) {
    contents[_ANt] = __expectString(output[_aN]);
  }
  if (output.attributeValueSet === "") {
    contents[_AVt] = [];
  } else if (output[_aVS] != null && output[_aVS][_i] != null) {
    contents[_AVt] = de_AccountAttributeValueList(__getArrayIfSingleItem(output[_aVS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AccountAttributeList
 */
const de_AccountAttributeList = (output: any, context: __SerdeContext): AccountAttribute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AccountAttribute(entry, context);
    });
};

/**
 * deserializeAws_ec2AccountAttributeValue
 */
const de_AccountAttributeValue = (output: any, context: __SerdeContext): AccountAttributeValue => {
  const contents: any = {};
  if (output[_aV] != null) {
    contents[_AVtt] = __expectString(output[_aV]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AccountAttributeValueList
 */
const de_AccountAttributeValueList = (output: any, context: __SerdeContext): AccountAttributeValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AccountAttributeValue(entry, context);
    });
};

/**
 * deserializeAws_ec2ActiveInstance
 */
const de_ActiveInstance = (output: any, context: __SerdeContext): ActiveInstance => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_sIRI] != null) {
    contents[_SIRIp] = __expectString(output[_sIRI]);
  }
  if (output[_iH] != null) {
    contents[_IH] = __expectString(output[_iH]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ActiveInstanceSet
 */
const de_ActiveInstanceSet = (output: any, context: __SerdeContext): ActiveInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ActiveInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2AddedPrincipal
 */
const de_AddedPrincipal = (output: any, context: __SerdeContext): AddedPrincipal => {
  const contents: any = {};
  if (output[_pT] != null) {
    contents[_PTr] = __expectString(output[_pT]);
  }
  if (output[_p] != null) {
    contents[_Prin] = __expectString(output[_p]);
  }
  if (output[_sPI] != null) {
    contents[_SPI] = __expectString(output[_sPI]);
  }
  if (output[_sI] != null) {
    contents[_SIe] = __expectString(output[_sI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AddedPrincipalSet
 */
const de_AddedPrincipalSet = (output: any, context: __SerdeContext): AddedPrincipal[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AddedPrincipal(entry, context);
    });
};

/**
 * deserializeAws_ec2AdditionalDetail
 */
const de_AdditionalDetail = (output: any, context: __SerdeContext): AdditionalDetail => {
  const contents: any = {};
  if (output[_aDT] != null) {
    contents[_ADT] = __expectString(output[_aDT]);
  }
  if (output[_c] != null) {
    contents[_Com] = de_AnalysisComponent(output[_c], context);
  }
  if (output[_vES] != null) {
    contents[_VESp] = de_AnalysisComponent(output[_vES], context);
  }
  if (output.ruleOptionSet === "") {
    contents[_ROu] = [];
  } else if (output[_rOS] != null && output[_rOS][_i] != null) {
    contents[_ROu] = de_RuleOptionList(__getArrayIfSingleItem(output[_rOS][_i]), context);
  }
  if (output.ruleGroupTypePairSet === "") {
    contents[_RGTP] = [];
  } else if (output[_rGTPS] != null && output[_rGTPS][_i] != null) {
    contents[_RGTP] = de_RuleGroupTypePairList(__getArrayIfSingleItem(output[_rGTPS][_i]), context);
  }
  if (output.ruleGroupRuleOptionsPairSet === "") {
    contents[_RGROP] = [];
  } else if (output[_rGROPS] != null && output[_rGROPS][_i] != null) {
    contents[_RGROP] = de_RuleGroupRuleOptionsPairList(__getArrayIfSingleItem(output[_rGROPS][_i]), context);
  }
  if (output[_sN] != null) {
    contents[_SNe] = __expectString(output[_sN]);
  }
  if (output.loadBalancerSet === "") {
    contents[_LB] = [];
  } else if (output[_lBS] != null && output[_lBS][_i] != null) {
    contents[_LB] = de_AnalysisComponentList(__getArrayIfSingleItem(output[_lBS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AdditionalDetailList
 */
const de_AdditionalDetailList = (output: any, context: __SerdeContext): AdditionalDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AdditionalDetail(entry, context);
    });
};

/**
 * deserializeAws_ec2Address
 */
const de_Address = (output: any, context: __SerdeContext): Address => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_pI] != null) {
    contents[_PI] = __expectString(output[_pI]);
  }
  if (output[_aI] != null) {
    contents[_AIl] = __expectString(output[_aI]);
  }
  if (output[_aIs] != null) {
    contents[_AIss] = __expectString(output[_aIs]);
  }
  if (output[_do] != null) {
    contents[_Do] = __expectString(output[_do]);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_nIOI] != null) {
    contents[_NIOI] = __expectString(output[_nIOI]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = __expectString(output[_pIA]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_pIP] != null) {
    contents[_PIP] = __expectString(output[_pIP]);
  }
  if (output[_nBG] != null) {
    contents[_NBG] = __expectString(output[_nBG]);
  }
  if (output[_cOI] != null) {
    contents[_COI] = __expectString(output[_cOI]);
  }
  if (output[_cOIP] != null) {
    contents[_COIP] = __expectString(output[_cOIP]);
  }
  if (output[_cI] != null) {
    contents[_CIa] = __expectString(output[_cI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AddressAttribute
 */
const de_AddressAttribute = (output: any, context: __SerdeContext): AddressAttribute => {
  const contents: any = {};
  if (output[_pI] != null) {
    contents[_PI] = __expectString(output[_pI]);
  }
  if (output[_aI] != null) {
    contents[_AIl] = __expectString(output[_aI]);
  }
  if (output[_pR] != null) {
    contents[_PRt] = __expectString(output[_pR]);
  }
  if (output[_pRU] != null) {
    contents[_PRU] = de_PtrUpdateStatus(output[_pRU], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AddressList
 */
const de_AddressList = (output: any, context: __SerdeContext): Address[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Address(entry, context);
    });
};

/**
 * deserializeAws_ec2AddressSet
 */
const de_AddressSet = (output: any, context: __SerdeContext): AddressAttribute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AddressAttribute(entry, context);
    });
};

/**
 * deserializeAws_ec2AddressTransfer
 */
const de_AddressTransfer = (output: any, context: __SerdeContext): AddressTransfer => {
  const contents: any = {};
  if (output[_pI] != null) {
    contents[_PI] = __expectString(output[_pI]);
  }
  if (output[_aI] != null) {
    contents[_AIl] = __expectString(output[_aI]);
  }
  if (output[_tAI] != null) {
    contents[_TAI] = __expectString(output[_tAI]);
  }
  if (output[_tOET] != null) {
    contents[_TOET] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_tOET]));
  }
  if (output[_tOAT] != null) {
    contents[_TOAT] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_tOAT]));
  }
  if (output[_aTS] != null) {
    contents[_ATS] = __expectString(output[_aTS]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AddressTransferList
 */
const de_AddressTransferList = (output: any, context: __SerdeContext): AddressTransfer[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AddressTransfer(entry, context);
    });
};

/**
 * deserializeAws_ec2AdvertiseByoipCidrResult
 */
const de_AdvertiseByoipCidrResult = (output: any, context: __SerdeContext): AdvertiseByoipCidrResult => {
  const contents: any = {};
  if (output[_bC] != null) {
    contents[_BC] = de_ByoipCidr(output[_bC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AllocateAddressResult
 */
const de_AllocateAddressResult = (output: any, context: __SerdeContext): AllocateAddressResult => {
  const contents: any = {};
  if (output[_pI] != null) {
    contents[_PI] = __expectString(output[_pI]);
  }
  if (output[_aI] != null) {
    contents[_AIl] = __expectString(output[_aI]);
  }
  if (output[_pIP] != null) {
    contents[_PIP] = __expectString(output[_pIP]);
  }
  if (output[_nBG] != null) {
    contents[_NBG] = __expectString(output[_nBG]);
  }
  if (output[_do] != null) {
    contents[_Do] = __expectString(output[_do]);
  }
  if (output[_cOI] != null) {
    contents[_COI] = __expectString(output[_cOI]);
  }
  if (output[_cOIP] != null) {
    contents[_COIP] = __expectString(output[_cOIP]);
  }
  if (output[_cI] != null) {
    contents[_CIa] = __expectString(output[_cI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AllocateHostsResult
 */
const de_AllocateHostsResult = (output: any, context: __SerdeContext): AllocateHostsResult => {
  const contents: any = {};
  if (output.hostIdSet === "") {
    contents[_HI] = [];
  } else if (output[_hIS] != null && output[_hIS][_i] != null) {
    contents[_HI] = de_ResponseHostIdList(__getArrayIfSingleItem(output[_hIS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AllocateIpamPoolCidrResult
 */
const de_AllocateIpamPoolCidrResult = (output: any, context: __SerdeContext): AllocateIpamPoolCidrResult => {
  const contents: any = {};
  if (output[_iPA] != null) {
    contents[_IPA] = de_IpamPoolAllocation(output[_iPA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AllowedInstanceTypeSet
 */
const de_AllowedInstanceTypeSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2AllowedPrincipal
 */
const de_AllowedPrincipal = (output: any, context: __SerdeContext): AllowedPrincipal => {
  const contents: any = {};
  if (output[_pT] != null) {
    contents[_PTr] = __expectString(output[_pT]);
  }
  if (output[_p] != null) {
    contents[_Prin] = __expectString(output[_p]);
  }
  if (output[_sPI] != null) {
    contents[_SPI] = __expectString(output[_sPI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sI] != null) {
    contents[_SIe] = __expectString(output[_sI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AllowedPrincipalSet
 */
const de_AllowedPrincipalSet = (output: any, context: __SerdeContext): AllowedPrincipal[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AllowedPrincipal(entry, context);
    });
};

/**
 * deserializeAws_ec2AlternatePathHint
 */
const de_AlternatePathHint = (output: any, context: __SerdeContext): AlternatePathHint => {
  const contents: any = {};
  if (output[_cIo] != null) {
    contents[_CIom] = __expectString(output[_cIo]);
  }
  if (output[_cA] != null) {
    contents[_CAo] = __expectString(output[_cA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AlternatePathHintList
 */
const de_AlternatePathHintList = (output: any, context: __SerdeContext): AlternatePathHint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AlternatePathHint(entry, context);
    });
};

/**
 * deserializeAws_ec2AnalysisAclRule
 */
const de_AnalysisAclRule = (output: any, context: __SerdeContext): AnalysisAclRule => {
  const contents: any = {};
  if (output[_ci] != null) {
    contents[_C] = __expectString(output[_ci]);
  }
  if (output[_e] != null) {
    contents[_Eg] = __parseBoolean(output[_e]);
  }
  if (output[_pRo] != null) {
    contents[_PR] = de_PortRange(output[_pRo], context);
  }
  if (output[_pr] != null) {
    contents[_P] = __expectString(output[_pr]);
  }
  if (output[_rA] != null) {
    contents[_RAu] = __expectString(output[_rA]);
  }
  if (output[_rN] != null) {
    contents[_RNu] = __strictParseInt32(output[_rN]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AnalysisComponent
 */
const de_AnalysisComponent = (output: any, context: __SerdeContext): AnalysisComponent => {
  const contents: any = {};
  if (output[_id] != null) {
    contents[_Id] = __expectString(output[_id]);
  }
  if (output[_ar] != null) {
    contents[_Ar] = __expectString(output[_ar]);
  }
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AnalysisComponentList
 */
const de_AnalysisComponentList = (output: any, context: __SerdeContext): AnalysisComponent[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AnalysisComponent(entry, context);
    });
};

/**
 * deserializeAws_ec2AnalysisLoadBalancerListener
 */
const de_AnalysisLoadBalancerListener = (output: any, context: __SerdeContext): AnalysisLoadBalancerListener => {
  const contents: any = {};
  if (output[_lBP] != null) {
    contents[_LBP] = __strictParseInt32(output[_lBP]) as number;
  }
  if (output[_iP] != null) {
    contents[_IPns] = __strictParseInt32(output[_iP]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AnalysisLoadBalancerTarget
 */
const de_AnalysisLoadBalancerTarget = (output: any, context: __SerdeContext): AnalysisLoadBalancerTarget => {
  const contents: any = {};
  if (output[_ad] != null) {
    contents[_Ad] = __expectString(output[_ad]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_in] != null) {
    contents[_Ins] = de_AnalysisComponent(output[_in], context);
  }
  if (output[_po] != null) {
    contents[_Po] = __strictParseInt32(output[_po]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AnalysisPacketHeader
 */
const de_AnalysisPacketHeader = (output: any, context: __SerdeContext): AnalysisPacketHeader => {
  const contents: any = {};
  if (output.destinationAddressSet === "") {
    contents[_DAes] = [];
  } else if (output[_dAS] != null && output[_dAS][_i] != null) {
    contents[_DAes] = de_IpAddressList(__getArrayIfSingleItem(output[_dAS][_i]), context);
  }
  if (output.destinationPortRangeSet === "") {
    contents[_DPRe] = [];
  } else if (output[_dPRS] != null && output[_dPRS][_i] != null) {
    contents[_DPRe] = de_PortRangeList(__getArrayIfSingleItem(output[_dPRS][_i]), context);
  }
  if (output[_pr] != null) {
    contents[_P] = __expectString(output[_pr]);
  }
  if (output.sourceAddressSet === "") {
    contents[_SAo] = [];
  } else if (output[_sAS] != null && output[_sAS][_i] != null) {
    contents[_SAo] = de_IpAddressList(__getArrayIfSingleItem(output[_sAS][_i]), context);
  }
  if (output.sourcePortRangeSet === "") {
    contents[_SPRo] = [];
  } else if (output[_sPRS] != null && output[_sPRS][_i] != null) {
    contents[_SPRo] = de_PortRangeList(__getArrayIfSingleItem(output[_sPRS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AnalysisRouteTableRoute
 */
const de_AnalysisRouteTableRoute = (output: any, context: __SerdeContext): AnalysisRouteTableRoute => {
  const contents: any = {};
  if (output[_dC] != null) {
    contents[_DCe] = __expectString(output[_dC]);
  }
  if (output[_dPLI] != null) {
    contents[_DPLI] = __expectString(output[_dPLI]);
  }
  if (output[_eOIGI] != null) {
    contents[_EOIGI] = __expectString(output[_eOIGI]);
  }
  if (output[_gI] != null) {
    contents[_GI] = __expectString(output[_gI]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_nGI] != null) {
    contents[_NGI] = __expectString(output[_nGI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_o] != null) {
    contents[_Or] = __expectString(output[_o]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  if (output[_vPCI] != null) {
    contents[_VPCI] = __expectString(output[_vPCI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_cGI] != null) {
    contents[_CGI] = __expectString(output[_cGI]);
  }
  if (output[_cNA] != null) {
    contents[_CNAo] = __expectString(output[_cNA]);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = __expectString(output[_lGI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AnalysisSecurityGroupRule
 */
const de_AnalysisSecurityGroupRule = (output: any, context: __SerdeContext): AnalysisSecurityGroupRule => {
  const contents: any = {};
  if (output[_ci] != null) {
    contents[_C] = __expectString(output[_ci]);
  }
  if (output[_di] != null) {
    contents[_Di] = __expectString(output[_di]);
  }
  if (output[_sGI] != null) {
    contents[_SGIe] = __expectString(output[_sGI]);
  }
  if (output[_pRo] != null) {
    contents[_PR] = de_PortRange(output[_pRo], context);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = __expectString(output[_pLI]);
  }
  if (output[_pr] != null) {
    contents[_P] = __expectString(output[_pr]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ApplySecurityGroupsToClientVpnTargetNetworkResult
 */
const de_ApplySecurityGroupsToClientVpnTargetNetworkResult = (
  output: any,
  context: __SerdeContext
): ApplySecurityGroupsToClientVpnTargetNetworkResult => {
  const contents: any = {};
  if (output.securityGroupIds === "") {
    contents[_SGI] = [];
  } else if (output[_sGIe] != null && output[_sGIe][_i] != null) {
    contents[_SGI] = de_ClientVpnSecurityGroupIdSet(__getArrayIfSingleItem(output[_sGIe][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ArchitectureTypeList
 */
const de_ArchitectureTypeList = (output: any, context: __SerdeContext): ArchitectureType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2ArnList
 */
const de_ArnList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2AsnAssociation
 */
const de_AsnAssociation = (output: any, context: __SerdeContext): AsnAssociation => {
  const contents: any = {};
  if (output[_as] != null) {
    contents[_As] = __expectString(output[_as]);
  }
  if (output[_ci] != null) {
    contents[_C] = __expectString(output[_ci]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AsnAssociationSet
 */
const de_AsnAssociationSet = (output: any, context: __SerdeContext): AsnAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AsnAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2AssignedPrivateIpAddress
 */
const de_AssignedPrivateIpAddress = (output: any, context: __SerdeContext): AssignedPrivateIpAddress => {
  const contents: any = {};
  if (output[_pIA] != null) {
    contents[_PIAr] = __expectString(output[_pIA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssignedPrivateIpAddressList
 */
const de_AssignedPrivateIpAddressList = (output: any, context: __SerdeContext): AssignedPrivateIpAddress[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AssignedPrivateIpAddress(entry, context);
    });
};

/**
 * deserializeAws_ec2AssignIpv6AddressesResult
 */
const de_AssignIpv6AddressesResult = (output: any, context: __SerdeContext): AssignIpv6AddressesResult => {
  const contents: any = {};
  if (output.assignedIpv6Addresses === "") {
    contents[_AIAs] = [];
  } else if (output[_aIA] != null && output[_aIA][_i] != null) {
    contents[_AIAs] = de_Ipv6AddressList(__getArrayIfSingleItem(output[_aIA][_i]), context);
  }
  if (output.assignedIpv6PrefixSet === "") {
    contents[_AIP] = [];
  } else if (output[_aIPS] != null && output[_aIPS][_i] != null) {
    contents[_AIP] = de_IpPrefixList(__getArrayIfSingleItem(output[_aIPS][_i]), context);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssignPrivateIpAddressesResult
 */
const de_AssignPrivateIpAddressesResult = (output: any, context: __SerdeContext): AssignPrivateIpAddressesResult => {
  const contents: any = {};
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output.assignedPrivateIpAddressesSet === "") {
    contents[_APIAss] = [];
  } else if (output[_aPIAS] != null && output[_aPIAS][_i] != null) {
    contents[_APIAss] = de_AssignedPrivateIpAddressList(__getArrayIfSingleItem(output[_aPIAS][_i]), context);
  }
  if (output.assignedIpv4PrefixSet === "") {
    contents[_AIPs] = [];
  } else if (output[_aIPSs] != null && output[_aIPSs][_i] != null) {
    contents[_AIPs] = de_Ipv4PrefixesList(__getArrayIfSingleItem(output[_aIPSs][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssignPrivateNatGatewayAddressResult
 */
const de_AssignPrivateNatGatewayAddressResult = (
  output: any,
  context: __SerdeContext
): AssignPrivateNatGatewayAddressResult => {
  const contents: any = {};
  if (output[_nGI] != null) {
    contents[_NGI] = __expectString(output[_nGI]);
  }
  if (output.natGatewayAddressSet === "") {
    contents[_NGA] = [];
  } else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
    contents[_NGA] = de_NatGatewayAddressList(__getArrayIfSingleItem(output[_nGAS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateAddressResult
 */
const de_AssociateAddressResult = (output: any, context: __SerdeContext): AssociateAddressResult => {
  const contents: any = {};
  if (output[_aIs] != null) {
    contents[_AIss] = __expectString(output[_aIs]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateClientVpnTargetNetworkResult
 */
const de_AssociateClientVpnTargetNetworkResult = (
  output: any,
  context: __SerdeContext
): AssociateClientVpnTargetNetworkResult => {
  const contents: any = {};
  if (output[_aIs] != null) {
    contents[_AIss] = __expectString(output[_aIs]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_AssociationStatus(output[_sta], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociatedRole
 */
const de_AssociatedRole = (output: any, context: __SerdeContext): AssociatedRole => {
  const contents: any = {};
  if (output[_aRA] != null) {
    contents[_ARA] = __expectString(output[_aRA]);
  }
  if (output[_cSBN] != null) {
    contents[_CSBN] = __expectString(output[_cSBN]);
  }
  if (output[_cSOK] != null) {
    contents[_CSOK] = __expectString(output[_cSOK]);
  }
  if (output[_eKKI] != null) {
    contents[_EKKI] = __expectString(output[_eKKI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociatedRolesList
 */
const de_AssociatedRolesList = (output: any, context: __SerdeContext): AssociatedRole[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AssociatedRole(entry, context);
    });
};

/**
 * deserializeAws_ec2AssociatedTargetNetwork
 */
const de_AssociatedTargetNetwork = (output: any, context: __SerdeContext): AssociatedTargetNetwork => {
  const contents: any = {};
  if (output[_nI] != null) {
    contents[_NIe] = __expectString(output[_nI]);
  }
  if (output[_nT] != null) {
    contents[_NTe] = __expectString(output[_nT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociatedTargetNetworkSet
 */
const de_AssociatedTargetNetworkSet = (output: any, context: __SerdeContext): AssociatedTargetNetwork[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AssociatedTargetNetwork(entry, context);
    });
};

/**
 * deserializeAws_ec2AssociateEnclaveCertificateIamRoleResult
 */
const de_AssociateEnclaveCertificateIamRoleResult = (
  output: any,
  context: __SerdeContext
): AssociateEnclaveCertificateIamRoleResult => {
  const contents: any = {};
  if (output[_cSBN] != null) {
    contents[_CSBN] = __expectString(output[_cSBN]);
  }
  if (output[_cSOK] != null) {
    contents[_CSOK] = __expectString(output[_cSOK]);
  }
  if (output[_eKKI] != null) {
    contents[_EKKI] = __expectString(output[_eKKI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateIamInstanceProfileResult
 */
const de_AssociateIamInstanceProfileResult = (
  output: any,
  context: __SerdeContext
): AssociateIamInstanceProfileResult => {
  const contents: any = {};
  if (output[_iIPA] != null) {
    contents[_IIPA] = de_IamInstanceProfileAssociation(output[_iIPA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateInstanceEventWindowResult
 */
const de_AssociateInstanceEventWindowResult = (
  output: any,
  context: __SerdeContext
): AssociateInstanceEventWindowResult => {
  const contents: any = {};
  if (output[_iEW] != null) {
    contents[_IEW] = de_InstanceEventWindow(output[_iEW], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateIpamByoasnResult
 */
const de_AssociateIpamByoasnResult = (output: any, context: __SerdeContext): AssociateIpamByoasnResult => {
  const contents: any = {};
  if (output[_aA] != null) {
    contents[_AAsn] = de_AsnAssociation(output[_aA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateIpamResourceDiscoveryResult
 */
const de_AssociateIpamResourceDiscoveryResult = (
  output: any,
  context: __SerdeContext
): AssociateIpamResourceDiscoveryResult => {
  const contents: any = {};
  if (output[_iRDA] != null) {
    contents[_IRDA] = de_IpamResourceDiscoveryAssociation(output[_iRDA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateNatGatewayAddressResult
 */
const de_AssociateNatGatewayAddressResult = (
  output: any,
  context: __SerdeContext
): AssociateNatGatewayAddressResult => {
  const contents: any = {};
  if (output[_nGI] != null) {
    contents[_NGI] = __expectString(output[_nGI]);
  }
  if (output.natGatewayAddressSet === "") {
    contents[_NGA] = [];
  } else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
    contents[_NGA] = de_NatGatewayAddressList(__getArrayIfSingleItem(output[_nGAS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateRouteTableResult
 */
const de_AssociateRouteTableResult = (output: any, context: __SerdeContext): AssociateRouteTableResult => {
  const contents: any = {};
  if (output[_aIs] != null) {
    contents[_AIss] = __expectString(output[_aIs]);
  }
  if (output[_aS] != null) {
    contents[_ASs] = de_RouteTableAssociationState(output[_aS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateSubnetCidrBlockResult
 */
const de_AssociateSubnetCidrBlockResult = (output: any, context: __SerdeContext): AssociateSubnetCidrBlockResult => {
  const contents: any = {};
  if (output[_iCBA] != null) {
    contents[_ICBA] = de_SubnetIpv6CidrBlockAssociation(output[_iCBA], context);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateTransitGatewayMulticastDomainResult
 */
const de_AssociateTransitGatewayMulticastDomainResult = (
  output: any,
  context: __SerdeContext
): AssociateTransitGatewayMulticastDomainResult => {
  const contents: any = {};
  if (output[_a] != null) {
    contents[_Ass] = de_TransitGatewayMulticastDomainAssociations(output[_a], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateTransitGatewayPolicyTableResult
 */
const de_AssociateTransitGatewayPolicyTableResult = (
  output: any,
  context: __SerdeContext
): AssociateTransitGatewayPolicyTableResult => {
  const contents: any = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_TransitGatewayPolicyTableAssociation(output[_ass], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateTransitGatewayRouteTableResult
 */
const de_AssociateTransitGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): AssociateTransitGatewayRouteTableResult => {
  const contents: any = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_TransitGatewayAssociation(output[_ass], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateTrunkInterfaceResult
 */
const de_AssociateTrunkInterfaceResult = (output: any, context: __SerdeContext): AssociateTrunkInterfaceResult => {
  const contents: any = {};
  if (output[_iA] != null) {
    contents[_IAn] = de_TrunkInterfaceAssociation(output[_iA], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociateVpcCidrBlockResult
 */
const de_AssociateVpcCidrBlockResult = (output: any, context: __SerdeContext): AssociateVpcCidrBlockResult => {
  const contents: any = {};
  if (output[_iCBA] != null) {
    contents[_ICBA] = de_VpcIpv6CidrBlockAssociation(output[_iCBA], context);
  }
  if (output[_cBA] != null) {
    contents[_CBA] = de_VpcCidrBlockAssociation(output[_cBA], context);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AssociationStatus
 */
const de_AssociationStatus = (output: any, context: __SerdeContext): AssociationStatus => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttachClassicLinkVpcResult
 */
const de_AttachClassicLinkVpcResult = (output: any, context: __SerdeContext): AttachClassicLinkVpcResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttachmentEnaSrdSpecification
 */
const de_AttachmentEnaSrdSpecification = (output: any, context: __SerdeContext): AttachmentEnaSrdSpecification => {
  const contents: any = {};
  if (output[_eSE] != null) {
    contents[_ESE] = __parseBoolean(output[_eSE]);
  }
  if (output[_eSUS] != null) {
    contents[_ESUS] = de_AttachmentEnaSrdUdpSpecification(output[_eSUS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttachmentEnaSrdUdpSpecification
 */
const de_AttachmentEnaSrdUdpSpecification = (
  output: any,
  context: __SerdeContext
): AttachmentEnaSrdUdpSpecification => {
  const contents: any = {};
  if (output[_eSUE] != null) {
    contents[_ESUE] = __parseBoolean(output[_eSUE]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttachNetworkInterfaceResult
 */
const de_AttachNetworkInterfaceResult = (output: any, context: __SerdeContext): AttachNetworkInterfaceResult => {
  const contents: any = {};
  if (output[_aIt] != null) {
    contents[_AIt] = __expectString(output[_aIt]);
  }
  if (output[_nCI] != null) {
    contents[_NCI] = __strictParseInt32(output[_nCI]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AttachVerifiedAccessTrustProviderResult
 */
const de_AttachVerifiedAccessTrustProviderResult = (
  output: any,
  context: __SerdeContext
): AttachVerifiedAccessTrustProviderResult => {
  const contents: any = {};
  if (output[_vATP] != null) {
    contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP], context);
  }
  if (output[_vAI] != null) {
    contents[_VAI] = de_VerifiedAccessInstance(output[_vAI], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttachVpnGatewayResult
 */
const de_AttachVpnGatewayResult = (output: any, context: __SerdeContext): AttachVpnGatewayResult => {
  const contents: any = {};
  if (output[_at] != null) {
    contents[_VA] = de_VpcAttachment(output[_at], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttributeBooleanValue
 */
const de_AttributeBooleanValue = (output: any, context: __SerdeContext): AttributeBooleanValue => {
  const contents: any = {};
  if (output[_v] != null) {
    contents[_Va] = __parseBoolean(output[_v]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AttributeValue
 */
const de_AttributeValue = (output: any, context: __SerdeContext): AttributeValue => {
  const contents: any = {};
  if (output[_v] != null) {
    contents[_Va] = __expectString(output[_v]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AuthorizationRule
 */
const de_AuthorizationRule = (output: any, context: __SerdeContext): AuthorizationRule => {
  const contents: any = {};
  if (output[_cVEI] != null) {
    contents[_CVEI] = __expectString(output[_cVEI]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  if (output[_aAc] != null) {
    contents[_AAc] = __parseBoolean(output[_aAc]);
  }
  if (output[_dC] != null) {
    contents[_DCe] = __expectString(output[_dC]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnAuthorizationRuleStatus(output[_sta], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AuthorizationRuleSet
 */
const de_AuthorizationRuleSet = (output: any, context: __SerdeContext): AuthorizationRule[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AuthorizationRule(entry, context);
    });
};

/**
 * deserializeAws_ec2AuthorizeClientVpnIngressResult
 */
const de_AuthorizeClientVpnIngressResult = (output: any, context: __SerdeContext): AuthorizeClientVpnIngressResult => {
  const contents: any = {};
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnAuthorizationRuleStatus(output[_sta], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AuthorizeSecurityGroupEgressResult
 */
const de_AuthorizeSecurityGroupEgressResult = (
  output: any,
  context: __SerdeContext
): AuthorizeSecurityGroupEgressResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  if (output.securityGroupRuleSet === "") {
    contents[_SGR] = [];
  } else if (output[_sGRS] != null && output[_sGRS][_i] != null) {
    contents[_SGR] = de_SecurityGroupRuleList(__getArrayIfSingleItem(output[_sGRS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AuthorizeSecurityGroupIngressResult
 */
const de_AuthorizeSecurityGroupIngressResult = (
  output: any,
  context: __SerdeContext
): AuthorizeSecurityGroupIngressResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  if (output.securityGroupRuleSet === "") {
    contents[_SGR] = [];
  } else if (output[_sGRS] != null && output[_sGRS][_i] != null) {
    contents[_SGR] = de_SecurityGroupRuleList(__getArrayIfSingleItem(output[_sGRS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2AvailabilityZone
 */
const de_AvailabilityZone = (output: any, context: __SerdeContext): AvailabilityZone => {
  const contents: any = {};
  if (output[_zS] != null) {
    contents[_Stat] = __expectString(output[_zS]);
  }
  if (output[_oIS] != null) {
    contents[_OIS] = __expectString(output[_oIS]);
  }
  if (output.messageSet === "") {
    contents[_Mes] = [];
  } else if (output[_mS] != null && output[_mS][_i] != null) {
    contents[_Mes] = de_AvailabilityZoneMessageList(__getArrayIfSingleItem(output[_mS][_i]), context);
  }
  if (output[_rNe] != null) {
    contents[_RN] = __expectString(output[_rNe]);
  }
  if (output[_zN] != null) {
    contents[_ZNo] = __expectString(output[_zN]);
  }
  if (output[_zI] != null) {
    contents[_ZIo] = __expectString(output[_zI]);
  }
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  if (output[_nBG] != null) {
    contents[_NBG] = __expectString(output[_nBG]);
  }
  if (output[_zT] != null) {
    contents[_ZT] = __expectString(output[_zT]);
  }
  if (output[_pZN] != null) {
    contents[_PZN] = __expectString(output[_pZN]);
  }
  if (output[_pZI] != null) {
    contents[_PZI] = __expectString(output[_pZI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AvailabilityZoneList
 */
const de_AvailabilityZoneList = (output: any, context: __SerdeContext): AvailabilityZone[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AvailabilityZone(entry, context);
    });
};

/**
 * deserializeAws_ec2AvailabilityZoneMessage
 */
const de_AvailabilityZoneMessage = (output: any, context: __SerdeContext): AvailabilityZoneMessage => {
  const contents: any = {};
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2AvailabilityZoneMessageList
 */
const de_AvailabilityZoneMessageList = (output: any, context: __SerdeContext): AvailabilityZoneMessage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AvailabilityZoneMessage(entry, context);
    });
};

/**
 * deserializeAws_ec2AvailableCapacity
 */
const de_AvailableCapacity = (output: any, context: __SerdeContext): AvailableCapacity => {
  const contents: any = {};
  if (output.availableInstanceCapacity === "") {
    contents[_AIC] = [];
  } else if (output[_aIC] != null && output[_aIC][_i] != null) {
    contents[_AIC] = de_AvailableInstanceCapacityList(__getArrayIfSingleItem(output[_aIC][_i]), context);
  }
  if (output[_aVC] != null) {
    contents[_AVC] = __strictParseInt32(output[_aVC]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2AvailableInstanceCapacityList
 */
const de_AvailableInstanceCapacityList = (output: any, context: __SerdeContext): InstanceCapacity[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceCapacity(entry, context);
    });
};

/**
 * deserializeAws_ec2BaselineEbsBandwidthMbps
 */
const de_BaselineEbsBandwidthMbps = (output: any, context: __SerdeContext): BaselineEbsBandwidthMbps => {
  const contents: any = {};
  if (output[_m] != null) {
    contents[_M] = __strictParseInt32(output[_m]) as number;
  }
  if (output[_ma] != null) {
    contents[_Ma] = __strictParseInt32(output[_ma]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2BlockDeviceMapping
 */
const de_BlockDeviceMapping = (output: any, context: __SerdeContext): BlockDeviceMapping => {
  const contents: any = {};
  if (output[_dN] != null) {
    contents[_DN] = __expectString(output[_dN]);
  }
  if (output[_vN] != null) {
    contents[_VN] = __expectString(output[_vN]);
  }
  if (output[_eb] != null) {
    contents[_E] = de_EbsBlockDevice(output[_eb], context);
  }
  if (output[_nD] != null) {
    contents[_ND] = __expectString(output[_nD]);
  }
  return contents;
};

/**
 * deserializeAws_ec2BlockDeviceMappingList
 */
const de_BlockDeviceMappingList = (output: any, context: __SerdeContext): BlockDeviceMapping[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_BlockDeviceMapping(entry, context);
    });
};

/**
 * deserializeAws_ec2BootModeTypeList
 */
const de_BootModeTypeList = (output: any, context: __SerdeContext): BootModeType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2BundleInstanceResult
 */
const de_BundleInstanceResult = (output: any, context: __SerdeContext): BundleInstanceResult => {
  const contents: any = {};
  if (output[_bIT] != null) {
    contents[_BTu] = de_BundleTask(output[_bIT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2BundleTask
 */
const de_BundleTask = (output: any, context: __SerdeContext): BundleTask => {
  const contents: any = {};
  if (output[_bI] != null) {
    contents[_BIu] = __expectString(output[_bI]);
  }
  if (output[_er] != null) {
    contents[_BTE] = de_BundleTaskError(output[_er], context);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = __expectString(output[_pro]);
  }
  if (output[_sT] != null) {
    contents[_STt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sto] != null) {
    contents[_St] = de_Storage(output[_sto], context);
  }
  if (output[_uT] != null) {
    contents[_UTp] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_uT]));
  }
  return contents;
};

/**
 * deserializeAws_ec2BundleTaskError
 */
const de_BundleTaskError = (output: any, context: __SerdeContext): BundleTaskError => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2BundleTaskList
 */
const de_BundleTaskList = (output: any, context: __SerdeContext): BundleTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_BundleTask(entry, context);
    });
};

/**
 * deserializeAws_ec2Byoasn
 */
const de_Byoasn = (output: any, context: __SerdeContext): Byoasn => {
  const contents: any = {};
  if (output[_as] != null) {
    contents[_As] = __expectString(output[_as]);
  }
  if (output[_iIp] != null) {
    contents[_IIp] = __expectString(output[_iIp]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ByoasnSet
 */
const de_ByoasnSet = (output: any, context: __SerdeContext): Byoasn[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Byoasn(entry, context);
    });
};

/**
 * deserializeAws_ec2ByoipCidr
 */
const de_ByoipCidr = (output: any, context: __SerdeContext): ByoipCidr => {
  const contents: any = {};
  if (output[_ci] != null) {
    contents[_C] = __expectString(output[_ci]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.asnAssociationSet === "") {
    contents[_AAsns] = [];
  } else if (output[_aAS] != null && output[_aAS][_i] != null) {
    contents[_AAsns] = de_AsnAssociationSet(__getArrayIfSingleItem(output[_aAS][_i]), context);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ByoipCidrSet
 */
const de_ByoipCidrSet = (output: any, context: __SerdeContext): ByoipCidr[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ByoipCidr(entry, context);
    });
};

/**
 * deserializeAws_ec2CancelBundleTaskResult
 */
const de_CancelBundleTaskResult = (output: any, context: __SerdeContext): CancelBundleTaskResult => {
  const contents: any = {};
  if (output[_bIT] != null) {
    contents[_BTu] = de_BundleTask(output[_bIT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelCapacityReservationFleetError
 */
const de_CancelCapacityReservationFleetError = (
  output: any,
  context: __SerdeContext
): CancelCapacityReservationFleetError => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelCapacityReservationFleetsResult
 */
const de_CancelCapacityReservationFleetsResult = (
  output: any,
  context: __SerdeContext
): CancelCapacityReservationFleetsResult => {
  const contents: any = {};
  if (output.successfulFleetCancellationSet === "") {
    contents[_SFC] = [];
  } else if (output[_sFCS] != null && output[_sFCS][_i] != null) {
    contents[_SFC] = de_CapacityReservationFleetCancellationStateSet(
      __getArrayIfSingleItem(output[_sFCS][_i]),
      context
    );
  }
  if (output.failedFleetCancellationSet === "") {
    contents[_FFC] = [];
  } else if (output[_fFCS] != null && output[_fFCS][_i] != null) {
    contents[_FFC] = de_FailedCapacityReservationFleetCancellationResultSet(
      __getArrayIfSingleItem(output[_fFCS][_i]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelCapacityReservationResult
 */
const de_CancelCapacityReservationResult = (output: any, context: __SerdeContext): CancelCapacityReservationResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelImageLaunchPermissionResult
 */
const de_CancelImageLaunchPermissionResult = (
  output: any,
  context: __SerdeContext
): CancelImageLaunchPermissionResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelImportTaskResult
 */
const de_CancelImportTaskResult = (output: any, context: __SerdeContext): CancelImportTaskResult => {
  const contents: any = {};
  if (output[_iTI] != null) {
    contents[_ITI] = __expectString(output[_iTI]);
  }
  if (output[_pS] != null) {
    contents[_PSr] = __expectString(output[_pS]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelledSpotInstanceRequest
 */
const de_CancelledSpotInstanceRequest = (output: any, context: __SerdeContext): CancelledSpotInstanceRequest => {
  const contents: any = {};
  if (output[_sIRI] != null) {
    contents[_SIRIp] = __expectString(output[_sIRI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelledSpotInstanceRequestList
 */
const de_CancelledSpotInstanceRequestList = (output: any, context: __SerdeContext): CancelledSpotInstanceRequest[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CancelledSpotInstanceRequest(entry, context);
    });
};

/**
 * deserializeAws_ec2CancelReservedInstancesListingResult
 */
const de_CancelReservedInstancesListingResult = (
  output: any,
  context: __SerdeContext
): CancelReservedInstancesListingResult => {
  const contents: any = {};
  if (output.reservedInstancesListingsSet === "") {
    contents[_RIL] = [];
  } else if (output[_rILS] != null && output[_rILS][_i] != null) {
    contents[_RIL] = de_ReservedInstancesListingList(__getArrayIfSingleItem(output[_rILS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsError
 */
const de_CancelSpotFleetRequestsError = (output: any, context: __SerdeContext): CancelSpotFleetRequestsError => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsErrorItem
 */
const de_CancelSpotFleetRequestsErrorItem = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsErrorItem => {
  const contents: any = {};
  if (output[_er] != null) {
    contents[_Er] = de_CancelSpotFleetRequestsError(output[_er], context);
  }
  if (output[_sFRI] != null) {
    contents[_SFRIp] = __expectString(output[_sFRI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsErrorSet
 */
const de_CancelSpotFleetRequestsErrorSet = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CancelSpotFleetRequestsErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsResponse
 */
const de_CancelSpotFleetRequestsResponse = (output: any, context: __SerdeContext): CancelSpotFleetRequestsResponse => {
  const contents: any = {};
  if (output.successfulFleetRequestSet === "") {
    contents[_SFR] = [];
  } else if (output[_sFRS] != null && output[_sFRS][_i] != null) {
    contents[_SFR] = de_CancelSpotFleetRequestsSuccessSet(__getArrayIfSingleItem(output[_sFRS][_i]), context);
  }
  if (output.unsuccessfulFleetRequestSet === "") {
    contents[_UFR] = [];
  } else if (output[_uFRS] != null && output[_uFRS][_i] != null) {
    contents[_UFR] = de_CancelSpotFleetRequestsErrorSet(__getArrayIfSingleItem(output[_uFRS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsSuccessItem
 */
const de_CancelSpotFleetRequestsSuccessItem = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsSuccessItem => {
  const contents: any = {};
  if (output[_cSFRS] != null) {
    contents[_CSFRS] = __expectString(output[_cSFRS]);
  }
  if (output[_pSFRS] != null) {
    contents[_PSFRS] = __expectString(output[_pSFRS]);
  }
  if (output[_sFRI] != null) {
    contents[_SFRIp] = __expectString(output[_sFRI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CancelSpotFleetRequestsSuccessSet
 */
const de_CancelSpotFleetRequestsSuccessSet = (
  output: any,
  context: __SerdeContext
): CancelSpotFleetRequestsSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CancelSpotFleetRequestsSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2CancelSpotInstanceRequestsResult
 */
const de_CancelSpotInstanceRequestsResult = (
  output: any,
  context: __SerdeContext
): CancelSpotInstanceRequestsResult => {
  const contents: any = {};
  if (output.spotInstanceRequestSet === "") {
    contents[_CSIRa] = [];
  } else if (output[_sIRS] != null && output[_sIRS][_i] != null) {
    contents[_CSIRa] = de_CancelledSpotInstanceRequestList(__getArrayIfSingleItem(output[_sIRS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityAllocation
 */
const de_CapacityAllocation = (output: any, context: __SerdeContext): CapacityAllocation => {
  const contents: any = {};
  if (output[_aTl] != null) {
    contents[_ATl] = __expectString(output[_aTl]);
  }
  if (output[_cou] != null) {
    contents[_Cou] = __strictParseInt32(output[_cou]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityAllocations
 */
const de_CapacityAllocations = (output: any, context: __SerdeContext): CapacityAllocation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CapacityAllocation(entry, context);
    });
};

/**
 * deserializeAws_ec2CapacityBlockOffering
 */
const de_CapacityBlockOffering = (output: any, context: __SerdeContext): CapacityBlockOffering => {
  const contents: any = {};
  if (output[_cBOI] != null) {
    contents[_CBOI] = __expectString(output[_cBOI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_iC] != null) {
    contents[_IC] = __strictParseInt32(output[_iC]) as number;
  }
  if (output[_sD] != null) {
    contents[_SDt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sD]));
  }
  if (output[_eD] != null) {
    contents[_ED] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eD]));
  }
  if (output[_cBDH] != null) {
    contents[_CBDH] = __strictParseInt32(output[_cBDH]) as number;
  }
  if (output[_uF] != null) {
    contents[_UF] = __expectString(output[_uF]);
  }
  if (output[_cC] != null) {
    contents[_CCu] = __expectString(output[_cC]);
  }
  if (output[_t] != null) {
    contents[_Te] = __expectString(output[_t]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityBlockOfferingSet
 */
const de_CapacityBlockOfferingSet = (output: any, context: __SerdeContext): CapacityBlockOffering[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CapacityBlockOffering(entry, context);
    });
};

/**
 * deserializeAws_ec2CapacityReservation
 */
const de_CapacityReservation = (output: any, context: __SerdeContext): CapacityReservation => {
  const contents: any = {};
  if (output[_cRI] != null) {
    contents[_CRI] = __expectString(output[_cRI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_cRA] != null) {
    contents[_CRA] = __expectString(output[_cRA]);
  }
  if (output[_aZI] != null) {
    contents[_AZI] = __expectString(output[_aZI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_iPn] != null) {
    contents[_IPn] = __expectString(output[_iPn]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_t] != null) {
    contents[_Te] = __expectString(output[_t]);
  }
  if (output[_tIC] != null) {
    contents[_TICo] = __strictParseInt32(output[_tIC]) as number;
  }
  if (output[_aICv] != null) {
    contents[_AICv] = __strictParseInt32(output[_aICv]) as number;
  }
  if (output[_eO] != null) {
    contents[_EO] = __parseBoolean(output[_eO]);
  }
  if (output[_eS] != null) {
    contents[_ES] = __parseBoolean(output[_eS]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sD] != null) {
    contents[_SDt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sD]));
  }
  if (output[_eD] != null) {
    contents[_ED] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eD]));
  }
  if (output[_eDT] != null) {
    contents[_EDT] = __expectString(output[_eDT]);
  }
  if (output[_iMC] != null) {
    contents[_IMC] = __expectString(output[_iMC]);
  }
  if (output[_cD] != null) {
    contents[_CDr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cD]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output[_cRFI] != null) {
    contents[_CRFIa] = __expectString(output[_cRFI]);
  }
  if (output[_pGA] != null) {
    contents[_PGA] = __expectString(output[_pGA]);
  }
  if (output.capacityAllocationSet === "") {
    contents[_CAa] = [];
  } else if (output[_cAS] != null && output[_cAS][_i] != null) {
    contents[_CAa] = de_CapacityAllocations(__getArrayIfSingleItem(output[_cAS][_i]), context);
  }
  if (output[_rT] != null) {
    contents[_RTe] = __expectString(output[_rT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityReservationFleet
 */
const de_CapacityReservationFleet = (output: any, context: __SerdeContext): CapacityReservationFleet => {
  const contents: any = {};
  if (output[_cRFI] != null) {
    contents[_CRFIa] = __expectString(output[_cRFI]);
  }
  if (output[_cRFA] != null) {
    contents[_CRFA] = __expectString(output[_cRFA]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_tTC] != null) {
    contents[_TTC] = __strictParseInt32(output[_tTC]) as number;
  }
  if (output[_tFC] != null) {
    contents[_TFC] = __strictParseFloat(output[_tFC]) as number;
  }
  if (output[_t] != null) {
    contents[_Te] = __expectString(output[_t]);
  }
  if (output[_eD] != null) {
    contents[_ED] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eD]));
  }
  if (output[_cTr] != null) {
    contents[_CTr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_iMC] != null) {
    contents[_IMC] = __expectString(output[_iMC]);
  }
  if (output[_aSl] != null) {
    contents[_AS] = __expectString(output[_aSl]);
  }
  if (output.instanceTypeSpecificationSet === "") {
    contents[_ITS] = [];
  } else if (output[_iTSS] != null && output[_iTSS][_i] != null) {
    contents[_ITS] = de_FleetCapacityReservationSet(__getArrayIfSingleItem(output[_iTSS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityReservationFleetCancellationState
 */
const de_CapacityReservationFleetCancellationState = (
  output: any,
  context: __SerdeContext
): CapacityReservationFleetCancellationState => {
  const contents: any = {};
  if (output[_cFS] != null) {
    contents[_CFS] = __expectString(output[_cFS]);
  }
  if (output[_pFS] != null) {
    contents[_PFS] = __expectString(output[_pFS]);
  }
  if (output[_cRFI] != null) {
    contents[_CRFIa] = __expectString(output[_cRFI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityReservationFleetCancellationStateSet
 */
const de_CapacityReservationFleetCancellationStateSet = (
  output: any,
  context: __SerdeContext
): CapacityReservationFleetCancellationState[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CapacityReservationFleetCancellationState(entry, context);
    });
};

/**
 * deserializeAws_ec2CapacityReservationFleetSet
 */
const de_CapacityReservationFleetSet = (output: any, context: __SerdeContext): CapacityReservationFleet[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CapacityReservationFleet(entry, context);
    });
};

/**
 * deserializeAws_ec2CapacityReservationGroup
 */
const de_CapacityReservationGroup = (output: any, context: __SerdeContext): CapacityReservationGroup => {
  const contents: any = {};
  if (output[_gA] != null) {
    contents[_GA] = __expectString(output[_gA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityReservationGroupSet
 */
const de_CapacityReservationGroupSet = (output: any, context: __SerdeContext): CapacityReservationGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CapacityReservationGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2CapacityReservationOptions
 */
const de_CapacityReservationOptions = (output: any, context: __SerdeContext): CapacityReservationOptions => {
  const contents: any = {};
  if (output[_uS] != null) {
    contents[_USs] = __expectString(output[_uS]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityReservationSet
 */
const de_CapacityReservationSet = (output: any, context: __SerdeContext): CapacityReservation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CapacityReservation(entry, context);
    });
};

/**
 * deserializeAws_ec2CapacityReservationSpecificationResponse
 */
const de_CapacityReservationSpecificationResponse = (
  output: any,
  context: __SerdeContext
): CapacityReservationSpecificationResponse => {
  const contents: any = {};
  if (output[_cRP] != null) {
    contents[_CRP] = __expectString(output[_cRP]);
  }
  if (output[_cRT] != null) {
    contents[_CRTa] = de_CapacityReservationTargetResponse(output[_cRT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CapacityReservationTargetResponse
 */
const de_CapacityReservationTargetResponse = (
  output: any,
  context: __SerdeContext
): CapacityReservationTargetResponse => {
  const contents: any = {};
  if (output[_cRI] != null) {
    contents[_CRI] = __expectString(output[_cRI]);
  }
  if (output[_cRRGA] != null) {
    contents[_CRRGA] = __expectString(output[_cRRGA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CarrierGateway
 */
const de_CarrierGateway = (output: any, context: __SerdeContext): CarrierGateway => {
  const contents: any = {};
  if (output[_cGI] != null) {
    contents[_CGI] = __expectString(output[_cGI]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CarrierGatewaySet
 */
const de_CarrierGatewaySet = (output: any, context: __SerdeContext): CarrierGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CarrierGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2CertificateAuthentication
 */
const de_CertificateAuthentication = (output: any, context: __SerdeContext): CertificateAuthentication => {
  const contents: any = {};
  if (output[_cRCC] != null) {
    contents[_CRCC] = __expectString(output[_cRCC]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CidrBlock
 */
const de_CidrBlock = (output: any, context: __SerdeContext): CidrBlock => {
  const contents: any = {};
  if (output[_cB] != null) {
    contents[_CB] = __expectString(output[_cB]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CidrBlockSet
 */
const de_CidrBlockSet = (output: any, context: __SerdeContext): CidrBlock[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CidrBlock(entry, context);
    });
};

/**
 * deserializeAws_ec2ClassicLinkDnsSupport
 */
const de_ClassicLinkDnsSupport = (output: any, context: __SerdeContext): ClassicLinkDnsSupport => {
  const contents: any = {};
  if (output[_cLDS] != null) {
    contents[_CLDS] = __parseBoolean(output[_cLDS]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClassicLinkDnsSupportList
 */
const de_ClassicLinkDnsSupportList = (output: any, context: __SerdeContext): ClassicLinkDnsSupport[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClassicLinkDnsSupport(entry, context);
    });
};

/**
 * deserializeAws_ec2ClassicLinkInstance
 */
const de_ClassicLinkInstance = (output: any, context: __SerdeContext): ClassicLinkInstance => {
  const contents: any = {};
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierList(__getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClassicLinkInstanceList
 */
const de_ClassicLinkInstanceList = (output: any, context: __SerdeContext): ClassicLinkInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClassicLinkInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2ClassicLoadBalancer
 */
const de_ClassicLoadBalancer = (output: any, context: __SerdeContext): ClassicLoadBalancer => {
  const contents: any = {};
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClassicLoadBalancers
 */
const de_ClassicLoadBalancers = (output: any, context: __SerdeContext): ClassicLoadBalancer[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClassicLoadBalancer(entry, context);
    });
};

/**
 * deserializeAws_ec2ClassicLoadBalancersConfig
 */
const de_ClassicLoadBalancersConfig = (output: any, context: __SerdeContext): ClassicLoadBalancersConfig => {
  const contents: any = {};
  if (output.classicLoadBalancers === "") {
    contents[_CLB] = [];
  } else if (output[_cLB] != null && output[_cLB][_i] != null) {
    contents[_CLB] = de_ClassicLoadBalancers(__getArrayIfSingleItem(output[_cLB][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientCertificateRevocationListStatus
 */
const de_ClientCertificateRevocationListStatus = (
  output: any,
  context: __SerdeContext
): ClientCertificateRevocationListStatus => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientConnectResponseOptions
 */
const de_ClientConnectResponseOptions = (output: any, context: __SerdeContext): ClientConnectResponseOptions => {
  const contents: any = {};
  if (output[_en] != null) {
    contents[_En] = __parseBoolean(output[_en]);
  }
  if (output[_lFA] != null) {
    contents[_LFA] = __expectString(output[_lFA]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnEndpointAttributeStatus(output[_sta], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientLoginBannerResponseOptions
 */
const de_ClientLoginBannerResponseOptions = (
  output: any,
  context: __SerdeContext
): ClientLoginBannerResponseOptions => {
  const contents: any = {};
  if (output[_en] != null) {
    contents[_En] = __parseBoolean(output[_en]);
  }
  if (output[_bT] != null) {
    contents[_BT] = __expectString(output[_bT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnAuthentication
 */
const de_ClientVpnAuthentication = (output: any, context: __SerdeContext): ClientVpnAuthentication => {
  const contents: any = {};
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  if (output[_aD] != null) {
    contents[_AD] = de_DirectoryServiceAuthentication(output[_aD], context);
  }
  if (output[_mA] != null) {
    contents[_MA] = de_CertificateAuthentication(output[_mA], context);
  }
  if (output[_fA] != null) {
    contents[_FA] = de_FederatedAuthentication(output[_fA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnAuthenticationList
 */
const de_ClientVpnAuthenticationList = (output: any, context: __SerdeContext): ClientVpnAuthentication[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClientVpnAuthentication(entry, context);
    });
};

/**
 * deserializeAws_ec2ClientVpnAuthorizationRuleStatus
 */
const de_ClientVpnAuthorizationRuleStatus = (
  output: any,
  context: __SerdeContext
): ClientVpnAuthorizationRuleStatus => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnConnection
 */
const de_ClientVpnConnection = (output: any, context: __SerdeContext): ClientVpnConnection => {
  const contents: any = {};
  if (output[_cVEI] != null) {
    contents[_CVEI] = __expectString(output[_cVEI]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = __expectString(output[_ti]);
  }
  if (output[_cIon] != null) {
    contents[_CIo] = __expectString(output[_cIon]);
  }
  if (output[_us] != null) {
    contents[_Us] = __expectString(output[_us]);
  }
  if (output[_cET] != null) {
    contents[_CETo] = __expectString(output[_cET]);
  }
  if (output[_iB] != null) {
    contents[_IB] = __expectString(output[_iB]);
  }
  if (output[_eB] != null) {
    contents[_EB] = __expectString(output[_eB]);
  }
  if (output[_iPng] != null) {
    contents[_IPng] = __expectString(output[_iPng]);
  }
  if (output[_eP] != null) {
    contents[_EPg] = __expectString(output[_eP]);
  }
  if (output[_cIl] != null) {
    contents[_CIli] = __expectString(output[_cIl]);
  }
  if (output[_cN] != null) {
    contents[_CN] = __expectString(output[_cN]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnConnectionStatus(output[_sta], context);
  }
  if (output[_cETo] != null) {
    contents[_CETon] = __expectString(output[_cETo]);
  }
  if (output.postureComplianceStatusSet === "") {
    contents[_PCS] = [];
  } else if (output[_pCSS] != null && output[_pCSS][_i] != null) {
    contents[_PCS] = de_ValueStringList(__getArrayIfSingleItem(output[_pCSS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnConnectionSet
 */
const de_ClientVpnConnectionSet = (output: any, context: __SerdeContext): ClientVpnConnection[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClientVpnConnection(entry, context);
    });
};

/**
 * deserializeAws_ec2ClientVpnConnectionStatus
 */
const de_ClientVpnConnectionStatus = (output: any, context: __SerdeContext): ClientVpnConnectionStatus => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnEndpoint
 */
const de_ClientVpnEndpoint = (output: any, context: __SerdeContext): ClientVpnEndpoint => {
  const contents: any = {};
  if (output[_cVEI] != null) {
    contents[_CVEI] = __expectString(output[_cVEI]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnEndpointStatus(output[_sta], context);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectString(output[_cTre]);
  }
  if (output[_dT] != null) {
    contents[_DTel] = __expectString(output[_dT]);
  }
  if (output[_dNn] != null) {
    contents[_DNn] = __expectString(output[_dNn]);
  }
  if (output[_cCB] != null) {
    contents[_CCB] = __expectString(output[_cCB]);
  }
  if (output.dnsServer === "") {
    contents[_DSn] = [];
  } else if (output[_dS] != null && output[_dS][_i] != null) {
    contents[_DSn] = de_ValueStringList(__getArrayIfSingleItem(output[_dS][_i]), context);
  }
  if (output[_sTp] != null) {
    contents[_ST] = __parseBoolean(output[_sTp]);
  }
  if (output[_vP] != null) {
    contents[_VPp] = __expectString(output[_vP]);
  }
  if (output[_tP] != null) {
    contents[_TPr] = __expectString(output[_tP]);
  }
  if (output[_vPp] != null) {
    contents[_VP] = __strictParseInt32(output[_vPp]) as number;
  }
  if (output.associatedTargetNetwork === "") {
    contents[_ATN] = [];
  } else if (output[_aTN] != null && output[_aTN][_i] != null) {
    contents[_ATN] = de_AssociatedTargetNetworkSet(__getArrayIfSingleItem(output[_aTN][_i]), context);
  }
  if (output[_sCA] != null) {
    contents[_SCA] = __expectString(output[_sCA]);
  }
  if (output.authenticationOptions === "") {
    contents[_AO] = [];
  } else if (output[_aO] != null && output[_aO][_i] != null) {
    contents[_AO] = de_ClientVpnAuthenticationList(__getArrayIfSingleItem(output[_aO][_i]), context);
  }
  if (output[_cLO] != null) {
    contents[_CLO] = de_ConnectionLogResponseOptions(output[_cLO], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output.securityGroupIdSet === "") {
    contents[_SGI] = [];
  } else if (output[_sGIS] != null && output[_sGIS][_i] != null) {
    contents[_SGI] = de_ClientVpnSecurityGroupIdSet(__getArrayIfSingleItem(output[_sGIS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_sSPU] != null) {
    contents[_SSPU] = __expectString(output[_sSPU]);
  }
  if (output[_cCO] != null) {
    contents[_CCO] = de_ClientConnectResponseOptions(output[_cCO], context);
  }
  if (output[_sTH] != null) {
    contents[_STH] = __strictParseInt32(output[_sTH]) as number;
  }
  if (output[_cLBO] != null) {
    contents[_CLBO] = de_ClientLoginBannerResponseOptions(output[_cLBO], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnEndpointAttributeStatus
 */
const de_ClientVpnEndpointAttributeStatus = (
  output: any,
  context: __SerdeContext
): ClientVpnEndpointAttributeStatus => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnEndpointStatus
 */
const de_ClientVpnEndpointStatus = (output: any, context: __SerdeContext): ClientVpnEndpointStatus => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnRoute
 */
const de_ClientVpnRoute = (output: any, context: __SerdeContext): ClientVpnRoute => {
  const contents: any = {};
  if (output[_cVEI] != null) {
    contents[_CVEI] = __expectString(output[_cVEI]);
  }
  if (output[_dC] != null) {
    contents[_DCe] = __expectString(output[_dC]);
  }
  if (output[_tSa] != null) {
    contents[_TSa] = __expectString(output[_tSa]);
  }
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  if (output[_o] != null) {
    contents[_Or] = __expectString(output[_o]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnRouteStatus(output[_sta], context);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnRouteSet
 */
const de_ClientVpnRouteSet = (output: any, context: __SerdeContext): ClientVpnRoute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClientVpnRoute(entry, context);
    });
};

/**
 * deserializeAws_ec2ClientVpnRouteStatus
 */
const de_ClientVpnRouteStatus = (output: any, context: __SerdeContext): ClientVpnRouteStatus => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ClientVpnSecurityGroupIdSet
 */
const de_ClientVpnSecurityGroupIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2CloudWatchLogOptions
 */
const de_CloudWatchLogOptions = (output: any, context: __SerdeContext): CloudWatchLogOptions => {
  const contents: any = {};
  if (output[_lE] != null) {
    contents[_LE] = __parseBoolean(output[_lE]);
  }
  if (output[_lGA] != null) {
    contents[_LGA] = __expectString(output[_lGA]);
  }
  if (output[_lOF] != null) {
    contents[_LOF] = __expectString(output[_lOF]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CoipAddressUsage
 */
const de_CoipAddressUsage = (output: any, context: __SerdeContext): CoipAddressUsage => {
  const contents: any = {};
  if (output[_aI] != null) {
    contents[_AIl] = __expectString(output[_aI]);
  }
  if (output[_aAI] != null) {
    contents[_AAI] = __expectString(output[_aAI]);
  }
  if (output[_aSw] != null) {
    contents[_ASw] = __expectString(output[_aSw]);
  }
  if (output[_cIop] != null) {
    contents[_CIop] = __expectString(output[_cIop]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CoipAddressUsageSet
 */
const de_CoipAddressUsageSet = (output: any, context: __SerdeContext): CoipAddressUsage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CoipAddressUsage(entry, context);
    });
};

/**
 * deserializeAws_ec2CoipCidr
 */
const de_CoipCidr = (output: any, context: __SerdeContext): CoipCidr => {
  const contents: any = {};
  if (output[_ci] != null) {
    contents[_C] = __expectString(output[_ci]);
  }
  if (output[_cPI] != null) {
    contents[_CPIo] = __expectString(output[_cPI]);
  }
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = __expectString(output[_lGRTI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CoipPool
 */
const de_CoipPool = (output: any, context: __SerdeContext): CoipPool => {
  const contents: any = {};
  if (output[_pIo] != null) {
    contents[_PIo] = __expectString(output[_pIo]);
  }
  if (output.poolCidrSet === "") {
    contents[_PCo] = [];
  } else if (output[_pCS] != null && output[_pCS][_i] != null) {
    contents[_PCo] = de_ValueStringList(__getArrayIfSingleItem(output[_pCS][_i]), context);
  }
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = __expectString(output[_lGRTI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_pA] != null) {
    contents[_PAo] = __expectString(output[_pA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CoipPoolSet
 */
const de_CoipPoolSet = (output: any, context: __SerdeContext): CoipPool[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CoipPool(entry, context);
    });
};

/**
 * deserializeAws_ec2ConfirmProductInstanceResult
 */
const de_ConfirmProductInstanceResult = (output: any, context: __SerdeContext): ConfirmProductInstanceResult => {
  const contents: any = {};
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ConnectionLogResponseOptions
 */
const de_ConnectionLogResponseOptions = (output: any, context: __SerdeContext): ConnectionLogResponseOptions => {
  const contents: any = {};
  if (output[_En] != null) {
    contents[_En] = __parseBoolean(output[_En]);
  }
  if (output[_CLG] != null) {
    contents[_CLG] = __expectString(output[_CLG]);
  }
  if (output[_CLS] != null) {
    contents[_CLS] = __expectString(output[_CLS]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ConnectionNotification
 */
const de_ConnectionNotification = (output: any, context: __SerdeContext): ConnectionNotification => {
  const contents: any = {};
  if (output[_cNI] != null) {
    contents[_CNIon] = __expectString(output[_cNI]);
  }
  if (output[_sI] != null) {
    contents[_SIe] = __expectString(output[_sI]);
  }
  if (output[_vEI] != null) {
    contents[_VEIp] = __expectString(output[_vEI]);
  }
  if (output[_cNT] != null) {
    contents[_CNT] = __expectString(output[_cNT]);
  }
  if (output[_cNAo] != null) {
    contents[_CNAon] = __expectString(output[_cNAo]);
  }
  if (output.connectionEvents === "") {
    contents[_CEo] = [];
  } else if (output[_cE] != null && output[_cE][_i] != null) {
    contents[_CEo] = de_ValueStringList(__getArrayIfSingleItem(output[_cE][_i]), context);
  }
  if (output[_cNS] != null) {
    contents[_CNS] = __expectString(output[_cNS]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ConnectionNotificationSet
 */
const de_ConnectionNotificationSet = (output: any, context: __SerdeContext): ConnectionNotification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ConnectionNotification(entry, context);
    });
};

/**
 * deserializeAws_ec2ConnectionTrackingConfiguration
 */
const de_ConnectionTrackingConfiguration = (output: any, context: __SerdeContext): ConnectionTrackingConfiguration => {
  const contents: any = {};
  if (output[_tET] != null) {
    contents[_TET] = __strictParseInt32(output[_tET]) as number;
  }
  if (output[_uST] != null) {
    contents[_UST] = __strictParseInt32(output[_uST]) as number;
  }
  if (output[_uTd] != null) {
    contents[_UT] = __strictParseInt32(output[_uTd]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2ConnectionTrackingSpecification
 */
const de_ConnectionTrackingSpecification = (output: any, context: __SerdeContext): ConnectionTrackingSpecification => {
  const contents: any = {};
  if (output[_tET] != null) {
    contents[_TET] = __strictParseInt32(output[_tET]) as number;
  }
  if (output[_uTd] != null) {
    contents[_UT] = __strictParseInt32(output[_uTd]) as number;
  }
  if (output[_uST] != null) {
    contents[_UST] = __strictParseInt32(output[_uST]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2ConnectionTrackingSpecificationRequest
 */
const de_ConnectionTrackingSpecificationRequest = (
  output: any,
  context: __SerdeContext
): ConnectionTrackingSpecificationRequest => {
  const contents: any = {};
  if (output[_TET] != null) {
    contents[_TET] = __strictParseInt32(output[_TET]) as number;
  }
  if (output[_UST] != null) {
    contents[_UST] = __strictParseInt32(output[_UST]) as number;
  }
  if (output[_UT] != null) {
    contents[_UT] = __strictParseInt32(output[_UT]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2ConnectionTrackingSpecificationResponse
 */
const de_ConnectionTrackingSpecificationResponse = (
  output: any,
  context: __SerdeContext
): ConnectionTrackingSpecificationResponse => {
  const contents: any = {};
  if (output[_tET] != null) {
    contents[_TET] = __strictParseInt32(output[_tET]) as number;
  }
  if (output[_uST] != null) {
    contents[_UST] = __strictParseInt32(output[_uST]) as number;
  }
  if (output[_uTd] != null) {
    contents[_UT] = __strictParseInt32(output[_uTd]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2ConversionTask
 */
const de_ConversionTask = (output: any, context: __SerdeContext): ConversionTask => {
  const contents: any = {};
  if (output[_cTI] != null) {
    contents[_CTI] = __expectString(output[_cTI]);
  }
  if (output[_eT] != null) {
    contents[_ETx] = __expectString(output[_eT]);
  }
  if (output[_iIm] != null) {
    contents[_IIm] = de_ImportInstanceTaskDetails(output[_iIm], context);
  }
  if (output[_iV] != null) {
    contents[_IV] = de_ImportVolumeTaskDetails(output[_iV], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CopyFpgaImageResult
 */
const de_CopyFpgaImageResult = (output: any, context: __SerdeContext): CopyFpgaImageResult => {
  const contents: any = {};
  if (output[_fII] != null) {
    contents[_FII] = __expectString(output[_fII]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CopyImageResult
 */
const de_CopyImageResult = (output: any, context: __SerdeContext): CopyImageResult => {
  const contents: any = {};
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CopySnapshotResult
 */
const de_CopySnapshotResult = (output: any, context: __SerdeContext): CopySnapshotResult => {
  const contents: any = {};
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CoreCountList
 */
const de_CoreCountList = (output: any, context: __SerdeContext): number[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __strictParseInt32(entry) as number;
    });
};

/**
 * deserializeAws_ec2CpuManufacturerSet
 */
const de_CpuManufacturerSet = (output: any, context: __SerdeContext): CpuManufacturer[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2CpuOptions
 */
const de_CpuOptions = (output: any, context: __SerdeContext): CpuOptions => {
  const contents: any = {};
  if (output[_cCo] != null) {
    contents[_CC] = __strictParseInt32(output[_cCo]) as number;
  }
  if (output[_tPC] != null) {
    contents[_TPC] = __strictParseInt32(output[_tPC]) as number;
  }
  if (output[_aSS] != null) {
    contents[_ASS] = __expectString(output[_aSS]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateCapacityReservationFleetResult
 */
const de_CreateCapacityReservationFleetResult = (
  output: any,
  context: __SerdeContext
): CreateCapacityReservationFleetResult => {
  const contents: any = {};
  if (output[_cRFI] != null) {
    contents[_CRFIa] = __expectString(output[_cRFI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_tTC] != null) {
    contents[_TTC] = __strictParseInt32(output[_tTC]) as number;
  }
  if (output[_tFC] != null) {
    contents[_TFC] = __strictParseFloat(output[_tFC]) as number;
  }
  if (output[_iMC] != null) {
    contents[_IMC] = __expectString(output[_iMC]);
  }
  if (output[_aSl] != null) {
    contents[_AS] = __expectString(output[_aSl]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_eD] != null) {
    contents[_ED] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eD]));
  }
  if (output[_t] != null) {
    contents[_Te] = __expectString(output[_t]);
  }
  if (output.fleetCapacityReservationSet === "") {
    contents[_FCR] = [];
  } else if (output[_fCRS] != null && output[_fCRS][_i] != null) {
    contents[_FCR] = de_FleetCapacityReservationSet(__getArrayIfSingleItem(output[_fCRS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateCapacityReservationResult
 */
const de_CreateCapacityReservationResult = (output: any, context: __SerdeContext): CreateCapacityReservationResult => {
  const contents: any = {};
  if (output[_cR] != null) {
    contents[_CRapa] = de_CapacityReservation(output[_cR], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateCarrierGatewayResult
 */
const de_CreateCarrierGatewayResult = (output: any, context: __SerdeContext): CreateCarrierGatewayResult => {
  const contents: any = {};
  if (output[_cG] != null) {
    contents[_CG] = de_CarrierGateway(output[_cG], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateClientVpnEndpointResult
 */
const de_CreateClientVpnEndpointResult = (output: any, context: __SerdeContext): CreateClientVpnEndpointResult => {
  const contents: any = {};
  if (output[_cVEI] != null) {
    contents[_CVEI] = __expectString(output[_cVEI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnEndpointStatus(output[_sta], context);
  }
  if (output[_dNn] != null) {
    contents[_DNn] = __expectString(output[_dNn]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateClientVpnRouteResult
 */
const de_CreateClientVpnRouteResult = (output: any, context: __SerdeContext): CreateClientVpnRouteResult => {
  const contents: any = {};
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnRouteStatus(output[_sta], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateCoipCidrResult
 */
const de_CreateCoipCidrResult = (output: any, context: __SerdeContext): CreateCoipCidrResult => {
  const contents: any = {};
  if (output[_cCoi] != null) {
    contents[_CCo] = de_CoipCidr(output[_cCoi], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateCoipPoolResult
 */
const de_CreateCoipPoolResult = (output: any, context: __SerdeContext): CreateCoipPoolResult => {
  const contents: any = {};
  if (output[_cP] != null) {
    contents[_CP] = de_CoipPool(output[_cP], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateCustomerGatewayResult
 */
const de_CreateCustomerGatewayResult = (output: any, context: __SerdeContext): CreateCustomerGatewayResult => {
  const contents: any = {};
  if (output[_cGu] != null) {
    contents[_CGu] = de_CustomerGateway(output[_cGu], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateDefaultSubnetResult
 */
const de_CreateDefaultSubnetResult = (output: any, context: __SerdeContext): CreateDefaultSubnetResult => {
  const contents: any = {};
  if (output[_su] != null) {
    contents[_Su] = de_Subnet(output[_su], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateDefaultVpcResult
 */
const de_CreateDefaultVpcResult = (output: any, context: __SerdeContext): CreateDefaultVpcResult => {
  const contents: any = {};
  if (output[_vp] != null) {
    contents[_Vp] = de_Vpc(output[_vp], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateDhcpOptionsResult
 */
const de_CreateDhcpOptionsResult = (output: any, context: __SerdeContext): CreateDhcpOptionsResult => {
  const contents: any = {};
  if (output[_dO] != null) {
    contents[_DOh] = de_DhcpOptions(output[_dO], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateEgressOnlyInternetGatewayResult
 */
const de_CreateEgressOnlyInternetGatewayResult = (
  output: any,
  context: __SerdeContext
): CreateEgressOnlyInternetGatewayResult => {
  const contents: any = {};
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  if (output[_eOIG] != null) {
    contents[_EOIG] = de_EgressOnlyInternetGateway(output[_eOIG], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateFleetError
 */
const de_CreateFleetError = (output: any, context: __SerdeContext): CreateFleetError => {
  const contents: any = {};
  if (output[_lTAO] != null) {
    contents[_LTAO] = de_LaunchTemplateAndOverridesResponse(output[_lTAO], context);
  }
  if (output[_l] != null) {
    contents[_Li] = __expectString(output[_l]);
  }
  if (output[_eC] != null) {
    contents[_EC] = __expectString(output[_eC]);
  }
  if (output[_eM] != null) {
    contents[_EM] = __expectString(output[_eM]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateFleetErrorsSet
 */
const de_CreateFleetErrorsSet = (output: any, context: __SerdeContext): CreateFleetError[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CreateFleetError(entry, context);
    });
};

/**
 * deserializeAws_ec2CreateFleetInstance
 */
const de_CreateFleetInstance = (output: any, context: __SerdeContext): CreateFleetInstance => {
  const contents: any = {};
  if (output[_lTAO] != null) {
    contents[_LTAO] = de_LaunchTemplateAndOverridesResponse(output[_lTAO], context);
  }
  if (output[_l] != null) {
    contents[_Li] = __expectString(output[_l]);
  }
  if (output.instanceIds === "") {
    contents[_IIns] = [];
  } else if (output[_iIn] != null && output[_iIn][_i] != null) {
    contents[_IIns] = de_InstanceIdsSet(__getArrayIfSingleItem(output[_iIn][_i]), context);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = __expectString(output[_pl]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateFleetInstancesSet
 */
const de_CreateFleetInstancesSet = (output: any, context: __SerdeContext): CreateFleetInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CreateFleetInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2CreateFleetResult
 */
const de_CreateFleetResult = (output: any, context: __SerdeContext): CreateFleetResult => {
  const contents: any = {};
  if (output[_fIl] != null) {
    contents[_FIl] = __expectString(output[_fIl]);
  }
  if (output.errorSet === "") {
    contents[_Err] = [];
  } else if (output[_eSr] != null && output[_eSr][_i] != null) {
    contents[_Err] = de_CreateFleetErrorsSet(__getArrayIfSingleItem(output[_eSr][_i]), context);
  }
  if (output.fleetInstanceSet === "") {
    contents[_In] = [];
  } else if (output[_fIS] != null && output[_fIS][_i] != null) {
    contents[_In] = de_CreateFleetInstancesSet(__getArrayIfSingleItem(output[_fIS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateFlowLogsResult
 */
const de_CreateFlowLogsResult = (output: any, context: __SerdeContext): CreateFlowLogsResult => {
  const contents: any = {};
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  if (output.flowLogIdSet === "") {
    contents[_FLI] = [];
  } else if (output[_fLIS] != null && output[_fLIS][_i] != null) {
    contents[_FLI] = de_ValueStringList(__getArrayIfSingleItem(output[_fLIS][_i]), context);
  }
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateFpgaImageResult
 */
const de_CreateFpgaImageResult = (output: any, context: __SerdeContext): CreateFpgaImageResult => {
  const contents: any = {};
  if (output[_fII] != null) {
    contents[_FII] = __expectString(output[_fII]);
  }
  if (output[_fIGI] != null) {
    contents[_FIGI] = __expectString(output[_fIGI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateImageResult
 */
const de_CreateImageResult = (output: any, context: __SerdeContext): CreateImageResult => {
  const contents: any = {};
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateInstanceConnectEndpointResult
 */
const de_CreateInstanceConnectEndpointResult = (
  output: any,
  context: __SerdeContext
): CreateInstanceConnectEndpointResult => {
  const contents: any = {};
  if (output[_iCE] != null) {
    contents[_ICE] = de_Ec2InstanceConnectEndpoint(output[_iCE], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateInstanceEventWindowResult
 */
const de_CreateInstanceEventWindowResult = (output: any, context: __SerdeContext): CreateInstanceEventWindowResult => {
  const contents: any = {};
  if (output[_iEW] != null) {
    contents[_IEW] = de_InstanceEventWindow(output[_iEW], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateInstanceExportTaskResult
 */
const de_CreateInstanceExportTaskResult = (output: any, context: __SerdeContext): CreateInstanceExportTaskResult => {
  const contents: any = {};
  if (output[_eTx] != null) {
    contents[_ETxp] = de_ExportTask(output[_eTx], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateInternetGatewayResult
 */
const de_CreateInternetGatewayResult = (output: any, context: __SerdeContext): CreateInternetGatewayResult => {
  const contents: any = {};
  if (output[_iG] != null) {
    contents[_IGn] = de_InternetGateway(output[_iG], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateIpamPoolResult
 */
const de_CreateIpamPoolResult = (output: any, context: __SerdeContext): CreateIpamPoolResult => {
  const contents: any = {};
  if (output[_iPp] != null) {
    contents[_IPpa] = de_IpamPool(output[_iPp], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateIpamResourceDiscoveryResult
 */
const de_CreateIpamResourceDiscoveryResult = (
  output: any,
  context: __SerdeContext
): CreateIpamResourceDiscoveryResult => {
  const contents: any = {};
  if (output[_iRD] != null) {
    contents[_IRD] = de_IpamResourceDiscovery(output[_iRD], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateIpamResult
 */
const de_CreateIpamResult = (output: any, context: __SerdeContext): CreateIpamResult => {
  const contents: any = {};
  if (output[_ip] != null) {
    contents[_Ipa] = de_Ipam(output[_ip], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateIpamScopeResult
 */
const de_CreateIpamScopeResult = (output: any, context: __SerdeContext): CreateIpamScopeResult => {
  const contents: any = {};
  if (output[_iS] != null) {
    contents[_ISpa] = de_IpamScope(output[_iS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateLaunchTemplateResult
 */
const de_CreateLaunchTemplateResult = (output: any, context: __SerdeContext): CreateLaunchTemplateResult => {
  const contents: any = {};
  if (output[_lT] != null) {
    contents[_LTa] = de_LaunchTemplate(output[_lT], context);
  }
  if (output[_w] != null) {
    contents[_Wa] = de_ValidationWarning(output[_w], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateLaunchTemplateVersionResult
 */
const de_CreateLaunchTemplateVersionResult = (
  output: any,
  context: __SerdeContext
): CreateLaunchTemplateVersionResult => {
  const contents: any = {};
  if (output[_lTV] != null) {
    contents[_LTV] = de_LaunchTemplateVersion(output[_lTV], context);
  }
  if (output[_w] != null) {
    contents[_Wa] = de_ValidationWarning(output[_w], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteResult
 */
const de_CreateLocalGatewayRouteResult = (output: any, context: __SerdeContext): CreateLocalGatewayRouteResult => {
  const contents: any = {};
  if (output[_ro] != null) {
    contents[_Ro] = de_LocalGatewayRoute(output[_ro], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableResult
 */
const de_CreateLocalGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): CreateLocalGatewayRouteTableResult => {
  const contents: any = {};
  if (output[_lGRT] != null) {
    contents[_LGRT] = de_LocalGatewayRouteTable(output[_lGRT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult
 */
const de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult = (
  output: any,
  context: __SerdeContext
): CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult => {
  const contents: any = {};
  if (output[_lGRTVIGA] != null) {
    contents[_LGRTVIGA] = de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(output[_lGRTVIGA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateLocalGatewayRouteTableVpcAssociationResult
 */
const de_CreateLocalGatewayRouteTableVpcAssociationResult = (
  output: any,
  context: __SerdeContext
): CreateLocalGatewayRouteTableVpcAssociationResult => {
  const contents: any = {};
  if (output[_lGRTVA] != null) {
    contents[_LGRTVA] = de_LocalGatewayRouteTableVpcAssociation(output[_lGRTVA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateManagedPrefixListResult
 */
const de_CreateManagedPrefixListResult = (output: any, context: __SerdeContext): CreateManagedPrefixListResult => {
  const contents: any = {};
  if (output[_pL] != null) {
    contents[_PLr] = de_ManagedPrefixList(output[_pL], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateNatGatewayResult
 */
const de_CreateNatGatewayResult = (output: any, context: __SerdeContext): CreateNatGatewayResult => {
  const contents: any = {};
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  if (output[_nG] != null) {
    contents[_NG] = de_NatGateway(output[_nG], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateNetworkAclResult
 */
const de_CreateNetworkAclResult = (output: any, context: __SerdeContext): CreateNetworkAclResult => {
  const contents: any = {};
  if (output[_nA] != null) {
    contents[_NA] = de_NetworkAcl(output[_nA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateNetworkInsightsAccessScopeResult
 */
const de_CreateNetworkInsightsAccessScopeResult = (
  output: any,
  context: __SerdeContext
): CreateNetworkInsightsAccessScopeResult => {
  const contents: any = {};
  if (output[_nIAS] != null) {
    contents[_NIAS] = de_NetworkInsightsAccessScope(output[_nIAS], context);
  }
  if (output[_nIASC] != null) {
    contents[_NIASC] = de_NetworkInsightsAccessScopeContent(output[_nIASC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateNetworkInsightsPathResult
 */
const de_CreateNetworkInsightsPathResult = (output: any, context: __SerdeContext): CreateNetworkInsightsPathResult => {
  const contents: any = {};
  if (output[_nIP] != null) {
    contents[_NIP] = de_NetworkInsightsPath(output[_nIP], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateNetworkInterfacePermissionResult
 */
const de_CreateNetworkInterfacePermissionResult = (
  output: any,
  context: __SerdeContext
): CreateNetworkInterfacePermissionResult => {
  const contents: any = {};
  if (output[_iPnt] != null) {
    contents[_IPnt] = de_NetworkInterfacePermission(output[_iPnt], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateNetworkInterfaceResult
 */
const de_CreateNetworkInterfaceResult = (output: any, context: __SerdeContext): CreateNetworkInterfaceResult => {
  const contents: any = {};
  if (output[_nIe] != null) {
    contents[_NIet] = de_NetworkInterface(output[_nIe], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreatePlacementGroupResult
 */
const de_CreatePlacementGroupResult = (output: any, context: __SerdeContext): CreatePlacementGroupResult => {
  const contents: any = {};
  if (output[_pG] != null) {
    contents[_PG] = de_PlacementGroup(output[_pG], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreatePublicIpv4PoolResult
 */
const de_CreatePublicIpv4PoolResult = (output: any, context: __SerdeContext): CreatePublicIpv4PoolResult => {
  const contents: any = {};
  if (output[_pIo] != null) {
    contents[_PIo] = __expectString(output[_pIo]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateReplaceRootVolumeTaskResult
 */
const de_CreateReplaceRootVolumeTaskResult = (
  output: any,
  context: __SerdeContext
): CreateReplaceRootVolumeTaskResult => {
  const contents: any = {};
  if (output[_rRVT] != null) {
    contents[_RRVT] = de_ReplaceRootVolumeTask(output[_rRVT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateReservedInstancesListingResult
 */
const de_CreateReservedInstancesListingResult = (
  output: any,
  context: __SerdeContext
): CreateReservedInstancesListingResult => {
  const contents: any = {};
  if (output.reservedInstancesListingsSet === "") {
    contents[_RIL] = [];
  } else if (output[_rILS] != null && output[_rILS][_i] != null) {
    contents[_RIL] = de_ReservedInstancesListingList(__getArrayIfSingleItem(output[_rILS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateRestoreImageTaskResult
 */
const de_CreateRestoreImageTaskResult = (output: any, context: __SerdeContext): CreateRestoreImageTaskResult => {
  const contents: any = {};
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateRouteResult
 */
const de_CreateRouteResult = (output: any, context: __SerdeContext): CreateRouteResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateRouteTableResult
 */
const de_CreateRouteTableResult = (output: any, context: __SerdeContext): CreateRouteTableResult => {
  const contents: any = {};
  if (output[_rTo] != null) {
    contents[_RTo] = de_RouteTable(output[_rTo], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateSecurityGroupResult
 */
const de_CreateSecurityGroupResult = (output: any, context: __SerdeContext): CreateSecurityGroupResult => {
  const contents: any = {};
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateSnapshotsResult
 */
const de_CreateSnapshotsResult = (output: any, context: __SerdeContext): CreateSnapshotsResult => {
  const contents: any = {};
  if (output.snapshotSet === "") {
    contents[_Sn] = [];
  } else if (output[_sS] != null && output[_sS][_i] != null) {
    contents[_Sn] = de_SnapshotSet(__getArrayIfSingleItem(output[_sS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateSpotDatafeedSubscriptionResult
 */
const de_CreateSpotDatafeedSubscriptionResult = (
  output: any,
  context: __SerdeContext
): CreateSpotDatafeedSubscriptionResult => {
  const contents: any = {};
  if (output[_sDS] != null) {
    contents[_SDS] = de_SpotDatafeedSubscription(output[_sDS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateStoreImageTaskResult
 */
const de_CreateStoreImageTaskResult = (output: any, context: __SerdeContext): CreateStoreImageTaskResult => {
  const contents: any = {};
  if (output[_oK] != null) {
    contents[_OK] = __expectString(output[_oK]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateSubnetCidrReservationResult
 */
const de_CreateSubnetCidrReservationResult = (
  output: any,
  context: __SerdeContext
): CreateSubnetCidrReservationResult => {
  const contents: any = {};
  if (output[_sCR] != null) {
    contents[_SCR] = de_SubnetCidrReservation(output[_sCR], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateSubnetResult
 */
const de_CreateSubnetResult = (output: any, context: __SerdeContext): CreateSubnetResult => {
  const contents: any = {};
  if (output[_su] != null) {
    contents[_Su] = de_Subnet(output[_su], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorFilterResult
 */
const de_CreateTrafficMirrorFilterResult = (output: any, context: __SerdeContext): CreateTrafficMirrorFilterResult => {
  const contents: any = {};
  if (output[_tMF] != null) {
    contents[_TMF] = de_TrafficMirrorFilter(output[_tMF], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorFilterRuleResult
 */
const de_CreateTrafficMirrorFilterRuleResult = (
  output: any,
  context: __SerdeContext
): CreateTrafficMirrorFilterRuleResult => {
  const contents: any = {};
  if (output[_tMFR] != null) {
    contents[_TMFR] = de_TrafficMirrorFilterRule(output[_tMFR], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorSessionResult
 */
const de_CreateTrafficMirrorSessionResult = (
  output: any,
  context: __SerdeContext
): CreateTrafficMirrorSessionResult => {
  const contents: any = {};
  if (output[_tMS] != null) {
    contents[_TMS] = de_TrafficMirrorSession(output[_tMS], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTrafficMirrorTargetResult
 */
const de_CreateTrafficMirrorTargetResult = (output: any, context: __SerdeContext): CreateTrafficMirrorTargetResult => {
  const contents: any = {};
  if (output[_tMT] != null) {
    contents[_TMT] = de_TrafficMirrorTarget(output[_tMT], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayConnectPeerResult
 */
const de_CreateTransitGatewayConnectPeerResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayConnectPeerResult => {
  const contents: any = {};
  if (output[_tGCP] != null) {
    contents[_TGCP] = de_TransitGatewayConnectPeer(output[_tGCP], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayConnectResult
 */
const de_CreateTransitGatewayConnectResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayConnectResult => {
  const contents: any = {};
  if (output[_tGC] != null) {
    contents[_TGCr] = de_TransitGatewayConnect(output[_tGC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayMulticastDomainResult
 */
const de_CreateTransitGatewayMulticastDomainResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayMulticastDomainResult => {
  const contents: any = {};
  if (output[_tGMD] != null) {
    contents[_TGMD] = de_TransitGatewayMulticastDomain(output[_tGMD], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayPeeringAttachmentResult
 */
const de_CreateTransitGatewayPeeringAttachmentResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayPeeringAttachmentResult => {
  const contents: any = {};
  if (output[_tGPA] != null) {
    contents[_TGPA] = de_TransitGatewayPeeringAttachment(output[_tGPA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayPolicyTableResult
 */
const de_CreateTransitGatewayPolicyTableResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayPolicyTableResult => {
  const contents: any = {};
  if (output[_tGPT] != null) {
    contents[_TGPT] = de_TransitGatewayPolicyTable(output[_tGPT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayPrefixListReferenceResult
 */
const de_CreateTransitGatewayPrefixListReferenceResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayPrefixListReferenceResult => {
  const contents: any = {};
  if (output[_tGPLR] != null) {
    contents[_TGPLR] = de_TransitGatewayPrefixListReference(output[_tGPLR], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayResult
 */
const de_CreateTransitGatewayResult = (output: any, context: __SerdeContext): CreateTransitGatewayResult => {
  const contents: any = {};
  if (output[_tG] != null) {
    contents[_TGr] = de_TransitGateway(output[_tG], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteResult
 */
const de_CreateTransitGatewayRouteResult = (output: any, context: __SerdeContext): CreateTransitGatewayRouteResult => {
  const contents: any = {};
  if (output[_ro] != null) {
    contents[_Ro] = de_TransitGatewayRoute(output[_ro], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteTableAnnouncementResult
 */
const de_CreateTransitGatewayRouteTableAnnouncementResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayRouteTableAnnouncementResult => {
  const contents: any = {};
  if (output[_tGRTA] != null) {
    contents[_TGRTA] = de_TransitGatewayRouteTableAnnouncement(output[_tGRTA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayRouteTableResult
 */
const de_CreateTransitGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayRouteTableResult => {
  const contents: any = {};
  if (output[_tGRT] != null) {
    contents[_TGRT] = de_TransitGatewayRouteTable(output[_tGRT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateTransitGatewayVpcAttachmentResult
 */
const de_CreateTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): CreateTransitGatewayVpcAttachmentResult => {
  const contents: any = {};
  if (output[_tGVA] != null) {
    contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessEndpointResult
 */
const de_CreateVerifiedAccessEndpointResult = (
  output: any,
  context: __SerdeContext
): CreateVerifiedAccessEndpointResult => {
  const contents: any = {};
  if (output[_vAE] != null) {
    contents[_VAE] = de_VerifiedAccessEndpoint(output[_vAE], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessGroupResult
 */
const de_CreateVerifiedAccessGroupResult = (output: any, context: __SerdeContext): CreateVerifiedAccessGroupResult => {
  const contents: any = {};
  if (output[_vAG] != null) {
    contents[_VAG] = de_VerifiedAccessGroup(output[_vAG], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessInstanceResult
 */
const de_CreateVerifiedAccessInstanceResult = (
  output: any,
  context: __SerdeContext
): CreateVerifiedAccessInstanceResult => {
  const contents: any = {};
  if (output[_vAI] != null) {
    contents[_VAI] = de_VerifiedAccessInstance(output[_vAI], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVerifiedAccessTrustProviderResult
 */
const de_CreateVerifiedAccessTrustProviderResult = (
  output: any,
  context: __SerdeContext
): CreateVerifiedAccessTrustProviderResult => {
  const contents: any = {};
  if (output[_vATP] != null) {
    contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVolumePermission
 */
const de_CreateVolumePermission = (output: any, context: __SerdeContext): CreateVolumePermission => {
  const contents: any = {};
  if (output[_g] != null) {
    contents[_Gr] = __expectString(output[_g]);
  }
  if (output[_uI] != null) {
    contents[_UIs] = __expectString(output[_uI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVolumePermissionList
 */
const de_CreateVolumePermissionList = (output: any, context: __SerdeContext): CreateVolumePermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CreateVolumePermission(entry, context);
    });
};

/**
 * deserializeAws_ec2CreateVpcEndpointConnectionNotificationResult
 */
const de_CreateVpcEndpointConnectionNotificationResult = (
  output: any,
  context: __SerdeContext
): CreateVpcEndpointConnectionNotificationResult => {
  const contents: any = {};
  if (output[_cNo] != null) {
    contents[_CNo] = de_ConnectionNotification(output[_cNo], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVpcEndpointResult
 */
const de_CreateVpcEndpointResult = (output: any, context: __SerdeContext): CreateVpcEndpointResult => {
  const contents: any = {};
  if (output[_vE] != null) {
    contents[_VE] = de_VpcEndpoint(output[_vE], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVpcEndpointServiceConfigurationResult
 */
const de_CreateVpcEndpointServiceConfigurationResult = (
  output: any,
  context: __SerdeContext
): CreateVpcEndpointServiceConfigurationResult => {
  const contents: any = {};
  if (output[_sC] != null) {
    contents[_SCe] = de_ServiceConfiguration(output[_sC], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVpcPeeringConnectionResult
 */
const de_CreateVpcPeeringConnectionResult = (
  output: any,
  context: __SerdeContext
): CreateVpcPeeringConnectionResult => {
  const contents: any = {};
  if (output[_vPC] != null) {
    contents[_VPC] = de_VpcPeeringConnection(output[_vPC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVpcResult
 */
const de_CreateVpcResult = (output: any, context: __SerdeContext): CreateVpcResult => {
  const contents: any = {};
  if (output[_vp] != null) {
    contents[_Vp] = de_Vpc(output[_vp], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVpnConnectionResult
 */
const de_CreateVpnConnectionResult = (output: any, context: __SerdeContext): CreateVpnConnectionResult => {
  const contents: any = {};
  if (output[_vC] != null) {
    contents[_VC] = de_VpnConnection(output[_vC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreateVpnGatewayResult
 */
const de_CreateVpnGatewayResult = (output: any, context: __SerdeContext): CreateVpnGatewayResult => {
  const contents: any = {};
  if (output[_vG] != null) {
    contents[_VG] = de_VpnGateway(output[_vG], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CreditSpecification
 */
const de_CreditSpecification = (output: any, context: __SerdeContext): CreditSpecification => {
  const contents: any = {};
  if (output[_cCp] != null) {
    contents[_CCp] = __expectString(output[_cCp]);
  }
  return contents;
};

/**
 * deserializeAws_ec2CustomerGateway
 */
const de_CustomerGateway = (output: any, context: __SerdeContext): CustomerGateway => {
  const contents: any = {};
  if (output[_bA] != null) {
    contents[_BA] = __expectString(output[_bA]);
  }
  if (output[_cGIu] != null) {
    contents[_CGIu] = __expectString(output[_cGIu]);
  }
  if (output[_iAp] != null) {
    contents[_IAp] = __expectString(output[_iAp]);
  }
  if (output[_cAe] != null) {
    contents[_CA] = __expectString(output[_cAe]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  if (output[_dN] != null) {
    contents[_DN] = __expectString(output[_dN]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2CustomerGatewayList
 */
const de_CustomerGatewayList = (output: any, context: __SerdeContext): CustomerGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_CustomerGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2DataResponse
 */
const de_DataResponse = (output: any, context: __SerdeContext): DataResponse => {
  const contents: any = {};
  if (output[_id] != null) {
    contents[_Id] = __expectString(output[_id]);
  }
  if (output[_s] != null) {
    contents[_S] = __expectString(output[_s]);
  }
  if (output[_d] != null) {
    contents[_D] = __expectString(output[_d]);
  }
  if (output[_met] != null) {
    contents[_Met] = __expectString(output[_met]);
  }
  if (output[_stat] != null) {
    contents[_Sta] = __expectString(output[_stat]);
  }
  if (output[_pe] != null) {
    contents[_Per] = __expectString(output[_pe]);
  }
  if (output.metricPointSet === "") {
    contents[_MPe] = [];
  } else if (output[_mPS] != null && output[_mPS][_i] != null) {
    contents[_MPe] = de_MetricPoints(__getArrayIfSingleItem(output[_mPS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DataResponses
 */
const de_DataResponses = (output: any, context: __SerdeContext): DataResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DataResponse(entry, context);
    });
};

/**
 * deserializeAws_ec2DedicatedHostIdList
 */
const de_DedicatedHostIdList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2DeleteCarrierGatewayResult
 */
const de_DeleteCarrierGatewayResult = (output: any, context: __SerdeContext): DeleteCarrierGatewayResult => {
  const contents: any = {};
  if (output[_cG] != null) {
    contents[_CG] = de_CarrierGateway(output[_cG], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteClientVpnEndpointResult
 */
const de_DeleteClientVpnEndpointResult = (output: any, context: __SerdeContext): DeleteClientVpnEndpointResult => {
  const contents: any = {};
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnEndpointStatus(output[_sta], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteClientVpnRouteResult
 */
const de_DeleteClientVpnRouteResult = (output: any, context: __SerdeContext): DeleteClientVpnRouteResult => {
  const contents: any = {};
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnRouteStatus(output[_sta], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteCoipCidrResult
 */
const de_DeleteCoipCidrResult = (output: any, context: __SerdeContext): DeleteCoipCidrResult => {
  const contents: any = {};
  if (output[_cCoi] != null) {
    contents[_CCo] = de_CoipCidr(output[_cCoi], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteCoipPoolResult
 */
const de_DeleteCoipPoolResult = (output: any, context: __SerdeContext): DeleteCoipPoolResult => {
  const contents: any = {};
  if (output[_cP] != null) {
    contents[_CP] = de_CoipPool(output[_cP], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteEgressOnlyInternetGatewayResult
 */
const de_DeleteEgressOnlyInternetGatewayResult = (
  output: any,
  context: __SerdeContext
): DeleteEgressOnlyInternetGatewayResult => {
  const contents: any = {};
  if (output[_rC] != null) {
    contents[_RCet] = __parseBoolean(output[_rC]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteFleetError
 */
const de_DeleteFleetError = (output: any, context: __SerdeContext): DeleteFleetError => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteFleetErrorItem
 */
const de_DeleteFleetErrorItem = (output: any, context: __SerdeContext): DeleteFleetErrorItem => {
  const contents: any = {};
  if (output[_er] != null) {
    contents[_Er] = de_DeleteFleetError(output[_er], context);
  }
  if (output[_fIl] != null) {
    contents[_FIl] = __expectString(output[_fIl]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteFleetErrorSet
 */
const de_DeleteFleetErrorSet = (output: any, context: __SerdeContext): DeleteFleetErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DeleteFleetErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DeleteFleetsResult
 */
const de_DeleteFleetsResult = (output: any, context: __SerdeContext): DeleteFleetsResult => {
  const contents: any = {};
  if (output.successfulFleetDeletionSet === "") {
    contents[_SFD] = [];
  } else if (output[_sFDS] != null && output[_sFDS][_i] != null) {
    contents[_SFD] = de_DeleteFleetSuccessSet(__getArrayIfSingleItem(output[_sFDS][_i]), context);
  }
  if (output.unsuccessfulFleetDeletionSet === "") {
    contents[_UFD] = [];
  } else if (output[_uFDS] != null && output[_uFDS][_i] != null) {
    contents[_UFD] = de_DeleteFleetErrorSet(__getArrayIfSingleItem(output[_uFDS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteFleetSuccessItem
 */
const de_DeleteFleetSuccessItem = (output: any, context: __SerdeContext): DeleteFleetSuccessItem => {
  const contents: any = {};
  if (output[_cFS] != null) {
    contents[_CFS] = __expectString(output[_cFS]);
  }
  if (output[_pFS] != null) {
    contents[_PFS] = __expectString(output[_pFS]);
  }
  if (output[_fIl] != null) {
    contents[_FIl] = __expectString(output[_fIl]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteFleetSuccessSet
 */
const de_DeleteFleetSuccessSet = (output: any, context: __SerdeContext): DeleteFleetSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DeleteFleetSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DeleteFlowLogsResult
 */
const de_DeleteFlowLogsResult = (output: any, context: __SerdeContext): DeleteFlowLogsResult => {
  const contents: any = {};
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteFpgaImageResult
 */
const de_DeleteFpgaImageResult = (output: any, context: __SerdeContext): DeleteFpgaImageResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteInstanceConnectEndpointResult
 */
const de_DeleteInstanceConnectEndpointResult = (
  output: any,
  context: __SerdeContext
): DeleteInstanceConnectEndpointResult => {
  const contents: any = {};
  if (output[_iCE] != null) {
    contents[_ICE] = de_Ec2InstanceConnectEndpoint(output[_iCE], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteInstanceEventWindowResult
 */
const de_DeleteInstanceEventWindowResult = (output: any, context: __SerdeContext): DeleteInstanceEventWindowResult => {
  const contents: any = {};
  if (output[_iEWS] != null) {
    contents[_IEWS] = de_InstanceEventWindowStateChange(output[_iEWS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteIpamPoolResult
 */
const de_DeleteIpamPoolResult = (output: any, context: __SerdeContext): DeleteIpamPoolResult => {
  const contents: any = {};
  if (output[_iPp] != null) {
    contents[_IPpa] = de_IpamPool(output[_iPp], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteIpamResourceDiscoveryResult
 */
const de_DeleteIpamResourceDiscoveryResult = (
  output: any,
  context: __SerdeContext
): DeleteIpamResourceDiscoveryResult => {
  const contents: any = {};
  if (output[_iRD] != null) {
    contents[_IRD] = de_IpamResourceDiscovery(output[_iRD], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteIpamResult
 */
const de_DeleteIpamResult = (output: any, context: __SerdeContext): DeleteIpamResult => {
  const contents: any = {};
  if (output[_ip] != null) {
    contents[_Ipa] = de_Ipam(output[_ip], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteIpamScopeResult
 */
const de_DeleteIpamScopeResult = (output: any, context: __SerdeContext): DeleteIpamScopeResult => {
  const contents: any = {};
  if (output[_iS] != null) {
    contents[_ISpa] = de_IpamScope(output[_iS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteKeyPairResult
 */
const de_DeleteKeyPairResult = (output: any, context: __SerdeContext): DeleteKeyPairResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  if (output[_kPI] != null) {
    contents[_KPI] = __expectString(output[_kPI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateResult
 */
const de_DeleteLaunchTemplateResult = (output: any, context: __SerdeContext): DeleteLaunchTemplateResult => {
  const contents: any = {};
  if (output[_lT] != null) {
    contents[_LTa] = de_LaunchTemplate(output[_lT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorItem
 */
const de_DeleteLaunchTemplateVersionsResponseErrorItem = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResponseErrorItem => {
  const contents: any = {};
  if (output[_lTI] != null) {
    contents[_LTI] = __expectString(output[_lTI]);
  }
  if (output[_lTN] != null) {
    contents[_LTN] = __expectString(output[_lTN]);
  }
  if (output[_vNe] != null) {
    contents[_VNe] = __strictParseLong(output[_vNe]) as number;
  }
  if (output[_rE] != null) {
    contents[_REe] = de_ResponseError(output[_rE], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsResponseErrorSet
 */
const de_DeleteLaunchTemplateVersionsResponseErrorSet = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResponseErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DeleteLaunchTemplateVersionsResponseErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessItem
 */
const de_DeleteLaunchTemplateVersionsResponseSuccessItem = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResponseSuccessItem => {
  const contents: any = {};
  if (output[_lTI] != null) {
    contents[_LTI] = __expectString(output[_lTI]);
  }
  if (output[_lTN] != null) {
    contents[_LTN] = __expectString(output[_lTN]);
  }
  if (output[_vNe] != null) {
    contents[_VNe] = __strictParseLong(output[_vNe]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsResponseSuccessSet
 */
const de_DeleteLaunchTemplateVersionsResponseSuccessSet = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResponseSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DeleteLaunchTemplateVersionsResponseSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DeleteLaunchTemplateVersionsResult
 */
const de_DeleteLaunchTemplateVersionsResult = (
  output: any,
  context: __SerdeContext
): DeleteLaunchTemplateVersionsResult => {
  const contents: any = {};
  if (output.successfullyDeletedLaunchTemplateVersionSet === "") {
    contents[_SDLTV] = [];
  } else if (output[_sDLTVS] != null && output[_sDLTVS][_i] != null) {
    contents[_SDLTV] = de_DeleteLaunchTemplateVersionsResponseSuccessSet(
      __getArrayIfSingleItem(output[_sDLTVS][_i]),
      context
    );
  }
  if (output.unsuccessfullyDeletedLaunchTemplateVersionSet === "") {
    contents[_UDLTV] = [];
  } else if (output[_uDLTVS] != null && output[_uDLTVS][_i] != null) {
    contents[_UDLTV] = de_DeleteLaunchTemplateVersionsResponseErrorSet(
      __getArrayIfSingleItem(output[_uDLTVS][_i]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteResult
 */
const de_DeleteLocalGatewayRouteResult = (output: any, context: __SerdeContext): DeleteLocalGatewayRouteResult => {
  const contents: any = {};
  if (output[_ro] != null) {
    contents[_Ro] = de_LocalGatewayRoute(output[_ro], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableResult
 */
const de_DeleteLocalGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): DeleteLocalGatewayRouteTableResult => {
  const contents: any = {};
  if (output[_lGRT] != null) {
    contents[_LGRT] = de_LocalGatewayRouteTable(output[_lGRT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult
 */
const de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult = (
  output: any,
  context: __SerdeContext
): DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult => {
  const contents: any = {};
  if (output[_lGRTVIGA] != null) {
    contents[_LGRTVIGA] = de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(output[_lGRTVIGA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteLocalGatewayRouteTableVpcAssociationResult
 */
const de_DeleteLocalGatewayRouteTableVpcAssociationResult = (
  output: any,
  context: __SerdeContext
): DeleteLocalGatewayRouteTableVpcAssociationResult => {
  const contents: any = {};
  if (output[_lGRTVA] != null) {
    contents[_LGRTVA] = de_LocalGatewayRouteTableVpcAssociation(output[_lGRTVA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteManagedPrefixListResult
 */
const de_DeleteManagedPrefixListResult = (output: any, context: __SerdeContext): DeleteManagedPrefixListResult => {
  const contents: any = {};
  if (output[_pL] != null) {
    contents[_PLr] = de_ManagedPrefixList(output[_pL], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteNatGatewayResult
 */
const de_DeleteNatGatewayResult = (output: any, context: __SerdeContext): DeleteNatGatewayResult => {
  const contents: any = {};
  if (output[_nGI] != null) {
    contents[_NGI] = __expectString(output[_nGI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAccessScopeAnalysisResult
 */
const de_DeleteNetworkInsightsAccessScopeAnalysisResult = (
  output: any,
  context: __SerdeContext
): DeleteNetworkInsightsAccessScopeAnalysisResult => {
  const contents: any = {};
  if (output[_nIASAI] != null) {
    contents[_NIASAI] = __expectString(output[_nIASAI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAccessScopeResult
 */
const de_DeleteNetworkInsightsAccessScopeResult = (
  output: any,
  context: __SerdeContext
): DeleteNetworkInsightsAccessScopeResult => {
  const contents: any = {};
  if (output[_nIASI] != null) {
    contents[_NIASI] = __expectString(output[_nIASI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsAnalysisResult
 */
const de_DeleteNetworkInsightsAnalysisResult = (
  output: any,
  context: __SerdeContext
): DeleteNetworkInsightsAnalysisResult => {
  const contents: any = {};
  if (output[_nIAI] != null) {
    contents[_NIAI] = __expectString(output[_nIAI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteNetworkInsightsPathResult
 */
const de_DeleteNetworkInsightsPathResult = (output: any, context: __SerdeContext): DeleteNetworkInsightsPathResult => {
  const contents: any = {};
  if (output[_nIPI] != null) {
    contents[_NIPI] = __expectString(output[_nIPI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteNetworkInterfacePermissionResult
 */
const de_DeleteNetworkInterfacePermissionResult = (
  output: any,
  context: __SerdeContext
): DeleteNetworkInterfacePermissionResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeletePublicIpv4PoolResult
 */
const de_DeletePublicIpv4PoolResult = (output: any, context: __SerdeContext): DeletePublicIpv4PoolResult => {
  const contents: any = {};
  if (output[_rV] != null) {
    contents[_RV] = __parseBoolean(output[_rV]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteQueuedReservedInstancesError
 */
const de_DeleteQueuedReservedInstancesError = (
  output: any,
  context: __SerdeContext
): DeleteQueuedReservedInstancesError => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteQueuedReservedInstancesResult
 */
const de_DeleteQueuedReservedInstancesResult = (
  output: any,
  context: __SerdeContext
): DeleteQueuedReservedInstancesResult => {
  const contents: any = {};
  if (output.successfulQueuedPurchaseDeletionSet === "") {
    contents[_SQPD] = [];
  } else if (output[_sQPDS] != null && output[_sQPDS][_i] != null) {
    contents[_SQPD] = de_SuccessfulQueuedPurchaseDeletionSet(__getArrayIfSingleItem(output[_sQPDS][_i]), context);
  }
  if (output.failedQueuedPurchaseDeletionSet === "") {
    contents[_FQPD] = [];
  } else if (output[_fQPDS] != null && output[_fQPDS][_i] != null) {
    contents[_FQPD] = de_FailedQueuedPurchaseDeletionSet(__getArrayIfSingleItem(output[_fQPDS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteSubnetCidrReservationResult
 */
const de_DeleteSubnetCidrReservationResult = (
  output: any,
  context: __SerdeContext
): DeleteSubnetCidrReservationResult => {
  const contents: any = {};
  if (output[_dSCR] != null) {
    contents[_DSCRe] = de_SubnetCidrReservation(output[_dSCR], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorFilterResult
 */
const de_DeleteTrafficMirrorFilterResult = (output: any, context: __SerdeContext): DeleteTrafficMirrorFilterResult => {
  const contents: any = {};
  if (output[_tMFI] != null) {
    contents[_TMFI] = __expectString(output[_tMFI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorFilterRuleResult
 */
const de_DeleteTrafficMirrorFilterRuleResult = (
  output: any,
  context: __SerdeContext
): DeleteTrafficMirrorFilterRuleResult => {
  const contents: any = {};
  if (output[_tMFRI] != null) {
    contents[_TMFRI] = __expectString(output[_tMFRI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorSessionResult
 */
const de_DeleteTrafficMirrorSessionResult = (
  output: any,
  context: __SerdeContext
): DeleteTrafficMirrorSessionResult => {
  const contents: any = {};
  if (output[_tMSI] != null) {
    contents[_TMSI] = __expectString(output[_tMSI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTrafficMirrorTargetResult
 */
const de_DeleteTrafficMirrorTargetResult = (output: any, context: __SerdeContext): DeleteTrafficMirrorTargetResult => {
  const contents: any = {};
  if (output[_tMTI] != null) {
    contents[_TMTI] = __expectString(output[_tMTI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayConnectPeerResult
 */
const de_DeleteTransitGatewayConnectPeerResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayConnectPeerResult => {
  const contents: any = {};
  if (output[_tGCP] != null) {
    contents[_TGCP] = de_TransitGatewayConnectPeer(output[_tGCP], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayConnectResult
 */
const de_DeleteTransitGatewayConnectResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayConnectResult => {
  const contents: any = {};
  if (output[_tGC] != null) {
    contents[_TGCr] = de_TransitGatewayConnect(output[_tGC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayMulticastDomainResult
 */
const de_DeleteTransitGatewayMulticastDomainResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayMulticastDomainResult => {
  const contents: any = {};
  if (output[_tGMD] != null) {
    contents[_TGMD] = de_TransitGatewayMulticastDomain(output[_tGMD], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPeeringAttachmentResult
 */
const de_DeleteTransitGatewayPeeringAttachmentResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayPeeringAttachmentResult => {
  const contents: any = {};
  if (output[_tGPA] != null) {
    contents[_TGPA] = de_TransitGatewayPeeringAttachment(output[_tGPA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPolicyTableResult
 */
const de_DeleteTransitGatewayPolicyTableResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayPolicyTableResult => {
  const contents: any = {};
  if (output[_tGPT] != null) {
    contents[_TGPT] = de_TransitGatewayPolicyTable(output[_tGPT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayPrefixListReferenceResult
 */
const de_DeleteTransitGatewayPrefixListReferenceResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayPrefixListReferenceResult => {
  const contents: any = {};
  if (output[_tGPLR] != null) {
    contents[_TGPLR] = de_TransitGatewayPrefixListReference(output[_tGPLR], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayResult
 */
const de_DeleteTransitGatewayResult = (output: any, context: __SerdeContext): DeleteTransitGatewayResult => {
  const contents: any = {};
  if (output[_tG] != null) {
    contents[_TGr] = de_TransitGateway(output[_tG], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteResult
 */
const de_DeleteTransitGatewayRouteResult = (output: any, context: __SerdeContext): DeleteTransitGatewayRouteResult => {
  const contents: any = {};
  if (output[_ro] != null) {
    contents[_Ro] = de_TransitGatewayRoute(output[_ro], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteTableAnnouncementResult
 */
const de_DeleteTransitGatewayRouteTableAnnouncementResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayRouteTableAnnouncementResult => {
  const contents: any = {};
  if (output[_tGRTA] != null) {
    contents[_TGRTA] = de_TransitGatewayRouteTableAnnouncement(output[_tGRTA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayRouteTableResult
 */
const de_DeleteTransitGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayRouteTableResult => {
  const contents: any = {};
  if (output[_tGRT] != null) {
    contents[_TGRT] = de_TransitGatewayRouteTable(output[_tGRT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteTransitGatewayVpcAttachmentResult
 */
const de_DeleteTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): DeleteTransitGatewayVpcAttachmentResult => {
  const contents: any = {};
  if (output[_tGVA] != null) {
    contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessEndpointResult
 */
const de_DeleteVerifiedAccessEndpointResult = (
  output: any,
  context: __SerdeContext
): DeleteVerifiedAccessEndpointResult => {
  const contents: any = {};
  if (output[_vAE] != null) {
    contents[_VAE] = de_VerifiedAccessEndpoint(output[_vAE], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessGroupResult
 */
const de_DeleteVerifiedAccessGroupResult = (output: any, context: __SerdeContext): DeleteVerifiedAccessGroupResult => {
  const contents: any = {};
  if (output[_vAG] != null) {
    contents[_VAG] = de_VerifiedAccessGroup(output[_vAG], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessInstanceResult
 */
const de_DeleteVerifiedAccessInstanceResult = (
  output: any,
  context: __SerdeContext
): DeleteVerifiedAccessInstanceResult => {
  const contents: any = {};
  if (output[_vAI] != null) {
    contents[_VAI] = de_VerifiedAccessInstance(output[_vAI], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVerifiedAccessTrustProviderResult
 */
const de_DeleteVerifiedAccessTrustProviderResult = (
  output: any,
  context: __SerdeContext
): DeleteVerifiedAccessTrustProviderResult => {
  const contents: any = {};
  if (output[_vATP] != null) {
    contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVpcEndpointConnectionNotificationsResult
 */
const de_DeleteVpcEndpointConnectionNotificationsResult = (
  output: any,
  context: __SerdeContext
): DeleteVpcEndpointConnectionNotificationsResult => {
  const contents: any = {};
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVpcEndpointServiceConfigurationsResult
 */
const de_DeleteVpcEndpointServiceConfigurationsResult = (
  output: any,
  context: __SerdeContext
): DeleteVpcEndpointServiceConfigurationsResult => {
  const contents: any = {};
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVpcEndpointsResult
 */
const de_DeleteVpcEndpointsResult = (output: any, context: __SerdeContext): DeleteVpcEndpointsResult => {
  const contents: any = {};
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeleteVpcPeeringConnectionResult
 */
const de_DeleteVpcPeeringConnectionResult = (
  output: any,
  context: __SerdeContext
): DeleteVpcPeeringConnectionResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeprovisionByoipCidrResult
 */
const de_DeprovisionByoipCidrResult = (output: any, context: __SerdeContext): DeprovisionByoipCidrResult => {
  const contents: any = {};
  if (output[_bC] != null) {
    contents[_BC] = de_ByoipCidr(output[_bC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeprovisionedAddressSet
 */
const de_DeprovisionedAddressSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2DeprovisionIpamByoasnResult
 */
const de_DeprovisionIpamByoasnResult = (output: any, context: __SerdeContext): DeprovisionIpamByoasnResult => {
  const contents: any = {};
  if (output[_b] != null) {
    contents[_Byo] = de_Byoasn(output[_b], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeprovisionIpamPoolCidrResult
 */
const de_DeprovisionIpamPoolCidrResult = (output: any, context: __SerdeContext): DeprovisionIpamPoolCidrResult => {
  const contents: any = {};
  if (output[_iPC] != null) {
    contents[_IPCpa] = de_IpamPoolCidr(output[_iPC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeprovisionPublicIpv4PoolCidrResult
 */
const de_DeprovisionPublicIpv4PoolCidrResult = (
  output: any,
  context: __SerdeContext
): DeprovisionPublicIpv4PoolCidrResult => {
  const contents: any = {};
  if (output[_pIo] != null) {
    contents[_PIo] = __expectString(output[_pIo]);
  }
  if (output.deprovisionedAddressSet === "") {
    contents[_DAep] = [];
  } else if (output[_dASe] != null && output[_dASe][_i] != null) {
    contents[_DAep] = de_DeprovisionedAddressSet(__getArrayIfSingleItem(output[_dASe][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeregisterInstanceEventNotificationAttributesResult
 */
const de_DeregisterInstanceEventNotificationAttributesResult = (
  output: any,
  context: __SerdeContext
): DeregisterInstanceEventNotificationAttributesResult => {
  const contents: any = {};
  if (output[_iTA] != null) {
    contents[_ITA] = de_InstanceTagNotificationAttribute(output[_iTA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeregisterTransitGatewayMulticastGroupMembersResult
 */
const de_DeregisterTransitGatewayMulticastGroupMembersResult = (
  output: any,
  context: __SerdeContext
): DeregisterTransitGatewayMulticastGroupMembersResult => {
  const contents: any = {};
  if (output[_dMGM] != null) {
    contents[_DMGM] = de_TransitGatewayMulticastDeregisteredGroupMembers(output[_dMGM], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeregisterTransitGatewayMulticastGroupSourcesResult
 */
const de_DeregisterTransitGatewayMulticastGroupSourcesResult = (
  output: any,
  context: __SerdeContext
): DeregisterTransitGatewayMulticastGroupSourcesResult => {
  const contents: any = {};
  if (output[_dMGS] != null) {
    contents[_DMGS] = de_TransitGatewayMulticastDeregisteredGroupSources(output[_dMGS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAccountAttributesResult
 */
const de_DescribeAccountAttributesResult = (output: any, context: __SerdeContext): DescribeAccountAttributesResult => {
  const contents: any = {};
  if (output.accountAttributeSet === "") {
    contents[_AAcc] = [];
  } else if (output[_aASc] != null && output[_aASc][_i] != null) {
    contents[_AAcc] = de_AccountAttributeList(__getArrayIfSingleItem(output[_aASc][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAddressesAttributeResult
 */
const de_DescribeAddressesAttributeResult = (
  output: any,
  context: __SerdeContext
): DescribeAddressesAttributeResult => {
  const contents: any = {};
  if (output.addressSet === "") {
    contents[_Addr] = [];
  } else if (output[_aSd] != null && output[_aSd][_i] != null) {
    contents[_Addr] = de_AddressSet(__getArrayIfSingleItem(output[_aSd][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAddressesResult
 */
const de_DescribeAddressesResult = (output: any, context: __SerdeContext): DescribeAddressesResult => {
  const contents: any = {};
  if (output.addressesSet === "") {
    contents[_Addr] = [];
  } else if (output[_aSdd] != null && output[_aSdd][_i] != null) {
    contents[_Addr] = de_AddressList(__getArrayIfSingleItem(output[_aSdd][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAddressTransfersResult
 */
const de_DescribeAddressTransfersResult = (output: any, context: __SerdeContext): DescribeAddressTransfersResult => {
  const contents: any = {};
  if (output.addressTransferSet === "") {
    contents[_ATddr] = [];
  } else if (output[_aTSd] != null && output[_aTSd][_i] != null) {
    contents[_ATddr] = de_AddressTransferList(__getArrayIfSingleItem(output[_aTSd][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAggregateIdFormatResult
 */
const de_DescribeAggregateIdFormatResult = (output: any, context: __SerdeContext): DescribeAggregateIdFormatResult => {
  const contents: any = {};
  if (output[_uLIA] != null) {
    contents[_ULIA] = __parseBoolean(output[_uLIA]);
  }
  if (output.statusSet === "") {
    contents[_Status] = [];
  } else if (output[_sSt] != null && output[_sSt][_i] != null) {
    contents[_Status] = de_IdFormatList(__getArrayIfSingleItem(output[_sSt][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAvailabilityZonesResult
 */
const de_DescribeAvailabilityZonesResult = (output: any, context: __SerdeContext): DescribeAvailabilityZonesResult => {
  const contents: any = {};
  if (output.availabilityZoneInfo === "") {
    contents[_AZv] = [];
  } else if (output[_aZIv] != null && output[_aZIv][_i] != null) {
    contents[_AZv] = de_AvailabilityZoneList(__getArrayIfSingleItem(output[_aZIv][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeAwsNetworkPerformanceMetricSubscriptionsResult
 */
const de_DescribeAwsNetworkPerformanceMetricSubscriptionsResult = (
  output: any,
  context: __SerdeContext
): DescribeAwsNetworkPerformanceMetricSubscriptionsResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.subscriptionSet === "") {
    contents[_Sub] = [];
  } else if (output[_sSu] != null && output[_sSu][_i] != null) {
    contents[_Sub] = de_SubscriptionList(__getArrayIfSingleItem(output[_sSu][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeBundleTasksResult
 */
const de_DescribeBundleTasksResult = (output: any, context: __SerdeContext): DescribeBundleTasksResult => {
  const contents: any = {};
  if (output.bundleInstanceTasksSet === "") {
    contents[_BTun] = [];
  } else if (output[_bITS] != null && output[_bITS][_i] != null) {
    contents[_BTun] = de_BundleTaskList(__getArrayIfSingleItem(output[_bITS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeByoipCidrsResult
 */
const de_DescribeByoipCidrsResult = (output: any, context: __SerdeContext): DescribeByoipCidrsResult => {
  const contents: any = {};
  if (output.byoipCidrSet === "") {
    contents[_BCy] = [];
  } else if (output[_bCS] != null && output[_bCS][_i] != null) {
    contents[_BCy] = de_ByoipCidrSet(__getArrayIfSingleItem(output[_bCS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeCapacityBlockOfferingsResult
 */
const de_DescribeCapacityBlockOfferingsResult = (
  output: any,
  context: __SerdeContext
): DescribeCapacityBlockOfferingsResult => {
  const contents: any = {};
  if (output.capacityBlockOfferingSet === "") {
    contents[_CBO] = [];
  } else if (output[_cBOS] != null && output[_cBOS][_i] != null) {
    contents[_CBO] = de_CapacityBlockOfferingSet(__getArrayIfSingleItem(output[_cBOS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeCapacityReservationFleetsResult
 */
const de_DescribeCapacityReservationFleetsResult = (
  output: any,
  context: __SerdeContext
): DescribeCapacityReservationFleetsResult => {
  const contents: any = {};
  if (output.capacityReservationFleetSet === "") {
    contents[_CRF] = [];
  } else if (output[_cRFS] != null && output[_cRFS][_i] != null) {
    contents[_CRF] = de_CapacityReservationFleetSet(__getArrayIfSingleItem(output[_cRFS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeCapacityReservationsResult
 */
const de_DescribeCapacityReservationsResult = (
  output: any,
  context: __SerdeContext
): DescribeCapacityReservationsResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.capacityReservationSet === "") {
    contents[_CRapac] = [];
  } else if (output[_cRS] != null && output[_cRS][_i] != null) {
    contents[_CRapac] = de_CapacityReservationSet(__getArrayIfSingleItem(output[_cRS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeCarrierGatewaysResult
 */
const de_DescribeCarrierGatewaysResult = (output: any, context: __SerdeContext): DescribeCarrierGatewaysResult => {
  const contents: any = {};
  if (output.carrierGatewaySet === "") {
    contents[_CGa] = [];
  } else if (output[_cGS] != null && output[_cGS][_i] != null) {
    contents[_CGa] = de_CarrierGatewaySet(__getArrayIfSingleItem(output[_cGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeClassicLinkInstancesResult
 */
const de_DescribeClassicLinkInstancesResult = (
  output: any,
  context: __SerdeContext
): DescribeClassicLinkInstancesResult => {
  const contents: any = {};
  if (output.instancesSet === "") {
    contents[_In] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_In] = de_ClassicLinkInstanceList(__getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeClientVpnAuthorizationRulesResult
 */
const de_DescribeClientVpnAuthorizationRulesResult = (
  output: any,
  context: __SerdeContext
): DescribeClientVpnAuthorizationRulesResult => {
  const contents: any = {};
  if (output.authorizationRule === "") {
    contents[_ARut] = [];
  } else if (output[_aR] != null && output[_aR][_i] != null) {
    contents[_ARut] = de_AuthorizationRuleSet(__getArrayIfSingleItem(output[_aR][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeClientVpnConnectionsResult
 */
const de_DescribeClientVpnConnectionsResult = (
  output: any,
  context: __SerdeContext
): DescribeClientVpnConnectionsResult => {
  const contents: any = {};
  if (output.connections === "") {
    contents[_Conn] = [];
  } else if (output[_con] != null && output[_con][_i] != null) {
    contents[_Conn] = de_ClientVpnConnectionSet(__getArrayIfSingleItem(output[_con][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeClientVpnEndpointsResult
 */
const de_DescribeClientVpnEndpointsResult = (
  output: any,
  context: __SerdeContext
): DescribeClientVpnEndpointsResult => {
  const contents: any = {};
  if (output.clientVpnEndpoint === "") {
    contents[_CVEl] = [];
  } else if (output[_cVE] != null && output[_cVE][_i] != null) {
    contents[_CVEl] = de_EndpointSet(__getArrayIfSingleItem(output[_cVE][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeClientVpnRoutesResult
 */
const de_DescribeClientVpnRoutesResult = (output: any, context: __SerdeContext): DescribeClientVpnRoutesResult => {
  const contents: any = {};
  if (output.routes === "") {
    contents[_Rou] = [];
  } else if (output[_rou] != null && output[_rou][_i] != null) {
    contents[_Rou] = de_ClientVpnRouteSet(__getArrayIfSingleItem(output[_rou][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeClientVpnTargetNetworksResult
 */
const de_DescribeClientVpnTargetNetworksResult = (
  output: any,
  context: __SerdeContext
): DescribeClientVpnTargetNetworksResult => {
  const contents: any = {};
  if (output.clientVpnTargetNetworks === "") {
    contents[_CVTN] = [];
  } else if (output[_cVTN] != null && output[_cVTN][_i] != null) {
    contents[_CVTN] = de_TargetNetworkSet(__getArrayIfSingleItem(output[_cVTN][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeCoipPoolsResult
 */
const de_DescribeCoipPoolsResult = (output: any, context: __SerdeContext): DescribeCoipPoolsResult => {
  const contents: any = {};
  if (output.coipPoolSet === "") {
    contents[_CPo] = [];
  } else if (output[_cPS] != null && output[_cPS][_i] != null) {
    contents[_CPo] = de_CoipPoolSet(__getArrayIfSingleItem(output[_cPS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeConversionTaskList
 */
const de_DescribeConversionTaskList = (output: any, context: __SerdeContext): ConversionTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ConversionTask(entry, context);
    });
};

/**
 * deserializeAws_ec2DescribeConversionTasksResult
 */
const de_DescribeConversionTasksResult = (output: any, context: __SerdeContext): DescribeConversionTasksResult => {
  const contents: any = {};
  if (output.conversionTasks === "") {
    contents[_CTon] = [];
  } else if (output[_cTo] != null && output[_cTo][_i] != null) {
    contents[_CTon] = de_DescribeConversionTaskList(__getArrayIfSingleItem(output[_cTo][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeCustomerGatewaysResult
 */
const de_DescribeCustomerGatewaysResult = (output: any, context: __SerdeContext): DescribeCustomerGatewaysResult => {
  const contents: any = {};
  if (output.customerGatewaySet === "") {
    contents[_CGus] = [];
  } else if (output[_cGSu] != null && output[_cGSu][_i] != null) {
    contents[_CGus] = de_CustomerGatewayList(__getArrayIfSingleItem(output[_cGSu][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeDhcpOptionsResult
 */
const de_DescribeDhcpOptionsResult = (output: any, context: __SerdeContext): DescribeDhcpOptionsResult => {
  const contents: any = {};
  if (output.dhcpOptionsSet === "") {
    contents[_DOh] = [];
  } else if (output[_dOS] != null && output[_dOS][_i] != null) {
    contents[_DOh] = de_DhcpOptionsList(__getArrayIfSingleItem(output[_dOS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeEgressOnlyInternetGatewaysResult
 */
const de_DescribeEgressOnlyInternetGatewaysResult = (
  output: any,
  context: __SerdeContext
): DescribeEgressOnlyInternetGatewaysResult => {
  const contents: any = {};
  if (output.egressOnlyInternetGatewaySet === "") {
    contents[_EOIGg] = [];
  } else if (output[_eOIGS] != null && output[_eOIGS][_i] != null) {
    contents[_EOIGg] = de_EgressOnlyInternetGatewayList(__getArrayIfSingleItem(output[_eOIGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeElasticGpusResult
 */
const de_DescribeElasticGpusResult = (output: any, context: __SerdeContext): DescribeElasticGpusResult => {
  const contents: any = {};
  if (output.elasticGpuSet === "") {
    contents[_EGSla] = [];
  } else if (output[_eGS] != null && output[_eGS][_i] != null) {
    contents[_EGSla] = de_ElasticGpuSet(__getArrayIfSingleItem(output[_eGS][_i]), context);
  }
  if (output[_mR] != null) {
    contents[_MR] = __strictParseInt32(output[_mR]) as number;
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeExportImageTasksResult
 */
const de_DescribeExportImageTasksResult = (output: any, context: __SerdeContext): DescribeExportImageTasksResult => {
  const contents: any = {};
  if (output.exportImageTaskSet === "") {
    contents[_EITx] = [];
  } else if (output[_eITS] != null && output[_eITS][_i] != null) {
    contents[_EITx] = de_ExportImageTaskList(__getArrayIfSingleItem(output[_eITS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeExportTasksResult
 */
const de_DescribeExportTasksResult = (output: any, context: __SerdeContext): DescribeExportTasksResult => {
  const contents: any = {};
  if (output.exportTaskSet === "") {
    contents[_ETxpo] = [];
  } else if (output[_eTS] != null && output[_eTS][_i] != null) {
    contents[_ETxpo] = de_ExportTaskList(__getArrayIfSingleItem(output[_eTS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFastLaunchImagesResult
 */
const de_DescribeFastLaunchImagesResult = (output: any, context: __SerdeContext): DescribeFastLaunchImagesResult => {
  const contents: any = {};
  if (output.fastLaunchImageSet === "") {
    contents[_FLIa] = [];
  } else if (output[_fLISa] != null && output[_fLISa][_i] != null) {
    contents[_FLIa] = de_DescribeFastLaunchImagesSuccessSet(__getArrayIfSingleItem(output[_fLISa][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFastLaunchImagesSuccessItem
 */
const de_DescribeFastLaunchImagesSuccessItem = (
  output: any,
  context: __SerdeContext
): DescribeFastLaunchImagesSuccessItem => {
  const contents: any = {};
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_sCn] != null) {
    contents[_SCn] = de_FastLaunchSnapshotConfigurationResponse(output[_sCn], context);
  }
  if (output[_lT] != null) {
    contents[_LTa] = de_FastLaunchLaunchTemplateSpecificationResponse(output[_lT], context);
  }
  if (output[_mPL] != null) {
    contents[_MPL] = __strictParseInt32(output[_mPL]) as number;
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sTR] != null) {
    contents[_STRt] = __expectString(output[_sTR]);
  }
  if (output[_sTT] != null) {
    contents[_STT] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sTT]));
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFastLaunchImagesSuccessSet
 */
const de_DescribeFastLaunchImagesSuccessSet = (
  output: any,
  context: __SerdeContext
): DescribeFastLaunchImagesSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DescribeFastLaunchImagesSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DescribeFastSnapshotRestoresResult
 */
const de_DescribeFastSnapshotRestoresResult = (
  output: any,
  context: __SerdeContext
): DescribeFastSnapshotRestoresResult => {
  const contents: any = {};
  if (output.fastSnapshotRestoreSet === "") {
    contents[_FSR] = [];
  } else if (output[_fSRS] != null && output[_fSRS][_i] != null) {
    contents[_FSR] = de_DescribeFastSnapshotRestoreSuccessSet(__getArrayIfSingleItem(output[_fSRS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFastSnapshotRestoreSuccessItem
 */
const de_DescribeFastSnapshotRestoreSuccessItem = (
  output: any,
  context: __SerdeContext
): DescribeFastSnapshotRestoreSuccessItem => {
  const contents: any = {};
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sTR] != null) {
    contents[_STRt] = __expectString(output[_sTR]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_oAw] != null) {
    contents[_OAw] = __expectString(output[_oAw]);
  }
  if (output[_eTn] != null) {
    contents[_ETna] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eTn]));
  }
  if (output[_oT] != null) {
    contents[_OTpt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_oT]));
  }
  if (output[_eTna] != null) {
    contents[_ETnab] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eTna]));
  }
  if (output[_dTi] != null) {
    contents[_DTi] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_dTi]));
  }
  if (output[_dTis] != null) {
    contents[_DTis] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_dTis]));
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFastSnapshotRestoreSuccessSet
 */
const de_DescribeFastSnapshotRestoreSuccessSet = (
  output: any,
  context: __SerdeContext
): DescribeFastSnapshotRestoreSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DescribeFastSnapshotRestoreSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DescribeFleetError
 */
const de_DescribeFleetError = (output: any, context: __SerdeContext): DescribeFleetError => {
  const contents: any = {};
  if (output[_lTAO] != null) {
    contents[_LTAO] = de_LaunchTemplateAndOverridesResponse(output[_lTAO], context);
  }
  if (output[_l] != null) {
    contents[_Li] = __expectString(output[_l]);
  }
  if (output[_eC] != null) {
    contents[_EC] = __expectString(output[_eC]);
  }
  if (output[_eM] != null) {
    contents[_EM] = __expectString(output[_eM]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFleetHistoryResult
 */
const de_DescribeFleetHistoryResult = (output: any, context: __SerdeContext): DescribeFleetHistoryResult => {
  const contents: any = {};
  if (output.historyRecordSet === "") {
    contents[_HRi] = [];
  } else if (output[_hRS] != null && output[_hRS][_i] != null) {
    contents[_HRi] = de_HistoryRecordSet(__getArrayIfSingleItem(output[_hRS][_i]), context);
  }
  if (output[_lET] != null) {
    contents[_LET] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lET]));
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output[_fIl] != null) {
    contents[_FIl] = __expectString(output[_fIl]);
  }
  if (output[_sT] != null) {
    contents[_STt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFleetInstancesResult
 */
const de_DescribeFleetInstancesResult = (output: any, context: __SerdeContext): DescribeFleetInstancesResult => {
  const contents: any = {};
  if (output.activeInstanceSet === "") {
    contents[_AIc] = [];
  } else if (output[_aIS] != null && output[_aIS][_i] != null) {
    contents[_AIc] = de_ActiveInstanceSet(__getArrayIfSingleItem(output[_aIS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output[_fIl] != null) {
    contents[_FIl] = __expectString(output[_fIl]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFleetsErrorSet
 */
const de_DescribeFleetsErrorSet = (output: any, context: __SerdeContext): DescribeFleetError[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DescribeFleetError(entry, context);
    });
};

/**
 * deserializeAws_ec2DescribeFleetsInstances
 */
const de_DescribeFleetsInstances = (output: any, context: __SerdeContext): DescribeFleetsInstances => {
  const contents: any = {};
  if (output[_lTAO] != null) {
    contents[_LTAO] = de_LaunchTemplateAndOverridesResponse(output[_lTAO], context);
  }
  if (output[_l] != null) {
    contents[_Li] = __expectString(output[_l]);
  }
  if (output.instanceIds === "") {
    contents[_IIns] = [];
  } else if (output[_iIn] != null && output[_iIn][_i] != null) {
    contents[_IIns] = de_InstanceIdsSet(__getArrayIfSingleItem(output[_iIn][_i]), context);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = __expectString(output[_pl]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFleetsInstancesSet
 */
const de_DescribeFleetsInstancesSet = (output: any, context: __SerdeContext): DescribeFleetsInstances[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DescribeFleetsInstances(entry, context);
    });
};

/**
 * deserializeAws_ec2DescribeFleetsResult
 */
const de_DescribeFleetsResult = (output: any, context: __SerdeContext): DescribeFleetsResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.fleetSet === "") {
    contents[_Fl] = [];
  } else if (output[_fS] != null && output[_fS][_i] != null) {
    contents[_Fl] = de_FleetSet(__getArrayIfSingleItem(output[_fS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFlowLogsResult
 */
const de_DescribeFlowLogsResult = (output: any, context: __SerdeContext): DescribeFlowLogsResult => {
  const contents: any = {};
  if (output.flowLogSet === "") {
    contents[_FL] = [];
  } else if (output[_fLS] != null && output[_fLS][_i] != null) {
    contents[_FL] = de_FlowLogSet(__getArrayIfSingleItem(output[_fLS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFpgaImageAttributeResult
 */
const de_DescribeFpgaImageAttributeResult = (
  output: any,
  context: __SerdeContext
): DescribeFpgaImageAttributeResult => {
  const contents: any = {};
  if (output[_fIA] != null) {
    contents[_FIAp] = de_FpgaImageAttribute(output[_fIA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeFpgaImagesResult
 */
const de_DescribeFpgaImagesResult = (output: any, context: __SerdeContext): DescribeFpgaImagesResult => {
  const contents: any = {};
  if (output.fpgaImageSet === "") {
    contents[_FIp] = [];
  } else if (output[_fISp] != null && output[_fISp][_i] != null) {
    contents[_FIp] = de_FpgaImageList(__getArrayIfSingleItem(output[_fISp][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeHostReservationOfferingsResult
 */
const de_DescribeHostReservationOfferingsResult = (
  output: any,
  context: __SerdeContext
): DescribeHostReservationOfferingsResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.offeringSet === "") {
    contents[_OS] = [];
  } else if (output[_oS] != null && output[_oS][_i] != null) {
    contents[_OS] = de_HostOfferingSet(__getArrayIfSingleItem(output[_oS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeHostReservationsResult
 */
const de_DescribeHostReservationsResult = (output: any, context: __SerdeContext): DescribeHostReservationsResult => {
  const contents: any = {};
  if (output.hostReservationSet === "") {
    contents[_HRS] = [];
  } else if (output[_hRSo] != null && output[_hRSo][_i] != null) {
    contents[_HRS] = de_HostReservationSet(__getArrayIfSingleItem(output[_hRSo][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeHostsResult
 */
const de_DescribeHostsResult = (output: any, context: __SerdeContext): DescribeHostsResult => {
  const contents: any = {};
  if (output.hostSet === "") {
    contents[_Ho] = [];
  } else if (output[_hS] != null && output[_hS][_i] != null) {
    contents[_Ho] = de_HostList(__getArrayIfSingleItem(output[_hS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIamInstanceProfileAssociationsResult
 */
const de_DescribeIamInstanceProfileAssociationsResult = (
  output: any,
  context: __SerdeContext
): DescribeIamInstanceProfileAssociationsResult => {
  const contents: any = {};
  if (output.iamInstanceProfileAssociationSet === "") {
    contents[_IIPAa] = [];
  } else if (output[_iIPAS] != null && output[_iIPAS][_i] != null) {
    contents[_IIPAa] = de_IamInstanceProfileAssociationSet(__getArrayIfSingleItem(output[_iIPAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIdentityIdFormatResult
 */
const de_DescribeIdentityIdFormatResult = (output: any, context: __SerdeContext): DescribeIdentityIdFormatResult => {
  const contents: any = {};
  if (output.statusSet === "") {
    contents[_Status] = [];
  } else if (output[_sSt] != null && output[_sSt][_i] != null) {
    contents[_Status] = de_IdFormatList(__getArrayIfSingleItem(output[_sSt][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIdFormatResult
 */
const de_DescribeIdFormatResult = (output: any, context: __SerdeContext): DescribeIdFormatResult => {
  const contents: any = {};
  if (output.statusSet === "") {
    contents[_Status] = [];
  } else if (output[_sSt] != null && output[_sSt][_i] != null) {
    contents[_Status] = de_IdFormatList(__getArrayIfSingleItem(output[_sSt][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeImagesResult
 */
const de_DescribeImagesResult = (output: any, context: __SerdeContext): DescribeImagesResult => {
  const contents: any = {};
  if (output.imagesSet === "") {
    contents[_Ima] = [];
  } else if (output[_iSm] != null && output[_iSm][_i] != null) {
    contents[_Ima] = de_ImageList(__getArrayIfSingleItem(output[_iSm][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeImportImageTasksResult
 */
const de_DescribeImportImageTasksResult = (output: any, context: __SerdeContext): DescribeImportImageTasksResult => {
  const contents: any = {};
  if (output.importImageTaskSet === "") {
    contents[_IIT] = [];
  } else if (output[_iITS] != null && output[_iITS][_i] != null) {
    contents[_IIT] = de_ImportImageTaskList(__getArrayIfSingleItem(output[_iITS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeImportSnapshotTasksResult
 */
const de_DescribeImportSnapshotTasksResult = (
  output: any,
  context: __SerdeContext
): DescribeImportSnapshotTasksResult => {
  const contents: any = {};
  if (output.importSnapshotTaskSet === "") {
    contents[_IST] = [];
  } else if (output[_iSTS] != null && output[_iSTS][_i] != null) {
    contents[_IST] = de_ImportSnapshotTaskList(__getArrayIfSingleItem(output[_iSTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceConnectEndpointsResult
 */
const de_DescribeInstanceConnectEndpointsResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceConnectEndpointsResult => {
  const contents: any = {};
  if (output.instanceConnectEndpointSet === "") {
    contents[_ICEn] = [];
  } else if (output[_iCES] != null && output[_iCES][_i] != null) {
    contents[_ICEn] = de_InstanceConnectEndpointSet(__getArrayIfSingleItem(output[_iCES][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceCreditSpecificationsResult
 */
const de_DescribeInstanceCreditSpecificationsResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceCreditSpecificationsResult => {
  const contents: any = {};
  if (output.instanceCreditSpecificationSet === "") {
    contents[_ICS] = [];
  } else if (output[_iCSS] != null && output[_iCSS][_i] != null) {
    contents[_ICS] = de_InstanceCreditSpecificationList(__getArrayIfSingleItem(output[_iCSS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceEventNotificationAttributesResult
 */
const de_DescribeInstanceEventNotificationAttributesResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceEventNotificationAttributesResult => {
  const contents: any = {};
  if (output[_iTA] != null) {
    contents[_ITA] = de_InstanceTagNotificationAttribute(output[_iTA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceEventWindowsResult
 */
const de_DescribeInstanceEventWindowsResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceEventWindowsResult => {
  const contents: any = {};
  if (output.instanceEventWindowSet === "") {
    contents[_IEWn] = [];
  } else if (output[_iEWSn] != null && output[_iEWSn][_i] != null) {
    contents[_IEWn] = de_InstanceEventWindowSet(__getArrayIfSingleItem(output[_iEWSn][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstancesResult
 */
const de_DescribeInstancesResult = (output: any, context: __SerdeContext): DescribeInstancesResult => {
  const contents: any = {};
  if (output.reservationSet === "") {
    contents[_Rese] = [];
  } else if (output[_rS] != null && output[_rS][_i] != null) {
    contents[_Rese] = de_ReservationList(__getArrayIfSingleItem(output[_rS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceStatusResult
 */
const de_DescribeInstanceStatusResult = (output: any, context: __SerdeContext): DescribeInstanceStatusResult => {
  const contents: any = {};
  if (output.instanceStatusSet === "") {
    contents[_ISns] = [];
  } else if (output[_iSS] != null && output[_iSS][_i] != null) {
    contents[_ISns] = de_InstanceStatusList(__getArrayIfSingleItem(output[_iSS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceTopologyResult
 */
const de_DescribeInstanceTopologyResult = (output: any, context: __SerdeContext): DescribeInstanceTopologyResult => {
  const contents: any = {};
  if (output.instanceSet === "") {
    contents[_In] = [];
  } else if (output[_iSns] != null && output[_iSns][_i] != null) {
    contents[_In] = de_InstanceSet(__getArrayIfSingleItem(output[_iSns][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceTypeOfferingsResult
 */
const de_DescribeInstanceTypeOfferingsResult = (
  output: any,
  context: __SerdeContext
): DescribeInstanceTypeOfferingsResult => {
  const contents: any = {};
  if (output.instanceTypeOfferingSet === "") {
    contents[_ITO] = [];
  } else if (output[_iTOS] != null && output[_iTOS][_i] != null) {
    contents[_ITO] = de_InstanceTypeOfferingsList(__getArrayIfSingleItem(output[_iTOS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInstanceTypesResult
 */
const de_DescribeInstanceTypesResult = (output: any, context: __SerdeContext): DescribeInstanceTypesResult => {
  const contents: any = {};
  if (output.instanceTypeSet === "") {
    contents[_ITnst] = [];
  } else if (output[_iTS] != null && output[_iTS][_i] != null) {
    contents[_ITnst] = de_InstanceTypeInfoList(__getArrayIfSingleItem(output[_iTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeInternetGatewaysResult
 */
const de_DescribeInternetGatewaysResult = (output: any, context: __SerdeContext): DescribeInternetGatewaysResult => {
  const contents: any = {};
  if (output.internetGatewaySet === "") {
    contents[_IGnt] = [];
  } else if (output[_iGS] != null && output[_iGS][_i] != null) {
    contents[_IGnt] = de_InternetGatewayList(__getArrayIfSingleItem(output[_iGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIpamByoasnResult
 */
const de_DescribeIpamByoasnResult = (output: any, context: __SerdeContext): DescribeIpamByoasnResult => {
  const contents: any = {};
  if (output.byoasnSet === "") {
    contents[_Byoa] = [];
  } else if (output[_bS] != null && output[_bS][_i] != null) {
    contents[_Byoa] = de_ByoasnSet(__getArrayIfSingleItem(output[_bS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIpamPoolsResult
 */
const de_DescribeIpamPoolsResult = (output: any, context: __SerdeContext): DescribeIpamPoolsResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.ipamPoolSet === "") {
    contents[_IPpam] = [];
  } else if (output[_iPS] != null && output[_iPS][_i] != null) {
    contents[_IPpam] = de_IpamPoolSet(__getArrayIfSingleItem(output[_iPS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIpamResourceDiscoveriesResult
 */
const de_DescribeIpamResourceDiscoveriesResult = (
  output: any,
  context: __SerdeContext
): DescribeIpamResourceDiscoveriesResult => {
  const contents: any = {};
  if (output.ipamResourceDiscoverySet === "") {
    contents[_IRDp] = [];
  } else if (output[_iRDS] != null && output[_iRDS][_i] != null) {
    contents[_IRDp] = de_IpamResourceDiscoverySet(__getArrayIfSingleItem(output[_iRDS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIpamResourceDiscoveryAssociationsResult
 */
const de_DescribeIpamResourceDiscoveryAssociationsResult = (
  output: any,
  context: __SerdeContext
): DescribeIpamResourceDiscoveryAssociationsResult => {
  const contents: any = {};
  if (output.ipamResourceDiscoveryAssociationSet === "") {
    contents[_IRDAp] = [];
  } else if (output[_iRDAS] != null && output[_iRDAS][_i] != null) {
    contents[_IRDAp] = de_IpamResourceDiscoveryAssociationSet(__getArrayIfSingleItem(output[_iRDAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIpamScopesResult
 */
const de_DescribeIpamScopesResult = (output: any, context: __SerdeContext): DescribeIpamScopesResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.ipamScopeSet === "") {
    contents[_ISpam] = [];
  } else if (output[_iSSp] != null && output[_iSSp][_i] != null) {
    contents[_ISpam] = de_IpamScopeSet(__getArrayIfSingleItem(output[_iSSp][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIpamsResult
 */
const de_DescribeIpamsResult = (output: any, context: __SerdeContext): DescribeIpamsResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.ipamSet === "") {
    contents[_Ipam] = [];
  } else if (output[_iSp] != null && output[_iSp][_i] != null) {
    contents[_Ipam] = de_IpamSet(__getArrayIfSingleItem(output[_iSp][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeIpv6PoolsResult
 */
const de_DescribeIpv6PoolsResult = (output: any, context: __SerdeContext): DescribeIpv6PoolsResult => {
  const contents: any = {};
  if (output.ipv6PoolSet === "") {
    contents[_IPpvo] = [];
  } else if (output[_iPSp] != null && output[_iPSp][_i] != null) {
    contents[_IPpvo] = de_Ipv6PoolSet(__getArrayIfSingleItem(output[_iPSp][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeKeyPairsResult
 */
const de_DescribeKeyPairsResult = (output: any, context: __SerdeContext): DescribeKeyPairsResult => {
  const contents: any = {};
  if (output.keySet === "") {
    contents[_KP] = [];
  } else if (output[_kS] != null && output[_kS][_i] != null) {
    contents[_KP] = de_KeyPairList(__getArrayIfSingleItem(output[_kS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLaunchTemplatesResult
 */
const de_DescribeLaunchTemplatesResult = (output: any, context: __SerdeContext): DescribeLaunchTemplatesResult => {
  const contents: any = {};
  if (output.launchTemplates === "") {
    contents[_LTau] = [];
  } else if (output[_lTa] != null && output[_lTa][_i] != null) {
    contents[_LTau] = de_LaunchTemplateSet(__getArrayIfSingleItem(output[_lTa][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLaunchTemplateVersionsResult
 */
const de_DescribeLaunchTemplateVersionsResult = (
  output: any,
  context: __SerdeContext
): DescribeLaunchTemplateVersionsResult => {
  const contents: any = {};
  if (output.launchTemplateVersionSet === "") {
    contents[_LTVa] = [];
  } else if (output[_lTVS] != null && output[_lTVS][_i] != null) {
    contents[_LTVa] = de_LaunchTemplateVersionSet(__getArrayIfSingleItem(output[_lTVS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTablesResult
 */
const de_DescribeLocalGatewayRouteTablesResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayRouteTablesResult => {
  const contents: any = {};
  if (output.localGatewayRouteTableSet === "") {
    contents[_LGRTo] = [];
  } else if (output[_lGRTS] != null && output[_lGRTS][_i] != null) {
    contents[_LGRTo] = de_LocalGatewayRouteTableSet(__getArrayIfSingleItem(output[_lGRTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult
 */
const de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult => {
  const contents: any = {};
  if (output.localGatewayRouteTableVirtualInterfaceGroupAssociationSet === "") {
    contents[_LGRTVIGAo] = [];
  } else if (output[_lGRTVIGAS] != null && output[_lGRTVIGAS][_i] != null) {
    contents[_LGRTVIGAo] = de_LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet(
      __getArrayIfSingleItem(output[_lGRTVIGAS][_i]),
      context
    );
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayRouteTableVpcAssociationsResult
 */
const de_DescribeLocalGatewayRouteTableVpcAssociationsResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayRouteTableVpcAssociationsResult => {
  const contents: any = {};
  if (output.localGatewayRouteTableVpcAssociationSet === "") {
    contents[_LGRTVAo] = [];
  } else if (output[_lGRTVAS] != null && output[_lGRTVAS][_i] != null) {
    contents[_LGRTVAo] = de_LocalGatewayRouteTableVpcAssociationSet(
      __getArrayIfSingleItem(output[_lGRTVAS][_i]),
      context
    );
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLocalGatewaysResult
 */
const de_DescribeLocalGatewaysResult = (output: any, context: __SerdeContext): DescribeLocalGatewaysResult => {
  const contents: any = {};
  if (output.localGatewaySet === "") {
    contents[_LGoc] = [];
  } else if (output[_lGS] != null && output[_lGS][_i] != null) {
    contents[_LGoc] = de_LocalGatewaySet(__getArrayIfSingleItem(output[_lGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayVirtualInterfaceGroupsResult
 */
const de_DescribeLocalGatewayVirtualInterfaceGroupsResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayVirtualInterfaceGroupsResult => {
  const contents: any = {};
  if (output.localGatewayVirtualInterfaceGroupSet === "") {
    contents[_LGVIG] = [];
  } else if (output[_lGVIGS] != null && output[_lGVIGS][_i] != null) {
    contents[_LGVIG] = de_LocalGatewayVirtualInterfaceGroupSet(__getArrayIfSingleItem(output[_lGVIGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLocalGatewayVirtualInterfacesResult
 */
const de_DescribeLocalGatewayVirtualInterfacesResult = (
  output: any,
  context: __SerdeContext
): DescribeLocalGatewayVirtualInterfacesResult => {
  const contents: any = {};
  if (output.localGatewayVirtualInterfaceSet === "") {
    contents[_LGVI] = [];
  } else if (output[_lGVIS] != null && output[_lGVIS][_i] != null) {
    contents[_LGVI] = de_LocalGatewayVirtualInterfaceSet(__getArrayIfSingleItem(output[_lGVIS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeLockedSnapshotsResult
 */
const de_DescribeLockedSnapshotsResult = (output: any, context: __SerdeContext): DescribeLockedSnapshotsResult => {
  const contents: any = {};
  if (output.snapshotSet === "") {
    contents[_Sn] = [];
  } else if (output[_sS] != null && output[_sS][_i] != null) {
    contents[_Sn] = de_LockedSnapshotsInfoList(__getArrayIfSingleItem(output[_sS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeManagedPrefixListsResult
 */
const de_DescribeManagedPrefixListsResult = (
  output: any,
  context: __SerdeContext
): DescribeManagedPrefixListsResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.prefixListSet === "") {
    contents[_PLre] = [];
  } else if (output[_pLS] != null && output[_pLS][_i] != null) {
    contents[_PLre] = de_ManagedPrefixListSet(__getArrayIfSingleItem(output[_pLS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeMovingAddressesResult
 */
const de_DescribeMovingAddressesResult = (output: any, context: __SerdeContext): DescribeMovingAddressesResult => {
  const contents: any = {};
  if (output.movingAddressStatusSet === "") {
    contents[_MAS] = [];
  } else if (output[_mASS] != null && output[_mASS][_i] != null) {
    contents[_MAS] = de_MovingAddressStatusSet(__getArrayIfSingleItem(output[_mASS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNatGatewaysResult
 */
const de_DescribeNatGatewaysResult = (output: any, context: __SerdeContext): DescribeNatGatewaysResult => {
  const contents: any = {};
  if (output.natGatewaySet === "") {
    contents[_NGa] = [];
  } else if (output[_nGS] != null && output[_nGS][_i] != null) {
    contents[_NGa] = de_NatGatewayList(__getArrayIfSingleItem(output[_nGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkAclsResult
 */
const de_DescribeNetworkAclsResult = (output: any, context: __SerdeContext): DescribeNetworkAclsResult => {
  const contents: any = {};
  if (output.networkAclSet === "") {
    contents[_NAe] = [];
  } else if (output[_nAS] != null && output[_nAS][_i] != null) {
    contents[_NAe] = de_NetworkAclList(__getArrayIfSingleItem(output[_nAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAccessScopeAnalysesResult
 */
const de_DescribeNetworkInsightsAccessScopeAnalysesResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInsightsAccessScopeAnalysesResult => {
  const contents: any = {};
  if (output.networkInsightsAccessScopeAnalysisSet === "") {
    contents[_NIASA] = [];
  } else if (output[_nIASAS] != null && output[_nIASAS][_i] != null) {
    contents[_NIASA] = de_NetworkInsightsAccessScopeAnalysisList(__getArrayIfSingleItem(output[_nIASAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAccessScopesResult
 */
const de_DescribeNetworkInsightsAccessScopesResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInsightsAccessScopesResult => {
  const contents: any = {};
  if (output.networkInsightsAccessScopeSet === "") {
    contents[_NIASe] = [];
  } else if (output[_nIASS] != null && output[_nIASS][_i] != null) {
    contents[_NIASe] = de_NetworkInsightsAccessScopeList(__getArrayIfSingleItem(output[_nIASS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsAnalysesResult
 */
const de_DescribeNetworkInsightsAnalysesResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInsightsAnalysesResult => {
  const contents: any = {};
  if (output.networkInsightsAnalysisSet === "") {
    contents[_NIA] = [];
  } else if (output[_nIASe] != null && output[_nIASe][_i] != null) {
    contents[_NIA] = de_NetworkInsightsAnalysisList(__getArrayIfSingleItem(output[_nIASe][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInsightsPathsResult
 */
const de_DescribeNetworkInsightsPathsResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInsightsPathsResult => {
  const contents: any = {};
  if (output.networkInsightsPathSet === "") {
    contents[_NIPe] = [];
  } else if (output[_nIPS] != null && output[_nIPS][_i] != null) {
    contents[_NIPe] = de_NetworkInsightsPathList(__getArrayIfSingleItem(output[_nIPS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInterfaceAttributeResult
 */
const de_DescribeNetworkInterfaceAttributeResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInterfaceAttributeResult => {
  const contents: any = {};
  if (output[_at] != null) {
    contents[_Att] = de_NetworkInterfaceAttachment(output[_at], context);
  }
  if (output[_de] != null) {
    contents[_De] = de_AttributeValue(output[_de], context);
  }
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierList(__getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_sDC] != null) {
    contents[_SDC] = de_AttributeBooleanValue(output[_sDC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInterfacePermissionsResult
 */
const de_DescribeNetworkInterfacePermissionsResult = (
  output: any,
  context: __SerdeContext
): DescribeNetworkInterfacePermissionsResult => {
  const contents: any = {};
  if (output.networkInterfacePermissions === "") {
    contents[_NIPet] = [];
  } else if (output[_nIPe] != null && output[_nIPe][_i] != null) {
    contents[_NIPet] = de_NetworkInterfacePermissionList(__getArrayIfSingleItem(output[_nIPe][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeNetworkInterfacesResult
 */
const de_DescribeNetworkInterfacesResult = (output: any, context: __SerdeContext): DescribeNetworkInterfacesResult => {
  const contents: any = {};
  if (output.networkInterfaceSet === "") {
    contents[_NI] = [];
  } else if (output[_nIS] != null && output[_nIS][_i] != null) {
    contents[_NI] = de_NetworkInterfaceList(__getArrayIfSingleItem(output[_nIS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribePlacementGroupsResult
 */
const de_DescribePlacementGroupsResult = (output: any, context: __SerdeContext): DescribePlacementGroupsResult => {
  const contents: any = {};
  if (output.placementGroupSet === "") {
    contents[_PGl] = [];
  } else if (output[_pGS] != null && output[_pGS][_i] != null) {
    contents[_PGl] = de_PlacementGroupList(__getArrayIfSingleItem(output[_pGS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribePrefixListsResult
 */
const de_DescribePrefixListsResult = (output: any, context: __SerdeContext): DescribePrefixListsResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.prefixListSet === "") {
    contents[_PLre] = [];
  } else if (output[_pLS] != null && output[_pLS][_i] != null) {
    contents[_PLre] = de_PrefixListSet(__getArrayIfSingleItem(output[_pLS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribePrincipalIdFormatResult
 */
const de_DescribePrincipalIdFormatResult = (output: any, context: __SerdeContext): DescribePrincipalIdFormatResult => {
  const contents: any = {};
  if (output.principalSet === "") {
    contents[_Princ] = [];
  } else if (output[_pSr] != null && output[_pSr][_i] != null) {
    contents[_Princ] = de_PrincipalIdFormatList(__getArrayIfSingleItem(output[_pSr][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribePublicIpv4PoolsResult
 */
const de_DescribePublicIpv4PoolsResult = (output: any, context: __SerdeContext): DescribePublicIpv4PoolsResult => {
  const contents: any = {};
  if (output.publicIpv4PoolSet === "") {
    contents[_PIPu] = [];
  } else if (output[_pIPS] != null && output[_pIPS][_i] != null) {
    contents[_PIPu] = de_PublicIpv4PoolSet(__getArrayIfSingleItem(output[_pIPS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeRegionsResult
 */
const de_DescribeRegionsResult = (output: any, context: __SerdeContext): DescribeRegionsResult => {
  const contents: any = {};
  if (output.regionInfo === "") {
    contents[_Reg] = [];
  } else if (output[_rI] != null && output[_rI][_i] != null) {
    contents[_Reg] = de_RegionList(__getArrayIfSingleItem(output[_rI][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeReplaceRootVolumeTasksResult
 */
const de_DescribeReplaceRootVolumeTasksResult = (
  output: any,
  context: __SerdeContext
): DescribeReplaceRootVolumeTasksResult => {
  const contents: any = {};
  if (output.replaceRootVolumeTaskSet === "") {
    contents[_RRVTe] = [];
  } else if (output[_rRVTS] != null && output[_rRVTS][_i] != null) {
    contents[_RRVTe] = de_ReplaceRootVolumeTasks(__getArrayIfSingleItem(output[_rRVTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesListingsResult
 */
const de_DescribeReservedInstancesListingsResult = (
  output: any,
  context: __SerdeContext
): DescribeReservedInstancesListingsResult => {
  const contents: any = {};
  if (output.reservedInstancesListingsSet === "") {
    contents[_RIL] = [];
  } else if (output[_rILS] != null && output[_rILS][_i] != null) {
    contents[_RIL] = de_ReservedInstancesListingList(__getArrayIfSingleItem(output[_rILS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesModificationsResult
 */
const de_DescribeReservedInstancesModificationsResult = (
  output: any,
  context: __SerdeContext
): DescribeReservedInstancesModificationsResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.reservedInstancesModificationsSet === "") {
    contents[_RIM] = [];
  } else if (output[_rIMS] != null && output[_rIMS][_i] != null) {
    contents[_RIM] = de_ReservedInstancesModificationList(__getArrayIfSingleItem(output[_rIMS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesOfferingsResult
 */
const de_DescribeReservedInstancesOfferingsResult = (
  output: any,
  context: __SerdeContext
): DescribeReservedInstancesOfferingsResult => {
  const contents: any = {};
  if (output.reservedInstancesOfferingsSet === "") {
    contents[_RIO] = [];
  } else if (output[_rIOS] != null && output[_rIOS][_i] != null) {
    contents[_RIO] = de_ReservedInstancesOfferingList(__getArrayIfSingleItem(output[_rIOS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeReservedInstancesResult
 */
const de_DescribeReservedInstancesResult = (output: any, context: __SerdeContext): DescribeReservedInstancesResult => {
  const contents: any = {};
  if (output.reservedInstancesSet === "") {
    contents[_RIese] = [];
  } else if (output[_rIS] != null && output[_rIS][_i] != null) {
    contents[_RIese] = de_ReservedInstancesList(__getArrayIfSingleItem(output[_rIS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeRouteTablesResult
 */
const de_DescribeRouteTablesResult = (output: any, context: __SerdeContext): DescribeRouteTablesResult => {
  const contents: any = {};
  if (output.routeTableSet === "") {
    contents[_RTou] = [];
  } else if (output[_rTS] != null && output[_rTS][_i] != null) {
    contents[_RTou] = de_RouteTableList(__getArrayIfSingleItem(output[_rTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeScheduledInstanceAvailabilityResult
 */
const de_DescribeScheduledInstanceAvailabilityResult = (
  output: any,
  context: __SerdeContext
): DescribeScheduledInstanceAvailabilityResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.scheduledInstanceAvailabilitySet === "") {
    contents[_SIAS] = [];
  } else if (output[_sIAS] != null && output[_sIAS][_i] != null) {
    contents[_SIAS] = de_ScheduledInstanceAvailabilitySet(__getArrayIfSingleItem(output[_sIAS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeScheduledInstancesResult
 */
const de_DescribeScheduledInstancesResult = (
  output: any,
  context: __SerdeContext
): DescribeScheduledInstancesResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.scheduledInstanceSet === "") {
    contents[_SIS] = [];
  } else if (output[_sIS] != null && output[_sIS][_i] != null) {
    contents[_SIS] = de_ScheduledInstanceSet(__getArrayIfSingleItem(output[_sIS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSecurityGroupReferencesResult
 */
const de_DescribeSecurityGroupReferencesResult = (
  output: any,
  context: __SerdeContext
): DescribeSecurityGroupReferencesResult => {
  const contents: any = {};
  if (output.securityGroupReferenceSet === "") {
    contents[_SGRSe] = [];
  } else if (output[_sGRSe] != null && output[_sGRSe][_i] != null) {
    contents[_SGRSe] = de_SecurityGroupReferences(__getArrayIfSingleItem(output[_sGRSe][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSecurityGroupRulesResult
 */
const de_DescribeSecurityGroupRulesResult = (
  output: any,
  context: __SerdeContext
): DescribeSecurityGroupRulesResult => {
  const contents: any = {};
  if (output.securityGroupRuleSet === "") {
    contents[_SGR] = [];
  } else if (output[_sGRS] != null && output[_sGRS][_i] != null) {
    contents[_SGR] = de_SecurityGroupRuleList(__getArrayIfSingleItem(output[_sGRS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSecurityGroupsResult
 */
const de_DescribeSecurityGroupsResult = (output: any, context: __SerdeContext): DescribeSecurityGroupsResult => {
  const contents: any = {};
  if (output.securityGroupInfo === "") {
    contents[_SG] = [];
  } else if (output[_sGIec] != null && output[_sGIec][_i] != null) {
    contents[_SG] = de_SecurityGroupList(__getArrayIfSingleItem(output[_sGIec][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSnapshotAttributeResult
 */
const de_DescribeSnapshotAttributeResult = (output: any, context: __SerdeContext): DescribeSnapshotAttributeResult => {
  const contents: any = {};
  if (output.createVolumePermission === "") {
    contents[_CVPr] = [];
  } else if (output[_cVP] != null && output[_cVP][_i] != null) {
    contents[_CVPr] = de_CreateVolumePermissionList(__getArrayIfSingleItem(output[_cVP][_i]), context);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(__getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSnapshotsResult
 */
const de_DescribeSnapshotsResult = (output: any, context: __SerdeContext): DescribeSnapshotsResult => {
  const contents: any = {};
  if (output.snapshotSet === "") {
    contents[_Sn] = [];
  } else if (output[_sS] != null && output[_sS][_i] != null) {
    contents[_Sn] = de_SnapshotList(__getArrayIfSingleItem(output[_sS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSnapshotTierStatusResult
 */
const de_DescribeSnapshotTierStatusResult = (
  output: any,
  context: __SerdeContext
): DescribeSnapshotTierStatusResult => {
  const contents: any = {};
  if (output.snapshotTierStatusSet === "") {
    contents[_STS] = [];
  } else if (output[_sTSS] != null && output[_sTSS][_i] != null) {
    contents[_STS] = de_snapshotTierStatusSet(__getArrayIfSingleItem(output[_sTSS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSpotDatafeedSubscriptionResult
 */
const de_DescribeSpotDatafeedSubscriptionResult = (
  output: any,
  context: __SerdeContext
): DescribeSpotDatafeedSubscriptionResult => {
  const contents: any = {};
  if (output[_sDS] != null) {
    contents[_SDS] = de_SpotDatafeedSubscription(output[_sDS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSpotFleetInstancesResponse
 */
const de_DescribeSpotFleetInstancesResponse = (
  output: any,
  context: __SerdeContext
): DescribeSpotFleetInstancesResponse => {
  const contents: any = {};
  if (output.activeInstanceSet === "") {
    contents[_AIc] = [];
  } else if (output[_aIS] != null && output[_aIS][_i] != null) {
    contents[_AIc] = de_ActiveInstanceSet(__getArrayIfSingleItem(output[_aIS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output[_sFRI] != null) {
    contents[_SFRIp] = __expectString(output[_sFRI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSpotFleetRequestHistoryResponse
 */
const de_DescribeSpotFleetRequestHistoryResponse = (
  output: any,
  context: __SerdeContext
): DescribeSpotFleetRequestHistoryResponse => {
  const contents: any = {};
  if (output.historyRecordSet === "") {
    contents[_HRi] = [];
  } else if (output[_hRS] != null && output[_hRS][_i] != null) {
    contents[_HRi] = de_HistoryRecords(__getArrayIfSingleItem(output[_hRS][_i]), context);
  }
  if (output[_lET] != null) {
    contents[_LET] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lET]));
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output[_sFRI] != null) {
    contents[_SFRIp] = __expectString(output[_sFRI]);
  }
  if (output[_sT] != null) {
    contents[_STt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSpotFleetRequestsResponse
 */
const de_DescribeSpotFleetRequestsResponse = (
  output: any,
  context: __SerdeContext
): DescribeSpotFleetRequestsResponse => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.spotFleetRequestConfigSet === "") {
    contents[_SFRCp] = [];
  } else if (output[_sFRCS] != null && output[_sFRCS][_i] != null) {
    contents[_SFRCp] = de_SpotFleetRequestConfigSet(__getArrayIfSingleItem(output[_sFRCS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSpotInstanceRequestsResult
 */
const de_DescribeSpotInstanceRequestsResult = (
  output: any,
  context: __SerdeContext
): DescribeSpotInstanceRequestsResult => {
  const contents: any = {};
  if (output.spotInstanceRequestSet === "") {
    contents[_SIR] = [];
  } else if (output[_sIRS] != null && output[_sIRS][_i] != null) {
    contents[_SIR] = de_SpotInstanceRequestList(__getArrayIfSingleItem(output[_sIRS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSpotPriceHistoryResult
 */
const de_DescribeSpotPriceHistoryResult = (output: any, context: __SerdeContext): DescribeSpotPriceHistoryResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.spotPriceHistorySet === "") {
    contents[_SPH] = [];
  } else if (output[_sPHS] != null && output[_sPHS][_i] != null) {
    contents[_SPH] = de_SpotPriceHistoryList(__getArrayIfSingleItem(output[_sPHS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeStaleSecurityGroupsResult
 */
const de_DescribeStaleSecurityGroupsResult = (
  output: any,
  context: __SerdeContext
): DescribeStaleSecurityGroupsResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.staleSecurityGroupSet === "") {
    contents[_SSGS] = [];
  } else if (output[_sSGS] != null && output[_sSGS][_i] != null) {
    contents[_SSGS] = de_StaleSecurityGroupSet(__getArrayIfSingleItem(output[_sSGS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeStoreImageTasksResult
 */
const de_DescribeStoreImageTasksResult = (output: any, context: __SerdeContext): DescribeStoreImageTasksResult => {
  const contents: any = {};
  if (output.storeImageTaskResultSet === "") {
    contents[_SITR] = [];
  } else if (output[_sITRS] != null && output[_sITRS][_i] != null) {
    contents[_SITR] = de_StoreImageTaskResultSet(__getArrayIfSingleItem(output[_sITRS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeSubnetsResult
 */
const de_DescribeSubnetsResult = (output: any, context: __SerdeContext): DescribeSubnetsResult => {
  const contents: any = {};
  if (output.subnetSet === "") {
    contents[_Subn] = [];
  } else if (output[_sSub] != null && output[_sSub][_i] != null) {
    contents[_Subn] = de_SubnetList(__getArrayIfSingleItem(output[_sSub][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTagsResult
 */
const de_DescribeTagsResult = (output: any, context: __SerdeContext): DescribeTagsResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagDescriptionList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorFiltersResult
 */
const de_DescribeTrafficMirrorFiltersResult = (
  output: any,
  context: __SerdeContext
): DescribeTrafficMirrorFiltersResult => {
  const contents: any = {};
  if (output.trafficMirrorFilterSet === "") {
    contents[_TMFr] = [];
  } else if (output[_tMFS] != null && output[_tMFS][_i] != null) {
    contents[_TMFr] = de_TrafficMirrorFilterSet(__getArrayIfSingleItem(output[_tMFS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorSessionsResult
 */
const de_DescribeTrafficMirrorSessionsResult = (
  output: any,
  context: __SerdeContext
): DescribeTrafficMirrorSessionsResult => {
  const contents: any = {};
  if (output.trafficMirrorSessionSet === "") {
    contents[_TMSr] = [];
  } else if (output[_tMSS] != null && output[_tMSS][_i] != null) {
    contents[_TMSr] = de_TrafficMirrorSessionSet(__getArrayIfSingleItem(output[_tMSS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTrafficMirrorTargetsResult
 */
const de_DescribeTrafficMirrorTargetsResult = (
  output: any,
  context: __SerdeContext
): DescribeTrafficMirrorTargetsResult => {
  const contents: any = {};
  if (output.trafficMirrorTargetSet === "") {
    contents[_TMTr] = [];
  } else if (output[_tMTS] != null && output[_tMTS][_i] != null) {
    contents[_TMTr] = de_TrafficMirrorTargetSet(__getArrayIfSingleItem(output[_tMTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayAttachmentsResult
 */
const de_DescribeTransitGatewayAttachmentsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayAttachmentsResult => {
  const contents: any = {};
  if (output.transitGatewayAttachments === "") {
    contents[_TGAr] = [];
  } else if (output[_tGA] != null && output[_tGA][_i] != null) {
    contents[_TGAr] = de_TransitGatewayAttachmentList(__getArrayIfSingleItem(output[_tGA][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayConnectPeersResult
 */
const de_DescribeTransitGatewayConnectPeersResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayConnectPeersResult => {
  const contents: any = {};
  if (output.transitGatewayConnectPeerSet === "") {
    contents[_TGCPr] = [];
  } else if (output[_tGCPS] != null && output[_tGCPS][_i] != null) {
    contents[_TGCPr] = de_TransitGatewayConnectPeerList(__getArrayIfSingleItem(output[_tGCPS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayConnectsResult
 */
const de_DescribeTransitGatewayConnectsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayConnectsResult => {
  const contents: any = {};
  if (output.transitGatewayConnectSet === "") {
    contents[_TGCra] = [];
  } else if (output[_tGCS] != null && output[_tGCS][_i] != null) {
    contents[_TGCra] = de_TransitGatewayConnectList(__getArrayIfSingleItem(output[_tGCS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayMulticastDomainsResult
 */
const de_DescribeTransitGatewayMulticastDomainsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayMulticastDomainsResult => {
  const contents: any = {};
  if (output.transitGatewayMulticastDomains === "") {
    contents[_TGMDr] = [];
  } else if (output[_tGMDr] != null && output[_tGMDr][_i] != null) {
    contents[_TGMDr] = de_TransitGatewayMulticastDomainList(__getArrayIfSingleItem(output[_tGMDr][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayPeeringAttachmentsResult
 */
const de_DescribeTransitGatewayPeeringAttachmentsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayPeeringAttachmentsResult => {
  const contents: any = {};
  if (output.transitGatewayPeeringAttachments === "") {
    contents[_TGPAr] = [];
  } else if (output[_tGPAr] != null && output[_tGPAr][_i] != null) {
    contents[_TGPAr] = de_TransitGatewayPeeringAttachmentList(__getArrayIfSingleItem(output[_tGPAr][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayPolicyTablesResult
 */
const de_DescribeTransitGatewayPolicyTablesResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayPolicyTablesResult => {
  const contents: any = {};
  if (output.transitGatewayPolicyTables === "") {
    contents[_TGPTr] = [];
  } else if (output[_tGPTr] != null && output[_tGPTr][_i] != null) {
    contents[_TGPTr] = de_TransitGatewayPolicyTableList(__getArrayIfSingleItem(output[_tGPTr][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayRouteTableAnnouncementsResult
 */
const de_DescribeTransitGatewayRouteTableAnnouncementsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayRouteTableAnnouncementsResult => {
  const contents: any = {};
  if (output.transitGatewayRouteTableAnnouncements === "") {
    contents[_TGRTAr] = [];
  } else if (output[_tGRTAr] != null && output[_tGRTAr][_i] != null) {
    contents[_TGRTAr] = de_TransitGatewayRouteTableAnnouncementList(
      __getArrayIfSingleItem(output[_tGRTAr][_i]),
      context
    );
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayRouteTablesResult
 */
const de_DescribeTransitGatewayRouteTablesResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayRouteTablesResult => {
  const contents: any = {};
  if (output.transitGatewayRouteTables === "") {
    contents[_TGRTr] = [];
  } else if (output[_tGRTr] != null && output[_tGRTr][_i] != null) {
    contents[_TGRTr] = de_TransitGatewayRouteTableList(__getArrayIfSingleItem(output[_tGRTr][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewaysResult
 */
const de_DescribeTransitGatewaysResult = (output: any, context: __SerdeContext): DescribeTransitGatewaysResult => {
  const contents: any = {};
  if (output.transitGatewaySet === "") {
    contents[_TGra] = [];
  } else if (output[_tGS] != null && output[_tGS][_i] != null) {
    contents[_TGra] = de_TransitGatewayList(__getArrayIfSingleItem(output[_tGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTransitGatewayVpcAttachmentsResult
 */
const de_DescribeTransitGatewayVpcAttachmentsResult = (
  output: any,
  context: __SerdeContext
): DescribeTransitGatewayVpcAttachmentsResult => {
  const contents: any = {};
  if (output.transitGatewayVpcAttachments === "") {
    contents[_TGVAr] = [];
  } else if (output[_tGVAr] != null && output[_tGVAr][_i] != null) {
    contents[_TGVAr] = de_TransitGatewayVpcAttachmentList(__getArrayIfSingleItem(output[_tGVAr][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeTrunkInterfaceAssociationsResult
 */
const de_DescribeTrunkInterfaceAssociationsResult = (
  output: any,
  context: __SerdeContext
): DescribeTrunkInterfaceAssociationsResult => {
  const contents: any = {};
  if (output.interfaceAssociationSet === "") {
    contents[_IAnt] = [];
  } else if (output[_iAS] != null && output[_iAS][_i] != null) {
    contents[_IAnt] = de_TrunkInterfaceAssociationList(__getArrayIfSingleItem(output[_iAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessEndpointsResult
 */
const de_DescribeVerifiedAccessEndpointsResult = (
  output: any,
  context: __SerdeContext
): DescribeVerifiedAccessEndpointsResult => {
  const contents: any = {};
  if (output.verifiedAccessEndpointSet === "") {
    contents[_VAEe] = [];
  } else if (output[_vAES] != null && output[_vAES][_i] != null) {
    contents[_VAEe] = de_VerifiedAccessEndpointList(__getArrayIfSingleItem(output[_vAES][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessGroupsResult
 */
const de_DescribeVerifiedAccessGroupsResult = (
  output: any,
  context: __SerdeContext
): DescribeVerifiedAccessGroupsResult => {
  const contents: any = {};
  if (output.verifiedAccessGroupSet === "") {
    contents[_VAGe] = [];
  } else if (output[_vAGS] != null && output[_vAGS][_i] != null) {
    contents[_VAGe] = de_VerifiedAccessGroupList(__getArrayIfSingleItem(output[_vAGS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessInstanceLoggingConfigurationsResult
 */
const de_DescribeVerifiedAccessInstanceLoggingConfigurationsResult = (
  output: any,
  context: __SerdeContext
): DescribeVerifiedAccessInstanceLoggingConfigurationsResult => {
  const contents: any = {};
  if (output.loggingConfigurationSet === "") {
    contents[_LC] = [];
  } else if (output[_lCS] != null && output[_lCS][_i] != null) {
    contents[_LC] = de_VerifiedAccessInstanceLoggingConfigurationList(
      __getArrayIfSingleItem(output[_lCS][_i]),
      context
    );
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessInstancesResult
 */
const de_DescribeVerifiedAccessInstancesResult = (
  output: any,
  context: __SerdeContext
): DescribeVerifiedAccessInstancesResult => {
  const contents: any = {};
  if (output.verifiedAccessInstanceSet === "") {
    contents[_VAIe] = [];
  } else if (output[_vAIS] != null && output[_vAIS][_i] != null) {
    contents[_VAIe] = de_VerifiedAccessInstanceList(__getArrayIfSingleItem(output[_vAIS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVerifiedAccessTrustProvidersResult
 */
const de_DescribeVerifiedAccessTrustProvidersResult = (
  output: any,
  context: __SerdeContext
): DescribeVerifiedAccessTrustProvidersResult => {
  const contents: any = {};
  if (output.verifiedAccessTrustProviderSet === "") {
    contents[_VATPe] = [];
  } else if (output[_vATPS] != null && output[_vATPS][_i] != null) {
    contents[_VATPe] = de_VerifiedAccessTrustProviderList(__getArrayIfSingleItem(output[_vATPS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVolumeAttributeResult
 */
const de_DescribeVolumeAttributeResult = (output: any, context: __SerdeContext): DescribeVolumeAttributeResult => {
  const contents: any = {};
  if (output[_aEIO] != null) {
    contents[_AEIO] = de_AttributeBooleanValue(output[_aEIO], context);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(__getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = __expectString(output[_vIo]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVolumesModificationsResult
 */
const de_DescribeVolumesModificationsResult = (
  output: any,
  context: __SerdeContext
): DescribeVolumesModificationsResult => {
  const contents: any = {};
  if (output.volumeModificationSet === "") {
    contents[_VM] = [];
  } else if (output[_vMS] != null && output[_vMS][_i] != null) {
    contents[_VM] = de_VolumeModificationList(__getArrayIfSingleItem(output[_vMS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVolumesResult
 */
const de_DescribeVolumesResult = (output: any, context: __SerdeContext): DescribeVolumesResult => {
  const contents: any = {};
  if (output.volumeSet === "") {
    contents[_Vol] = [];
  } else if (output[_vS] != null && output[_vS][_i] != null) {
    contents[_Vol] = de_VolumeList(__getArrayIfSingleItem(output[_vS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVolumeStatusResult
 */
const de_DescribeVolumeStatusResult = (output: any, context: __SerdeContext): DescribeVolumeStatusResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.volumeStatusSet === "") {
    contents[_VSo] = [];
  } else if (output[_vSS] != null && output[_vSS][_i] != null) {
    contents[_VSo] = de_VolumeStatusList(__getArrayIfSingleItem(output[_vSS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcAttributeResult
 */
const de_DescribeVpcAttributeResult = (output: any, context: __SerdeContext): DescribeVpcAttributeResult => {
  const contents: any = {};
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_eDH] != null) {
    contents[_EDH] = de_AttributeBooleanValue(output[_eDH], context);
  }
  if (output[_eDS] != null) {
    contents[_EDS] = de_AttributeBooleanValue(output[_eDS], context);
  }
  if (output[_eNAUM] != null) {
    contents[_ENAUM] = de_AttributeBooleanValue(output[_eNAUM], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcClassicLinkDnsSupportResult
 */
const de_DescribeVpcClassicLinkDnsSupportResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcClassicLinkDnsSupportResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.vpcs === "") {
    contents[_Vpc] = [];
  } else if (output[_vpc] != null && output[_vpc][_i] != null) {
    contents[_Vpc] = de_ClassicLinkDnsSupportList(__getArrayIfSingleItem(output[_vpc][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcClassicLinkResult
 */
const de_DescribeVpcClassicLinkResult = (output: any, context: __SerdeContext): DescribeVpcClassicLinkResult => {
  const contents: any = {};
  if (output.vpcSet === "") {
    contents[_Vpc] = [];
  } else if (output[_vSp] != null && output[_vSp][_i] != null) {
    contents[_Vpc] = de_VpcClassicLinkList(__getArrayIfSingleItem(output[_vSp][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointConnectionNotificationsResult
 */
const de_DescribeVpcEndpointConnectionNotificationsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointConnectionNotificationsResult => {
  const contents: any = {};
  if (output.connectionNotificationSet === "") {
    contents[_CNSo] = [];
  } else if (output[_cNSo] != null && output[_cNSo][_i] != null) {
    contents[_CNSo] = de_ConnectionNotificationSet(__getArrayIfSingleItem(output[_cNSo][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointConnectionsResult
 */
const de_DescribeVpcEndpointConnectionsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointConnectionsResult => {
  const contents: any = {};
  if (output.vpcEndpointConnectionSet === "") {
    contents[_VEC] = [];
  } else if (output[_vECS] != null && output[_vECS][_i] != null) {
    contents[_VEC] = de_VpcEndpointConnectionSet(__getArrayIfSingleItem(output[_vECS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServiceConfigurationsResult
 */
const de_DescribeVpcEndpointServiceConfigurationsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointServiceConfigurationsResult => {
  const contents: any = {};
  if (output.serviceConfigurationSet === "") {
    contents[_SCer] = [];
  } else if (output[_sCS] != null && output[_sCS][_i] != null) {
    contents[_SCer] = de_ServiceConfigurationSet(__getArrayIfSingleItem(output[_sCS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServicePermissionsResult
 */
const de_DescribeVpcEndpointServicePermissionsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointServicePermissionsResult => {
  const contents: any = {};
  if (output.allowedPrincipals === "") {
    contents[_APl] = [];
  } else if (output[_aP] != null && output[_aP][_i] != null) {
    contents[_APl] = de_AllowedPrincipalSet(__getArrayIfSingleItem(output[_aP][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointServicesResult
 */
const de_DescribeVpcEndpointServicesResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcEndpointServicesResult => {
  const contents: any = {};
  if (output.serviceNameSet === "") {
    contents[_SNer] = [];
  } else if (output[_sNS] != null && output[_sNS][_i] != null) {
    contents[_SNer] = de_ValueStringList(__getArrayIfSingleItem(output[_sNS][_i]), context);
  }
  if (output.serviceDetailSet === "") {
    contents[_SDe] = [];
  } else if (output[_sDSe] != null && output[_sDSe][_i] != null) {
    contents[_SDe] = de_ServiceDetailSet(__getArrayIfSingleItem(output[_sDSe][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcEndpointsResult
 */
const de_DescribeVpcEndpointsResult = (output: any, context: __SerdeContext): DescribeVpcEndpointsResult => {
  const contents: any = {};
  if (output.vpcEndpointSet === "") {
    contents[_VEp] = [];
  } else if (output[_vESp] != null && output[_vESp][_i] != null) {
    contents[_VEp] = de_VpcEndpointSet(__getArrayIfSingleItem(output[_vESp][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcPeeringConnectionsResult
 */
const de_DescribeVpcPeeringConnectionsResult = (
  output: any,
  context: __SerdeContext
): DescribeVpcPeeringConnectionsResult => {
  const contents: any = {};
  if (output.vpcPeeringConnectionSet === "") {
    contents[_VPCp] = [];
  } else if (output[_vPCS] != null && output[_vPCS][_i] != null) {
    contents[_VPCp] = de_VpcPeeringConnectionList(__getArrayIfSingleItem(output[_vPCS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpcsResult
 */
const de_DescribeVpcsResult = (output: any, context: __SerdeContext): DescribeVpcsResult => {
  const contents: any = {};
  if (output.vpcSet === "") {
    contents[_Vpc] = [];
  } else if (output[_vSp] != null && output[_vSp][_i] != null) {
    contents[_Vpc] = de_VpcList(__getArrayIfSingleItem(output[_vSp][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpnConnectionsResult
 */
const de_DescribeVpnConnectionsResult = (output: any, context: __SerdeContext): DescribeVpnConnectionsResult => {
  const contents: any = {};
  if (output.vpnConnectionSet === "") {
    contents[_VCp] = [];
  } else if (output[_vCS] != null && output[_vCS][_i] != null) {
    contents[_VCp] = de_VpnConnectionList(__getArrayIfSingleItem(output[_vCS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DescribeVpnGatewaysResult
 */
const de_DescribeVpnGatewaysResult = (output: any, context: __SerdeContext): DescribeVpnGatewaysResult => {
  const contents: any = {};
  if (output.vpnGatewaySet === "") {
    contents[_VGp] = [];
  } else if (output[_vGS] != null && output[_vGS][_i] != null) {
    contents[_VGp] = de_VpnGatewayList(__getArrayIfSingleItem(output[_vGS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DestinationOptionsResponse
 */
const de_DestinationOptionsResponse = (output: any, context: __SerdeContext): DestinationOptionsResponse => {
  const contents: any = {};
  if (output[_fF] != null) {
    contents[_FF] = __expectString(output[_fF]);
  }
  if (output[_hCP] != null) {
    contents[_HCP] = __parseBoolean(output[_hCP]);
  }
  if (output[_pHP] != null) {
    contents[_PHP] = __parseBoolean(output[_pHP]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DetachClassicLinkVpcResult
 */
const de_DetachClassicLinkVpcResult = (output: any, context: __SerdeContext): DetachClassicLinkVpcResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DetachVerifiedAccessTrustProviderResult
 */
const de_DetachVerifiedAccessTrustProviderResult = (
  output: any,
  context: __SerdeContext
): DetachVerifiedAccessTrustProviderResult => {
  const contents: any = {};
  if (output[_vATP] != null) {
    contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP], context);
  }
  if (output[_vAI] != null) {
    contents[_VAI] = de_VerifiedAccessInstance(output[_vAI], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DeviceOptions
 */
const de_DeviceOptions = (output: any, context: __SerdeContext): DeviceOptions => {
  const contents: any = {};
  if (output[_tI] != null) {
    contents[_TIe] = __expectString(output[_tI]);
  }
  if (output[_pSKU] != null) {
    contents[_PSKU] = __expectString(output[_pSKU]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DhcpConfiguration
 */
const de_DhcpConfiguration = (output: any, context: __SerdeContext): DhcpConfiguration => {
  const contents: any = {};
  if (output[_k] != null) {
    contents[_Ke] = __expectString(output[_k]);
  }
  if (output.valueSet === "") {
    contents[_Val] = [];
  } else if (output[_vSa] != null && output[_vSa][_i] != null) {
    contents[_Val] = de_DhcpConfigurationValueList(__getArrayIfSingleItem(output[_vSa][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DhcpConfigurationList
 */
const de_DhcpConfigurationList = (output: any, context: __SerdeContext): DhcpConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DhcpConfiguration(entry, context);
    });
};

/**
 * deserializeAws_ec2DhcpConfigurationValueList
 */
const de_DhcpConfigurationValueList = (output: any, context: __SerdeContext): AttributeValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_AttributeValue(entry, context);
    });
};

/**
 * deserializeAws_ec2DhcpOptions
 */
const de_DhcpOptions = (output: any, context: __SerdeContext): DhcpOptions => {
  const contents: any = {};
  if (output.dhcpConfigurationSet === "") {
    contents[_DCh] = [];
  } else if (output[_dCS] != null && output[_dCS][_i] != null) {
    contents[_DCh] = de_DhcpConfigurationList(__getArrayIfSingleItem(output[_dCS][_i]), context);
  }
  if (output[_dOI] != null) {
    contents[_DOI] = __expectString(output[_dOI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DhcpOptionsList
 */
const de_DhcpOptionsList = (output: any, context: __SerdeContext): DhcpOptions[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DhcpOptions(entry, context);
    });
};

/**
 * deserializeAws_ec2DirectoryServiceAuthentication
 */
const de_DirectoryServiceAuthentication = (output: any, context: __SerdeContext): DirectoryServiceAuthentication => {
  const contents: any = {};
  if (output[_dI] != null) {
    contents[_DIir] = __expectString(output[_dI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableAddressTransferResult
 */
const de_DisableAddressTransferResult = (output: any, context: __SerdeContext): DisableAddressTransferResult => {
  const contents: any = {};
  if (output[_aT] != null) {
    contents[_ATdd] = de_AddressTransfer(output[_aT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableAwsNetworkPerformanceMetricSubscriptionResult
 */
const de_DisableAwsNetworkPerformanceMetricSubscriptionResult = (
  output: any,
  context: __SerdeContext
): DisableAwsNetworkPerformanceMetricSubscriptionResult => {
  const contents: any = {};
  if (output[_ou] != null) {
    contents[_Ou] = __parseBoolean(output[_ou]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableEbsEncryptionByDefaultResult
 */
const de_DisableEbsEncryptionByDefaultResult = (
  output: any,
  context: __SerdeContext
): DisableEbsEncryptionByDefaultResult => {
  const contents: any = {};
  if (output[_eEBD] != null) {
    contents[_EEBD] = __parseBoolean(output[_eEBD]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastLaunchResult
 */
const de_DisableFastLaunchResult = (output: any, context: __SerdeContext): DisableFastLaunchResult => {
  const contents: any = {};
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_sCn] != null) {
    contents[_SCn] = de_FastLaunchSnapshotConfigurationResponse(output[_sCn], context);
  }
  if (output[_lT] != null) {
    contents[_LTa] = de_FastLaunchLaunchTemplateSpecificationResponse(output[_lT], context);
  }
  if (output[_mPL] != null) {
    contents[_MPL] = __strictParseInt32(output[_mPL]) as number;
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sTR] != null) {
    contents[_STRt] = __expectString(output[_sTR]);
  }
  if (output[_sTT] != null) {
    contents[_STT] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sTT]));
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreErrorItem
 */
const de_DisableFastSnapshotRestoreErrorItem = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreErrorItem => {
  const contents: any = {};
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output.fastSnapshotRestoreStateErrorSet === "") {
    contents[_FSRSE] = [];
  } else if (output[_fSRSES] != null && output[_fSRSES][_i] != null) {
    contents[_FSRSE] = de_DisableFastSnapshotRestoreStateErrorSet(__getArrayIfSingleItem(output[_fSRSES][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreErrorSet
 */
const de_DisableFastSnapshotRestoreErrorSet = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DisableFastSnapshotRestoreErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoresResult
 */
const de_DisableFastSnapshotRestoresResult = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoresResult => {
  const contents: any = {};
  if (output.successful === "") {
    contents[_Suc] = [];
  } else if (output[_suc] != null && output[_suc][_i] != null) {
    contents[_Suc] = de_DisableFastSnapshotRestoreSuccessSet(__getArrayIfSingleItem(output[_suc][_i]), context);
  }
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_DisableFastSnapshotRestoreErrorSet(__getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreStateError
 */
const de_DisableFastSnapshotRestoreStateError = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreStateError => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreStateErrorItem
 */
const de_DisableFastSnapshotRestoreStateErrorItem = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreStateErrorItem => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_er] != null) {
    contents[_Er] = de_DisableFastSnapshotRestoreStateError(output[_er], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreStateErrorSet
 */
const de_DisableFastSnapshotRestoreStateErrorSet = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreStateErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DisableFastSnapshotRestoreStateErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreSuccessItem
 */
const de_DisableFastSnapshotRestoreSuccessItem = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreSuccessItem => {
  const contents: any = {};
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sTR] != null) {
    contents[_STRt] = __expectString(output[_sTR]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_oAw] != null) {
    contents[_OAw] = __expectString(output[_oAw]);
  }
  if (output[_eTn] != null) {
    contents[_ETna] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eTn]));
  }
  if (output[_oT] != null) {
    contents[_OTpt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_oT]));
  }
  if (output[_eTna] != null) {
    contents[_ETnab] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eTna]));
  }
  if (output[_dTi] != null) {
    contents[_DTi] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_dTi]));
  }
  if (output[_dTis] != null) {
    contents[_DTis] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_dTis]));
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableFastSnapshotRestoreSuccessSet
 */
const de_DisableFastSnapshotRestoreSuccessSet = (
  output: any,
  context: __SerdeContext
): DisableFastSnapshotRestoreSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DisableFastSnapshotRestoreSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2DisableImageBlockPublicAccessResult
 */
const de_DisableImageBlockPublicAccessResult = (
  output: any,
  context: __SerdeContext
): DisableImageBlockPublicAccessResult => {
  const contents: any = {};
  if (output[_iBPAS] != null) {
    contents[_IBPAS] = __expectString(output[_iBPAS]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableImageDeprecationResult
 */
const de_DisableImageDeprecationResult = (output: any, context: __SerdeContext): DisableImageDeprecationResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableImageResult
 */
const de_DisableImageResult = (output: any, context: __SerdeContext): DisableImageResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableIpamOrganizationAdminAccountResult
 */
const de_DisableIpamOrganizationAdminAccountResult = (
  output: any,
  context: __SerdeContext
): DisableIpamOrganizationAdminAccountResult => {
  const contents: any = {};
  if (output[_succ] != null) {
    contents[_Succ] = __parseBoolean(output[_succ]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableSerialConsoleAccessResult
 */
const de_DisableSerialConsoleAccessResult = (
  output: any,
  context: __SerdeContext
): DisableSerialConsoleAccessResult => {
  const contents: any = {};
  if (output[_sCAE] != null) {
    contents[_SCAE] = __parseBoolean(output[_sCAE]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableSnapshotBlockPublicAccessResult
 */
const de_DisableSnapshotBlockPublicAccessResult = (
  output: any,
  context: __SerdeContext
): DisableSnapshotBlockPublicAccessResult => {
  const contents: any = {};
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableTransitGatewayRouteTablePropagationResult
 */
const de_DisableTransitGatewayRouteTablePropagationResult = (
  output: any,
  context: __SerdeContext
): DisableTransitGatewayRouteTablePropagationResult => {
  const contents: any = {};
  if (output[_prop] != null) {
    contents[_Prop] = de_TransitGatewayPropagation(output[_prop], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableVpcClassicLinkDnsSupportResult
 */
const de_DisableVpcClassicLinkDnsSupportResult = (
  output: any,
  context: __SerdeContext
): DisableVpcClassicLinkDnsSupportResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisableVpcClassicLinkResult
 */
const de_DisableVpcClassicLinkResult = (output: any, context: __SerdeContext): DisableVpcClassicLinkResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateClientVpnTargetNetworkResult
 */
const de_DisassociateClientVpnTargetNetworkResult = (
  output: any,
  context: __SerdeContext
): DisassociateClientVpnTargetNetworkResult => {
  const contents: any = {};
  if (output[_aIs] != null) {
    contents[_AIss] = __expectString(output[_aIs]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_AssociationStatus(output[_sta], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateEnclaveCertificateIamRoleResult
 */
const de_DisassociateEnclaveCertificateIamRoleResult = (
  output: any,
  context: __SerdeContext
): DisassociateEnclaveCertificateIamRoleResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateIamInstanceProfileResult
 */
const de_DisassociateIamInstanceProfileResult = (
  output: any,
  context: __SerdeContext
): DisassociateIamInstanceProfileResult => {
  const contents: any = {};
  if (output[_iIPA] != null) {
    contents[_IIPA] = de_IamInstanceProfileAssociation(output[_iIPA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateInstanceEventWindowResult
 */
const de_DisassociateInstanceEventWindowResult = (
  output: any,
  context: __SerdeContext
): DisassociateInstanceEventWindowResult => {
  const contents: any = {};
  if (output[_iEW] != null) {
    contents[_IEW] = de_InstanceEventWindow(output[_iEW], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateIpamByoasnResult
 */
const de_DisassociateIpamByoasnResult = (output: any, context: __SerdeContext): DisassociateIpamByoasnResult => {
  const contents: any = {};
  if (output[_aA] != null) {
    contents[_AAsn] = de_AsnAssociation(output[_aA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateIpamResourceDiscoveryResult
 */
const de_DisassociateIpamResourceDiscoveryResult = (
  output: any,
  context: __SerdeContext
): DisassociateIpamResourceDiscoveryResult => {
  const contents: any = {};
  if (output[_iRDA] != null) {
    contents[_IRDA] = de_IpamResourceDiscoveryAssociation(output[_iRDA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateNatGatewayAddressResult
 */
const de_DisassociateNatGatewayAddressResult = (
  output: any,
  context: __SerdeContext
): DisassociateNatGatewayAddressResult => {
  const contents: any = {};
  if (output[_nGI] != null) {
    contents[_NGI] = __expectString(output[_nGI]);
  }
  if (output.natGatewayAddressSet === "") {
    contents[_NGA] = [];
  } else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
    contents[_NGA] = de_NatGatewayAddressList(__getArrayIfSingleItem(output[_nGAS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateSubnetCidrBlockResult
 */
const de_DisassociateSubnetCidrBlockResult = (
  output: any,
  context: __SerdeContext
): DisassociateSubnetCidrBlockResult => {
  const contents: any = {};
  if (output[_iCBA] != null) {
    contents[_ICBA] = de_SubnetIpv6CidrBlockAssociation(output[_iCBA], context);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayMulticastDomainResult
 */
const de_DisassociateTransitGatewayMulticastDomainResult = (
  output: any,
  context: __SerdeContext
): DisassociateTransitGatewayMulticastDomainResult => {
  const contents: any = {};
  if (output[_a] != null) {
    contents[_Ass] = de_TransitGatewayMulticastDomainAssociations(output[_a], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayPolicyTableResult
 */
const de_DisassociateTransitGatewayPolicyTableResult = (
  output: any,
  context: __SerdeContext
): DisassociateTransitGatewayPolicyTableResult => {
  const contents: any = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_TransitGatewayPolicyTableAssociation(output[_ass], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateTransitGatewayRouteTableResult
 */
const de_DisassociateTransitGatewayRouteTableResult = (
  output: any,
  context: __SerdeContext
): DisassociateTransitGatewayRouteTableResult => {
  const contents: any = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_TransitGatewayAssociation(output[_ass], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateTrunkInterfaceResult
 */
const de_DisassociateTrunkInterfaceResult = (
  output: any,
  context: __SerdeContext
): DisassociateTrunkInterfaceResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DisassociateVpcCidrBlockResult
 */
const de_DisassociateVpcCidrBlockResult = (output: any, context: __SerdeContext): DisassociateVpcCidrBlockResult => {
  const contents: any = {};
  if (output[_iCBA] != null) {
    contents[_ICBA] = de_VpcIpv6CidrBlockAssociation(output[_iCBA], context);
  }
  if (output[_cBA] != null) {
    contents[_CBA] = de_VpcCidrBlockAssociation(output[_cBA], context);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DiskImageDescription
 */
const de_DiskImageDescription = (output: any, context: __SerdeContext): DiskImageDescription => {
  const contents: any = {};
  if (output[_ch] != null) {
    contents[_Ch] = __expectString(output[_ch]);
  }
  if (output[_f] != null) {
    contents[_Fo] = __expectString(output[_f]);
  }
  if (output[_iMU] != null) {
    contents[_IMU] = __expectString(output[_iMU]);
  }
  if (output[_si] != null) {
    contents[_Siz] = __strictParseLong(output[_si]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2DiskImageVolumeDescription
 */
const de_DiskImageVolumeDescription = (output: any, context: __SerdeContext): DiskImageVolumeDescription => {
  const contents: any = {};
  if (output[_id] != null) {
    contents[_Id] = __expectString(output[_id]);
  }
  if (output[_si] != null) {
    contents[_Siz] = __strictParseLong(output[_si]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2DiskInfo
 */
const de_DiskInfo = (output: any, context: __SerdeContext): DiskInfo => {
  const contents: any = {};
  if (output[_sIGB] != null) {
    contents[_SIGB] = __strictParseLong(output[_sIGB]) as number;
  }
  if (output[_cou] != null) {
    contents[_Cou] = __strictParseInt32(output[_cou]) as number;
  }
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DiskInfoList
 */
const de_DiskInfoList = (output: any, context: __SerdeContext): DiskInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DiskInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2DnsEntry
 */
const de_DnsEntry = (output: any, context: __SerdeContext): DnsEntry => {
  const contents: any = {};
  if (output[_dNn] != null) {
    contents[_DNn] = __expectString(output[_dNn]);
  }
  if (output[_hZI] != null) {
    contents[_HZI] = __expectString(output[_hZI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2DnsEntrySet
 */
const de_DnsEntrySet = (output: any, context: __SerdeContext): DnsEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_DnsEntry(entry, context);
    });
};

/**
 * deserializeAws_ec2DnsOptions
 */
const de_DnsOptions = (output: any, context: __SerdeContext): DnsOptions => {
  const contents: any = {};
  if (output[_dRIT] != null) {
    contents[_DRIT] = __expectString(output[_dRIT]);
  }
  if (output[_pDOFIRE] != null) {
    contents[_PDOFIRE] = __parseBoolean(output[_pDOFIRE]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EbsBlockDevice
 */
const de_EbsBlockDevice = (output: any, context: __SerdeContext): EbsBlockDevice => {
  const contents: any = {};
  if (output[_dOT] != null) {
    contents[_DOT] = __parseBoolean(output[_dOT]);
  }
  if (output[_io] != null) {
    contents[_Io] = __strictParseInt32(output[_io]) as number;
  }
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_vSo] != null) {
    contents[_VS] = __strictParseInt32(output[_vSo]) as number;
  }
  if (output[_vT] != null) {
    contents[_VT] = __expectString(output[_vT]);
  }
  if (output[_kKI] != null) {
    contents[_KKI] = __expectString(output[_kKI]);
  }
  if (output[_th] != null) {
    contents[_Th] = __strictParseInt32(output[_th]) as number;
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output[_enc] != null) {
    contents[_Enc] = __parseBoolean(output[_enc]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EbsInfo
 */
const de_EbsInfo = (output: any, context: __SerdeContext): EbsInfo => {
  const contents: any = {};
  if (output[_eOS] != null) {
    contents[_EOS] = __expectString(output[_eOS]);
  }
  if (output[_eSn] != null) {
    contents[_ESnc] = __expectString(output[_eSn]);
  }
  if (output[_eOI] != null) {
    contents[_EOI] = de_EbsOptimizedInfo(output[_eOI], context);
  }
  if (output[_nS] != null) {
    contents[_NS] = __expectString(output[_nS]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EbsInstanceBlockDevice
 */
const de_EbsInstanceBlockDevice = (output: any, context: __SerdeContext): EbsInstanceBlockDevice => {
  const contents: any = {};
  if (output[_aTt] != null) {
    contents[_ATtt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_aTt]));
  }
  if (output[_dOT] != null) {
    contents[_DOT] = __parseBoolean(output[_dOT]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = __expectString(output[_vIo]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EbsOptimizedInfo
 */
const de_EbsOptimizedInfo = (output: any, context: __SerdeContext): EbsOptimizedInfo => {
  const contents: any = {};
  if (output[_bBIM] != null) {
    contents[_BBIM] = __strictParseInt32(output[_bBIM]) as number;
  }
  if (output[_bTIMB] != null) {
    contents[_BTIMB] = __strictParseFloat(output[_bTIMB]) as number;
  }
  if (output[_bIa] != null) {
    contents[_BIa] = __strictParseInt32(output[_bIa]) as number;
  }
  if (output[_mBIM] != null) {
    contents[_MBIM] = __strictParseInt32(output[_mBIM]) as number;
  }
  if (output[_mTIMB] != null) {
    contents[_MTIMB] = __strictParseFloat(output[_mTIMB]) as number;
  }
  if (output[_mI] != null) {
    contents[_MIa] = __strictParseInt32(output[_mI]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2Ec2InstanceConnectEndpoint
 */
const de_Ec2InstanceConnectEndpoint = (output: any, context: __SerdeContext): Ec2InstanceConnectEndpoint => {
  const contents: any = {};
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_iCEI] != null) {
    contents[_ICEI] = __expectString(output[_iCEI]);
  }
  if (output[_iCEA] != null) {
    contents[_ICEA] = __expectString(output[_iCEA]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sMt] != null) {
    contents[_SMt] = __expectString(output[_sMt]);
  }
  if (output[_dNn] != null) {
    contents[_DNn] = __expectString(output[_dNn]);
  }
  if (output[_fDN] != null) {
    contents[_FDN] = __expectString(output[_fDN]);
  }
  if (output.networkInterfaceIdSet === "") {
    contents[_NIIe] = [];
  } else if (output[_nIIS] != null && output[_nIIS][_i] != null) {
    contents[_NIIe] = de_NetworkInterfaceIdSet(__getArrayIfSingleItem(output[_nIIS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_cAr] != null) {
    contents[_CAr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cAr]));
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_pCI] != null) {
    contents[_PCI] = __parseBoolean(output[_pCI]);
  }
  if (output.securityGroupIdSet === "") {
    contents[_SGI] = [];
  } else if (output[_sGIS] != null && output[_sGIS][_i] != null) {
    contents[_SGI] = de_SecurityGroupIdSet(__getArrayIfSingleItem(output[_sGIS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2EfaInfo
 */
const de_EfaInfo = (output: any, context: __SerdeContext): EfaInfo => {
  const contents: any = {};
  if (output[_mEI] != null) {
    contents[_MEI] = __strictParseInt32(output[_mEI]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2EgressOnlyInternetGateway
 */
const de_EgressOnlyInternetGateway = (output: any, context: __SerdeContext): EgressOnlyInternetGateway => {
  const contents: any = {};
  if (output.attachmentSet === "") {
    contents[_Atta] = [];
  } else if (output[_aSt] != null && output[_aSt][_i] != null) {
    contents[_Atta] = de_InternetGatewayAttachmentList(__getArrayIfSingleItem(output[_aSt][_i]), context);
  }
  if (output[_eOIGI] != null) {
    contents[_EOIGI] = __expectString(output[_eOIGI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2EgressOnlyInternetGatewayList
 */
const de_EgressOnlyInternetGatewayList = (output: any, context: __SerdeContext): EgressOnlyInternetGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_EgressOnlyInternetGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2ElasticGpuAssociation
 */
const de_ElasticGpuAssociation = (output: any, context: __SerdeContext): ElasticGpuAssociation => {
  const contents: any = {};
  if (output[_eGI] != null) {
    contents[_EGIl] = __expectString(output[_eGI]);
  }
  if (output[_eGAI] != null) {
    contents[_EGAI] = __expectString(output[_eGAI]);
  }
  if (output[_eGAS] != null) {
    contents[_EGAS] = __expectString(output[_eGAS]);
  }
  if (output[_eGAT] != null) {
    contents[_EGAT] = __expectString(output[_eGAT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ElasticGpuAssociationList
 */
const de_ElasticGpuAssociationList = (output: any, context: __SerdeContext): ElasticGpuAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ElasticGpuAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2ElasticGpuHealth
 */
const de_ElasticGpuHealth = (output: any, context: __SerdeContext): ElasticGpuHealth => {
  const contents: any = {};
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ElasticGpus
 */
const de_ElasticGpus = (output: any, context: __SerdeContext): ElasticGpus => {
  const contents: any = {};
  if (output[_eGI] != null) {
    contents[_EGIl] = __expectString(output[_eGI]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_eGT] != null) {
    contents[_EGT] = __expectString(output[_eGT]);
  }
  if (output[_eGH] != null) {
    contents[_EGH] = de_ElasticGpuHealth(output[_eGH], context);
  }
  if (output[_eGSl] != null) {
    contents[_EGSlas] = __expectString(output[_eGSl]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ElasticGpuSet
 */
const de_ElasticGpuSet = (output: any, context: __SerdeContext): ElasticGpus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ElasticGpus(entry, context);
    });
};

/**
 * deserializeAws_ec2ElasticGpuSpecificationResponse
 */
const de_ElasticGpuSpecificationResponse = (output: any, context: __SerdeContext): ElasticGpuSpecificationResponse => {
  const contents: any = {};
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ElasticGpuSpecificationResponseList
 */
const de_ElasticGpuSpecificationResponseList = (
  output: any,
  context: __SerdeContext
): ElasticGpuSpecificationResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ElasticGpuSpecificationResponse(entry, context);
    });
};

/**
 * deserializeAws_ec2ElasticInferenceAcceleratorAssociation
 */
const de_ElasticInferenceAcceleratorAssociation = (
  output: any,
  context: __SerdeContext
): ElasticInferenceAcceleratorAssociation => {
  const contents: any = {};
  if (output[_eIAA] != null) {
    contents[_EIAA] = __expectString(output[_eIAA]);
  }
  if (output[_eIAAI] != null) {
    contents[_EIAAI] = __expectString(output[_eIAAI]);
  }
  if (output[_eIAAS] != null) {
    contents[_EIAAS] = __expectString(output[_eIAAS]);
  }
  if (output[_eIAAT] != null) {
    contents[_EIAAT] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eIAAT]));
  }
  return contents;
};

/**
 * deserializeAws_ec2ElasticInferenceAcceleratorAssociationList
 */
const de_ElasticInferenceAcceleratorAssociationList = (
  output: any,
  context: __SerdeContext
): ElasticInferenceAcceleratorAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ElasticInferenceAcceleratorAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2EnableAddressTransferResult
 */
const de_EnableAddressTransferResult = (output: any, context: __SerdeContext): EnableAddressTransferResult => {
  const contents: any = {};
  if (output[_aT] != null) {
    contents[_ATdd] = de_AddressTransfer(output[_aT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableAwsNetworkPerformanceMetricSubscriptionResult
 */
const de_EnableAwsNetworkPerformanceMetricSubscriptionResult = (
  output: any,
  context: __SerdeContext
): EnableAwsNetworkPerformanceMetricSubscriptionResult => {
  const contents: any = {};
  if (output[_ou] != null) {
    contents[_Ou] = __parseBoolean(output[_ou]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableEbsEncryptionByDefaultResult
 */
const de_EnableEbsEncryptionByDefaultResult = (
  output: any,
  context: __SerdeContext
): EnableEbsEncryptionByDefaultResult => {
  const contents: any = {};
  if (output[_eEBD] != null) {
    contents[_EEBD] = __parseBoolean(output[_eEBD]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastLaunchResult
 */
const de_EnableFastLaunchResult = (output: any, context: __SerdeContext): EnableFastLaunchResult => {
  const contents: any = {};
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_sCn] != null) {
    contents[_SCn] = de_FastLaunchSnapshotConfigurationResponse(output[_sCn], context);
  }
  if (output[_lT] != null) {
    contents[_LTa] = de_FastLaunchLaunchTemplateSpecificationResponse(output[_lT], context);
  }
  if (output[_mPL] != null) {
    contents[_MPL] = __strictParseInt32(output[_mPL]) as number;
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sTR] != null) {
    contents[_STRt] = __expectString(output[_sTR]);
  }
  if (output[_sTT] != null) {
    contents[_STT] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sTT]));
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreErrorItem
 */
const de_EnableFastSnapshotRestoreErrorItem = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreErrorItem => {
  const contents: any = {};
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output.fastSnapshotRestoreStateErrorSet === "") {
    contents[_FSRSE] = [];
  } else if (output[_fSRSES] != null && output[_fSRSES][_i] != null) {
    contents[_FSRSE] = de_EnableFastSnapshotRestoreStateErrorSet(__getArrayIfSingleItem(output[_fSRSES][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreErrorSet
 */
const de_EnableFastSnapshotRestoreErrorSet = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_EnableFastSnapshotRestoreErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoresResult
 */
const de_EnableFastSnapshotRestoresResult = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoresResult => {
  const contents: any = {};
  if (output.successful === "") {
    contents[_Suc] = [];
  } else if (output[_suc] != null && output[_suc][_i] != null) {
    contents[_Suc] = de_EnableFastSnapshotRestoreSuccessSet(__getArrayIfSingleItem(output[_suc][_i]), context);
  }
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_EnableFastSnapshotRestoreErrorSet(__getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreStateError
 */
const de_EnableFastSnapshotRestoreStateError = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreStateError => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreStateErrorItem
 */
const de_EnableFastSnapshotRestoreStateErrorItem = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreStateErrorItem => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_er] != null) {
    contents[_Er] = de_EnableFastSnapshotRestoreStateError(output[_er], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreStateErrorSet
 */
const de_EnableFastSnapshotRestoreStateErrorSet = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreStateErrorItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_EnableFastSnapshotRestoreStateErrorItem(entry, context);
    });
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreSuccessItem
 */
const de_EnableFastSnapshotRestoreSuccessItem = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreSuccessItem => {
  const contents: any = {};
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sTR] != null) {
    contents[_STRt] = __expectString(output[_sTR]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_oAw] != null) {
    contents[_OAw] = __expectString(output[_oAw]);
  }
  if (output[_eTn] != null) {
    contents[_ETna] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eTn]));
  }
  if (output[_oT] != null) {
    contents[_OTpt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_oT]));
  }
  if (output[_eTna] != null) {
    contents[_ETnab] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eTna]));
  }
  if (output[_dTi] != null) {
    contents[_DTi] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_dTi]));
  }
  if (output[_dTis] != null) {
    contents[_DTis] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_dTis]));
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableFastSnapshotRestoreSuccessSet
 */
const de_EnableFastSnapshotRestoreSuccessSet = (
  output: any,
  context: __SerdeContext
): EnableFastSnapshotRestoreSuccessItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_EnableFastSnapshotRestoreSuccessItem(entry, context);
    });
};

/**
 * deserializeAws_ec2EnableImageBlockPublicAccessResult
 */
const de_EnableImageBlockPublicAccessResult = (
  output: any,
  context: __SerdeContext
): EnableImageBlockPublicAccessResult => {
  const contents: any = {};
  if (output[_iBPAS] != null) {
    contents[_IBPAS] = __expectString(output[_iBPAS]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableImageDeprecationResult
 */
const de_EnableImageDeprecationResult = (output: any, context: __SerdeContext): EnableImageDeprecationResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableImageResult
 */
const de_EnableImageResult = (output: any, context: __SerdeContext): EnableImageResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableIpamOrganizationAdminAccountResult
 */
const de_EnableIpamOrganizationAdminAccountResult = (
  output: any,
  context: __SerdeContext
): EnableIpamOrganizationAdminAccountResult => {
  const contents: any = {};
  if (output[_succ] != null) {
    contents[_Succ] = __parseBoolean(output[_succ]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableReachabilityAnalyzerOrganizationSharingResult
 */
const de_EnableReachabilityAnalyzerOrganizationSharingResult = (
  output: any,
  context: __SerdeContext
): EnableReachabilityAnalyzerOrganizationSharingResult => {
  const contents: any = {};
  if (output[_rV] != null) {
    contents[_RV] = __parseBoolean(output[_rV]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableSerialConsoleAccessResult
 */
const de_EnableSerialConsoleAccessResult = (output: any, context: __SerdeContext): EnableSerialConsoleAccessResult => {
  const contents: any = {};
  if (output[_sCAE] != null) {
    contents[_SCAE] = __parseBoolean(output[_sCAE]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableSnapshotBlockPublicAccessResult
 */
const de_EnableSnapshotBlockPublicAccessResult = (
  output: any,
  context: __SerdeContext
): EnableSnapshotBlockPublicAccessResult => {
  const contents: any = {};
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableTransitGatewayRouteTablePropagationResult
 */
const de_EnableTransitGatewayRouteTablePropagationResult = (
  output: any,
  context: __SerdeContext
): EnableTransitGatewayRouteTablePropagationResult => {
  const contents: any = {};
  if (output[_prop] != null) {
    contents[_Prop] = de_TransitGatewayPropagation(output[_prop], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableVpcClassicLinkDnsSupportResult
 */
const de_EnableVpcClassicLinkDnsSupportResult = (
  output: any,
  context: __SerdeContext
): EnableVpcClassicLinkDnsSupportResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnableVpcClassicLinkResult
 */
const de_EnableVpcClassicLinkResult = (output: any, context: __SerdeContext): EnableVpcClassicLinkResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnaSrdSpecificationRequest
 */
const de_EnaSrdSpecificationRequest = (output: any, context: __SerdeContext): EnaSrdSpecificationRequest => {
  const contents: any = {};
  if (output[_ESE] != null) {
    contents[_ESE] = __parseBoolean(output[_ESE]);
  }
  if (output[_ESUS] != null) {
    contents[_ESUS] = de_EnaSrdUdpSpecificationRequest(output[_ESUS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnaSrdUdpSpecificationRequest
 */
const de_EnaSrdUdpSpecificationRequest = (output: any, context: __SerdeContext): EnaSrdUdpSpecificationRequest => {
  const contents: any = {};
  if (output[_ESUE] != null) {
    contents[_ESUE] = __parseBoolean(output[_ESUE]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EnclaveOptions
 */
const de_EnclaveOptions = (output: any, context: __SerdeContext): EnclaveOptions => {
  const contents: any = {};
  if (output[_en] != null) {
    contents[_En] = __parseBoolean(output[_en]);
  }
  return contents;
};

/**
 * deserializeAws_ec2EndpointSet
 */
const de_EndpointSet = (output: any, context: __SerdeContext): ClientVpnEndpoint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ClientVpnEndpoint(entry, context);
    });
};

/**
 * deserializeAws_ec2ErrorSet
 */
const de_ErrorSet = (output: any, context: __SerdeContext): ValidationError[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ValidationError(entry, context);
    });
};

/**
 * deserializeAws_ec2EventInformation
 */
const de_EventInformation = (output: any, context: __SerdeContext): EventInformation => {
  const contents: any = {};
  if (output[_eDv] != null) {
    contents[_EDv] = __expectString(output[_eDv]);
  }
  if (output[_eST] != null) {
    contents[_EST] = __expectString(output[_eST]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExcludedInstanceTypeSet
 */
const de_ExcludedInstanceTypeSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Explanation
 */
const de_Explanation = (output: any, context: __SerdeContext): Explanation => {
  const contents: any = {};
  if (output[_ac] != null) {
    contents[_Acl] = de_AnalysisComponent(output[_ac], context);
  }
  if (output[_aRc] != null) {
    contents[_ARcl] = de_AnalysisAclRule(output[_aRc], context);
  }
  if (output[_ad] != null) {
    contents[_Ad] = __expectString(output[_ad]);
  }
  if (output.addressSet === "") {
    contents[_Addr] = [];
  } else if (output[_aSd] != null && output[_aSd][_i] != null) {
    contents[_Addr] = de_IpAddressList(__getArrayIfSingleItem(output[_aSd][_i]), context);
  }
  if (output[_aTtt] != null) {
    contents[_ATtta] = de_AnalysisComponent(output[_aTtt], context);
  }
  if (output.availabilityZoneSet === "") {
    contents[_AZv] = [];
  } else if (output[_aZS] != null && output[_aZS][_i] != null) {
    contents[_AZv] = de_ValueStringList(__getArrayIfSingleItem(output[_aZS][_i]), context);
  }
  if (output.cidrSet === "") {
    contents[_Ci] = [];
  } else if (output[_cS] != null && output[_cS][_i] != null) {
    contents[_Ci] = de_ValueStringList(__getArrayIfSingleItem(output[_cS][_i]), context);
  }
  if (output[_c] != null) {
    contents[_Com] = de_AnalysisComponent(output[_c], context);
  }
  if (output[_cGu] != null) {
    contents[_CGu] = de_AnalysisComponent(output[_cGu], context);
  }
  if (output[_d] != null) {
    contents[_D] = de_AnalysisComponent(output[_d], context);
  }
  if (output[_dV] != null) {
    contents[_DVest] = de_AnalysisComponent(output[_dV], context);
  }
  if (output[_di] != null) {
    contents[_Di] = __expectString(output[_di]);
  }
  if (output[_eCx] != null) {
    contents[_ECx] = __expectString(output[_eCx]);
  }
  if (output[_iRT] != null) {
    contents[_IRT] = de_AnalysisComponent(output[_iRT], context);
  }
  if (output[_iG] != null) {
    contents[_IGn] = de_AnalysisComponent(output[_iG], context);
  }
  if (output[_lBA] != null) {
    contents[_LBA] = __expectString(output[_lBA]);
  }
  if (output[_cLBL] != null) {
    contents[_CLBL] = de_AnalysisLoadBalancerListener(output[_cLBL], context);
  }
  if (output[_lBLP] != null) {
    contents[_LBLP] = __strictParseInt32(output[_lBLP]) as number;
  }
  if (output[_lBT] != null) {
    contents[_LBT] = de_AnalysisLoadBalancerTarget(output[_lBT], context);
  }
  if (output[_lBTG] != null) {
    contents[_LBTG] = de_AnalysisComponent(output[_lBTG], context);
  }
  if (output.loadBalancerTargetGroupSet === "") {
    contents[_LBTGo] = [];
  } else if (output[_lBTGS] != null && output[_lBTGS][_i] != null) {
    contents[_LBTGo] = de_AnalysisComponentList(__getArrayIfSingleItem(output[_lBTGS][_i]), context);
  }
  if (output[_lBTP] != null) {
    contents[_LBTP] = __strictParseInt32(output[_lBTP]) as number;
  }
  if (output[_eLBL] != null) {
    contents[_ELBL] = de_AnalysisComponent(output[_eLBL], context);
  }
  if (output[_mC] != null) {
    contents[_MCis] = __expectString(output[_mC]);
  }
  if (output[_nG] != null) {
    contents[_NG] = de_AnalysisComponent(output[_nG], context);
  }
  if (output[_nIe] != null) {
    contents[_NIet] = de_AnalysisComponent(output[_nIe], context);
  }
  if (output[_pF] != null) {
    contents[_PF] = __expectString(output[_pF]);
  }
  if (output[_vPC] != null) {
    contents[_VPC] = de_AnalysisComponent(output[_vPC], context);
  }
  if (output[_po] != null) {
    contents[_Po] = __strictParseInt32(output[_po]) as number;
  }
  if (output.portRangeSet === "") {
    contents[_PRo] = [];
  } else if (output[_pRS] != null && output[_pRS][_i] != null) {
    contents[_PRo] = de_PortRangeList(__getArrayIfSingleItem(output[_pRS][_i]), context);
  }
  if (output[_pL] != null) {
    contents[_PLr] = de_AnalysisComponent(output[_pL], context);
  }
  if (output.protocolSet === "") {
    contents[_Pro] = [];
  } else if (output[_pSro] != null && output[_pSro][_i] != null) {
    contents[_Pro] = de_StringList(__getArrayIfSingleItem(output[_pSro][_i]), context);
  }
  if (output[_rTR] != null) {
    contents[_RTR] = de_AnalysisRouteTableRoute(output[_rTR], context);
  }
  if (output[_rTo] != null) {
    contents[_RTo] = de_AnalysisComponent(output[_rTo], context);
  }
  if (output[_sG] != null) {
    contents[_SGe] = de_AnalysisComponent(output[_sG], context);
  }
  if (output[_sGR] != null) {
    contents[_SGRe] = de_AnalysisSecurityGroupRule(output[_sGR], context);
  }
  if (output.securityGroupSet === "") {
    contents[_SG] = [];
  } else if (output[_sGS] != null && output[_sGS][_i] != null) {
    contents[_SG] = de_AnalysisComponentList(__getArrayIfSingleItem(output[_sGS][_i]), context);
  }
  if (output[_sV] != null) {
    contents[_SVo] = de_AnalysisComponent(output[_sV], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_su] != null) {
    contents[_Su] = de_AnalysisComponent(output[_su], context);
  }
  if (output[_sRT] != null) {
    contents[_SRT] = de_AnalysisComponent(output[_sRT], context);
  }
  if (output[_vp] != null) {
    contents[_Vp] = de_AnalysisComponent(output[_vp], context);
  }
  if (output[_vE] != null) {
    contents[_VE] = de_AnalysisComponent(output[_vE], context);
  }
  if (output[_vC] != null) {
    contents[_VC] = de_AnalysisComponent(output[_vC], context);
  }
  if (output[_vG] != null) {
    contents[_VG] = de_AnalysisComponent(output[_vG], context);
  }
  if (output[_tG] != null) {
    contents[_TGr] = de_AnalysisComponent(output[_tG], context);
  }
  if (output[_tGRT] != null) {
    contents[_TGRT] = de_AnalysisComponent(output[_tGRT], context);
  }
  if (output[_tGRTR] != null) {
    contents[_TGRTR] = de_TransitGatewayRouteTableRoute(output[_tGRTR], context);
  }
  if (output[_tGAr] != null) {
    contents[_TGAra] = de_AnalysisComponent(output[_tGAr], context);
  }
  if (output[_cAo] != null) {
    contents[_CAom] = __expectString(output[_cAo]);
  }
  if (output[_cRo] != null) {
    contents[_CRo] = __expectString(output[_cRo]);
  }
  if (output[_fSR] != null) {
    contents[_FSRi] = de_FirewallStatelessRule(output[_fSR], context);
  }
  if (output[_fSRi] != null) {
    contents[_FSRir] = de_FirewallStatefulRule(output[_fSRi], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExplanationList
 */
const de_ExplanationList = (output: any, context: __SerdeContext): Explanation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Explanation(entry, context);
    });
};

/**
 * deserializeAws_ec2ExportClientVpnClientCertificateRevocationListResult
 */
const de_ExportClientVpnClientCertificateRevocationListResult = (
  output: any,
  context: __SerdeContext
): ExportClientVpnClientCertificateRevocationListResult => {
  const contents: any = {};
  if (output[_cRL] != null) {
    contents[_CRL] = __expectString(output[_cRL]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientCertificateRevocationListStatus(output[_sta], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportClientVpnClientConfigurationResult
 */
const de_ExportClientVpnClientConfigurationResult = (
  output: any,
  context: __SerdeContext
): ExportClientVpnClientConfigurationResult => {
  const contents: any = {};
  if (output[_cCl] != null) {
    contents[_CCl] = __expectString(output[_cCl]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportImageResult
 */
const de_ExportImageResult = (output: any, context: __SerdeContext): ExportImageResult => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_dIF] != null) {
    contents[_DIFi] = __expectString(output[_dIF]);
  }
  if (output[_eITI] != null) {
    contents[_EITIx] = __expectString(output[_eITI]);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_rNo] != null) {
    contents[_RNo] = __expectString(output[_rNo]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = __expectString(output[_pro]);
  }
  if (output[_sEL] != null) {
    contents[_SEL] = de_ExportTaskS3Location(output[_sEL], context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportImageTask
 */
const de_ExportImageTask = (output: any, context: __SerdeContext): ExportImageTask => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_eITI] != null) {
    contents[_EITIx] = __expectString(output[_eITI]);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = __expectString(output[_pro]);
  }
  if (output[_sEL] != null) {
    contents[_SEL] = de_ExportTaskS3Location(output[_sEL], context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportImageTaskList
 */
const de_ExportImageTaskList = (output: any, context: __SerdeContext): ExportImageTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ExportImageTask(entry, context);
    });
};

/**
 * deserializeAws_ec2ExportTask
 */
const de_ExportTask = (output: any, context: __SerdeContext): ExportTask => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_eTI] != null) {
    contents[_ETI] = __expectString(output[_eTI]);
  }
  if (output[_eTSx] != null) {
    contents[_ETST] = de_ExportToS3Task(output[_eTSx], context);
  }
  if (output[_iE] != null) {
    contents[_IED] = de_InstanceExportDetails(output[_iE], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportTaskList
 */
const de_ExportTaskList = (output: any, context: __SerdeContext): ExportTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ExportTask(entry, context);
    });
};

/**
 * deserializeAws_ec2ExportTaskS3Location
 */
const de_ExportTaskS3Location = (output: any, context: __SerdeContext): ExportTaskS3Location => {
  const contents: any = {};
  if (output[_sB] != null) {
    contents[_SB] = __expectString(output[_sB]);
  }
  if (output[_sP] != null) {
    contents[_SP] = __expectString(output[_sP]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportToS3Task
 */
const de_ExportToS3Task = (output: any, context: __SerdeContext): ExportToS3Task => {
  const contents: any = {};
  if (output[_cF] != null) {
    contents[_CFo] = __expectString(output[_cF]);
  }
  if (output[_dIF] != null) {
    contents[_DIFi] = __expectString(output[_dIF]);
  }
  if (output[_sB] != null) {
    contents[_SB] = __expectString(output[_sB]);
  }
  if (output[_sK] != null) {
    contents[_SK] = __expectString(output[_sK]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ExportTransitGatewayRoutesResult
 */
const de_ExportTransitGatewayRoutesResult = (
  output: any,
  context: __SerdeContext
): ExportTransitGatewayRoutesResult => {
  const contents: any = {};
  if (output[_sL] != null) {
    contents[_SLo] = __expectString(output[_sL]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FailedCapacityReservationFleetCancellationResult
 */
const de_FailedCapacityReservationFleetCancellationResult = (
  output: any,
  context: __SerdeContext
): FailedCapacityReservationFleetCancellationResult => {
  const contents: any = {};
  if (output[_cRFI] != null) {
    contents[_CRFIa] = __expectString(output[_cRFI]);
  }
  if (output[_cCRFE] != null) {
    contents[_CCRFE] = de_CancelCapacityReservationFleetError(output[_cCRFE], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2FailedCapacityReservationFleetCancellationResultSet
 */
const de_FailedCapacityReservationFleetCancellationResultSet = (
  output: any,
  context: __SerdeContext
): FailedCapacityReservationFleetCancellationResult[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FailedCapacityReservationFleetCancellationResult(entry, context);
    });
};

/**
 * deserializeAws_ec2FailedQueuedPurchaseDeletion
 */
const de_FailedQueuedPurchaseDeletion = (output: any, context: __SerdeContext): FailedQueuedPurchaseDeletion => {
  const contents: any = {};
  if (output[_er] != null) {
    contents[_Er] = de_DeleteQueuedReservedInstancesError(output[_er], context);
  }
  if (output[_rII] != null) {
    contents[_RIIe] = __expectString(output[_rII]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FailedQueuedPurchaseDeletionSet
 */
const de_FailedQueuedPurchaseDeletionSet = (output: any, context: __SerdeContext): FailedQueuedPurchaseDeletion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FailedQueuedPurchaseDeletion(entry, context);
    });
};

/**
 * deserializeAws_ec2FastLaunchLaunchTemplateSpecificationResponse
 */
const de_FastLaunchLaunchTemplateSpecificationResponse = (
  output: any,
  context: __SerdeContext
): FastLaunchLaunchTemplateSpecificationResponse => {
  const contents: any = {};
  if (output[_lTI] != null) {
    contents[_LTI] = __expectString(output[_lTI]);
  }
  if (output[_lTN] != null) {
    contents[_LTN] = __expectString(output[_lTN]);
  }
  if (output[_ve] != null) {
    contents[_V] = __expectString(output[_ve]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FastLaunchSnapshotConfigurationResponse
 */
const de_FastLaunchSnapshotConfigurationResponse = (
  output: any,
  context: __SerdeContext
): FastLaunchSnapshotConfigurationResponse => {
  const contents: any = {};
  if (output[_tRC] != null) {
    contents[_TRC] = __strictParseInt32(output[_tRC]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2FederatedAuthentication
 */
const de_FederatedAuthentication = (output: any, context: __SerdeContext): FederatedAuthentication => {
  const contents: any = {};
  if (output[_sPA] != null) {
    contents[_SPA] = __expectString(output[_sPA]);
  }
  if (output[_sSSPA] != null) {
    contents[_SSSPA] = __expectString(output[_sSSPA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FilterPortRange
 */
const de_FilterPortRange = (output: any, context: __SerdeContext): FilterPortRange => {
  const contents: any = {};
  if (output[_fP] != null) {
    contents[_FP] = __strictParseInt32(output[_fP]) as number;
  }
  if (output[_tPo] != null) {
    contents[_TP] = __strictParseInt32(output[_tPo]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2FirewallStatefulRule
 */
const de_FirewallStatefulRule = (output: any, context: __SerdeContext): FirewallStatefulRule => {
  const contents: any = {};
  if (output[_rGA] != null) {
    contents[_RGA] = __expectString(output[_rGA]);
  }
  if (output.sourceSet === "") {
    contents[_So] = [];
  } else if (output[_sSo] != null && output[_sSo][_i] != null) {
    contents[_So] = de_ValueStringList(__getArrayIfSingleItem(output[_sSo][_i]), context);
  }
  if (output.destinationSet === "") {
    contents[_Des] = [];
  } else if (output[_dSe] != null && output[_dSe][_i] != null) {
    contents[_Des] = de_ValueStringList(__getArrayIfSingleItem(output[_dSe][_i]), context);
  }
  if (output.sourcePortSet === "") {
    contents[_SPo] = [];
  } else if (output[_sPS] != null && output[_sPS][_i] != null) {
    contents[_SPo] = de_PortRangeList(__getArrayIfSingleItem(output[_sPS][_i]), context);
  }
  if (output.destinationPortSet === "") {
    contents[_DPe] = [];
  } else if (output[_dPS] != null && output[_dPS][_i] != null) {
    contents[_DPe] = de_PortRangeList(__getArrayIfSingleItem(output[_dPS][_i]), context);
  }
  if (output[_pr] != null) {
    contents[_P] = __expectString(output[_pr]);
  }
  if (output[_rA] != null) {
    contents[_RAu] = __expectString(output[_rA]);
  }
  if (output[_di] != null) {
    contents[_Di] = __expectString(output[_di]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FirewallStatelessRule
 */
const de_FirewallStatelessRule = (output: any, context: __SerdeContext): FirewallStatelessRule => {
  const contents: any = {};
  if (output[_rGA] != null) {
    contents[_RGA] = __expectString(output[_rGA]);
  }
  if (output.sourceSet === "") {
    contents[_So] = [];
  } else if (output[_sSo] != null && output[_sSo][_i] != null) {
    contents[_So] = de_ValueStringList(__getArrayIfSingleItem(output[_sSo][_i]), context);
  }
  if (output.destinationSet === "") {
    contents[_Des] = [];
  } else if (output[_dSe] != null && output[_dSe][_i] != null) {
    contents[_Des] = de_ValueStringList(__getArrayIfSingleItem(output[_dSe][_i]), context);
  }
  if (output.sourcePortSet === "") {
    contents[_SPo] = [];
  } else if (output[_sPS] != null && output[_sPS][_i] != null) {
    contents[_SPo] = de_PortRangeList(__getArrayIfSingleItem(output[_sPS][_i]), context);
  }
  if (output.destinationPortSet === "") {
    contents[_DPe] = [];
  } else if (output[_dPS] != null && output[_dPS][_i] != null) {
    contents[_DPe] = de_PortRangeList(__getArrayIfSingleItem(output[_dPS][_i]), context);
  }
  if (output.protocolSet === "") {
    contents[_Pro] = [];
  } else if (output[_pSro] != null && output[_pSro][_i] != null) {
    contents[_Pro] = de_ProtocolIntList(__getArrayIfSingleItem(output[_pSro][_i]), context);
  }
  if (output[_rA] != null) {
    contents[_RAu] = __expectString(output[_rA]);
  }
  if (output[_pri] != null) {
    contents[_Pri] = __strictParseInt32(output[_pri]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetCapacityReservation
 */
const de_FleetCapacityReservation = (output: any, context: __SerdeContext): FleetCapacityReservation => {
  const contents: any = {};
  if (output[_cRI] != null) {
    contents[_CRI] = __expectString(output[_cRI]);
  }
  if (output[_aZI] != null) {
    contents[_AZI] = __expectString(output[_aZI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_iPn] != null) {
    contents[_IPn] = __expectString(output[_iPn]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_tIC] != null) {
    contents[_TICo] = __strictParseInt32(output[_tIC]) as number;
  }
  if (output[_fC] != null) {
    contents[_FC] = __strictParseFloat(output[_fC]) as number;
  }
  if (output[_eO] != null) {
    contents[_EO] = __parseBoolean(output[_eO]);
  }
  if (output[_cD] != null) {
    contents[_CDr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cD]));
  }
  if (output[_we] != null) {
    contents[_W] = __strictParseFloat(output[_we]) as number;
  }
  if (output[_pri] != null) {
    contents[_Pri] = __strictParseInt32(output[_pri]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetCapacityReservationSet
 */
const de_FleetCapacityReservationSet = (output: any, context: __SerdeContext): FleetCapacityReservation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FleetCapacityReservation(entry, context);
    });
};

/**
 * deserializeAws_ec2FleetData
 */
const de_FleetData = (output: any, context: __SerdeContext): FleetData => {
  const contents: any = {};
  if (output[_aSc] != null) {
    contents[_ASc] = __expectString(output[_aSc]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_fIl] != null) {
    contents[_FIl] = __expectString(output[_fIl]);
  }
  if (output[_fSl] != null) {
    contents[_FS] = __expectString(output[_fSl]);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  if (output[_eCTP] != null) {
    contents[_ECTP] = __expectString(output[_eCTP]);
  }
  if (output[_fC] != null) {
    contents[_FC] = __strictParseFloat(output[_fC]) as number;
  }
  if (output[_fODC] != null) {
    contents[_FODC] = __strictParseFloat(output[_fODC]) as number;
  }
  if (output.launchTemplateConfigs === "") {
    contents[_LTC] = [];
  } else if (output[_lTC] != null && output[_lTC][_i] != null) {
    contents[_LTC] = de_FleetLaunchTemplateConfigList(__getArrayIfSingleItem(output[_lTC][_i]), context);
  }
  if (output[_tCS] != null) {
    contents[_TCS] = de_TargetCapacitySpecification(output[_tCS], context);
  }
  if (output[_tIWE] != null) {
    contents[_TIWE] = __parseBoolean(output[_tIWE]);
  }
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  if (output[_vF] != null) {
    contents[_VF] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_vF]));
  }
  if (output[_vU] != null) {
    contents[_VU] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_vU]));
  }
  if (output[_rUI] != null) {
    contents[_RUI] = __parseBoolean(output[_rUI]);
  }
  if (output[_sO] != null) {
    contents[_SO] = de_SpotOptions(output[_sO], context);
  }
  if (output[_oDO] != null) {
    contents[_ODO] = de_OnDemandOptions(output[_oDO], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output.errorSet === "") {
    contents[_Err] = [];
  } else if (output[_eSr] != null && output[_eSr][_i] != null) {
    contents[_Err] = de_DescribeFleetsErrorSet(__getArrayIfSingleItem(output[_eSr][_i]), context);
  }
  if (output.fleetInstanceSet === "") {
    contents[_In] = [];
  } else if (output[_fIS] != null && output[_fIS][_i] != null) {
    contents[_In] = de_DescribeFleetsInstancesSet(__getArrayIfSingleItem(output[_fIS][_i]), context);
  }
  if (output[_cont] != null) {
    contents[_Con] = __expectString(output[_cont]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetLaunchTemplateConfig
 */
const de_FleetLaunchTemplateConfig = (output: any, context: __SerdeContext): FleetLaunchTemplateConfig => {
  const contents: any = {};
  if (output[_lTS] != null) {
    contents[_LTS] = de_FleetLaunchTemplateSpecification(output[_lTS], context);
  }
  if (output.overrides === "") {
    contents[_Ov] = [];
  } else if (output[_ov] != null && output[_ov][_i] != null) {
    contents[_Ov] = de_FleetLaunchTemplateOverridesList(__getArrayIfSingleItem(output[_ov][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetLaunchTemplateConfigList
 */
const de_FleetLaunchTemplateConfigList = (output: any, context: __SerdeContext): FleetLaunchTemplateConfig[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FleetLaunchTemplateConfig(entry, context);
    });
};

/**
 * deserializeAws_ec2FleetLaunchTemplateOverrides
 */
const de_FleetLaunchTemplateOverrides = (output: any, context: __SerdeContext): FleetLaunchTemplateOverrides => {
  const contents: any = {};
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_mP] != null) {
    contents[_MPa] = __expectString(output[_mP]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_wC] != null) {
    contents[_WC] = __strictParseFloat(output[_wC]) as number;
  }
  if (output[_pri] != null) {
    contents[_Pri] = __strictParseFloat(output[_pri]) as number;
  }
  if (output[_pla] != null) {
    contents[_Pl] = de_PlacementResponse(output[_pla], context);
  }
  if (output[_iR] != null) {
    contents[_IR] = de_InstanceRequirements(output[_iR], context);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetLaunchTemplateOverridesList
 */
const de_FleetLaunchTemplateOverridesList = (output: any, context: __SerdeContext): FleetLaunchTemplateOverrides[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FleetLaunchTemplateOverrides(entry, context);
    });
};

/**
 * deserializeAws_ec2FleetLaunchTemplateSpecification
 */
const de_FleetLaunchTemplateSpecification = (
  output: any,
  context: __SerdeContext
): FleetLaunchTemplateSpecification => {
  const contents: any = {};
  if (output[_lTI] != null) {
    contents[_LTI] = __expectString(output[_lTI]);
  }
  if (output[_lTN] != null) {
    contents[_LTN] = __expectString(output[_lTN]);
  }
  if (output[_ve] != null) {
    contents[_V] = __expectString(output[_ve]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetSet
 */
const de_FleetSet = (output: any, context: __SerdeContext): FleetData[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FleetData(entry, context);
    });
};

/**
 * deserializeAws_ec2FleetSpotCapacityRebalance
 */
const de_FleetSpotCapacityRebalance = (output: any, context: __SerdeContext): FleetSpotCapacityRebalance => {
  const contents: any = {};
  if (output[_rSe] != null) {
    contents[_RS] = __expectString(output[_rSe]);
  }
  if (output[_tD] != null) {
    contents[_TDe] = __strictParseInt32(output[_tD]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2FleetSpotMaintenanceStrategies
 */
const de_FleetSpotMaintenanceStrategies = (output: any, context: __SerdeContext): FleetSpotMaintenanceStrategies => {
  const contents: any = {};
  if (output[_cRa] != null) {
    contents[_CRap] = de_FleetSpotCapacityRebalance(output[_cRa], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2FlowLog
 */
const de_FlowLog = (output: any, context: __SerdeContext): FlowLog => {
  const contents: any = {};
  if (output[_cTre] != null) {
    contents[_CTre] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output[_dLEM] != null) {
    contents[_DLEM] = __expectString(output[_dLEM]);
  }
  if (output[_dLPA] != null) {
    contents[_DLPA] = __expectString(output[_dLPA]);
  }
  if (output[_dCAR] != null) {
    contents[_DCAR] = __expectString(output[_dCAR]);
  }
  if (output[_dLS] != null) {
    contents[_DLSe] = __expectString(output[_dLS]);
  }
  if (output[_fLI] != null) {
    contents[_FLIl] = __expectString(output[_fLI]);
  }
  if (output[_fLSl] != null) {
    contents[_FLS] = __expectString(output[_fLSl]);
  }
  if (output[_lGN] != null) {
    contents[_LGN] = __expectString(output[_lGN]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_tT] != null) {
    contents[_TT] = __expectString(output[_tT]);
  }
  if (output[_lDT] != null) {
    contents[_LDT] = __expectString(output[_lDT]);
  }
  if (output[_lD] != null) {
    contents[_LD] = __expectString(output[_lD]);
  }
  if (output[_lF] != null) {
    contents[_LF] = __expectString(output[_lF]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_mAI] != null) {
    contents[_MAI] = __strictParseInt32(output[_mAI]) as number;
  }
  if (output[_dOe] != null) {
    contents[_DO] = de_DestinationOptionsResponse(output[_dOe], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2FlowLogSet
 */
const de_FlowLogSet = (output: any, context: __SerdeContext): FlowLog[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FlowLog(entry, context);
    });
};

/**
 * deserializeAws_ec2FpgaDeviceInfo
 */
const de_FpgaDeviceInfo = (output: any, context: __SerdeContext): FpgaDeviceInfo => {
  const contents: any = {};
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  if (output[_man] != null) {
    contents[_Man] = __expectString(output[_man]);
  }
  if (output[_cou] != null) {
    contents[_Cou] = __strictParseInt32(output[_cou]) as number;
  }
  if (output[_mIe] != null) {
    contents[_MIe] = de_FpgaDeviceMemoryInfo(output[_mIe], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2FpgaDeviceInfoList
 */
const de_FpgaDeviceInfoList = (output: any, context: __SerdeContext): FpgaDeviceInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FpgaDeviceInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2FpgaDeviceMemoryInfo
 */
const de_FpgaDeviceMemoryInfo = (output: any, context: __SerdeContext): FpgaDeviceMemoryInfo => {
  const contents: any = {};
  if (output[_sIMB] != null) {
    contents[_SIMB] = __strictParseInt32(output[_sIMB]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2FpgaImage
 */
const de_FpgaImage = (output: any, context: __SerdeContext): FpgaImage => {
  const contents: any = {};
  if (output[_fII] != null) {
    contents[_FII] = __expectString(output[_fII]);
  }
  if (output[_fIGI] != null) {
    contents[_FIGI] = __expectString(output[_fIGI]);
  }
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_sVh] != null) {
    contents[_SVh] = __expectString(output[_sVh]);
  }
  if (output[_pIc] != null) {
    contents[_PIc] = de_PciId(output[_pIc], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = de_FpgaImageState(output[_st], context);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_uT] != null) {
    contents[_UTp] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_uT]));
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_oAw] != null) {
    contents[_OAw] = __expectString(output[_oAw]);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(__getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output.tags === "") {
    contents[_Ta] = [];
  } else if (output[_ta] != null && output[_ta][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_ta][_i]), context);
  }
  if (output[_pu] != null) {
    contents[_Pu] = __parseBoolean(output[_pu]);
  }
  if (output[_dRS] != null) {
    contents[_DRS] = __parseBoolean(output[_dRS]);
  }
  if (output.instanceTypes === "") {
    contents[_ITnst] = [];
  } else if (output[_iTn] != null && output[_iTn][_i] != null) {
    contents[_ITnst] = de_InstanceTypesList(__getArrayIfSingleItem(output[_iTn][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2FpgaImageAttribute
 */
const de_FpgaImageAttribute = (output: any, context: __SerdeContext): FpgaImageAttribute => {
  const contents: any = {};
  if (output[_fII] != null) {
    contents[_FII] = __expectString(output[_fII]);
  }
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.loadPermissions === "") {
    contents[_LPo] = [];
  } else if (output[_lP] != null && output[_lP][_i] != null) {
    contents[_LPo] = de_LoadPermissionList(__getArrayIfSingleItem(output[_lP][_i]), context);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(__getArrayIfSingleItem(output[_pC][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2FpgaImageList
 */
const de_FpgaImageList = (output: any, context: __SerdeContext): FpgaImage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_FpgaImage(entry, context);
    });
};

/**
 * deserializeAws_ec2FpgaImageState
 */
const de_FpgaImageState = (output: any, context: __SerdeContext): FpgaImageState => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2FpgaInfo
 */
const de_FpgaInfo = (output: any, context: __SerdeContext): FpgaInfo => {
  const contents: any = {};
  if (output.fpgas === "") {
    contents[_Fp] = [];
  } else if (output[_fp] != null && output[_fp][_i] != null) {
    contents[_Fp] = de_FpgaDeviceInfoList(__getArrayIfSingleItem(output[_fp][_i]), context);
  }
  if (output[_tFMIMB] != null) {
    contents[_TFMIMB] = __strictParseInt32(output[_tFMIMB]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2GetAssociatedEnclaveCertificateIamRolesResult
 */
const de_GetAssociatedEnclaveCertificateIamRolesResult = (
  output: any,
  context: __SerdeContext
): GetAssociatedEnclaveCertificateIamRolesResult => {
  const contents: any = {};
  if (output.associatedRoleSet === "") {
    contents[_ARs] = [];
  } else if (output[_aRS] != null && output[_aRS][_i] != null) {
    contents[_ARs] = de_AssociatedRolesList(__getArrayIfSingleItem(output[_aRS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetAssociatedIpv6PoolCidrsResult
 */
const de_GetAssociatedIpv6PoolCidrsResult = (
  output: any,
  context: __SerdeContext
): GetAssociatedIpv6PoolCidrsResult => {
  const contents: any = {};
  if (output.ipv6CidrAssociationSet === "") {
    contents[_ICA] = [];
  } else if (output[_iCAS] != null && output[_iCAS][_i] != null) {
    contents[_ICA] = de_Ipv6CidrAssociationSet(__getArrayIfSingleItem(output[_iCAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetAwsNetworkPerformanceDataResult
 */
const de_GetAwsNetworkPerformanceDataResult = (
  output: any,
  context: __SerdeContext
): GetAwsNetworkPerformanceDataResult => {
  const contents: any = {};
  if (output.dataResponseSet === "") {
    contents[_DRa] = [];
  } else if (output[_dRSa] != null && output[_dRSa][_i] != null) {
    contents[_DRa] = de_DataResponses(__getArrayIfSingleItem(output[_dRSa][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetCapacityReservationUsageResult
 */
const de_GetCapacityReservationUsageResult = (
  output: any,
  context: __SerdeContext
): GetCapacityReservationUsageResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output[_cRI] != null) {
    contents[_CRI] = __expectString(output[_cRI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_tIC] != null) {
    contents[_TICo] = __strictParseInt32(output[_tIC]) as number;
  }
  if (output[_aICv] != null) {
    contents[_AICv] = __strictParseInt32(output[_aICv]) as number;
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output.instanceUsageSet === "") {
    contents[_IU] = [];
  } else if (output[_iUS] != null && output[_iUS][_i] != null) {
    contents[_IU] = de_InstanceUsageSet(__getArrayIfSingleItem(output[_iUS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetCoipPoolUsageResult
 */
const de_GetCoipPoolUsageResult = (output: any, context: __SerdeContext): GetCoipPoolUsageResult => {
  const contents: any = {};
  if (output[_cPI] != null) {
    contents[_CPIo] = __expectString(output[_cPI]);
  }
  if (output.coipAddressUsageSet === "") {
    contents[_CAU] = [];
  } else if (output[_cAUS] != null && output[_cAUS][_i] != null) {
    contents[_CAU] = de_CoipAddressUsageSet(__getArrayIfSingleItem(output[_cAUS][_i]), context);
  }
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = __expectString(output[_lGRTI]);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetConsoleOutputResult
 */
const de_GetConsoleOutputResult = (output: any, context: __SerdeContext): GetConsoleOutputResult => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_ou] != null) {
    contents[_Ou] = __expectString(output[_ou]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_ti]));
  }
  return contents;
};

/**
 * deserializeAws_ec2GetConsoleScreenshotResult
 */
const de_GetConsoleScreenshotResult = (output: any, context: __SerdeContext): GetConsoleScreenshotResult => {
  const contents: any = {};
  if (output[_iD] != null) {
    contents[_IDm] = __expectString(output[_iD]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetDefaultCreditSpecificationResult
 */
const de_GetDefaultCreditSpecificationResult = (
  output: any,
  context: __SerdeContext
): GetDefaultCreditSpecificationResult => {
  const contents: any = {};
  if (output[_iFCS] != null) {
    contents[_IFCS] = de_InstanceFamilyCreditSpecification(output[_iFCS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetEbsDefaultKmsKeyIdResult
 */
const de_GetEbsDefaultKmsKeyIdResult = (output: any, context: __SerdeContext): GetEbsDefaultKmsKeyIdResult => {
  const contents: any = {};
  if (output[_kKI] != null) {
    contents[_KKI] = __expectString(output[_kKI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetEbsEncryptionByDefaultResult
 */
const de_GetEbsEncryptionByDefaultResult = (output: any, context: __SerdeContext): GetEbsEncryptionByDefaultResult => {
  const contents: any = {};
  if (output[_eEBD] != null) {
    contents[_EEBD] = __parseBoolean(output[_eEBD]);
  }
  if (output[_sTs] != null) {
    contents[_STs] = __expectString(output[_sTs]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetFlowLogsIntegrationTemplateResult
 */
const de_GetFlowLogsIntegrationTemplateResult = (
  output: any,
  context: __SerdeContext
): GetFlowLogsIntegrationTemplateResult => {
  const contents: any = {};
  if (output[_re] != null) {
    contents[_Resu] = __expectString(output[_re]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetGroupsForCapacityReservationResult
 */
const de_GetGroupsForCapacityReservationResult = (
  output: any,
  context: __SerdeContext
): GetGroupsForCapacityReservationResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.capacityReservationGroupSet === "") {
    contents[_CRG] = [];
  } else if (output[_cRGS] != null && output[_cRGS][_i] != null) {
    contents[_CRG] = de_CapacityReservationGroupSet(__getArrayIfSingleItem(output[_cRGS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetHostReservationPurchasePreviewResult
 */
const de_GetHostReservationPurchasePreviewResult = (
  output: any,
  context: __SerdeContext
): GetHostReservationPurchasePreviewResult => {
  const contents: any = {};
  if (output[_cC] != null) {
    contents[_CCu] = __expectString(output[_cC]);
  }
  if (output.purchase === "") {
    contents[_Pur] = [];
  } else if (output[_pur] != null && output[_pur][_i] != null) {
    contents[_Pur] = de_PurchaseSet(__getArrayIfSingleItem(output[_pur][_i]), context);
  }
  if (output[_tHP] != null) {
    contents[_THP] = __expectString(output[_tHP]);
  }
  if (output[_tUP] != null) {
    contents[_TUP] = __expectString(output[_tUP]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetImageBlockPublicAccessStateResult
 */
const de_GetImageBlockPublicAccessStateResult = (
  output: any,
  context: __SerdeContext
): GetImageBlockPublicAccessStateResult => {
  const contents: any = {};
  if (output[_iBPAS] != null) {
    contents[_IBPAS] = __expectString(output[_iBPAS]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetInstanceTypesFromInstanceRequirementsResult
 */
const de_GetInstanceTypesFromInstanceRequirementsResult = (
  output: any,
  context: __SerdeContext
): GetInstanceTypesFromInstanceRequirementsResult => {
  const contents: any = {};
  if (output.instanceTypeSet === "") {
    contents[_ITnst] = [];
  } else if (output[_iTS] != null && output[_iTS][_i] != null) {
    contents[_ITnst] = de_InstanceTypeInfoFromInstanceRequirementsSet(
      __getArrayIfSingleItem(output[_iTS][_i]),
      context
    );
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetInstanceUefiDataResult
 */
const de_GetInstanceUefiDataResult = (output: any, context: __SerdeContext): GetInstanceUefiDataResult => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_uD] != null) {
    contents[_UDe] = __expectString(output[_uD]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetIpamAddressHistoryResult
 */
const de_GetIpamAddressHistoryResult = (output: any, context: __SerdeContext): GetIpamAddressHistoryResult => {
  const contents: any = {};
  if (output.historyRecordSet === "") {
    contents[_HRi] = [];
  } else if (output[_hRS] != null && output[_hRS][_i] != null) {
    contents[_HRi] = de_IpamAddressHistoryRecordSet(__getArrayIfSingleItem(output[_hRS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetIpamDiscoveredAccountsResult
 */
const de_GetIpamDiscoveredAccountsResult = (output: any, context: __SerdeContext): GetIpamDiscoveredAccountsResult => {
  const contents: any = {};
  if (output.ipamDiscoveredAccountSet === "") {
    contents[_IDA] = [];
  } else if (output[_iDAS] != null && output[_iDAS][_i] != null) {
    contents[_IDA] = de_IpamDiscoveredAccountSet(__getArrayIfSingleItem(output[_iDAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetIpamDiscoveredPublicAddressesResult
 */
const de_GetIpamDiscoveredPublicAddressesResult = (
  output: any,
  context: __SerdeContext
): GetIpamDiscoveredPublicAddressesResult => {
  const contents: any = {};
  if (output.ipamDiscoveredPublicAddressSet === "") {
    contents[_IDPA] = [];
  } else if (output[_iDPAS] != null && output[_iDPAS][_i] != null) {
    contents[_IDPA] = de_IpamDiscoveredPublicAddressSet(__getArrayIfSingleItem(output[_iDPAS][_i]), context);
  }
  if (output[_oST] != null) {
    contents[_OST] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_oST]));
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetIpamDiscoveredResourceCidrsResult
 */
const de_GetIpamDiscoveredResourceCidrsResult = (
  output: any,
  context: __SerdeContext
): GetIpamDiscoveredResourceCidrsResult => {
  const contents: any = {};
  if (output.ipamDiscoveredResourceCidrSet === "") {
    contents[_IDRC] = [];
  } else if (output[_iDRCS] != null && output[_iDRCS][_i] != null) {
    contents[_IDRC] = de_IpamDiscoveredResourceCidrSet(__getArrayIfSingleItem(output[_iDRCS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetIpamPoolAllocationsResult
 */
const de_GetIpamPoolAllocationsResult = (output: any, context: __SerdeContext): GetIpamPoolAllocationsResult => {
  const contents: any = {};
  if (output.ipamPoolAllocationSet === "") {
    contents[_IPAp] = [];
  } else if (output[_iPAS] != null && output[_iPAS][_i] != null) {
    contents[_IPAp] = de_IpamPoolAllocationSet(__getArrayIfSingleItem(output[_iPAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetIpamPoolCidrsResult
 */
const de_GetIpamPoolCidrsResult = (output: any, context: __SerdeContext): GetIpamPoolCidrsResult => {
  const contents: any = {};
  if (output.ipamPoolCidrSet === "") {
    contents[_IPCpam] = [];
  } else if (output[_iPCS] != null && output[_iPCS][_i] != null) {
    contents[_IPCpam] = de_IpamPoolCidrSet(__getArrayIfSingleItem(output[_iPCS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetIpamResourceCidrsResult
 */
const de_GetIpamResourceCidrsResult = (output: any, context: __SerdeContext): GetIpamResourceCidrsResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.ipamResourceCidrSet === "") {
    contents[_IRC] = [];
  } else if (output[_iRCS] != null && output[_iRCS][_i] != null) {
    contents[_IRC] = de_IpamResourceCidrSet(__getArrayIfSingleItem(output[_iRCS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetLaunchTemplateDataResult
 */
const de_GetLaunchTemplateDataResult = (output: any, context: __SerdeContext): GetLaunchTemplateDataResult => {
  const contents: any = {};
  if (output[_lTD] != null) {
    contents[_LTD] = de_ResponseLaunchTemplateData(output[_lTD], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetManagedPrefixListAssociationsResult
 */
const de_GetManagedPrefixListAssociationsResult = (
  output: any,
  context: __SerdeContext
): GetManagedPrefixListAssociationsResult => {
  const contents: any = {};
  if (output.prefixListAssociationSet === "") {
    contents[_PLA] = [];
  } else if (output[_pLAS] != null && output[_pLAS][_i] != null) {
    contents[_PLA] = de_PrefixListAssociationSet(__getArrayIfSingleItem(output[_pLAS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetManagedPrefixListEntriesResult
 */
const de_GetManagedPrefixListEntriesResult = (
  output: any,
  context: __SerdeContext
): GetManagedPrefixListEntriesResult => {
  const contents: any = {};
  if (output.entrySet === "") {
    contents[_Ent] = [];
  } else if (output[_eSnt] != null && output[_eSnt][_i] != null) {
    contents[_Ent] = de_PrefixListEntrySet(__getArrayIfSingleItem(output[_eSnt][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetNetworkInsightsAccessScopeAnalysisFindingsResult
 */
const de_GetNetworkInsightsAccessScopeAnalysisFindingsResult = (
  output: any,
  context: __SerdeContext
): GetNetworkInsightsAccessScopeAnalysisFindingsResult => {
  const contents: any = {};
  if (output[_nIASAI] != null) {
    contents[_NIASAI] = __expectString(output[_nIASAI]);
  }
  if (output[_aSn] != null) {
    contents[_ASn] = __expectString(output[_aSn]);
  }
  if (output.analysisFindingSet === "") {
    contents[_AFn] = [];
  } else if (output[_aFS] != null && output[_aFS][_i] != null) {
    contents[_AFn] = de_AccessScopeAnalysisFindingList(__getArrayIfSingleItem(output[_aFS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetNetworkInsightsAccessScopeContentResult
 */
const de_GetNetworkInsightsAccessScopeContentResult = (
  output: any,
  context: __SerdeContext
): GetNetworkInsightsAccessScopeContentResult => {
  const contents: any = {};
  if (output[_nIASC] != null) {
    contents[_NIASC] = de_NetworkInsightsAccessScopeContent(output[_nIASC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetPasswordDataResult
 */
const de_GetPasswordDataResult = (output: any, context: __SerdeContext): GetPasswordDataResult => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_pD] != null) {
    contents[_PDa] = __expectString(output[_pD]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_ti]));
  }
  return contents;
};

/**
 * deserializeAws_ec2GetReservedInstancesExchangeQuoteResult
 */
const de_GetReservedInstancesExchangeQuoteResult = (
  output: any,
  context: __SerdeContext
): GetReservedInstancesExchangeQuoteResult => {
  const contents: any = {};
  if (output[_cC] != null) {
    contents[_CCu] = __expectString(output[_cC]);
  }
  if (output[_iVE] != null) {
    contents[_IVE] = __parseBoolean(output[_iVE]);
  }
  if (output[_oRIWEA] != null) {
    contents[_ORIWEA] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_oRIWEA]));
  }
  if (output[_pDa] != null) {
    contents[_PDay] = __expectString(output[_pDa]);
  }
  if (output[_rIVR] != null) {
    contents[_RIVR] = de_ReservationValue(output[_rIVR], context);
  }
  if (output.reservedInstanceValueSet === "") {
    contents[_RIVS] = [];
  } else if (output[_rIVS] != null && output[_rIVS][_i] != null) {
    contents[_RIVS] = de_ReservedInstanceReservationValueSet(__getArrayIfSingleItem(output[_rIVS][_i]), context);
  }
  if (output[_tCVR] != null) {
    contents[_TCVR] = de_ReservationValue(output[_tCVR], context);
  }
  if (output.targetConfigurationValueSet === "") {
    contents[_TCVS] = [];
  } else if (output[_tCVS] != null && output[_tCVS][_i] != null) {
    contents[_TCVS] = de_TargetReservationValueSet(__getArrayIfSingleItem(output[_tCVS][_i]), context);
  }
  if (output[_vFR] != null) {
    contents[_VFR] = __expectString(output[_vFR]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetSecurityGroupsForVpcResult
 */
const de_GetSecurityGroupsForVpcResult = (output: any, context: __SerdeContext): GetSecurityGroupsForVpcResult => {
  const contents: any = {};
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  if (output.securityGroupForVpcSet === "") {
    contents[_SGFV] = [];
  } else if (output[_sGFVS] != null && output[_sGFVS][_i] != null) {
    contents[_SGFV] = de_SecurityGroupForVpcList(__getArrayIfSingleItem(output[_sGFVS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetSerialConsoleAccessStatusResult
 */
const de_GetSerialConsoleAccessStatusResult = (
  output: any,
  context: __SerdeContext
): GetSerialConsoleAccessStatusResult => {
  const contents: any = {};
  if (output[_sCAE] != null) {
    contents[_SCAE] = __parseBoolean(output[_sCAE]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetSnapshotBlockPublicAccessStateResult
 */
const de_GetSnapshotBlockPublicAccessStateResult = (
  output: any,
  context: __SerdeContext
): GetSnapshotBlockPublicAccessStateResult => {
  const contents: any = {};
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetSpotPlacementScoresResult
 */
const de_GetSpotPlacementScoresResult = (output: any, context: __SerdeContext): GetSpotPlacementScoresResult => {
  const contents: any = {};
  if (output.spotPlacementScoreSet === "") {
    contents[_SPS] = [];
  } else if (output[_sPSS] != null && output[_sPSS][_i] != null) {
    contents[_SPS] = de_SpotPlacementScores(__getArrayIfSingleItem(output[_sPSS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetSubnetCidrReservationsResult
 */
const de_GetSubnetCidrReservationsResult = (output: any, context: __SerdeContext): GetSubnetCidrReservationsResult => {
  const contents: any = {};
  if (output.subnetIpv4CidrReservationSet === "") {
    contents[_SICR] = [];
  } else if (output[_sICRS] != null && output[_sICRS][_i] != null) {
    contents[_SICR] = de_SubnetCidrReservationList(__getArrayIfSingleItem(output[_sICRS][_i]), context);
  }
  if (output.subnetIpv6CidrReservationSet === "") {
    contents[_SICRu] = [];
  } else if (output[_sICRSu] != null && output[_sICRSu][_i] != null) {
    contents[_SICRu] = de_SubnetCidrReservationList(__getArrayIfSingleItem(output[_sICRSu][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayAttachmentPropagationsResult
 */
const de_GetTransitGatewayAttachmentPropagationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayAttachmentPropagationsResult => {
  const contents: any = {};
  if (output.transitGatewayAttachmentPropagations === "") {
    contents[_TGAP] = [];
  } else if (output[_tGAP] != null && output[_tGAP][_i] != null) {
    contents[_TGAP] = de_TransitGatewayAttachmentPropagationList(__getArrayIfSingleItem(output[_tGAP][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayMulticastDomainAssociationsResult
 */
const de_GetTransitGatewayMulticastDomainAssociationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayMulticastDomainAssociationsResult => {
  const contents: any = {};
  if (output.multicastDomainAssociations === "") {
    contents[_MDA] = [];
  } else if (output[_mDA] != null && output[_mDA][_i] != null) {
    contents[_MDA] = de_TransitGatewayMulticastDomainAssociationList(__getArrayIfSingleItem(output[_mDA][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayPolicyTableAssociationsResult
 */
const de_GetTransitGatewayPolicyTableAssociationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayPolicyTableAssociationsResult => {
  const contents: any = {};
  if (output.associations === "") {
    contents[_Ass] = [];
  } else if (output[_a] != null && output[_a][_i] != null) {
    contents[_Ass] = de_TransitGatewayPolicyTableAssociationList(__getArrayIfSingleItem(output[_a][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayPolicyTableEntriesResult
 */
const de_GetTransitGatewayPolicyTableEntriesResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayPolicyTableEntriesResult => {
  const contents: any = {};
  if (output.transitGatewayPolicyTableEntries === "") {
    contents[_TGPTE] = [];
  } else if (output[_tGPTE] != null && output[_tGPTE][_i] != null) {
    contents[_TGPTE] = de_TransitGatewayPolicyTableEntryList(__getArrayIfSingleItem(output[_tGPTE][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayPrefixListReferencesResult
 */
const de_GetTransitGatewayPrefixListReferencesResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayPrefixListReferencesResult => {
  const contents: any = {};
  if (output.transitGatewayPrefixListReferenceSet === "") {
    contents[_TGPLRr] = [];
  } else if (output[_tGPLRS] != null && output[_tGPLRS][_i] != null) {
    contents[_TGPLRr] = de_TransitGatewayPrefixListReferenceSet(__getArrayIfSingleItem(output[_tGPLRS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayRouteTableAssociationsResult
 */
const de_GetTransitGatewayRouteTableAssociationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayRouteTableAssociationsResult => {
  const contents: any = {};
  if (output.associations === "") {
    contents[_Ass] = [];
  } else if (output[_a] != null && output[_a][_i] != null) {
    contents[_Ass] = de_TransitGatewayRouteTableAssociationList(__getArrayIfSingleItem(output[_a][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetTransitGatewayRouteTablePropagationsResult
 */
const de_GetTransitGatewayRouteTablePropagationsResult = (
  output: any,
  context: __SerdeContext
): GetTransitGatewayRouteTablePropagationsResult => {
  const contents: any = {};
  if (output.transitGatewayRouteTablePropagations === "") {
    contents[_TGRTP] = [];
  } else if (output[_tGRTP] != null && output[_tGRTP][_i] != null) {
    contents[_TGRTP] = de_TransitGatewayRouteTablePropagationList(__getArrayIfSingleItem(output[_tGRTP][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetVerifiedAccessEndpointPolicyResult
 */
const de_GetVerifiedAccessEndpointPolicyResult = (
  output: any,
  context: __SerdeContext
): GetVerifiedAccessEndpointPolicyResult => {
  const contents: any = {};
  if (output[_pE] != null) {
    contents[_PE] = __parseBoolean(output[_pE]);
  }
  if (output[_pDo] != null) {
    contents[_PD] = __expectString(output[_pDo]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetVerifiedAccessGroupPolicyResult
 */
const de_GetVerifiedAccessGroupPolicyResult = (
  output: any,
  context: __SerdeContext
): GetVerifiedAccessGroupPolicyResult => {
  const contents: any = {};
  if (output[_pE] != null) {
    contents[_PE] = __parseBoolean(output[_pE]);
  }
  if (output[_pDo] != null) {
    contents[_PD] = __expectString(output[_pDo]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetVpnConnectionDeviceSampleConfigurationResult
 */
const de_GetVpnConnectionDeviceSampleConfigurationResult = (
  output: any,
  context: __SerdeContext
): GetVpnConnectionDeviceSampleConfigurationResult => {
  const contents: any = {};
  if (output[_vCDSC] != null) {
    contents[_VCDSC] = __expectString(output[_vCDSC]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetVpnConnectionDeviceTypesResult
 */
const de_GetVpnConnectionDeviceTypesResult = (
  output: any,
  context: __SerdeContext
): GetVpnConnectionDeviceTypesResult => {
  const contents: any = {};
  if (output.vpnConnectionDeviceTypeSet === "") {
    contents[_VCDT] = [];
  } else if (output[_vCDTS] != null && output[_vCDTS][_i] != null) {
    contents[_VCDT] = de_VpnConnectionDeviceTypeList(__getArrayIfSingleItem(output[_vCDTS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GetVpnTunnelReplacementStatusResult
 */
const de_GetVpnTunnelReplacementStatusResult = (
  output: any,
  context: __SerdeContext
): GetVpnTunnelReplacementStatusResult => {
  const contents: any = {};
  if (output[_vCI] != null) {
    contents[_VCI] = __expectString(output[_vCI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  if (output[_cGIu] != null) {
    contents[_CGIu] = __expectString(output[_cGIu]);
  }
  if (output[_vGI] != null) {
    contents[_VGI] = __expectString(output[_vGI]);
  }
  if (output[_vTOIA] != null) {
    contents[_VTOIA] = __expectString(output[_vTOIA]);
  }
  if (output[_mD] != null) {
    contents[_MDa] = de_MaintenanceDetails(output[_mD], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GpuDeviceInfo
 */
const de_GpuDeviceInfo = (output: any, context: __SerdeContext): GpuDeviceInfo => {
  const contents: any = {};
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  if (output[_man] != null) {
    contents[_Man] = __expectString(output[_man]);
  }
  if (output[_cou] != null) {
    contents[_Cou] = __strictParseInt32(output[_cou]) as number;
  }
  if (output[_mIe] != null) {
    contents[_MIe] = de_GpuDeviceMemoryInfo(output[_mIe], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2GpuDeviceInfoList
 */
const de_GpuDeviceInfoList = (output: any, context: __SerdeContext): GpuDeviceInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_GpuDeviceInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2GpuDeviceMemoryInfo
 */
const de_GpuDeviceMemoryInfo = (output: any, context: __SerdeContext): GpuDeviceMemoryInfo => {
  const contents: any = {};
  if (output[_sIMB] != null) {
    contents[_SIMB] = __strictParseInt32(output[_sIMB]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2GpuInfo
 */
const de_GpuInfo = (output: any, context: __SerdeContext): GpuInfo => {
  const contents: any = {};
  if (output.gpus === "") {
    contents[_Gp] = [];
  } else if (output[_gp] != null && output[_gp][_i] != null) {
    contents[_Gp] = de_GpuDeviceInfoList(__getArrayIfSingleItem(output[_gp][_i]), context);
  }
  if (output[_tGMIMB] != null) {
    contents[_TGMIMB] = __strictParseInt32(output[_tGMIMB]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2GroupIdentifier
 */
const de_GroupIdentifier = (output: any, context: __SerdeContext): GroupIdentifier => {
  const contents: any = {};
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  return contents;
};

/**
 * deserializeAws_ec2GroupIdentifierList
 */
const de_GroupIdentifierList = (output: any, context: __SerdeContext): GroupIdentifier[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_GroupIdentifier(entry, context);
    });
};

/**
 * deserializeAws_ec2GroupIdentifierSet
 */
const de_GroupIdentifierSet = (output: any, context: __SerdeContext): SecurityGroupIdentifier[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SecurityGroupIdentifier(entry, context);
    });
};

/**
 * deserializeAws_ec2GroupIdStringList
 */
const de_GroupIdStringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2HibernationOptions
 */
const de_HibernationOptions = (output: any, context: __SerdeContext): HibernationOptions => {
  const contents: any = {};
  if (output[_conf] != null) {
    contents[_Conf] = __parseBoolean(output[_conf]);
  }
  return contents;
};

/**
 * deserializeAws_ec2HistoryRecord
 */
const de_HistoryRecord = (output: any, context: __SerdeContext): HistoryRecord => {
  const contents: any = {};
  if (output[_eIv] != null) {
    contents[_EIv] = de_EventInformation(output[_eIv], context);
  }
  if (output[_eTv] != null) {
    contents[_ETv] = __expectString(output[_eTv]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_ti]));
  }
  return contents;
};

/**
 * deserializeAws_ec2HistoryRecordEntry
 */
const de_HistoryRecordEntry = (output: any, context: __SerdeContext): HistoryRecordEntry => {
  const contents: any = {};
  if (output[_eIv] != null) {
    contents[_EIv] = de_EventInformation(output[_eIv], context);
  }
  if (output[_eTv] != null) {
    contents[_ETv] = __expectString(output[_eTv]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_ti]));
  }
  return contents;
};

/**
 * deserializeAws_ec2HistoryRecords
 */
const de_HistoryRecords = (output: any, context: __SerdeContext): HistoryRecord[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_HistoryRecord(entry, context);
    });
};

/**
 * deserializeAws_ec2HistoryRecordSet
 */
const de_HistoryRecordSet = (output: any, context: __SerdeContext): HistoryRecordEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_HistoryRecordEntry(entry, context);
    });
};

/**
 * deserializeAws_ec2Host
 */
const de_Host = (output: any, context: __SerdeContext): Host => {
  const contents: any = {};
  if (output[_aPu] != null) {
    contents[_AP] = __expectString(output[_aPu]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_aC] != null) {
    contents[_ACv] = de_AvailableCapacity(output[_aC], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  if (output[_hI] != null) {
    contents[_HIo] = __expectString(output[_hI]);
  }
  if (output[_hP] != null) {
    contents[_HP] = de_HostProperties(output[_hP], context);
  }
  if (output[_hRI] != null) {
    contents[_HRI] = __expectString(output[_hRI]);
  }
  if (output.instances === "") {
    contents[_In] = [];
  } else if (output[_ins] != null && output[_ins][_i] != null) {
    contents[_In] = de_HostInstanceList(__getArrayIfSingleItem(output[_ins][_i]), context);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_aTll] != null) {
    contents[_ATll] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_aTll]));
  }
  if (output[_rTel] != null) {
    contents[_RTel] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_rTel]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_hR] != null) {
    contents[_HR] = __expectString(output[_hR]);
  }
  if (output[_aMIT] != null) {
    contents[_AMIT] = __expectString(output[_aMIT]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_aZI] != null) {
    contents[_AZI] = __expectString(output[_aZI]);
  }
  if (output[_mOSLRG] != null) {
    contents[_MOSLRG] = __parseBoolean(output[_mOSLRG]);
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output[_hM] != null) {
    contents[_HM] = __expectString(output[_hM]);
  }
  if (output[_aIss] != null) {
    contents[_AIsse] = __expectString(output[_aIss]);
  }
  return contents;
};

/**
 * deserializeAws_ec2HostInstance
 */
const de_HostInstance = (output: any, context: __SerdeContext): HostInstance => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2HostInstanceList
 */
const de_HostInstanceList = (output: any, context: __SerdeContext): HostInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_HostInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2HostList
 */
const de_HostList = (output: any, context: __SerdeContext): Host[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Host(entry, context);
    });
};

/**
 * deserializeAws_ec2HostOffering
 */
const de_HostOffering = (output: any, context: __SerdeContext): HostOffering => {
  const contents: any = {};
  if (output[_cC] != null) {
    contents[_CCu] = __expectString(output[_cC]);
  }
  if (output[_du] != null) {
    contents[_Du] = __strictParseInt32(output[_du]) as number;
  }
  if (output[_hPo] != null) {
    contents[_HPo] = __expectString(output[_hPo]);
  }
  if (output[_iF] != null) {
    contents[_IF] = __expectString(output[_iF]);
  }
  if (output[_oIf] != null) {
    contents[_OI] = __expectString(output[_oIf]);
  }
  if (output[_pO] != null) {
    contents[_PO] = __expectString(output[_pO]);
  }
  if (output[_uP] != null) {
    contents[_UPp] = __expectString(output[_uP]);
  }
  return contents;
};

/**
 * deserializeAws_ec2HostOfferingSet
 */
const de_HostOfferingSet = (output: any, context: __SerdeContext): HostOffering[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_HostOffering(entry, context);
    });
};

/**
 * deserializeAws_ec2HostProperties
 */
const de_HostProperties = (output: any, context: __SerdeContext): HostProperties => {
  const contents: any = {};
  if (output[_cor] != null) {
    contents[_Cor] = __strictParseInt32(output[_cor]) as number;
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_iF] != null) {
    contents[_IF] = __expectString(output[_iF]);
  }
  if (output[_so] != null) {
    contents[_Soc] = __strictParseInt32(output[_so]) as number;
  }
  if (output[_tVC] != null) {
    contents[_TVC] = __strictParseInt32(output[_tVC]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2HostReservation
 */
const de_HostReservation = (output: any, context: __SerdeContext): HostReservation => {
  const contents: any = {};
  if (output[_cou] != null) {
    contents[_Cou] = __strictParseInt32(output[_cou]) as number;
  }
  if (output[_cC] != null) {
    contents[_CCu] = __expectString(output[_cC]);
  }
  if (output[_du] != null) {
    contents[_Du] = __strictParseInt32(output[_du]) as number;
  }
  if (output[_end] != null) {
    contents[_End] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_end]));
  }
  if (output.hostIdSet === "") {
    contents[_HIS] = [];
  } else if (output[_hIS] != null && output[_hIS][_i] != null) {
    contents[_HIS] = de_ResponseHostIdSet(__getArrayIfSingleItem(output[_hIS][_i]), context);
  }
  if (output[_hRI] != null) {
    contents[_HRI] = __expectString(output[_hRI]);
  }
  if (output[_hPo] != null) {
    contents[_HPo] = __expectString(output[_hPo]);
  }
  if (output[_iF] != null) {
    contents[_IF] = __expectString(output[_iF]);
  }
  if (output[_oIf] != null) {
    contents[_OI] = __expectString(output[_oIf]);
  }
  if (output[_pO] != null) {
    contents[_PO] = __expectString(output[_pO]);
  }
  if (output[_star] != null) {
    contents[_Star] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_star]));
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_uP] != null) {
    contents[_UPp] = __expectString(output[_uP]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2HostReservationSet
 */
const de_HostReservationSet = (output: any, context: __SerdeContext): HostReservation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_HostReservation(entry, context);
    });
};

/**
 * deserializeAws_ec2IamInstanceProfile
 */
const de_IamInstanceProfile = (output: any, context: __SerdeContext): IamInstanceProfile => {
  const contents: any = {};
  if (output[_ar] != null) {
    contents[_Ar] = __expectString(output[_ar]);
  }
  if (output[_id] != null) {
    contents[_Id] = __expectString(output[_id]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IamInstanceProfileAssociation
 */
const de_IamInstanceProfileAssociation = (output: any, context: __SerdeContext): IamInstanceProfileAssociation => {
  const contents: any = {};
  if (output[_aIs] != null) {
    contents[_AIss] = __expectString(output[_aIs]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_iIP] != null) {
    contents[_IIP] = de_IamInstanceProfile(output[_iIP], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_ti]));
  }
  return contents;
};

/**
 * deserializeAws_ec2IamInstanceProfileAssociationSet
 */
const de_IamInstanceProfileAssociationSet = (output: any, context: __SerdeContext): IamInstanceProfileAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IamInstanceProfileAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2IamInstanceProfileSpecification
 */
const de_IamInstanceProfileSpecification = (output: any, context: __SerdeContext): IamInstanceProfileSpecification => {
  const contents: any = {};
  if (output[_ar] != null) {
    contents[_Ar] = __expectString(output[_ar]);
  }
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IcmpTypeCode
 */
const de_IcmpTypeCode = (output: any, context: __SerdeContext): IcmpTypeCode => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __strictParseInt32(output[_co]) as number;
  }
  if (output[_ty] != null) {
    contents[_T] = __strictParseInt32(output[_ty]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2IdFormat
 */
const de_IdFormat = (output: any, context: __SerdeContext): IdFormat => {
  const contents: any = {};
  if (output[_dea] != null) {
    contents[_Dea] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_dea]));
  }
  if (output[_res] != null) {
    contents[_Res] = __expectString(output[_res]);
  }
  if (output[_uLI] != null) {
    contents[_ULI] = __parseBoolean(output[_uLI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IdFormatList
 */
const de_IdFormatList = (output: any, context: __SerdeContext): IdFormat[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IdFormat(entry, context);
    });
};

/**
 * deserializeAws_ec2IKEVersionsList
 */
const de_IKEVersionsList = (output: any, context: __SerdeContext): IKEVersionsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IKEVersionsListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2IKEVersionsListValue
 */
const de_IKEVersionsListValue = (output: any, context: __SerdeContext): IKEVersionsListValue => {
  const contents: any = {};
  if (output[_v] != null) {
    contents[_Va] = __expectString(output[_v]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Image
 */
const de_Image = (output: any, context: __SerdeContext): Image => {
  const contents: any = {};
  if (output[_arc] != null) {
    contents[_Arc] = __expectString(output[_arc]);
  }
  if (output[_cDr] != null) {
    contents[_CDre] = __expectString(output[_cDr]);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_iL] != null) {
    contents[_IL] = __expectString(output[_iL]);
  }
  if (output[_iTm] != null) {
    contents[_ITm] = __expectString(output[_iTm]);
  }
  if (output[_iPs] != null) {
    contents[_Pu] = __parseBoolean(output[_iPs]);
  }
  if (output[_kI] != null) {
    contents[_KI] = __expectString(output[_kI]);
  }
  if (output[_iOI] != null) {
    contents[_OIwn] = __expectString(output[_iOI]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = __expectString(output[_pl]);
  }
  if (output[_pDl] != null) {
    contents[_PDl] = __expectString(output[_pDl]);
  }
  if (output[_uO] != null) {
    contents[_UO] = __expectString(output[_uO]);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(__getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output[_rIa] != null) {
    contents[_RIa] = __expectString(output[_rIa]);
  }
  if (output[_iSma] != null) {
    contents[_Stat] = __expectString(output[_iSma]);
  }
  if (output.blockDeviceMapping === "") {
    contents[_BDM] = [];
  } else if (output[_bDM] != null && output[_bDM][_i] != null) {
    contents[_BDM] = de_BlockDeviceMappingList(__getArrayIfSingleItem(output[_bDM][_i]), context);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_eSna] != null) {
    contents[_ESn] = __parseBoolean(output[_eSna]);
  }
  if (output[_h] != null) {
    contents[_H] = __expectString(output[_h]);
  }
  if (output[_iOA] != null) {
    contents[_IOA] = __expectString(output[_iOA]);
  }
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  if (output[_rDN] != null) {
    contents[_RDN] = __expectString(output[_rDN]);
  }
  if (output[_rDT] != null) {
    contents[_RDT] = __expectString(output[_rDT]);
  }
  if (output[_sNSr] != null) {
    contents[_SNS] = __expectString(output[_sNSr]);
  }
  if (output[_sR] != null) {
    contents[_SRt] = de_StateReason(output[_sR], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vTi] != null) {
    contents[_VTir] = __expectString(output[_vTi]);
  }
  if (output[_bM] != null) {
    contents[_BM] = __expectString(output[_bM]);
  }
  if (output[_tSp] != null) {
    contents[_TSp] = __expectString(output[_tSp]);
  }
  if (output[_dTe] != null) {
    contents[_DTep] = __expectString(output[_dTe]);
  }
  if (output[_iSmd] != null) {
    contents[_ISm] = __expectString(output[_iSmd]);
  }
  if (output[_sII] != null) {
    contents[_SIIo] = __expectString(output[_sII]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImageAttribute
 */
const de_ImageAttribute = (output: any, context: __SerdeContext): ImageAttribute => {
  const contents: any = {};
  if (output.blockDeviceMapping === "") {
    contents[_BDM] = [];
  } else if (output[_bDM] != null && output[_bDM][_i] != null) {
    contents[_BDM] = de_BlockDeviceMappingList(__getArrayIfSingleItem(output[_bDM][_i]), context);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output.launchPermission === "") {
    contents[_LPau] = [];
  } else if (output[_lPa] != null && output[_lPa][_i] != null) {
    contents[_LPau] = de_LaunchPermissionList(__getArrayIfSingleItem(output[_lPa][_i]), context);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(__getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output[_de] != null) {
    contents[_De] = de_AttributeValue(output[_de], context);
  }
  if (output[_ke] != null) {
    contents[_KI] = de_AttributeValue(output[_ke], context);
  }
  if (output[_ra] != null) {
    contents[_RIa] = de_AttributeValue(output[_ra], context);
  }
  if (output[_sNSr] != null) {
    contents[_SNS] = de_AttributeValue(output[_sNSr], context);
  }
  if (output[_bM] != null) {
    contents[_BM] = de_AttributeValue(output[_bM], context);
  }
  if (output[_tSp] != null) {
    contents[_TSp] = de_AttributeValue(output[_tSp], context);
  }
  if (output[_uD] != null) {
    contents[_UDe] = de_AttributeValue(output[_uD], context);
  }
  if (output[_lLT] != null) {
    contents[_LLT] = de_AttributeValue(output[_lLT], context);
  }
  if (output[_iSmd] != null) {
    contents[_ISm] = de_AttributeValue(output[_iSmd], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImageList
 */
const de_ImageList = (output: any, context: __SerdeContext): Image[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Image(entry, context);
    });
};

/**
 * deserializeAws_ec2ImageRecycleBinInfo
 */
const de_ImageRecycleBinInfo = (output: any, context: __SerdeContext): ImageRecycleBinInfo => {
  const contents: any = {};
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_rBET] != null) {
    contents[_RBET] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_rBET]));
  }
  if (output[_rBETe] != null) {
    contents[_RBETe] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_rBETe]));
  }
  return contents;
};

/**
 * deserializeAws_ec2ImageRecycleBinInfoList
 */
const de_ImageRecycleBinInfoList = (output: any, context: __SerdeContext): ImageRecycleBinInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ImageRecycleBinInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2ImportClientVpnClientCertificateRevocationListResult
 */
const de_ImportClientVpnClientCertificateRevocationListResult = (
  output: any,
  context: __SerdeContext
): ImportClientVpnClientCertificateRevocationListResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportImageLicenseConfigurationResponse
 */
const de_ImportImageLicenseConfigurationResponse = (
  output: any,
  context: __SerdeContext
): ImportImageLicenseConfigurationResponse => {
  const contents: any = {};
  if (output[_lCA] != null) {
    contents[_LCA] = __expectString(output[_lCA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportImageLicenseSpecificationListResponse
 */
const de_ImportImageLicenseSpecificationListResponse = (
  output: any,
  context: __SerdeContext
): ImportImageLicenseConfigurationResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ImportImageLicenseConfigurationResponse(entry, context);
    });
};

/**
 * deserializeAws_ec2ImportImageResult
 */
const de_ImportImageResult = (output: any, context: __SerdeContext): ImportImageResult => {
  const contents: any = {};
  if (output[_arc] != null) {
    contents[_Arc] = __expectString(output[_arc]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_enc] != null) {
    contents[_Enc] = __parseBoolean(output[_enc]);
  }
  if (output[_h] != null) {
    contents[_H] = __expectString(output[_h]);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_iTI] != null) {
    contents[_ITI] = __expectString(output[_iTI]);
  }
  if (output[_kKI] != null) {
    contents[_KKI] = __expectString(output[_kKI]);
  }
  if (output[_lTi] != null) {
    contents[_LTi] = __expectString(output[_lTi]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = __expectString(output[_pl]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = __expectString(output[_pro]);
  }
  if (output.snapshotDetailSet === "") {
    contents[_SDn] = [];
  } else if (output[_sDSn] != null && output[_sDSn][_i] != null) {
    contents[_SDn] = de_SnapshotDetailList(__getArrayIfSingleItem(output[_sDSn][_i]), context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output.licenseSpecifications === "") {
    contents[_LSi] = [];
  } else if (output[_lS] != null && output[_lS][_i] != null) {
    contents[_LSi] = de_ImportImageLicenseSpecificationListResponse(__getArrayIfSingleItem(output[_lS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_uO] != null) {
    contents[_UO] = __expectString(output[_uO]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportImageTask
 */
const de_ImportImageTask = (output: any, context: __SerdeContext): ImportImageTask => {
  const contents: any = {};
  if (output[_arc] != null) {
    contents[_Arc] = __expectString(output[_arc]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_enc] != null) {
    contents[_Enc] = __parseBoolean(output[_enc]);
  }
  if (output[_h] != null) {
    contents[_H] = __expectString(output[_h]);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_iTI] != null) {
    contents[_ITI] = __expectString(output[_iTI]);
  }
  if (output[_kKI] != null) {
    contents[_KKI] = __expectString(output[_kKI]);
  }
  if (output[_lTi] != null) {
    contents[_LTi] = __expectString(output[_lTi]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = __expectString(output[_pl]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = __expectString(output[_pro]);
  }
  if (output.snapshotDetailSet === "") {
    contents[_SDn] = [];
  } else if (output[_sDSn] != null && output[_sDSn][_i] != null) {
    contents[_SDn] = de_SnapshotDetailList(__getArrayIfSingleItem(output[_sDSn][_i]), context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output.licenseSpecifications === "") {
    contents[_LSi] = [];
  } else if (output[_lS] != null && output[_lS][_i] != null) {
    contents[_LSi] = de_ImportImageLicenseSpecificationListResponse(__getArrayIfSingleItem(output[_lS][_i]), context);
  }
  if (output[_uO] != null) {
    contents[_UO] = __expectString(output[_uO]);
  }
  if (output[_bM] != null) {
    contents[_BM] = __expectString(output[_bM]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportImageTaskList
 */
const de_ImportImageTaskList = (output: any, context: __SerdeContext): ImportImageTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ImportImageTask(entry, context);
    });
};

/**
 * deserializeAws_ec2ImportInstanceResult
 */
const de_ImportInstanceResult = (output: any, context: __SerdeContext): ImportInstanceResult => {
  const contents: any = {};
  if (output[_cTon] != null) {
    contents[_CTonv] = de_ConversionTask(output[_cTon], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportInstanceTaskDetails
 */
const de_ImportInstanceTaskDetails = (output: any, context: __SerdeContext): ImportInstanceTaskDetails => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = __expectString(output[_pl]);
  }
  if (output.volumes === "") {
    contents[_Vol] = [];
  } else if (output[_vo] != null && output[_vo][_i] != null) {
    contents[_Vol] = de_ImportInstanceVolumeDetailSet(__getArrayIfSingleItem(output[_vo][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportInstanceVolumeDetailItem
 */
const de_ImportInstanceVolumeDetailItem = (output: any, context: __SerdeContext): ImportInstanceVolumeDetailItem => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_bCy] != null) {
    contents[_BCyt] = __strictParseLong(output[_bCy]) as number;
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_im] != null) {
    contents[_Im] = de_DiskImageDescription(output[_im], context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output[_vol] != null) {
    contents[_Vo] = de_DiskImageVolumeDescription(output[_vol], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportInstanceVolumeDetailSet
 */
const de_ImportInstanceVolumeDetailSet = (output: any, context: __SerdeContext): ImportInstanceVolumeDetailItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ImportInstanceVolumeDetailItem(entry, context);
    });
};

/**
 * deserializeAws_ec2ImportKeyPairResult
 */
const de_ImportKeyPairResult = (output: any, context: __SerdeContext): ImportKeyPairResult => {
  const contents: any = {};
  if (output[_kF] != null) {
    contents[_KFe] = __expectString(output[_kF]);
  }
  if (output[_kN] != null) {
    contents[_KN] = __expectString(output[_kN]);
  }
  if (output[_kPI] != null) {
    contents[_KPI] = __expectString(output[_kPI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportSnapshotResult
 */
const de_ImportSnapshotResult = (output: any, context: __SerdeContext): ImportSnapshotResult => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_iTI] != null) {
    contents[_ITI] = __expectString(output[_iTI]);
  }
  if (output[_sTD] != null) {
    contents[_STD] = de_SnapshotTaskDetail(output[_sTD], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportSnapshotTask
 */
const de_ImportSnapshotTask = (output: any, context: __SerdeContext): ImportSnapshotTask => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_iTI] != null) {
    contents[_ITI] = __expectString(output[_iTI]);
  }
  if (output[_sTD] != null) {
    contents[_STD] = de_SnapshotTaskDetail(output[_sTD], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportSnapshotTaskList
 */
const de_ImportSnapshotTaskList = (output: any, context: __SerdeContext): ImportSnapshotTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ImportSnapshotTask(entry, context);
    });
};

/**
 * deserializeAws_ec2ImportVolumeResult
 */
const de_ImportVolumeResult = (output: any, context: __SerdeContext): ImportVolumeResult => {
  const contents: any = {};
  if (output[_cTon] != null) {
    contents[_CTonv] = de_ConversionTask(output[_cTon], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ImportVolumeTaskDetails
 */
const de_ImportVolumeTaskDetails = (output: any, context: __SerdeContext): ImportVolumeTaskDetails => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_bCy] != null) {
    contents[_BCyt] = __strictParseLong(output[_bCy]) as number;
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_im] != null) {
    contents[_Im] = de_DiskImageDescription(output[_im], context);
  }
  if (output[_vol] != null) {
    contents[_Vo] = de_DiskImageVolumeDescription(output[_vol], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InferenceAcceleratorInfo
 */
const de_InferenceAcceleratorInfo = (output: any, context: __SerdeContext): InferenceAcceleratorInfo => {
  const contents: any = {};
  if (output.accelerators === "") {
    contents[_Acc] = [];
  } else if (output[_acc] != null && output[_acc][_mem] != null) {
    contents[_Acc] = de_InferenceDeviceInfoList(__getArrayIfSingleItem(output[_acc][_mem]), context);
  }
  if (output[_tIMIMB] != null) {
    contents[_TIMIMB] = __strictParseInt32(output[_tIMIMB]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2InferenceDeviceInfo
 */
const de_InferenceDeviceInfo = (output: any, context: __SerdeContext): InferenceDeviceInfo => {
  const contents: any = {};
  if (output[_cou] != null) {
    contents[_Cou] = __strictParseInt32(output[_cou]) as number;
  }
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  if (output[_man] != null) {
    contents[_Man] = __expectString(output[_man]);
  }
  if (output[_mIe] != null) {
    contents[_MIe] = de_InferenceDeviceMemoryInfo(output[_mIe], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InferenceDeviceInfoList
 */
const de_InferenceDeviceInfoList = (output: any, context: __SerdeContext): InferenceDeviceInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InferenceDeviceInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2InferenceDeviceMemoryInfo
 */
const de_InferenceDeviceMemoryInfo = (output: any, context: __SerdeContext): InferenceDeviceMemoryInfo => {
  const contents: any = {};
  if (output[_sIMB] != null) {
    contents[_SIMB] = __strictParseInt32(output[_sIMB]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2InsideCidrBlocksStringList
 */
const de_InsideCidrBlocksStringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Instance
 */
const de_Instance = (output: any, context: __SerdeContext): Instance => {
  const contents: any = {};
  if (output[_aLI] != null) {
    contents[_ALI] = __strictParseInt32(output[_aLI]) as number;
  }
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_kI] != null) {
    contents[_KI] = __expectString(output[_kI]);
  }
  if (output[_kN] != null) {
    contents[_KN] = __expectString(output[_kN]);
  }
  if (output[_lTau] != null) {
    contents[_LTaun] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lTau]));
  }
  if (output[_mo] != null) {
    contents[_Mon] = de_Monitoring(output[_mo], context);
  }
  if (output[_pla] != null) {
    contents[_Pl] = de_Placement(output[_pla], context);
  }
  if (output[_pl] != null) {
    contents[_Pla] = __expectString(output[_pl]);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = __expectString(output[_pDN]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = __expectString(output[_pIA]);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(__getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output[_dNn] != null) {
    contents[_PDNu] = __expectString(output[_dNn]);
  }
  if (output[_iAp] != null) {
    contents[_PIAu] = __expectString(output[_iAp]);
  }
  if (output[_rIa] != null) {
    contents[_RIa] = __expectString(output[_rIa]);
  }
  if (output[_iSnst] != null) {
    contents[_Stat] = de_InstanceState(output[_iSnst], context);
  }
  if (output[_rea] != null) {
    contents[_STRt] = __expectString(output[_rea]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_arc] != null) {
    contents[_Arc] = __expectString(output[_arc]);
  }
  if (output.blockDeviceMapping === "") {
    contents[_BDM] = [];
  } else if (output[_bDM] != null && output[_bDM][_i] != null) {
    contents[_BDM] = de_InstanceBlockDeviceMappingList(__getArrayIfSingleItem(output[_bDM][_i]), context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  if (output[_eO] != null) {
    contents[_EO] = __parseBoolean(output[_eO]);
  }
  if (output[_eSna] != null) {
    contents[_ESn] = __parseBoolean(output[_eSna]);
  }
  if (output[_h] != null) {
    contents[_H] = __expectString(output[_h]);
  }
  if (output[_iIP] != null) {
    contents[_IIP] = de_IamInstanceProfile(output[_iIP], context);
  }
  if (output[_iLn] != null) {
    contents[_ILn] = __expectString(output[_iLn]);
  }
  if (output.elasticGpuAssociationSet === "") {
    contents[_EGA] = [];
  } else if (output[_eGASl] != null && output[_eGASl][_i] != null) {
    contents[_EGA] = de_ElasticGpuAssociationList(__getArrayIfSingleItem(output[_eGASl][_i]), context);
  }
  if (output.elasticInferenceAcceleratorAssociationSet === "") {
    contents[_EIAAl] = [];
  } else if (output[_eIAASl] != null && output[_eIAASl][_i] != null) {
    contents[_EIAAl] = de_ElasticInferenceAcceleratorAssociationList(
      __getArrayIfSingleItem(output[_eIAASl][_i]),
      context
    );
  }
  if (output.networkInterfaceSet === "") {
    contents[_NI] = [];
  } else if (output[_nIS] != null && output[_nIS][_i] != null) {
    contents[_NI] = de_InstanceNetworkInterfaceList(__getArrayIfSingleItem(output[_nIS][_i]), context);
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output[_rDN] != null) {
    contents[_RDN] = __expectString(output[_rDN]);
  }
  if (output[_rDT] != null) {
    contents[_RDT] = __expectString(output[_rDT]);
  }
  if (output.groupSet === "") {
    contents[_SG] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_SG] = de_GroupIdentifierList(__getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output[_sDC] != null) {
    contents[_SDC] = __parseBoolean(output[_sDC]);
  }
  if (output[_sIRI] != null) {
    contents[_SIRIp] = __expectString(output[_sIRI]);
  }
  if (output[_sNSr] != null) {
    contents[_SNS] = __expectString(output[_sNSr]);
  }
  if (output[_sR] != null) {
    contents[_SRt] = de_StateReason(output[_sR], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vTi] != null) {
    contents[_VTir] = __expectString(output[_vTi]);
  }
  if (output[_cO] != null) {
    contents[_CO] = de_CpuOptions(output[_cO], context);
  }
  if (output[_cRI] != null) {
    contents[_CRI] = __expectString(output[_cRI]);
  }
  if (output[_cRSa] != null) {
    contents[_CRS] = de_CapacityReservationSpecificationResponse(output[_cRSa], context);
  }
  if (output[_hO] != null) {
    contents[_HO] = de_HibernationOptions(output[_hO], context);
  }
  if (output.licenseSet === "") {
    contents[_Lic] = [];
  } else if (output[_lSi] != null && output[_lSi][_i] != null) {
    contents[_Lic] = de_LicenseList(__getArrayIfSingleItem(output[_lSi][_i]), context);
  }
  if (output[_mO] != null) {
    contents[_MO] = de_InstanceMetadataOptionsResponse(output[_mO], context);
  }
  if (output[_eOn] != null) {
    contents[_EOn] = de_EnclaveOptions(output[_eOn], context);
  }
  if (output[_bM] != null) {
    contents[_BM] = __expectString(output[_bM]);
  }
  if (output[_pDl] != null) {
    contents[_PDl] = __expectString(output[_pDl]);
  }
  if (output[_uO] != null) {
    contents[_UO] = __expectString(output[_uO]);
  }
  if (output[_uOUT] != null) {
    contents[_UOUT] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_uOUT]));
  }
  if (output[_pDNO] != null) {
    contents[_PDNO] = de_PrivateDnsNameOptionsResponse(output[_pDNO], context);
  }
  if (output[_iApv] != null) {
    contents[_IApv] = __expectString(output[_iApv]);
  }
  if (output[_tSp] != null) {
    contents[_TSp] = __expectString(output[_tSp]);
  }
  if (output[_mOa] != null) {
    contents[_MOa] = de_InstanceMaintenanceOptions(output[_mOa], context);
  }
  if (output[_cIBM] != null) {
    contents[_CIBM] = __expectString(output[_cIBM]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceAttachmentEnaSrdSpecification
 */
const de_InstanceAttachmentEnaSrdSpecification = (
  output: any,
  context: __SerdeContext
): InstanceAttachmentEnaSrdSpecification => {
  const contents: any = {};
  if (output[_eSE] != null) {
    contents[_ESE] = __parseBoolean(output[_eSE]);
  }
  if (output[_eSUS] != null) {
    contents[_ESUS] = de_InstanceAttachmentEnaSrdUdpSpecification(output[_eSUS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceAttachmentEnaSrdUdpSpecification
 */
const de_InstanceAttachmentEnaSrdUdpSpecification = (
  output: any,
  context: __SerdeContext
): InstanceAttachmentEnaSrdUdpSpecification => {
  const contents: any = {};
  if (output[_eSUE] != null) {
    contents[_ESUE] = __parseBoolean(output[_eSUE]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceAttribute
 */
const de_InstanceAttribute = (output: any, context: __SerdeContext): InstanceAttribute => {
  const contents: any = {};
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierList(__getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output.blockDeviceMapping === "") {
    contents[_BDM] = [];
  } else if (output[_bDM] != null && output[_bDM][_i] != null) {
    contents[_BDM] = de_InstanceBlockDeviceMappingList(__getArrayIfSingleItem(output[_bDM][_i]), context);
  }
  if (output[_dAT] != null) {
    contents[_DATis] = de_AttributeBooleanValue(output[_dAT], context);
  }
  if (output[_eSna] != null) {
    contents[_ESn] = de_AttributeBooleanValue(output[_eSna], context);
  }
  if (output[_eOn] != null) {
    contents[_EOn] = de_EnclaveOptions(output[_eOn], context);
  }
  if (output[_eO] != null) {
    contents[_EO] = de_AttributeBooleanValue(output[_eO], context);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_iISB] != null) {
    contents[_IISB] = de_AttributeValue(output[_iISB], context);
  }
  if (output[_iT] != null) {
    contents[_IT] = de_AttributeValue(output[_iT], context);
  }
  if (output[_ke] != null) {
    contents[_KI] = de_AttributeValue(output[_ke], context);
  }
  if (output.productCodes === "") {
    contents[_PCr] = [];
  } else if (output[_pC] != null && output[_pC][_i] != null) {
    contents[_PCr] = de_ProductCodeList(__getArrayIfSingleItem(output[_pC][_i]), context);
  }
  if (output[_ra] != null) {
    contents[_RIa] = de_AttributeValue(output[_ra], context);
  }
  if (output[_rDN] != null) {
    contents[_RDN] = de_AttributeValue(output[_rDN], context);
  }
  if (output[_sDC] != null) {
    contents[_SDC] = de_AttributeBooleanValue(output[_sDC], context);
  }
  if (output[_sNSr] != null) {
    contents[_SNS] = de_AttributeValue(output[_sNSr], context);
  }
  if (output[_uDs] != null) {
    contents[_UD] = de_AttributeValue(output[_uDs], context);
  }
  if (output[_dASi] != null) {
    contents[_DAS] = de_AttributeBooleanValue(output[_dASi], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceBlockDeviceMapping
 */
const de_InstanceBlockDeviceMapping = (output: any, context: __SerdeContext): InstanceBlockDeviceMapping => {
  const contents: any = {};
  if (output[_dN] != null) {
    contents[_DN] = __expectString(output[_dN]);
  }
  if (output[_eb] != null) {
    contents[_E] = de_EbsInstanceBlockDevice(output[_eb], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceBlockDeviceMappingList
 */
const de_InstanceBlockDeviceMappingList = (output: any, context: __SerdeContext): InstanceBlockDeviceMapping[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceBlockDeviceMapping(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceCapacity
 */
const de_InstanceCapacity = (output: any, context: __SerdeContext): InstanceCapacity => {
  const contents: any = {};
  if (output[_aC] != null) {
    contents[_ACv] = __strictParseInt32(output[_aC]) as number;
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_tC] != null) {
    contents[_TCo] = __strictParseInt32(output[_tC]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceConnectEndpointSet
 */
const de_InstanceConnectEndpointSet = (output: any, context: __SerdeContext): Ec2InstanceConnectEndpoint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ec2InstanceConnectEndpoint(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceCount
 */
const de_InstanceCount = (output: any, context: __SerdeContext): InstanceCount => {
  const contents: any = {};
  if (output[_iC] != null) {
    contents[_IC] = __strictParseInt32(output[_iC]) as number;
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceCountList
 */
const de_InstanceCountList = (output: any, context: __SerdeContext): InstanceCount[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceCount(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceCreditSpecification
 */
const de_InstanceCreditSpecification = (output: any, context: __SerdeContext): InstanceCreditSpecification => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_cCp] != null) {
    contents[_CCp] = __expectString(output[_cCp]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceCreditSpecificationList
 */
const de_InstanceCreditSpecificationList = (output: any, context: __SerdeContext): InstanceCreditSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceCreditSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceEventWindow
 */
const de_InstanceEventWindow = (output: any, context: __SerdeContext): InstanceEventWindow => {
  const contents: any = {};
  if (output[_iEWI] != null) {
    contents[_IEWI] = __expectString(output[_iEWI]);
  }
  if (output.timeRangeSet === "") {
    contents[_TRi] = [];
  } else if (output[_tRSi] != null && output[_tRSi][_i] != null) {
    contents[_TRi] = de_InstanceEventWindowTimeRangeList(__getArrayIfSingleItem(output[_tRSi][_i]), context);
  }
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  if (output[_cEr] != null) {
    contents[_CE] = __expectString(output[_cEr]);
  }
  if (output[_aTs] != null) {
    contents[_AT] = de_InstanceEventWindowAssociationTarget(output[_aTs], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceEventWindowAssociationTarget
 */
const de_InstanceEventWindowAssociationTarget = (
  output: any,
  context: __SerdeContext
): InstanceEventWindowAssociationTarget => {
  const contents: any = {};
  if (output.instanceIdSet === "") {
    contents[_IIns] = [];
  } else if (output[_iIS] != null && output[_iIS][_i] != null) {
    contents[_IIns] = de_InstanceIdList(__getArrayIfSingleItem(output[_iIS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output.dedicatedHostIdSet === "") {
    contents[_DHI] = [];
  } else if (output[_dHIS] != null && output[_dHIS][_i] != null) {
    contents[_DHI] = de_DedicatedHostIdList(__getArrayIfSingleItem(output[_dHIS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceEventWindowSet
 */
const de_InstanceEventWindowSet = (output: any, context: __SerdeContext): InstanceEventWindow[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceEventWindow(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceEventWindowStateChange
 */
const de_InstanceEventWindowStateChange = (output: any, context: __SerdeContext): InstanceEventWindowStateChange => {
  const contents: any = {};
  if (output[_iEWI] != null) {
    contents[_IEWI] = __expectString(output[_iEWI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceEventWindowTimeRange
 */
const de_InstanceEventWindowTimeRange = (output: any, context: __SerdeContext): InstanceEventWindowTimeRange => {
  const contents: any = {};
  if (output[_sWD] != null) {
    contents[_SWD] = __expectString(output[_sWD]);
  }
  if (output[_sH] != null) {
    contents[_SH] = __strictParseInt32(output[_sH]) as number;
  }
  if (output[_eWD] != null) {
    contents[_EWD] = __expectString(output[_eWD]);
  }
  if (output[_eH] != null) {
    contents[_EH] = __strictParseInt32(output[_eH]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceEventWindowTimeRangeList
 */
const de_InstanceEventWindowTimeRangeList = (output: any, context: __SerdeContext): InstanceEventWindowTimeRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceEventWindowTimeRange(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceExportDetails
 */
const de_InstanceExportDetails = (output: any, context: __SerdeContext): InstanceExportDetails => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_tE] != null) {
    contents[_TE] = __expectString(output[_tE]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceFamilyCreditSpecification
 */
const de_InstanceFamilyCreditSpecification = (
  output: any,
  context: __SerdeContext
): InstanceFamilyCreditSpecification => {
  const contents: any = {};
  if (output[_iF] != null) {
    contents[_IF] = __expectString(output[_iF]);
  }
  if (output[_cCp] != null) {
    contents[_CCp] = __expectString(output[_cCp]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceGenerationSet
 */
const de_InstanceGenerationSet = (output: any, context: __SerdeContext): InstanceGeneration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2InstanceIdList
 */
const de_InstanceIdList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2InstanceIdSet
 */
const de_InstanceIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2InstanceIdsSet
 */
const de_InstanceIdsSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2InstanceIpv4Prefix
 */
const de_InstanceIpv4Prefix = (output: any, context: __SerdeContext): InstanceIpv4Prefix => {
  const contents: any = {};
  if (output[_iPpv] != null) {
    contents[_IPpvr] = __expectString(output[_iPpv]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceIpv4PrefixList
 */
const de_InstanceIpv4PrefixList = (output: any, context: __SerdeContext): InstanceIpv4Prefix[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceIpv4Prefix(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceIpv6Address
 */
const de_InstanceIpv6Address = (output: any, context: __SerdeContext): InstanceIpv6Address => {
  const contents: any = {};
  if (output[_iApv] != null) {
    contents[_IApv] = __expectString(output[_iApv]);
  }
  if (output[_iPI] != null) {
    contents[_IPIs] = __parseBoolean(output[_iPI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceIpv6AddressList
 */
const de_InstanceIpv6AddressList = (output: any, context: __SerdeContext): InstanceIpv6Address[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceIpv6Address(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceIpv6Prefix
 */
const de_InstanceIpv6Prefix = (output: any, context: __SerdeContext): InstanceIpv6Prefix => {
  const contents: any = {};
  if (output[_iPpvr] != null) {
    contents[_IPpvre] = __expectString(output[_iPpvr]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceIpv6PrefixList
 */
const de_InstanceIpv6PrefixList = (output: any, context: __SerdeContext): InstanceIpv6Prefix[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceIpv6Prefix(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceList
 */
const de_InstanceList = (output: any, context: __SerdeContext): Instance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Instance(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceMaintenanceOptions
 */
const de_InstanceMaintenanceOptions = (output: any, context: __SerdeContext): InstanceMaintenanceOptions => {
  const contents: any = {};
  if (output[_aRu] != null) {
    contents[_ARu] = __expectString(output[_aRu]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceMetadataOptionsResponse
 */
const de_InstanceMetadataOptionsResponse = (output: any, context: __SerdeContext): InstanceMetadataOptionsResponse => {
  const contents: any = {};
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_hT] != null) {
    contents[_HT] = __expectString(output[_hT]);
  }
  if (output[_hPRHL] != null) {
    contents[_HPRHL] = __strictParseInt32(output[_hPRHL]) as number;
  }
  if (output[_hE] != null) {
    contents[_HE] = __expectString(output[_hE]);
  }
  if (output[_hPI] != null) {
    contents[_HPI] = __expectString(output[_hPI]);
  }
  if (output[_iMT] != null) {
    contents[_IMT] = __expectString(output[_iMT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceMonitoring
 */
const de_InstanceMonitoring = (output: any, context: __SerdeContext): InstanceMonitoring => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_mo] != null) {
    contents[_Mon] = de_Monitoring(output[_mo], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceMonitoringList
 */
const de_InstanceMonitoringList = (output: any, context: __SerdeContext): InstanceMonitoring[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceMonitoring(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceNetworkInterface
 */
const de_InstanceNetworkInterface = (output: any, context: __SerdeContext): InstanceNetworkInterface => {
  const contents: any = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_InstanceNetworkInterfaceAssociation(output[_ass], context);
  }
  if (output[_at] != null) {
    contents[_Att] = de_InstanceNetworkInterfaceAttachment(output[_at], context);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierList(__getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output.ipv6AddressesSet === "") {
    contents[_IA] = [];
  } else if (output[_iASp] != null && output[_iASp][_i] != null) {
    contents[_IA] = de_InstanceIpv6AddressList(__getArrayIfSingleItem(output[_iASp][_i]), context);
  }
  if (output[_mAa] != null) {
    contents[_MAa] = __expectString(output[_mAa]);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = __expectString(output[_pDN]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = __expectString(output[_pIA]);
  }
  if (output.privateIpAddressesSet === "") {
    contents[_PIA] = [];
  } else if (output[_pIAS] != null && output[_pIAS][_i] != null) {
    contents[_PIA] = de_InstancePrivateIpAddressList(__getArrayIfSingleItem(output[_pIAS][_i]), context);
  }
  if (output[_sDC] != null) {
    contents[_SDC] = __parseBoolean(output[_sDC]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_iTnt] != null) {
    contents[_ITn] = __expectString(output[_iTnt]);
  }
  if (output.ipv4PrefixSet === "") {
    contents[_IPp] = [];
  } else if (output[_iPSpv] != null && output[_iPSpv][_i] != null) {
    contents[_IPp] = de_InstanceIpv4PrefixList(__getArrayIfSingleItem(output[_iPSpv][_i]), context);
  }
  if (output.ipv6PrefixSet === "") {
    contents[_IP] = [];
  } else if (output[_iPSpvr] != null && output[_iPSpvr][_i] != null) {
    contents[_IP] = de_InstanceIpv6PrefixList(__getArrayIfSingleItem(output[_iPSpvr][_i]), context);
  }
  if (output[_cTC] != null) {
    contents[_CTC] = de_ConnectionTrackingSpecificationResponse(output[_cTC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceNetworkInterfaceAssociation
 */
const de_InstanceNetworkInterfaceAssociation = (
  output: any,
  context: __SerdeContext
): InstanceNetworkInterfaceAssociation => {
  const contents: any = {};
  if (output[_cI] != null) {
    contents[_CIa] = __expectString(output[_cI]);
  }
  if (output[_cOI] != null) {
    contents[_COI] = __expectString(output[_cOI]);
  }
  if (output[_iOIp] != null) {
    contents[_IOI] = __expectString(output[_iOIp]);
  }
  if (output[_pDNu] != null) {
    contents[_PDNu] = __expectString(output[_pDNu]);
  }
  if (output[_pI] != null) {
    contents[_PI] = __expectString(output[_pI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceNetworkInterfaceAttachment
 */
const de_InstanceNetworkInterfaceAttachment = (
  output: any,
  context: __SerdeContext
): InstanceNetworkInterfaceAttachment => {
  const contents: any = {};
  if (output[_aTt] != null) {
    contents[_ATtt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_aTt]));
  }
  if (output[_aIt] != null) {
    contents[_AIt] = __expectString(output[_aIt]);
  }
  if (output[_dOT] != null) {
    contents[_DOT] = __parseBoolean(output[_dOT]);
  }
  if (output[_dIe] != null) {
    contents[_DIev] = __strictParseInt32(output[_dIe]) as number;
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_nCI] != null) {
    contents[_NCI] = __strictParseInt32(output[_nCI]) as number;
  }
  if (output[_eSS] != null) {
    contents[_ESS] = de_InstanceAttachmentEnaSrdSpecification(output[_eSS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceNetworkInterfaceList
 */
const de_InstanceNetworkInterfaceList = (output: any, context: __SerdeContext): InstanceNetworkInterface[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceNetworkInterface(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceNetworkInterfaceSpecification
 */
const de_InstanceNetworkInterfaceSpecification = (
  output: any,
  context: __SerdeContext
): InstanceNetworkInterfaceSpecification => {
  const contents: any = {};
  if (output[_aPIA] != null) {
    contents[_APIAs] = __parseBoolean(output[_aPIA]);
  }
  if (output[_dOT] != null) {
    contents[_DOT] = __parseBoolean(output[_dOT]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_dIe] != null) {
    contents[_DIev] = __strictParseInt32(output[_dIe]) as number;
  }
  if (output.SecurityGroupId === "") {
    contents[_G] = [];
  } else if (output[_SGIe] != null && output[_SGIe][_SGIe] != null) {
    contents[_G] = de_SecurityGroupIdStringList(__getArrayIfSingleItem(output[_SGIe][_SGIe]), context);
  }
  if (output[_iAC] != null) {
    contents[_IAC] = __strictParseInt32(output[_iAC]) as number;
  }
  if (output.ipv6AddressesSet === "") {
    contents[_IA] = [];
  } else if (output[_iASp] != null && output[_iASp][_i] != null) {
    contents[_IA] = de_InstanceIpv6AddressList(__getArrayIfSingleItem(output[_iASp][_i]), context);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = __expectString(output[_pIA]);
  }
  if (output.privateIpAddressesSet === "") {
    contents[_PIA] = [];
  } else if (output[_pIAS] != null && output[_pIAS][_i] != null) {
    contents[_PIA] = de_PrivateIpAddressSpecificationList(__getArrayIfSingleItem(output[_pIAS][_i]), context);
  }
  if (output[_sPIAC] != null) {
    contents[_SPIAC] = __strictParseInt32(output[_sPIAC]) as number;
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_ACIA] != null) {
    contents[_ACIA] = __parseBoolean(output[_ACIA]);
  }
  if (output[_ITn] != null) {
    contents[_ITn] = __expectString(output[_ITn]);
  }
  if (output[_NCI] != null) {
    contents[_NCI] = __strictParseInt32(output[_NCI]) as number;
  }
  if (output.Ipv4Prefix === "") {
    contents[_IPp] = [];
  } else if (output[_IPpvr] != null && output[_IPpvr][_i] != null) {
    contents[_IPp] = de_Ipv4PrefixList(__getArrayIfSingleItem(output[_IPpvr][_i]), context);
  }
  if (output[_IPCp] != null) {
    contents[_IPCp] = __strictParseInt32(output[_IPCp]) as number;
  }
  if (output.Ipv6Prefix === "") {
    contents[_IP] = [];
  } else if (output[_IPpvre] != null && output[_IPpvre][_i] != null) {
    contents[_IP] = de_Ipv6PrefixList(__getArrayIfSingleItem(output[_IPpvre][_i]), context);
  }
  if (output[_IPC] != null) {
    contents[_IPC] = __strictParseInt32(output[_IPC]) as number;
  }
  if (output[_PIr] != null) {
    contents[_PIr] = __parseBoolean(output[_PIr]);
  }
  if (output[_ESS] != null) {
    contents[_ESS] = de_EnaSrdSpecificationRequest(output[_ESS], context);
  }
  if (output[_CTS] != null) {
    contents[_CTS] = de_ConnectionTrackingSpecificationRequest(output[_CTS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceNetworkInterfaceSpecificationList
 */
const de_InstanceNetworkInterfaceSpecificationList = (
  output: any,
  context: __SerdeContext
): InstanceNetworkInterfaceSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceNetworkInterfaceSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2InstancePrivateIpAddress
 */
const de_InstancePrivateIpAddress = (output: any, context: __SerdeContext): InstancePrivateIpAddress => {
  const contents: any = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_InstanceNetworkInterfaceAssociation(output[_ass], context);
  }
  if (output[_prim] != null) {
    contents[_Prim] = __parseBoolean(output[_prim]);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = __expectString(output[_pDN]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = __expectString(output[_pIA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstancePrivateIpAddressList
 */
const de_InstancePrivateIpAddressList = (output: any, context: __SerdeContext): InstancePrivateIpAddress[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstancePrivateIpAddress(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceRequirements
 */
const de_InstanceRequirements = (output: any, context: __SerdeContext): InstanceRequirements => {
  const contents: any = {};
  if (output[_vCC] != null) {
    contents[_VCC] = de_VCpuCountRange(output[_vCC], context);
  }
  if (output[_mMB] != null) {
    contents[_MMB] = de_MemoryMiB(output[_mMB], context);
  }
  if (output.cpuManufacturerSet === "") {
    contents[_CM] = [];
  } else if (output[_cMS] != null && output[_cMS][_i] != null) {
    contents[_CM] = de_CpuManufacturerSet(__getArrayIfSingleItem(output[_cMS][_i]), context);
  }
  if (output[_mGBPVC] != null) {
    contents[_MGBPVC] = de_MemoryGiBPerVCpu(output[_mGBPVC], context);
  }
  if (output.excludedInstanceTypeSet === "") {
    contents[_EIT] = [];
  } else if (output[_eITSx] != null && output[_eITSx][_i] != null) {
    contents[_EIT] = de_ExcludedInstanceTypeSet(__getArrayIfSingleItem(output[_eITSx][_i]), context);
  }
  if (output.instanceGenerationSet === "") {
    contents[_IG] = [];
  } else if (output[_iGSn] != null && output[_iGSn][_i] != null) {
    contents[_IG] = de_InstanceGenerationSet(__getArrayIfSingleItem(output[_iGSn][_i]), context);
  }
  if (output[_sMPPOLP] != null) {
    contents[_SMPPOLP] = __strictParseInt32(output[_sMPPOLP]) as number;
  }
  if (output[_oDMPPOLP] != null) {
    contents[_ODMPPOLP] = __strictParseInt32(output[_oDMPPOLP]) as number;
  }
  if (output[_bMa] != null) {
    contents[_BMa] = __expectString(output[_bMa]);
  }
  if (output[_bP] != null) {
    contents[_BP] = __expectString(output[_bP]);
  }
  if (output[_rHS] != null) {
    contents[_RHS] = __parseBoolean(output[_rHS]);
  }
  if (output[_nIC] != null) {
    contents[_NIC] = de_NetworkInterfaceCount(output[_nIC], context);
  }
  if (output[_lSo] != null) {
    contents[_LSo] = __expectString(output[_lSo]);
  }
  if (output.localStorageTypeSet === "") {
    contents[_LST] = [];
  } else if (output[_lSTS] != null && output[_lSTS][_i] != null) {
    contents[_LST] = de_LocalStorageTypeSet(__getArrayIfSingleItem(output[_lSTS][_i]), context);
  }
  if (output[_tLSGB] != null) {
    contents[_TLSGB] = de_TotalLocalStorageGB(output[_tLSGB], context);
  }
  if (output[_bEBM] != null) {
    contents[_BEBM] = de_BaselineEbsBandwidthMbps(output[_bEBM], context);
  }
  if (output.acceleratorTypeSet === "") {
    contents[_ATc] = [];
  } else if (output[_aTSc] != null && output[_aTSc][_i] != null) {
    contents[_ATc] = de_AcceleratorTypeSet(__getArrayIfSingleItem(output[_aTSc][_i]), context);
  }
  if (output[_aCc] != null) {
    contents[_ACc] = de_AcceleratorCount(output[_aCc], context);
  }
  if (output.acceleratorManufacturerSet === "") {
    contents[_AM] = [];
  } else if (output[_aMS] != null && output[_aMS][_i] != null) {
    contents[_AM] = de_AcceleratorManufacturerSet(__getArrayIfSingleItem(output[_aMS][_i]), context);
  }
  if (output.acceleratorNameSet === "") {
    contents[_ANc] = [];
  } else if (output[_aNS] != null && output[_aNS][_i] != null) {
    contents[_ANc] = de_AcceleratorNameSet(__getArrayIfSingleItem(output[_aNS][_i]), context);
  }
  if (output[_aTMMB] != null) {
    contents[_ATMMB] = de_AcceleratorTotalMemoryMiB(output[_aTMMB], context);
  }
  if (output[_nBGe] != null) {
    contents[_NBGe] = de_NetworkBandwidthGbps(output[_nBGe], context);
  }
  if (output.allowedInstanceTypeSet === "") {
    contents[_AIT] = [];
  } else if (output[_aITS] != null && output[_aITS][_i] != null) {
    contents[_AIT] = de_AllowedInstanceTypeSet(__getArrayIfSingleItem(output[_aITS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceSet
 */
const de_InstanceSet = (output: any, context: __SerdeContext): InstanceTopology[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceTopology(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceState
 */
const de_InstanceState = (output: any, context: __SerdeContext): InstanceState => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __strictParseInt32(output[_co]) as number;
  }
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceStateChange
 */
const de_InstanceStateChange = (output: any, context: __SerdeContext): InstanceStateChange => {
  const contents: any = {};
  if (output[_cSu] != null) {
    contents[_CSu] = de_InstanceState(output[_cSu], context);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_pS] != null) {
    contents[_PSr] = de_InstanceState(output[_pS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceStateChangeList
 */
const de_InstanceStateChangeList = (output: any, context: __SerdeContext): InstanceStateChange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceStateChange(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceStatus
 */
const de_InstanceStatus = (output: any, context: __SerdeContext): InstanceStatus => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output.eventsSet === "") {
    contents[_Ev] = [];
  } else if (output[_eSv] != null && output[_eSv][_i] != null) {
    contents[_Ev] = de_InstanceStatusEventList(__getArrayIfSingleItem(output[_eSv][_i]), context);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_iSnst] != null) {
    contents[_ISnst] = de_InstanceState(output[_iSnst], context);
  }
  if (output[_iSnsta] != null) {
    contents[_ISnsta] = de_InstanceStatusSummary(output[_iSnsta], context);
  }
  if (output[_sSy] != null) {
    contents[_SSy] = de_InstanceStatusSummary(output[_sSy], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceStatusDetails
 */
const de_InstanceStatusDetails = (output: any, context: __SerdeContext): InstanceStatusDetails => {
  const contents: any = {};
  if (output[_iSmp] != null) {
    contents[_ISmp] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_iSmp]));
  }
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceStatusDetailsList
 */
const de_InstanceStatusDetailsList = (output: any, context: __SerdeContext): InstanceStatusDetails[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceStatusDetails(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceStatusEvent
 */
const de_InstanceStatusEvent = (output: any, context: __SerdeContext): InstanceStatusEvent => {
  const contents: any = {};
  if (output[_iEI] != null) {
    contents[_IEI] = __expectString(output[_iEI]);
  }
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_nAo] != null) {
    contents[_NAo] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_nAo]));
  }
  if (output[_nB] != null) {
    contents[_NB] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_nB]));
  }
  if (output[_nBD] != null) {
    contents[_NBD] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_nBD]));
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceStatusEventList
 */
const de_InstanceStatusEventList = (output: any, context: __SerdeContext): InstanceStatusEvent[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceStatusEvent(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceStatusList
 */
const de_InstanceStatusList = (output: any, context: __SerdeContext): InstanceStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceStatus(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceStatusSummary
 */
const de_InstanceStatusSummary = (output: any, context: __SerdeContext): InstanceStatusSummary => {
  const contents: any = {};
  if (output.details === "") {
    contents[_Det] = [];
  } else if (output[_det] != null && output[_det][_i] != null) {
    contents[_Det] = de_InstanceStatusDetailsList(__getArrayIfSingleItem(output[_det][_i]), context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceStorageInfo
 */
const de_InstanceStorageInfo = (output: any, context: __SerdeContext): InstanceStorageInfo => {
  const contents: any = {};
  if (output[_tSIGB] != null) {
    contents[_TSIGB] = __strictParseLong(output[_tSIGB]) as number;
  }
  if (output.disks === "") {
    contents[_Dis] = [];
  } else if (output[_dis] != null && output[_dis][_i] != null) {
    contents[_Dis] = de_DiskInfoList(__getArrayIfSingleItem(output[_dis][_i]), context);
  }
  if (output[_nS] != null) {
    contents[_NS] = __expectString(output[_nS]);
  }
  if (output[_eSn] != null) {
    contents[_ESnc] = __expectString(output[_eSn]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceTagKeySet
 */
const de_InstanceTagKeySet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2InstanceTagNotificationAttribute
 */
const de_InstanceTagNotificationAttribute = (
  output: any,
  context: __SerdeContext
): InstanceTagNotificationAttribute => {
  const contents: any = {};
  if (output.instanceTagKeySet === "") {
    contents[_ITK] = [];
  } else if (output[_iTKS] != null && output[_iTKS][_i] != null) {
    contents[_ITK] = de_InstanceTagKeySet(__getArrayIfSingleItem(output[_iTKS][_i]), context);
  }
  if (output[_iATOI] != null) {
    contents[_IATOI] = __parseBoolean(output[_iATOI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceTopology
 */
const de_InstanceTopology = (output: any, context: __SerdeContext): InstanceTopology => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  if (output.networkNodeSet === "") {
    contents[_NN] = [];
  } else if (output[_nNS] != null && output[_nNS][_i] != null) {
    contents[_NN] = de_NetworkNodesList(__getArrayIfSingleItem(output[_nNS][_i]), context);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_zI] != null) {
    contents[_ZIo] = __expectString(output[_zI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceTypeInfo
 */
const de_InstanceTypeInfo = (output: any, context: __SerdeContext): InstanceTypeInfo => {
  const contents: any = {};
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_cGur] != null) {
    contents[_CGur] = __parseBoolean(output[_cGur]);
  }
  if (output[_fTE] != null) {
    contents[_FTE] = __parseBoolean(output[_fTE]);
  }
  if (output.supportedUsageClasses === "") {
    contents[_SUC] = [];
  } else if (output[_sUC] != null && output[_sUC][_i] != null) {
    contents[_SUC] = de_UsageClassTypeList(__getArrayIfSingleItem(output[_sUC][_i]), context);
  }
  if (output.supportedRootDeviceTypes === "") {
    contents[_SRDT] = [];
  } else if (output[_sRDT] != null && output[_sRDT][_i] != null) {
    contents[_SRDT] = de_RootDeviceTypeList(__getArrayIfSingleItem(output[_sRDT][_i]), context);
  }
  if (output.supportedVirtualizationTypes === "") {
    contents[_SVT] = [];
  } else if (output[_sVT] != null && output[_sVT][_i] != null) {
    contents[_SVT] = de_VirtualizationTypeList(__getArrayIfSingleItem(output[_sVT][_i]), context);
  }
  if (output[_bMa] != null) {
    contents[_BMa] = __parseBoolean(output[_bMa]);
  }
  if (output[_h] != null) {
    contents[_H] = __expectString(output[_h]);
  }
  if (output[_pIr] != null) {
    contents[_PIro] = de_ProcessorInfo(output[_pIr], context);
  }
  if (output[_vCIp] != null) {
    contents[_VCIpu] = de_VCpuInfo(output[_vCIp], context);
  }
  if (output[_mIe] != null) {
    contents[_MIe] = de_MemoryInfo(output[_mIe], context);
  }
  if (output[_iSSn] != null) {
    contents[_ISS] = __parseBoolean(output[_iSSn]);
  }
  if (output[_iSI] != null) {
    contents[_ISIn] = de_InstanceStorageInfo(output[_iSI], context);
  }
  if (output[_eIb] != null) {
    contents[_EIb] = de_EbsInfo(output[_eIb], context);
  }
  if (output[_nIet] != null) {
    contents[_NIetw] = de_NetworkInfo(output[_nIet], context);
  }
  if (output[_gIp] != null) {
    contents[_GIp] = de_GpuInfo(output[_gIp], context);
  }
  if (output[_fIp] != null) {
    contents[_FIpg] = de_FpgaInfo(output[_fIp], context);
  }
  if (output[_pGI] != null) {
    contents[_PGI] = de_PlacementGroupInfo(output[_pGI], context);
  }
  if (output[_iAI] != null) {
    contents[_IAIn] = de_InferenceAcceleratorInfo(output[_iAI], context);
  }
  if (output[_hSi] != null) {
    contents[_HS] = __parseBoolean(output[_hSi]);
  }
  if (output[_bPS] != null) {
    contents[_BPS] = __parseBoolean(output[_bPS]);
  }
  if (output[_dHS] != null) {
    contents[_DHS] = __parseBoolean(output[_dHS]);
  }
  if (output[_aRSu] != null) {
    contents[_ARS] = __parseBoolean(output[_aRSu]);
  }
  if (output.supportedBootModes === "") {
    contents[_SBM] = [];
  } else if (output[_sBM] != null && output[_sBM][_i] != null) {
    contents[_SBM] = de_BootModeTypeList(__getArrayIfSingleItem(output[_sBM][_i]), context);
  }
  if (output[_nES] != null) {
    contents[_NES] = __expectString(output[_nES]);
  }
  if (output[_nTS] != null) {
    contents[_NTS] = __expectString(output[_nTS]);
  }
  if (output[_nTI] != null) {
    contents[_NTI] = de_NitroTpmInfo(output[_nTI], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceTypeInfoFromInstanceRequirements
 */
const de_InstanceTypeInfoFromInstanceRequirements = (
  output: any,
  context: __SerdeContext
): InstanceTypeInfoFromInstanceRequirements => {
  const contents: any = {};
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceTypeInfoFromInstanceRequirementsSet
 */
const de_InstanceTypeInfoFromInstanceRequirementsSet = (
  output: any,
  context: __SerdeContext
): InstanceTypeInfoFromInstanceRequirements[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceTypeInfoFromInstanceRequirements(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceTypeInfoList
 */
const de_InstanceTypeInfoList = (output: any, context: __SerdeContext): InstanceTypeInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceTypeInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceTypeOffering
 */
const de_InstanceTypeOffering = (output: any, context: __SerdeContext): InstanceTypeOffering => {
  const contents: any = {};
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_lTo] != null) {
    contents[_LT] = __expectString(output[_lTo]);
  }
  if (output[_lo] != null) {
    contents[_Lo] = __expectString(output[_lo]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceTypeOfferingsList
 */
const de_InstanceTypeOfferingsList = (output: any, context: __SerdeContext): InstanceTypeOffering[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceTypeOffering(entry, context);
    });
};

/**
 * deserializeAws_ec2InstanceTypesList
 */
const de_InstanceTypesList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2InstanceUsage
 */
const de_InstanceUsage = (output: any, context: __SerdeContext): InstanceUsage => {
  const contents: any = {};
  if (output[_aIc] != null) {
    contents[_AIcc] = __expectString(output[_aIc]);
  }
  if (output[_uIC] != null) {
    contents[_UIC] = __strictParseInt32(output[_uIC]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2InstanceUsageSet
 */
const de_InstanceUsageSet = (output: any, context: __SerdeContext): InstanceUsage[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InstanceUsage(entry, context);
    });
};

/**
 * deserializeAws_ec2InternetGateway
 */
const de_InternetGateway = (output: any, context: __SerdeContext): InternetGateway => {
  const contents: any = {};
  if (output.attachmentSet === "") {
    contents[_Atta] = [];
  } else if (output[_aSt] != null && output[_aSt][_i] != null) {
    contents[_Atta] = de_InternetGatewayAttachmentList(__getArrayIfSingleItem(output[_aSt][_i]), context);
  }
  if (output[_iGI] != null) {
    contents[_IGI] = __expectString(output[_iGI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2InternetGatewayAttachment
 */
const de_InternetGatewayAttachment = (output: any, context: __SerdeContext): InternetGatewayAttachment => {
  const contents: any = {};
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2InternetGatewayAttachmentList
 */
const de_InternetGatewayAttachmentList = (output: any, context: __SerdeContext): InternetGatewayAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InternetGatewayAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2InternetGatewayList
 */
const de_InternetGatewayList = (output: any, context: __SerdeContext): InternetGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_InternetGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2IpAddressList
 */
const de_IpAddressList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Ipam
 */
const de_Ipam = (output: any, context: __SerdeContext): Ipam => {
  const contents: any = {};
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_iIp] != null) {
    contents[_IIp] = __expectString(output[_iIp]);
  }
  if (output[_iApa] != null) {
    contents[_IApa] = __expectString(output[_iApa]);
  }
  if (output[_iRp] != null) {
    contents[_IRpa] = __expectString(output[_iRp]);
  }
  if (output[_pDSI] != null) {
    contents[_PDSI] = __expectString(output[_pDSI]);
  }
  if (output[_pDSIr] != null) {
    contents[_PDSIr] = __expectString(output[_pDSIr]);
  }
  if (output[_sCc] != null) {
    contents[_SCc] = __strictParseInt32(output[_sCc]) as number;
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.operatingRegionSet === "") {
    contents[_OR] = [];
  } else if (output[_oRS] != null && output[_oRS][_i] != null) {
    contents[_OR] = de_IpamOperatingRegionSet(__getArrayIfSingleItem(output[_oRS][_i]), context);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_dRDI] != null) {
    contents[_DRDI] = __expectString(output[_dRDI]);
  }
  if (output[_dRDAI] != null) {
    contents[_DRDAI] = __expectString(output[_dRDAI]);
  }
  if (output[_rDAC] != null) {
    contents[_RDAC] = __strictParseInt32(output[_rDAC]) as number;
  }
  if (output[_sMt] != null) {
    contents[_SMt] = __expectString(output[_sMt]);
  }
  if (output[_tie] != null) {
    contents[_Ti] = __expectString(output[_tie]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamAddressHistoryRecord
 */
const de_IpamAddressHistoryRecord = (output: any, context: __SerdeContext): IpamAddressHistoryRecord => {
  const contents: any = {};
  if (output[_rOI] != null) {
    contents[_ROI] = __expectString(output[_rOI]);
  }
  if (output[_rR] != null) {
    contents[_RRe] = __expectString(output[_rR]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rCe] != null) {
    contents[_RC] = __expectString(output[_rCe]);
  }
  if (output[_rNes] != null) {
    contents[_RNes] = __expectString(output[_rNes]);
  }
  if (output[_rCS] != null) {
    contents[_RCS] = __expectString(output[_rCS]);
  }
  if (output[_rOSe] != null) {
    contents[_ROS] = __expectString(output[_rOSe]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_sST] != null) {
    contents[_SST] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sST]));
  }
  if (output[_sET] != null) {
    contents[_SET] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sET]));
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamAddressHistoryRecordSet
 */
const de_IpamAddressHistoryRecordSet = (output: any, context: __SerdeContext): IpamAddressHistoryRecord[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamAddressHistoryRecord(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamDiscoveredAccount
 */
const de_IpamDiscoveredAccount = (output: any, context: __SerdeContext): IpamDiscoveredAccount => {
  const contents: any = {};
  if (output[_aIc] != null) {
    contents[_AIcc] = __expectString(output[_aIc]);
  }
  if (output[_dR] != null) {
    contents[_DRi] = __expectString(output[_dR]);
  }
  if (output[_fR] != null) {
    contents[_FR] = de_IpamDiscoveryFailureReason(output[_fR], context);
  }
  if (output[_lADT] != null) {
    contents[_LADT] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lADT]));
  }
  if (output[_lSDT] != null) {
    contents[_LSDT] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lSDT]));
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamDiscoveredAccountSet
 */
const de_IpamDiscoveredAccountSet = (output: any, context: __SerdeContext): IpamDiscoveredAccount[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamDiscoveredAccount(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamDiscoveredPublicAddress
 */
const de_IpamDiscoveredPublicAddress = (output: any, context: __SerdeContext): IpamDiscoveredPublicAddress => {
  const contents: any = {};
  if (output[_iRDI] != null) {
    contents[_IRDI] = __expectString(output[_iRDI]);
  }
  if (output[_aRd] != null) {
    contents[_ARd] = __expectString(output[_aRd]);
  }
  if (output[_ad] != null) {
    contents[_Ad] = __expectString(output[_ad]);
  }
  if (output[_aOI] != null) {
    contents[_AOI] = __expectString(output[_aOI]);
  }
  if (output[_aAId] != null) {
    contents[_AAId] = __expectString(output[_aAId]);
  }
  if (output[_aSs] != null) {
    contents[_ASss] = __expectString(output[_aSs]);
  }
  if (output[_aTd] != null) {
    contents[_ATddre] = __expectString(output[_aTd]);
  }
  if (output[_se] != null) {
    contents[_Se] = __expectString(output[_se]);
  }
  if (output[_sRe] != null) {
    contents[_SRe] = __expectString(output[_sRe]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_pIPI] != null) {
    contents[_PIPI] = __expectString(output[_pIPI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_nID] != null) {
    contents[_NID] = __expectString(output[_nID]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_ta] != null) {
    contents[_Ta] = de_IpamPublicAddressTags(output[_ta], context);
  }
  if (output[_nBG] != null) {
    contents[_NBG] = __expectString(output[_nBG]);
  }
  if (output.securityGroupSet === "") {
    contents[_SG] = [];
  } else if (output[_sGS] != null && output[_sGS][_i] != null) {
    contents[_SG] = de_IpamPublicAddressSecurityGroupList(__getArrayIfSingleItem(output[_sGS][_i]), context);
  }
  if (output[_sTa] != null) {
    contents[_STa] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sTa]));
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamDiscoveredPublicAddressSet
 */
const de_IpamDiscoveredPublicAddressSet = (output: any, context: __SerdeContext): IpamDiscoveredPublicAddress[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamDiscoveredPublicAddress(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamDiscoveredResourceCidr
 */
const de_IpamDiscoveredResourceCidr = (output: any, context: __SerdeContext): IpamDiscoveredResourceCidr => {
  const contents: any = {};
  if (output[_iRDI] != null) {
    contents[_IRDI] = __expectString(output[_iRDI]);
  }
  if (output[_rR] != null) {
    contents[_RRe] = __expectString(output[_rR]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rOI] != null) {
    contents[_ROI] = __expectString(output[_rOI]);
  }
  if (output[_rCe] != null) {
    contents[_RC] = __expectString(output[_rCe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output.resourceTagSet === "") {
    contents[_RTesou] = [];
  } else if (output[_rTSe] != null && output[_rTSe][_i] != null) {
    contents[_RTesou] = de_IpamResourceTagList(__getArrayIfSingleItem(output[_rTSe][_i]), context);
  }
  if (output[_iU] != null) {
    contents[_IUp] = __strictParseFloat(output[_iU]) as number;
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_sTa] != null) {
    contents[_STa] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sTa]));
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamDiscoveredResourceCidrSet
 */
const de_IpamDiscoveredResourceCidrSet = (output: any, context: __SerdeContext): IpamDiscoveredResourceCidr[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamDiscoveredResourceCidr(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamDiscoveryFailureReason
 */
const de_IpamDiscoveryFailureReason = (output: any, context: __SerdeContext): IpamDiscoveryFailureReason => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamOperatingRegion
 */
const de_IpamOperatingRegion = (output: any, context: __SerdeContext): IpamOperatingRegion => {
  const contents: any = {};
  if (output[_rNe] != null) {
    contents[_RN] = __expectString(output[_rNe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamOperatingRegionSet
 */
const de_IpamOperatingRegionSet = (output: any, context: __SerdeContext): IpamOperatingRegion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamOperatingRegion(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamPool
 */
const de_IpamPool = (output: any, context: __SerdeContext): IpamPool => {
  const contents: any = {};
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_iPIp] != null) {
    contents[_IPI] = __expectString(output[_iPIp]);
  }
  if (output[_sIPI] != null) {
    contents[_SIPI] = __expectString(output[_sIPI]);
  }
  if (output[_iPAp] != null) {
    contents[_IPApa] = __expectString(output[_iPAp]);
  }
  if (output[_iSA] != null) {
    contents[_ISA] = __expectString(output[_iSA]);
  }
  if (output[_iST] != null) {
    contents[_ISTp] = __expectString(output[_iST]);
  }
  if (output[_iApa] != null) {
    contents[_IApa] = __expectString(output[_iApa]);
  }
  if (output[_iRp] != null) {
    contents[_IRpa] = __expectString(output[_iRp]);
  }
  if (output[_loc] != null) {
    contents[_L] = __expectString(output[_loc]);
  }
  if (output[_pDoo] != null) {
    contents[_PDo] = __strictParseInt32(output[_pDoo]) as number;
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sMt] != null) {
    contents[_SMt] = __expectString(output[_sMt]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_aIu] != null) {
    contents[_AIu] = __parseBoolean(output[_aIu]);
  }
  if (output[_pAu] != null) {
    contents[_PA] = __parseBoolean(output[_pAu]);
  }
  if (output[_aF] != null) {
    contents[_AF] = __expectString(output[_aF]);
  }
  if (output[_aMNL] != null) {
    contents[_AMNL] = __strictParseInt32(output[_aMNL]) as number;
  }
  if (output[_aMNLl] != null) {
    contents[_AMNLl] = __strictParseInt32(output[_aMNLl]) as number;
  }
  if (output[_aDNL] != null) {
    contents[_ADNL] = __strictParseInt32(output[_aDNL]) as number;
  }
  if (output.allocationResourceTagSet === "") {
    contents[_ARTl] = [];
  } else if (output[_aRTS] != null && output[_aRTS][_i] != null) {
    contents[_ARTl] = de_IpamResourceTagList(__getArrayIfSingleItem(output[_aRTS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_aSw] != null) {
    contents[_ASw] = __expectString(output[_aSw]);
  }
  if (output[_pIS] != null) {
    contents[_PIS] = __expectString(output[_pIS]);
  }
  if (output[_sRo] != null) {
    contents[_SRo] = de_IpamPoolSourceResource(output[_sRo], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamPoolAllocation
 */
const de_IpamPoolAllocation = (output: any, context: __SerdeContext): IpamPoolAllocation => {
  const contents: any = {};
  if (output[_ci] != null) {
    contents[_C] = __expectString(output[_ci]);
  }
  if (output[_iPAI] != null) {
    contents[_IPAI] = __expectString(output[_iPAI]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_rR] != null) {
    contents[_RRe] = __expectString(output[_rR]);
  }
  if (output[_rO] != null) {
    contents[_RO] = __expectString(output[_rO]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamPoolAllocationSet
 */
const de_IpamPoolAllocationSet = (output: any, context: __SerdeContext): IpamPoolAllocation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamPoolAllocation(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamPoolCidr
 */
const de_IpamPoolCidr = (output: any, context: __SerdeContext): IpamPoolCidr => {
  const contents: any = {};
  if (output[_ci] != null) {
    contents[_C] = __expectString(output[_ci]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_fR] != null) {
    contents[_FR] = de_IpamPoolCidrFailureReason(output[_fR], context);
  }
  if (output[_iPCI] != null) {
    contents[_IPCI] = __expectString(output[_iPCI]);
  }
  if (output[_nL] != null) {
    contents[_NL] = __strictParseInt32(output[_nL]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamPoolCidrFailureReason
 */
const de_IpamPoolCidrFailureReason = (output: any, context: __SerdeContext): IpamPoolCidrFailureReason => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamPoolCidrSet
 */
const de_IpamPoolCidrSet = (output: any, context: __SerdeContext): IpamPoolCidr[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamPoolCidr(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamPoolSet
 */
const de_IpamPoolSet = (output: any, context: __SerdeContext): IpamPool[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamPool(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamPoolSourceResource
 */
const de_IpamPoolSourceResource = (output: any, context: __SerdeContext): IpamPoolSourceResource => {
  const contents: any = {};
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_rR] != null) {
    contents[_RRe] = __expectString(output[_rR]);
  }
  if (output[_rO] != null) {
    contents[_RO] = __expectString(output[_rO]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamPublicAddressSecurityGroup
 */
const de_IpamPublicAddressSecurityGroup = (output: any, context: __SerdeContext): IpamPublicAddressSecurityGroup => {
  const contents: any = {};
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamPublicAddressSecurityGroupList
 */
const de_IpamPublicAddressSecurityGroupList = (
  output: any,
  context: __SerdeContext
): IpamPublicAddressSecurityGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamPublicAddressSecurityGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamPublicAddressTag
 */
const de_IpamPublicAddressTag = (output: any, context: __SerdeContext): IpamPublicAddressTag => {
  const contents: any = {};
  if (output[_k] != null) {
    contents[_Ke] = __expectString(output[_k]);
  }
  if (output[_v] != null) {
    contents[_Va] = __expectString(output[_v]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamPublicAddressTagList
 */
const de_IpamPublicAddressTagList = (output: any, context: __SerdeContext): IpamPublicAddressTag[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamPublicAddressTag(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamPublicAddressTags
 */
const de_IpamPublicAddressTags = (output: any, context: __SerdeContext): IpamPublicAddressTags => {
  const contents: any = {};
  if (output.eipTagSet === "") {
    contents[_ETi] = [];
  } else if (output[_eTSi] != null && output[_eTSi][_i] != null) {
    contents[_ETi] = de_IpamPublicAddressTagList(__getArrayIfSingleItem(output[_eTSi][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamResourceCidr
 */
const de_IpamResourceCidr = (output: any, context: __SerdeContext): IpamResourceCidr => {
  const contents: any = {};
  if (output[_iIp] != null) {
    contents[_IIp] = __expectString(output[_iIp]);
  }
  if (output[_iSIp] != null) {
    contents[_ISI] = __expectString(output[_iSIp]);
  }
  if (output[_iPIp] != null) {
    contents[_IPI] = __expectString(output[_iPIp]);
  }
  if (output[_rR] != null) {
    contents[_RRe] = __expectString(output[_rR]);
  }
  if (output[_rOI] != null) {
    contents[_ROI] = __expectString(output[_rOI]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rNes] != null) {
    contents[_RNes] = __expectString(output[_rNes]);
  }
  if (output[_rCe] != null) {
    contents[_RC] = __expectString(output[_rCe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output.resourceTagSet === "") {
    contents[_RTesou] = [];
  } else if (output[_rTSe] != null && output[_rTSe][_i] != null) {
    contents[_RTesou] = de_IpamResourceTagList(__getArrayIfSingleItem(output[_rTSe][_i]), context);
  }
  if (output[_iU] != null) {
    contents[_IUp] = __strictParseFloat(output[_iU]) as number;
  }
  if (output[_cSo] != null) {
    contents[_CSo] = __expectString(output[_cSo]);
  }
  if (output[_mSa] != null) {
    contents[_MSa] = __expectString(output[_mSa]);
  }
  if (output[_oSv] != null) {
    contents[_OSv] = __expectString(output[_oSv]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamResourceCidrSet
 */
const de_IpamResourceCidrSet = (output: any, context: __SerdeContext): IpamResourceCidr[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamResourceCidr(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamResourceDiscovery
 */
const de_IpamResourceDiscovery = (output: any, context: __SerdeContext): IpamResourceDiscovery => {
  const contents: any = {};
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_iRDI] != null) {
    contents[_IRDI] = __expectString(output[_iRDI]);
  }
  if (output[_iRDAp] != null) {
    contents[_IRDApa] = __expectString(output[_iRDAp]);
  }
  if (output[_iRDR] != null) {
    contents[_IRDR] = __expectString(output[_iRDR]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.operatingRegionSet === "") {
    contents[_OR] = [];
  } else if (output[_oRS] != null && output[_oRS][_i] != null) {
    contents[_OR] = de_IpamOperatingRegionSet(__getArrayIfSingleItem(output[_oRS][_i]), context);
  }
  if (output[_iDs] != null) {
    contents[_IDs] = __parseBoolean(output[_iDs]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamResourceDiscoveryAssociation
 */
const de_IpamResourceDiscoveryAssociation = (
  output: any,
  context: __SerdeContext
): IpamResourceDiscoveryAssociation => {
  const contents: any = {};
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_iRDAI] != null) {
    contents[_IRDAIp] = __expectString(output[_iRDAI]);
  }
  if (output[_iRDAA] != null) {
    contents[_IRDAA] = __expectString(output[_iRDAA]);
  }
  if (output[_iRDI] != null) {
    contents[_IRDI] = __expectString(output[_iRDI]);
  }
  if (output[_iIp] != null) {
    contents[_IIp] = __expectString(output[_iIp]);
  }
  if (output[_iApa] != null) {
    contents[_IApa] = __expectString(output[_iApa]);
  }
  if (output[_iRp] != null) {
    contents[_IRpa] = __expectString(output[_iRp]);
  }
  if (output[_iDs] != null) {
    contents[_IDs] = __parseBoolean(output[_iDs]);
  }
  if (output[_rDS] != null) {
    contents[_RDS] = __expectString(output[_rDS]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamResourceDiscoveryAssociationSet
 */
const de_IpamResourceDiscoveryAssociationSet = (
  output: any,
  context: __SerdeContext
): IpamResourceDiscoveryAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamResourceDiscoveryAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamResourceDiscoverySet
 */
const de_IpamResourceDiscoverySet = (output: any, context: __SerdeContext): IpamResourceDiscovery[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamResourceDiscovery(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamResourceTag
 */
const de_IpamResourceTag = (output: any, context: __SerdeContext): IpamResourceTag => {
  const contents: any = {};
  if (output[_k] != null) {
    contents[_Ke] = __expectString(output[_k]);
  }
  if (output[_v] != null) {
    contents[_Va] = __expectString(output[_v]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamResourceTagList
 */
const de_IpamResourceTagList = (output: any, context: __SerdeContext): IpamResourceTag[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamResourceTag(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamScope
 */
const de_IpamScope = (output: any, context: __SerdeContext): IpamScope => {
  const contents: any = {};
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_iSIp] != null) {
    contents[_ISI] = __expectString(output[_iSIp]);
  }
  if (output[_iSA] != null) {
    contents[_ISA] = __expectString(output[_iSA]);
  }
  if (output[_iApa] != null) {
    contents[_IApa] = __expectString(output[_iApa]);
  }
  if (output[_iRp] != null) {
    contents[_IRpa] = __expectString(output[_iRp]);
  }
  if (output[_iST] != null) {
    contents[_ISTp] = __expectString(output[_iST]);
  }
  if (output[_iDs] != null) {
    contents[_IDs] = __parseBoolean(output[_iDs]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_pCo] != null) {
    contents[_PCoo] = __strictParseInt32(output[_pCo]) as number;
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpamScopeSet
 */
const de_IpamScopeSet = (output: any, context: __SerdeContext): IpamScope[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpamScope(entry, context);
    });
};

/**
 * deserializeAws_ec2IpamSet
 */
const de_IpamSet = (output: any, context: __SerdeContext): Ipam[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipam(entry, context);
    });
};

/**
 * deserializeAws_ec2IpPermission
 */
const de_IpPermission = (output: any, context: __SerdeContext): IpPermission => {
  const contents: any = {};
  if (output[_fP] != null) {
    contents[_FP] = __strictParseInt32(output[_fP]) as number;
  }
  if (output[_iPpr] != null) {
    contents[_IPpr] = __expectString(output[_iPpr]);
  }
  if (output.ipRanges === "") {
    contents[_IRp] = [];
  } else if (output[_iRpa] != null && output[_iRpa][_i] != null) {
    contents[_IRp] = de_IpRangeList(__getArrayIfSingleItem(output[_iRpa][_i]), context);
  }
  if (output.ipv6Ranges === "") {
    contents[_IRpv] = [];
  } else if (output[_iRpv] != null && output[_iRpv][_i] != null) {
    contents[_IRpv] = de_Ipv6RangeList(__getArrayIfSingleItem(output[_iRpv][_i]), context);
  }
  if (output.prefixListIds === "") {
    contents[_PLIr] = [];
  } else if (output[_pLIr] != null && output[_pLIr][_i] != null) {
    contents[_PLIr] = de_PrefixListIdList(__getArrayIfSingleItem(output[_pLIr][_i]), context);
  }
  if (output[_tPo] != null) {
    contents[_TP] = __strictParseInt32(output[_tPo]) as number;
  }
  if (output.groups === "") {
    contents[_UIGP] = [];
  } else if (output[_gr] != null && output[_gr][_i] != null) {
    contents[_UIGP] = de_UserIdGroupPairList(__getArrayIfSingleItem(output[_gr][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpPermissionList
 */
const de_IpPermissionList = (output: any, context: __SerdeContext): IpPermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpPermission(entry, context);
    });
};

/**
 * deserializeAws_ec2IpPrefixList
 */
const de_IpPrefixList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2IpRange
 */
const de_IpRange = (output: any, context: __SerdeContext): IpRange => {
  const contents: any = {};
  if (output[_cIi] != null) {
    contents[_CIi] = __expectString(output[_cIi]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  return contents;
};

/**
 * deserializeAws_ec2IpRangeList
 */
const de_IpRangeList = (output: any, context: __SerdeContext): IpRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_IpRange(entry, context);
    });
};

/**
 * deserializeAws_ec2IpRanges
 */
const de_IpRanges = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Ipv4PrefixesList
 */
const de_Ipv4PrefixesList = (output: any, context: __SerdeContext): Ipv4PrefixSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv4PrefixSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv4PrefixList
 */
const de_Ipv4PrefixList = (output: any, context: __SerdeContext): Ipv4PrefixSpecificationRequest[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv4PrefixSpecificationRequest(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv4PrefixListResponse
 */
const de_Ipv4PrefixListResponse = (output: any, context: __SerdeContext): Ipv4PrefixSpecificationResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv4PrefixSpecificationResponse(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv4PrefixSpecification
 */
const de_Ipv4PrefixSpecification = (output: any, context: __SerdeContext): Ipv4PrefixSpecification => {
  const contents: any = {};
  if (output[_iPpv] != null) {
    contents[_IPpvr] = __expectString(output[_iPpv]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv4PrefixSpecificationRequest
 */
const de_Ipv4PrefixSpecificationRequest = (output: any, context: __SerdeContext): Ipv4PrefixSpecificationRequest => {
  const contents: any = {};
  if (output[_IPpvr] != null) {
    contents[_IPpvr] = __expectString(output[_IPpvr]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv4PrefixSpecificationResponse
 */
const de_Ipv4PrefixSpecificationResponse = (output: any, context: __SerdeContext): Ipv4PrefixSpecificationResponse => {
  const contents: any = {};
  if (output[_iPpv] != null) {
    contents[_IPpvr] = __expectString(output[_iPpv]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6AddressList
 */
const de_Ipv6AddressList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Ipv6CidrAssociation
 */
const de_Ipv6CidrAssociation = (output: any, context: __SerdeContext): Ipv6CidrAssociation => {
  const contents: any = {};
  if (output[_iCp] != null) {
    contents[_ICp] = __expectString(output[_iCp]);
  }
  if (output[_aRs] != null) {
    contents[_ARss] = __expectString(output[_aRs]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6CidrAssociationSet
 */
const de_Ipv6CidrAssociationSet = (output: any, context: __SerdeContext): Ipv6CidrAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6CidrAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv6CidrBlock
 */
const de_Ipv6CidrBlock = (output: any, context: __SerdeContext): Ipv6CidrBlock => {
  const contents: any = {};
  if (output[_iCB] != null) {
    contents[_ICB] = __expectString(output[_iCB]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6CidrBlockSet
 */
const de_Ipv6CidrBlockSet = (output: any, context: __SerdeContext): Ipv6CidrBlock[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6CidrBlock(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv6Pool
 */
const de_Ipv6Pool = (output: any, context: __SerdeContext): Ipv6Pool => {
  const contents: any = {};
  if (output[_pIo] != null) {
    contents[_PIo] = __expectString(output[_pIo]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.poolCidrBlockSet === "") {
    contents[_PCBo] = [];
  } else if (output[_pCBS] != null && output[_pCBS][_i] != null) {
    contents[_PCBo] = de_PoolCidrBlocksSet(__getArrayIfSingleItem(output[_pCBS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6PoolSet
 */
const de_Ipv6PoolSet = (output: any, context: __SerdeContext): Ipv6Pool[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6Pool(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv6PrefixesList
 */
const de_Ipv6PrefixesList = (output: any, context: __SerdeContext): Ipv6PrefixSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6PrefixSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv6PrefixList
 */
const de_Ipv6PrefixList = (output: any, context: __SerdeContext): Ipv6PrefixSpecificationRequest[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6PrefixSpecificationRequest(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv6PrefixListResponse
 */
const de_Ipv6PrefixListResponse = (output: any, context: __SerdeContext): Ipv6PrefixSpecificationResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6PrefixSpecificationResponse(entry, context);
    });
};

/**
 * deserializeAws_ec2Ipv6PrefixSpecification
 */
const de_Ipv6PrefixSpecification = (output: any, context: __SerdeContext): Ipv6PrefixSpecification => {
  const contents: any = {};
  if (output[_iPpvr] != null) {
    contents[_IPpvre] = __expectString(output[_iPpvr]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6PrefixSpecificationRequest
 */
const de_Ipv6PrefixSpecificationRequest = (output: any, context: __SerdeContext): Ipv6PrefixSpecificationRequest => {
  const contents: any = {};
  if (output[_IPpvre] != null) {
    contents[_IPpvre] = __expectString(output[_IPpvre]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6PrefixSpecificationResponse
 */
const de_Ipv6PrefixSpecificationResponse = (output: any, context: __SerdeContext): Ipv6PrefixSpecificationResponse => {
  const contents: any = {};
  if (output[_iPpvr] != null) {
    contents[_IPpvre] = __expectString(output[_iPpvr]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6Range
 */
const de_Ipv6Range = (output: any, context: __SerdeContext): Ipv6Range => {
  const contents: any = {};
  if (output[_cIid] != null) {
    contents[_CIid] = __expectString(output[_cIid]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Ipv6RangeList
 */
const de_Ipv6RangeList = (output: any, context: __SerdeContext): Ipv6Range[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Ipv6Range(entry, context);
    });
};

/**
 * deserializeAws_ec2KeyPair
 */
const de_KeyPair = (output: any, context: __SerdeContext): KeyPair => {
  const contents: any = {};
  if (output[_kF] != null) {
    contents[_KFe] = __expectString(output[_kF]);
  }
  if (output[_kM] != null) {
    contents[_KM] = __expectString(output[_kM]);
  }
  if (output[_kN] != null) {
    contents[_KN] = __expectString(output[_kN]);
  }
  if (output[_kPI] != null) {
    contents[_KPI] = __expectString(output[_kPI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2KeyPairInfo
 */
const de_KeyPairInfo = (output: any, context: __SerdeContext): KeyPairInfo => {
  const contents: any = {};
  if (output[_kPI] != null) {
    contents[_KPI] = __expectString(output[_kPI]);
  }
  if (output[_kF] != null) {
    contents[_KFe] = __expectString(output[_kF]);
  }
  if (output[_kN] != null) {
    contents[_KN] = __expectString(output[_kN]);
  }
  if (output[_kT] != null) {
    contents[_KT] = __expectString(output[_kT]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_pK] != null) {
    contents[_PK] = __expectString(output[_pK]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  return contents;
};

/**
 * deserializeAws_ec2KeyPairList
 */
const de_KeyPairList = (output: any, context: __SerdeContext): KeyPairInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_KeyPairInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2LastError
 */
const de_LastError = (output: any, context: __SerdeContext): LastError => {
  const contents: any = {};
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchPermission
 */
const de_LaunchPermission = (output: any, context: __SerdeContext): LaunchPermission => {
  const contents: any = {};
  if (output[_g] != null) {
    contents[_Gr] = __expectString(output[_g]);
  }
  if (output[_uI] != null) {
    contents[_UIs] = __expectString(output[_uI]);
  }
  if (output[_oAr] != null) {
    contents[_OAr] = __expectString(output[_oAr]);
  }
  if (output[_oUA] != null) {
    contents[_OUA] = __expectString(output[_oUA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchPermissionList
 */
const de_LaunchPermissionList = (output: any, context: __SerdeContext): LaunchPermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchPermission(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchSpecification
 */
const de_LaunchSpecification = (output: any, context: __SerdeContext): LaunchSpecification => {
  const contents: any = {};
  if (output[_uDs] != null) {
    contents[_UD] = __expectString(output[_uDs]);
  }
  if (output.groupSet === "") {
    contents[_SG] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_SG] = de_GroupIdentifierList(__getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output[_aTdd] != null) {
    contents[_ATd] = __expectString(output[_aTdd]);
  }
  if (output.blockDeviceMapping === "") {
    contents[_BDM] = [];
  } else if (output[_bDM] != null && output[_bDM][_i] != null) {
    contents[_BDM] = de_BlockDeviceMappingList(__getArrayIfSingleItem(output[_bDM][_i]), context);
  }
  if (output[_eO] != null) {
    contents[_EO] = __parseBoolean(output[_eO]);
  }
  if (output[_iIP] != null) {
    contents[_IIP] = de_IamInstanceProfileSpecification(output[_iIP], context);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_kI] != null) {
    contents[_KI] = __expectString(output[_kI]);
  }
  if (output[_kN] != null) {
    contents[_KN] = __expectString(output[_kN]);
  }
  if (output.networkInterfaceSet === "") {
    contents[_NI] = [];
  } else if (output[_nIS] != null && output[_nIS][_i] != null) {
    contents[_NI] = de_InstanceNetworkInterfaceSpecificationList(__getArrayIfSingleItem(output[_nIS][_i]), context);
  }
  if (output[_pla] != null) {
    contents[_Pl] = de_SpotPlacement(output[_pla], context);
  }
  if (output[_rIa] != null) {
    contents[_RIa] = __expectString(output[_rIa]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_mo] != null) {
    contents[_Mon] = de_RunInstancesMonitoringEnabled(output[_mo], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchSpecsList
 */
const de_LaunchSpecsList = (output: any, context: __SerdeContext): SpotFleetLaunchSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SpotFleetLaunchSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplate
 */
const de_LaunchTemplate = (output: any, context: __SerdeContext): LaunchTemplate => {
  const contents: any = {};
  if (output[_lTI] != null) {
    contents[_LTI] = __expectString(output[_lTI]);
  }
  if (output[_lTN] != null) {
    contents[_LTN] = __expectString(output[_lTN]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_cBr] != null) {
    contents[_CBr] = __expectString(output[_cBr]);
  }
  if (output[_dVN] != null) {
    contents[_DVN] = __strictParseLong(output[_dVN]) as number;
  }
  if (output[_lVN] != null) {
    contents[_LVN] = __strictParseLong(output[_lVN]) as number;
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateAndOverridesResponse
 */
const de_LaunchTemplateAndOverridesResponse = (
  output: any,
  context: __SerdeContext
): LaunchTemplateAndOverridesResponse => {
  const contents: any = {};
  if (output[_lTS] != null) {
    contents[_LTS] = de_FleetLaunchTemplateSpecification(output[_lTS], context);
  }
  if (output[_ov] != null) {
    contents[_Ov] = de_FleetLaunchTemplateOverrides(output[_ov], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateBlockDeviceMapping
 */
const de_LaunchTemplateBlockDeviceMapping = (
  output: any,
  context: __SerdeContext
): LaunchTemplateBlockDeviceMapping => {
  const contents: any = {};
  if (output[_dN] != null) {
    contents[_DN] = __expectString(output[_dN]);
  }
  if (output[_vN] != null) {
    contents[_VN] = __expectString(output[_vN]);
  }
  if (output[_eb] != null) {
    contents[_E] = de_LaunchTemplateEbsBlockDevice(output[_eb], context);
  }
  if (output[_nD] != null) {
    contents[_ND] = __expectString(output[_nD]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateBlockDeviceMappingList
 */
const de_LaunchTemplateBlockDeviceMappingList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateBlockDeviceMapping[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateBlockDeviceMapping(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplateCapacityReservationSpecificationResponse
 */
const de_LaunchTemplateCapacityReservationSpecificationResponse = (
  output: any,
  context: __SerdeContext
): LaunchTemplateCapacityReservationSpecificationResponse => {
  const contents: any = {};
  if (output[_cRP] != null) {
    contents[_CRP] = __expectString(output[_cRP]);
  }
  if (output[_cRT] != null) {
    contents[_CRTa] = de_CapacityReservationTargetResponse(output[_cRT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateConfig
 */
const de_LaunchTemplateConfig = (output: any, context: __SerdeContext): LaunchTemplateConfig => {
  const contents: any = {};
  if (output[_lTS] != null) {
    contents[_LTS] = de_FleetLaunchTemplateSpecification(output[_lTS], context);
  }
  if (output.overrides === "") {
    contents[_Ov] = [];
  } else if (output[_ov] != null && output[_ov][_i] != null) {
    contents[_Ov] = de_LaunchTemplateOverridesList(__getArrayIfSingleItem(output[_ov][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateConfigList
 */
const de_LaunchTemplateConfigList = (output: any, context: __SerdeContext): LaunchTemplateConfig[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateConfig(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplateCpuOptions
 */
const de_LaunchTemplateCpuOptions = (output: any, context: __SerdeContext): LaunchTemplateCpuOptions => {
  const contents: any = {};
  if (output[_cCo] != null) {
    contents[_CC] = __strictParseInt32(output[_cCo]) as number;
  }
  if (output[_tPC] != null) {
    contents[_TPC] = __strictParseInt32(output[_tPC]) as number;
  }
  if (output[_aSS] != null) {
    contents[_ASS] = __expectString(output[_aSS]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateEbsBlockDevice
 */
const de_LaunchTemplateEbsBlockDevice = (output: any, context: __SerdeContext): LaunchTemplateEbsBlockDevice => {
  const contents: any = {};
  if (output[_enc] != null) {
    contents[_Enc] = __parseBoolean(output[_enc]);
  }
  if (output[_dOT] != null) {
    contents[_DOT] = __parseBoolean(output[_dOT]);
  }
  if (output[_io] != null) {
    contents[_Io] = __strictParseInt32(output[_io]) as number;
  }
  if (output[_kKI] != null) {
    contents[_KKI] = __expectString(output[_kKI]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_vSo] != null) {
    contents[_VS] = __strictParseInt32(output[_vSo]) as number;
  }
  if (output[_vT] != null) {
    contents[_VT] = __expectString(output[_vT]);
  }
  if (output[_th] != null) {
    contents[_Th] = __strictParseInt32(output[_th]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponse
 */
const de_LaunchTemplateElasticInferenceAcceleratorResponse = (
  output: any,
  context: __SerdeContext
): LaunchTemplateElasticInferenceAcceleratorResponse => {
  const contents: any = {};
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  if (output[_cou] != null) {
    contents[_Cou] = __strictParseInt32(output[_cou]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateElasticInferenceAcceleratorResponseList
 */
const de_LaunchTemplateElasticInferenceAcceleratorResponseList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateElasticInferenceAcceleratorResponse[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateElasticInferenceAcceleratorResponse(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplateEnaSrdSpecification
 */
const de_LaunchTemplateEnaSrdSpecification = (
  output: any,
  context: __SerdeContext
): LaunchTemplateEnaSrdSpecification => {
  const contents: any = {};
  if (output[_eSE] != null) {
    contents[_ESE] = __parseBoolean(output[_eSE]);
  }
  if (output[_eSUS] != null) {
    contents[_ESUS] = de_LaunchTemplateEnaSrdUdpSpecification(output[_eSUS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateEnaSrdUdpSpecification
 */
const de_LaunchTemplateEnaSrdUdpSpecification = (
  output: any,
  context: __SerdeContext
): LaunchTemplateEnaSrdUdpSpecification => {
  const contents: any = {};
  if (output[_eSUE] != null) {
    contents[_ESUE] = __parseBoolean(output[_eSUE]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateEnclaveOptions
 */
const de_LaunchTemplateEnclaveOptions = (output: any, context: __SerdeContext): LaunchTemplateEnclaveOptions => {
  const contents: any = {};
  if (output[_en] != null) {
    contents[_En] = __parseBoolean(output[_en]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateHibernationOptions
 */
const de_LaunchTemplateHibernationOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplateHibernationOptions => {
  const contents: any = {};
  if (output[_conf] != null) {
    contents[_Conf] = __parseBoolean(output[_conf]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateIamInstanceProfileSpecification
 */
const de_LaunchTemplateIamInstanceProfileSpecification = (
  output: any,
  context: __SerdeContext
): LaunchTemplateIamInstanceProfileSpecification => {
  const contents: any = {};
  if (output[_ar] != null) {
    contents[_Ar] = __expectString(output[_ar]);
  }
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateInstanceMaintenanceOptions
 */
const de_LaunchTemplateInstanceMaintenanceOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceMaintenanceOptions => {
  const contents: any = {};
  if (output[_aRu] != null) {
    contents[_ARu] = __expectString(output[_aRu]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateInstanceMarketOptions
 */
const de_LaunchTemplateInstanceMarketOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceMarketOptions => {
  const contents: any = {};
  if (output[_mT] != null) {
    contents[_MT] = __expectString(output[_mT]);
  }
  if (output[_sO] != null) {
    contents[_SO] = de_LaunchTemplateSpotMarketOptions(output[_sO], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateInstanceMetadataOptions
 */
const de_LaunchTemplateInstanceMetadataOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceMetadataOptions => {
  const contents: any = {};
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_hT] != null) {
    contents[_HT] = __expectString(output[_hT]);
  }
  if (output[_hPRHL] != null) {
    contents[_HPRHL] = __strictParseInt32(output[_hPRHL]) as number;
  }
  if (output[_hE] != null) {
    contents[_HE] = __expectString(output[_hE]);
  }
  if (output[_hPI] != null) {
    contents[_HPI] = __expectString(output[_hPI]);
  }
  if (output[_iMT] != null) {
    contents[_IMT] = __expectString(output[_iMT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecification
 */
const de_LaunchTemplateInstanceNetworkInterfaceSpecification = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceNetworkInterfaceSpecification => {
  const contents: any = {};
  if (output[_aCIA] != null) {
    contents[_ACIA] = __parseBoolean(output[_aCIA]);
  }
  if (output[_aPIA] != null) {
    contents[_APIAs] = __parseBoolean(output[_aPIA]);
  }
  if (output[_dOT] != null) {
    contents[_DOT] = __parseBoolean(output[_dOT]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_dIe] != null) {
    contents[_DIev] = __strictParseInt32(output[_dIe]) as number;
  }
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_gIr] != null) {
    contents[_G] = de_GroupIdStringList(__getArrayIfSingleItem(output[_gS][_gIr]), context);
  }
  if (output[_iTnt] != null) {
    contents[_ITn] = __expectString(output[_iTnt]);
  }
  if (output[_iAC] != null) {
    contents[_IAC] = __strictParseInt32(output[_iAC]) as number;
  }
  if (output.ipv6AddressesSet === "") {
    contents[_IA] = [];
  } else if (output[_iASp] != null && output[_iASp][_i] != null) {
    contents[_IA] = de_InstanceIpv6AddressList(__getArrayIfSingleItem(output[_iASp][_i]), context);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = __expectString(output[_pIA]);
  }
  if (output.privateIpAddressesSet === "") {
    contents[_PIA] = [];
  } else if (output[_pIAS] != null && output[_pIAS][_i] != null) {
    contents[_PIA] = de_PrivateIpAddressSpecificationList(__getArrayIfSingleItem(output[_pIAS][_i]), context);
  }
  if (output[_sPIAC] != null) {
    contents[_SPIAC] = __strictParseInt32(output[_sPIAC]) as number;
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_nCI] != null) {
    contents[_NCI] = __strictParseInt32(output[_nCI]) as number;
  }
  if (output.ipv4PrefixSet === "") {
    contents[_IPp] = [];
  } else if (output[_iPSpv] != null && output[_iPSpv][_i] != null) {
    contents[_IPp] = de_Ipv4PrefixListResponse(__getArrayIfSingleItem(output[_iPSpv][_i]), context);
  }
  if (output[_iPCp] != null) {
    contents[_IPCp] = __strictParseInt32(output[_iPCp]) as number;
  }
  if (output.ipv6PrefixSet === "") {
    contents[_IP] = [];
  } else if (output[_iPSpvr] != null && output[_iPSpvr][_i] != null) {
    contents[_IP] = de_Ipv6PrefixListResponse(__getArrayIfSingleItem(output[_iPSpvr][_i]), context);
  }
  if (output[_iPCpv] != null) {
    contents[_IPC] = __strictParseInt32(output[_iPCpv]) as number;
  }
  if (output[_pIri] != null) {
    contents[_PIr] = __parseBoolean(output[_pIri]);
  }
  if (output[_eSS] != null) {
    contents[_ESS] = de_LaunchTemplateEnaSrdSpecification(output[_eSS], context);
  }
  if (output[_cTS] != null) {
    contents[_CTS] = de_ConnectionTrackingSpecification(output[_cTS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateInstanceNetworkInterfaceSpecificationList
 */
const de_LaunchTemplateInstanceNetworkInterfaceSpecificationList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateInstanceNetworkInterfaceSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateInstanceNetworkInterfaceSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplateLicenseConfiguration
 */
const de_LaunchTemplateLicenseConfiguration = (
  output: any,
  context: __SerdeContext
): LaunchTemplateLicenseConfiguration => {
  const contents: any = {};
  if (output[_lCA] != null) {
    contents[_LCA] = __expectString(output[_lCA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateLicenseList
 */
const de_LaunchTemplateLicenseList = (output: any, context: __SerdeContext): LaunchTemplateLicenseConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateLicenseConfiguration(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplateOverrides
 */
const de_LaunchTemplateOverrides = (output: any, context: __SerdeContext): LaunchTemplateOverrides => {
  const contents: any = {};
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_sPp] != null) {
    contents[_SPp] = __expectString(output[_sPp]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_wC] != null) {
    contents[_WC] = __strictParseFloat(output[_wC]) as number;
  }
  if (output[_pri] != null) {
    contents[_Pri] = __strictParseFloat(output[_pri]) as number;
  }
  if (output[_iR] != null) {
    contents[_IR] = de_InstanceRequirements(output[_iR], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateOverridesList
 */
const de_LaunchTemplateOverridesList = (output: any, context: __SerdeContext): LaunchTemplateOverrides[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateOverrides(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplatePlacement
 */
const de_LaunchTemplatePlacement = (output: any, context: __SerdeContext): LaunchTemplatePlacement => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_af] != null) {
    contents[_Af] = __expectString(output[_af]);
  }
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  if (output[_hI] != null) {
    contents[_HIo] = __expectString(output[_hI]);
  }
  if (output[_t] != null) {
    contents[_Te] = __expectString(output[_t]);
  }
  if (output[_sDp] != null) {
    contents[_SD] = __expectString(output[_sDp]);
  }
  if (output[_hRGA] != null) {
    contents[_HRGA] = __expectString(output[_hRGA]);
  }
  if (output[_pN] != null) {
    contents[_PN] = __strictParseInt32(output[_pN]) as number;
  }
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplatePrivateDnsNameOptions
 */
const de_LaunchTemplatePrivateDnsNameOptions = (
  output: any,
  context: __SerdeContext
): LaunchTemplatePrivateDnsNameOptions => {
  const contents: any = {};
  if (output[_hTo] != null) {
    contents[_HTo] = __expectString(output[_hTo]);
  }
  if (output[_eRNDAR] != null) {
    contents[_ERNDAR] = __parseBoolean(output[_eRNDAR]);
  }
  if (output[_eRNDAAAAR] != null) {
    contents[_ERNDAAAAR] = __parseBoolean(output[_eRNDAAAAR]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateSet
 */
const de_LaunchTemplateSet = (output: any, context: __SerdeContext): LaunchTemplate[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplate(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplatesMonitoring
 */
const de_LaunchTemplatesMonitoring = (output: any, context: __SerdeContext): LaunchTemplatesMonitoring => {
  const contents: any = {};
  if (output[_en] != null) {
    contents[_En] = __parseBoolean(output[_en]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateSpotMarketOptions
 */
const de_LaunchTemplateSpotMarketOptions = (output: any, context: __SerdeContext): LaunchTemplateSpotMarketOptions => {
  const contents: any = {};
  if (output[_mP] != null) {
    contents[_MPa] = __expectString(output[_mP]);
  }
  if (output[_sIT] != null) {
    contents[_SIT] = __expectString(output[_sIT]);
  }
  if (output[_bDMl] != null) {
    contents[_BDMl] = __strictParseInt32(output[_bDMl]) as number;
  }
  if (output[_vU] != null) {
    contents[_VU] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_vU]));
  }
  if (output[_iIB] != null) {
    contents[_IIB] = __expectString(output[_iIB]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateTagSpecification
 */
const de_LaunchTemplateTagSpecification = (output: any, context: __SerdeContext): LaunchTemplateTagSpecification => {
  const contents: any = {};
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateTagSpecificationList
 */
const de_LaunchTemplateTagSpecificationList = (
  output: any,
  context: __SerdeContext
): LaunchTemplateTagSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateTagSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2LaunchTemplateVersion
 */
const de_LaunchTemplateVersion = (output: any, context: __SerdeContext): LaunchTemplateVersion => {
  const contents: any = {};
  if (output[_lTI] != null) {
    contents[_LTI] = __expectString(output[_lTI]);
  }
  if (output[_lTN] != null) {
    contents[_LTN] = __expectString(output[_lTN]);
  }
  if (output[_vNe] != null) {
    contents[_VNe] = __strictParseLong(output[_vNe]) as number;
  }
  if (output[_vD] != null) {
    contents[_VD] = __expectString(output[_vD]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_cBr] != null) {
    contents[_CBr] = __expectString(output[_cBr]);
  }
  if (output[_dVe] != null) {
    contents[_DVef] = __parseBoolean(output[_dVe]);
  }
  if (output[_lTD] != null) {
    contents[_LTD] = de_ResponseLaunchTemplateData(output[_lTD], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LaunchTemplateVersionSet
 */
const de_LaunchTemplateVersionSet = (output: any, context: __SerdeContext): LaunchTemplateVersion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LaunchTemplateVersion(entry, context);
    });
};

/**
 * deserializeAws_ec2LicenseConfiguration
 */
const de_LicenseConfiguration = (output: any, context: __SerdeContext): LicenseConfiguration => {
  const contents: any = {};
  if (output[_lCA] != null) {
    contents[_LCA] = __expectString(output[_lCA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LicenseList
 */
const de_LicenseList = (output: any, context: __SerdeContext): LicenseConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LicenseConfiguration(entry, context);
    });
};

/**
 * deserializeAws_ec2ListImagesInRecycleBinResult
 */
const de_ListImagesInRecycleBinResult = (output: any, context: __SerdeContext): ListImagesInRecycleBinResult => {
  const contents: any = {};
  if (output.imageSet === "") {
    contents[_Ima] = [];
  } else if (output[_iSmag] != null && output[_iSmag][_i] != null) {
    contents[_Ima] = de_ImageRecycleBinInfoList(__getArrayIfSingleItem(output[_iSmag][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ListSnapshotsInRecycleBinResult
 */
const de_ListSnapshotsInRecycleBinResult = (output: any, context: __SerdeContext): ListSnapshotsInRecycleBinResult => {
  const contents: any = {};
  if (output.snapshotSet === "") {
    contents[_Sn] = [];
  } else if (output[_sS] != null && output[_sS][_i] != null) {
    contents[_Sn] = de_SnapshotRecycleBinInfoList(__getArrayIfSingleItem(output[_sS][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LoadBalancersConfig
 */
const de_LoadBalancersConfig = (output: any, context: __SerdeContext): LoadBalancersConfig => {
  const contents: any = {};
  if (output[_cLBC] != null) {
    contents[_CLBC] = de_ClassicLoadBalancersConfig(output[_cLBC], context);
  }
  if (output[_tGCa] != null) {
    contents[_TGC] = de_TargetGroupsConfig(output[_tGCa], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LoadPermission
 */
const de_LoadPermission = (output: any, context: __SerdeContext): LoadPermission => {
  const contents: any = {};
  if (output[_uI] != null) {
    contents[_UIs] = __expectString(output[_uI]);
  }
  if (output[_g] != null) {
    contents[_Gr] = __expectString(output[_g]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LoadPermissionList
 */
const de_LoadPermissionList = (output: any, context: __SerdeContext): LoadPermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LoadPermission(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGateway
 */
const de_LocalGateway = (output: any, context: __SerdeContext): LocalGateway => {
  const contents: any = {};
  if (output[_lGI] != null) {
    contents[_LGI] = __expectString(output[_lGI]);
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayRoute
 */
const de_LocalGatewayRoute = (output: any, context: __SerdeContext): LocalGatewayRoute => {
  const contents: any = {};
  if (output[_dCB] != null) {
    contents[_DCB] = __expectString(output[_dCB]);
  }
  if (output[_lGVIGI] != null) {
    contents[_LGVIGI] = __expectString(output[_lGVIGI]);
  }
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = __expectString(output[_lGRTI]);
  }
  if (output[_lGRTA] != null) {
    contents[_LGRTA] = __expectString(output[_lGRTA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_cPI] != null) {
    contents[_CPIo] = __expectString(output[_cPI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_dPLI] != null) {
    contents[_DPLI] = __expectString(output[_dPLI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayRouteList
 */
const de_LocalGatewayRouteList = (output: any, context: __SerdeContext): LocalGatewayRoute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGatewayRoute(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGatewayRouteTable
 */
const de_LocalGatewayRouteTable = (output: any, context: __SerdeContext): LocalGatewayRouteTable => {
  const contents: any = {};
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = __expectString(output[_lGRTI]);
  }
  if (output[_lGRTA] != null) {
    contents[_LGRTA] = __expectString(output[_lGRTA]);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = __expectString(output[_lGI]);
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_mod] != null) {
    contents[_Mo] = __expectString(output[_mod]);
  }
  if (output[_sR] != null) {
    contents[_SRt] = de_StateReason(output[_sR], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayRouteTableSet
 */
const de_LocalGatewayRouteTableSet = (output: any, context: __SerdeContext): LocalGatewayRouteTable[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGatewayRouteTable(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociation
 */
const de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation = (
  output: any,
  context: __SerdeContext
): LocalGatewayRouteTableVirtualInterfaceGroupAssociation => {
  const contents: any = {};
  if (output[_lGRTVIGAI] != null) {
    contents[_LGRTVIGAI] = __expectString(output[_lGRTVIGAI]);
  }
  if (output[_lGVIGI] != null) {
    contents[_LGVIGI] = __expectString(output[_lGVIGI]);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = __expectString(output[_lGI]);
  }
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = __expectString(output[_lGRTI]);
  }
  if (output[_lGRTA] != null) {
    contents[_LGRTA] = __expectString(output[_lGRTA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet
 */
const de_LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet = (
  output: any,
  context: __SerdeContext
): LocalGatewayRouteTableVirtualInterfaceGroupAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGatewayRouteTableVpcAssociation
 */
const de_LocalGatewayRouteTableVpcAssociation = (
  output: any,
  context: __SerdeContext
): LocalGatewayRouteTableVpcAssociation => {
  const contents: any = {};
  if (output[_lGRTVAI] != null) {
    contents[_LGRTVAI] = __expectString(output[_lGRTVAI]);
  }
  if (output[_lGRTI] != null) {
    contents[_LGRTI] = __expectString(output[_lGRTI]);
  }
  if (output[_lGRTA] != null) {
    contents[_LGRTA] = __expectString(output[_lGRTA]);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = __expectString(output[_lGI]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayRouteTableVpcAssociationSet
 */
const de_LocalGatewayRouteTableVpcAssociationSet = (
  output: any,
  context: __SerdeContext
): LocalGatewayRouteTableVpcAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGatewayRouteTableVpcAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGatewaySet
 */
const de_LocalGatewaySet = (output: any, context: __SerdeContext): LocalGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGatewayVirtualInterface
 */
const de_LocalGatewayVirtualInterface = (output: any, context: __SerdeContext): LocalGatewayVirtualInterface => {
  const contents: any = {};
  if (output[_lGVII] != null) {
    contents[_LGVIIo] = __expectString(output[_lGVII]);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = __expectString(output[_lGI]);
  }
  if (output[_vl] != null) {
    contents[_Vl] = __strictParseInt32(output[_vl]) as number;
  }
  if (output[_lA] != null) {
    contents[_LA] = __expectString(output[_lA]);
  }
  if (output[_pAe] != null) {
    contents[_PAe] = __expectString(output[_pAe]);
  }
  if (output[_lBAo] != null) {
    contents[_LBAo] = __strictParseInt32(output[_lBAo]) as number;
  }
  if (output[_pBA] != null) {
    contents[_PBA] = __strictParseInt32(output[_pBA]) as number;
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayVirtualInterfaceGroup
 */
const de_LocalGatewayVirtualInterfaceGroup = (
  output: any,
  context: __SerdeContext
): LocalGatewayVirtualInterfaceGroup => {
  const contents: any = {};
  if (output[_lGVIGI] != null) {
    contents[_LGVIGI] = __expectString(output[_lGVIGI]);
  }
  if (output.localGatewayVirtualInterfaceIdSet === "") {
    contents[_LGVII] = [];
  } else if (output[_lGVIIS] != null && output[_lGVIIS][_i] != null) {
    contents[_LGVII] = de_LocalGatewayVirtualInterfaceIdSet(__getArrayIfSingleItem(output[_lGVIIS][_i]), context);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = __expectString(output[_lGI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2LocalGatewayVirtualInterfaceGroupSet
 */
const de_LocalGatewayVirtualInterfaceGroupSet = (
  output: any,
  context: __SerdeContext
): LocalGatewayVirtualInterfaceGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGatewayVirtualInterfaceGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalGatewayVirtualInterfaceIdSet
 */
const de_LocalGatewayVirtualInterfaceIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2LocalGatewayVirtualInterfaceSet
 */
const de_LocalGatewayVirtualInterfaceSet = (output: any, context: __SerdeContext): LocalGatewayVirtualInterface[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LocalGatewayVirtualInterface(entry, context);
    });
};

/**
 * deserializeAws_ec2LocalStorageTypeSet
 */
const de_LocalStorageTypeSet = (output: any, context: __SerdeContext): LocalStorageType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2LockedSnapshotsInfo
 */
const de_LockedSnapshotsInfo = (output: any, context: __SerdeContext): LockedSnapshotsInfo => {
  const contents: any = {};
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_lSoc] != null) {
    contents[_LSoc] = __expectString(output[_lSoc]);
  }
  if (output[_lDo] != null) {
    contents[_LDo] = __strictParseInt32(output[_lDo]) as number;
  }
  if (output[_cOP] != null) {
    contents[_COP] = __strictParseInt32(output[_cOP]) as number;
  }
  if (output[_cOPEO] != null) {
    contents[_COPEO] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cOPEO]));
  }
  if (output[_lCO] != null) {
    contents[_LCO] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lCO]));
  }
  if (output[_lDST] != null) {
    contents[_LDST] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lDST]));
  }
  if (output[_lEO] != null) {
    contents[_LEO] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lEO]));
  }
  return contents;
};

/**
 * deserializeAws_ec2LockedSnapshotsInfoList
 */
const de_LockedSnapshotsInfoList = (output: any, context: __SerdeContext): LockedSnapshotsInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_LockedSnapshotsInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2LockSnapshotResult
 */
const de_LockSnapshotResult = (output: any, context: __SerdeContext): LockSnapshotResult => {
  const contents: any = {};
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_lSoc] != null) {
    contents[_LSoc] = __expectString(output[_lSoc]);
  }
  if (output[_lDo] != null) {
    contents[_LDo] = __strictParseInt32(output[_lDo]) as number;
  }
  if (output[_cOP] != null) {
    contents[_COP] = __strictParseInt32(output[_cOP]) as number;
  }
  if (output[_cOPEO] != null) {
    contents[_COPEO] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cOPEO]));
  }
  if (output[_lCO] != null) {
    contents[_LCO] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lCO]));
  }
  if (output[_lEO] != null) {
    contents[_LEO] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lEO]));
  }
  if (output[_lDST] != null) {
    contents[_LDST] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lDST]));
  }
  return contents;
};

/**
 * deserializeAws_ec2MaintenanceDetails
 */
const de_MaintenanceDetails = (output: any, context: __SerdeContext): MaintenanceDetails => {
  const contents: any = {};
  if (output[_pM] != null) {
    contents[_PM] = __expectString(output[_pM]);
  }
  if (output[_mAAA] != null) {
    contents[_MAAA] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_mAAA]));
  }
  if (output[_lMA] != null) {
    contents[_LMA] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lMA]));
  }
  return contents;
};

/**
 * deserializeAws_ec2ManagedPrefixList
 */
const de_ManagedPrefixList = (output: any, context: __SerdeContext): ManagedPrefixList => {
  const contents: any = {};
  if (output[_pLI] != null) {
    contents[_PLI] = __expectString(output[_pLI]);
  }
  if (output[_aF] != null) {
    contents[_AF] = __expectString(output[_aF]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sMt] != null) {
    contents[_SMt] = __expectString(output[_sMt]);
  }
  if (output[_pLA] != null) {
    contents[_PLAr] = __expectString(output[_pLA]);
  }
  if (output[_pLN] != null) {
    contents[_PLN] = __expectString(output[_pLN]);
  }
  if (output[_mE] != null) {
    contents[_ME] = __strictParseInt32(output[_mE]) as number;
  }
  if (output[_ve] != null) {
    contents[_V] = __strictParseLong(output[_ve]) as number;
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ManagedPrefixListSet
 */
const de_ManagedPrefixListSet = (output: any, context: __SerdeContext): ManagedPrefixList[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ManagedPrefixList(entry, context);
    });
};

/**
 * deserializeAws_ec2MemoryGiBPerVCpu
 */
const de_MemoryGiBPerVCpu = (output: any, context: __SerdeContext): MemoryGiBPerVCpu => {
  const contents: any = {};
  if (output[_m] != null) {
    contents[_M] = __strictParseFloat(output[_m]) as number;
  }
  if (output[_ma] != null) {
    contents[_Ma] = __strictParseFloat(output[_ma]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2MemoryInfo
 */
const de_MemoryInfo = (output: any, context: __SerdeContext): MemoryInfo => {
  const contents: any = {};
  if (output[_sIMB] != null) {
    contents[_SIMB] = __strictParseLong(output[_sIMB]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2MemoryMiB
 */
const de_MemoryMiB = (output: any, context: __SerdeContext): MemoryMiB => {
  const contents: any = {};
  if (output[_m] != null) {
    contents[_M] = __strictParseInt32(output[_m]) as number;
  }
  if (output[_ma] != null) {
    contents[_Ma] = __strictParseInt32(output[_ma]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2MetricPoint
 */
const de_MetricPoint = (output: any, context: __SerdeContext): MetricPoint => {
  const contents: any = {};
  if (output[_sD] != null) {
    contents[_SDt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sD]));
  }
  if (output[_eD] != null) {
    contents[_ED] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eD]));
  }
  if (output[_v] != null) {
    contents[_Va] = __strictParseFloat(output[_v]) as number;
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  return contents;
};

/**
 * deserializeAws_ec2MetricPoints
 */
const de_MetricPoints = (output: any, context: __SerdeContext): MetricPoint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_MetricPoint(entry, context);
    });
};

/**
 * deserializeAws_ec2ModifyAddressAttributeResult
 */
const de_ModifyAddressAttributeResult = (output: any, context: __SerdeContext): ModifyAddressAttributeResult => {
  const contents: any = {};
  if (output[_ad] != null) {
    contents[_Ad] = de_AddressAttribute(output[_ad], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyAvailabilityZoneGroupResult
 */
const de_ModifyAvailabilityZoneGroupResult = (
  output: any,
  context: __SerdeContext
): ModifyAvailabilityZoneGroupResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyCapacityReservationFleetResult
 */
const de_ModifyCapacityReservationFleetResult = (
  output: any,
  context: __SerdeContext
): ModifyCapacityReservationFleetResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyCapacityReservationResult
 */
const de_ModifyCapacityReservationResult = (output: any, context: __SerdeContext): ModifyCapacityReservationResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyClientVpnEndpointResult
 */
const de_ModifyClientVpnEndpointResult = (output: any, context: __SerdeContext): ModifyClientVpnEndpointResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyDefaultCreditSpecificationResult
 */
const de_ModifyDefaultCreditSpecificationResult = (
  output: any,
  context: __SerdeContext
): ModifyDefaultCreditSpecificationResult => {
  const contents: any = {};
  if (output[_iFCS] != null) {
    contents[_IFCS] = de_InstanceFamilyCreditSpecification(output[_iFCS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyEbsDefaultKmsKeyIdResult
 */
const de_ModifyEbsDefaultKmsKeyIdResult = (output: any, context: __SerdeContext): ModifyEbsDefaultKmsKeyIdResult => {
  const contents: any = {};
  if (output[_kKI] != null) {
    contents[_KKI] = __expectString(output[_kKI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyFleetResult
 */
const de_ModifyFleetResult = (output: any, context: __SerdeContext): ModifyFleetResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyFpgaImageAttributeResult
 */
const de_ModifyFpgaImageAttributeResult = (output: any, context: __SerdeContext): ModifyFpgaImageAttributeResult => {
  const contents: any = {};
  if (output[_fIA] != null) {
    contents[_FIAp] = de_FpgaImageAttribute(output[_fIA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyHostsResult
 */
const de_ModifyHostsResult = (output: any, context: __SerdeContext): ModifyHostsResult => {
  const contents: any = {};
  if (output.successful === "") {
    contents[_Suc] = [];
  } else if (output[_suc] != null && output[_suc][_i] != null) {
    contents[_Suc] = de_ResponseHostIdList(__getArrayIfSingleItem(output[_suc][_i]), context);
  }
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemList(__getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstanceCapacityReservationAttributesResult
 */
const de_ModifyInstanceCapacityReservationAttributesResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceCapacityReservationAttributesResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstanceCreditSpecificationResult
 */
const de_ModifyInstanceCreditSpecificationResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceCreditSpecificationResult => {
  const contents: any = {};
  if (output.successfulInstanceCreditSpecificationSet === "") {
    contents[_SICS] = [];
  } else if (output[_sICSS] != null && output[_sICSS][_i] != null) {
    contents[_SICS] = de_SuccessfulInstanceCreditSpecificationSet(__getArrayIfSingleItem(output[_sICSS][_i]), context);
  }
  if (output.unsuccessfulInstanceCreditSpecificationSet === "") {
    contents[_UICS] = [];
  } else if (output[_uICSS] != null && output[_uICSS][_i] != null) {
    contents[_UICS] = de_UnsuccessfulInstanceCreditSpecificationSet(
      __getArrayIfSingleItem(output[_uICSS][_i]),
      context
    );
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstanceEventStartTimeResult
 */
const de_ModifyInstanceEventStartTimeResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceEventStartTimeResult => {
  const contents: any = {};
  if (output[_ev] != null) {
    contents[_Eve] = de_InstanceStatusEvent(output[_ev], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstanceEventWindowResult
 */
const de_ModifyInstanceEventWindowResult = (output: any, context: __SerdeContext): ModifyInstanceEventWindowResult => {
  const contents: any = {};
  if (output[_iEW] != null) {
    contents[_IEW] = de_InstanceEventWindow(output[_iEW], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstanceMaintenanceOptionsResult
 */
const de_ModifyInstanceMaintenanceOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceMaintenanceOptionsResult => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_aRu] != null) {
    contents[_ARu] = __expectString(output[_aRu]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstanceMetadataOptionsResult
 */
const de_ModifyInstanceMetadataOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyInstanceMetadataOptionsResult => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_iMO] != null) {
    contents[_IMOn] = de_InstanceMetadataOptionsResponse(output[_iMO], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyInstancePlacementResult
 */
const de_ModifyInstancePlacementResult = (output: any, context: __SerdeContext): ModifyInstancePlacementResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyIpamPoolResult
 */
const de_ModifyIpamPoolResult = (output: any, context: __SerdeContext): ModifyIpamPoolResult => {
  const contents: any = {};
  if (output[_iPp] != null) {
    contents[_IPpa] = de_IpamPool(output[_iPp], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyIpamResourceCidrResult
 */
const de_ModifyIpamResourceCidrResult = (output: any, context: __SerdeContext): ModifyIpamResourceCidrResult => {
  const contents: any = {};
  if (output[_iRC] != null) {
    contents[_IRCp] = de_IpamResourceCidr(output[_iRC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyIpamResourceDiscoveryResult
 */
const de_ModifyIpamResourceDiscoveryResult = (
  output: any,
  context: __SerdeContext
): ModifyIpamResourceDiscoveryResult => {
  const contents: any = {};
  if (output[_iRD] != null) {
    contents[_IRD] = de_IpamResourceDiscovery(output[_iRD], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyIpamResult
 */
const de_ModifyIpamResult = (output: any, context: __SerdeContext): ModifyIpamResult => {
  const contents: any = {};
  if (output[_ip] != null) {
    contents[_Ipa] = de_Ipam(output[_ip], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyIpamScopeResult
 */
const de_ModifyIpamScopeResult = (output: any, context: __SerdeContext): ModifyIpamScopeResult => {
  const contents: any = {};
  if (output[_iS] != null) {
    contents[_ISpa] = de_IpamScope(output[_iS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyLaunchTemplateResult
 */
const de_ModifyLaunchTemplateResult = (output: any, context: __SerdeContext): ModifyLaunchTemplateResult => {
  const contents: any = {};
  if (output[_lT] != null) {
    contents[_LTa] = de_LaunchTemplate(output[_lT], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyLocalGatewayRouteResult
 */
const de_ModifyLocalGatewayRouteResult = (output: any, context: __SerdeContext): ModifyLocalGatewayRouteResult => {
  const contents: any = {};
  if (output[_ro] != null) {
    contents[_Ro] = de_LocalGatewayRoute(output[_ro], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyManagedPrefixListResult
 */
const de_ModifyManagedPrefixListResult = (output: any, context: __SerdeContext): ModifyManagedPrefixListResult => {
  const contents: any = {};
  if (output[_pL] != null) {
    contents[_PLr] = de_ManagedPrefixList(output[_pL], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyPrivateDnsNameOptionsResult
 */
const de_ModifyPrivateDnsNameOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyPrivateDnsNameOptionsResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyReservedInstancesResult
 */
const de_ModifyReservedInstancesResult = (output: any, context: __SerdeContext): ModifyReservedInstancesResult => {
  const contents: any = {};
  if (output[_rIMI] != null) {
    contents[_RIMIe] = __expectString(output[_rIMI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifySecurityGroupRulesResult
 */
const de_ModifySecurityGroupRulesResult = (output: any, context: __SerdeContext): ModifySecurityGroupRulesResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifySnapshotTierResult
 */
const de_ModifySnapshotTierResult = (output: any, context: __SerdeContext): ModifySnapshotTierResult => {
  const contents: any = {};
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_tST] != null) {
    contents[_TST] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_tST]));
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifySpotFleetRequestResponse
 */
const de_ModifySpotFleetRequestResponse = (output: any, context: __SerdeContext): ModifySpotFleetRequestResponse => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorFilterNetworkServicesResult
 */
const de_ModifyTrafficMirrorFilterNetworkServicesResult = (
  output: any,
  context: __SerdeContext
): ModifyTrafficMirrorFilterNetworkServicesResult => {
  const contents: any = {};
  if (output[_tMF] != null) {
    contents[_TMF] = de_TrafficMirrorFilter(output[_tMF], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorFilterRuleResult
 */
const de_ModifyTrafficMirrorFilterRuleResult = (
  output: any,
  context: __SerdeContext
): ModifyTrafficMirrorFilterRuleResult => {
  const contents: any = {};
  if (output[_tMFR] != null) {
    contents[_TMFR] = de_TrafficMirrorFilterRule(output[_tMFR], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyTrafficMirrorSessionResult
 */
const de_ModifyTrafficMirrorSessionResult = (
  output: any,
  context: __SerdeContext
): ModifyTrafficMirrorSessionResult => {
  const contents: any = {};
  if (output[_tMS] != null) {
    contents[_TMS] = de_TrafficMirrorSession(output[_tMS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyTransitGatewayPrefixListReferenceResult
 */
const de_ModifyTransitGatewayPrefixListReferenceResult = (
  output: any,
  context: __SerdeContext
): ModifyTransitGatewayPrefixListReferenceResult => {
  const contents: any = {};
  if (output[_tGPLR] != null) {
    contents[_TGPLR] = de_TransitGatewayPrefixListReference(output[_tGPLR], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyTransitGatewayResult
 */
const de_ModifyTransitGatewayResult = (output: any, context: __SerdeContext): ModifyTransitGatewayResult => {
  const contents: any = {};
  if (output[_tG] != null) {
    contents[_TGr] = de_TransitGateway(output[_tG], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyTransitGatewayVpcAttachmentResult
 */
const de_ModifyTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): ModifyTransitGatewayVpcAttachmentResult => {
  const contents: any = {};
  if (output[_tGVA] != null) {
    contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessEndpointPolicyResult
 */
const de_ModifyVerifiedAccessEndpointPolicyResult = (
  output: any,
  context: __SerdeContext
): ModifyVerifiedAccessEndpointPolicyResult => {
  const contents: any = {};
  if (output[_pE] != null) {
    contents[_PE] = __parseBoolean(output[_pE]);
  }
  if (output[_pDo] != null) {
    contents[_PD] = __expectString(output[_pDo]);
  }
  if (output[_sSs] != null) {
    contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessEndpointResult
 */
const de_ModifyVerifiedAccessEndpointResult = (
  output: any,
  context: __SerdeContext
): ModifyVerifiedAccessEndpointResult => {
  const contents: any = {};
  if (output[_vAE] != null) {
    contents[_VAE] = de_VerifiedAccessEndpoint(output[_vAE], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessGroupPolicyResult
 */
const de_ModifyVerifiedAccessGroupPolicyResult = (
  output: any,
  context: __SerdeContext
): ModifyVerifiedAccessGroupPolicyResult => {
  const contents: any = {};
  if (output[_pE] != null) {
    contents[_PE] = __parseBoolean(output[_pE]);
  }
  if (output[_pDo] != null) {
    contents[_PD] = __expectString(output[_pDo]);
  }
  if (output[_sSs] != null) {
    contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessGroupResult
 */
const de_ModifyVerifiedAccessGroupResult = (output: any, context: __SerdeContext): ModifyVerifiedAccessGroupResult => {
  const contents: any = {};
  if (output[_vAG] != null) {
    contents[_VAG] = de_VerifiedAccessGroup(output[_vAG], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessInstanceLoggingConfigurationResult
 */
const de_ModifyVerifiedAccessInstanceLoggingConfigurationResult = (
  output: any,
  context: __SerdeContext
): ModifyVerifiedAccessInstanceLoggingConfigurationResult => {
  const contents: any = {};
  if (output[_lC] != null) {
    contents[_LCo] = de_VerifiedAccessInstanceLoggingConfiguration(output[_lC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessInstanceResult
 */
const de_ModifyVerifiedAccessInstanceResult = (
  output: any,
  context: __SerdeContext
): ModifyVerifiedAccessInstanceResult => {
  const contents: any = {};
  if (output[_vAI] != null) {
    contents[_VAI] = de_VerifiedAccessInstance(output[_vAI], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVerifiedAccessTrustProviderResult
 */
const de_ModifyVerifiedAccessTrustProviderResult = (
  output: any,
  context: __SerdeContext
): ModifyVerifiedAccessTrustProviderResult => {
  const contents: any = {};
  if (output[_vATP] != null) {
    contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVolumeResult
 */
const de_ModifyVolumeResult = (output: any, context: __SerdeContext): ModifyVolumeResult => {
  const contents: any = {};
  if (output[_vM] != null) {
    contents[_VMo] = de_VolumeModification(output[_vM], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointConnectionNotificationResult
 */
const de_ModifyVpcEndpointConnectionNotificationResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcEndpointConnectionNotificationResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_RV] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointResult
 */
const de_ModifyVpcEndpointResult = (output: any, context: __SerdeContext): ModifyVpcEndpointResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServiceConfigurationResult
 */
const de_ModifyVpcEndpointServiceConfigurationResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcEndpointServiceConfigurationResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServicePayerResponsibilityResult
 */
const de_ModifyVpcEndpointServicePayerResponsibilityResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcEndpointServicePayerResponsibilityResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_RV] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcEndpointServicePermissionsResult
 */
const de_ModifyVpcEndpointServicePermissionsResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcEndpointServicePermissionsResult => {
  const contents: any = {};
  if (output.addedPrincipalSet === "") {
    contents[_APd] = [];
  } else if (output[_aPS] != null && output[_aPS][_i] != null) {
    contents[_APd] = de_AddedPrincipalSet(__getArrayIfSingleItem(output[_aPS][_i]), context);
  }
  if (output[_r] != null) {
    contents[_RV] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcPeeringConnectionOptionsResult
 */
const de_ModifyVpcPeeringConnectionOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyVpcPeeringConnectionOptionsResult => {
  const contents: any = {};
  if (output[_aPCO] != null) {
    contents[_APCO] = de_PeeringConnectionOptions(output[_aPCO], context);
  }
  if (output[_rPCO] != null) {
    contents[_RPCO] = de_PeeringConnectionOptions(output[_rPCO], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpcTenancyResult
 */
const de_ModifyVpcTenancyResult = (output: any, context: __SerdeContext): ModifyVpcTenancyResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_RV] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpnConnectionOptionsResult
 */
const de_ModifyVpnConnectionOptionsResult = (
  output: any,
  context: __SerdeContext
): ModifyVpnConnectionOptionsResult => {
  const contents: any = {};
  if (output[_vC] != null) {
    contents[_VC] = de_VpnConnection(output[_vC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpnConnectionResult
 */
const de_ModifyVpnConnectionResult = (output: any, context: __SerdeContext): ModifyVpnConnectionResult => {
  const contents: any = {};
  if (output[_vC] != null) {
    contents[_VC] = de_VpnConnection(output[_vC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpnTunnelCertificateResult
 */
const de_ModifyVpnTunnelCertificateResult = (
  output: any,
  context: __SerdeContext
): ModifyVpnTunnelCertificateResult => {
  const contents: any = {};
  if (output[_vC] != null) {
    contents[_VC] = de_VpnConnection(output[_vC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ModifyVpnTunnelOptionsResult
 */
const de_ModifyVpnTunnelOptionsResult = (output: any, context: __SerdeContext): ModifyVpnTunnelOptionsResult => {
  const contents: any = {};
  if (output[_vC] != null) {
    contents[_VC] = de_VpnConnection(output[_vC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2Monitoring
 */
const de_Monitoring = (output: any, context: __SerdeContext): Monitoring => {
  const contents: any = {};
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2MonitorInstancesResult
 */
const de_MonitorInstancesResult = (output: any, context: __SerdeContext): MonitorInstancesResult => {
  const contents: any = {};
  if (output.instancesSet === "") {
    contents[_IMn] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_IMn] = de_InstanceMonitoringList(__getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2MoveAddressToVpcResult
 */
const de_MoveAddressToVpcResult = (output: any, context: __SerdeContext): MoveAddressToVpcResult => {
  const contents: any = {};
  if (output[_aI] != null) {
    contents[_AIl] = __expectString(output[_aI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  return contents;
};

/**
 * deserializeAws_ec2MoveByoipCidrToIpamResult
 */
const de_MoveByoipCidrToIpamResult = (output: any, context: __SerdeContext): MoveByoipCidrToIpamResult => {
  const contents: any = {};
  if (output[_bC] != null) {
    contents[_BC] = de_ByoipCidr(output[_bC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2MovingAddressStatus
 */
const de_MovingAddressStatus = (output: any, context: __SerdeContext): MovingAddressStatus => {
  const contents: any = {};
  if (output[_mSo] != null) {
    contents[_MSo] = __expectString(output[_mSo]);
  }
  if (output[_pI] != null) {
    contents[_PI] = __expectString(output[_pI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2MovingAddressStatusSet
 */
const de_MovingAddressStatusSet = (output: any, context: __SerdeContext): MovingAddressStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_MovingAddressStatus(entry, context);
    });
};

/**
 * deserializeAws_ec2NatGateway
 */
const de_NatGateway = (output: any, context: __SerdeContext): NatGateway => {
  const contents: any = {};
  if (output[_cTr] != null) {
    contents[_CTr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_dTel] != null) {
    contents[_DTele] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_dTel]));
  }
  if (output[_fCa] != null) {
    contents[_FCa] = __expectString(output[_fCa]);
  }
  if (output[_fM] != null) {
    contents[_FM] = __expectString(output[_fM]);
  }
  if (output.natGatewayAddressSet === "") {
    contents[_NGA] = [];
  } else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
    contents[_NGA] = de_NatGatewayAddressList(__getArrayIfSingleItem(output[_nGAS][_i]), context);
  }
  if (output[_nGI] != null) {
    contents[_NGI] = __expectString(output[_nGI]);
  }
  if (output[_pB] != null) {
    contents[_PB] = de_ProvisionedBandwidth(output[_pB], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_cTonn] != null) {
    contents[_CTo] = __expectString(output[_cTonn]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NatGatewayAddress
 */
const de_NatGatewayAddress = (output: any, context: __SerdeContext): NatGatewayAddress => {
  const contents: any = {};
  if (output[_aI] != null) {
    contents[_AIl] = __expectString(output[_aI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_pIriv] != null) {
    contents[_PIri] = __expectString(output[_pIriv]);
  }
  if (output[_pI] != null) {
    contents[_PI] = __expectString(output[_pI]);
  }
  if (output[_aIs] != null) {
    contents[_AIss] = __expectString(output[_aIs]);
  }
  if (output[_iPsr] != null) {
    contents[_IPs] = __parseBoolean(output[_iPsr]);
  }
  if (output[_fM] != null) {
    contents[_FM] = __expectString(output[_fM]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NatGatewayAddressList
 */
const de_NatGatewayAddressList = (output: any, context: __SerdeContext): NatGatewayAddress[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NatGatewayAddress(entry, context);
    });
};

/**
 * deserializeAws_ec2NatGatewayList
 */
const de_NatGatewayList = (output: any, context: __SerdeContext): NatGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NatGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkAcl
 */
const de_NetworkAcl = (output: any, context: __SerdeContext): NetworkAcl => {
  const contents: any = {};
  if (output.associationSet === "") {
    contents[_Ass] = [];
  } else if (output[_aSss] != null && output[_aSss][_i] != null) {
    contents[_Ass] = de_NetworkAclAssociationList(__getArrayIfSingleItem(output[_aSss][_i]), context);
  }
  if (output.entrySet === "") {
    contents[_Ent] = [];
  } else if (output[_eSnt] != null && output[_eSnt][_i] != null) {
    contents[_Ent] = de_NetworkAclEntryList(__getArrayIfSingleItem(output[_eSnt][_i]), context);
  }
  if (output[_def] != null) {
    contents[_IDs] = __parseBoolean(output[_def]);
  }
  if (output[_nAI] != null) {
    contents[_NAI] = __expectString(output[_nAI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkAclAssociation
 */
const de_NetworkAclAssociation = (output: any, context: __SerdeContext): NetworkAclAssociation => {
  const contents: any = {};
  if (output[_nAAI] != null) {
    contents[_NAAI] = __expectString(output[_nAAI]);
  }
  if (output[_nAI] != null) {
    contents[_NAI] = __expectString(output[_nAI]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkAclAssociationList
 */
const de_NetworkAclAssociationList = (output: any, context: __SerdeContext): NetworkAclAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkAclAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkAclEntry
 */
const de_NetworkAclEntry = (output: any, context: __SerdeContext): NetworkAclEntry => {
  const contents: any = {};
  if (output[_cB] != null) {
    contents[_CB] = __expectString(output[_cB]);
  }
  if (output[_e] != null) {
    contents[_Eg] = __parseBoolean(output[_e]);
  }
  if (output[_iTC] != null) {
    contents[_ITC] = de_IcmpTypeCode(output[_iTC], context);
  }
  if (output[_iCB] != null) {
    contents[_ICB] = __expectString(output[_iCB]);
  }
  if (output[_pRo] != null) {
    contents[_PR] = de_PortRange(output[_pRo], context);
  }
  if (output[_pr] != null) {
    contents[_P] = __expectString(output[_pr]);
  }
  if (output[_rA] != null) {
    contents[_RAu] = __expectString(output[_rA]);
  }
  if (output[_rN] != null) {
    contents[_RNu] = __strictParseInt32(output[_rN]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkAclEntryList
 */
const de_NetworkAclEntryList = (output: any, context: __SerdeContext): NetworkAclEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkAclEntry(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkAclList
 */
const de_NetworkAclList = (output: any, context: __SerdeContext): NetworkAcl[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkAcl(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkBandwidthGbps
 */
const de_NetworkBandwidthGbps = (output: any, context: __SerdeContext): NetworkBandwidthGbps => {
  const contents: any = {};
  if (output[_m] != null) {
    contents[_M] = __strictParseFloat(output[_m]) as number;
  }
  if (output[_ma] != null) {
    contents[_Ma] = __strictParseFloat(output[_ma]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkCardInfo
 */
const de_NetworkCardInfo = (output: any, context: __SerdeContext): NetworkCardInfo => {
  const contents: any = {};
  if (output[_nCI] != null) {
    contents[_NCI] = __strictParseInt32(output[_nCI]) as number;
  }
  if (output[_nP] != null) {
    contents[_NP] = __expectString(output[_nP]);
  }
  if (output[_mNI] != null) {
    contents[_MNI] = __strictParseInt32(output[_mNI]) as number;
  }
  if (output[_bBIG] != null) {
    contents[_BBIG] = __strictParseFloat(output[_bBIG]) as number;
  }
  if (output[_pBIG] != null) {
    contents[_PBIG] = __strictParseFloat(output[_pBIG]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkCardInfoList
 */
const de_NetworkCardInfoList = (output: any, context: __SerdeContext): NetworkCardInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkCardInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInfo
 */
const de_NetworkInfo = (output: any, context: __SerdeContext): NetworkInfo => {
  const contents: any = {};
  if (output[_nP] != null) {
    contents[_NP] = __expectString(output[_nP]);
  }
  if (output[_mNI] != null) {
    contents[_MNI] = __strictParseInt32(output[_mNI]) as number;
  }
  if (output[_mNC] != null) {
    contents[_MNC] = __strictParseInt32(output[_mNC]) as number;
  }
  if (output[_dNCI] != null) {
    contents[_DNCI] = __strictParseInt32(output[_dNCI]) as number;
  }
  if (output.networkCards === "") {
    contents[_NC] = [];
  } else if (output[_nC] != null && output[_nC][_i] != null) {
    contents[_NC] = de_NetworkCardInfoList(__getArrayIfSingleItem(output[_nC][_i]), context);
  }
  if (output[_iAPI] != null) {
    contents[_IAPI] = __strictParseInt32(output[_iAPI]) as number;
  }
  if (output[_iAPIp] != null) {
    contents[_IAPIp] = __strictParseInt32(output[_iAPIp]) as number;
  }
  if (output[_iSpv] != null) {
    contents[_ISpv] = __parseBoolean(output[_iSpv]);
  }
  if (output[_eSna] != null) {
    contents[_ESn] = __expectString(output[_eSna]);
  }
  if (output[_eSf] != null) {
    contents[_ESf] = __parseBoolean(output[_eSf]);
  }
  if (output[_eIf] != null) {
    contents[_EIf] = de_EfaInfo(output[_eIf], context);
  }
  if (output[_eITSn] != null) {
    contents[_EITS] = __parseBoolean(output[_eITSn]);
  }
  if (output[_eSSn] != null) {
    contents[_ESSn] = __parseBoolean(output[_eSSn]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInsightsAccessScope
 */
const de_NetworkInsightsAccessScope = (output: any, context: __SerdeContext): NetworkInsightsAccessScope => {
  const contents: any = {};
  if (output[_nIASI] != null) {
    contents[_NIASI] = __expectString(output[_nIASI]);
  }
  if (output[_nIASA] != null) {
    contents[_NIASAe] = __expectString(output[_nIASA]);
  }
  if (output[_cDre] != null) {
    contents[_CDrea] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cDre]));
  }
  if (output[_uDp] != null) {
    contents[_UDp] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_uDp]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInsightsAccessScopeAnalysis
 */
const de_NetworkInsightsAccessScopeAnalysis = (
  output: any,
  context: __SerdeContext
): NetworkInsightsAccessScopeAnalysis => {
  const contents: any = {};
  if (output[_nIASAI] != null) {
    contents[_NIASAI] = __expectString(output[_nIASAI]);
  }
  if (output[_nIASAA] != null) {
    contents[_NIASAA] = __expectString(output[_nIASAA]);
  }
  if (output[_nIASI] != null) {
    contents[_NIASI] = __expectString(output[_nIASI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output[_wM] != null) {
    contents[_WM] = __expectString(output[_wM]);
  }
  if (output[_sD] != null) {
    contents[_SDt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sD]));
  }
  if (output[_eD] != null) {
    contents[_ED] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eD]));
  }
  if (output[_fFi] != null) {
    contents[_FFi] = __expectString(output[_fFi]);
  }
  if (output[_aEC] != null) {
    contents[_AEC] = __strictParseInt32(output[_aEC]) as number;
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInsightsAccessScopeAnalysisList
 */
const de_NetworkInsightsAccessScopeAnalysisList = (
  output: any,
  context: __SerdeContext
): NetworkInsightsAccessScopeAnalysis[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInsightsAccessScopeAnalysis(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInsightsAccessScopeContent
 */
const de_NetworkInsightsAccessScopeContent = (
  output: any,
  context: __SerdeContext
): NetworkInsightsAccessScopeContent => {
  const contents: any = {};
  if (output[_nIASI] != null) {
    contents[_NIASI] = __expectString(output[_nIASI]);
  }
  if (output.matchPathSet === "") {
    contents[_MP] = [];
  } else if (output[_mPSa] != null && output[_mPSa][_i] != null) {
    contents[_MP] = de_AccessScopePathList(__getArrayIfSingleItem(output[_mPSa][_i]), context);
  }
  if (output.excludePathSet === "") {
    contents[_EP] = [];
  } else if (output[_ePS] != null && output[_ePS][_i] != null) {
    contents[_EP] = de_AccessScopePathList(__getArrayIfSingleItem(output[_ePS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInsightsAccessScopeList
 */
const de_NetworkInsightsAccessScopeList = (output: any, context: __SerdeContext): NetworkInsightsAccessScope[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInsightsAccessScope(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInsightsAnalysis
 */
const de_NetworkInsightsAnalysis = (output: any, context: __SerdeContext): NetworkInsightsAnalysis => {
  const contents: any = {};
  if (output[_nIAI] != null) {
    contents[_NIAI] = __expectString(output[_nIAI]);
  }
  if (output[_nIAA] != null) {
    contents[_NIAA] = __expectString(output[_nIAA]);
  }
  if (output[_nIPI] != null) {
    contents[_NIPI] = __expectString(output[_nIPI]);
  }
  if (output.additionalAccountSet === "") {
    contents[_AAd] = [];
  } else if (output[_aASd] != null && output[_aASd][_i] != null) {
    contents[_AAd] = de_ValueStringList(__getArrayIfSingleItem(output[_aASd][_i]), context);
  }
  if (output.filterInArnSet === "") {
    contents[_FIA] = [];
  } else if (output[_fIAS] != null && output[_fIAS][_i] != null) {
    contents[_FIA] = de_ArnList(__getArrayIfSingleItem(output[_fIAS][_i]), context);
  }
  if (output[_sD] != null) {
    contents[_SDt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sD]));
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output[_wM] != null) {
    contents[_WM] = __expectString(output[_wM]);
  }
  if (output[_nPF] != null) {
    contents[_NPF] = __parseBoolean(output[_nPF]);
  }
  if (output.forwardPathComponentSet === "") {
    contents[_FPC] = [];
  } else if (output[_fPCS] != null && output[_fPCS][_i] != null) {
    contents[_FPC] = de_PathComponentList(__getArrayIfSingleItem(output[_fPCS][_i]), context);
  }
  if (output.returnPathComponentSet === "") {
    contents[_RPC] = [];
  } else if (output[_rPCS] != null && output[_rPCS][_i] != null) {
    contents[_RPC] = de_PathComponentList(__getArrayIfSingleItem(output[_rPCS][_i]), context);
  }
  if (output.explanationSet === "") {
    contents[_Ex] = [];
  } else if (output[_eSx] != null && output[_eSx][_i] != null) {
    contents[_Ex] = de_ExplanationList(__getArrayIfSingleItem(output[_eSx][_i]), context);
  }
  if (output.alternatePathHintSet === "") {
    contents[_APH] = [];
  } else if (output[_aPHS] != null && output[_aPHS][_i] != null) {
    contents[_APH] = de_AlternatePathHintList(__getArrayIfSingleItem(output[_aPHS][_i]), context);
  }
  if (output.suggestedAccountSet === "") {
    contents[_SAu] = [];
  } else if (output[_sASu] != null && output[_sASu][_i] != null) {
    contents[_SAu] = de_ValueStringList(__getArrayIfSingleItem(output[_sASu][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInsightsAnalysisList
 */
const de_NetworkInsightsAnalysisList = (output: any, context: __SerdeContext): NetworkInsightsAnalysis[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInsightsAnalysis(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInsightsPath
 */
const de_NetworkInsightsPath = (output: any, context: __SerdeContext): NetworkInsightsPath => {
  const contents: any = {};
  if (output[_nIPI] != null) {
    contents[_NIPI] = __expectString(output[_nIPI]);
  }
  if (output[_nIPA] != null) {
    contents[_NIPA] = __expectString(output[_nIPA]);
  }
  if (output[_cDre] != null) {
    contents[_CDrea] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cDre]));
  }
  if (output[_s] != null) {
    contents[_S] = __expectString(output[_s]);
  }
  if (output[_d] != null) {
    contents[_D] = __expectString(output[_d]);
  }
  if (output[_sA] != null) {
    contents[_SAour] = __expectString(output[_sA]);
  }
  if (output[_dA] != null) {
    contents[_DAesti] = __expectString(output[_dA]);
  }
  if (output[_sIo] != null) {
    contents[_SIo] = __expectString(output[_sIo]);
  }
  if (output[_dIes] != null) {
    contents[_DIest] = __expectString(output[_dIes]);
  }
  if (output[_pr] != null) {
    contents[_P] = __expectString(output[_pr]);
  }
  if (output[_dP] != null) {
    contents[_DP] = __strictParseInt32(output[_dP]) as number;
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_fAS] != null) {
    contents[_FAS] = de_PathFilter(output[_fAS], context);
  }
  if (output[_fAD] != null) {
    contents[_FAD] = de_PathFilter(output[_fAD], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInsightsPathList
 */
const de_NetworkInsightsPathList = (output: any, context: __SerdeContext): NetworkInsightsPath[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInsightsPath(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInterface
 */
const de_NetworkInterface = (output: any, context: __SerdeContext): NetworkInterface => {
  const contents: any = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_NetworkInterfaceAssociation(output[_ass], context);
  }
  if (output[_at] != null) {
    contents[_Att] = de_NetworkInterfaceAttachment(output[_at], context);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_cTC] != null) {
    contents[_CTC] = de_ConnectionTrackingConfiguration(output[_cTC], context);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierList(__getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output[_iTnt] != null) {
    contents[_ITn] = __expectString(output[_iTnt]);
  }
  if (output.ipv6AddressesSet === "") {
    contents[_IA] = [];
  } else if (output[_iASp] != null && output[_iASp][_i] != null) {
    contents[_IA] = de_NetworkInterfaceIpv6AddressesList(__getArrayIfSingleItem(output[_iASp][_i]), context);
  }
  if (output[_mAa] != null) {
    contents[_MAa] = __expectString(output[_mAa]);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = __expectString(output[_pDN]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = __expectString(output[_pIA]);
  }
  if (output.privateIpAddressesSet === "") {
    contents[_PIA] = [];
  } else if (output[_pIAS] != null && output[_pIAS][_i] != null) {
    contents[_PIA] = de_NetworkInterfacePrivateIpAddressList(__getArrayIfSingleItem(output[_pIAS][_i]), context);
  }
  if (output.ipv4PrefixSet === "") {
    contents[_IPp] = [];
  } else if (output[_iPSpv] != null && output[_iPSpv][_i] != null) {
    contents[_IPp] = de_Ipv4PrefixesList(__getArrayIfSingleItem(output[_iPSpv][_i]), context);
  }
  if (output.ipv6PrefixSet === "") {
    contents[_IP] = [];
  } else if (output[_iPSpvr] != null && output[_iPSpvr][_i] != null) {
    contents[_IP] = de_Ipv6PrefixesList(__getArrayIfSingleItem(output[_iPSpvr][_i]), context);
  }
  if (output[_rIeq] != null) {
    contents[_RIeq] = __expectString(output[_rIeq]);
  }
  if (output[_rM] != null) {
    contents[_RMe] = __parseBoolean(output[_rM]);
  }
  if (output[_sDC] != null) {
    contents[_SDC] = __parseBoolean(output[_sDC]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output.tagSet === "") {
    contents[_TSag] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_TSag] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_dAIT] != null) {
    contents[_DAIT] = __parseBoolean(output[_dAIT]);
  }
  if (output[_iN] != null) {
    contents[_IN] = __parseBoolean(output[_iN]);
  }
  if (output[_iApv] != null) {
    contents[_IApv] = __expectString(output[_iApv]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfaceAssociation
 */
const de_NetworkInterfaceAssociation = (output: any, context: __SerdeContext): NetworkInterfaceAssociation => {
  const contents: any = {};
  if (output[_aI] != null) {
    contents[_AIl] = __expectString(output[_aI]);
  }
  if (output[_aIs] != null) {
    contents[_AIss] = __expectString(output[_aIs]);
  }
  if (output[_iOIp] != null) {
    contents[_IOI] = __expectString(output[_iOIp]);
  }
  if (output[_pDNu] != null) {
    contents[_PDNu] = __expectString(output[_pDNu]);
  }
  if (output[_pI] != null) {
    contents[_PI] = __expectString(output[_pI]);
  }
  if (output[_cOI] != null) {
    contents[_COI] = __expectString(output[_cOI]);
  }
  if (output[_cI] != null) {
    contents[_CIa] = __expectString(output[_cI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfaceAttachment
 */
const de_NetworkInterfaceAttachment = (output: any, context: __SerdeContext): NetworkInterfaceAttachment => {
  const contents: any = {};
  if (output[_aTt] != null) {
    contents[_ATtt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_aTt]));
  }
  if (output[_aIt] != null) {
    contents[_AIt] = __expectString(output[_aIt]);
  }
  if (output[_dOT] != null) {
    contents[_DOT] = __parseBoolean(output[_dOT]);
  }
  if (output[_dIe] != null) {
    contents[_DIev] = __strictParseInt32(output[_dIe]) as number;
  }
  if (output[_nCI] != null) {
    contents[_NCI] = __strictParseInt32(output[_nCI]) as number;
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_iOIn] != null) {
    contents[_IOIn] = __expectString(output[_iOIn]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_eSS] != null) {
    contents[_ESS] = de_AttachmentEnaSrdSpecification(output[_eSS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfaceCount
 */
const de_NetworkInterfaceCount = (output: any, context: __SerdeContext): NetworkInterfaceCount => {
  const contents: any = {};
  if (output[_m] != null) {
    contents[_M] = __strictParseInt32(output[_m]) as number;
  }
  if (output[_ma] != null) {
    contents[_Ma] = __strictParseInt32(output[_ma]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfaceIdSet
 */
const de_NetworkInterfaceIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2NetworkInterfaceIpv6Address
 */
const de_NetworkInterfaceIpv6Address = (output: any, context: __SerdeContext): NetworkInterfaceIpv6Address => {
  const contents: any = {};
  if (output[_iApv] != null) {
    contents[_IApv] = __expectString(output[_iApv]);
  }
  if (output[_iPI] != null) {
    contents[_IPIs] = __parseBoolean(output[_iPI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfaceIpv6AddressesList
 */
const de_NetworkInterfaceIpv6AddressesList = (output: any, context: __SerdeContext): NetworkInterfaceIpv6Address[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInterfaceIpv6Address(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInterfaceList
 */
const de_NetworkInterfaceList = (output: any, context: __SerdeContext): NetworkInterface[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInterface(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInterfacePermission
 */
const de_NetworkInterfacePermission = (output: any, context: __SerdeContext): NetworkInterfacePermission => {
  const contents: any = {};
  if (output[_nIPIe] != null) {
    contents[_NIPIe] = __expectString(output[_nIPIe]);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_aAI] != null) {
    contents[_AAI] = __expectString(output[_aAI]);
  }
  if (output[_aSw] != null) {
    contents[_ASw] = __expectString(output[_aSw]);
  }
  if (output[_per] != null) {
    contents[_Pe] = __expectString(output[_per]);
  }
  if (output[_pSe] != null) {
    contents[_PSer] = de_NetworkInterfacePermissionState(output[_pSe], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfacePermissionList
 */
const de_NetworkInterfacePermissionList = (output: any, context: __SerdeContext): NetworkInterfacePermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInterfacePermission(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkInterfacePermissionState
 */
const de_NetworkInterfacePermissionState = (output: any, context: __SerdeContext): NetworkInterfacePermissionState => {
  const contents: any = {};
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfacePrivateIpAddress
 */
const de_NetworkInterfacePrivateIpAddress = (
  output: any,
  context: __SerdeContext
): NetworkInterfacePrivateIpAddress => {
  const contents: any = {};
  if (output[_ass] != null) {
    contents[_Asso] = de_NetworkInterfaceAssociation(output[_ass], context);
  }
  if (output[_prim] != null) {
    contents[_Prim] = __parseBoolean(output[_prim]);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = __expectString(output[_pDN]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = __expectString(output[_pIA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2NetworkInterfacePrivateIpAddressList
 */
const de_NetworkInterfacePrivateIpAddressList = (
  output: any,
  context: __SerdeContext
): NetworkInterfacePrivateIpAddress[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_NetworkInterfacePrivateIpAddress(entry, context);
    });
};

/**
 * deserializeAws_ec2NetworkNodesList
 */
const de_NetworkNodesList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2NitroTpmInfo
 */
const de_NitroTpmInfo = (output: any, context: __SerdeContext): NitroTpmInfo => {
  const contents: any = {};
  if (output.supportedVersions === "") {
    contents[_SVu] = [];
  } else if (output[_sVu] != null && output[_sVu][_i] != null) {
    contents[_SVu] = de_NitroTpmSupportedVersionsList(__getArrayIfSingleItem(output[_sVu][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2NitroTpmSupportedVersionsList
 */
const de_NitroTpmSupportedVersionsList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2OccurrenceDaySet
 */
const de_OccurrenceDaySet = (output: any, context: __SerdeContext): number[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __strictParseInt32(entry) as number;
    });
};

/**
 * deserializeAws_ec2OidcOptions
 */
const de_OidcOptions = (output: any, context: __SerdeContext): OidcOptions => {
  const contents: any = {};
  if (output[_is] != null) {
    contents[_I] = __expectString(output[_is]);
  }
  if (output[_aE] != null) {
    contents[_AE] = __expectString(output[_aE]);
  }
  if (output[_tEo] != null) {
    contents[_TEo] = __expectString(output[_tEo]);
  }
  if (output[_uIE] != null) {
    contents[_UIE] = __expectString(output[_uIE]);
  }
  if (output[_cIli] != null) {
    contents[_CIl] = __expectString(output[_cIli]);
  }
  if (output[_cSl] != null) {
    contents[_CSl] = __expectString(output[_cSl]);
  }
  if (output[_sc] != null) {
    contents[_Sc] = __expectString(output[_sc]);
  }
  return contents;
};

/**
 * deserializeAws_ec2OnDemandOptions
 */
const de_OnDemandOptions = (output: any, context: __SerdeContext): OnDemandOptions => {
  const contents: any = {};
  if (output[_aSl] != null) {
    contents[_AS] = __expectString(output[_aSl]);
  }
  if (output[_cRO] != null) {
    contents[_CRO] = de_CapacityReservationOptions(output[_cRO], context);
  }
  if (output[_sITi] != null) {
    contents[_SITi] = __parseBoolean(output[_sITi]);
  }
  if (output[_sAZ] != null) {
    contents[_SAZ] = __parseBoolean(output[_sAZ]);
  }
  if (output[_mTC] != null) {
    contents[_MTC] = __strictParseInt32(output[_mTC]) as number;
  }
  if (output[_mTP] != null) {
    contents[_MTP] = __expectString(output[_mTP]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PacketHeaderStatement
 */
const de_PacketHeaderStatement = (output: any, context: __SerdeContext): PacketHeaderStatement => {
  const contents: any = {};
  if (output.sourceAddressSet === "") {
    contents[_SAo] = [];
  } else if (output[_sAS] != null && output[_sAS][_i] != null) {
    contents[_SAo] = de_ValueStringList(__getArrayIfSingleItem(output[_sAS][_i]), context);
  }
  if (output.destinationAddressSet === "") {
    contents[_DAes] = [];
  } else if (output[_dAS] != null && output[_dAS][_i] != null) {
    contents[_DAes] = de_ValueStringList(__getArrayIfSingleItem(output[_dAS][_i]), context);
  }
  if (output.sourcePortSet === "") {
    contents[_SPo] = [];
  } else if (output[_sPS] != null && output[_sPS][_i] != null) {
    contents[_SPo] = de_ValueStringList(__getArrayIfSingleItem(output[_sPS][_i]), context);
  }
  if (output.destinationPortSet === "") {
    contents[_DPe] = [];
  } else if (output[_dPS] != null && output[_dPS][_i] != null) {
    contents[_DPe] = de_ValueStringList(__getArrayIfSingleItem(output[_dPS][_i]), context);
  }
  if (output.sourcePrefixListSet === "") {
    contents[_SPL] = [];
  } else if (output[_sPLS] != null && output[_sPLS][_i] != null) {
    contents[_SPL] = de_ValueStringList(__getArrayIfSingleItem(output[_sPLS][_i]), context);
  }
  if (output.destinationPrefixListSet === "") {
    contents[_DPLe] = [];
  } else if (output[_dPLS] != null && output[_dPLS][_i] != null) {
    contents[_DPLe] = de_ValueStringList(__getArrayIfSingleItem(output[_dPLS][_i]), context);
  }
  if (output.protocolSet === "") {
    contents[_Pro] = [];
  } else if (output[_pSro] != null && output[_pSro][_i] != null) {
    contents[_Pro] = de_ProtocolList(__getArrayIfSingleItem(output[_pSro][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PathComponent
 */
const de_PathComponent = (output: any, context: __SerdeContext): PathComponent => {
  const contents: any = {};
  if (output[_sNe] != null) {
    contents[_SNeq] = __strictParseInt32(output[_sNe]) as number;
  }
  if (output[_aRc] != null) {
    contents[_ARcl] = de_AnalysisAclRule(output[_aRc], context);
  }
  if (output[_aTtt] != null) {
    contents[_ATtta] = de_AnalysisComponent(output[_aTtt], context);
  }
  if (output[_c] != null) {
    contents[_Com] = de_AnalysisComponent(output[_c], context);
  }
  if (output[_dV] != null) {
    contents[_DVest] = de_AnalysisComponent(output[_dV], context);
  }
  if (output[_oH] != null) {
    contents[_OH] = de_AnalysisPacketHeader(output[_oH], context);
  }
  if (output[_iHn] != null) {
    contents[_IHn] = de_AnalysisPacketHeader(output[_iHn], context);
  }
  if (output[_rTR] != null) {
    contents[_RTR] = de_AnalysisRouteTableRoute(output[_rTR], context);
  }
  if (output[_sGR] != null) {
    contents[_SGRe] = de_AnalysisSecurityGroupRule(output[_sGR], context);
  }
  if (output[_sV] != null) {
    contents[_SVo] = de_AnalysisComponent(output[_sV], context);
  }
  if (output[_su] != null) {
    contents[_Su] = de_AnalysisComponent(output[_su], context);
  }
  if (output[_vp] != null) {
    contents[_Vp] = de_AnalysisComponent(output[_vp], context);
  }
  if (output.additionalDetailSet === "") {
    contents[_ADd] = [];
  } else if (output[_aDS] != null && output[_aDS][_i] != null) {
    contents[_ADd] = de_AdditionalDetailList(__getArrayIfSingleItem(output[_aDS][_i]), context);
  }
  if (output[_tG] != null) {
    contents[_TGr] = de_AnalysisComponent(output[_tG], context);
  }
  if (output[_tGRTR] != null) {
    contents[_TGRTR] = de_TransitGatewayRouteTableRoute(output[_tGRTR], context);
  }
  if (output.explanationSet === "") {
    contents[_Ex] = [];
  } else if (output[_eSx] != null && output[_eSx][_i] != null) {
    contents[_Ex] = de_ExplanationList(__getArrayIfSingleItem(output[_eSx][_i]), context);
  }
  if (output[_eLBL] != null) {
    contents[_ELBL] = de_AnalysisComponent(output[_eLBL], context);
  }
  if (output[_fSR] != null) {
    contents[_FSRi] = de_FirewallStatelessRule(output[_fSR], context);
  }
  if (output[_fSRi] != null) {
    contents[_FSRir] = de_FirewallStatefulRule(output[_fSRi], context);
  }
  if (output[_sN] != null) {
    contents[_SNe] = __expectString(output[_sN]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PathComponentList
 */
const de_PathComponentList = (output: any, context: __SerdeContext): PathComponent[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PathComponent(entry, context);
    });
};

/**
 * deserializeAws_ec2PathFilter
 */
const de_PathFilter = (output: any, context: __SerdeContext): PathFilter => {
  const contents: any = {};
  if (output[_sAo] != null) {
    contents[_SAou] = __expectString(output[_sAo]);
  }
  if (output[_sPR] != null) {
    contents[_SPR] = de_FilterPortRange(output[_sPR], context);
  }
  if (output[_dAe] != null) {
    contents[_DAest] = __expectString(output[_dAe]);
  }
  if (output[_dPR] != null) {
    contents[_DPR] = de_FilterPortRange(output[_dPR], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PathStatement
 */
const de_PathStatement = (output: any, context: __SerdeContext): PathStatement => {
  const contents: any = {};
  if (output[_pHS] != null) {
    contents[_PHS] = de_PacketHeaderStatement(output[_pHS], context);
  }
  if (output[_rSes] != null) {
    contents[_RSe] = de_ResourceStatement(output[_rSes], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PciId
 */
const de_PciId = (output: any, context: __SerdeContext): PciId => {
  const contents: any = {};
  if (output[_DIevi] != null) {
    contents[_DIevi] = __expectString(output[_DIevi]);
  }
  if (output[_VIe] != null) {
    contents[_VIe] = __expectString(output[_VIe]);
  }
  if (output[_SIubs] != null) {
    contents[_SIubs] = __expectString(output[_SIubs]);
  }
  if (output[_SVI] != null) {
    contents[_SVI] = __expectString(output[_SVI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PeeringAttachmentStatus
 */
const de_PeeringAttachmentStatus = (output: any, context: __SerdeContext): PeeringAttachmentStatus => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PeeringConnectionOptions
 */
const de_PeeringConnectionOptions = (output: any, context: __SerdeContext): PeeringConnectionOptions => {
  const contents: any = {};
  if (output[_aDRFRV] != null) {
    contents[_ADRFRV] = __parseBoolean(output[_aDRFRV]);
  }
  if (output[_aEFLCLTRV] != null) {
    contents[_AEFLCLTRV] = __parseBoolean(output[_aEFLCLTRV]);
  }
  if (output[_aEFLVTRCL] != null) {
    contents[_AEFLVTRCL] = __parseBoolean(output[_aEFLVTRCL]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PeeringTgwInfo
 */
const de_PeeringTgwInfo = (output: any, context: __SerdeContext): PeeringTgwInfo => {
  const contents: any = {};
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  if (output[_cNIo] != null) {
    contents[_CNIor] = __expectString(output[_cNIo]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_reg] != null) {
    contents[_Regi] = __expectString(output[_reg]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Phase1DHGroupNumbersList
 */
const de_Phase1DHGroupNumbersList = (output: any, context: __SerdeContext): Phase1DHGroupNumbersListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Phase1DHGroupNumbersListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2Phase1DHGroupNumbersListValue
 */
const de_Phase1DHGroupNumbersListValue = (output: any, context: __SerdeContext): Phase1DHGroupNumbersListValue => {
  const contents: any = {};
  if (output[_v] != null) {
    contents[_Va] = __strictParseInt32(output[_v]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2Phase1EncryptionAlgorithmsList
 */
const de_Phase1EncryptionAlgorithmsList = (
  output: any,
  context: __SerdeContext
): Phase1EncryptionAlgorithmsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Phase1EncryptionAlgorithmsListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2Phase1EncryptionAlgorithmsListValue
 */
const de_Phase1EncryptionAlgorithmsListValue = (
  output: any,
  context: __SerdeContext
): Phase1EncryptionAlgorithmsListValue => {
  const contents: any = {};
  if (output[_v] != null) {
    contents[_Va] = __expectString(output[_v]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Phase1IntegrityAlgorithmsList
 */
const de_Phase1IntegrityAlgorithmsList = (
  output: any,
  context: __SerdeContext
): Phase1IntegrityAlgorithmsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Phase1IntegrityAlgorithmsListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2Phase1IntegrityAlgorithmsListValue
 */
const de_Phase1IntegrityAlgorithmsListValue = (
  output: any,
  context: __SerdeContext
): Phase1IntegrityAlgorithmsListValue => {
  const contents: any = {};
  if (output[_v] != null) {
    contents[_Va] = __expectString(output[_v]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Phase2DHGroupNumbersList
 */
const de_Phase2DHGroupNumbersList = (output: any, context: __SerdeContext): Phase2DHGroupNumbersListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Phase2DHGroupNumbersListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2Phase2DHGroupNumbersListValue
 */
const de_Phase2DHGroupNumbersListValue = (output: any, context: __SerdeContext): Phase2DHGroupNumbersListValue => {
  const contents: any = {};
  if (output[_v] != null) {
    contents[_Va] = __strictParseInt32(output[_v]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2Phase2EncryptionAlgorithmsList
 */
const de_Phase2EncryptionAlgorithmsList = (
  output: any,
  context: __SerdeContext
): Phase2EncryptionAlgorithmsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Phase2EncryptionAlgorithmsListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2Phase2EncryptionAlgorithmsListValue
 */
const de_Phase2EncryptionAlgorithmsListValue = (
  output: any,
  context: __SerdeContext
): Phase2EncryptionAlgorithmsListValue => {
  const contents: any = {};
  if (output[_v] != null) {
    contents[_Va] = __expectString(output[_v]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Phase2IntegrityAlgorithmsList
 */
const de_Phase2IntegrityAlgorithmsList = (
  output: any,
  context: __SerdeContext
): Phase2IntegrityAlgorithmsListValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Phase2IntegrityAlgorithmsListValue(entry, context);
    });
};

/**
 * deserializeAws_ec2Phase2IntegrityAlgorithmsListValue
 */
const de_Phase2IntegrityAlgorithmsListValue = (
  output: any,
  context: __SerdeContext
): Phase2IntegrityAlgorithmsListValue => {
  const contents: any = {};
  if (output[_v] != null) {
    contents[_Va] = __expectString(output[_v]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Placement
 */
const de_Placement = (output: any, context: __SerdeContext): Placement => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_af] != null) {
    contents[_Af] = __expectString(output[_af]);
  }
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  if (output[_pN] != null) {
    contents[_PN] = __strictParseInt32(output[_pN]) as number;
  }
  if (output[_hI] != null) {
    contents[_HIo] = __expectString(output[_hI]);
  }
  if (output[_t] != null) {
    contents[_Te] = __expectString(output[_t]);
  }
  if (output[_sDp] != null) {
    contents[_SD] = __expectString(output[_sDp]);
  }
  if (output[_hRGA] != null) {
    contents[_HRGA] = __expectString(output[_hRGA]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PlacementGroup
 */
const de_PlacementGroup = (output: any, context: __SerdeContext): PlacementGroup => {
  const contents: any = {};
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_str] != null) {
    contents[_Str] = __expectString(output[_str]);
  }
  if (output[_pCa] != null) {
    contents[_PCa] = __strictParseInt32(output[_pCa]) as number;
  }
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_gA] != null) {
    contents[_GA] = __expectString(output[_gA]);
  }
  if (output[_sLp] != null) {
    contents[_SL] = __expectString(output[_sLp]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PlacementGroupInfo
 */
const de_PlacementGroupInfo = (output: any, context: __SerdeContext): PlacementGroupInfo => {
  const contents: any = {};
  if (output.supportedStrategies === "") {
    contents[_SSu] = [];
  } else if (output[_sSup] != null && output[_sSup][_i] != null) {
    contents[_SSu] = de_PlacementGroupStrategyList(__getArrayIfSingleItem(output[_sSup][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PlacementGroupList
 */
const de_PlacementGroupList = (output: any, context: __SerdeContext): PlacementGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PlacementGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2PlacementGroupStrategyList
 */
const de_PlacementGroupStrategyList = (output: any, context: __SerdeContext): PlacementGroupStrategy[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2PlacementResponse
 */
const de_PlacementResponse = (output: any, context: __SerdeContext): PlacementResponse => {
  const contents: any = {};
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PoolCidrBlock
 */
const de_PoolCidrBlock = (output: any, context: __SerdeContext): PoolCidrBlock => {
  const contents: any = {};
  if (output[_pCB] != null) {
    contents[_C] = __expectString(output[_pCB]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PoolCidrBlocksSet
 */
const de_PoolCidrBlocksSet = (output: any, context: __SerdeContext): PoolCidrBlock[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PoolCidrBlock(entry, context);
    });
};

/**
 * deserializeAws_ec2PortRange
 */
const de_PortRange = (output: any, context: __SerdeContext): PortRange => {
  const contents: any = {};
  if (output[_fr] != null) {
    contents[_Fr] = __strictParseInt32(output[_fr]) as number;
  }
  if (output[_to] != null) {
    contents[_To] = __strictParseInt32(output[_to]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2PortRangeList
 */
const de_PortRangeList = (output: any, context: __SerdeContext): PortRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PortRange(entry, context);
    });
};

/**
 * deserializeAws_ec2PrefixList
 */
const de_PrefixList = (output: any, context: __SerdeContext): PrefixList => {
  const contents: any = {};
  if (output.cidrSet === "") {
    contents[_Ci] = [];
  } else if (output[_cS] != null && output[_cS][_i] != null) {
    contents[_Ci] = de_ValueStringList(__getArrayIfSingleItem(output[_cS][_i]), context);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = __expectString(output[_pLI]);
  }
  if (output[_pLN] != null) {
    contents[_PLN] = __expectString(output[_pLN]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrefixListAssociation
 */
const de_PrefixListAssociation = (output: any, context: __SerdeContext): PrefixListAssociation => {
  const contents: any = {};
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rO] != null) {
    contents[_RO] = __expectString(output[_rO]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrefixListAssociationSet
 */
const de_PrefixListAssociationSet = (output: any, context: __SerdeContext): PrefixListAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrefixListAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2PrefixListEntry
 */
const de_PrefixListEntry = (output: any, context: __SerdeContext): PrefixListEntry => {
  const contents: any = {};
  if (output[_ci] != null) {
    contents[_C] = __expectString(output[_ci]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrefixListEntrySet
 */
const de_PrefixListEntrySet = (output: any, context: __SerdeContext): PrefixListEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrefixListEntry(entry, context);
    });
};

/**
 * deserializeAws_ec2PrefixListId
 */
const de_PrefixListId = (output: any, context: __SerdeContext): PrefixListId => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = __expectString(output[_pLI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrefixListIdList
 */
const de_PrefixListIdList = (output: any, context: __SerdeContext): PrefixListId[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrefixListId(entry, context);
    });
};

/**
 * deserializeAws_ec2PrefixListIdSet
 */
const de_PrefixListIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2PrefixListSet
 */
const de_PrefixListSet = (output: any, context: __SerdeContext): PrefixList[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrefixList(entry, context);
    });
};

/**
 * deserializeAws_ec2PriceSchedule
 */
const de_PriceSchedule = (output: any, context: __SerdeContext): PriceSchedule => {
  const contents: any = {};
  if (output[_act] != null) {
    contents[_Act] = __parseBoolean(output[_act]);
  }
  if (output[_cC] != null) {
    contents[_CCu] = __expectString(output[_cC]);
  }
  if (output[_pric] != null) {
    contents[_Pric] = __strictParseFloat(output[_pric]) as number;
  }
  if (output[_te] != null) {
    contents[_Ter] = __strictParseLong(output[_te]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2PriceScheduleList
 */
const de_PriceScheduleList = (output: any, context: __SerdeContext): PriceSchedule[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PriceSchedule(entry, context);
    });
};

/**
 * deserializeAws_ec2PricingDetail
 */
const de_PricingDetail = (output: any, context: __SerdeContext): PricingDetail => {
  const contents: any = {};
  if (output[_cou] != null) {
    contents[_Cou] = __strictParseInt32(output[_cou]) as number;
  }
  if (output[_pric] != null) {
    contents[_Pric] = __strictParseFloat(output[_pric]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2PricingDetailsList
 */
const de_PricingDetailsList = (output: any, context: __SerdeContext): PricingDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PricingDetail(entry, context);
    });
};

/**
 * deserializeAws_ec2PrincipalIdFormat
 */
const de_PrincipalIdFormat = (output: any, context: __SerdeContext): PrincipalIdFormat => {
  const contents: any = {};
  if (output[_ar] != null) {
    contents[_Ar] = __expectString(output[_ar]);
  }
  if (output.statusSet === "") {
    contents[_Status] = [];
  } else if (output[_sSt] != null && output[_sSt][_i] != null) {
    contents[_Status] = de_IdFormatList(__getArrayIfSingleItem(output[_sSt][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrincipalIdFormatList
 */
const de_PrincipalIdFormatList = (output: any, context: __SerdeContext): PrincipalIdFormat[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrincipalIdFormat(entry, context);
    });
};

/**
 * deserializeAws_ec2PrivateDnsDetails
 */
const de_PrivateDnsDetails = (output: any, context: __SerdeContext): PrivateDnsDetails => {
  const contents: any = {};
  if (output[_pDN] != null) {
    contents[_PDN] = __expectString(output[_pDN]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrivateDnsDetailsSet
 */
const de_PrivateDnsDetailsSet = (output: any, context: __SerdeContext): PrivateDnsDetails[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrivateDnsDetails(entry, context);
    });
};

/**
 * deserializeAws_ec2PrivateDnsNameConfiguration
 */
const de_PrivateDnsNameConfiguration = (output: any, context: __SerdeContext): PrivateDnsNameConfiguration => {
  const contents: any = {};
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  if (output[_v] != null) {
    contents[_Va] = __expectString(output[_v]);
  }
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrivateDnsNameOptionsOnLaunch
 */
const de_PrivateDnsNameOptionsOnLaunch = (output: any, context: __SerdeContext): PrivateDnsNameOptionsOnLaunch => {
  const contents: any = {};
  if (output[_hTo] != null) {
    contents[_HTo] = __expectString(output[_hTo]);
  }
  if (output[_eRNDAR] != null) {
    contents[_ERNDAR] = __parseBoolean(output[_eRNDAR]);
  }
  if (output[_eRNDAAAAR] != null) {
    contents[_ERNDAAAAR] = __parseBoolean(output[_eRNDAAAAR]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrivateDnsNameOptionsResponse
 */
const de_PrivateDnsNameOptionsResponse = (output: any, context: __SerdeContext): PrivateDnsNameOptionsResponse => {
  const contents: any = {};
  if (output[_hTo] != null) {
    contents[_HTo] = __expectString(output[_hTo]);
  }
  if (output[_eRNDAR] != null) {
    contents[_ERNDAR] = __parseBoolean(output[_eRNDAR]);
  }
  if (output[_eRNDAAAAR] != null) {
    contents[_ERNDAAAAR] = __parseBoolean(output[_eRNDAAAAR]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrivateIpAddressSpecification
 */
const de_PrivateIpAddressSpecification = (output: any, context: __SerdeContext): PrivateIpAddressSpecification => {
  const contents: any = {};
  if (output[_prim] != null) {
    contents[_Prim] = __parseBoolean(output[_prim]);
  }
  if (output[_pIA] != null) {
    contents[_PIAr] = __expectString(output[_pIA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PrivateIpAddressSpecificationList
 */
const de_PrivateIpAddressSpecificationList = (
  output: any,
  context: __SerdeContext
): PrivateIpAddressSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PrivateIpAddressSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2ProcessorInfo
 */
const de_ProcessorInfo = (output: any, context: __SerdeContext): ProcessorInfo => {
  const contents: any = {};
  if (output.supportedArchitectures === "") {
    contents[_SAup] = [];
  } else if (output[_sAu] != null && output[_sAu][_i] != null) {
    contents[_SAup] = de_ArchitectureTypeList(__getArrayIfSingleItem(output[_sAu][_i]), context);
  }
  if (output[_sCSIG] != null) {
    contents[_SCSIG] = __strictParseFloat(output[_sCSIG]) as number;
  }
  if (output.supportedFeatures === "") {
    contents[_SF] = [];
  } else if (output[_sF] != null && output[_sF][_i] != null) {
    contents[_SF] = de_SupportedAdditionalProcessorFeatureList(__getArrayIfSingleItem(output[_sF][_i]), context);
  }
  if (output[_man] != null) {
    contents[_Man] = __expectString(output[_man]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ProductCode
 */
const de_ProductCode = (output: any, context: __SerdeContext): ProductCode => {
  const contents: any = {};
  if (output[_pCr] != null) {
    contents[_PCIr] = __expectString(output[_pCr]);
  }
  if (output[_ty] != null) {
    contents[_PCT] = __expectString(output[_ty]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ProductCodeList
 */
const de_ProductCodeList = (output: any, context: __SerdeContext): ProductCode[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ProductCode(entry, context);
    });
};

/**
 * deserializeAws_ec2PropagatingVgw
 */
const de_PropagatingVgw = (output: any, context: __SerdeContext): PropagatingVgw => {
  const contents: any = {};
  if (output[_gI] != null) {
    contents[_GI] = __expectString(output[_gI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PropagatingVgwList
 */
const de_PropagatingVgwList = (output: any, context: __SerdeContext): PropagatingVgw[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PropagatingVgw(entry, context);
    });
};

/**
 * deserializeAws_ec2ProtocolIntList
 */
const de_ProtocolIntList = (output: any, context: __SerdeContext): number[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __strictParseInt32(entry) as number;
    });
};

/**
 * deserializeAws_ec2ProtocolList
 */
const de_ProtocolList = (output: any, context: __SerdeContext): Protocol[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2ProvisionByoipCidrResult
 */
const de_ProvisionByoipCidrResult = (output: any, context: __SerdeContext): ProvisionByoipCidrResult => {
  const contents: any = {};
  if (output[_bC] != null) {
    contents[_BC] = de_ByoipCidr(output[_bC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ProvisionedBandwidth
 */
const de_ProvisionedBandwidth = (output: any, context: __SerdeContext): ProvisionedBandwidth => {
  const contents: any = {};
  if (output[_pTr] != null) {
    contents[_PTro] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_pTr]));
  }
  if (output[_prov] != null) {
    contents[_Prov] = __expectString(output[_prov]);
  }
  if (output[_rTeq] != null) {
    contents[_RTeq] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_rTeq]));
  }
  if (output[_req] != null) {
    contents[_Req] = __expectString(output[_req]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ProvisionIpamByoasnResult
 */
const de_ProvisionIpamByoasnResult = (output: any, context: __SerdeContext): ProvisionIpamByoasnResult => {
  const contents: any = {};
  if (output[_b] != null) {
    contents[_Byo] = de_Byoasn(output[_b], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ProvisionIpamPoolCidrResult
 */
const de_ProvisionIpamPoolCidrResult = (output: any, context: __SerdeContext): ProvisionIpamPoolCidrResult => {
  const contents: any = {};
  if (output[_iPC] != null) {
    contents[_IPCpa] = de_IpamPoolCidr(output[_iPC], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ProvisionPublicIpv4PoolCidrResult
 */
const de_ProvisionPublicIpv4PoolCidrResult = (
  output: any,
  context: __SerdeContext
): ProvisionPublicIpv4PoolCidrResult => {
  const contents: any = {};
  if (output[_pIo] != null) {
    contents[_PIo] = __expectString(output[_pIo]);
  }
  if (output[_pAR] != null) {
    contents[_PAR] = de_PublicIpv4PoolRange(output[_pAR], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PtrUpdateStatus
 */
const de_PtrUpdateStatus = (output: any, context: __SerdeContext): PtrUpdateStatus => {
  const contents: any = {};
  if (output[_v] != null) {
    contents[_Va] = __expectString(output[_v]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_rea] != null) {
    contents[_Rea] = __expectString(output[_rea]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PublicIpv4Pool
 */
const de_PublicIpv4Pool = (output: any, context: __SerdeContext): PublicIpv4Pool => {
  const contents: any = {};
  if (output[_pIo] != null) {
    contents[_PIo] = __expectString(output[_pIo]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.poolAddressRangeSet === "") {
    contents[_PARo] = [];
  } else if (output[_pARS] != null && output[_pARS][_i] != null) {
    contents[_PARo] = de_PublicIpv4PoolRangeSet(__getArrayIfSingleItem(output[_pARS][_i]), context);
  }
  if (output[_tAC] != null) {
    contents[_TAC] = __strictParseInt32(output[_tAC]) as number;
  }
  if (output[_tAAC] != null) {
    contents[_TAAC] = __strictParseInt32(output[_tAAC]) as number;
  }
  if (output[_nBG] != null) {
    contents[_NBG] = __expectString(output[_nBG]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PublicIpv4PoolRange
 */
const de_PublicIpv4PoolRange = (output: any, context: __SerdeContext): PublicIpv4PoolRange => {
  const contents: any = {};
  if (output[_fAi] != null) {
    contents[_FAi] = __expectString(output[_fAi]);
  }
  if (output[_lAa] != null) {
    contents[_LAa] = __expectString(output[_lAa]);
  }
  if (output[_aCd] != null) {
    contents[_ACd] = __strictParseInt32(output[_aCd]) as number;
  }
  if (output[_aAC] != null) {
    contents[_AACv] = __strictParseInt32(output[_aAC]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2PublicIpv4PoolRangeSet
 */
const de_PublicIpv4PoolRangeSet = (output: any, context: __SerdeContext): PublicIpv4PoolRange[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PublicIpv4PoolRange(entry, context);
    });
};

/**
 * deserializeAws_ec2PublicIpv4PoolSet
 */
const de_PublicIpv4PoolSet = (output: any, context: __SerdeContext): PublicIpv4Pool[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_PublicIpv4Pool(entry, context);
    });
};

/**
 * deserializeAws_ec2Purchase
 */
const de_Purchase = (output: any, context: __SerdeContext): Purchase => {
  const contents: any = {};
  if (output[_cC] != null) {
    contents[_CCu] = __expectString(output[_cC]);
  }
  if (output[_du] != null) {
    contents[_Du] = __strictParseInt32(output[_du]) as number;
  }
  if (output.hostIdSet === "") {
    contents[_HIS] = [];
  } else if (output[_hIS] != null && output[_hIS][_i] != null) {
    contents[_HIS] = de_ResponseHostIdSet(__getArrayIfSingleItem(output[_hIS][_i]), context);
  }
  if (output[_hRI] != null) {
    contents[_HRI] = __expectString(output[_hRI]);
  }
  if (output[_hPo] != null) {
    contents[_HPo] = __expectString(output[_hPo]);
  }
  if (output[_iF] != null) {
    contents[_IF] = __expectString(output[_iF]);
  }
  if (output[_pO] != null) {
    contents[_PO] = __expectString(output[_pO]);
  }
  if (output[_uP] != null) {
    contents[_UPp] = __expectString(output[_uP]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PurchaseCapacityBlockResult
 */
const de_PurchaseCapacityBlockResult = (output: any, context: __SerdeContext): PurchaseCapacityBlockResult => {
  const contents: any = {};
  if (output[_cR] != null) {
    contents[_CRapa] = de_CapacityReservation(output[_cR], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PurchasedScheduledInstanceSet
 */
const de_PurchasedScheduledInstanceSet = (output: any, context: __SerdeContext): ScheduledInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ScheduledInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2PurchaseHostReservationResult
 */
const de_PurchaseHostReservationResult = (output: any, context: __SerdeContext): PurchaseHostReservationResult => {
  const contents: any = {};
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  if (output[_cC] != null) {
    contents[_CCu] = __expectString(output[_cC]);
  }
  if (output.purchase === "") {
    contents[_Pur] = [];
  } else if (output[_pur] != null && output[_pur][_i] != null) {
    contents[_Pur] = de_PurchaseSet(__getArrayIfSingleItem(output[_pur][_i]), context);
  }
  if (output[_tHP] != null) {
    contents[_THP] = __expectString(output[_tHP]);
  }
  if (output[_tUP] != null) {
    contents[_TUP] = __expectString(output[_tUP]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PurchaseReservedInstancesOfferingResult
 */
const de_PurchaseReservedInstancesOfferingResult = (
  output: any,
  context: __SerdeContext
): PurchaseReservedInstancesOfferingResult => {
  const contents: any = {};
  if (output[_rII] != null) {
    contents[_RIIe] = __expectString(output[_rII]);
  }
  return contents;
};

/**
 * deserializeAws_ec2PurchaseScheduledInstancesResult
 */
const de_PurchaseScheduledInstancesResult = (
  output: any,
  context: __SerdeContext
): PurchaseScheduledInstancesResult => {
  const contents: any = {};
  if (output.scheduledInstanceSet === "") {
    contents[_SIS] = [];
  } else if (output[_sIS] != null && output[_sIS][_i] != null) {
    contents[_SIS] = de_PurchasedScheduledInstanceSet(__getArrayIfSingleItem(output[_sIS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2PurchaseSet
 */
const de_PurchaseSet = (output: any, context: __SerdeContext): Purchase[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Purchase(entry, context);
    });
};

/**
 * deserializeAws_ec2RecurringCharge
 */
const de_RecurringCharge = (output: any, context: __SerdeContext): RecurringCharge => {
  const contents: any = {};
  if (output[_am] != null) {
    contents[_Am] = __strictParseFloat(output[_am]) as number;
  }
  if (output[_fre] != null) {
    contents[_Fre] = __expectString(output[_fre]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RecurringChargesList
 */
const de_RecurringChargesList = (output: any, context: __SerdeContext): RecurringCharge[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_RecurringCharge(entry, context);
    });
};

/**
 * deserializeAws_ec2ReferencedSecurityGroup
 */
const de_ReferencedSecurityGroup = (output: any, context: __SerdeContext): ReferencedSecurityGroup => {
  const contents: any = {};
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  if (output[_pSee] != null) {
    contents[_PSe] = __expectString(output[_pSee]);
  }
  if (output[_uI] != null) {
    contents[_UIs] = __expectString(output[_uI]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_vPCI] != null) {
    contents[_VPCI] = __expectString(output[_vPCI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2Region
 */
const de_Region = (output: any, context: __SerdeContext): Region => {
  const contents: any = {};
  if (output[_rEe] != null) {
    contents[_Endp] = __expectString(output[_rEe]);
  }
  if (output[_rNe] != null) {
    contents[_RN] = __expectString(output[_rNe]);
  }
  if (output[_oIS] != null) {
    contents[_OIS] = __expectString(output[_oIS]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RegionList
 */
const de_RegionList = (output: any, context: __SerdeContext): Region[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Region(entry, context);
    });
};

/**
 * deserializeAws_ec2RegisterImageResult
 */
const de_RegisterImageResult = (output: any, context: __SerdeContext): RegisterImageResult => {
  const contents: any = {};
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RegisterInstanceEventNotificationAttributesResult
 */
const de_RegisterInstanceEventNotificationAttributesResult = (
  output: any,
  context: __SerdeContext
): RegisterInstanceEventNotificationAttributesResult => {
  const contents: any = {};
  if (output[_iTA] != null) {
    contents[_ITA] = de_InstanceTagNotificationAttribute(output[_iTA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RegisterTransitGatewayMulticastGroupMembersResult
 */
const de_RegisterTransitGatewayMulticastGroupMembersResult = (
  output: any,
  context: __SerdeContext
): RegisterTransitGatewayMulticastGroupMembersResult => {
  const contents: any = {};
  if (output[_rMGM] != null) {
    contents[_RMGM] = de_TransitGatewayMulticastRegisteredGroupMembers(output[_rMGM], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RegisterTransitGatewayMulticastGroupSourcesResult
 */
const de_RegisterTransitGatewayMulticastGroupSourcesResult = (
  output: any,
  context: __SerdeContext
): RegisterTransitGatewayMulticastGroupSourcesResult => {
  const contents: any = {};
  if (output[_rMGS] != null) {
    contents[_RMGS] = de_TransitGatewayMulticastRegisteredGroupSources(output[_rMGS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RejectTransitGatewayMulticastDomainAssociationsResult
 */
const de_RejectTransitGatewayMulticastDomainAssociationsResult = (
  output: any,
  context: __SerdeContext
): RejectTransitGatewayMulticastDomainAssociationsResult => {
  const contents: any = {};
  if (output[_a] != null) {
    contents[_Ass] = de_TransitGatewayMulticastDomainAssociations(output[_a], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RejectTransitGatewayPeeringAttachmentResult
 */
const de_RejectTransitGatewayPeeringAttachmentResult = (
  output: any,
  context: __SerdeContext
): RejectTransitGatewayPeeringAttachmentResult => {
  const contents: any = {};
  if (output[_tGPA] != null) {
    contents[_TGPA] = de_TransitGatewayPeeringAttachment(output[_tGPA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RejectTransitGatewayVpcAttachmentResult
 */
const de_RejectTransitGatewayVpcAttachmentResult = (
  output: any,
  context: __SerdeContext
): RejectTransitGatewayVpcAttachmentResult => {
  const contents: any = {};
  if (output[_tGVA] != null) {
    contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RejectVpcEndpointConnectionsResult
 */
const de_RejectVpcEndpointConnectionsResult = (
  output: any,
  context: __SerdeContext
): RejectVpcEndpointConnectionsResult => {
  const contents: any = {};
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemSet(__getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RejectVpcPeeringConnectionResult
 */
const de_RejectVpcPeeringConnectionResult = (
  output: any,
  context: __SerdeContext
): RejectVpcPeeringConnectionResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReleaseHostsResult
 */
const de_ReleaseHostsResult = (output: any, context: __SerdeContext): ReleaseHostsResult => {
  const contents: any = {};
  if (output.successful === "") {
    contents[_Suc] = [];
  } else if (output[_suc] != null && output[_suc][_i] != null) {
    contents[_Suc] = de_ResponseHostIdList(__getArrayIfSingleItem(output[_suc][_i]), context);
  }
  if (output.unsuccessful === "") {
    contents[_Un] = [];
  } else if (output[_u] != null && output[_u][_i] != null) {
    contents[_Un] = de_UnsuccessfulItemList(__getArrayIfSingleItem(output[_u][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReleaseIpamPoolAllocationResult
 */
const de_ReleaseIpamPoolAllocationResult = (output: any, context: __SerdeContext): ReleaseIpamPoolAllocationResult => {
  const contents: any = {};
  if (output[_succ] != null) {
    contents[_Succ] = __parseBoolean(output[_succ]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReplaceIamInstanceProfileAssociationResult
 */
const de_ReplaceIamInstanceProfileAssociationResult = (
  output: any,
  context: __SerdeContext
): ReplaceIamInstanceProfileAssociationResult => {
  const contents: any = {};
  if (output[_iIPA] != null) {
    contents[_IIPA] = de_IamInstanceProfileAssociation(output[_iIPA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReplaceNetworkAclAssociationResult
 */
const de_ReplaceNetworkAclAssociationResult = (
  output: any,
  context: __SerdeContext
): ReplaceNetworkAclAssociationResult => {
  const contents: any = {};
  if (output[_nAIe] != null) {
    contents[_NAIew] = __expectString(output[_nAIe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReplaceRootVolumeTask
 */
const de_ReplaceRootVolumeTask = (output: any, context: __SerdeContext): ReplaceRootVolumeTask => {
  const contents: any = {};
  if (output[_rRVTI] != null) {
    contents[_RRVTIe] = __expectString(output[_rRVTI]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_tSas] != null) {
    contents[_TSas] = __expectString(output[_tSas]);
  }
  if (output[_sT] != null) {
    contents[_STt] = __expectString(output[_sT]);
  }
  if (output[_cTom] != null) {
    contents[_CTom] = __expectString(output[_cTom]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_dRRV] != null) {
    contents[_DRRV] = __parseBoolean(output[_dRRV]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReplaceRootVolumeTasks
 */
const de_ReplaceRootVolumeTasks = (output: any, context: __SerdeContext): ReplaceRootVolumeTask[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReplaceRootVolumeTask(entry, context);
    });
};

/**
 * deserializeAws_ec2ReplaceRouteTableAssociationResult
 */
const de_ReplaceRouteTableAssociationResult = (
  output: any,
  context: __SerdeContext
): ReplaceRouteTableAssociationResult => {
  const contents: any = {};
  if (output[_nAIe] != null) {
    contents[_NAIew] = __expectString(output[_nAIe]);
  }
  if (output[_aS] != null) {
    contents[_ASs] = de_RouteTableAssociationState(output[_aS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReplaceTransitGatewayRouteResult
 */
const de_ReplaceTransitGatewayRouteResult = (
  output: any,
  context: __SerdeContext
): ReplaceTransitGatewayRouteResult => {
  const contents: any = {};
  if (output[_ro] != null) {
    contents[_Ro] = de_TransitGatewayRoute(output[_ro], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReplaceVpnTunnelResult
 */
const de_ReplaceVpnTunnelResult = (output: any, context: __SerdeContext): ReplaceVpnTunnelResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RequestSpotFleetResponse
 */
const de_RequestSpotFleetResponse = (output: any, context: __SerdeContext): RequestSpotFleetResponse => {
  const contents: any = {};
  if (output[_sFRI] != null) {
    contents[_SFRIp] = __expectString(output[_sFRI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RequestSpotInstancesResult
 */
const de_RequestSpotInstancesResult = (output: any, context: __SerdeContext): RequestSpotInstancesResult => {
  const contents: any = {};
  if (output.spotInstanceRequestSet === "") {
    contents[_SIR] = [];
  } else if (output[_sIRS] != null && output[_sIRS][_i] != null) {
    contents[_SIR] = de_SpotInstanceRequestList(__getArrayIfSingleItem(output[_sIRS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2Reservation
 */
const de_Reservation = (output: any, context: __SerdeContext): Reservation => {
  const contents: any = {};
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierList(__getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output.instancesSet === "") {
    contents[_In] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_In] = de_InstanceList(__getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_rIeq] != null) {
    contents[_RIeq] = __expectString(output[_rIeq]);
  }
  if (output[_rIes] != null) {
    contents[_RIeser] = __expectString(output[_rIes]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservationList
 */
const de_ReservationList = (output: any, context: __SerdeContext): Reservation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Reservation(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservationValue
 */
const de_ReservationValue = (output: any, context: __SerdeContext): ReservationValue => {
  const contents: any = {};
  if (output[_hPo] != null) {
    contents[_HPo] = __expectString(output[_hPo]);
  }
  if (output[_rTV] != null) {
    contents[_RTV] = __expectString(output[_rTV]);
  }
  if (output[_rUV] != null) {
    contents[_RUV] = __expectString(output[_rUV]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstanceReservationValue
 */
const de_ReservedInstanceReservationValue = (
  output: any,
  context: __SerdeContext
): ReservedInstanceReservationValue => {
  const contents: any = {};
  if (output[_rVe] != null) {
    contents[_RVe] = de_ReservationValue(output[_rVe], context);
  }
  if (output[_rIIe] != null) {
    contents[_RIIese] = __expectString(output[_rIIe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstanceReservationValueSet
 */
const de_ReservedInstanceReservationValueSet = (
  output: any,
  context: __SerdeContext
): ReservedInstanceReservationValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstanceReservationValue(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservedInstances
 */
const de_ReservedInstances = (output: any, context: __SerdeContext): ReservedInstances => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_du] != null) {
    contents[_Du] = __strictParseLong(output[_du]) as number;
  }
  if (output[_end] != null) {
    contents[_End] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_end]));
  }
  if (output[_fPi] != null) {
    contents[_FPi] = __strictParseFloat(output[_fPi]) as number;
  }
  if (output[_iC] != null) {
    contents[_IC] = __strictParseInt32(output[_iC]) as number;
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_pDr] != null) {
    contents[_PDr] = __expectString(output[_pDr]);
  }
  if (output[_rII] != null) {
    contents[_RIIe] = __expectString(output[_rII]);
  }
  if (output[_star] != null) {
    contents[_Star] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_star]));
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_uPs] != null) {
    contents[_UPs] = __strictParseFloat(output[_uPs]) as number;
  }
  if (output[_cC] != null) {
    contents[_CCu] = __expectString(output[_cC]);
  }
  if (output[_iTns] != null) {
    contents[_ITns] = __expectString(output[_iTns]);
  }
  if (output[_oC] != null) {
    contents[_OC] = __expectString(output[_oC]);
  }
  if (output[_oTf] != null) {
    contents[_OT] = __expectString(output[_oTf]);
  }
  if (output.recurringCharges === "") {
    contents[_RCec] = [];
  } else if (output[_rCec] != null && output[_rCec][_i] != null) {
    contents[_RCec] = de_RecurringChargesList(__getArrayIfSingleItem(output[_rCec][_i]), context);
  }
  if (output[_sc] != null) {
    contents[_Sc] = __expectString(output[_sc]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesConfiguration
 */
const de_ReservedInstancesConfiguration = (output: any, context: __SerdeContext): ReservedInstancesConfiguration => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_iC] != null) {
    contents[_IC] = __strictParseInt32(output[_iC]) as number;
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = __expectString(output[_pl]);
  }
  if (output[_sc] != null) {
    contents[_Sc] = __expectString(output[_sc]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesId
 */
const de_ReservedInstancesId = (output: any, context: __SerdeContext): ReservedInstancesId => {
  const contents: any = {};
  if (output[_rII] != null) {
    contents[_RIIe] = __expectString(output[_rII]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesList
 */
const de_ReservedInstancesList = (output: any, context: __SerdeContext): ReservedInstances[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstances(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservedInstancesListing
 */
const de_ReservedInstancesListing = (output: any, context: __SerdeContext): ReservedInstancesListing => {
  const contents: any = {};
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  if (output[_cD] != null) {
    contents[_CDr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cD]));
  }
  if (output.instanceCounts === "") {
    contents[_ICn] = [];
  } else if (output[_iCn] != null && output[_iCn][_i] != null) {
    contents[_ICn] = de_InstanceCountList(__getArrayIfSingleItem(output[_iCn][_i]), context);
  }
  if (output.priceSchedules === "") {
    contents[_PS] = [];
  } else if (output[_pSri] != null && output[_pSri][_i] != null) {
    contents[_PS] = de_PriceScheduleList(__getArrayIfSingleItem(output[_pSri][_i]), context);
  }
  if (output[_rII] != null) {
    contents[_RIIe] = __expectString(output[_rII]);
  }
  if (output[_rILI] != null) {
    contents[_RILI] = __expectString(output[_rILI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_uDpd] != null) {
    contents[_UDpd] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_uDpd]));
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesListingList
 */
const de_ReservedInstancesListingList = (output: any, context: __SerdeContext): ReservedInstancesListing[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstancesListing(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservedInstancesModification
 */
const de_ReservedInstancesModification = (output: any, context: __SerdeContext): ReservedInstancesModification => {
  const contents: any = {};
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  if (output[_cD] != null) {
    contents[_CDr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cD]));
  }
  if (output[_eDf] != null) {
    contents[_EDf] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eDf]));
  }
  if (output.modificationResultSet === "") {
    contents[_MRo] = [];
  } else if (output[_mRS] != null && output[_mRS][_i] != null) {
    contents[_MRo] = de_ReservedInstancesModificationResultList(__getArrayIfSingleItem(output[_mRS][_i]), context);
  }
  if (output.reservedInstancesSet === "") {
    contents[_RIIes] = [];
  } else if (output[_rIS] != null && output[_rIS][_i] != null) {
    contents[_RIIes] = de_ReservedIntancesIds(__getArrayIfSingleItem(output[_rIS][_i]), context);
  }
  if (output[_rIMI] != null) {
    contents[_RIMIe] = __expectString(output[_rIMI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output[_uDpd] != null) {
    contents[_UDpd] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_uDpd]));
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesModificationList
 */
const de_ReservedInstancesModificationList = (
  output: any,
  context: __SerdeContext
): ReservedInstancesModification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstancesModification(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservedInstancesModificationResult
 */
const de_ReservedInstancesModificationResult = (
  output: any,
  context: __SerdeContext
): ReservedInstancesModificationResult => {
  const contents: any = {};
  if (output[_rII] != null) {
    contents[_RIIe] = __expectString(output[_rII]);
  }
  if (output[_tCa] != null) {
    contents[_TCar] = de_ReservedInstancesConfiguration(output[_tCa], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesModificationResultList
 */
const de_ReservedInstancesModificationResultList = (
  output: any,
  context: __SerdeContext
): ReservedInstancesModificationResult[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstancesModificationResult(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservedInstancesOffering
 */
const de_ReservedInstancesOffering = (output: any, context: __SerdeContext): ReservedInstancesOffering => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_du] != null) {
    contents[_Du] = __strictParseLong(output[_du]) as number;
  }
  if (output[_fPi] != null) {
    contents[_FPi] = __strictParseFloat(output[_fPi]) as number;
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_pDr] != null) {
    contents[_PDr] = __expectString(output[_pDr]);
  }
  if (output[_rIOI] != null) {
    contents[_RIOIe] = __expectString(output[_rIOI]);
  }
  if (output[_uPs] != null) {
    contents[_UPs] = __strictParseFloat(output[_uPs]) as number;
  }
  if (output[_cC] != null) {
    contents[_CCu] = __expectString(output[_cC]);
  }
  if (output[_iTns] != null) {
    contents[_ITns] = __expectString(output[_iTns]);
  }
  if (output[_mar] != null) {
    contents[_Mar] = __parseBoolean(output[_mar]);
  }
  if (output[_oC] != null) {
    contents[_OC] = __expectString(output[_oC]);
  }
  if (output[_oTf] != null) {
    contents[_OT] = __expectString(output[_oTf]);
  }
  if (output.pricingDetailsSet === "") {
    contents[_PDri] = [];
  } else if (output[_pDS] != null && output[_pDS][_i] != null) {
    contents[_PDri] = de_PricingDetailsList(__getArrayIfSingleItem(output[_pDS][_i]), context);
  }
  if (output.recurringCharges === "") {
    contents[_RCec] = [];
  } else if (output[_rCec] != null && output[_rCec][_i] != null) {
    contents[_RCec] = de_RecurringChargesList(__getArrayIfSingleItem(output[_rCec][_i]), context);
  }
  if (output[_sc] != null) {
    contents[_Sc] = __expectString(output[_sc]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ReservedInstancesOfferingList
 */
const de_ReservedInstancesOfferingList = (output: any, context: __SerdeContext): ReservedInstancesOffering[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstancesOffering(entry, context);
    });
};

/**
 * deserializeAws_ec2ReservedIntancesIds
 */
const de_ReservedIntancesIds = (output: any, context: __SerdeContext): ReservedInstancesId[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ReservedInstancesId(entry, context);
    });
};

/**
 * deserializeAws_ec2ResetAddressAttributeResult
 */
const de_ResetAddressAttributeResult = (output: any, context: __SerdeContext): ResetAddressAttributeResult => {
  const contents: any = {};
  if (output[_ad] != null) {
    contents[_Ad] = de_AddressAttribute(output[_ad], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ResetEbsDefaultKmsKeyIdResult
 */
const de_ResetEbsDefaultKmsKeyIdResult = (output: any, context: __SerdeContext): ResetEbsDefaultKmsKeyIdResult => {
  const contents: any = {};
  if (output[_kKI] != null) {
    contents[_KKI] = __expectString(output[_kKI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ResetFpgaImageAttributeResult
 */
const de_ResetFpgaImageAttributeResult = (output: any, context: __SerdeContext): ResetFpgaImageAttributeResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ResourceStatement
 */
const de_ResourceStatement = (output: any, context: __SerdeContext): ResourceStatement => {
  const contents: any = {};
  if (output.resourceSet === "") {
    contents[_R] = [];
  } else if (output[_rSeso] != null && output[_rSeso][_i] != null) {
    contents[_R] = de_ValueStringList(__getArrayIfSingleItem(output[_rSeso][_i]), context);
  }
  if (output.resourceTypeSet === "") {
    contents[_RTeso] = [];
  } else if (output[_rTSes] != null && output[_rTSes][_i] != null) {
    contents[_RTeso] = de_ValueStringList(__getArrayIfSingleItem(output[_rTSes][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ResponseError
 */
const de_ResponseError = (output: any, context: __SerdeContext): ResponseError => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ResponseHostIdList
 */
const de_ResponseHostIdList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2ResponseHostIdSet
 */
const de_ResponseHostIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2ResponseLaunchTemplateData
 */
const de_ResponseLaunchTemplateData = (output: any, context: __SerdeContext): ResponseLaunchTemplateData => {
  const contents: any = {};
  if (output[_kI] != null) {
    contents[_KI] = __expectString(output[_kI]);
  }
  if (output[_eO] != null) {
    contents[_EO] = __parseBoolean(output[_eO]);
  }
  if (output[_iIP] != null) {
    contents[_IIP] = de_LaunchTemplateIamInstanceProfileSpecification(output[_iIP], context);
  }
  if (output.blockDeviceMappingSet === "") {
    contents[_BDM] = [];
  } else if (output[_bDMS] != null && output[_bDMS][_i] != null) {
    contents[_BDM] = de_LaunchTemplateBlockDeviceMappingList(__getArrayIfSingleItem(output[_bDMS][_i]), context);
  }
  if (output.networkInterfaceSet === "") {
    contents[_NI] = [];
  } else if (output[_nIS] != null && output[_nIS][_i] != null) {
    contents[_NI] = de_LaunchTemplateInstanceNetworkInterfaceSpecificationList(
      __getArrayIfSingleItem(output[_nIS][_i]),
      context
    );
  }
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_kN] != null) {
    contents[_KN] = __expectString(output[_kN]);
  }
  if (output[_mo] != null) {
    contents[_Mon] = de_LaunchTemplatesMonitoring(output[_mo], context);
  }
  if (output[_pla] != null) {
    contents[_Pl] = de_LaunchTemplatePlacement(output[_pla], context);
  }
  if (output[_rDI] != null) {
    contents[_RDI] = __expectString(output[_rDI]);
  }
  if (output[_dAT] != null) {
    contents[_DATis] = __parseBoolean(output[_dAT]);
  }
  if (output[_iISB] != null) {
    contents[_IISB] = __expectString(output[_iISB]);
  }
  if (output[_uDs] != null) {
    contents[_UD] = __expectString(output[_uDs]);
  }
  if (output.tagSpecificationSet === "") {
    contents[_TS] = [];
  } else if (output[_tSS] != null && output[_tSS][_i] != null) {
    contents[_TS] = de_LaunchTemplateTagSpecificationList(__getArrayIfSingleItem(output[_tSS][_i]), context);
  }
  if (output.elasticGpuSpecificationSet === "") {
    contents[_EGS] = [];
  } else if (output[_eGSS] != null && output[_eGSS][_i] != null) {
    contents[_EGS] = de_ElasticGpuSpecificationResponseList(__getArrayIfSingleItem(output[_eGSS][_i]), context);
  }
  if (output.elasticInferenceAcceleratorSet === "") {
    contents[_EIA] = [];
  } else if (output[_eIAS] != null && output[_eIAS][_i] != null) {
    contents[_EIA] = de_LaunchTemplateElasticInferenceAcceleratorResponseList(
      __getArrayIfSingleItem(output[_eIAS][_i]),
      context
    );
  }
  if (output.securityGroupIdSet === "") {
    contents[_SGI] = [];
  } else if (output[_sGIS] != null && output[_sGIS][_i] != null) {
    contents[_SGI] = de_ValueStringList(__getArrayIfSingleItem(output[_sGIS][_i]), context);
  }
  if (output.securityGroupSet === "") {
    contents[_SG] = [];
  } else if (output[_sGS] != null && output[_sGS][_i] != null) {
    contents[_SG] = de_ValueStringList(__getArrayIfSingleItem(output[_sGS][_i]), context);
  }
  if (output[_iMOn] != null) {
    contents[_IMO] = de_LaunchTemplateInstanceMarketOptions(output[_iMOn], context);
  }
  if (output[_cSr] != null) {
    contents[_CSred] = de_CreditSpecification(output[_cSr], context);
  }
  if (output[_cO] != null) {
    contents[_CO] = de_LaunchTemplateCpuOptions(output[_cO], context);
  }
  if (output[_cRSa] != null) {
    contents[_CRS] = de_LaunchTemplateCapacityReservationSpecificationResponse(output[_cRSa], context);
  }
  if (output.licenseSet === "") {
    contents[_LSi] = [];
  } else if (output[_lSi] != null && output[_lSi][_i] != null) {
    contents[_LSi] = de_LaunchTemplateLicenseList(__getArrayIfSingleItem(output[_lSi][_i]), context);
  }
  if (output[_hO] != null) {
    contents[_HO] = de_LaunchTemplateHibernationOptions(output[_hO], context);
  }
  if (output[_mO] != null) {
    contents[_MO] = de_LaunchTemplateInstanceMetadataOptions(output[_mO], context);
  }
  if (output[_eOn] != null) {
    contents[_EOn] = de_LaunchTemplateEnclaveOptions(output[_eOn], context);
  }
  if (output[_iR] != null) {
    contents[_IR] = de_InstanceRequirements(output[_iR], context);
  }
  if (output[_pDNO] != null) {
    contents[_PDNO] = de_LaunchTemplatePrivateDnsNameOptions(output[_pDNO], context);
  }
  if (output[_mOa] != null) {
    contents[_MOa] = de_LaunchTemplateInstanceMaintenanceOptions(output[_mOa], context);
  }
  if (output[_dASi] != null) {
    contents[_DAS] = __parseBoolean(output[_dASi]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RestoreAddressToClassicResult
 */
const de_RestoreAddressToClassicResult = (output: any, context: __SerdeContext): RestoreAddressToClassicResult => {
  const contents: any = {};
  if (output[_pI] != null) {
    contents[_PI] = __expectString(output[_pI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RestoreImageFromRecycleBinResult
 */
const de_RestoreImageFromRecycleBinResult = (
  output: any,
  context: __SerdeContext
): RestoreImageFromRecycleBinResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RestoreManagedPrefixListVersionResult
 */
const de_RestoreManagedPrefixListVersionResult = (
  output: any,
  context: __SerdeContext
): RestoreManagedPrefixListVersionResult => {
  const contents: any = {};
  if (output[_pL] != null) {
    contents[_PLr] = de_ManagedPrefixList(output[_pL], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RestoreSnapshotFromRecycleBinResult
 */
const de_RestoreSnapshotFromRecycleBinResult = (
  output: any,
  context: __SerdeContext
): RestoreSnapshotFromRecycleBinResult => {
  const contents: any = {};
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_enc] != null) {
    contents[_Enc] = __parseBoolean(output[_enc]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = __expectString(output[_pro]);
  }
  if (output[_sT] != null) {
    contents[_STt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  if (output[_sta] != null) {
    contents[_Stat] = __expectString(output[_sta]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = __expectString(output[_vIo]);
  }
  if (output[_vSo] != null) {
    contents[_VS] = __strictParseInt32(output[_vSo]) as number;
  }
  if (output[_sTs] != null) {
    contents[_STs] = __expectString(output[_sTs]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RestoreSnapshotTierResult
 */
const de_RestoreSnapshotTierResult = (output: any, context: __SerdeContext): RestoreSnapshotTierResult => {
  const contents: any = {};
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_rST] != null) {
    contents[_RSTe] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_rST]));
  }
  if (output[_rD] != null) {
    contents[_RD] = __strictParseInt32(output[_rD]) as number;
  }
  if (output[_iPR] != null) {
    contents[_IPR] = __parseBoolean(output[_iPR]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RevokeClientVpnIngressResult
 */
const de_RevokeClientVpnIngressResult = (output: any, context: __SerdeContext): RevokeClientVpnIngressResult => {
  const contents: any = {};
  if (output[_sta] != null) {
    contents[_Statu] = de_ClientVpnAuthorizationRuleStatus(output[_sta], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RevokeSecurityGroupEgressResult
 */
const de_RevokeSecurityGroupEgressResult = (output: any, context: __SerdeContext): RevokeSecurityGroupEgressResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  if (output.unknownIpPermissionSet === "") {
    contents[_UIP] = [];
  } else if (output[_uIPS] != null && output[_uIPS][_i] != null) {
    contents[_UIP] = de_IpPermissionList(__getArrayIfSingleItem(output[_uIPS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RevokeSecurityGroupIngressResult
 */
const de_RevokeSecurityGroupIngressResult = (
  output: any,
  context: __SerdeContext
): RevokeSecurityGroupIngressResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  if (output.unknownIpPermissionSet === "") {
    contents[_UIP] = [];
  } else if (output[_uIPS] != null && output[_uIPS][_i] != null) {
    contents[_UIP] = de_IpPermissionList(__getArrayIfSingleItem(output[_uIPS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RootDeviceTypeList
 */
const de_RootDeviceTypeList = (output: any, context: __SerdeContext): RootDeviceType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Route
 */
const de_Route = (output: any, context: __SerdeContext): Route => {
  const contents: any = {};
  if (output[_dCB] != null) {
    contents[_DCB] = __expectString(output[_dCB]);
  }
  if (output[_dICB] != null) {
    contents[_DICB] = __expectString(output[_dICB]);
  }
  if (output[_dPLI] != null) {
    contents[_DPLI] = __expectString(output[_dPLI]);
  }
  if (output[_eOIGI] != null) {
    contents[_EOIGI] = __expectString(output[_eOIGI]);
  }
  if (output[_gI] != null) {
    contents[_GI] = __expectString(output[_gI]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_iOIn] != null) {
    contents[_IOIn] = __expectString(output[_iOIn]);
  }
  if (output[_nGI] != null) {
    contents[_NGI] = __expectString(output[_nGI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  if (output[_lGI] != null) {
    contents[_LGI] = __expectString(output[_lGI]);
  }
  if (output[_cGI] != null) {
    contents[_CGI] = __expectString(output[_cGI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_o] != null) {
    contents[_Or] = __expectString(output[_o]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_vPCI] != null) {
    contents[_VPCI] = __expectString(output[_vPCI]);
  }
  if (output[_cNA] != null) {
    contents[_CNAo] = __expectString(output[_cNA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RouteList
 */
const de_RouteList = (output: any, context: __SerdeContext): Route[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Route(entry, context);
    });
};

/**
 * deserializeAws_ec2RouteTable
 */
const de_RouteTable = (output: any, context: __SerdeContext): RouteTable => {
  const contents: any = {};
  if (output.associationSet === "") {
    contents[_Ass] = [];
  } else if (output[_aSss] != null && output[_aSss][_i] != null) {
    contents[_Ass] = de_RouteTableAssociationList(__getArrayIfSingleItem(output[_aSss][_i]), context);
  }
  if (output.propagatingVgwSet === "") {
    contents[_PVr] = [];
  } else if (output[_pVS] != null && output[_pVS][_i] != null) {
    contents[_PVr] = de_PropagatingVgwList(__getArrayIfSingleItem(output[_pVS][_i]), context);
  }
  if (output[_rTI] != null) {
    contents[_RTI] = __expectString(output[_rTI]);
  }
  if (output.routeSet === "") {
    contents[_Rou] = [];
  } else if (output[_rSo] != null && output[_rSo][_i] != null) {
    contents[_Rou] = de_RouteList(__getArrayIfSingleItem(output[_rSo][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RouteTableAssociation
 */
const de_RouteTableAssociation = (output: any, context: __SerdeContext): RouteTableAssociation => {
  const contents: any = {};
  if (output[_mai] != null) {
    contents[_Mai] = __parseBoolean(output[_mai]);
  }
  if (output[_rTAI] != null) {
    contents[_RTAI] = __expectString(output[_rTAI]);
  }
  if (output[_rTI] != null) {
    contents[_RTI] = __expectString(output[_rTI]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_gI] != null) {
    contents[_GI] = __expectString(output[_gI]);
  }
  if (output[_aS] != null) {
    contents[_ASs] = de_RouteTableAssociationState(output[_aS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RouteTableAssociationList
 */
const de_RouteTableAssociationList = (output: any, context: __SerdeContext): RouteTableAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_RouteTableAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2RouteTableAssociationState
 */
const de_RouteTableAssociationState = (output: any, context: __SerdeContext): RouteTableAssociationState => {
  const contents: any = {};
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RouteTableList
 */
const de_RouteTableList = (output: any, context: __SerdeContext): RouteTable[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_RouteTable(entry, context);
    });
};

/**
 * deserializeAws_ec2RuleGroupRuleOptionsPair
 */
const de_RuleGroupRuleOptionsPair = (output: any, context: __SerdeContext): RuleGroupRuleOptionsPair => {
  const contents: any = {};
  if (output[_rGA] != null) {
    contents[_RGA] = __expectString(output[_rGA]);
  }
  if (output.ruleOptionSet === "") {
    contents[_ROu] = [];
  } else if (output[_rOS] != null && output[_rOS][_i] != null) {
    contents[_ROu] = de_RuleOptionList(__getArrayIfSingleItem(output[_rOS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RuleGroupRuleOptionsPairList
 */
const de_RuleGroupRuleOptionsPairList = (output: any, context: __SerdeContext): RuleGroupRuleOptionsPair[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_RuleGroupRuleOptionsPair(entry, context);
    });
};

/**
 * deserializeAws_ec2RuleGroupTypePair
 */
const de_RuleGroupTypePair = (output: any, context: __SerdeContext): RuleGroupTypePair => {
  const contents: any = {};
  if (output[_rGA] != null) {
    contents[_RGA] = __expectString(output[_rGA]);
  }
  if (output[_rGT] != null) {
    contents[_RGT] = __expectString(output[_rGT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RuleGroupTypePairList
 */
const de_RuleGroupTypePairList = (output: any, context: __SerdeContext): RuleGroupTypePair[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_RuleGroupTypePair(entry, context);
    });
};

/**
 * deserializeAws_ec2RuleOption
 */
const de_RuleOption = (output: any, context: __SerdeContext): RuleOption => {
  const contents: any = {};
  if (output[_key] != null) {
    contents[_Key] = __expectString(output[_key]);
  }
  if (output.settingSet === "") {
    contents[_Set] = [];
  } else if (output[_sSe] != null && output[_sSe][_i] != null) {
    contents[_Set] = de_StringList(__getArrayIfSingleItem(output[_sSe][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2RuleOptionList
 */
const de_RuleOptionList = (output: any, context: __SerdeContext): RuleOption[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_RuleOption(entry, context);
    });
};

/**
 * deserializeAws_ec2RunInstancesMonitoringEnabled
 */
const de_RunInstancesMonitoringEnabled = (output: any, context: __SerdeContext): RunInstancesMonitoringEnabled => {
  const contents: any = {};
  if (output[_en] != null) {
    contents[_En] = __parseBoolean(output[_en]);
  }
  return contents;
};

/**
 * deserializeAws_ec2RunScheduledInstancesResult
 */
const de_RunScheduledInstancesResult = (output: any, context: __SerdeContext): RunScheduledInstancesResult => {
  const contents: any = {};
  if (output.instanceIdSet === "") {
    contents[_IIS] = [];
  } else if (output[_iIS] != null && output[_iIS][_i] != null) {
    contents[_IIS] = de_InstanceIdSet(__getArrayIfSingleItem(output[_iIS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2S3Storage
 */
const de_S3Storage = (output: any, context: __SerdeContext): S3Storage => {
  const contents: any = {};
  if (output[_AWSAKI] != null) {
    contents[_AWSAKI] = __expectString(output[_AWSAKI]);
  }
  if (output[_bu] != null) {
    contents[_B] = __expectString(output[_bu]);
  }
  if (output[_pre] != null) {
    contents[_Pr] = __expectString(output[_pre]);
  }
  if (output[_uPp] != null) {
    contents[_UP] = context.base64Decoder(output[_uPp]);
  }
  if (output[_uPS] != null) {
    contents[_UPS] = __expectString(output[_uPS]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ScheduledInstance
 */
const de_ScheduledInstance = (output: any, context: __SerdeContext): ScheduledInstance => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_cD] != null) {
    contents[_CDr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cD]));
  }
  if (output[_hPo] != null) {
    contents[_HPo] = __expectString(output[_hPo]);
  }
  if (output[_iC] != null) {
    contents[_IC] = __strictParseInt32(output[_iC]) as number;
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_nPe] != null) {
    contents[_NPe] = __expectString(output[_nPe]);
  }
  if (output[_nSST] != null) {
    contents[_NSST] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_nSST]));
  }
  if (output[_pl] != null) {
    contents[_Pla] = __expectString(output[_pl]);
  }
  if (output[_pSET] != null) {
    contents[_PSET] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_pSET]));
  }
  if (output[_rec] != null) {
    contents[_Rec] = de_ScheduledInstanceRecurrence(output[_rec], context);
  }
  if (output[_sIIc] != null) {
    contents[_SIIch] = __expectString(output[_sIIc]);
  }
  if (output[_sDIH] != null) {
    contents[_SDIH] = __strictParseInt32(output[_sDIH]) as number;
  }
  if (output[_tED] != null) {
    contents[_TED] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_tED]));
  }
  if (output[_tSD] != null) {
    contents[_TSD] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_tSD]));
  }
  if (output[_tSIH] != null) {
    contents[_TSIH] = __strictParseInt32(output[_tSIH]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2ScheduledInstanceAvailability
 */
const de_ScheduledInstanceAvailability = (output: any, context: __SerdeContext): ScheduledInstanceAvailability => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_aICv] != null) {
    contents[_AICv] = __strictParseInt32(output[_aICv]) as number;
  }
  if (output[_fSST] != null) {
    contents[_FSST] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_fSST]));
  }
  if (output[_hPo] != null) {
    contents[_HPo] = __expectString(output[_hPo]);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_mTDID] != null) {
    contents[_MTDID] = __strictParseInt32(output[_mTDID]) as number;
  }
  if (output[_mTDIDi] != null) {
    contents[_MTDIDi] = __strictParseInt32(output[_mTDIDi]) as number;
  }
  if (output[_nPe] != null) {
    contents[_NPe] = __expectString(output[_nPe]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = __expectString(output[_pl]);
  }
  if (output[_pTu] != null) {
    contents[_PT] = __expectString(output[_pTu]);
  }
  if (output[_rec] != null) {
    contents[_Rec] = de_ScheduledInstanceRecurrence(output[_rec], context);
  }
  if (output[_sDIH] != null) {
    contents[_SDIH] = __strictParseInt32(output[_sDIH]) as number;
  }
  if (output[_tSIH] != null) {
    contents[_TSIH] = __strictParseInt32(output[_tSIH]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2ScheduledInstanceAvailabilitySet
 */
const de_ScheduledInstanceAvailabilitySet = (output: any, context: __SerdeContext): ScheduledInstanceAvailability[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ScheduledInstanceAvailability(entry, context);
    });
};

/**
 * deserializeAws_ec2ScheduledInstanceRecurrence
 */
const de_ScheduledInstanceRecurrence = (output: any, context: __SerdeContext): ScheduledInstanceRecurrence => {
  const contents: any = {};
  if (output[_fre] != null) {
    contents[_Fre] = __expectString(output[_fre]);
  }
  if (output[_int] != null) {
    contents[_Int] = __strictParseInt32(output[_int]) as number;
  }
  if (output.occurrenceDaySet === "") {
    contents[_ODS] = [];
  } else if (output[_oDS] != null && output[_oDS][_i] != null) {
    contents[_ODS] = de_OccurrenceDaySet(__getArrayIfSingleItem(output[_oDS][_i]), context);
  }
  if (output[_oRTE] != null) {
    contents[_ORTE] = __parseBoolean(output[_oRTE]);
  }
  if (output[_oU] != null) {
    contents[_OU] = __expectString(output[_oU]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ScheduledInstanceSet
 */
const de_ScheduledInstanceSet = (output: any, context: __SerdeContext): ScheduledInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ScheduledInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2SearchLocalGatewayRoutesResult
 */
const de_SearchLocalGatewayRoutesResult = (output: any, context: __SerdeContext): SearchLocalGatewayRoutesResult => {
  const contents: any = {};
  if (output.routeSet === "") {
    contents[_Rou] = [];
  } else if (output[_rSo] != null && output[_rSo][_i] != null) {
    contents[_Rou] = de_LocalGatewayRouteList(__getArrayIfSingleItem(output[_rSo][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SearchTransitGatewayMulticastGroupsResult
 */
const de_SearchTransitGatewayMulticastGroupsResult = (
  output: any,
  context: __SerdeContext
): SearchTransitGatewayMulticastGroupsResult => {
  const contents: any = {};
  if (output.multicastGroups === "") {
    contents[_MG] = [];
  } else if (output[_mG] != null && output[_mG][_i] != null) {
    contents[_MG] = de_TransitGatewayMulticastGroupList(__getArrayIfSingleItem(output[_mG][_i]), context);
  }
  if (output[_nTe] != null) {
    contents[_NT] = __expectString(output[_nTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SearchTransitGatewayRoutesResult
 */
const de_SearchTransitGatewayRoutesResult = (
  output: any,
  context: __SerdeContext
): SearchTransitGatewayRoutesResult => {
  const contents: any = {};
  if (output.routeSet === "") {
    contents[_Rou] = [];
  } else if (output[_rSo] != null && output[_rSo][_i] != null) {
    contents[_Rou] = de_TransitGatewayRouteList(__getArrayIfSingleItem(output[_rSo][_i]), context);
  }
  if (output[_aRAd] != null) {
    contents[_ARAd] = __parseBoolean(output[_aRAd]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SecurityGroup
 */
const de_SecurityGroup = (output: any, context: __SerdeContext): SecurityGroup => {
  const contents: any = {};
  if (output[_gD] != null) {
    contents[_De] = __expectString(output[_gD]);
  }
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  if (output.ipPermissions === "") {
    contents[_IPpe] = [];
  } else if (output[_iPpe] != null && output[_iPpe][_i] != null) {
    contents[_IPpe] = de_IpPermissionList(__getArrayIfSingleItem(output[_iPpe][_i]), context);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  if (output.ipPermissionsEgress === "") {
    contents[_IPE] = [];
  } else if (output[_iPE] != null && output[_iPE][_i] != null) {
    contents[_IPE] = de_IpPermissionList(__getArrayIfSingleItem(output[_iPE][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SecurityGroupForVpc
 */
const de_SecurityGroupForVpc = (output: any, context: __SerdeContext): SecurityGroupForVpc => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_pVI] != null) {
    contents[_PVIr] = __expectString(output[_pVI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SecurityGroupForVpcList
 */
const de_SecurityGroupForVpcList = (output: any, context: __SerdeContext): SecurityGroupForVpc[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SecurityGroupForVpc(entry, context);
    });
};

/**
 * deserializeAws_ec2SecurityGroupIdentifier
 */
const de_SecurityGroupIdentifier = (output: any, context: __SerdeContext): SecurityGroupIdentifier => {
  const contents: any = {};
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SecurityGroupIdList
 */
const de_SecurityGroupIdList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2SecurityGroupIdSet
 */
const de_SecurityGroupIdSet = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2SecurityGroupIdStringList
 */
const de_SecurityGroupIdStringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2SecurityGroupList
 */
const de_SecurityGroupList = (output: any, context: __SerdeContext): SecurityGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SecurityGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2SecurityGroupReference
 */
const de_SecurityGroupReference = (output: any, context: __SerdeContext): SecurityGroupReference => {
  const contents: any = {};
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  if (output[_rVI] != null) {
    contents[_RVI] = __expectString(output[_rVI]);
  }
  if (output[_vPCI] != null) {
    contents[_VPCI] = __expectString(output[_vPCI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SecurityGroupReferences
 */
const de_SecurityGroupReferences = (output: any, context: __SerdeContext): SecurityGroupReference[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SecurityGroupReference(entry, context);
    });
};

/**
 * deserializeAws_ec2SecurityGroupRule
 */
const de_SecurityGroupRule = (output: any, context: __SerdeContext): SecurityGroupRule => {
  const contents: any = {};
  if (output[_sGRI] != null) {
    contents[_SGRIe] = __expectString(output[_sGRI]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  if (output[_gOI] != null) {
    contents[_GOI] = __expectString(output[_gOI]);
  }
  if (output[_iEs] != null) {
    contents[_IE] = __parseBoolean(output[_iEs]);
  }
  if (output[_iPpr] != null) {
    contents[_IPpr] = __expectString(output[_iPpr]);
  }
  if (output[_fP] != null) {
    contents[_FP] = __strictParseInt32(output[_fP]) as number;
  }
  if (output[_tPo] != null) {
    contents[_TP] = __strictParseInt32(output[_tPo]) as number;
  }
  if (output[_cIidr] != null) {
    contents[_CIidr] = __expectString(output[_cIidr]);
  }
  if (output[_cIid] != null) {
    contents[_CIid] = __expectString(output[_cIid]);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = __expectString(output[_pLI]);
  }
  if (output[_rGI] != null) {
    contents[_RGIe] = de_ReferencedSecurityGroup(output[_rGI], context);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SecurityGroupRuleList
 */
const de_SecurityGroupRuleList = (output: any, context: __SerdeContext): SecurityGroupRule[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SecurityGroupRule(entry, context);
    });
};

/**
 * deserializeAws_ec2ServiceConfiguration
 */
const de_ServiceConfiguration = (output: any, context: __SerdeContext): ServiceConfiguration => {
  const contents: any = {};
  if (output.serviceType === "") {
    contents[_STe] = [];
  } else if (output[_sTe] != null && output[_sTe][_i] != null) {
    contents[_STe] = de_ServiceTypeDetailSet(__getArrayIfSingleItem(output[_sTe][_i]), context);
  }
  if (output[_sI] != null) {
    contents[_SIe] = __expectString(output[_sI]);
  }
  if (output[_sN] != null) {
    contents[_SNe] = __expectString(output[_sN]);
  }
  if (output[_sSer] != null) {
    contents[_SSe] = __expectString(output[_sSer]);
  }
  if (output.availabilityZoneSet === "") {
    contents[_AZv] = [];
  } else if (output[_aZS] != null && output[_aZS][_i] != null) {
    contents[_AZv] = de_ValueStringList(__getArrayIfSingleItem(output[_aZS][_i]), context);
  }
  if (output[_aRcc] != null) {
    contents[_ARc] = __parseBoolean(output[_aRcc]);
  }
  if (output[_mVE] != null) {
    contents[_MVEa] = __parseBoolean(output[_mVE]);
  }
  if (output.networkLoadBalancerArnSet === "") {
    contents[_NLBAe] = [];
  } else if (output[_nLBAS] != null && output[_nLBAS][_i] != null) {
    contents[_NLBAe] = de_ValueStringList(__getArrayIfSingleItem(output[_nLBAS][_i]), context);
  }
  if (output.gatewayLoadBalancerArnSet === "") {
    contents[_GLBA] = [];
  } else if (output[_gLBAS] != null && output[_gLBAS][_i] != null) {
    contents[_GLBA] = de_ValueStringList(__getArrayIfSingleItem(output[_gLBAS][_i]), context);
  }
  if (output.supportedIpAddressTypeSet === "") {
    contents[_SIAT] = [];
  } else if (output[_sIATS] != null && output[_sIATS][_i] != null) {
    contents[_SIAT] = de_SupportedIpAddressTypes(__getArrayIfSingleItem(output[_sIATS][_i]), context);
  }
  if (output.baseEndpointDnsNameSet === "") {
    contents[_BEDN] = [];
  } else if (output[_bEDNS] != null && output[_bEDNS][_i] != null) {
    contents[_BEDN] = de_ValueStringList(__getArrayIfSingleItem(output[_bEDNS][_i]), context);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = __expectString(output[_pDN]);
  }
  if (output[_pDNC] != null) {
    contents[_PDNC] = de_PrivateDnsNameConfiguration(output[_pDNC], context);
  }
  if (output[_pRa] != null) {
    contents[_PRa] = __expectString(output[_pRa]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ServiceConfigurationSet
 */
const de_ServiceConfigurationSet = (output: any, context: __SerdeContext): ServiceConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ServiceConfiguration(entry, context);
    });
};

/**
 * deserializeAws_ec2ServiceDetail
 */
const de_ServiceDetail = (output: any, context: __SerdeContext): ServiceDetail => {
  const contents: any = {};
  if (output[_sN] != null) {
    contents[_SNe] = __expectString(output[_sN]);
  }
  if (output[_sI] != null) {
    contents[_SIe] = __expectString(output[_sI]);
  }
  if (output.serviceType === "") {
    contents[_STe] = [];
  } else if (output[_sTe] != null && output[_sTe][_i] != null) {
    contents[_STe] = de_ServiceTypeDetailSet(__getArrayIfSingleItem(output[_sTe][_i]), context);
  }
  if (output.availabilityZoneSet === "") {
    contents[_AZv] = [];
  } else if (output[_aZS] != null && output[_aZS][_i] != null) {
    contents[_AZv] = de_ValueStringList(__getArrayIfSingleItem(output[_aZS][_i]), context);
  }
  if (output[_ow] != null) {
    contents[_Own] = __expectString(output[_ow]);
  }
  if (output.baseEndpointDnsNameSet === "") {
    contents[_BEDN] = [];
  } else if (output[_bEDNS] != null && output[_bEDNS][_i] != null) {
    contents[_BEDN] = de_ValueStringList(__getArrayIfSingleItem(output[_bEDNS][_i]), context);
  }
  if (output[_pDN] != null) {
    contents[_PDN] = __expectString(output[_pDN]);
  }
  if (output.privateDnsNameSet === "") {
    contents[_PDNr] = [];
  } else if (output[_pDNS] != null && output[_pDNS][_i] != null) {
    contents[_PDNr] = de_PrivateDnsDetailsSet(__getArrayIfSingleItem(output[_pDNS][_i]), context);
  }
  if (output[_vEPS] != null) {
    contents[_VEPS] = __parseBoolean(output[_vEPS]);
  }
  if (output[_aRcc] != null) {
    contents[_ARc] = __parseBoolean(output[_aRcc]);
  }
  if (output[_mVE] != null) {
    contents[_MVEa] = __parseBoolean(output[_mVE]);
  }
  if (output[_pRa] != null) {
    contents[_PRa] = __expectString(output[_pRa]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_pDNVS] != null) {
    contents[_PDNVS] = __expectString(output[_pDNVS]);
  }
  if (output.supportedIpAddressTypeSet === "") {
    contents[_SIAT] = [];
  } else if (output[_sIATS] != null && output[_sIATS][_i] != null) {
    contents[_SIAT] = de_SupportedIpAddressTypes(__getArrayIfSingleItem(output[_sIATS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ServiceDetailSet
 */
const de_ServiceDetailSet = (output: any, context: __SerdeContext): ServiceDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ServiceDetail(entry, context);
    });
};

/**
 * deserializeAws_ec2ServiceTypeDetail
 */
const de_ServiceTypeDetail = (output: any, context: __SerdeContext): ServiceTypeDetail => {
  const contents: any = {};
  if (output[_sTe] != null) {
    contents[_STe] = __expectString(output[_sTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ServiceTypeDetailSet
 */
const de_ServiceTypeDetailSet = (output: any, context: __SerdeContext): ServiceTypeDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ServiceTypeDetail(entry, context);
    });
};

/**
 * deserializeAws_ec2Snapshot
 */
const de_Snapshot = (output: any, context: __SerdeContext): Snapshot => {
  const contents: any = {};
  if (output[_dEKI] != null) {
    contents[_DEKI] = __expectString(output[_dEKI]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_enc] != null) {
    contents[_Enc] = __parseBoolean(output[_enc]);
  }
  if (output[_kKI] != null) {
    contents[_KKI] = __expectString(output[_kKI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = __expectString(output[_pro]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_sT] != null) {
    contents[_STt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  if (output[_sta] != null) {
    contents[_Stat] = __expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SMt] = __expectString(output[_sM]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = __expectString(output[_vIo]);
  }
  if (output[_vSo] != null) {
    contents[_VS] = __strictParseInt32(output[_vSo]) as number;
  }
  if (output[_oAw] != null) {
    contents[_OAw] = __expectString(output[_oAw]);
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sTt] != null) {
    contents[_STto] = __expectString(output[_sTt]);
  }
  if (output[_rET] != null) {
    contents[_RET] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_rET]));
  }
  if (output[_sTs] != null) {
    contents[_STs] = __expectString(output[_sTs]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SnapshotDetail
 */
const de_SnapshotDetail = (output: any, context: __SerdeContext): SnapshotDetail => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_dN] != null) {
    contents[_DN] = __expectString(output[_dN]);
  }
  if (output[_dIS] != null) {
    contents[_DISi] = __strictParseFloat(output[_dIS]) as number;
  }
  if (output[_f] != null) {
    contents[_Fo] = __expectString(output[_f]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = __expectString(output[_pro]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output[_ur] != null) {
    contents[_U] = __expectString(output[_ur]);
  }
  if (output[_uB] != null) {
    contents[_UB] = de_UserBucketDetails(output[_uB], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SnapshotDetailList
 */
const de_SnapshotDetailList = (output: any, context: __SerdeContext): SnapshotDetail[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SnapshotDetail(entry, context);
    });
};

/**
 * deserializeAws_ec2SnapshotInfo
 */
const de_SnapshotInfo = (output: any, context: __SerdeContext): SnapshotInfo => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_enc] != null) {
    contents[_Enc] = __parseBoolean(output[_enc]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = __expectString(output[_vIo]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_vSo] != null) {
    contents[_VS] = __strictParseInt32(output[_vSo]) as number;
  }
  if (output[_sT] != null) {
    contents[_STt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  if (output[_pro] != null) {
    contents[_Prog] = __expectString(output[_pro]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output[_sTs] != null) {
    contents[_STs] = __expectString(output[_sTs]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SnapshotList
 */
const de_SnapshotList = (output: any, context: __SerdeContext): Snapshot[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Snapshot(entry, context);
    });
};

/**
 * deserializeAws_ec2SnapshotRecycleBinInfo
 */
const de_SnapshotRecycleBinInfo = (output: any, context: __SerdeContext): SnapshotRecycleBinInfo => {
  const contents: any = {};
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_rBET] != null) {
    contents[_RBET] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_rBET]));
  }
  if (output[_rBETe] != null) {
    contents[_RBETe] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_rBETe]));
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = __expectString(output[_vIo]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SnapshotRecycleBinInfoList
 */
const de_SnapshotRecycleBinInfoList = (output: any, context: __SerdeContext): SnapshotRecycleBinInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SnapshotRecycleBinInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2SnapshotSet
 */
const de_SnapshotSet = (output: any, context: __SerdeContext): SnapshotInfo[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SnapshotInfo(entry, context);
    });
};

/**
 * deserializeAws_ec2SnapshotTaskDetail
 */
const de_SnapshotTaskDetail = (output: any, context: __SerdeContext): SnapshotTaskDetail => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_dIS] != null) {
    contents[_DISi] = __strictParseFloat(output[_dIS]) as number;
  }
  if (output[_enc] != null) {
    contents[_Enc] = __parseBoolean(output[_enc]);
  }
  if (output[_f] != null) {
    contents[_Fo] = __expectString(output[_f]);
  }
  if (output[_kKI] != null) {
    contents[_KKI] = __expectString(output[_kKI]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = __expectString(output[_pro]);
  }
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output[_ur] != null) {
    contents[_U] = __expectString(output[_ur]);
  }
  if (output[_uB] != null) {
    contents[_UB] = de_UserBucketDetails(output[_uB], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SnapshotTierStatus
 */
const de_SnapshotTierStatus = (output: any, context: __SerdeContext): SnapshotTierStatus => {
  const contents: any = {};
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = __expectString(output[_vIo]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sTt] != null) {
    contents[_STto] = __expectString(output[_sTt]);
  }
  if (output[_lTST] != null) {
    contents[_LTST] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lTST]));
  }
  if (output[_lTP] != null) {
    contents[_LTP] = __strictParseInt32(output[_lTP]) as number;
  }
  if (output[_lTOS] != null) {
    contents[_LTOS] = __expectString(output[_lTOS]);
  }
  if (output[_lTOSD] != null) {
    contents[_LTOSD] = __expectString(output[_lTOSD]);
  }
  if (output[_aCT] != null) {
    contents[_ACT] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_aCT]));
  }
  if (output[_rET] != null) {
    contents[_RET] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_rET]));
  }
  return contents;
};

/**
 * deserializeAws_ec2snapshotTierStatusSet
 */
const de_snapshotTierStatusSet = (output: any, context: __SerdeContext): SnapshotTierStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SnapshotTierStatus(entry, context);
    });
};

/**
 * deserializeAws_ec2SpotCapacityRebalance
 */
const de_SpotCapacityRebalance = (output: any, context: __SerdeContext): SpotCapacityRebalance => {
  const contents: any = {};
  if (output[_rSe] != null) {
    contents[_RS] = __expectString(output[_rSe]);
  }
  if (output[_tD] != null) {
    contents[_TDe] = __strictParseInt32(output[_tD]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotDatafeedSubscription
 */
const de_SpotDatafeedSubscription = (output: any, context: __SerdeContext): SpotDatafeedSubscription => {
  const contents: any = {};
  if (output[_bu] != null) {
    contents[_B] = __expectString(output[_bu]);
  }
  if (output[_fa] != null) {
    contents[_Fa] = de_SpotInstanceStateFault(output[_fa], context);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_pre] != null) {
    contents[_Pr] = __expectString(output[_pre]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotFleetLaunchSpecification
 */
const de_SpotFleetLaunchSpecification = (output: any, context: __SerdeContext): SpotFleetLaunchSpecification => {
  const contents: any = {};
  if (output.groupSet === "") {
    contents[_SG] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_SG] = de_GroupIdentifierList(__getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output[_aTdd] != null) {
    contents[_ATd] = __expectString(output[_aTdd]);
  }
  if (output.blockDeviceMapping === "") {
    contents[_BDM] = [];
  } else if (output[_bDM] != null && output[_bDM][_i] != null) {
    contents[_BDM] = de_BlockDeviceMappingList(__getArrayIfSingleItem(output[_bDM][_i]), context);
  }
  if (output[_eO] != null) {
    contents[_EO] = __parseBoolean(output[_eO]);
  }
  if (output[_iIP] != null) {
    contents[_IIP] = de_IamInstanceProfileSpecification(output[_iIP], context);
  }
  if (output[_iIma] != null) {
    contents[_IIma] = __expectString(output[_iIma]);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_kI] != null) {
    contents[_KI] = __expectString(output[_kI]);
  }
  if (output[_kN] != null) {
    contents[_KN] = __expectString(output[_kN]);
  }
  if (output[_mo] != null) {
    contents[_Mon] = de_SpotFleetMonitoring(output[_mo], context);
  }
  if (output.networkInterfaceSet === "") {
    contents[_NI] = [];
  } else if (output[_nIS] != null && output[_nIS][_i] != null) {
    contents[_NI] = de_InstanceNetworkInterfaceSpecificationList(__getArrayIfSingleItem(output[_nIS][_i]), context);
  }
  if (output[_pla] != null) {
    contents[_Pl] = de_SpotPlacement(output[_pla], context);
  }
  if (output[_rIa] != null) {
    contents[_RIa] = __expectString(output[_rIa]);
  }
  if (output[_sPp] != null) {
    contents[_SPp] = __expectString(output[_sPp]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_uDs] != null) {
    contents[_UD] = __expectString(output[_uDs]);
  }
  if (output[_wC] != null) {
    contents[_WC] = __strictParseFloat(output[_wC]) as number;
  }
  if (output.tagSpecificationSet === "") {
    contents[_TS] = [];
  } else if (output[_tSS] != null && output[_tSS][_i] != null) {
    contents[_TS] = de_SpotFleetTagSpecificationList(__getArrayIfSingleItem(output[_tSS][_i]), context);
  }
  if (output[_iR] != null) {
    contents[_IR] = de_InstanceRequirements(output[_iR], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotFleetMonitoring
 */
const de_SpotFleetMonitoring = (output: any, context: __SerdeContext): SpotFleetMonitoring => {
  const contents: any = {};
  if (output[_en] != null) {
    contents[_En] = __parseBoolean(output[_en]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotFleetRequestConfig
 */
const de_SpotFleetRequestConfig = (output: any, context: __SerdeContext): SpotFleetRequestConfig => {
  const contents: any = {};
  if (output[_aSc] != null) {
    contents[_ASc] = __expectString(output[_aSc]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_sFRC] != null) {
    contents[_SFRC] = de_SpotFleetRequestConfigData(output[_sFRC], context);
  }
  if (output[_sFRI] != null) {
    contents[_SFRIp] = __expectString(output[_sFRI]);
  }
  if (output[_sFRSp] != null) {
    contents[_SFRS] = __expectString(output[_sFRSp]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotFleetRequestConfigData
 */
const de_SpotFleetRequestConfigData = (output: any, context: __SerdeContext): SpotFleetRequestConfigData => {
  const contents: any = {};
  if (output[_aSl] != null) {
    contents[_AS] = __expectString(output[_aSl]);
  }
  if (output[_oDAS] != null) {
    contents[_ODAS] = __expectString(output[_oDAS]);
  }
  if (output[_sMS] != null) {
    contents[_SMS] = de_SpotMaintenanceStrategies(output[_sMS], context);
  }
  if (output[_cT] != null) {
    contents[_CTl] = __expectString(output[_cT]);
  }
  if (output[_eCTP] != null) {
    contents[_ECTP] = __expectString(output[_eCTP]);
  }
  if (output[_fC] != null) {
    contents[_FC] = __strictParseFloat(output[_fC]) as number;
  }
  if (output[_oDFC] != null) {
    contents[_ODFC] = __strictParseFloat(output[_oDFC]) as number;
  }
  if (output[_iFR] != null) {
    contents[_IFR] = __expectString(output[_iFR]);
  }
  if (output.launchSpecifications === "") {
    contents[_LSau] = [];
  } else if (output[_lSa] != null && output[_lSa][_i] != null) {
    contents[_LSau] = de_LaunchSpecsList(__getArrayIfSingleItem(output[_lSa][_i]), context);
  }
  if (output.launchTemplateConfigs === "") {
    contents[_LTC] = [];
  } else if (output[_lTC] != null && output[_lTC][_i] != null) {
    contents[_LTC] = de_LaunchTemplateConfigList(__getArrayIfSingleItem(output[_lTC][_i]), context);
  }
  if (output[_sPp] != null) {
    contents[_SPp] = __expectString(output[_sPp]);
  }
  if (output[_tCar] != null) {
    contents[_TCa] = __strictParseInt32(output[_tCar]) as number;
  }
  if (output[_oDTC] != null) {
    contents[_ODTC] = __strictParseInt32(output[_oDTC]) as number;
  }
  if (output[_oDMTP] != null) {
    contents[_ODMTP] = __expectString(output[_oDMTP]);
  }
  if (output[_sMTP] != null) {
    contents[_SMTP] = __expectString(output[_sMTP]);
  }
  if (output[_tIWE] != null) {
    contents[_TIWE] = __parseBoolean(output[_tIWE]);
  }
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  if (output[_vF] != null) {
    contents[_VF] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_vF]));
  }
  if (output[_vU] != null) {
    contents[_VU] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_vU]));
  }
  if (output[_rUI] != null) {
    contents[_RUI] = __parseBoolean(output[_rUI]);
  }
  if (output[_iIB] != null) {
    contents[_IIB] = __expectString(output[_iIB]);
  }
  if (output[_lBC] != null) {
    contents[_LBC] = de_LoadBalancersConfig(output[_lBC], context);
  }
  if (output[_iPTUC] != null) {
    contents[_IPTUC] = __strictParseInt32(output[_iPTUC]) as number;
  }
  if (output[_cont] != null) {
    contents[_Con] = __expectString(output[_cont]);
  }
  if (output[_tCUT] != null) {
    contents[_TCUT] = __expectString(output[_tCUT]);
  }
  if (output.TagSpecification === "") {
    contents[_TS] = [];
  } else if (output[_TSagp] != null && output[_TSagp][_i] != null) {
    contents[_TS] = de_TagSpecificationList(__getArrayIfSingleItem(output[_TSagp][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotFleetRequestConfigSet
 */
const de_SpotFleetRequestConfigSet = (output: any, context: __SerdeContext): SpotFleetRequestConfig[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SpotFleetRequestConfig(entry, context);
    });
};

/**
 * deserializeAws_ec2SpotFleetTagSpecification
 */
const de_SpotFleetTagSpecification = (output: any, context: __SerdeContext): SpotFleetTagSpecification => {
  const contents: any = {};
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output.tag === "") {
    contents[_Ta] = [];
  } else if (output[_tag] != null && output[_tag][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tag][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotFleetTagSpecificationList
 */
const de_SpotFleetTagSpecificationList = (output: any, context: __SerdeContext): SpotFleetTagSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SpotFleetTagSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2SpotInstanceRequest
 */
const de_SpotInstanceRequest = (output: any, context: __SerdeContext): SpotInstanceRequest => {
  const contents: any = {};
  if (output[_aBHP] != null) {
    contents[_ABHP] = __expectString(output[_aBHP]);
  }
  if (output[_aZG] != null) {
    contents[_AZG] = __expectString(output[_aZG]);
  }
  if (output[_bDMl] != null) {
    contents[_BDMl] = __strictParseInt32(output[_bDMl]) as number;
  }
  if (output[_cTr] != null) {
    contents[_CTr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_fa] != null) {
    contents[_Fa] = de_SpotInstanceStateFault(output[_fa], context);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_lG] != null) {
    contents[_LG] = __expectString(output[_lG]);
  }
  if (output[_lSau] != null) {
    contents[_LSa] = de_LaunchSpecification(output[_lSau], context);
  }
  if (output[_lAZ] != null) {
    contents[_LAZ] = __expectString(output[_lAZ]);
  }
  if (output[_pDr] != null) {
    contents[_PDr] = __expectString(output[_pDr]);
  }
  if (output[_sIRI] != null) {
    contents[_SIRIp] = __expectString(output[_sIRI]);
  }
  if (output[_sPp] != null) {
    contents[_SPp] = __expectString(output[_sPp]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_SpotInstanceStatus(output[_sta], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  if (output[_vF] != null) {
    contents[_VF] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_vF]));
  }
  if (output[_vU] != null) {
    contents[_VU] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_vU]));
  }
  if (output[_iIB] != null) {
    contents[_IIB] = __expectString(output[_iIB]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotInstanceRequestList
 */
const de_SpotInstanceRequestList = (output: any, context: __SerdeContext): SpotInstanceRequest[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SpotInstanceRequest(entry, context);
    });
};

/**
 * deserializeAws_ec2SpotInstanceStateFault
 */
const de_SpotInstanceStateFault = (output: any, context: __SerdeContext): SpotInstanceStateFault => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotInstanceStatus
 */
const de_SpotInstanceStatus = (output: any, context: __SerdeContext): SpotInstanceStatus => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  if (output[_uT] != null) {
    contents[_UTp] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_uT]));
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotMaintenanceStrategies
 */
const de_SpotMaintenanceStrategies = (output: any, context: __SerdeContext): SpotMaintenanceStrategies => {
  const contents: any = {};
  if (output[_cRa] != null) {
    contents[_CRap] = de_SpotCapacityRebalance(output[_cRa], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotOptions
 */
const de_SpotOptions = (output: any, context: __SerdeContext): SpotOptions => {
  const contents: any = {};
  if (output[_aSl] != null) {
    contents[_AS] = __expectString(output[_aSl]);
  }
  if (output[_mSai] != null) {
    contents[_MS] = de_FleetSpotMaintenanceStrategies(output[_mSai], context);
  }
  if (output[_iIB] != null) {
    contents[_IIB] = __expectString(output[_iIB]);
  }
  if (output[_iPTUC] != null) {
    contents[_IPTUC] = __strictParseInt32(output[_iPTUC]) as number;
  }
  if (output[_sITi] != null) {
    contents[_SITi] = __parseBoolean(output[_sITi]);
  }
  if (output[_sAZ] != null) {
    contents[_SAZ] = __parseBoolean(output[_sAZ]);
  }
  if (output[_mTC] != null) {
    contents[_MTC] = __strictParseInt32(output[_mTC]) as number;
  }
  if (output[_mTP] != null) {
    contents[_MTP] = __expectString(output[_mTP]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotPlacement
 */
const de_SpotPlacement = (output: any, context: __SerdeContext): SpotPlacement => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  if (output[_t] != null) {
    contents[_Te] = __expectString(output[_t]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotPlacementScore
 */
const de_SpotPlacementScore = (output: any, context: __SerdeContext): SpotPlacementScore => {
  const contents: any = {};
  if (output[_reg] != null) {
    contents[_Regi] = __expectString(output[_reg]);
  }
  if (output[_aZI] != null) {
    contents[_AZI] = __expectString(output[_aZI]);
  }
  if (output[_sco] != null) {
    contents[_Sco] = __strictParseInt32(output[_sco]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotPlacementScores
 */
const de_SpotPlacementScores = (output: any, context: __SerdeContext): SpotPlacementScore[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SpotPlacementScore(entry, context);
    });
};

/**
 * deserializeAws_ec2SpotPrice
 */
const de_SpotPrice = (output: any, context: __SerdeContext): SpotPrice => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_iT] != null) {
    contents[_IT] = __expectString(output[_iT]);
  }
  if (output[_pDr] != null) {
    contents[_PDr] = __expectString(output[_pDr]);
  }
  if (output[_sPp] != null) {
    contents[_SPp] = __expectString(output[_sPp]);
  }
  if (output[_ti] != null) {
    contents[_Tim] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_ti]));
  }
  return contents;
};

/**
 * deserializeAws_ec2SpotPriceHistoryList
 */
const de_SpotPriceHistoryList = (output: any, context: __SerdeContext): SpotPrice[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SpotPrice(entry, context);
    });
};

/**
 * deserializeAws_ec2StaleIpPermission
 */
const de_StaleIpPermission = (output: any, context: __SerdeContext): StaleIpPermission => {
  const contents: any = {};
  if (output[_fP] != null) {
    contents[_FP] = __strictParseInt32(output[_fP]) as number;
  }
  if (output[_iPpr] != null) {
    contents[_IPpr] = __expectString(output[_iPpr]);
  }
  if (output.ipRanges === "") {
    contents[_IRp] = [];
  } else if (output[_iRpa] != null && output[_iRpa][_i] != null) {
    contents[_IRp] = de_IpRanges(__getArrayIfSingleItem(output[_iRpa][_i]), context);
  }
  if (output.prefixListIds === "") {
    contents[_PLIr] = [];
  } else if (output[_pLIr] != null && output[_pLIr][_i] != null) {
    contents[_PLIr] = de_PrefixListIdSet(__getArrayIfSingleItem(output[_pLIr][_i]), context);
  }
  if (output[_tPo] != null) {
    contents[_TP] = __strictParseInt32(output[_tPo]) as number;
  }
  if (output.groups === "") {
    contents[_UIGP] = [];
  } else if (output[_gr] != null && output[_gr][_i] != null) {
    contents[_UIGP] = de_UserIdGroupPairSet(__getArrayIfSingleItem(output[_gr][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2StaleIpPermissionSet
 */
const de_StaleIpPermissionSet = (output: any, context: __SerdeContext): StaleIpPermission[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_StaleIpPermission(entry, context);
    });
};

/**
 * deserializeAws_ec2StaleSecurityGroup
 */
const de_StaleSecurityGroup = (output: any, context: __SerdeContext): StaleSecurityGroup => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  if (output.staleIpPermissions === "") {
    contents[_SIP] = [];
  } else if (output[_sIP] != null && output[_sIP][_i] != null) {
    contents[_SIP] = de_StaleIpPermissionSet(__getArrayIfSingleItem(output[_sIP][_i]), context);
  }
  if (output.staleIpPermissionsEgress === "") {
    contents[_SIPE] = [];
  } else if (output[_sIPE] != null && output[_sIPE][_i] != null) {
    contents[_SIPE] = de_StaleIpPermissionSet(__getArrayIfSingleItem(output[_sIPE][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2StaleSecurityGroupSet
 */
const de_StaleSecurityGroupSet = (output: any, context: __SerdeContext): StaleSecurityGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_StaleSecurityGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2StartInstancesResult
 */
const de_StartInstancesResult = (output: any, context: __SerdeContext): StartInstancesResult => {
  const contents: any = {};
  if (output.instancesSet === "") {
    contents[_SIta] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_SIta] = de_InstanceStateChangeList(__getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2StartNetworkInsightsAccessScopeAnalysisResult
 */
const de_StartNetworkInsightsAccessScopeAnalysisResult = (
  output: any,
  context: __SerdeContext
): StartNetworkInsightsAccessScopeAnalysisResult => {
  const contents: any = {};
  if (output[_nIASAe] != null) {
    contents[_NIASAet] = de_NetworkInsightsAccessScopeAnalysis(output[_nIASAe], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2StartNetworkInsightsAnalysisResult
 */
const de_StartNetworkInsightsAnalysisResult = (
  output: any,
  context: __SerdeContext
): StartNetworkInsightsAnalysisResult => {
  const contents: any = {};
  if (output[_nIA] != null) {
    contents[_NIAe] = de_NetworkInsightsAnalysis(output[_nIA], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2StartVpcEndpointServicePrivateDnsVerificationResult
 */
const de_StartVpcEndpointServicePrivateDnsVerificationResult = (
  output: any,
  context: __SerdeContext
): StartVpcEndpointServicePrivateDnsVerificationResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_RV] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2StateReason
 */
const de_StateReason = (output: any, context: __SerdeContext): StateReason => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2StopInstancesResult
 */
const de_StopInstancesResult = (output: any, context: __SerdeContext): StopInstancesResult => {
  const contents: any = {};
  if (output.instancesSet === "") {
    contents[_SIto] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_SIto] = de_InstanceStateChangeList(__getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2Storage
 */
const de_Storage = (output: any, context: __SerdeContext): Storage => {
  const contents: any = {};
  if (output[_S_] != null) {
    contents[_S_] = de_S3Storage(output[_S_], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2StoreImageTaskResult
 */
const de_StoreImageTaskResult = (output: any, context: __SerdeContext): StoreImageTaskResult => {
  const contents: any = {};
  if (output[_aIm] != null) {
    contents[_AIm] = __expectString(output[_aIm]);
  }
  if (output[_tSTa] != null) {
    contents[_TSTa] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_tSTa]));
  }
  if (output[_bu] != null) {
    contents[_B] = __expectString(output[_bu]);
  }
  if (output[_sKo] != null) {
    contents[_SKo] = __expectString(output[_sKo]);
  }
  if (output[_pP] != null) {
    contents[_PP] = __strictParseInt32(output[_pP]) as number;
  }
  if (output[_sTS] != null) {
    contents[_STSt] = __expectString(output[_sTS]);
  }
  if (output[_sTFR] != null) {
    contents[_STFR] = __expectString(output[_sTFR]);
  }
  return contents;
};

/**
 * deserializeAws_ec2StoreImageTaskResultSet
 */
const de_StoreImageTaskResultSet = (output: any, context: __SerdeContext): StoreImageTaskResult[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_StoreImageTaskResult(entry, context);
    });
};

/**
 * deserializeAws_ec2StringList
 */
const de_StringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Subnet
 */
const de_Subnet = (output: any, context: __SerdeContext): Subnet => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_aZI] != null) {
    contents[_AZI] = __expectString(output[_aZI]);
  }
  if (output[_aIAC] != null) {
    contents[_AIAC] = __strictParseInt32(output[_aIAC]) as number;
  }
  if (output[_cB] != null) {
    contents[_CB] = __expectString(output[_cB]);
  }
  if (output[_dFA] != null) {
    contents[_DFA] = __parseBoolean(output[_dFA]);
  }
  if (output[_eLADI] != null) {
    contents[_ELADI] = __strictParseInt32(output[_eLADI]) as number;
  }
  if (output[_mPIOL] != null) {
    contents[_MPIOL] = __parseBoolean(output[_mPIOL]);
  }
  if (output[_mCOIOL] != null) {
    contents[_MCOIOL] = __parseBoolean(output[_mCOIOL]);
  }
  if (output[_cOIP] != null) {
    contents[_COIP] = __expectString(output[_cOIP]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_aIAOC] != null) {
    contents[_AIAOC] = __parseBoolean(output[_aIAOC]);
  }
  if (output.ipv6CidrBlockAssociationSet === "") {
    contents[_ICBAS] = [];
  } else if (output[_iCBAS] != null && output[_iCBAS][_i] != null) {
    contents[_ICBAS] = de_SubnetIpv6CidrBlockAssociationSet(__getArrayIfSingleItem(output[_iCBAS][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sAub] != null) {
    contents[_SAub] = __expectString(output[_sAub]);
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output[_eDn] != null) {
    contents[_EDn] = __parseBoolean(output[_eDn]);
  }
  if (output[_iN] != null) {
    contents[_IN] = __parseBoolean(output[_iN]);
  }
  if (output[_pDNOOL] != null) {
    contents[_PDNOOL] = de_PrivateDnsNameOptionsOnLaunch(output[_pDNOOL], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SubnetAssociation
 */
const de_SubnetAssociation = (output: any, context: __SerdeContext): SubnetAssociation => {
  const contents: any = {};
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SubnetAssociationList
 */
const de_SubnetAssociationList = (output: any, context: __SerdeContext): SubnetAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SubnetAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2SubnetCidrBlockState
 */
const de_SubnetCidrBlockState = (output: any, context: __SerdeContext): SubnetCidrBlockState => {
  const contents: any = {};
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SubnetCidrReservation
 */
const de_SubnetCidrReservation = (output: any, context: __SerdeContext): SubnetCidrReservation => {
  const contents: any = {};
  if (output[_sCRI] != null) {
    contents[_SCRI] = __expectString(output[_sCRI]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_ci] != null) {
    contents[_C] = __expectString(output[_ci]);
  }
  if (output[_rT] != null) {
    contents[_RTe] = __expectString(output[_rT]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SubnetCidrReservationList
 */
const de_SubnetCidrReservationList = (output: any, context: __SerdeContext): SubnetCidrReservation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SubnetCidrReservation(entry, context);
    });
};

/**
 * deserializeAws_ec2SubnetIpv6CidrBlockAssociation
 */
const de_SubnetIpv6CidrBlockAssociation = (output: any, context: __SerdeContext): SubnetIpv6CidrBlockAssociation => {
  const contents: any = {};
  if (output[_aIs] != null) {
    contents[_AIss] = __expectString(output[_aIs]);
  }
  if (output[_iCB] != null) {
    contents[_ICB] = __expectString(output[_iCB]);
  }
  if (output[_iCBS] != null) {
    contents[_ICBS] = de_SubnetCidrBlockState(output[_iCBS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2SubnetIpv6CidrBlockAssociationSet
 */
const de_SubnetIpv6CidrBlockAssociationSet = (
  output: any,
  context: __SerdeContext
): SubnetIpv6CidrBlockAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SubnetIpv6CidrBlockAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2SubnetList
 */
const de_SubnetList = (output: any, context: __SerdeContext): Subnet[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Subnet(entry, context);
    });
};

/**
 * deserializeAws_ec2Subscription
 */
const de_Subscription = (output: any, context: __SerdeContext): Subscription => {
  const contents: any = {};
  if (output[_s] != null) {
    contents[_S] = __expectString(output[_s]);
  }
  if (output[_d] != null) {
    contents[_D] = __expectString(output[_d]);
  }
  if (output[_met] != null) {
    contents[_Met] = __expectString(output[_met]);
  }
  if (output[_stat] != null) {
    contents[_Sta] = __expectString(output[_stat]);
  }
  if (output[_pe] != null) {
    contents[_Per] = __expectString(output[_pe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SubscriptionList
 */
const de_SubscriptionList = (output: any, context: __SerdeContext): Subscription[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Subscription(entry, context);
    });
};

/**
 * deserializeAws_ec2SuccessfulInstanceCreditSpecificationItem
 */
const de_SuccessfulInstanceCreditSpecificationItem = (
  output: any,
  context: __SerdeContext
): SuccessfulInstanceCreditSpecificationItem => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SuccessfulInstanceCreditSpecificationSet
 */
const de_SuccessfulInstanceCreditSpecificationSet = (
  output: any,
  context: __SerdeContext
): SuccessfulInstanceCreditSpecificationItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SuccessfulInstanceCreditSpecificationItem(entry, context);
    });
};

/**
 * deserializeAws_ec2SuccessfulQueuedPurchaseDeletion
 */
const de_SuccessfulQueuedPurchaseDeletion = (
  output: any,
  context: __SerdeContext
): SuccessfulQueuedPurchaseDeletion => {
  const contents: any = {};
  if (output[_rII] != null) {
    contents[_RIIe] = __expectString(output[_rII]);
  }
  return contents;
};

/**
 * deserializeAws_ec2SuccessfulQueuedPurchaseDeletionSet
 */
const de_SuccessfulQueuedPurchaseDeletionSet = (
  output: any,
  context: __SerdeContext
): SuccessfulQueuedPurchaseDeletion[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_SuccessfulQueuedPurchaseDeletion(entry, context);
    });
};

/**
 * deserializeAws_ec2SupportedAdditionalProcessorFeatureList
 */
const de_SupportedAdditionalProcessorFeatureList = (
  output: any,
  context: __SerdeContext
): SupportedAdditionalProcessorFeature[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2SupportedIpAddressTypes
 */
const de_SupportedIpAddressTypes = (output: any, context: __SerdeContext): ServiceConnectivityType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Tag
 */
const de_Tag = (output: any, context: __SerdeContext): Tag => {
  const contents: any = {};
  if (output[_k] != null) {
    contents[_Ke] = __expectString(output[_k]);
  }
  if (output[_v] != null) {
    contents[_Va] = __expectString(output[_v]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TagDescription
 */
const de_TagDescription = (output: any, context: __SerdeContext): TagDescription => {
  const contents: any = {};
  if (output[_k] != null) {
    contents[_Ke] = __expectString(output[_k]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_v] != null) {
    contents[_Va] = __expectString(output[_v]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TagDescriptionList
 */
const de_TagDescriptionList = (output: any, context: __SerdeContext): TagDescription[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TagDescription(entry, context);
    });
};

/**
 * deserializeAws_ec2TagList
 */
const de_TagList = (output: any, context: __SerdeContext): Tag[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Tag(entry, context);
    });
};

/**
 * deserializeAws_ec2TagSpecification
 */
const de_TagSpecification = (output: any, context: __SerdeContext): TagSpecification => {
  const contents: any = {};
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output.Tag === "") {
    contents[_Ta] = [];
  } else if (output[_Tag] != null && output[_Tag][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_Tag][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TagSpecificationList
 */
const de_TagSpecificationList = (output: any, context: __SerdeContext): TagSpecification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TagSpecification(entry, context);
    });
};

/**
 * deserializeAws_ec2TargetCapacitySpecification
 */
const de_TargetCapacitySpecification = (output: any, context: __SerdeContext): TargetCapacitySpecification => {
  const contents: any = {};
  if (output[_tTC] != null) {
    contents[_TTC] = __strictParseInt32(output[_tTC]) as number;
  }
  if (output[_oDTC] != null) {
    contents[_ODTC] = __strictParseInt32(output[_oDTC]) as number;
  }
  if (output[_sTC] != null) {
    contents[_STC] = __strictParseInt32(output[_sTC]) as number;
  }
  if (output[_dTCT] != null) {
    contents[_DTCT] = __expectString(output[_dTCT]);
  }
  if (output[_tCUT] != null) {
    contents[_TCUT] = __expectString(output[_tCUT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TargetConfiguration
 */
const de_TargetConfiguration = (output: any, context: __SerdeContext): TargetConfiguration => {
  const contents: any = {};
  if (output[_iC] != null) {
    contents[_IC] = __strictParseInt32(output[_iC]) as number;
  }
  if (output[_oIf] != null) {
    contents[_OI] = __expectString(output[_oIf]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TargetGroup
 */
const de_TargetGroup = (output: any, context: __SerdeContext): TargetGroup => {
  const contents: any = {};
  if (output[_ar] != null) {
    contents[_Ar] = __expectString(output[_ar]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TargetGroups
 */
const de_TargetGroups = (output: any, context: __SerdeContext): TargetGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TargetGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2TargetGroupsConfig
 */
const de_TargetGroupsConfig = (output: any, context: __SerdeContext): TargetGroupsConfig => {
  const contents: any = {};
  if (output.targetGroups === "") {
    contents[_TG] = [];
  } else if (output[_tGa] != null && output[_tGa][_i] != null) {
    contents[_TG] = de_TargetGroups(__getArrayIfSingleItem(output[_tGa][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TargetNetwork
 */
const de_TargetNetwork = (output: any, context: __SerdeContext): TargetNetwork => {
  const contents: any = {};
  if (output[_aIs] != null) {
    contents[_AIss] = __expectString(output[_aIs]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_tNI] != null) {
    contents[_TNI] = __expectString(output[_tNI]);
  }
  if (output[_cVEI] != null) {
    contents[_CVEI] = __expectString(output[_cVEI]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_AssociationStatus(output[_sta], context);
  }
  if (output.securityGroups === "") {
    contents[_SG] = [];
  } else if (output[_sGe] != null && output[_sGe][_i] != null) {
    contents[_SG] = de_ValueStringList(__getArrayIfSingleItem(output[_sGe][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TargetNetworkSet
 */
const de_TargetNetworkSet = (output: any, context: __SerdeContext): TargetNetwork[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TargetNetwork(entry, context);
    });
};

/**
 * deserializeAws_ec2TargetReservationValue
 */
const de_TargetReservationValue = (output: any, context: __SerdeContext): TargetReservationValue => {
  const contents: any = {};
  if (output[_rVe] != null) {
    contents[_RVe] = de_ReservationValue(output[_rVe], context);
  }
  if (output[_tCa] != null) {
    contents[_TCar] = de_TargetConfiguration(output[_tCa], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TargetReservationValueSet
 */
const de_TargetReservationValueSet = (output: any, context: __SerdeContext): TargetReservationValue[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TargetReservationValue(entry, context);
    });
};

/**
 * deserializeAws_ec2TerminateClientVpnConnectionsResult
 */
const de_TerminateClientVpnConnectionsResult = (
  output: any,
  context: __SerdeContext
): TerminateClientVpnConnectionsResult => {
  const contents: any = {};
  if (output[_cVEI] != null) {
    contents[_CVEI] = __expectString(output[_cVEI]);
  }
  if (output[_us] != null) {
    contents[_Us] = __expectString(output[_us]);
  }
  if (output.connectionStatuses === "") {
    contents[_CSon] = [];
  } else if (output[_cSon] != null && output[_cSon][_i] != null) {
    contents[_CSon] = de_TerminateConnectionStatusSet(__getArrayIfSingleItem(output[_cSon][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TerminateConnectionStatus
 */
const de_TerminateConnectionStatus = (output: any, context: __SerdeContext): TerminateConnectionStatus => {
  const contents: any = {};
  if (output[_cIon] != null) {
    contents[_CIo] = __expectString(output[_cIon]);
  }
  if (output[_pSre] != null) {
    contents[_PSre] = de_ClientVpnConnectionStatus(output[_pSre], context);
  }
  if (output[_cSur] != null) {
    contents[_CSur] = de_ClientVpnConnectionStatus(output[_cSur], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TerminateConnectionStatusSet
 */
const de_TerminateConnectionStatusSet = (output: any, context: __SerdeContext): TerminateConnectionStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TerminateConnectionStatus(entry, context);
    });
};

/**
 * deserializeAws_ec2TerminateInstancesResult
 */
const de_TerminateInstancesResult = (output: any, context: __SerdeContext): TerminateInstancesResult => {
  const contents: any = {};
  if (output.instancesSet === "") {
    contents[_TIer] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_TIer] = de_InstanceStateChangeList(__getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ThreadsPerCoreList
 */
const de_ThreadsPerCoreList = (output: any, context: __SerdeContext): number[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __strictParseInt32(entry) as number;
    });
};

/**
 * deserializeAws_ec2ThroughResourcesStatement
 */
const de_ThroughResourcesStatement = (output: any, context: __SerdeContext): ThroughResourcesStatement => {
  const contents: any = {};
  if (output[_rSes] != null) {
    contents[_RSe] = de_ResourceStatement(output[_rSes], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ThroughResourcesStatementList
 */
const de_ThroughResourcesStatementList = (output: any, context: __SerdeContext): ThroughResourcesStatement[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_ThroughResourcesStatement(entry, context);
    });
};

/**
 * deserializeAws_ec2TotalLocalStorageGB
 */
const de_TotalLocalStorageGB = (output: any, context: __SerdeContext): TotalLocalStorageGB => {
  const contents: any = {};
  if (output[_m] != null) {
    contents[_M] = __strictParseFloat(output[_m]) as number;
  }
  if (output[_ma] != null) {
    contents[_Ma] = __strictParseFloat(output[_ma]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2TrafficMirrorFilter
 */
const de_TrafficMirrorFilter = (output: any, context: __SerdeContext): TrafficMirrorFilter => {
  const contents: any = {};
  if (output[_tMFI] != null) {
    contents[_TMFI] = __expectString(output[_tMFI]);
  }
  if (output.ingressFilterRuleSet === "") {
    contents[_IFRn] = [];
  } else if (output[_iFRS] != null && output[_iFRS][_i] != null) {
    contents[_IFRn] = de_TrafficMirrorFilterRuleList(__getArrayIfSingleItem(output[_iFRS][_i]), context);
  }
  if (output.egressFilterRuleSet === "") {
    contents[_EFR] = [];
  } else if (output[_eFRS] != null && output[_eFRS][_i] != null) {
    contents[_EFR] = de_TrafficMirrorFilterRuleList(__getArrayIfSingleItem(output[_eFRS][_i]), context);
  }
  if (output.networkServiceSet === "") {
    contents[_NSe] = [];
  } else if (output[_nSS] != null && output[_nSS][_i] != null) {
    contents[_NSe] = de_TrafficMirrorNetworkServiceList(__getArrayIfSingleItem(output[_nSS][_i]), context);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TrafficMirrorFilterRule
 */
const de_TrafficMirrorFilterRule = (output: any, context: __SerdeContext): TrafficMirrorFilterRule => {
  const contents: any = {};
  if (output[_tMFRI] != null) {
    contents[_TMFRI] = __expectString(output[_tMFRI]);
  }
  if (output[_tMFI] != null) {
    contents[_TMFI] = __expectString(output[_tMFI]);
  }
  if (output[_tDr] != null) {
    contents[_TD] = __expectString(output[_tDr]);
  }
  if (output[_rN] != null) {
    contents[_RNu] = __strictParseInt32(output[_rN]) as number;
  }
  if (output[_rA] != null) {
    contents[_RAu] = __expectString(output[_rA]);
  }
  if (output[_pr] != null) {
    contents[_P] = __strictParseInt32(output[_pr]) as number;
  }
  if (output[_dPR] != null) {
    contents[_DPR] = de_TrafficMirrorPortRange(output[_dPR], context);
  }
  if (output[_sPR] != null) {
    contents[_SPR] = de_TrafficMirrorPortRange(output[_sPR], context);
  }
  if (output[_dCB] != null) {
    contents[_DCB] = __expectString(output[_dCB]);
  }
  if (output[_sCB] != null) {
    contents[_SCB] = __expectString(output[_sCB]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TrafficMirrorFilterRuleList
 */
const de_TrafficMirrorFilterRuleList = (output: any, context: __SerdeContext): TrafficMirrorFilterRule[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TrafficMirrorFilterRule(entry, context);
    });
};

/**
 * deserializeAws_ec2TrafficMirrorFilterSet
 */
const de_TrafficMirrorFilterSet = (output: any, context: __SerdeContext): TrafficMirrorFilter[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TrafficMirrorFilter(entry, context);
    });
};

/**
 * deserializeAws_ec2TrafficMirrorNetworkServiceList
 */
const de_TrafficMirrorNetworkServiceList = (output: any, context: __SerdeContext): TrafficMirrorNetworkService[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2TrafficMirrorPortRange
 */
const de_TrafficMirrorPortRange = (output: any, context: __SerdeContext): TrafficMirrorPortRange => {
  const contents: any = {};
  if (output[_fP] != null) {
    contents[_FP] = __strictParseInt32(output[_fP]) as number;
  }
  if (output[_tPo] != null) {
    contents[_TP] = __strictParseInt32(output[_tPo]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2TrafficMirrorSession
 */
const de_TrafficMirrorSession = (output: any, context: __SerdeContext): TrafficMirrorSession => {
  const contents: any = {};
  if (output[_tMSI] != null) {
    contents[_TMSI] = __expectString(output[_tMSI]);
  }
  if (output[_tMTI] != null) {
    contents[_TMTI] = __expectString(output[_tMTI]);
  }
  if (output[_tMFI] != null) {
    contents[_TMFI] = __expectString(output[_tMFI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_pLa] != null) {
    contents[_PL] = __strictParseInt32(output[_pLa]) as number;
  }
  if (output[_sNes] != null) {
    contents[_SN] = __strictParseInt32(output[_sNes]) as number;
  }
  if (output[_vNI] != null) {
    contents[_VNI] = __strictParseInt32(output[_vNI]) as number;
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TrafficMirrorSessionSet
 */
const de_TrafficMirrorSessionSet = (output: any, context: __SerdeContext): TrafficMirrorSession[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TrafficMirrorSession(entry, context);
    });
};

/**
 * deserializeAws_ec2TrafficMirrorTarget
 */
const de_TrafficMirrorTarget = (output: any, context: __SerdeContext): TrafficMirrorTarget => {
  const contents: any = {};
  if (output[_tMTI] != null) {
    contents[_TMTI] = __expectString(output[_tMTI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_nLBA] != null) {
    contents[_NLBA] = __expectString(output[_nLBA]);
  }
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_gLBEI] != null) {
    contents[_GLBEI] = __expectString(output[_gLBEI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TrafficMirrorTargetSet
 */
const de_TrafficMirrorTargetSet = (output: any, context: __SerdeContext): TrafficMirrorTarget[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TrafficMirrorTarget(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGateway
 */
const de_TransitGateway = (output: any, context: __SerdeContext): TransitGateway => {
  const contents: any = {};
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  if (output[_tGAra] != null) {
    contents[_TGAran] = __expectString(output[_tGAra]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output[_op] != null) {
    contents[_O] = de_TransitGatewayOptions(output[_op], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayAssociation
 */
const de_TransitGatewayAssociation = (output: any, context: __SerdeContext): TransitGatewayAssociation => {
  const contents: any = {};
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = __expectString(output[_tGRTI]);
  }
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayAttachment
 */
const de_TransitGatewayAttachment = (output: any, context: __SerdeContext): TransitGatewayAttachment => {
  const contents: any = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  if (output[_tGOI] != null) {
    contents[_TGOI] = __expectString(output[_tGOI]);
  }
  if (output[_rOI] != null) {
    contents[_ROI] = __expectString(output[_rOI]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_ass] != null) {
    contents[_Asso] = de_TransitGatewayAttachmentAssociation(output[_ass], context);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayAttachmentAssociation
 */
const de_TransitGatewayAttachmentAssociation = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentAssociation => {
  const contents: any = {};
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = __expectString(output[_tGRTI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayAttachmentBgpConfiguration
 */
const de_TransitGatewayAttachmentBgpConfiguration = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentBgpConfiguration => {
  const contents: any = {};
  if (output[_tGAran] != null) {
    contents[_TGArans] = __strictParseLong(output[_tGAran]) as number;
  }
  if (output[_pAee] != null) {
    contents[_PAee] = __strictParseLong(output[_pAee]) as number;
  }
  if (output[_tGArans] != null) {
    contents[_TGA] = __expectString(output[_tGArans]);
  }
  if (output[_pAe] != null) {
    contents[_PAe] = __expectString(output[_pAe]);
  }
  if (output[_bSg] != null) {
    contents[_BS] = __expectString(output[_bSg]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayAttachmentBgpConfigurationList
 */
const de_TransitGatewayAttachmentBgpConfigurationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentBgpConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayAttachmentBgpConfiguration(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayAttachmentList
 */
const de_TransitGatewayAttachmentList = (output: any, context: __SerdeContext): TransitGatewayAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayAttachmentPropagation
 */
const de_TransitGatewayAttachmentPropagation = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentPropagation => {
  const contents: any = {};
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = __expectString(output[_tGRTI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayAttachmentPropagationList
 */
const de_TransitGatewayAttachmentPropagationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayAttachmentPropagation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayAttachmentPropagation(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayConnect
 */
const de_TransitGatewayConnect = (output: any, context: __SerdeContext): TransitGatewayConnect => {
  const contents: any = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_tTGAI] != null) {
    contents[_TTGAI] = __expectString(output[_tTGAI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output[_op] != null) {
    contents[_O] = de_TransitGatewayConnectOptions(output[_op], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayConnectList
 */
const de_TransitGatewayConnectList = (output: any, context: __SerdeContext): TransitGatewayConnect[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayConnect(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayConnectOptions
 */
const de_TransitGatewayConnectOptions = (output: any, context: __SerdeContext): TransitGatewayConnectOptions => {
  const contents: any = {};
  if (output[_pr] != null) {
    contents[_P] = __expectString(output[_pr]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayConnectPeer
 */
const de_TransitGatewayConnectPeer = (output: any, context: __SerdeContext): TransitGatewayConnectPeer => {
  const contents: any = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_tGCPI] != null) {
    contents[_TGCPI] = __expectString(output[_tGCPI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output[_cPC] != null) {
    contents[_CPC] = de_TransitGatewayConnectPeerConfiguration(output[_cPC], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayConnectPeerConfiguration
 */
const de_TransitGatewayConnectPeerConfiguration = (
  output: any,
  context: __SerdeContext
): TransitGatewayConnectPeerConfiguration => {
  const contents: any = {};
  if (output[_tGArans] != null) {
    contents[_TGA] = __expectString(output[_tGArans]);
  }
  if (output[_pAe] != null) {
    contents[_PAe] = __expectString(output[_pAe]);
  }
  if (output.insideCidrBlocks === "") {
    contents[_ICBn] = [];
  } else if (output[_iCBn] != null && output[_iCBn][_i] != null) {
    contents[_ICBn] = de_InsideCidrBlocksStringList(__getArrayIfSingleItem(output[_iCBn][_i]), context);
  }
  if (output[_pr] != null) {
    contents[_P] = __expectString(output[_pr]);
  }
  if (output.bgpConfigurations === "") {
    contents[_BCg] = [];
  } else if (output[_bCg] != null && output[_bCg][_i] != null) {
    contents[_BCg] = de_TransitGatewayAttachmentBgpConfigurationList(__getArrayIfSingleItem(output[_bCg][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayConnectPeerList
 */
const de_TransitGatewayConnectPeerList = (output: any, context: __SerdeContext): TransitGatewayConnectPeer[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayConnectPeer(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayList
 */
const de_TransitGatewayList = (output: any, context: __SerdeContext): TransitGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupMembers
 */
const de_TransitGatewayMulticastDeregisteredGroupMembers = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDeregisteredGroupMembers => {
  const contents: any = {};
  if (output[_tGMDI] != null) {
    contents[_TGMDI] = __expectString(output[_tGMDI]);
  }
  if (output.deregisteredNetworkInterfaceIds === "") {
    contents[_DNII] = [];
  } else if (output[_dNII] != null && output[_dNII][_i] != null) {
    contents[_DNII] = de_ValueStringList(__getArrayIfSingleItem(output[_dNII][_i]), context);
  }
  if (output[_gIA] != null) {
    contents[_GIA] = __expectString(output[_gIA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDeregisteredGroupSources
 */
const de_TransitGatewayMulticastDeregisteredGroupSources = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDeregisteredGroupSources => {
  const contents: any = {};
  if (output[_tGMDI] != null) {
    contents[_TGMDI] = __expectString(output[_tGMDI]);
  }
  if (output.deregisteredNetworkInterfaceIds === "") {
    contents[_DNII] = [];
  } else if (output[_dNII] != null && output[_dNII][_i] != null) {
    contents[_DNII] = de_ValueStringList(__getArrayIfSingleItem(output[_dNII][_i]), context);
  }
  if (output[_gIA] != null) {
    contents[_GIA] = __expectString(output[_gIA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDomain
 */
const de_TransitGatewayMulticastDomain = (output: any, context: __SerdeContext): TransitGatewayMulticastDomain => {
  const contents: any = {};
  if (output[_tGMDI] != null) {
    contents[_TGMDI] = __expectString(output[_tGMDI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  if (output[_tGMDA] != null) {
    contents[_TGMDA] = __expectString(output[_tGMDA]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_op] != null) {
    contents[_O] = de_TransitGatewayMulticastDomainOptions(output[_op], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDomainAssociation
 */
const de_TransitGatewayMulticastDomainAssociation = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomainAssociation => {
  const contents: any = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_rOI] != null) {
    contents[_ROI] = __expectString(output[_rOI]);
  }
  if (output[_su] != null) {
    contents[_Su] = de_SubnetAssociation(output[_su], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDomainAssociationList
 */
const de_TransitGatewayMulticastDomainAssociationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomainAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayMulticastDomainAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDomainAssociations
 */
const de_TransitGatewayMulticastDomainAssociations = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomainAssociations => {
  const contents: any = {};
  if (output[_tGMDI] != null) {
    contents[_TGMDI] = __expectString(output[_tGMDI]);
  }
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_rOI] != null) {
    contents[_ROI] = __expectString(output[_rOI]);
  }
  if (output.subnets === "") {
    contents[_Subn] = [];
  } else if (output[_sub] != null && output[_sub][_i] != null) {
    contents[_Subn] = de_SubnetAssociationList(__getArrayIfSingleItem(output[_sub][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDomainList
 */
const de_TransitGatewayMulticastDomainList = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomain[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayMulticastDomain(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayMulticastDomainOptions
 */
const de_TransitGatewayMulticastDomainOptions = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastDomainOptions => {
  const contents: any = {};
  if (output[_iSg] != null) {
    contents[_ISg] = __expectString(output[_iSg]);
  }
  if (output[_sSS] != null) {
    contents[_SSS] = __expectString(output[_sSS]);
  }
  if (output[_aASA] != null) {
    contents[_AASA] = __expectString(output[_aASA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastGroup
 */
const de_TransitGatewayMulticastGroup = (output: any, context: __SerdeContext): TransitGatewayMulticastGroup => {
  const contents: any = {};
  if (output[_gIA] != null) {
    contents[_GIA] = __expectString(output[_gIA]);
  }
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_sIu] != null) {
    contents[_SIub] = __expectString(output[_sIu]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_rOI] != null) {
    contents[_ROI] = __expectString(output[_rOI]);
  }
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_gM] != null) {
    contents[_GM] = __parseBoolean(output[_gM]);
  }
  if (output[_gSr] != null) {
    contents[_GS] = __parseBoolean(output[_gSr]);
  }
  if (output[_mTe] != null) {
    contents[_MTe] = __expectString(output[_mTe]);
  }
  if (output[_sTo] != null) {
    contents[_STo] = __expectString(output[_sTo]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastGroupList
 */
const de_TransitGatewayMulticastGroupList = (output: any, context: __SerdeContext): TransitGatewayMulticastGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayMulticastGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayMulticastRegisteredGroupMembers
 */
const de_TransitGatewayMulticastRegisteredGroupMembers = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastRegisteredGroupMembers => {
  const contents: any = {};
  if (output[_tGMDI] != null) {
    contents[_TGMDI] = __expectString(output[_tGMDI]);
  }
  if (output.registeredNetworkInterfaceIds === "") {
    contents[_RNII] = [];
  } else if (output[_rNII] != null && output[_rNII][_i] != null) {
    contents[_RNII] = de_ValueStringList(__getArrayIfSingleItem(output[_rNII][_i]), context);
  }
  if (output[_gIA] != null) {
    contents[_GIA] = __expectString(output[_gIA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayMulticastRegisteredGroupSources
 */
const de_TransitGatewayMulticastRegisteredGroupSources = (
  output: any,
  context: __SerdeContext
): TransitGatewayMulticastRegisteredGroupSources => {
  const contents: any = {};
  if (output[_tGMDI] != null) {
    contents[_TGMDI] = __expectString(output[_tGMDI]);
  }
  if (output.registeredNetworkInterfaceIds === "") {
    contents[_RNII] = [];
  } else if (output[_rNII] != null && output[_rNII][_i] != null) {
    contents[_RNII] = de_ValueStringList(__getArrayIfSingleItem(output[_rNII][_i]), context);
  }
  if (output[_gIA] != null) {
    contents[_GIA] = __expectString(output[_gIA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayOptions
 */
const de_TransitGatewayOptions = (output: any, context: __SerdeContext): TransitGatewayOptions => {
  const contents: any = {};
  if (output[_aSA] != null) {
    contents[_ASA] = __strictParseLong(output[_aSA]) as number;
  }
  if (output.transitGatewayCidrBlocks === "") {
    contents[_TGCB] = [];
  } else if (output[_tGCB] != null && output[_tGCB][_i] != null) {
    contents[_TGCB] = de_ValueStringList(__getArrayIfSingleItem(output[_tGCB][_i]), context);
  }
  if (output[_aASAu] != null) {
    contents[_AASAu] = __expectString(output[_aASAu]);
  }
  if (output[_dRTA] != null) {
    contents[_DRTA] = __expectString(output[_dRTA]);
  }
  if (output[_aDRTI] != null) {
    contents[_ADRTI] = __expectString(output[_aDRTI]);
  }
  if (output[_dRTP] != null) {
    contents[_DRTP] = __expectString(output[_dRTP]);
  }
  if (output[_pDRTI] != null) {
    contents[_PDRTI] = __expectString(output[_pDRTI]);
  }
  if (output[_vESpn] != null) {
    contents[_VES] = __expectString(output[_vESpn]);
  }
  if (output[_dSn] != null) {
    contents[_DSns] = __expectString(output[_dSn]);
  }
  if (output[_sGRSec] != null) {
    contents[_SGRS] = __expectString(output[_sGRSec]);
  }
  if (output[_mSu] != null) {
    contents[_MSu] = __expectString(output[_mSu]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPeeringAttachment
 */
const de_TransitGatewayPeeringAttachment = (output: any, context: __SerdeContext): TransitGatewayPeeringAttachment => {
  const contents: any = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_aTGAI] != null) {
    contents[_ATGAI] = __expectString(output[_aTGAI]);
  }
  if (output[_rTIe] != null) {
    contents[_RTIe] = de_PeeringTgwInfo(output[_rTIe], context);
  }
  if (output[_aTI] != null) {
    contents[_ATIc] = de_PeeringTgwInfo(output[_aTI], context);
  }
  if (output[_op] != null) {
    contents[_O] = de_TransitGatewayPeeringAttachmentOptions(output[_op], context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_PeeringAttachmentStatus(output[_sta], context);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPeeringAttachmentList
 */
const de_TransitGatewayPeeringAttachmentList = (
  output: any,
  context: __SerdeContext
): TransitGatewayPeeringAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayPeeringAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayPeeringAttachmentOptions
 */
const de_TransitGatewayPeeringAttachmentOptions = (
  output: any,
  context: __SerdeContext
): TransitGatewayPeeringAttachmentOptions => {
  const contents: any = {};
  if (output[_dRy] != null) {
    contents[_DRy] = __expectString(output[_dRy]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPolicyRule
 */
const de_TransitGatewayPolicyRule = (output: any, context: __SerdeContext): TransitGatewayPolicyRule => {
  const contents: any = {};
  if (output[_sCB] != null) {
    contents[_SCB] = __expectString(output[_sCB]);
  }
  if (output[_sPR] != null) {
    contents[_SPR] = __expectString(output[_sPR]);
  }
  if (output[_dCB] != null) {
    contents[_DCB] = __expectString(output[_dCB]);
  }
  if (output[_dPR] != null) {
    contents[_DPR] = __expectString(output[_dPR]);
  }
  if (output[_pr] != null) {
    contents[_P] = __expectString(output[_pr]);
  }
  if (output[_mDe] != null) {
    contents[_MDe] = de_TransitGatewayPolicyRuleMetaData(output[_mDe], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPolicyRuleMetaData
 */
const de_TransitGatewayPolicyRuleMetaData = (
  output: any,
  context: __SerdeContext
): TransitGatewayPolicyRuleMetaData => {
  const contents: any = {};
  if (output[_mDK] != null) {
    contents[_MDK] = __expectString(output[_mDK]);
  }
  if (output[_mDV] != null) {
    contents[_MDV] = __expectString(output[_mDV]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPolicyTable
 */
const de_TransitGatewayPolicyTable = (output: any, context: __SerdeContext): TransitGatewayPolicyTable => {
  const contents: any = {};
  if (output[_tGPTI] != null) {
    contents[_TGPTI] = __expectString(output[_tGPTI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPolicyTableAssociation
 */
const de_TransitGatewayPolicyTableAssociation = (
  output: any,
  context: __SerdeContext
): TransitGatewayPolicyTableAssociation => {
  const contents: any = {};
  if (output[_tGPTI] != null) {
    contents[_TGPTI] = __expectString(output[_tGPTI]);
  }
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPolicyTableAssociationList
 */
const de_TransitGatewayPolicyTableAssociationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayPolicyTableAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayPolicyTableAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayPolicyTableEntry
 */
const de_TransitGatewayPolicyTableEntry = (output: any, context: __SerdeContext): TransitGatewayPolicyTableEntry => {
  const contents: any = {};
  if (output[_pRN] != null) {
    contents[_PRNo] = __expectString(output[_pRN]);
  }
  if (output[_pRol] != null) {
    contents[_PRol] = de_TransitGatewayPolicyRule(output[_pRol], context);
  }
  if (output[_tRTI] != null) {
    contents[_TRTI] = __expectString(output[_tRTI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPolicyTableEntryList
 */
const de_TransitGatewayPolicyTableEntryList = (
  output: any,
  context: __SerdeContext
): TransitGatewayPolicyTableEntry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayPolicyTableEntry(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayPolicyTableList
 */
const de_TransitGatewayPolicyTableList = (output: any, context: __SerdeContext): TransitGatewayPolicyTable[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayPolicyTable(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayPrefixListAttachment
 */
const de_TransitGatewayPrefixListAttachment = (
  output: any,
  context: __SerdeContext
): TransitGatewayPrefixListAttachment => {
  const contents: any = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPrefixListReference
 */
const de_TransitGatewayPrefixListReference = (
  output: any,
  context: __SerdeContext
): TransitGatewayPrefixListReference => {
  const contents: any = {};
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = __expectString(output[_tGRTI]);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = __expectString(output[_pLI]);
  }
  if (output[_pLOI] != null) {
    contents[_PLOI] = __expectString(output[_pLOI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_bl] != null) {
    contents[_Bl] = __parseBoolean(output[_bl]);
  }
  if (output[_tGAr] != null) {
    contents[_TGAra] = de_TransitGatewayPrefixListAttachment(output[_tGAr], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayPrefixListReferenceSet
 */
const de_TransitGatewayPrefixListReferenceSet = (
  output: any,
  context: __SerdeContext
): TransitGatewayPrefixListReference[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayPrefixListReference(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayPropagation
 */
const de_TransitGatewayPropagation = (output: any, context: __SerdeContext): TransitGatewayPropagation => {
  const contents: any = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = __expectString(output[_tGRTI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_tGRTAI] != null) {
    contents[_TGRTAI] = __expectString(output[_tGRTAI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRoute
 */
const de_TransitGatewayRoute = (output: any, context: __SerdeContext): TransitGatewayRoute => {
  const contents: any = {};
  if (output[_dCB] != null) {
    contents[_DCB] = __expectString(output[_dCB]);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = __expectString(output[_pLI]);
  }
  if (output[_tGRTAI] != null) {
    contents[_TGRTAI] = __expectString(output[_tGRTAI]);
  }
  if (output.transitGatewayAttachments === "") {
    contents[_TGAr] = [];
  } else if (output[_tGA] != null && output[_tGA][_i] != null) {
    contents[_TGAr] = de_TransitGatewayRouteAttachmentList(__getArrayIfSingleItem(output[_tGA][_i]), context);
  }
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRouteAttachment
 */
const de_TransitGatewayRouteAttachment = (output: any, context: __SerdeContext): TransitGatewayRouteAttachment => {
  const contents: any = {};
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRouteAttachmentList
 */
const de_TransitGatewayRouteAttachmentList = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayRouteAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayRouteList
 */
const de_TransitGatewayRouteList = (output: any, context: __SerdeContext): TransitGatewayRoute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayRoute(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayRouteTable
 */
const de_TransitGatewayRouteTable = (output: any, context: __SerdeContext): TransitGatewayRouteTable => {
  const contents: any = {};
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = __expectString(output[_tGRTI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_dART] != null) {
    contents[_DART] = __parseBoolean(output[_dART]);
  }
  if (output[_dPRT] != null) {
    contents[_DPRT] = __parseBoolean(output[_dPRT]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRouteTableAnnouncement
 */
const de_TransitGatewayRouteTableAnnouncement = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTableAnnouncement => {
  const contents: any = {};
  if (output[_tGRTAI] != null) {
    contents[_TGRTAI] = __expectString(output[_tGRTAI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  if (output[_cNIo] != null) {
    contents[_CNIor] = __expectString(output[_cNIo]);
  }
  if (output[_pTGI] != null) {
    contents[_PTGI] = __expectString(output[_pTGI]);
  }
  if (output[_pCNI] != null) {
    contents[_PCNI] = __expectString(output[_pCNI]);
  }
  if (output[_pAI] != null) {
    contents[_PAIe] = __expectString(output[_pAI]);
  }
  if (output[_aDn] != null) {
    contents[_ADn] = __expectString(output[_aDn]);
  }
  if (output[_tGRTI] != null) {
    contents[_TGRTI] = __expectString(output[_tGRTI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRouteTableAnnouncementList
 */
const de_TransitGatewayRouteTableAnnouncementList = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTableAnnouncement[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayRouteTableAnnouncement(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayRouteTableAssociation
 */
const de_TransitGatewayRouteTableAssociation = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTableAssociation => {
  const contents: any = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRouteTableAssociationList
 */
const de_TransitGatewayRouteTableAssociationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTableAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayRouteTableAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayRouteTableList
 */
const de_TransitGatewayRouteTableList = (output: any, context: __SerdeContext): TransitGatewayRouteTable[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayRouteTable(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayRouteTablePropagation
 */
const de_TransitGatewayRouteTablePropagation = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTablePropagation => {
  const contents: any = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_tGRTAI] != null) {
    contents[_TGRTAI] = __expectString(output[_tGRTAI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayRouteTablePropagationList
 */
const de_TransitGatewayRouteTablePropagationList = (
  output: any,
  context: __SerdeContext
): TransitGatewayRouteTablePropagation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayRouteTablePropagation(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayRouteTableRoute
 */
const de_TransitGatewayRouteTableRoute = (output: any, context: __SerdeContext): TransitGatewayRouteTableRoute => {
  const contents: any = {};
  if (output[_dC] != null) {
    contents[_DCe] = __expectString(output[_dC]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_rOo] != null) {
    contents[_ROo] = __expectString(output[_rOo]);
  }
  if (output[_pLI] != null) {
    contents[_PLI] = __expectString(output[_pLI]);
  }
  if (output[_aIt] != null) {
    contents[_AIt] = __expectString(output[_aIt]);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  if (output[_rTe] != null) {
    contents[_RT] = __expectString(output[_rTe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayVpcAttachment
 */
const de_TransitGatewayVpcAttachment = (output: any, context: __SerdeContext): TransitGatewayVpcAttachment => {
  const contents: any = {};
  if (output[_tGAI] != null) {
    contents[_TGAI] = __expectString(output[_tGAI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_vOI] != null) {
    contents[_VOI] = __expectString(output[_vOI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output.subnetIds === "") {
    contents[_SIu] = [];
  } else if (output[_sIub] != null && output[_sIub][_i] != null) {
    contents[_SIu] = de_ValueStringList(__getArrayIfSingleItem(output[_sIub][_i]), context);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTre]));
  }
  if (output[_op] != null) {
    contents[_O] = de_TransitGatewayVpcAttachmentOptions(output[_op], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TransitGatewayVpcAttachmentList
 */
const de_TransitGatewayVpcAttachmentList = (output: any, context: __SerdeContext): TransitGatewayVpcAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TransitGatewayVpcAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2TransitGatewayVpcAttachmentOptions
 */
const de_TransitGatewayVpcAttachmentOptions = (
  output: any,
  context: __SerdeContext
): TransitGatewayVpcAttachmentOptions => {
  const contents: any = {};
  if (output[_dSn] != null) {
    contents[_DSns] = __expectString(output[_dSn]);
  }
  if (output[_sGRSec] != null) {
    contents[_SGRS] = __expectString(output[_sGRSec]);
  }
  if (output[_iSpvu] != null) {
    contents[_ISp] = __expectString(output[_iSpvu]);
  }
  if (output[_aMSp] != null) {
    contents[_AMS] = __expectString(output[_aMSp]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TrunkInterfaceAssociation
 */
const de_TrunkInterfaceAssociation = (output: any, context: __SerdeContext): TrunkInterfaceAssociation => {
  const contents: any = {};
  if (output[_aIs] != null) {
    contents[_AIss] = __expectString(output[_aIs]);
  }
  if (output[_bII] != null) {
    contents[_BII] = __expectString(output[_bII]);
  }
  if (output[_tII] != null) {
    contents[_TII] = __expectString(output[_tII]);
  }
  if (output[_iPnte] != null) {
    contents[_IPnte] = __expectString(output[_iPnte]);
  }
  if (output[_vIl] != null) {
    contents[_VIl] = __strictParseInt32(output[_vIl]) as number;
  }
  if (output[_gK] != null) {
    contents[_GK] = __strictParseInt32(output[_gK]) as number;
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2TrunkInterfaceAssociationList
 */
const de_TrunkInterfaceAssociationList = (output: any, context: __SerdeContext): TrunkInterfaceAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TrunkInterfaceAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2TunnelOption
 */
const de_TunnelOption = (output: any, context: __SerdeContext): TunnelOption => {
  const contents: any = {};
  if (output[_oIA] != null) {
    contents[_OIA] = __expectString(output[_oIA]);
  }
  if (output[_tICu] != null) {
    contents[_TIC] = __expectString(output[_tICu]);
  }
  if (output[_tIIC] != null) {
    contents[_TIIC] = __expectString(output[_tIIC]);
  }
  if (output[_pSK] != null) {
    contents[_PSK] = __expectString(output[_pSK]);
  }
  if (output[_pLSh] != null) {
    contents[_PLS] = __strictParseInt32(output[_pLSh]) as number;
  }
  if (output[_pLSha] != null) {
    contents[_PLSh] = __strictParseInt32(output[_pLSha]) as number;
  }
  if (output[_rMTS] != null) {
    contents[_RMTS] = __strictParseInt32(output[_rMTS]) as number;
  }
  if (output[_rFP] != null) {
    contents[_RFP] = __strictParseInt32(output[_rFP]) as number;
  }
  if (output[_rWS] != null) {
    contents[_RWS] = __strictParseInt32(output[_rWS]) as number;
  }
  if (output[_dTS] != null) {
    contents[_DTS] = __strictParseInt32(output[_dTS]) as number;
  }
  if (output[_dTA] != null) {
    contents[_DTA] = __expectString(output[_dTA]);
  }
  if (output.phase1EncryptionAlgorithmSet === "") {
    contents[_PEA] = [];
  } else if (output[_pEAS] != null && output[_pEAS][_i] != null) {
    contents[_PEA] = de_Phase1EncryptionAlgorithmsList(__getArrayIfSingleItem(output[_pEAS][_i]), context);
  }
  if (output.phase2EncryptionAlgorithmSet === "") {
    contents[_PEAh] = [];
  } else if (output[_pEASh] != null && output[_pEASh][_i] != null) {
    contents[_PEAh] = de_Phase2EncryptionAlgorithmsList(__getArrayIfSingleItem(output[_pEASh][_i]), context);
  }
  if (output.phase1IntegrityAlgorithmSet === "") {
    contents[_PIAh] = [];
  } else if (output[_pIASh] != null && output[_pIASh][_i] != null) {
    contents[_PIAh] = de_Phase1IntegrityAlgorithmsList(__getArrayIfSingleItem(output[_pIASh][_i]), context);
  }
  if (output.phase2IntegrityAlgorithmSet === "") {
    contents[_PIAha] = [];
  } else if (output[_pIASha] != null && output[_pIASha][_i] != null) {
    contents[_PIAha] = de_Phase2IntegrityAlgorithmsList(__getArrayIfSingleItem(output[_pIASha][_i]), context);
  }
  if (output.phase1DHGroupNumberSet === "") {
    contents[_PDHGN] = [];
  } else if (output[_pDHGNS] != null && output[_pDHGNS][_i] != null) {
    contents[_PDHGN] = de_Phase1DHGroupNumbersList(__getArrayIfSingleItem(output[_pDHGNS][_i]), context);
  }
  if (output.phase2DHGroupNumberSet === "") {
    contents[_PDHGNh] = [];
  } else if (output[_pDHGNSh] != null && output[_pDHGNSh][_i] != null) {
    contents[_PDHGNh] = de_Phase2DHGroupNumbersList(__getArrayIfSingleItem(output[_pDHGNSh][_i]), context);
  }
  if (output.ikeVersionSet === "") {
    contents[_IVk] = [];
  } else if (output[_iVS] != null && output[_iVS][_i] != null) {
    contents[_IVk] = de_IKEVersionsList(__getArrayIfSingleItem(output[_iVS][_i]), context);
  }
  if (output[_sAt] != null) {
    contents[_SA] = __expectString(output[_sAt]);
  }
  if (output[_lO] != null) {
    contents[_LO] = de_VpnTunnelLogOptions(output[_lO], context);
  }
  if (output[_eTLC] != null) {
    contents[_ETLC] = __parseBoolean(output[_eTLC]);
  }
  return contents;
};

/**
 * deserializeAws_ec2TunnelOptionsList
 */
const de_TunnelOptionsList = (output: any, context: __SerdeContext): TunnelOption[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_TunnelOption(entry, context);
    });
};

/**
 * deserializeAws_ec2UnassignIpv6AddressesResult
 */
const de_UnassignIpv6AddressesResult = (output: any, context: __SerdeContext): UnassignIpv6AddressesResult => {
  const contents: any = {};
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output.unassignedIpv6Addresses === "") {
    contents[_UIAn] = [];
  } else if (output[_uIA] != null && output[_uIA][_i] != null) {
    contents[_UIAn] = de_Ipv6AddressList(__getArrayIfSingleItem(output[_uIA][_i]), context);
  }
  if (output.unassignedIpv6PrefixSet === "") {
    contents[_UIPn] = [];
  } else if (output[_uIPSn] != null && output[_uIPSn][_i] != null) {
    contents[_UIPn] = de_IpPrefixList(__getArrayIfSingleItem(output[_uIPSn][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2UnassignPrivateNatGatewayAddressResult
 */
const de_UnassignPrivateNatGatewayAddressResult = (
  output: any,
  context: __SerdeContext
): UnassignPrivateNatGatewayAddressResult => {
  const contents: any = {};
  if (output[_nGI] != null) {
    contents[_NGI] = __expectString(output[_nGI]);
  }
  if (output.natGatewayAddressSet === "") {
    contents[_NGA] = [];
  } else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
    contents[_NGA] = de_NatGatewayAddressList(__getArrayIfSingleItem(output[_nGAS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2UnlockSnapshotResult
 */
const de_UnlockSnapshotResult = (output: any, context: __SerdeContext): UnlockSnapshotResult => {
  const contents: any = {};
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UnmonitorInstancesResult
 */
const de_UnmonitorInstancesResult = (output: any, context: __SerdeContext): UnmonitorInstancesResult => {
  const contents: any = {};
  if (output.instancesSet === "") {
    contents[_IMn] = [];
  } else if (output[_iSn] != null && output[_iSn][_i] != null) {
    contents[_IMn] = de_InstanceMonitoringList(__getArrayIfSingleItem(output[_iSn][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItem
 */
const de_UnsuccessfulInstanceCreditSpecificationItem = (
  output: any,
  context: __SerdeContext
): UnsuccessfulInstanceCreditSpecificationItem => {
  const contents: any = {};
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_er] != null) {
    contents[_Er] = de_UnsuccessfulInstanceCreditSpecificationItemError(output[_er], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationItemError
 */
const de_UnsuccessfulInstanceCreditSpecificationItemError = (
  output: any,
  context: __SerdeContext
): UnsuccessfulInstanceCreditSpecificationItemError => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UnsuccessfulInstanceCreditSpecificationSet
 */
const de_UnsuccessfulInstanceCreditSpecificationSet = (
  output: any,
  context: __SerdeContext
): UnsuccessfulInstanceCreditSpecificationItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_UnsuccessfulInstanceCreditSpecificationItem(entry, context);
    });
};

/**
 * deserializeAws_ec2UnsuccessfulItem
 */
const de_UnsuccessfulItem = (output: any, context: __SerdeContext): UnsuccessfulItem => {
  const contents: any = {};
  if (output[_er] != null) {
    contents[_Er] = de_UnsuccessfulItemError(output[_er], context);
  }
  if (output[_rIe] != null) {
    contents[_RIeso] = __expectString(output[_rIe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UnsuccessfulItemError
 */
const de_UnsuccessfulItemError = (output: any, context: __SerdeContext): UnsuccessfulItemError => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UnsuccessfulItemList
 */
const de_UnsuccessfulItemList = (output: any, context: __SerdeContext): UnsuccessfulItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_UnsuccessfulItem(entry, context);
    });
};

/**
 * deserializeAws_ec2UnsuccessfulItemSet
 */
const de_UnsuccessfulItemSet = (output: any, context: __SerdeContext): UnsuccessfulItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_UnsuccessfulItem(entry, context);
    });
};

/**
 * deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsEgressResult
 */
const de_UpdateSecurityGroupRuleDescriptionsEgressResult = (
  output: any,
  context: __SerdeContext
): UpdateSecurityGroupRuleDescriptionsEgressResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UpdateSecurityGroupRuleDescriptionsIngressResult
 */
const de_UpdateSecurityGroupRuleDescriptionsIngressResult = (
  output: any,
  context: __SerdeContext
): UpdateSecurityGroupRuleDescriptionsIngressResult => {
  const contents: any = {};
  if (output[_r] != null) {
    contents[_Ret] = __parseBoolean(output[_r]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UsageClassTypeList
 */
const de_UsageClassTypeList = (output: any, context: __SerdeContext): UsageClassType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2UserBucketDetails
 */
const de_UserBucketDetails = (output: any, context: __SerdeContext): UserBucketDetails => {
  const contents: any = {};
  if (output[_sB] != null) {
    contents[_SB] = __expectString(output[_sB]);
  }
  if (output[_sK] != null) {
    contents[_SK] = __expectString(output[_sK]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UserIdGroupPair
 */
const de_UserIdGroupPair = (output: any, context: __SerdeContext): UserIdGroupPair => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_gIr] != null) {
    contents[_GIr] = __expectString(output[_gIr]);
  }
  if (output[_gN] != null) {
    contents[_GN] = __expectString(output[_gN]);
  }
  if (output[_pSee] != null) {
    contents[_PSe] = __expectString(output[_pSee]);
  }
  if (output[_uI] != null) {
    contents[_UIs] = __expectString(output[_uI]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_vPCI] != null) {
    contents[_VPCI] = __expectString(output[_vPCI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2UserIdGroupPairList
 */
const de_UserIdGroupPairList = (output: any, context: __SerdeContext): UserIdGroupPair[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_UserIdGroupPair(entry, context);
    });
};

/**
 * deserializeAws_ec2UserIdGroupPairSet
 */
const de_UserIdGroupPairSet = (output: any, context: __SerdeContext): UserIdGroupPair[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_UserIdGroupPair(entry, context);
    });
};

/**
 * deserializeAws_ec2ValidationError
 */
const de_ValidationError = (output: any, context: __SerdeContext): ValidationError => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2ValidationWarning
 */
const de_ValidationWarning = (output: any, context: __SerdeContext): ValidationWarning => {
  const contents: any = {};
  if (output.errorSet === "") {
    contents[_Err] = [];
  } else if (output[_eSr] != null && output[_eSr][_i] != null) {
    contents[_Err] = de_ErrorSet(__getArrayIfSingleItem(output[_eSr][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2ValueStringList
 */
const de_ValueStringList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2VCpuCountRange
 */
const de_VCpuCountRange = (output: any, context: __SerdeContext): VCpuCountRange => {
  const contents: any = {};
  if (output[_m] != null) {
    contents[_M] = __strictParseInt32(output[_m]) as number;
  }
  if (output[_ma] != null) {
    contents[_Ma] = __strictParseInt32(output[_ma]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2VCpuInfo
 */
const de_VCpuInfo = (output: any, context: __SerdeContext): VCpuInfo => {
  const contents: any = {};
  if (output[_dVC] != null) {
    contents[_DVCef] = __strictParseInt32(output[_dVC]) as number;
  }
  if (output[_dCe] != null) {
    contents[_DCef] = __strictParseInt32(output[_dCe]) as number;
  }
  if (output[_dTPC] != null) {
    contents[_DTPC] = __strictParseInt32(output[_dTPC]) as number;
  }
  if (output.validCores === "") {
    contents[_VCa] = [];
  } else if (output[_vCa] != null && output[_vCa][_i] != null) {
    contents[_VCa] = de_CoreCountList(__getArrayIfSingleItem(output[_vCa][_i]), context);
  }
  if (output.validThreadsPerCore === "") {
    contents[_VTPC] = [];
  } else if (output[_vTPC] != null && output[_vTPC][_i] != null) {
    contents[_VTPC] = de_ThreadsPerCoreList(__getArrayIfSingleItem(output[_vTPC][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessEndpoint
 */
const de_VerifiedAccessEndpoint = (output: any, context: __SerdeContext): VerifiedAccessEndpoint => {
  const contents: any = {};
  if (output[_vAII] != null) {
    contents[_VAII] = __expectString(output[_vAII]);
  }
  if (output[_vAGI] != null) {
    contents[_VAGI] = __expectString(output[_vAGI]);
  }
  if (output[_vAEI] != null) {
    contents[_VAEI] = __expectString(output[_vAEI]);
  }
  if (output[_aDp] != null) {
    contents[_ADp] = __expectString(output[_aDp]);
  }
  if (output[_eTnd] != null) {
    contents[_ET] = __expectString(output[_eTnd]);
  }
  if (output[_aTtta] != null) {
    contents[_ATt] = __expectString(output[_aTtta]);
  }
  if (output[_dCA] != null) {
    contents[_DCA] = __expectString(output[_dCA]);
  }
  if (output[_eDnd] != null) {
    contents[_EDnd] = __expectString(output[_eDnd]);
  }
  if (output[_dVD] != null) {
    contents[_DVD] = __expectString(output[_dVD]);
  }
  if (output.securityGroupIdSet === "") {
    contents[_SGI] = [];
  } else if (output[_sGIS] != null && output[_sGIS][_i] != null) {
    contents[_SGI] = de_SecurityGroupIdList(__getArrayIfSingleItem(output[_sGIS][_i]), context);
  }
  if (output[_lBO] != null) {
    contents[_LBO] = de_VerifiedAccessEndpointLoadBalancerOptions(output[_lBO], context);
  }
  if (output[_nIO] != null) {
    contents[_NIO] = de_VerifiedAccessEndpointEniOptions(output[_nIO], context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_VerifiedAccessEndpointStatus(output[_sta], context);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectString(output[_cTre]);
  }
  if (output[_lUT] != null) {
    contents[_LUT] = __expectString(output[_lUT]);
  }
  if (output[_dT] != null) {
    contents[_DTel] = __expectString(output[_dT]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sSs] != null) {
    contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessEndpointEniOptions
 */
const de_VerifiedAccessEndpointEniOptions = (
  output: any,
  context: __SerdeContext
): VerifiedAccessEndpointEniOptions => {
  const contents: any = {};
  if (output[_nII] != null) {
    contents[_NII] = __expectString(output[_nII]);
  }
  if (output[_pr] != null) {
    contents[_P] = __expectString(output[_pr]);
  }
  if (output[_po] != null) {
    contents[_Po] = __strictParseInt32(output[_po]) as number;
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessEndpointList
 */
const de_VerifiedAccessEndpointList = (output: any, context: __SerdeContext): VerifiedAccessEndpoint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VerifiedAccessEndpoint(entry, context);
    });
};

/**
 * deserializeAws_ec2VerifiedAccessEndpointLoadBalancerOptions
 */
const de_VerifiedAccessEndpointLoadBalancerOptions = (
  output: any,
  context: __SerdeContext
): VerifiedAccessEndpointLoadBalancerOptions => {
  const contents: any = {};
  if (output[_pr] != null) {
    contents[_P] = __expectString(output[_pr]);
  }
  if (output[_po] != null) {
    contents[_Po] = __strictParseInt32(output[_po]) as number;
  }
  if (output[_lBA] != null) {
    contents[_LBA] = __expectString(output[_lBA]);
  }
  if (output.subnetIdSet === "") {
    contents[_SIu] = [];
  } else if (output[_sISu] != null && output[_sISu][_i] != null) {
    contents[_SIu] = de_VerifiedAccessEndpointSubnetIdList(__getArrayIfSingleItem(output[_sISu][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessEndpointStatus
 */
const de_VerifiedAccessEndpointStatus = (output: any, context: __SerdeContext): VerifiedAccessEndpointStatus => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessEndpointSubnetIdList
 */
const de_VerifiedAccessEndpointSubnetIdList = (output: any, context: __SerdeContext): string[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2VerifiedAccessGroup
 */
const de_VerifiedAccessGroup = (output: any, context: __SerdeContext): VerifiedAccessGroup => {
  const contents: any = {};
  if (output[_vAGI] != null) {
    contents[_VAGI] = __expectString(output[_vAGI]);
  }
  if (output[_vAII] != null) {
    contents[_VAII] = __expectString(output[_vAII]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_ow] != null) {
    contents[_Own] = __expectString(output[_ow]);
  }
  if (output[_vAGA] != null) {
    contents[_VAGA] = __expectString(output[_vAGA]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectString(output[_cTre]);
  }
  if (output[_lUT] != null) {
    contents[_LUT] = __expectString(output[_lUT]);
  }
  if (output[_dT] != null) {
    contents[_DTel] = __expectString(output[_dT]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sSs] != null) {
    contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessGroupList
 */
const de_VerifiedAccessGroupList = (output: any, context: __SerdeContext): VerifiedAccessGroup[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VerifiedAccessGroup(entry, context);
    });
};

/**
 * deserializeAws_ec2VerifiedAccessInstance
 */
const de_VerifiedAccessInstance = (output: any, context: __SerdeContext): VerifiedAccessInstance => {
  const contents: any = {};
  if (output[_vAII] != null) {
    contents[_VAII] = __expectString(output[_vAII]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output.verifiedAccessTrustProviderSet === "") {
    contents[_VATPe] = [];
  } else if (output[_vATPS] != null && output[_vATPS][_i] != null) {
    contents[_VATPe] = de_VerifiedAccessTrustProviderCondensedList(__getArrayIfSingleItem(output[_vATPS][_i]), context);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectString(output[_cTre]);
  }
  if (output[_lUT] != null) {
    contents[_LUT] = __expectString(output[_lUT]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_fE] != null) {
    contents[_FE] = __parseBoolean(output[_fE]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessInstanceList
 */
const de_VerifiedAccessInstanceList = (output: any, context: __SerdeContext): VerifiedAccessInstance[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VerifiedAccessInstance(entry, context);
    });
};

/**
 * deserializeAws_ec2VerifiedAccessInstanceLoggingConfiguration
 */
const de_VerifiedAccessInstanceLoggingConfiguration = (
  output: any,
  context: __SerdeContext
): VerifiedAccessInstanceLoggingConfiguration => {
  const contents: any = {};
  if (output[_vAII] != null) {
    contents[_VAII] = __expectString(output[_vAII]);
  }
  if (output[_aL] != null) {
    contents[_AL] = de_VerifiedAccessLogs(output[_aL], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessInstanceLoggingConfigurationList
 */
const de_VerifiedAccessInstanceLoggingConfigurationList = (
  output: any,
  context: __SerdeContext
): VerifiedAccessInstanceLoggingConfiguration[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VerifiedAccessInstanceLoggingConfiguration(entry, context);
    });
};

/**
 * deserializeAws_ec2VerifiedAccessLogCloudWatchLogsDestination
 */
const de_VerifiedAccessLogCloudWatchLogsDestination = (
  output: any,
  context: __SerdeContext
): VerifiedAccessLogCloudWatchLogsDestination => {
  const contents: any = {};
  if (output[_en] != null) {
    contents[_En] = __parseBoolean(output[_en]);
  }
  if (output[_dSel] != null) {
    contents[_DSeli] = de_VerifiedAccessLogDeliveryStatus(output[_dSel], context);
  }
  if (output[_lGo] != null) {
    contents[_LGo] = __expectString(output[_lGo]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessLogDeliveryStatus
 */
const de_VerifiedAccessLogDeliveryStatus = (output: any, context: __SerdeContext): VerifiedAccessLogDeliveryStatus => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessLogKinesisDataFirehoseDestination
 */
const de_VerifiedAccessLogKinesisDataFirehoseDestination = (
  output: any,
  context: __SerdeContext
): VerifiedAccessLogKinesisDataFirehoseDestination => {
  const contents: any = {};
  if (output[_en] != null) {
    contents[_En] = __parseBoolean(output[_en]);
  }
  if (output[_dSel] != null) {
    contents[_DSeli] = de_VerifiedAccessLogDeliveryStatus(output[_dSel], context);
  }
  if (output[_dSeli] != null) {
    contents[_DSel] = __expectString(output[_dSeli]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessLogs
 */
const de_VerifiedAccessLogs = (output: any, context: __SerdeContext): VerifiedAccessLogs => {
  const contents: any = {};
  if (output[_s_] != null) {
    contents[_S_] = de_VerifiedAccessLogS3Destination(output[_s_], context);
  }
  if (output[_cWL] != null) {
    contents[_CWL] = de_VerifiedAccessLogCloudWatchLogsDestination(output[_cWL], context);
  }
  if (output[_kDF] != null) {
    contents[_KDF] = de_VerifiedAccessLogKinesisDataFirehoseDestination(output[_kDF], context);
  }
  if (output[_lV] != null) {
    contents[_LV] = __expectString(output[_lV]);
  }
  if (output[_iTCn] != null) {
    contents[_ITCn] = __parseBoolean(output[_iTCn]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessLogS3Destination
 */
const de_VerifiedAccessLogS3Destination = (output: any, context: __SerdeContext): VerifiedAccessLogS3Destination => {
  const contents: any = {};
  if (output[_en] != null) {
    contents[_En] = __parseBoolean(output[_en]);
  }
  if (output[_dSel] != null) {
    contents[_DSeli] = de_VerifiedAccessLogDeliveryStatus(output[_dSel], context);
  }
  if (output[_bN] != null) {
    contents[_BN] = __expectString(output[_bN]);
  }
  if (output[_pre] != null) {
    contents[_Pr] = __expectString(output[_pre]);
  }
  if (output[_bO] != null) {
    contents[_BOu] = __expectString(output[_bO]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessSseSpecificationResponse
 */
const de_VerifiedAccessSseSpecificationResponse = (
  output: any,
  context: __SerdeContext
): VerifiedAccessSseSpecificationResponse => {
  const contents: any = {};
  if (output[_cMKE] != null) {
    contents[_CMKE] = __parseBoolean(output[_cMKE]);
  }
  if (output[_kKA] != null) {
    contents[_KKA] = __expectString(output[_kKA]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessTrustProvider
 */
const de_VerifiedAccessTrustProvider = (output: any, context: __SerdeContext): VerifiedAccessTrustProvider => {
  const contents: any = {};
  if (output[_vATPI] != null) {
    contents[_VATPI] = __expectString(output[_vATPI]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_tPT] != null) {
    contents[_TPT] = __expectString(output[_tPT]);
  }
  if (output[_uTPT] != null) {
    contents[_UTPT] = __expectString(output[_uTPT]);
  }
  if (output[_dTPT] != null) {
    contents[_DTPT] = __expectString(output[_dTPT]);
  }
  if (output[_oO] != null) {
    contents[_OO] = de_OidcOptions(output[_oO], context);
  }
  if (output[_dOev] != null) {
    contents[_DOe] = de_DeviceOptions(output[_dOev], context);
  }
  if (output[_pRNo] != null) {
    contents[_PRN] = __expectString(output[_pRNo]);
  }
  if (output[_cTre] != null) {
    contents[_CTre] = __expectString(output[_cTre]);
  }
  if (output[_lUT] != null) {
    contents[_LUT] = __expectString(output[_lUT]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_sSs] != null) {
    contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessTrustProviderCondensed
 */
const de_VerifiedAccessTrustProviderCondensed = (
  output: any,
  context: __SerdeContext
): VerifiedAccessTrustProviderCondensed => {
  const contents: any = {};
  if (output[_vATPI] != null) {
    contents[_VATPI] = __expectString(output[_vATPI]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_tPT] != null) {
    contents[_TPT] = __expectString(output[_tPT]);
  }
  if (output[_uTPT] != null) {
    contents[_UTPT] = __expectString(output[_uTPT]);
  }
  if (output[_dTPT] != null) {
    contents[_DTPT] = __expectString(output[_dTPT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VerifiedAccessTrustProviderCondensedList
 */
const de_VerifiedAccessTrustProviderCondensedList = (
  output: any,
  context: __SerdeContext
): VerifiedAccessTrustProviderCondensed[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VerifiedAccessTrustProviderCondensed(entry, context);
    });
};

/**
 * deserializeAws_ec2VerifiedAccessTrustProviderList
 */
const de_VerifiedAccessTrustProviderList = (output: any, context: __SerdeContext): VerifiedAccessTrustProvider[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VerifiedAccessTrustProvider(entry, context);
    });
};

/**
 * deserializeAws_ec2VgwTelemetry
 */
const de_VgwTelemetry = (output: any, context: __SerdeContext): VgwTelemetry => {
  const contents: any = {};
  if (output[_aRC] != null) {
    contents[_ARC] = __strictParseInt32(output[_aRC]) as number;
  }
  if (output[_lSC] != null) {
    contents[_LSC] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_lSC]));
  }
  if (output[_oIA] != null) {
    contents[_OIA] = __expectString(output[_oIA]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output[_cAe] != null) {
    contents[_CA] = __expectString(output[_cAe]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VgwTelemetryList
 */
const de_VgwTelemetryList = (output: any, context: __SerdeContext): VgwTelemetry[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VgwTelemetry(entry, context);
    });
};

/**
 * deserializeAws_ec2VirtualizationTypeList
 */
const de_VirtualizationTypeList = (output: any, context: __SerdeContext): VirtualizationType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return __expectString(entry) as any;
    });
};

/**
 * deserializeAws_ec2Volume
 */
const de_Volume = (output: any, context: __SerdeContext): Volume => {
  const contents: any = {};
  if (output.attachmentSet === "") {
    contents[_Atta] = [];
  } else if (output[_aSt] != null && output[_aSt][_i] != null) {
    contents[_Atta] = de_VolumeAttachmentList(__getArrayIfSingleItem(output[_aSt][_i]), context);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_cTr] != null) {
    contents[_CTr] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTr]));
  }
  if (output[_enc] != null) {
    contents[_Enc] = __parseBoolean(output[_enc]);
  }
  if (output[_kKI] != null) {
    contents[_KKI] = __expectString(output[_kKI]);
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output[_si] != null) {
    contents[_Siz] = __strictParseInt32(output[_si]) as number;
  }
  if (output[_sIn] != null) {
    contents[_SIn] = __expectString(output[_sIn]);
  }
  if (output[_sta] != null) {
    contents[_Stat] = __expectString(output[_sta]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = __expectString(output[_vIo]);
  }
  if (output[_io] != null) {
    contents[_Io] = __strictParseInt32(output[_io]) as number;
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vT] != null) {
    contents[_VT] = __expectString(output[_vT]);
  }
  if (output[_fRa] != null) {
    contents[_FRa] = __parseBoolean(output[_fRa]);
  }
  if (output[_mAE] != null) {
    contents[_MAE] = __parseBoolean(output[_mAE]);
  }
  if (output[_th] != null) {
    contents[_Th] = __strictParseInt32(output[_th]) as number;
  }
  if (output[_sTs] != null) {
    contents[_STs] = __expectString(output[_sTs]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeAttachment
 */
const de_VolumeAttachment = (output: any, context: __SerdeContext): VolumeAttachment => {
  const contents: any = {};
  if (output[_aTt] != null) {
    contents[_ATtt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_aTt]));
  }
  if (output[_dev] != null) {
    contents[_Dev] = __expectString(output[_dev]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  if (output[_sta] != null) {
    contents[_Stat] = __expectString(output[_sta]);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = __expectString(output[_vIo]);
  }
  if (output[_dOT] != null) {
    contents[_DOT] = __parseBoolean(output[_dOT]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeAttachmentList
 */
const de_VolumeAttachmentList = (output: any, context: __SerdeContext): VolumeAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeList
 */
const de_VolumeList = (output: any, context: __SerdeContext): Volume[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Volume(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeModification
 */
const de_VolumeModification = (output: any, context: __SerdeContext): VolumeModification => {
  const contents: any = {};
  if (output[_vIo] != null) {
    contents[_VIo] = __expectString(output[_vIo]);
  }
  if (output[_mSod] != null) {
    contents[_MSod] = __expectString(output[_mSod]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  if (output[_tSar] != null) {
    contents[_TSar] = __strictParseInt32(output[_tSar]) as number;
  }
  if (output[_tIa] != null) {
    contents[_TIa] = __strictParseInt32(output[_tIa]) as number;
  }
  if (output[_tVT] != null) {
    contents[_TVT] = __expectString(output[_tVT]);
  }
  if (output[_tTa] != null) {
    contents[_TTa] = __strictParseInt32(output[_tTa]) as number;
  }
  if (output[_tMAE] != null) {
    contents[_TMAE] = __parseBoolean(output[_tMAE]);
  }
  if (output[_oSr] != null) {
    contents[_OSr] = __strictParseInt32(output[_oSr]) as number;
  }
  if (output[_oIr] != null) {
    contents[_OIr] = __strictParseInt32(output[_oIr]) as number;
  }
  if (output[_oVT] != null) {
    contents[_OVT] = __expectString(output[_oVT]);
  }
  if (output[_oTr] != null) {
    contents[_OTr] = __strictParseInt32(output[_oTr]) as number;
  }
  if (output[_oMAE] != null) {
    contents[_OMAE] = __parseBoolean(output[_oMAE]);
  }
  if (output[_pro] != null) {
    contents[_Prog] = __strictParseLong(output[_pro]) as number;
  }
  if (output[_sT] != null) {
    contents[_STt] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_sT]));
  }
  if (output[_eTndi] != null) {
    contents[_ETn] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eTndi]));
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeModificationList
 */
const de_VolumeModificationList = (output: any, context: __SerdeContext): VolumeModification[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeModification(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeStatusAction
 */
const de_VolumeStatusAction = (output: any, context: __SerdeContext): VolumeStatusAction => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_eIve] != null) {
    contents[_EIve] = __expectString(output[_eIve]);
  }
  if (output[_eTv] != null) {
    contents[_ETv] = __expectString(output[_eTv]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeStatusActionsList
 */
const de_VolumeStatusActionsList = (output: any, context: __SerdeContext): VolumeStatusAction[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeStatusAction(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeStatusAttachmentStatus
 */
const de_VolumeStatusAttachmentStatus = (output: any, context: __SerdeContext): VolumeStatusAttachmentStatus => {
  const contents: any = {};
  if (output[_iPo] != null) {
    contents[_IPo] = __expectString(output[_iPo]);
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeStatusAttachmentStatusList
 */
const de_VolumeStatusAttachmentStatusList = (output: any, context: __SerdeContext): VolumeStatusAttachmentStatus[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeStatusAttachmentStatus(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeStatusDetails
 */
const de_VolumeStatusDetails = (output: any, context: __SerdeContext): VolumeStatusDetails => {
  const contents: any = {};
  if (output[_n] != null) {
    contents[_N] = __expectString(output[_n]);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeStatusDetailsList
 */
const de_VolumeStatusDetailsList = (output: any, context: __SerdeContext): VolumeStatusDetails[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeStatusDetails(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeStatusEvent
 */
const de_VolumeStatusEvent = (output: any, context: __SerdeContext): VolumeStatusEvent => {
  const contents: any = {};
  if (output[_de] != null) {
    contents[_De] = __expectString(output[_de]);
  }
  if (output[_eIve] != null) {
    contents[_EIve] = __expectString(output[_eIve]);
  }
  if (output[_eTv] != null) {
    contents[_ETv] = __expectString(output[_eTv]);
  }
  if (output[_nAo] != null) {
    contents[_NAo] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_nAo]));
  }
  if (output[_nB] != null) {
    contents[_NB] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_nB]));
  }
  if (output[_iI] != null) {
    contents[_IIn] = __expectString(output[_iI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeStatusEventsList
 */
const de_VolumeStatusEventsList = (output: any, context: __SerdeContext): VolumeStatusEvent[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeStatusEvent(entry, context);
    });
};

/**
 * deserializeAws_ec2VolumeStatusInfo
 */
const de_VolumeStatusInfo = (output: any, context: __SerdeContext): VolumeStatusInfo => {
  const contents: any = {};
  if (output.details === "") {
    contents[_Det] = [];
  } else if (output[_det] != null && output[_det][_i] != null) {
    contents[_Det] = de_VolumeStatusDetailsList(__getArrayIfSingleItem(output[_det][_i]), context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = __expectString(output[_sta]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeStatusItem
 */
const de_VolumeStatusItem = (output: any, context: __SerdeContext): VolumeStatusItem => {
  const contents: any = {};
  if (output.actionsSet === "") {
    contents[_Acti] = [];
  } else if (output[_aSct] != null && output[_aSct][_i] != null) {
    contents[_Acti] = de_VolumeStatusActionsList(__getArrayIfSingleItem(output[_aSct][_i]), context);
  }
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_oA] != null) {
    contents[_OA] = __expectString(output[_oA]);
  }
  if (output.eventsSet === "") {
    contents[_Ev] = [];
  } else if (output[_eSv] != null && output[_eSv][_i] != null) {
    contents[_Ev] = de_VolumeStatusEventsList(__getArrayIfSingleItem(output[_eSv][_i]), context);
  }
  if (output[_vIo] != null) {
    contents[_VIo] = __expectString(output[_vIo]);
  }
  if (output[_vSol] != null) {
    contents[_VSol] = de_VolumeStatusInfo(output[_vSol], context);
  }
  if (output.attachmentStatuses === "") {
    contents[_ASt] = [];
  } else if (output[_aStt] != null && output[_aStt][_i] != null) {
    contents[_ASt] = de_VolumeStatusAttachmentStatusList(__getArrayIfSingleItem(output[_aStt][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VolumeStatusList
 */
const de_VolumeStatusList = (output: any, context: __SerdeContext): VolumeStatusItem[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VolumeStatusItem(entry, context);
    });
};

/**
 * deserializeAws_ec2Vpc
 */
const de_Vpc = (output: any, context: __SerdeContext): Vpc => {
  const contents: any = {};
  if (output[_cB] != null) {
    contents[_CB] = __expectString(output[_cB]);
  }
  if (output[_dOI] != null) {
    contents[_DOI] = __expectString(output[_dOI]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_iTns] != null) {
    contents[_ITns] = __expectString(output[_iTns]);
  }
  if (output.ipv6CidrBlockAssociationSet === "") {
    contents[_ICBAS] = [];
  } else if (output[_iCBAS] != null && output[_iCBAS][_i] != null) {
    contents[_ICBAS] = de_VpcIpv6CidrBlockAssociationSet(__getArrayIfSingleItem(output[_iCBAS][_i]), context);
  }
  if (output.cidrBlockAssociationSet === "") {
    contents[_CBAS] = [];
  } else if (output[_cBAS] != null && output[_cBAS][_i] != null) {
    contents[_CBAS] = de_VpcCidrBlockAssociationSet(__getArrayIfSingleItem(output[_cBAS][_i]), context);
  }
  if (output[_iDs] != null) {
    contents[_IDs] = __parseBoolean(output[_iDs]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcAttachment
 */
const de_VpcAttachment = (output: any, context: __SerdeContext): VpcAttachment => {
  const contents: any = {};
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcAttachmentList
 */
const de_VpcAttachmentList = (output: any, context: __SerdeContext): VpcAttachment[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcAttachment(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcCidrBlockAssociation
 */
const de_VpcCidrBlockAssociation = (output: any, context: __SerdeContext): VpcCidrBlockAssociation => {
  const contents: any = {};
  if (output[_aIs] != null) {
    contents[_AIss] = __expectString(output[_aIs]);
  }
  if (output[_cB] != null) {
    contents[_CB] = __expectString(output[_cB]);
  }
  if (output[_cBS] != null) {
    contents[_CBS] = de_VpcCidrBlockState(output[_cBS], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcCidrBlockAssociationSet
 */
const de_VpcCidrBlockAssociationSet = (output: any, context: __SerdeContext): VpcCidrBlockAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcCidrBlockAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcCidrBlockState
 */
const de_VpcCidrBlockState = (output: any, context: __SerdeContext): VpcCidrBlockState => {
  const contents: any = {};
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_sM] != null) {
    contents[_SM] = __expectString(output[_sM]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcClassicLink
 */
const de_VpcClassicLink = (output: any, context: __SerdeContext): VpcClassicLink => {
  const contents: any = {};
  if (output[_cLE] != null) {
    contents[_CLE] = __parseBoolean(output[_cLE]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcClassicLinkList
 */
const de_VpcClassicLinkList = (output: any, context: __SerdeContext): VpcClassicLink[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcClassicLink(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcEndpoint
 */
const de_VpcEndpoint = (output: any, context: __SerdeContext): VpcEndpoint => {
  const contents: any = {};
  if (output[_vEI] != null) {
    contents[_VEIp] = __expectString(output[_vEI]);
  }
  if (output[_vET] != null) {
    contents[_VET] = __expectString(output[_vET]);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_sN] != null) {
    contents[_SNe] = __expectString(output[_sN]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_pDo] != null) {
    contents[_PD] = __expectString(output[_pDo]);
  }
  if (output.routeTableIdSet === "") {
    contents[_RTIo] = [];
  } else if (output[_rTIS] != null && output[_rTIS][_i] != null) {
    contents[_RTIo] = de_ValueStringList(__getArrayIfSingleItem(output[_rTIS][_i]), context);
  }
  if (output.subnetIdSet === "") {
    contents[_SIu] = [];
  } else if (output[_sISu] != null && output[_sISu][_i] != null) {
    contents[_SIu] = de_ValueStringList(__getArrayIfSingleItem(output[_sISu][_i]), context);
  }
  if (output.groupSet === "") {
    contents[_G] = [];
  } else if (output[_gS] != null && output[_gS][_i] != null) {
    contents[_G] = de_GroupIdentifierSet(__getArrayIfSingleItem(output[_gS][_i]), context);
  }
  if (output[_iAT] != null) {
    contents[_IAT] = __expectString(output[_iAT]);
  }
  if (output[_dOn] != null) {
    contents[_DOn] = de_DnsOptions(output[_dOn], context);
  }
  if (output[_pDE] != null) {
    contents[_PDE] = __parseBoolean(output[_pDE]);
  }
  if (output[_rM] != null) {
    contents[_RMe] = __parseBoolean(output[_rM]);
  }
  if (output.networkInterfaceIdSet === "") {
    contents[_NIIe] = [];
  } else if (output[_nIIS] != null && output[_nIIS][_i] != null) {
    contents[_NIIe] = de_ValueStringList(__getArrayIfSingleItem(output[_nIIS][_i]), context);
  }
  if (output.dnsEntrySet === "") {
    contents[_DE] = [];
  } else if (output[_dES] != null && output[_dES][_i] != null) {
    contents[_DE] = de_DnsEntrySet(__getArrayIfSingleItem(output[_dES][_i]), context);
  }
  if (output[_cTrea] != null) {
    contents[_CTrea] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTrea]));
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_lEa] != null) {
    contents[_LEa] = de_LastError(output[_lEa], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcEndpointConnection
 */
const de_VpcEndpointConnection = (output: any, context: __SerdeContext): VpcEndpointConnection => {
  const contents: any = {};
  if (output[_sI] != null) {
    contents[_SIe] = __expectString(output[_sI]);
  }
  if (output[_vEI] != null) {
    contents[_VEIp] = __expectString(output[_vEI]);
  }
  if (output[_vEO] != null) {
    contents[_VEO] = __expectString(output[_vEO]);
  }
  if (output[_vESpc] != null) {
    contents[_VESpc] = __expectString(output[_vESpc]);
  }
  if (output[_cTrea] != null) {
    contents[_CTrea] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_cTrea]));
  }
  if (output.dnsEntrySet === "") {
    contents[_DE] = [];
  } else if (output[_dES] != null && output[_dES][_i] != null) {
    contents[_DE] = de_DnsEntrySet(__getArrayIfSingleItem(output[_dES][_i]), context);
  }
  if (output.networkLoadBalancerArnSet === "") {
    contents[_NLBAe] = [];
  } else if (output[_nLBAS] != null && output[_nLBAS][_i] != null) {
    contents[_NLBAe] = de_ValueStringList(__getArrayIfSingleItem(output[_nLBAS][_i]), context);
  }
  if (output.gatewayLoadBalancerArnSet === "") {
    contents[_GLBA] = [];
  } else if (output[_gLBAS] != null && output[_gLBAS][_i] != null) {
    contents[_GLBA] = de_ValueStringList(__getArrayIfSingleItem(output[_gLBAS][_i]), context);
  }
  if (output[_iAT] != null) {
    contents[_IAT] = __expectString(output[_iAT]);
  }
  if (output[_vECI] != null) {
    contents[_VECI] = __expectString(output[_vECI]);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcEndpointConnectionSet
 */
const de_VpcEndpointConnectionSet = (output: any, context: __SerdeContext): VpcEndpointConnection[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcEndpointConnection(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcEndpointSet
 */
const de_VpcEndpointSet = (output: any, context: __SerdeContext): VpcEndpoint[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcEndpoint(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcIpv6CidrBlockAssociation
 */
const de_VpcIpv6CidrBlockAssociation = (output: any, context: __SerdeContext): VpcIpv6CidrBlockAssociation => {
  const contents: any = {};
  if (output[_aIs] != null) {
    contents[_AIss] = __expectString(output[_aIs]);
  }
  if (output[_iCB] != null) {
    contents[_ICB] = __expectString(output[_iCB]);
  }
  if (output[_iCBS] != null) {
    contents[_ICBS] = de_VpcCidrBlockState(output[_iCBS], context);
  }
  if (output[_nBG] != null) {
    contents[_NBG] = __expectString(output[_nBG]);
  }
  if (output[_iPpvo] != null) {
    contents[_IPpv] = __expectString(output[_iPpvo]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcIpv6CidrBlockAssociationSet
 */
const de_VpcIpv6CidrBlockAssociationSet = (output: any, context: __SerdeContext): VpcIpv6CidrBlockAssociation[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcIpv6CidrBlockAssociation(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcList
 */
const de_VpcList = (output: any, context: __SerdeContext): Vpc[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_Vpc(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcPeeringConnection
 */
const de_VpcPeeringConnection = (output: any, context: __SerdeContext): VpcPeeringConnection => {
  const contents: any = {};
  if (output[_aVI] != null) {
    contents[_AVI] = de_VpcPeeringConnectionVpcInfo(output[_aVI], context);
  }
  if (output[_eT] != null) {
    contents[_ETx] = __expectNonNull(__parseRfc3339DateTimeWithOffset(output[_eT]));
  }
  if (output[_rVIe] != null) {
    contents[_RVIe] = de_VpcPeeringConnectionVpcInfo(output[_rVIe], context);
  }
  if (output[_sta] != null) {
    contents[_Statu] = de_VpcPeeringConnectionStateReason(output[_sta], context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output[_vPCI] != null) {
    contents[_VPCI] = __expectString(output[_vPCI]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcPeeringConnectionList
 */
const de_VpcPeeringConnectionList = (output: any, context: __SerdeContext): VpcPeeringConnection[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpcPeeringConnection(entry, context);
    });
};

/**
 * deserializeAws_ec2VpcPeeringConnectionOptionsDescription
 */
const de_VpcPeeringConnectionOptionsDescription = (
  output: any,
  context: __SerdeContext
): VpcPeeringConnectionOptionsDescription => {
  const contents: any = {};
  if (output[_aDRFRV] != null) {
    contents[_ADRFRV] = __parseBoolean(output[_aDRFRV]);
  }
  if (output[_aEFLCLTRV] != null) {
    contents[_AEFLCLTRV] = __parseBoolean(output[_aEFLCLTRV]);
  }
  if (output[_aEFLVTRCL] != null) {
    contents[_AEFLVTRCL] = __parseBoolean(output[_aEFLVTRCL]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcPeeringConnectionStateReason
 */
const de_VpcPeeringConnectionStateReason = (output: any, context: __SerdeContext): VpcPeeringConnectionStateReason => {
  const contents: any = {};
  if (output[_co] != null) {
    contents[_Cod] = __expectString(output[_co]);
  }
  if (output[_me] != null) {
    contents[_Me] = __expectString(output[_me]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpcPeeringConnectionVpcInfo
 */
const de_VpcPeeringConnectionVpcInfo = (output: any, context: __SerdeContext): VpcPeeringConnectionVpcInfo => {
  const contents: any = {};
  if (output[_cB] != null) {
    contents[_CB] = __expectString(output[_cB]);
  }
  if (output.ipv6CidrBlockSet === "") {
    contents[_ICBSp] = [];
  } else if (output[_iCBSp] != null && output[_iCBSp][_i] != null) {
    contents[_ICBSp] = de_Ipv6CidrBlockSet(__getArrayIfSingleItem(output[_iCBSp][_i]), context);
  }
  if (output.cidrBlockSet === "") {
    contents[_CBSi] = [];
  } else if (output[_cBSi] != null && output[_cBSi][_i] != null) {
    contents[_CBSi] = de_CidrBlockSet(__getArrayIfSingleItem(output[_cBSi][_i]), context);
  }
  if (output[_oI] != null) {
    contents[_OIwn] = __expectString(output[_oI]);
  }
  if (output[_pOe] != null) {
    contents[_POe] = de_VpcPeeringConnectionOptionsDescription(output[_pOe], context);
  }
  if (output[_vI] != null) {
    contents[_VI] = __expectString(output[_vI]);
  }
  if (output[_reg] != null) {
    contents[_Regi] = __expectString(output[_reg]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpnConnection
 */
const de_VpnConnection = (output: any, context: __SerdeContext): VpnConnection => {
  const contents: any = {};
  if (output[_cGC] != null) {
    contents[_CGC] = __expectString(output[_cGC]);
  }
  if (output[_cGIu] != null) {
    contents[_CGIu] = __expectString(output[_cGIu]);
  }
  if (output[_ca] != null) {
    contents[_Cat] = __expectString(output[_ca]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  if (output[_vCI] != null) {
    contents[_VCI] = __expectString(output[_vCI]);
  }
  if (output[_vGI] != null) {
    contents[_VGI] = __expectString(output[_vGI]);
  }
  if (output[_tGI] != null) {
    contents[_TGI] = __expectString(output[_tGI]);
  }
  if (output[_cNA] != null) {
    contents[_CNAo] = __expectString(output[_cNA]);
  }
  if (output[_cNAA] != null) {
    contents[_CNAA] = __expectString(output[_cNAA]);
  }
  if (output[_gAS] != null) {
    contents[_GAS] = __expectString(output[_gAS]);
  }
  if (output[_op] != null) {
    contents[_O] = de_VpnConnectionOptions(output[_op], context);
  }
  if (output.routes === "") {
    contents[_Rou] = [];
  } else if (output[_rou] != null && output[_rou][_i] != null) {
    contents[_Rou] = de_VpnStaticRouteList(__getArrayIfSingleItem(output[_rou][_i]), context);
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  if (output.vgwTelemetry === "") {
    contents[_VTg] = [];
  } else if (output[_vTg] != null && output[_vTg][_i] != null) {
    contents[_VTg] = de_VgwTelemetryList(__getArrayIfSingleItem(output[_vTg][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpnConnectionDeviceType
 */
const de_VpnConnectionDeviceType = (output: any, context: __SerdeContext): VpnConnectionDeviceType => {
  const contents: any = {};
  if (output[_vCDTI] != null) {
    contents[_VCDTI] = __expectString(output[_vCDTI]);
  }
  if (output[_ven] != null) {
    contents[_Ven] = __expectString(output[_ven]);
  }
  if (output[_pl] != null) {
    contents[_Pla] = __expectString(output[_pl]);
  }
  if (output[_sof] != null) {
    contents[_Sof] = __expectString(output[_sof]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpnConnectionDeviceTypeList
 */
const de_VpnConnectionDeviceTypeList = (output: any, context: __SerdeContext): VpnConnectionDeviceType[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpnConnectionDeviceType(entry, context);
    });
};

/**
 * deserializeAws_ec2VpnConnectionList
 */
const de_VpnConnectionList = (output: any, context: __SerdeContext): VpnConnection[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpnConnection(entry, context);
    });
};

/**
 * deserializeAws_ec2VpnConnectionOptions
 */
const de_VpnConnectionOptions = (output: any, context: __SerdeContext): VpnConnectionOptions => {
  const contents: any = {};
  if (output[_eA] != null) {
    contents[_EA] = __parseBoolean(output[_eA]);
  }
  if (output[_sRO] != null) {
    contents[_SRO] = __parseBoolean(output[_sRO]);
  }
  if (output[_lINC] != null) {
    contents[_LINC] = __expectString(output[_lINC]);
  }
  if (output[_rINC] != null) {
    contents[_RINC] = __expectString(output[_rINC]);
  }
  if (output[_lINCo] != null) {
    contents[_LINCo] = __expectString(output[_lINCo]);
  }
  if (output[_rINCe] != null) {
    contents[_RINCe] = __expectString(output[_rINCe]);
  }
  if (output[_oIAT] != null) {
    contents[_OIAT] = __expectString(output[_oIAT]);
  }
  if (output[_tTGAI] != null) {
    contents[_TTGAI] = __expectString(output[_tTGAI]);
  }
  if (output[_tIIV] != null) {
    contents[_TIIV] = __expectString(output[_tIIV]);
  }
  if (output.tunnelOptionSet === "") {
    contents[_TO] = [];
  } else if (output[_tOS] != null && output[_tOS][_i] != null) {
    contents[_TO] = de_TunnelOptionsList(__getArrayIfSingleItem(output[_tOS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpnGateway
 */
const de_VpnGateway = (output: any, context: __SerdeContext): VpnGateway => {
  const contents: any = {};
  if (output[_aZ] != null) {
    contents[_AZ] = __expectString(output[_aZ]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  if (output[_ty] != null) {
    contents[_T] = __expectString(output[_ty]);
  }
  if (output.attachments === "") {
    contents[_VAp] = [];
  } else if (output[_att] != null && output[_att][_i] != null) {
    contents[_VAp] = de_VpcAttachmentList(__getArrayIfSingleItem(output[_att][_i]), context);
  }
  if (output[_vGI] != null) {
    contents[_VGI] = __expectString(output[_vGI]);
  }
  if (output[_aSA] != null) {
    contents[_ASA] = __strictParseLong(output[_aSA]) as number;
  }
  if (output.tagSet === "") {
    contents[_Ta] = [];
  } else if (output[_tS] != null && output[_tS][_i] != null) {
    contents[_Ta] = de_TagList(__getArrayIfSingleItem(output[_tS][_i]), context);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpnGatewayList
 */
const de_VpnGatewayList = (output: any, context: __SerdeContext): VpnGateway[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpnGateway(entry, context);
    });
};

/**
 * deserializeAws_ec2VpnStaticRoute
 */
const de_VpnStaticRoute = (output: any, context: __SerdeContext): VpnStaticRoute => {
  const contents: any = {};
  if (output[_dCB] != null) {
    contents[_DCB] = __expectString(output[_dCB]);
  }
  if (output[_s] != null) {
    contents[_S] = __expectString(output[_s]);
  }
  if (output[_st] != null) {
    contents[_Stat] = __expectString(output[_st]);
  }
  return contents;
};

/**
 * deserializeAws_ec2VpnStaticRouteList
 */
const de_VpnStaticRouteList = (output: any, context: __SerdeContext): VpnStaticRoute[] => {
  return (output || [])
    .filter((e: any) => e != null)
    .map((entry: any) => {
      return de_VpnStaticRoute(entry, context);
    });
};

/**
 * deserializeAws_ec2VpnTunnelLogOptions
 */
const de_VpnTunnelLogOptions = (output: any, context: __SerdeContext): VpnTunnelLogOptions => {
  const contents: any = {};
  if (output[_cWLO] != null) {
    contents[_CWLO] = de_CloudWatchLogOptions(output[_cWLO], context);
  }
  return contents;
};

/**
 * deserializeAws_ec2WithdrawByoipCidrResult
 */
const de_WithdrawByoipCidrResult = (output: any, context: __SerdeContext): WithdrawByoipCidrResult => {
  const contents: any = {};
  if (output[_bC] != null) {
    contents[_BC] = de_ByoipCidr(output[_bC], context);
  }
  return contents;
};

const deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({
  httpStatusCode: output.statusCode,
  requestId:
    output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"],
});

// Encode Uint8Array data into string with utf-8.
const collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>
  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));

const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (
  context: __SerdeContext,
  headers: __HeaderBag,
  path: string,
  resolvedHostname: string | undefined,
  body: any
): Promise<__HttpRequest> => {
  const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
  const contents: any = {
    protocol,
    hostname,
    port,
    method: "POST",
    path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
    headers,
  };
  if (resolvedHostname !== undefined) {
    contents.hostname = resolvedHostname;
  }
  if (body !== undefined) {
    contents.body = body;
  }
  return new __HttpRequest(contents);
};
const SHARED_HEADERS: __HeaderBag = {
  "content-type": "application/x-www-form-urlencoded",
};

const _ = "2016-11-15";
const _A = "Action";
const _AA = "AllocateAddress";
const _AAC = "AsnAuthorizationContext";
const _AACv = "AvailableAddressCount";
const _AAG = "AuthorizeAllGroups";
const _AAI = "AwsAccountId";
const _AAId = "AddressAllocationId";
const _AAP = "AddAllowedPrincipals";
const _AART = "AddAllocationResourceTags";
const _AASA = "AutoAcceptSharedAssociations";
const _AASAu = "AutoAcceptSharedAttachments";
const _AAT = "AcceptAddressTransfer";
const _AAZ = "AllAvailabilityZones";
const _AAc = "AccessAll";
const _AAcc = "AccountAttributes";
const _AAd = "AdditionalAccounts";
const _AAs = "AssociateAddress";
const _AAsn = "AsnAssociation";
const _AAsns = "AsnAssociations";
const _ABC = "AdvertiseByoipCidr";
const _ABHP = "ActualBlockHourlyPrice";
const _AC = "AllowedCidrs";
const _ACIA = "AssociateCarrierIpAddress";
const _ACLV = "AttachClassicLinkVpc";
const _ACT = "ArchivalCompleteTime";
const _ACVI = "AuthorizeClientVpnIngress";
const _ACVTN = "AssociateClientVpnTargetNetwork";
const _ACc = "AcceleratorCount";
const _ACd = "AddressCount";
const _ACv = "AvailableCapacity";
const _AD = "ActiveDirectory";
const _ADNL = "AllocationDefaultNetmaskLength";
const _ADO = "AssociateDhcpOptions";
const _ADRFRV = "AllowDnsResolutionFromRemoteVpc";
const _ADRTI = "AssociationDefaultRouteTableId";
const _ADT = "AdditionalDetailType";
const _ADd = "AdditionalDetails";
const _ADn = "AnnouncementDirection";
const _ADp = "ApplicationDomain";
const _AE = "AuthorizationEndpoint";
const _AEC = "AnalyzedEniCount";
const _AECIR = "AssociateEnclaveCertificateIamRole";
const _AEFLCLTRV = "AllowEgressFromLocalClassicLinkToRemoteVpc";
const _AEFLVTRCL = "AllowEgressFromLocalVpcToRemoteClassicLink";
const _AEIO = "AutoEnableIO";
const _AET = "AnalysisEndTime";
const _AEd = "AddEntries";
const _AF = "AddressFamily";
const _AFn = "AnalysisFindings";
const _AGI = "AccessGroupId";
const _AGLBA = "AddGatewayLoadBalancerArns";
const _AH = "AllocateHosts";
const _AI = "AssetIds";
const _AIA = "AssignIpv6Addresses";
const _AIAC = "AvailableIpAddressCount";
const _AIAOC = "AssignIpv6AddressOnCreation";
const _AIAs = "AssignedIpv6Addresses";
const _AIB = "AssociateIpamByoasn";
const _AIC = "AvailableInstanceCapacity";
const _AICv = "AvailableInstanceCount";
const _AIEW = "AssociateInstanceEventWindow";
const _AIG = "AttachInternetGateway";
const _AIIP = "AssociateIamInstanceProfile";
const _AIP = "AssignedIpv6Prefixes";
const _AIPC = "AllocateIpamPoolCidr";
const _AIPs = "AssignedIpv4Prefixes";
const _AIRD = "AssociateIpamResourceDiscovery";
const _AIT = "AllowedInstanceTypes";
const _AIc = "ActiveInstances";
const _AIcc = "AccountId";
const _AId = "AdditionalInfo";
const _AIl = "AllocationId";
const _AIll = "AllocationIds";
const _AIm = "AmiId";
const _AIs = "AssociationIds";
const _AIss = "AssociationId";
const _AIsse = "AssetId";
const _AIt = "AttachmentId";
const _AIth = "AthenaIntegrations";
const _AIu = "AutoImport";
const _AL = "AccessLogs";
const _ALI = "AmiLaunchIndex";
const _AM = "AcceleratorManufacturers";
const _AMIT = "AllowsMultipleInstanceTypes";
const _AMNL = "AllocationMinNetmaskLength";
const _AMNLl = "AllocationMaxNetmaskLength";
const _AMS = "ApplianceModeSupport";
const _AN = "AttributeNames";
const _ANGA = "AssociateNatGatewayAddress";
const _ANI = "AttachNetworkInterface";
const _ANLBA = "AddNetworkLoadBalancerArns";
const _ANS = "AddNetworkServices";
const _ANc = "AcceleratorNames";
const _ANt = "AttributeName";
const _AO = "AuthenticationOptions";
const _AOI = "AddressOwnerId";
const _AOR = "AddOperatingRegions";
const _AP = "AutoPlacement";
const _APCO = "AccepterPeeringConnectionOptions";
const _APH = "AlternatePathHints";
const _APIA = "AssignPrivateIpAddresses";
const _APIAs = "AssociatePublicIpAddress";
const _APIAss = "AssignedPrivateIpAddresses";
const _APICB = "AmazonProvidedIpv6CidrBlock";
const _APM = "ApplyPendingMaintenance";
const _APNGA = "AssignPrivateNatGatewayAddress";
const _APd = "AddedPrincipals";
const _APl = "AllowedPrincipals";
const _AR = "AllowReassignment";
const _ARA = "AssociatedRoleArn";
const _ARAd = "AdditionalRoutesAvailable";
const _ARC = "AcceptedRouteCount";
const _ARIEQ = "AcceptReservedInstancesExchangeQuote";
const _ARS = "AutoRecoverySupported";
const _ART = "AssociateRouteTable";
const _ARTI = "AddRouteTableIds";
const _ARTl = "AllocationResourceTags";
const _ARc = "AcceptanceRequired";
const _ARcl = "AclRule";
const _ARd = "AddressRegion";
const _ARl = "AllowReassociation";
const _ARll = "AllRegions";
const _ARs = "AssociatedRoles";
const _ARss = "AssociatedResource";
const _ARu = "AutoRecovery";
const _ARut = "AuthorizationRules";
const _AS = "AllocationStrategy";
const _ASA = "AmazonSideAsn";
const _ASCB = "AssociateSubnetCidrBlock";
const _ASGE = "AuthorizeSecurityGroupEgress";
const _ASGI = "AuthorizeSecurityGroupIngress";
const _ASGId = "AddSecurityGroupIds";
const _ASGTCVTN = "ApplySecurityGroupsToClientVpnTargetNetwork";
const _ASI = "AddSubnetIds";
const _ASIAT = "AddSupportedIpAddressTypes";
const _ASS = "AmdSevSnp";
const _AST = "AnalysisStartTime";
const _ASTB = "AnalysisStartTimeBegin";
const _ASTE = "AnalysisStartTimeEnd";
const _ASc = "ActivityStatus";
const _ASn = "AnalysisStatus";
const _ASs = "AssociationState";
const _ASss = "AssociationStatus";
const _ASt = "AttachmentStatuses";
const _ASw = "AwsService";
const _AT = "AssociationTarget";
const _ATGAI = "AccepterTransitGatewayAttachmentId";
const _ATGCB = "AddTransitGatewayCidrBlocks";
const _ATGMD = "AssociateTransitGatewayMulticastDomain";
const _ATGMDA = "AcceptTransitGatewayMulticastDomainAssociations";
const _ATGPA = "AcceptTransitGatewayPeeringAttachment";
const _ATGPT = "AssociateTransitGatewayPolicyTable";
const _ATGRT = "AssociateTransitGatewayRouteTable";
const _ATGVA = "AcceptTransitGatewayVpcAttachment";
const _ATI = "AssociateTrunkInterface";
const _ATIc = "AccepterTgwInfo";
const _ATMMB = "AcceleratorTotalMemoryMiB";
const _ATN = "AssociatedTargetNetworks";
const _ATS = "AddressTransferStatus";
const _ATc = "AcceleratorTypes";
const _ATd = "AddressingType";
const _ATdd = "AddressTransfer";
const _ATddr = "AddressTransfers";
const _ATddre = "AddressType";
const _ATl = "AllocationType";
const _ATll = "AllocationTime";
const _ATr = "ArchitectureTypes";
const _ATt = "AttachmentType";
const _ATtt = "AttachTime";
const _ATtta = "AttachedTo";
const _AV = "AttachVolume";
const _AVATP = "AttachVerifiedAccessTrustProvider";
const _AVC = "AvailableVCpus";
const _AVCB = "AssociateVpcCidrBlock";
const _AVEC = "AcceptVpcEndpointConnections";
const _AVG = "AttachVpnGateway";
const _AVI = "AccepterVpcInfo";
const _AVPC = "AcceptVpcPeeringConnection";
const _AVt = "AttributeValues";
const _AVtt = "AttributeValue";
const _AWSAKI = "AWSAccessKeyId";
const _AZ = "AvailabilityZone";
const _AZG = "AvailabilityZoneGroup";
const _AZI = "AvailabilityZoneId";
const _AZv = "AvailabilityZones";
const _Ac = "Accept";
const _Acc = "Accelerators";
const _Acl = "Acl";
const _Act = "Active";
const _Acti = "Actions";
const _Ad = "Address";
const _Add = "Add";
const _Addr = "Addresses";
const _Af = "Affinity";
const _Am = "Amount";
const _Ar = "Arn";
const _Arc = "Architecture";
const _As = "Asn";
const _Ass = "Associations";
const _Asso = "Association";
const _At = "Attribute";
const _Att = "Attachment";
const _Atta = "Attachments";
const _B = "Bucket";
const _BA = "BgpAsn";
const _BBIG = "BaselineBandwidthInGbps";
const _BBIM = "BaselineBandwidthInMbps";
const _BC = "ByoipCidr";
const _BCg = "BgpConfigurations";
const _BCy = "ByoipCidrs";
const _BCyt = "BytesConverted";
const _BDM = "BlockDeviceMappings";
const _BDMl = "BlockDurationMinutes";
const _BEBM = "BaselineEbsBandwidthMbps";
const _BEDN = "BaseEndpointDnsNames";
const _BI = "BundleInstance";
const _BII = "BranchInterfaceId";
const _BIa = "BaselineIops";
const _BIu = "BundleId";
const _BIun = "BundleIds";
const _BM = "BootMode";
const _BMa = "BareMetal";
const _BN = "BucketName";
const _BO = "BgpOptions";
const _BOu = "BucketOwner";
const _BP = "BurstablePerformance";
const _BPS = "BurstablePerformanceSupported";
const _BPi = "BillingProducts";
const _BS = "BgpStatus";
const _BT = "BannerText";
const _BTE = "BundleTaskError";
const _BTIMB = "BaselineThroughputInMBps";
const _BTu = "BundleTask";
const _BTun = "BundleTasks";
const _Bl = "Blackhole";
const _By = "Bytes";
const _Byo = "Byoasn";
const _Byoa = "Byoasns";
const _C = "Cidr";
const _CA = "CertificateArn";
const _CAC = "CidrAuthorizationContext";
const _CADNL = "ClearAllocationDefaultNetmaskLength";
const _CAU = "CoipAddressUsages";
const _CAa = "CapacityAllocations";
const _CAo = "ComponentArn";
const _CAom = "ComponentAccount";
const _CAr = "CreatedAt";
const _CB = "CidrBlock";
const _CBA = "CidrBlockAssociation";
const _CBAS = "CidrBlockAssociationSet";
const _CBDH = "CapacityBlockDurationHours";
const _CBO = "CapacityBlockOfferings";
const _CBOI = "CapacityBlockOfferingId";
const _CBS = "CidrBlockState";
const _CBSi = "CidrBlockSet";
const _CBT = "CancelBundleTask";
const _CBr = "CreatedBy";
const _CC = "CoreCount";
const _CCB = "ClientCidrBlock";
const _CCC = "CreateCoipCidr";
const _CCG = "CreateCarrierGateway";
const _CCGr = "CreateCustomerGateway";
const _CCO = "ClientConnectOptions";
const _CCP = "CreateCoipPool";
const _CCR = "CancelCapacityReservation";
const _CCRF = "CancelCapacityReservationFleets";
const _CCRFE = "CancelCapacityReservationFleetError";
const _CCRFr = "CreateCapacityReservationFleet";
const _CCRr = "CreateCapacityReservation";
const _CCT = "CancelConversionTask";
const _CCVE = "CreateClientVpnEndpoint";
const _CCVR = "CreateClientVpnRoute";
const _CCl = "ClientConfiguration";
const _CCo = "CoipCidr";
const _CCp = "CpuCredits";
const _CCu = "CurrencyCode";
const _CD = "ClientData";
const _CDH = "CapacityDurationHours";
const _CDO = "CreateDhcpOptions";
const _CDS = "CreateDefaultSubnet";
const _CDSDA = "ConfigDeliveryS3DestinationArn";
const _CDSu = "CustomDnsServers";
const _CDV = "CreateDefaultVpc";
const _CDr = "CreateDate";
const _CDre = "CreationDate";
const _CDrea = "CreatedDate";
const _CE = "CronExpression";
const _CEOIG = "CreateEgressOnlyInternetGateway";
const _CET = "CancelExportTask";
const _CETo = "ConnectionEstablishedTime";
const _CETon = "ConnectionEndTime";
const _CEo = "ConnectionEvents";
const _CF = "CreateFleet";
const _CFI = "CopyFpgaImage";
const _CFIr = "CreateFpgaImage";
const _CFL = "CreateFlowLogs";
const _CFS = "CurrentFleetState";
const _CFo = "ContainerFormat";
const _CG = "CarrierGateway";
const _CGC = "CustomerGatewayConfiguration";
const _CGI = "CarrierGatewayId";
const _CGIa = "CarrierGatewayIds";
const _CGIu = "CustomerGatewayId";
const _CGIus = "CustomerGatewayIds";
const _CGa = "CarrierGateways";
const _CGu = "CustomerGateway";
const _CGur = "CurrentGeneration";
const _CGus = "CustomerGateways";
const _CI = "CopyImage";
const _CIBM = "CurrentInstanceBootMode";
const _CICE = "CreateInstanceConnectEndpoint";
const _CIET = "CreateInstanceExportTask";
const _CIEW = "CreateInstanceEventWindow";
const _CIG = "CreateInternetGateway";
const _CILP = "CancelImageLaunchPermission";
const _CIP = "CreateIpamPool";
const _CIRD = "CreateIpamResourceDiscovery";
const _CIS = "CreateIpamScope";
const _CISI = "CurrentIpamScopeId";
const _CIT = "CancelImportTask";
const _CITo = "CopyImageTags";
const _CIa = "CarrierIp";
const _CIi = "CidrIp";
const _CIid = "CidrIpv6";
const _CIidr = "CidrIpv4";
const _CIl = "ClientId";
const _CIli = "ClientIp";
const _CIo = "ConnectionId";
const _CIom = "ComponentId";
const _CIop = "CoIp";
const _CIr = "CreateImage";
const _CIre = "CreateIpam";
const _CKP = "CreateKeyPair";
const _CLB = "ClassicLoadBalancers";
const _CLBC = "ClassicLoadBalancersConfig";
const _CLBL = "ClassicLoadBalancerListener";
const _CLBO = "ClientLoginBannerOptions";
const _CLDS = "ClassicLinkDnsSupported";
const _CLE = "ClassicLinkEnabled";
const _CLG = "CloudwatchLogGroup";
const _CLGR = "CreateLocalGatewayRoute";
const _CLGRT = "CreateLocalGatewayRouteTable";
const _CLGRTVA = "CreateLocalGatewayRouteTableVpcAssociation";
const _CLGRTVIGA = "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation";
const _CLO = "ConnectionLogOptions";
const _CLS = "CloudwatchLogStream";
const _CLT = "CreateLaunchTemplate";
const _CLTV = "CreateLaunchTemplateVersion";
const _CM = "CpuManufacturers";
const _CMKE = "CustomerManagedKeyEnabled";
const _CMPL = "CreateManagedPrefixList";
const _CN = "CommonName";
const _CNA = "CreateNetworkAcl";
const _CNAA = "CoreNetworkAttachmentArn";
const _CNAE = "CreateNetworkAclEntry";
const _CNAo = "CoreNetworkArn";
const _CNAon = "ConnectionNotificationArn";
const _CNG = "CreateNatGateway";
const _CNI = "CreateNetworkInterface";
const _CNIAS = "CreateNetworkInsightsAccessScope";
const _CNIP = "CreateNetworkInsightsPath";
const _CNIPr = "CreateNetworkInterfacePermission";
const _CNIo = "ConnectionNotificationIds";
const _CNIon = "ConnectionNotificationId";
const _CNIor = "CoreNetworkId";
const _CNS = "ConnectionNotificationState";
const _CNSo = "ConnectionNotificationSet";
const _CNT = "ConnectionNotificationType";
const _CNo = "ConnectionNotification";
const _CO = "CpuOptions";
const _COI = "CustomerOwnedIp";
const _COIP = "CustomerOwnedIpv4Pool";
const _COP = "CoolOffPeriod";
const _COPEO = "CoolOffPeriodExpiresOn";
const _CP = "CoipPool";
const _CPC = "ConnectPeerConfiguration";
const _CPG = "CreatePlacementGroup";
const _CPI = "ConfirmProductInstance";
const _CPIP = "CreatePublicIpv4Pool";
const _CPIo = "CoipPoolId";
const _CPo = "CoipPools";
const _CR = "CreateRoute";
const _CRA = "CapacityReservationArn";
const _CRCC = "ClientRootCertificateChain";
const _CRCCA = "ClientRootCertificateChainArn";
const _CRF = "CapacityReservationFleets";
const _CRFA = "CapacityReservationFleetArn";
const _CRFI = "CapacityReservationFleetIds";
const _CRFIa = "CapacityReservationFleetId";
const _CRG = "CapacityReservationGroups";
const _CRI = "CapacityReservationId";
const _CRIL = "CancelReservedInstancesListing";
const _CRILr = "CreateReservedInstancesListing";
const _CRIT = "CreateRestoreImageTask";
const _CRIa = "CapacityReservationIds";
const _CRL = "CertificateRevocationList";
const _CRO = "CapacityReservationOptions";
const _CRP = "CapacityReservationPreference";
const _CRRGA = "CapacityReservationResourceGroupArn";
const _CRRVT = "CreateReplaceRootVolumeTask";
const _CRS = "CapacityReservationSpecification";
const _CRT = "CreateRouteTable";
const _CRTa = "CapacityReservationTarget";
const _CRa = "CancelReason";
const _CRap = "CapacityRebalance";
const _CRapa = "CapacityReservation";
const _CRapac = "CapacityReservations";
const _CRo = "ComponentRegion";
const _CS = "CopySnapshot";
const _CSBN = "CertificateS3BucketName";
const _CSCR = "CreateSubnetCidrReservation";
const _CSDS = "CreateSpotDatafeedSubscription";
const _CSFR = "CancelSpotFleetRequests";
const _CSFRS = "CurrentSpotFleetRequestState";
const _CSG = "CreateSecurityGroup";
const _CSIR = "CancelSpotInstanceRequests";
const _CSIRa = "CancelledSpotInstanceRequests";
const _CSIT = "CreateStoreImageTask";
const _CSOK = "CertificateS3ObjectKey";
const _CSl = "ClientSecret";
const _CSo = "ComplianceStatus";
const _CSon = "ConnectionStatuses";
const _CSr = "CreateSnapshot";
const _CSre = "CreateSnapshots";
const _CSrea = "CreateSubnet";
const _CSred = "CreditSpecification";
const _CSu = "CurrentState";
const _CSur = "CurrentStatus";
const _CT = "CreateTags";
const _CTC = "ConnectionTrackingConfiguration";
const _CTFS = "CopyTagsFromSource";
const _CTG = "CreateTransitGateway";
const _CTGC = "CreateTransitGatewayConnect";
const _CTGCP = "CreateTransitGatewayConnectPeer";
const _CTGMD = "CreateTransitGatewayMulticastDomain";
const _CTGPA = "CreateTransitGatewayPeeringAttachment";
const _CTGPLR = "CreateTransitGatewayPrefixListReference";
const _CTGPT = "CreateTransitGatewayPolicyTable";
const _CTGR = "CreateTransitGatewayRoute";
const _CTGRT = "CreateTransitGatewayRouteTable";
const _CTGRTA = "CreateTransitGatewayRouteTableAnnouncement";
const _CTGVA = "CreateTransitGatewayVpcAttachment";
const _CTI = "ConversionTaskId";
const _CTIo = "ConversionTaskIds";
const _CTMF = "CreateTrafficMirrorFilter";
const _CTMFR = "CreateTrafficMirrorFilterRule";
const _CTMS = "CreateTrafficMirrorSession";
const _CTMT = "CreateTrafficMirrorTarget";
const _CTS = "ConnectionTrackingSpecification";
const _CTl = "ClientToken";
const _CTo = "ConnectivityType";
const _CTom = "CompleteTime";
const _CTon = "ConversionTasks";
const _CTonv = "ConversionTask";
const _CTr = "CreateTime";
const _CTre = "CreationTime";
const _CTrea = "CreationTimestamp";
const _CV = "CreateVolume";
const _CVAE = "CreateVerifiedAccessEndpoint";
const _CVAG = "CreateVerifiedAccessGroup";
const _CVAI = "CreateVerifiedAccessInstance";
const _CVATP = "CreateVerifiedAccessTrustProvider";
const _CVC = "CreateVpnConnection";
const _CVCR = "CreateVpnConnectionRoute";
const _CVE = "CreateVpcEndpoint";
const _CVECN = "CreateVpcEndpointConnectionNotification";
const _CVEI = "ClientVpnEndpointId";
const _CVEIl = "ClientVpnEndpointIds";
const _CVESC = "CreateVpcEndpointServiceConfiguration";
const _CVEl = "ClientVpnEndpoints";
const _CVG = "CreateVpnGateway";
const _CVP = "CreateVolumePermission";
const _CVPC = "CreateVpcPeeringConnection";
const _CVPr = "CreateVolumePermissions";
const _CVTN = "ClientVpnTargetNetworks";
const _CVr = "CreateVpc";
const _CVu = "CurrentVersion";
const _CWL = "CloudWatchLogs";
const _CWLO = "CloudWatchLogOptions";
const _Ca = "Cascade";
const _Cat = "Category";
const _Ch = "Checksum";
const _Ci = "Cidrs";
const _Co = "Comment";
const _Cod = "Code";
const _Com = "Component";
const _Con = "Context";
const _Conf = "Configured";
const _Conn = "Connections";
const _Cor = "Cores";
const _Cou = "Count";
const _D = "Destination";
const _DA = "DescribeAddresses";
const _DAA = "DescribeAccountAttributes";
const _DAAI = "DelegatedAdminAccountId";
const _DAAe = "DescribeAddressesAttribute";
const _DAIF = "DescribeAggregateIdFormat";
const _DAIT = "DenyAllIgwTraffic";
const _DANPMS = "DescribeAwsNetworkPerformanceMetricSubscriptions";
const _DANPMSi = "DisableAwsNetworkPerformanceMetricSubscription";
const _DART = "DefaultAssociationRouteTable";
const _DAS = "DisableApiStop";
const _DAT = "DescribeAddressTransfers";
const _DATi = "DisableAddressTransfer";
const _DATis = "DisableApiTermination";
const _DAZ = "DescribeAvailabilityZones";
const _DAe = "DeprecateAt";
const _DAep = "DeprovisionedAddresses";
const _DAes = "DestinationAddresses";
const _DAest = "DestinationAddress";
const _DAesti = "DestinationArn";
const _DAi = "DisassociateAddress";
const _DBC = "DeprovisionByoipCidr";
const _DBCe = "DescribeByoipCidrs";
const _DBT = "DescribeBundleTasks";
const _DC = "DisallowedCidrs";
const _DCA = "DomainCertificateArn";
const _DCAR = "DeliverCrossAccountRole";
const _DCB = "DestinationCidrBlock";
const _DCBO = "DescribeCapacityBlockOfferings";
const _DCC = "DeleteCoipCidr";
const _DCG = "DeleteCarrierGateway";
const _DCGe = "DeleteCustomerGateway";
const _DCGes = "DescribeCarrierGateways";
const _DCGesc = "DescribeCustomerGateways";
const _DCLI = "DescribeClassicLinkInstances";
const _DCLV = "DetachClassicLinkVpc";
const _DCP = "DeleteCoipPool";
const _DCPe = "DescribeCoipPools";
const _DCR = "DescribeCapacityReservations";
const _DCRF = "DescribeCapacityReservationFleets";
const _DCT = "DescribeConversionTasks";
const _DCVAR = "DescribeClientVpnAuthorizationRules";
const _DCVC = "DescribeClientVpnConnections";
const _DCVE = "DeleteClientVpnEndpoint";
const _DCVEe = "DescribeClientVpnEndpoints";
const _DCVR = "DeleteClientVpnRoute";
const _DCVRe = "DescribeClientVpnRoutes";
const _DCVTN = "DescribeClientVpnTargetNetworks";
const _DCVTNi = "DisassociateClientVpnTargetNetwork";
const _DCe = "DestinationCidr";
const _DCef = "DefaultCores";
const _DCh = "DhcpConfigurations";
const _DCi = "DiskContainers";
const _DCis = "DiskContainer";
const _DDO = "DeleteDhcpOptions";
const _DDOe = "DescribeDhcpOptions";
const _DE = "DnsEntries";
const _DECIR = "DisassociateEnclaveCertificateIamRole";
const _DEEBD = "DisableEbsEncryptionByDefault";
const _DEG = "DescribeElasticGpus";
const _DEIT = "DescribeExportImageTasks";
const _DEKI = "DataEncryptionKeyId";
const _DEOIG = "DeleteEgressOnlyInternetGateway";
const _DEOIGe = "DescribeEgressOnlyInternetGateways";
const _DET = "DescribeExportTasks";
const _DF = "DeleteFleets";
const _DFA = "DefaultForAz";
const _DFH = "DescribeFleetHistory";
const _DFI = "DeleteFpgaImage";
const _DFIA = "DescribeFpgaImageAttribute";
const _DFIe = "DescribeFleetInstances";
const _DFIes = "DescribeFpgaImages";
const _DFL = "DeleteFlowLogs";
const _DFLI = "DescribeFastLaunchImages";
const _DFLe = "DescribeFlowLogs";
const _DFLi = "DisableFastLaunch";
const _DFSR = "DescribeFastSnapshotRestores";
const _DFSRi = "DisableFastSnapshotRestores";
const _DFe = "DescribeFleets";
const _DH = "DescribeHosts";
const _DHI = "DedicatedHostIds";
const _DHR = "DescribeHostReservations";
const _DHRO = "DescribeHostReservationOfferings";
const _DHS = "DedicatedHostsSupported";
const _DI = "DeleteIpam";
const _DIA = "DescribeImageAttribute";
const _DIAe = "DescribeInstanceAttribute";
const _DIB = "DeprovisionIpamByoasn";
const _DIBPA = "DisableImageBlockPublicAccess";
const _DIBe = "DescribeIpamByoasn";
const _DIBi = "DisassociateIpamByoasn";
const _DICB = "DestinationIpv6CidrBlock";
const _DICE = "DeleteInstanceConnectEndpoint";
const _DICEe = "DescribeInstanceConnectEndpoints";
const _DICS = "DescribeInstanceCreditSpecifications";
const _DID = "DisableImageDeprecation";
const _DIENA = "DeregisterInstanceEventNotificationAttributes";
const _DIENAe = "DescribeInstanceEventNotificationAttributes";
const _DIEW = "DeleteInstanceEventWindow";
const _DIEWe = "DescribeInstanceEventWindows";
const _DIEWi = "DisassociateInstanceEventWindow";
const _DIF = "DescribeIdFormat";
const _DIFi = "DiskImageFormat";
const _DIG = "DeleteInternetGateway";
const _DIGe = "DescribeInternetGateways";
const _DIGet = "DetachInternetGateway";
const _DIIF = "DescribeIdentityIdFormat";
const _DIIP = "DisassociateIamInstanceProfile";
const _DIIPA = "DescribeIamInstanceProfileAssociations";
const _DIIT = "DescribeImportImageTasks";
const _DIOAA = "DisableIpamOrganizationAdminAccount";
const _DIP = "DeleteIpamPool";
const _DIPC = "DeprovisionIpamPoolCidr";
const _DIPe = "DescribeIpamPools";
const _DIPes = "DescribeIpv6Pools";
const _DIRD = "DeleteIpamResourceDiscovery";
const _DIRDA = "DescribeIpamResourceDiscoveryAssociations";
const _DIRDe = "DescribeIpamResourceDiscoveries";
const _DIRDi = "DisassociateIpamResourceDiscovery";
const _DIS = "DeleteIpamScope";
const _DISI = "DestinationIpamScopeId";
const _DIST = "DescribeImportSnapshotTasks";
const _DISe = "DescribeInstanceStatus";
const _DISes = "DescribeIpamScopes";
const _DISi = "DiskImageSize";
const _DIT = "DescribeInstanceTopology";
const _DITO = "DescribeInstanceTypeOfferings";
const _DITe = "DescribeInstanceTypes";
const _DIe = "DeregisterImage";
const _DIes = "DescribeImages";
const _DIesc = "DescribeInstances";
const _DIescr = "DescribeIpams";
const _DIest = "DestinationIp";
const _DIev = "DeviceIndex";
const _DIevi = "DeviceId";
const _DIi = "DisableImage";
const _DIir = "DirectoryId";
const _DIis = "DiskImages";
const _DKP = "DeleteKeyPair";
const _DKPe = "DescribeKeyPairs";
const _DLADI = "DisableLniAtDeviceIndex";
const _DLEM = "DeliverLogsErrorMessage";
const _DLG = "DescribeLocalGateways";
const _DLGR = "DeleteLocalGatewayRoute";
const _DLGRT = "DeleteLocalGatewayRouteTable";
const _DLGRTVA = "DeleteLocalGatewayRouteTableVpcAssociation";
const _DLGRTVAe = "DescribeLocalGatewayRouteTableVpcAssociations";
const _DLGRTVIGA = "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation";
const _DLGRTVIGAe = "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations";
const _DLGRTe = "DescribeLocalGatewayRouteTables";
const _DLGVI = "DescribeLocalGatewayVirtualInterfaces";
const _DLGVIG = "DescribeLocalGatewayVirtualInterfaceGroups";
const _DLPA = "DeliverLogsPermissionArn";
const _DLS = "DescribeLockedSnapshots";
const _DLSe = "DeliverLogsStatus";
const _DLT = "DeleteLaunchTemplate";
const _DLTV = "DeleteLaunchTemplateVersions";
const _DLTVe = "DescribeLaunchTemplateVersions";
const _DLTe = "DescribeLaunchTemplates";
const _DMA = "DescribeMovingAddresses";
const _DMGM = "DeregisteredMulticastGroupMembers";
const _DMGS = "DeregisteredMulticastGroupSources";
const _DMPL = "DeleteManagedPrefixList";
const _DMPLe = "DescribeManagedPrefixLists";
const _DN = "DeviceName";
const _DNA = "DeleteNetworkAcl";
const _DNAE = "DeleteNetworkAclEntry";
const _DNAe = "DescribeNetworkAcls";
const _DNCI = "DefaultNetworkCardIndex";
const _DNG = "DeleteNatGateway";
const _DNGA = "DisassociateNatGatewayAddress";
const _DNGe = "DescribeNatGateways";
const _DNI = "DeleteNetworkInterface";
const _DNIA = "DeleteNetworkInsightsAnalysis";
const _DNIAS = "DeleteNetworkInsightsAccessScope";
const _DNIASA = "DeleteNetworkInsightsAccessScopeAnalysis";
const _DNIASAe = "DescribeNetworkInsightsAccessScopeAnalyses";
const _DNIASe = "DescribeNetworkInsightsAccessScopes";
const _DNIAe = "DescribeNetworkInsightsAnalyses";
const _DNIAes = "DescribeNetworkInterfaceAttribute";
const _DNII = "DeregisteredNetworkInterfaceIds";
const _DNIP = "DeleteNetworkInsightsPath";
const _DNIPe = "DeleteNetworkInterfacePermission";
const _DNIPes = "DescribeNetworkInsightsPaths";
const _DNIPesc = "DescribeNetworkInterfacePermissions";
const _DNIe = "DescribeNetworkInterfaces";
const _DNIet = "DetachNetworkInterface";
const _DNn = "DnsName";
const _DNo = "DomainName";
const _DO = "DestinationOptions";
const _DOA = "DestinationOutpostArn";
const _DOI = "DhcpOptionsId";
const _DOIh = "DhcpOptionsIds";
const _DOT = "DeleteOnTermination";
const _DOe = "DeviceOptions";
const _DOh = "DhcpOptions";
const _DOn = "DnsOptions";
const _DP = "DestinationPort";
const _DPDTA = "DPDTimeoutAction";
const _DPDTS = "DPDTimeoutSeconds";
const _DPG = "DeletePlacementGroup";
const _DPGe = "DescribePlacementGroups";
const _DPIF = "DescribePrincipalIdFormat";
const _DPIP = "DeletePublicIpv4Pool";
const _DPIPC = "DeprovisionPublicIpv4PoolCidr";
const _DPIPe = "DescribePublicIpv4Pools";
const _DPL = "DescribePrefixLists";
const _DPLI = "DestinationPrefixListId";
const _DPLe = "DestinationPrefixLists";
const _DPR = "DestinationPortRange";
const _DPRT = "DefaultPropagationRouteTable";
const _DPRe = "DestinationPortRanges";
const _DPe = "DestinationPorts";
const _DQ = "DataQueries";
const _DQRI = "DeleteQueuedReservedInstances";
const _DR = "DeleteRoute";
const _DRDAI = "DefaultResourceDiscoveryAssociationId";
const _DRDI = "DefaultResourceDiscoveryId";
const _DRI = "DescribeReservedInstances";
const _DRIL = "DescribeReservedInstancesListings";
const _DRIM = "DescribeReservedInstancesModifications";
const _DRIO = "DescribeReservedInstancesOfferings";
const _DRIT = "DnsRecordIpType";
const _DRRV = "DeleteReplacedRootVolume";
const _DRRVT = "DescribeReplaceRootVolumeTasks";
const _DRS = "DataRetentionSupport";
const _DRT = "DeleteRouteTable";
const _DRTA = "DefaultRouteTableAssociation";
const _DRTP = "DefaultRouteTablePropagation";
const _DRTe = "DescribeRouteTables";
const _DRTi = "DisassociateRouteTable";
const _DRa = "DataResponses";
const _DRe = "DescribeRegions";
const _DRes = "DestinationRegion";
const _DRi = "DiscoveryRegion";
const _DRr = "DryRun";
const _DRy = "DynamicRouting";
const _DS = "DeleteSnapshot";
const _DSA = "DescribeSnapshotAttribute";
const _DSBPA = "DisableSnapshotBlockPublicAccess";
const _DSCA = "DisableSerialConsoleAccess";
const _DSCB = "DisassociateSubnetCidrBlock";
const _DSCR = "DeleteSubnetCidrReservation";
const _DSCRe = "DeletedSubnetCidrReservation";
const _DSDS = "DeleteSpotDatafeedSubscription";
const _DSDSe = "DescribeSpotDatafeedSubscription";
const _DSFI = "DescribeSpotFleetInstances";
const _DSFR = "DescribeSpotFleetRequests";
const _DSFRH = "DescribeSpotFleetRequestHistory";
const _DSG = "DeleteSecurityGroup";
const _DSGR = "DescribeSecurityGroupReferences";
const _DSGRe = "DescribeSecurityGroupRules";
const _DSGe = "DescribeSecurityGroups";
const _DSI = "DescribeScheduledInstances";
const _DSIA = "DescribeScheduledInstanceAvailability";
const _DSIR = "DescribeSpotInstanceRequests";
const _DSIT = "DescribeStoreImageTasks";
const _DSPH = "DescribeSpotPriceHistory";
const _DSSG = "DescribeStaleSecurityGroups";
const _DSTS = "DescribeSnapshotTierStatus";
const _DSe = "DeleteSubnet";
const _DSel = "DeliveryStream";
const _DSeli = "DeliveryStatus";
const _DSes = "DescribeSnapshots";
const _DSesc = "DescribeSubnets";
const _DSn = "DnsServers";
const _DSns = "DnsSupport";
const _DT = "DeleteTags";
const _DTA = "DpdTimeoutAction";
const _DTCT = "DefaultTargetCapacityType";
const _DTG = "DeleteTransitGateway";
const _DTGA = "DescribeTransitGatewayAttachments";
const _DTGC = "DeleteTransitGatewayConnect";
const _DTGCP = "DeleteTransitGatewayConnectPeer";
const _DTGCPe = "DescribeTransitGatewayConnectPeers";
const _DTGCe = "DescribeTransitGatewayConnects";
const _DTGMD = "DeleteTransitGatewayMulticastDomain";
const _DTGMDe = "DescribeTransitGatewayMulticastDomains";
const _DTGMDi = "DisassociateTransitGatewayMulticastDomain";
const _DTGMGM = "DeregisterTransitGatewayMulticastGroupMembers";
const _DTGMGS = "DeregisterTransitGatewayMulticastGroupSources";
const _DTGPA = "DeleteTransitGatewayPeeringAttachment";
const _DTGPAe = "DescribeTransitGatewayPeeringAttachments";
const _DTGPLR = "DeleteTransitGatewayPrefixListReference";
const _DTGPT = "DeleteTransitGatewayPolicyTable";
const _DTGPTe = "DescribeTransitGatewayPolicyTables";
const _DTGPTi = "DisassociateTransitGatewayPolicyTable";
const _DTGR = "DeleteTransitGatewayRoute";
const _DTGRT = "DeleteTransitGatewayRouteTable";
const _DTGRTA = "DeleteTransitGatewayRouteTableAnnouncement";
const _DTGRTAe = "DescribeTransitGatewayRouteTableAnnouncements";
const _DTGRTP = "DisableTransitGatewayRouteTablePropagation";
const _DTGRTe = "DescribeTransitGatewayRouteTables";
const _DTGRTi = "DisassociateTransitGatewayRouteTable";
const _DTGVA = "DeleteTransitGatewayVpcAttachment";
const _DTGVAe = "DescribeTransitGatewayVpcAttachments";
const _DTGe = "DescribeTransitGateways";
const _DTI = "DisassociateTrunkInterface";
const _DTIA = "DescribeTrunkInterfaceAssociations";
const _DTMF = "DeleteTrafficMirrorFilter";
const _DTMFR = "DeleteTrafficMirrorFilterRule";
const _DTMFe = "DescribeTrafficMirrorFilters";
const _DTMS = "DeleteTrafficMirrorSession";
const _DTMSe = "DescribeTrafficMirrorSessions";
const _DTMT = "DeleteTrafficMirrorTarget";
const _DTMTe = "DescribeTrafficMirrorTargets";
const _DTPC = "DefaultThreadsPerCore";
const _DTPT = "DeviceTrustProviderType";
const _DTS = "DpdTimeoutSeconds";
const _DTe = "DescribeTags";
const _DTel = "DeletionTime";
const _DTele = "DeleteTime";
const _DTep = "DeprecationTime";
const _DTi = "DisablingTime";
const _DTis = "DisabledTime";
const _DV = "DeleteVolume";
const _DVA = "DescribeVolumeAttribute";
const _DVAE = "DeleteVerifiedAccessEndpoint";
const _DVAEe = "DescribeVerifiedAccessEndpoints";
const _DVAG = "DeleteVerifiedAccessGroup";
const _DVAGe = "DescribeVerifiedAccessGroups";
const _DVAI = "DeleteVerifiedAccessInstance";
const _DVAILC = "DescribeVerifiedAccessInstanceLoggingConfigurations";
const _DVAIe = "DescribeVerifiedAccessInstances";
const _DVATP = "DeleteVerifiedAccessTrustProvider";
const _DVATPe = "DescribeVerifiedAccessTrustProviders";
const _DVATPet = "DetachVerifiedAccessTrustProvider";
const _DVAe = "DescribeVpcAttribute";
const _DVC = "DeleteVpnConnection";
const _DVCB = "DisassociateVpcCidrBlock";
const _DVCL = "DescribeVpcClassicLink";
const _DVCLDS = "DescribeVpcClassicLinkDnsSupport";
const _DVCLDSi = "DisableVpcClassicLinkDnsSupport";
const _DVCLi = "DisableVpcClassicLink";
const _DVCR = "DeleteVpnConnectionRoute";
const _DVCe = "DescribeVpnConnections";
const _DVCef = "DefaultVCpus";
const _DVD = "DeviceValidationDomain";
const _DVE = "DeleteVpcEndpoints";
const _DVEC = "DescribeVpcEndpointConnections";
const _DVECN = "DeleteVpcEndpointConnectionNotifications";
const _DVECNe = "DescribeVpcEndpointConnectionNotifications";
const _DVES = "DescribeVpcEndpointServices";
const _DVESC = "DeleteVpcEndpointServiceConfigurations";
const _DVESCe = "DescribeVpcEndpointServiceConfigurations";
const _DVESP = "DescribeVpcEndpointServicePermissions";
const _DVEe = "DescribeVpcEndpoints";
const _DVG = "DeleteVpnGateway";
const _DVGe = "DescribeVpnGateways";
const _DVGet = "DetachVpnGateway";
const _DVM = "DescribeVolumesModifications";
const _DVN = "DefaultVersionNumber";
const _DVPC = "DeleteVpcPeeringConnection";
const _DVPCe = "DescribeVpcPeeringConnections";
const _DVRP = "DisableVgwRoutePropagation";
const _DVS = "DescribeVolumeStatus";
const _DVe = "DeleteVpc";
const _DVef = "DefaultVersion";
const _DVes = "DescribeVolumes";
const _DVesc = "DescribeVpcs";
const _DVest = "DestinationVpc";
const _DVet = "DetachVolume";
const _Da = "Data";
const _De = "Description";
const _Dea = "Deadline";
const _Des = "Destinations";
const _Det = "Details";
const _Dev = "Device";
const _Di = "Direction";
const _Dis = "Disks";
const _Do = "Domain";
const _Du = "Duration";
const _E = "Ebs";
const _EA = "EnableAcceleration";
const _EANPMS = "EnableAwsNetworkPerformanceMetricSubscription";
const _EAT = "EnableAddressTransfer";
const _EB = "EgressBytes";
const _EBV = "ExcludeBootVolume";
const _EC = "ErrorCode";
const _ECTP = "ExcessCapacityTerminationPolicy";
const _ECVCC = "ExportClientVpnClientConfiguration";
const _ECVCCRL = "ExportClientVpnClientCertificateRevocationList";
const _ECx = "ExplanationCode";
const _ED = "EndDate";
const _EDH = "EnableDnsHostnames";
const _EDP = "EndpointDomainPrefix";
const _EDR = "EndDateRange";
const _EDS = "EnableDnsSupport";
const _EDT = "EndDateType";
const _EDVI = "ExcludeDataVolumeIds";
const _EDf = "EffectiveDate";
const _EDn = "EnableDns64";
const _EDnd = "EndpointDomain";
const _EDv = "EventDescription";
const _EDx = "ExpirationDate";
const _EEBD = "EbsEncryptionByDefault";
const _EEEBD = "EnableEbsEncryptionByDefault";
const _EFL = "EnableFastLaunch";
const _EFR = "EgressFilterRules";
const _EFSR = "EnableFastSnapshotRestores";
const _EGA = "ElasticGpuAssociations";
const _EGAI = "ElasticGpuAssociationId";
const _EGAS = "ElasticGpuAssociationState";
const _EGAT = "ElasticGpuAssociationTime";
const _EGH = "ElasticGpuHealth";
const _EGI = "ElasticGpuIds";
const _EGIl = "ElasticGpuId";
const _EGS = "ElasticGpuSpecifications";
const _EGSl = "ElasticGpuSpecification";
const _EGSla = "ElasticGpuSet";
const _EGSlas = "ElasticGpuState";
const _EGT = "ElasticGpuType";
const _EH = "EndHour";
const _EI = "EnableImage";
const _EIA = "ElasticInferenceAccelerators";
const _EIAA = "ElasticInferenceAcceleratorArn";
const _EIAAI = "ElasticInferenceAcceleratorAssociationId";
const _EIAAS = "ElasticInferenceAcceleratorAssociationState";
const _EIAAT = "ElasticInferenceAcceleratorAssociationTime";
const _EIAAl = "ElasticInferenceAcceleratorAssociations";
const _EIBPA = "EnableImageBlockPublicAccess";
const _EID = "EnableImageDeprecation";
const _EIOAA = "EnableIpamOrganizationAdminAccount";
const _EIT = "ExcludedInstanceTypes";
const _EITI = "ExportImageTaskIds";
const _EITIx = "ExportImageTaskId";
const _EITS = "EncryptionInTransitSupported";
const _EITx = "ExportImageTasks";
const _EIb = "EbsInfo";
const _EIf = "EfaInfo";
const _EIv = "EventInformation";
const _EIve = "EventId";
const _EIx = "ExportImage";
const _EIxc = "ExchangeId";
const _EKKI = "EncryptionKmsKeyId";
const _ELADI = "EnableLniAtDeviceIndex";
const _ELBL = "ElasticLoadBalancerListener";
const _EM = "ErrorMessage";
const _ENAUM = "EnableNetworkAddressUsageMetrics";
const _EO = "EbsOptimized";
const _EOI = "EbsOptimizedInfo";
const _EOIG = "EgressOnlyInternetGateway";
const _EOIGI = "EgressOnlyInternetGatewayId";
const _EOIGIg = "EgressOnlyInternetGatewayIds";
const _EOIGg = "EgressOnlyInternetGateways";
const _EOS = "EbsOptimizedSupport";
const _EOn = "EnclaveOptions";
const _EP = "ExcludePaths";
const _EPI = "EnablePrimaryIpv6";
const _EPg = "EgressPackets";
const _ERAOS = "EnableReachabilityAnalyzerOrganizationSharing";
const _ERNDAAAAR = "EnableResourceNameDnsAAAARecord";
const _ERNDAAAAROL = "EnableResourceNameDnsAAAARecordOnLaunch";
const _ERNDAR = "EnableResourceNameDnsARecord";
const _ERNDAROL = "EnableResourceNameDnsARecordOnLaunch";
const _ES = "EphemeralStorage";
const _ESBPA = "EnableSnapshotBlockPublicAccess";
const _ESCA = "EnableSerialConsoleAccess";
const _ESE = "EnaSrdEnabled";
const _ESS = "EnaSrdSpecification";
const _ESSn = "EnaSrdSupported";
const _EST = "EventSubType";
const _ESUE = "EnaSrdUdpEnabled";
const _ESUS = "EnaSrdUdpSpecification";
const _ESf = "EfaSupported";
const _ESn = "EnaSupport";
const _ESnc = "EncryptionSupport";
const _ET = "EndpointType";
const _ETGR = "ExportTransitGatewayRoutes";
const _ETGRTP = "EnableTransitGatewayRouteTablePropagation";
const _ETI = "ExportTaskId";
const _ETIx = "ExportTaskIds";
const _ETLC = "EnableTunnelLifecycleControl";
const _ETST = "ExportToS3Task";
const _ETa = "EarliestTime";
const _ETi = "EipTags";
const _ETn = "EndTime";
const _ETna = "EnablingTime";
const _ETnab = "EnabledTime";
const _ETv = "EventType";
const _ETx = "ExpirationTime";
const _ETxp = "ExportTask";
const _ETxpo = "ExportTasks";
const _EU = "ExecutableUsers";
const _EVCL = "EnableVpcClassicLink";
const _EVCLDS = "EnableVpcClassicLinkDnsSupport";
const _EVIO = "EnableVolumeIO";
const _EVRP = "EnableVgwRoutePropagation";
const _EWD = "EndWeekDay";
const _Eg = "Egress";
const _En = "Enabled";
const _Enc = "Encrypted";
const _End = "End";
const _Endp = "Endpoint";
const _Ent = "Entries";
const _Er = "Error";
const _Err = "Errors";
const _Ev = "Events";
const _Eve = "Event";
const _Ex = "Explanations";
const _F = "Force";
const _FA = "FederatedAuthentication";
const _FAD = "FilterAtDestination";
const _FAS = "FilterAtSource";
const _FAi = "FirstAddress";
const _FC = "FulfilledCapacity";
const _FCR = "FleetCapacityReservations";
const _FCa = "FailureCode";
const _FCi = "FindingComponents";
const _FD = "ForceDelete";
const _FDN = "FipsDnsName";
const _FE = "FipsEnabled";
const _FF = "FileFormat";
const _FFC = "FailedFleetCancellations";
const _FFi = "FindingsFound";
const _FI = "FleetIds";
const _FIA = "FilterInArns";
const _FIAp = "FpgaImageAttribute";
const _FIGI = "FpgaImageGlobalId";
const _FII = "FpgaImageId";
const _FIIp = "FpgaImageIds";
const _FIPSE = "FIPSEnabled";
const _FIi = "FindingId";
const _FIl = "FleetId";
const _FIp = "FpgaImages";
const _FIpg = "FpgaInfo";
const _FL = "FlowLogs";
const _FLI = "FlowLogIds";
const _FLIa = "FastLaunchImages";
const _FLIl = "FlowLogId";
const _FLS = "FlowLogStatus";
const _FM = "FailureMessage";
const _FODC = "FulfilledOnDemandCapacity";
const _FP = "FromPort";
const _FPC = "ForwardPathComponents";
const _FPi = "FixedPrice";
const _FQPD = "FailedQueuedPurchaseDeletions";
const _FR = "FailureReason";
const _FRa = "FastRestored";
const _FS = "FleetState";
const _FSR = "FastSnapshotRestores";
const _FSRSE = "FastSnapshotRestoreStateErrors";
const _FSRi = "FirewallStatelessRule";
const _FSRir = "FirewallStatefulRule";
const _FSST = "FirstSlotStartTime";
const _FSSTR = "FirstSlotStartTimeRange";
const _FTE = "FreeTierEligible";
const _Fa = "Fault";
const _Fi = "Filters";
const _Fil = "Filter";
const _Fl = "Fleets";
const _Fo = "Format";
const _Fp = "Fpgas";
const _Fr = "From";
const _Fre = "Frequency";
const _G = "Groups";
const _GA = "GroupArn";
const _GAECIR = "GetAssociatedEnclaveCertificateIamRoles";
const _GAIPC = "GetAssociatedIpv6PoolCidrs";
const _GANPD = "GetAwsNetworkPerformanceData";
const _GAS = "GatewayAssociationState";
const _GCO = "GetConsoleOutput";
const _GCPU = "GetCoipPoolUsage";
const _GCRU = "GetCapacityReservationUsage";
const _GCS = "GetConsoleScreenshot";
const _GD = "GroupDescription";
const _GDCS = "GetDefaultCreditSpecification";
const _GEDKKI = "GetEbsDefaultKmsKeyId";
const _GEEBD = "GetEbsEncryptionByDefault";
const _GFLIT = "GetFlowLogsIntegrationTemplate";
const _GGFCR = "GetGroupsForCapacityReservation";
const _GHRPP = "GetHostReservationPurchasePreview";
const _GI = "GatewayId";
const _GIA = "GroupIpAddress";
const _GIAH = "GetIpamAddressHistory";
const _GIBPAS = "GetImageBlockPublicAccessState";
const _GIDA = "GetIpamDiscoveredAccounts";
const _GIDPA = "GetIpamDiscoveredPublicAddresses";
const _GIDRC = "GetIpamDiscoveredResourceCidrs";
const _GIPA = "GetIpamPoolAllocations";
const _GIPC = "GetIpamPoolCidrs";
const _GIRC = "GetIpamResourceCidrs";
const _GITFIR = "GetInstanceTypesFromInstanceRequirements";
const _GIUD = "GetInstanceUefiData";
const _GIp = "GpuInfo";
const _GIr = "GroupId";
const _GIro = "GroupIds";
const _GK = "GreKey";
const _GLBA = "GatewayLoadBalancerArns";
const _GLBEI = "GatewayLoadBalancerEndpointId";
const _GLTD = "GetLaunchTemplateData";
const _GM = "GroupMember";
const _GMPLA = "GetManagedPrefixListAssociations";
const _GMPLE = "GetManagedPrefixListEntries";
const _GN = "GroupName";
const _GNIASAF = "GetNetworkInsightsAccessScopeAnalysisFindings";
const _GNIASC = "GetNetworkInsightsAccessScopeContent";
const _GNr = "GroupNames";
const _GOI = "GroupOwnerId";
const _GPD = "GetPasswordData";
const _GRIEQ = "GetReservedInstancesExchangeQuote";
const _GS = "GroupSource";
const _GSBPAS = "GetSnapshotBlockPublicAccessState";
const _GSCAS = "GetSerialConsoleAccessStatus";
const _GSCR = "GetSubnetCidrReservations";
const _GSGFV = "GetSecurityGroupsForVpc";
const _GSPS = "GetSpotPlacementScores";
const _GTGAP = "GetTransitGatewayAttachmentPropagations";
const _GTGMDA = "GetTransitGatewayMulticastDomainAssociations";
const _GTGPLR = "GetTransitGatewayPrefixListReferences";
const _GTGPTA = "GetTransitGatewayPolicyTableAssociations";
const _GTGPTE = "GetTransitGatewayPolicyTableEntries";
const _GTGRTA = "GetTransitGatewayRouteTableAssociations";
const _GTGRTP = "GetTransitGatewayRouteTablePropagations";
const _GVAEP = "GetVerifiedAccessEndpointPolicy";
const _GVAGP = "GetVerifiedAccessGroupPolicy";
const _GVCDSC = "GetVpnConnectionDeviceSampleConfiguration";
const _GVCDT = "GetVpnConnectionDeviceTypes";
const _GVTRS = "GetVpnTunnelReplacementStatus";
const _Gp = "Gpus";
const _Gr = "Group";
const _H = "Hypervisor";
const _HCP = "HiveCompatiblePartitions";
const _HE = "HttpEndpoint";
const _HI = "HostIds";
const _HIS = "HostIdSet";
const _HIo = "HostId";
const _HM = "HostMaintenance";
const _HO = "HibernationOptions";
const _HP = "HostProperties";
const _HPI = "HttpProtocolIpv6";
const _HPRHL = "HttpPutResponseHopLimit";
const _HPo = "HourlyPrice";
const _HR = "HostRecovery";
const _HRGA = "HostResourceGroupArn";
const _HRI = "HostReservationId";
const _HRIS = "HostReservationIdSet";
const _HRS = "HostReservationSet";
const _HRi = "HistoryRecords";
const _HS = "HibernationSupported";
const _HT = "HttpTokens";
const _HTo = "HostnameType";
const _HZI = "HostedZoneId";
const _Hi = "Hibernate";
const _Ho = "Hosts";
const _I = "Issuer";
const _IA = "Ipv6Addresses";
const _IAC = "Ipv6AddressCount";
const _IAI = "IncludeAllInstances";
const _IAIn = "InferenceAcceleratorInfo";
const _IAPI = "Ipv4AddressesPerInterface";
const _IAPIp = "Ipv6AddressesPerInterface";
const _IAT = "IpAddressType";
const _IATOI = "IncludeAllTagsOfInstance";
const _IAn = "InterfaceAssociation";
const _IAnt = "InterfaceAssociations";
const _IAp = "IpAddress";
const _IApa = "IpamArn";
const _IApv = "Ipv6Address";
const _IB = "IngressBytes";
const _IBPAS = "ImageBlockPublicAccessState";
const _IC = "InstanceCount";
const _ICA = "Ipv6CidrAssociations";
const _ICB = "Ipv6CidrBlock";
const _ICBA = "Ipv6CidrBlockAssociation";
const _ICBAS = "Ipv6CidrBlockAssociationSet";
const _ICBNBG = "Ipv6CidrBlockNetworkBorderGroup";
const _ICBS = "Ipv6CidrBlockState";
const _ICBSp = "Ipv6CidrBlockSet";
const _ICBn = "InsideCidrBlocks";
const _ICE = "InstanceConnectEndpoint";
const _ICEA = "InstanceConnectEndpointArn";
const _ICEI = "InstanceConnectEndpointId";
const _ICEIn = "InstanceConnectEndpointIds";
const _ICEn = "InstanceConnectEndpoints";
const _ICS = "InstanceCreditSpecifications";
const _ICVCCRL = "ImportClientVpnClientCertificateRevocationList";
const _ICn = "InstanceCounts";
const _ICp = "Ipv6Cidr";
const _ID = "IncludeDeprecated";
const _IDA = "IpamDiscoveredAccounts";
const _IDPA = "IpamDiscoveredPublicAddresses";
const _IDRC = "IpamDiscoveredResourceCidrs";
const _IDm = "ImageData";
const _IDn = "IncludeDisabled";
const _IDs = "IsDefault";
const _IE = "IsEgress";
const _IED = "InstanceExportDetails";
const _IEI = "InstanceEventId";
const _IEW = "InstanceEventWindow";
const _IEWI = "InstanceEventWindowId";
const _IEWIn = "InstanceEventWindowIds";
const _IEWS = "InstanceEventWindowState";
const _IEWn = "InstanceEventWindows";
const _IF = "InstanceFamily";
const _IFCS = "InstanceFamilyCreditSpecification";
const _IFR = "IamFleetRole";
const _IFRn = "IngressFilterRules";
const _IG = "InstanceGenerations";
const _IGI = "InternetGatewayId";
const _IGIn = "InternetGatewayIds";
const _IGn = "InternetGateway";
const _IGnt = "InternetGateways";
const _IH = "InstanceHealth";
const _IHn = "InboundHeader";
const _II = "ImportImage";
const _IIB = "InstanceInterruptionBehavior";
const _IIP = "IamInstanceProfile";
const _IIPA = "IamInstanceProfileAssociation";
const _IIPAa = "IamInstanceProfileAssociations";
const _IIPI = "Ipv6IpamPoolId";
const _IIPIp = "Ipv4IpamPoolId";
const _IIS = "InstanceIdSet";
const _IISB = "InstanceInitiatedShutdownBehavior";
const _IIT = "ImportImageTasks";
const _IIm = "ImportInstance";
const _IIma = "ImageId";
const _IImag = "ImageIds";
const _IIn = "InstanceId";
const _IIns = "InstanceIds";
const _IIp = "IpamId";
const _IIpa = "IpamIds";
const _IKEV = "InternetKeyExchangeVersion";
const _IKEVe = "IKEVersions";
const _IKP = "ImportKeyPair";
const _IL = "ImageLocation";
const _ILn = "InstanceLifecycle";
const _IM = "IncludeMarketplace";
const _IMC = "InstanceMatchCriteria";
const _IMO = "InstanceMarketOptions";
const _IMOn = "InstanceMetadataOptions";
const _IMT = "InstanceMetadataTags";
const _IMU = "ImportManifestUrl";
const _IMn = "InstanceMonitorings";
const _IN = "Ipv6Native";
const _INL = "Ipv6NetmaskLength";
const _INLp = "Ipv4NetmaskLength";
const _IOA = "ImageOwnerAlias";
const _IOI = "IpOwnerId";
const _IOIn = "InstanceOwnerId";
const _IP = "Ipv6Prefixes";
const _IPA = "IpamPoolAllocation";
const _IPAI = "IpamPoolAllocationId";
const _IPAp = "IpamPoolAllocations";
const _IPApa = "IpamPoolArn";
const _IPC = "Ipv6PrefixCount";
const _IPCI = "IpamPoolCidrId";
const _IPCp = "Ipv4PrefixCount";
const _IPCpa = "IpamPoolCidr";
const _IPCpam = "IpamPoolCidrs";
const _IPE = "IpPermissionsEgress";
const _IPI = "IpamPoolId";
const _IPIp = "IpamPoolIds";
const _IPIs = "IsPrimaryIpv6";
const _IPK = "IncludePublicKey";
const _IPO = "IpamPoolOwner";
const _IPR = "IsPermanentRestore";
const _IPTUC = "InstancePoolsToUseCount";
const _IPn = "InstancePlatform";
const _IPng = "IngressPackets";
const _IPns = "InstancePort";
const _IPnt = "InterfacePermission";
const _IPnte = "InterfaceProtocol";
const _IPo = "IoPerformance";
const _IPp = "Ipv4Prefixes";
const _IPpa = "IpamPool";
const _IPpam = "IpamPools";
const _IPpe = "IpPermissions";
const _IPpr = "IpProtocol";
const _IPpv = "Ipv6Pool";
const _IPpvo = "Ipv6Pools";
const _IPpvr = "Ipv4Prefix";
const _IPpvre = "Ipv6Prefix";
const _IPs = "IsPrimary";
const _IR = "InstanceRequirements";
const _IRC = "IpamResourceCidrs";
const _IRCp = "IpamResourceCidr";
const _IRD = "IpamResourceDiscovery";
const _IRDA = "IpamResourceDiscoveryAssociation";
const _IRDAA = "IpamResourceDiscoveryAssociationArn";
const _IRDAI = "IpamResourceDiscoveryAssociationIds";
const _IRDAIp = "IpamResourceDiscoveryAssociationId";
const _IRDAp = "IpamResourceDiscoveryAssociations";
const _IRDApa = "IpamResourceDiscoveryArn";
const _IRDI = "IpamResourceDiscoveryId";
const _IRDIp = "IpamResourceDiscoveryIds";
const _IRDR = "IpamResourceDiscoveryRegion";
const _IRDp = "IpamResourceDiscoveries";
const _IRSDA = "IntegrationResultS3DestinationArn";
const _IRT = "IngressRouteTable";
const _IRWM = "InstanceRequirementsWithMetadata";
const _IRp = "IpRanges";
const _IRpa = "IpamRegion";
const _IRpv = "Ipv6Ranges";
const _IS = "ImportSnapshot";
const _ISA = "IpamScopeArn";
const _ISI = "IpamScopeId";
const _ISIn = "InstanceStorageInfo";
const _ISIp = "IpamScopeIds";
const _ISL = "InputStorageLocation";
const _ISS = "InstanceStorageSupported";
const _IST = "ImportSnapshotTasks";
const _ISTp = "IpamScopeType";
const _ISg = "Igmpv2Support";
const _ISm = "ImdsSupport";
const _ISmp = "ImpairedSince";
const _ISn = "InstanceSpecification";
const _ISns = "InstanceStatuses";
const _ISnst = "InstanceState";
const _ISnsta = "InstanceStatus";
const _ISnt = "IntegrateServices";
const _ISp = "Ipv6Support";
const _ISpa = "IpamScope";
const _ISpam = "IpamScopes";
const _ISpv = "Ipv6Supported";
const _IT = "InstanceType";
const _ITA = "InstanceTagAttribute";
const _ITC = "IcmpTypeCode";
const _ITCn = "IncludeTrustContext";
const _ITI = "ImportTaskId";
const _ITIm = "ImportTaskIds";
const _ITK = "InstanceTagKeys";
const _ITO = "InstanceTypeOfferings";
const _ITS = "InstanceTypeSpecifications";
const _ITm = "ImageType";
const _ITn = "InterfaceType";
const _ITns = "InstanceTenancy";
const _ITnst = "InstanceTypes";
const _ITnsta = "InstanceTags";
const _IU = "InstanceUsages";
const _IUp = "IpUsage";
const _IV = "ImportVolume";
const _IVE = "IsValidExchange";
const _IVk = "IkeVersions";
const _Id = "Id";
const _Im = "Image";
const _Ima = "Images";
const _In = "Instances";
const _Ins = "Instance";
const _Int = "Interval";
const _Io = "Iops";
const _Ip = "Ipv4";
const _Ipa = "Ipam";
const _Ipam = "Ipams";
const _Ipv = "Ipv6";
const _K = "Kernel";
const _KDF = "KinesisDataFirehose";
const _KF = "KeyFormat";
const _KFe = "KeyFingerprint";
const _KI = "KernelId";
const _KKA = "KmsKeyArn";
const _KKI = "KmsKeyId";
const _KM = "KeyMaterial";
const _KN = "KeyName";
const _KNe = "KeyNames";
const _KP = "KeyPairs";
const _KPI = "KeyPairId";
const _KPIe = "KeyPairIds";
const _KT = "KeyType";
const _Ke = "Key";
const _Key = "Keyword";
const _L = "Locale";
const _LA = "LocalAddress";
const _LADT = "LastAttemptedDiscoveryTime";
const _LAZ = "LaunchedAvailabilityZone";
const _LAa = "LastAddress";
const _LB = "LoadBalancers";
const _LBA = "LoadBalancerArn";
const _LBAo = "LocalBgpAsn";
const _LBC = "LoadBalancersConfig";
const _LBLP = "LoadBalancerListenerPort";
const _LBO = "LoadBalancerOptions";
const _LBP = "LoadBalancerPort";
const _LBT = "LoadBalancerTarget";
const _LBTG = "LoadBalancerTargetGroup";
const _LBTGo = "LoadBalancerTargetGroups";
const _LBTP = "LoadBalancerTargetPort";
const _LC = "LoggingConfigurations";
const _LCA = "LicenseConfigurationArn";
const _LCO = "LockCreatedOn";
const _LCo = "LoggingConfiguration";
const _LD = "LogDestination";
const _LDST = "LockDurationStartTime";
const _LDT = "LogDestinationType";
const _LDo = "LockDuration";
const _LE = "LogEnabled";
const _LEO = "LockExpiresOn";
const _LET = "LastEvaluatedTime";
const _LEa = "LastError";
const _LF = "LogFormat";
const _LFA = "LambdaFunctionArn";
const _LG = "LaunchGroup";
const _LGA = "LogGroupArn";
const _LGI = "LocalGatewayId";
const _LGIo = "LocalGatewayIds";
const _LGN = "LogGroupName";
const _LGRT = "LocalGatewayRouteTable";
const _LGRTA = "LocalGatewayRouteTableArn";
const _LGRTI = "LocalGatewayRouteTableId";
const _LGRTIo = "LocalGatewayRouteTableIds";
const _LGRTVA = "LocalGatewayRouteTableVpcAssociation";
const _LGRTVAI = "LocalGatewayRouteTableVpcAssociationId";
const _LGRTVAIo = "LocalGatewayRouteTableVpcAssociationIds";
const _LGRTVAo = "LocalGatewayRouteTableVpcAssociations";
const _LGRTVIGA = "LocalGatewayRouteTableVirtualInterfaceGroupAssociation";
const _LGRTVIGAI = "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId";
const _LGRTVIGAIo = "LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds";
const _LGRTVIGAo = "LocalGatewayRouteTableVirtualInterfaceGroupAssociations";
const _LGRTo = "LocalGatewayRouteTables";
const _LGVI = "LocalGatewayVirtualInterfaces";
const _LGVIG = "LocalGatewayVirtualInterfaceGroups";
const _LGVIGI = "LocalGatewayVirtualInterfaceGroupId";
const _LGVIGIo = "LocalGatewayVirtualInterfaceGroupIds";
const _LGVII = "LocalGatewayVirtualInterfaceIds";
const _LGVIIo = "LocalGatewayVirtualInterfaceId";
const _LGo = "LogGroup";
const _LGoc = "LocalGateways";
const _LIIRB = "ListImagesInRecycleBin";
const _LINC = "LocalIpv4NetworkCidr";
const _LINCo = "LocalIpv6NetworkCidr";
const _LLT = "LastLaunchedTime";
const _LM = "LockMode";
const _LMA = "LastMaintenanceApplied";
const _LO = "LogOptions";
const _LOF = "LogOutputFormat";
const _LP = "LoadPermission";
const _LPa = "LaunchPermission";
const _LPau = "LaunchPermissions";
const _LPi = "LimitPrice";
const _LPo = "LoadPermissions";
const _LS = "LockSnapshot";
const _LSC = "LastStatusChange";
const _LSDT = "LastSuccessfulDiscoveryTime";
const _LSIRB = "ListSnapshotsInRecycleBin";
const _LSL = "LogsStorageLocation";
const _LST = "LocalStorageTypes";
const _LSa = "LaunchSpecification";
const _LSau = "LaunchSpecifications";
const _LSi = "LicenseSpecifications";
const _LSo = "LocalStorage";
const _LSoc = "LockState";
const _LT = "LocationType";
const _LTAO = "LaunchTemplateAndOverrides";
const _LTC = "LaunchTemplateConfigs";
const _LTD = "LaunchTemplateData";
const _LTI = "LaunchTemplateId";
const _LTIa = "LaunchTemplateIds";
const _LTN = "LaunchTemplateName";
const _LTNa = "LaunchTemplateNames";
const _LTOS = "LastTieringOperationStatus";
const _LTOSD = "LastTieringOperationStatusDetail";
const _LTP = "LastTieringProgress";
const _LTS = "LaunchTemplateSpecification";
const _LTST = "LastTieringStartTime";
const _LTV = "LaunchTemplateVersion";
const _LTVa = "LaunchTemplateVersions";
const _LTa = "LaunchTemplate";
const _LTat = "LatestTime";
const _LTau = "LaunchTemplates";
const _LTaun = "LaunchTime";
const _LTi = "LicenseType";
const _LTo = "LocalTarget";
const _LUT = "LastUpdatedTime";
const _LV = "LogVersion";
const _LVN = "LatestVersionNumber";
const _La = "Latest";
const _Li = "Lifecycle";
const _Lic = "Licenses";
const _Lo = "Location";
const _M = "Min";
const _MA = "MutualAuthentication";
const _MAA = "ModifyAddressAttribute";
const _MAAA = "MaintenanceAutoAppliedAfter";
const _MAE = "MultiAttachEnabled";
const _MAI = "MaxAggregationInterval";
const _MAS = "MovingAddressStatuses";
const _MATV = "MoveAddressToVpc";
const _MAZG = "ModifyAvailabilityZoneGroup";
const _MAa = "MacAddress";
const _MBCTI = "MoveByoipCidrToIpam";
const _MBIM = "MaximumBandwidthInMbps";
const _MC = "MaxCount";
const _MCOIOL = "MapCustomerOwnedIpOnLaunch";
const _MCR = "ModifyCapacityReservation";
const _MCRF = "ModifyCapacityReservationFleet";
const _MCVE = "ModifyClientVpnEndpoint";
const _MCi = "MinCount";
const _MCis = "MissingComponent";
const _MD = "MaxDuration";
const _MDA = "MulticastDomainAssociations";
const _MDCS = "ModifyDefaultCreditSpecification";
const _MDDS = "MaxDrainDurationSeconds";
const _MDK = "MetaDataKey";
const _MDV = "MetaDataValue";
const _MDa = "MaintenanceDetails";
const _MDe = "MetaData";
const _MDi = "MinDuration";
const _ME = "MaxEntries";
const _MEDKKI = "ModifyEbsDefaultKmsKeyId";
const _MEI = "MaximumEfaInterfaces";
const _MF = "ModifyFleet";
const _MFIA = "ModifyFpgaImageAttribute";
const _MG = "MulticastGroups";
const _MGBPVC = "MemoryGiBPerVCpu";
const _MH = "ModifyHosts";
const _MI = "ModifyIpam";
const _MIA = "ModifyImageAttribute";
const _MIAo = "ModifyInstanceAttribute";
const _MIC = "MaxInstanceCount";
const _MICRA = "ModifyInstanceCapacityReservationAttributes";
const _MICS = "ModifyInstanceCreditSpecification";
const _MIEST = "ModifyInstanceEventStartTime";
const _MIEW = "ModifyInstanceEventWindow";
const _MIF = "ModifyIdFormat";
const _MIIF = "ModifyIdentityIdFormat";
const _MIMO = "ModifyInstanceMaintenanceOptions";
const _MIMOo = "ModifyInstanceMetadataOptions";
const _MIP = "ModifyInstancePlacement";
const _MIPo = "ModifyIpamPool";
const _MIRC = "ModifyIpamResourceCidr";
const _MIRD = "ModifyIpamResourceDiscovery";
const _MIS = "ModifyIpamScope";
const _MIa = "MaximumIops";
const _MIe = "MemoryInfo";
const _MIo = "MonitorInstances";
const _MLGR = "ModifyLocalGatewayRoute";
const _MLT = "ModifyLaunchTemplate";
const _MMB = "MemoryMiB";
const _MMPL = "ModifyManagedPrefixList";
const _MNC = "MaximumNetworkCards";
const _MNI = "MaximumNetworkInterfaces";
const _MNIA = "ModifyNetworkInterfaceAttribute";
const _MO = "MetadataOptions";
const _MOSLRG = "MemberOfServiceLinkedResourceGroup";
const _MOa = "MaintenanceOptions";
const _MP = "MatchPaths";
const _MPDNO = "ModifyPrivateDnsNameOptions";
const _MPIOL = "MapPublicIpOnLaunch";
const _MPL = "MaxParallelLaunches";
const _MPa = "MaxPrice";
const _MPe = "MetricPoints";
const _MR = "MaxResults";
const _MRI = "ModifyReservedInstances";
const _MRo = "ModificationResults";
const _MRu = "MultiRegion";
const _MS = "MaintenanceStrategies";
const _MSA = "ModifySnapshotAttribute";
const _MSAo = "ModifySubnetAttribute";
const _MSDIH = "MaxSlotDurationInHours";
const _MSDIHi = "MinSlotDurationInHours";
const _MSFR = "ModifySpotFleetRequest";
const _MSGR = "ModifySecurityGroupRules";
const _MST = "ModifySnapshotTier";
const _MSa = "ManagementState";
const _MSo = "MoveStatus";
const _MSod = "ModificationState";
const _MSu = "MulticastSupport";
const _MT = "MarketType";
const _MTC = "MinTargetCapacity";
const _MTDID = "MaxTermDurationInDays";
const _MTDIDi = "MinTermDurationInDays";
const _MTG = "ModifyTransitGateway";
const _MTGPLR = "ModifyTransitGatewayPrefixListReference";
const _MTGVA = "ModifyTransitGatewayVpcAttachment";
const _MTIMB = "MaximumThroughputInMBps";
const _MTMFNS = "ModifyTrafficMirrorFilterNetworkServices";
const _MTMFR = "ModifyTrafficMirrorFilterRule";
const _MTMS = "ModifyTrafficMirrorSession";
const _MTP = "MaxTotalPrice";
const _MTe = "MemberType";
const _MV = "ModifyVolume";
const _MVA = "ModifyVolumeAttribute";
const _MVAE = "ModifyVerifiedAccessEndpoint";
const _MVAEP = "ModifyVerifiedAccessEndpointPolicy";
const _MVAG = "ModifyVerifiedAccessGroup";
const _MVAGP = "ModifyVerifiedAccessGroupPolicy";
const _MVAI = "ModifyVerifiedAccessInstance";
const _MVAILC = "ModifyVerifiedAccessInstanceLoggingConfiguration";
const _MVATP = "ModifyVerifiedAccessTrustProvider";
const _MVAo = "ModifyVpcAttribute";
const _MVC = "ModifyVpnConnection";
const _MVCO = "ModifyVpnConnectionOptions";
const _MVE = "ModifyVpcEndpoint";
const _MVECN = "ModifyVpcEndpointConnectionNotification";
const _MVESC = "ModifyVpcEndpointServiceConfiguration";
const _MVESP = "ModifyVpcEndpointServicePermissions";
const _MVESPR = "ModifyVpcEndpointServicePayerResponsibility";
const _MVEa = "ManagesVpcEndpoints";
const _MVPCO = "ModifyVpcPeeringConnectionOptions";
const _MVT = "ModifyVpcTenancy";
const _MVTC = "ModifyVpnTunnelCertificate";
const _MVTO = "ModifyVpnTunnelOptions";
const _MVa = "MaxVersion";
const _MVi = "MinVersion";
const _Ma = "Max";
const _Mai = "Main";
const _Man = "Manufacturer";
const _Mar = "Marketplace";
const _Me = "Message";
const _Mes = "Messages";
const _Met = "Metric";
const _Mo = "Mode";
const _Mon = "Monitoring";
const _Moni = "Monitored";
const _N = "Name";
const _NA = "NetworkAcl";
const _NAAI = "NetworkAclAssociationId";
const _NAI = "NetworkAclId";
const _NAIe = "NetworkAclIds";
const _NAIew = "NewAssociationId";
const _NAe = "NetworkAcls";
const _NAo = "NotAfter";
const _NB = "NotBefore";
const _NBD = "NotBeforeDeadline";
const _NBG = "NetworkBorderGroup";
const _NBGe = "NetworkBandwidthGbps";
const _NC = "NetworkCards";
const _NCI = "NetworkCardIndex";
const _ND = "NoDevice";
const _NES = "NitroEnclavesSupport";
const _NG = "NatGateway";
const _NGA = "NatGatewayAddresses";
const _NGI = "NatGatewayId";
const _NGIa = "NatGatewayIds";
const _NGa = "NatGateways";
const _NI = "NetworkInterfaces";
const _NIA = "NetworkInsightsAnalyses";
const _NIAA = "NetworkInsightsAnalysisArn";
const _NIAI = "NetworkInsightsAnalysisId";
const _NIAIe = "NetworkInsightsAnalysisIds";
const _NIAS = "NetworkInsightsAccessScope";
const _NIASA = "NetworkInsightsAccessScopeAnalyses";
const _NIASAA = "NetworkInsightsAccessScopeAnalysisArn";
const _NIASAI = "NetworkInsightsAccessScopeAnalysisId";
const _NIASAIe = "NetworkInsightsAccessScopeAnalysisIds";
const _NIASAe = "NetworkInsightsAccessScopeArn";
const _NIASAet = "NetworkInsightsAccessScopeAnalysis";
const _NIASC = "NetworkInsightsAccessScopeContent";
const _NIASI = "NetworkInsightsAccessScopeId";
const _NIASIe = "NetworkInsightsAccessScopeIds";
const _NIASe = "NetworkInsightsAccessScopes";
const _NIAe = "NetworkInsightsAnalysis";
const _NIC = "NetworkInterfaceCount";
const _NID = "NetworkInterfaceDescription";
const _NII = "NetworkInterfaceId";
const _NIIe = "NetworkInterfaceIds";
const _NIO = "NetworkInterfaceOptions";
const _NIOI = "NetworkInterfaceOwnerId";
const _NIP = "NetworkInsightsPath";
const _NIPA = "NetworkInsightsPathArn";
const _NIPI = "NetworkInsightsPathId";
const _NIPIe = "NetworkInterfacePermissionId";
const _NIPIet = "NetworkInsightsPathIds";
const _NIPIetw = "NetworkInterfacePermissionIds";
const _NIPe = "NetworkInsightsPaths";
const _NIPet = "NetworkInterfacePermissions";
const _NIe = "NetworkId";
const _NIet = "NetworkInterface";
const _NIetw = "NetworkInfo";
const _NL = "NetmaskLength";
const _NLBA = "NetworkLoadBalancerArn";
const _NLBAe = "NetworkLoadBalancerArns";
const _NN = "NetworkNodes";
const _NP = "NetworkPerformance";
const _NPF = "NetworkPathFound";
const _NPe = "NetworkPlatform";
const _NR = "NoReboot";
const _NS = "NvmeSupport";
const _NSST = "NextSlotStartTime";
const _NSe = "NetworkServices";
const _NT = "NextToken";
const _NTI = "NitroTpmInfo";
const _NTS = "NitroTpmSupport";
const _NTe = "NetworkType";
const _O = "Options";
const _OA = "OutpostArn";
const _OAr = "OrganizationArn";
const _OArg = "OrganizationArns";
const _OAw = "OwnerAlias";
const _OC = "OfferingClass";
const _OD = "OccurrenceDays";
const _ODAS = "OnDemandAllocationStrategy";
const _ODFC = "OnDemandFulfilledCapacity";
const _ODMPPOLP = "OnDemandMaxPricePercentageOverLowestPrice";
const _ODMTP = "OnDemandMaxTotalPrice";
const _ODO = "OnDemandOptions";
const _ODS = "OccurrenceDaySet";
const _ODTC = "OnDemandTargetCapacity";
const _OH = "OutboundHeader";
const _OI = "OfferingId";
const _OIA = "OutsideIpAddress";
const _OIAT = "OutsideIpAddressType";
const _OIS = "OptInStatus";
const _OIr = "OriginalIops";
const _OIw = "OwnerIds";
const _OIwn = "OwnerId";
const _OK = "ObjectKey";
const _OMAE = "OriginalMultiAttachEnabled";
const _OO = "OidcOptions";
const _OR = "OperatingRegions";
const _ORIWEA = "OutputReservedInstancesWillExpireAt";
const _ORTE = "OccurrenceRelativeToEnd";
const _OS = "OfferingSet";
const _OST = "OldestSampleTime";
const _OSr = "OriginalSize";
const _OSv = "OverlapStatus";
const _OT = "OfferingType";
const _OTp = "OperationType";
const _OTpt = "OptimizingTime";
const _OTr = "OriginalThroughput";
const _OU = "OccurrenceUnit";
const _OUA = "OrganizationalUnitArn";
const _OUAr = "OrganizationalUnitArns";
const _OVT = "OriginalVolumeType";
const _Or = "Origin";
const _Ou = "Output";
const _Ov = "Overrides";
const _Ow = "Owners";
const _Own = "Owner";
const _P = "Protocol";
const _PA = "PubliclyAdvertisable";
const _PAI = "PeerAccountId";
const _PAIe = "PeeringAttachmentId";
const _PAR = "PoolAddressRange";
const _PARo = "PoolAddressRanges";
const _PAe = "PeerAddress";
const _PAee = "PeerAsn";
const _PAo = "PoolArn";
const _PAr = "PrincipalArn";
const _PB = "ProvisionedBandwidth";
const _PBA = "PeerBgpAsn";
const _PBC = "ProvisionByoipCidr";
const _PBIG = "PeakBandwidthInGbps";
const _PC = "ProductCode";
const _PCB = "PurchaseCapacityBlock";
const _PCBo = "PoolCidrBlocks";
const _PCI = "PreserveClientIp";
const _PCIr = "ProductCodeId";
const _PCNI = "PeerCoreNetworkId";
const _PCS = "PostureComplianceStatuses";
const _PCT = "ProductCodeType";
const _PCa = "PartitionCount";
const _PCo = "PoolCidrs";
const _PCoo = "PoolCount";
const _PCr = "ProductCodes";
const _PD = "PolicyDocument";
const _PDE = "PrivateDnsEnabled";
const _PDHGN = "Phase1DHGroupNumbers";
const _PDHGNh = "Phase2DHGroupNumbers";
const _PDHT = "PrivateDnsHostnameType";
const _PDHTOL = "PrivateDnsHostnameTypeOnLaunch";
const _PDN = "PrivateDnsName";
const _PDNC = "PrivateDnsNameConfiguration";
const _PDNO = "PrivateDnsNameOptions";
const _PDNOOL = "PrivateDnsNameOptionsOnLaunch";
const _PDNVS = "PrivateDnsNameVerificationState";
const _PDNr = "PrivateDnsNames";
const _PDNu = "PublicDnsName";
const _PDOFIRE = "PrivateDnsOnlyForInboundResolverEndpoint";
const _PDRTI = "PropagationDefaultRouteTableId";
const _PDSI = "PublicDefaultScopeId";
const _PDSIr = "PrivateDefaultScopeId";
const _PDa = "PasswordData";
const _PDay = "PaymentDue";
const _PDl = "PlatformDetails";
const _PDo = "PoolDepth";
const _PDr = "ProductDescription";
const _PDri = "PricingDetails";
const _PDro = "ProductDescriptions";
const _PE = "PolicyEnabled";
const _PEA = "Phase1EncryptionAlgorithms";
const _PEAh = "Phase2EncryptionAlgorithms";
const _PED = "PartitionEndDate";
const _PF = "PacketField";
const _PFS = "PreviousFleetState";
const _PG = "PlacementGroup";
const _PGA = "PlacementGroupArn";
const _PGI = "PlacementGroupInfo";
const _PGl = "PlacementGroups";
const _PHP = "PerHourPartition";
const _PHR = "PurchaseHostReservation";
const _PHS = "PacketHeaderStatement";
const _PI = "PublicIp";
const _PIA = "PrivateIpAddresses";
const _PIAC = "PrivateIpAddressCount";
const _PIACr = "PrivateIpAddressConfigs";
const _PIAh = "Phase1IntegrityAlgorithms";
const _PIAha = "Phase2IntegrityAlgorithms";
const _PIAr = "PrivateIpAddress";
const _PIAu = "PublicIpAddress";
const _PIB = "ProvisionIpamByoasn";
const _PIP = "PublicIpv4Pool";
const _PIPC = "ProvisionIpamPoolCidr";
const _PIPI = "PublicIpv4PoolId";
const _PIPu = "PublicIpv4Pools";
const _PIS = "PublicIpSource";
const _PIc = "PciId";
const _PIo = "PoolId";
const _PIoo = "PoolIds";
const _PIr = "PrimaryIpv6";
const _PIri = "PrivateIp";
const _PIro = "ProcessorInfo";
const _PIu = "PublicIps";
const _PK = "PublicKey";
const _PKM = "PublicKeyMaterial";
const _PL = "PacketLength";
const _PLA = "PrefixListAssociations";
const _PLAr = "PrefixListArn";
const _PLF = "PartitionLoadFrequency";
const _PLI = "PrefixListId";
const _PLIr = "PrefixListIds";
const _PLN = "PrefixListName";
const _PLOI = "PrefixListOwnerId";
const _PLS = "Phase1LifetimeSeconds";
const _PLSh = "Phase2LifetimeSeconds";
const _PLr = "PrefixList";
const _PLre = "PrefixLists";
const _PM = "PendingMaintenance";
const _PN = "PartitionNumber";
const _PNC = "PreviewNextCidr";
const _PO = "PaymentOption";
const _POI = "PeerOwnerId";
const _POe = "PeeringOptions";
const _PP = "ProgressPercentage";
const _PPIPC = "ProvisionPublicIpv4PoolCidr";
const _PR = "PortRange";
const _PRIO = "PurchaseReservedInstancesOffering";
const _PRN = "PolicyReferenceName";
const _PRNo = "PolicyRuleNumber";
const _PRU = "PtrRecordUpdate";
const _PRa = "PayerResponsibility";
const _PRe = "PeerRegion";
const _PRer = "PermanentRestore";
const _PRo = "PortRanges";
const _PRol = "PolicyRule";
const _PRt = "PtrRecord";
const _PRu = "PurchaseRequests";
const _PS = "PriceSchedules";
const _PSD = "PartitionStartDate";
const _PSET = "PreviousSlotEndTime";
const _PSFRS = "PreviousSpotFleetRequestState";
const _PSI = "PurchaseScheduledInstances";
const _PSK = "PreSharedKey";
const _PSKU = "PublicSigningKeyUrl";
const _PSe = "PeeringStatus";
const _PSer = "PermissionState";
const _PSr = "PreviousState";
const _PSre = "PreviousStatus";
const _PT = "PurchaseToken";
const _PTGI = "PeerTransitGatewayId";
const _PTS = "PoolTagSpecifications";
const _PTr = "PrincipalType";
const _PTro = "ProvisionTime";
const _PTu = "PurchaseTime";
const _PU = "PresignedUrl";
const _PV = "PreviousVersion";
const _PVI = "PeerVpcId";
const _PVIr = "PrimaryVpcId";
const _PVr = "PropagatingVgws";
const _PZI = "ParentZoneId";
const _PZN = "ParentZoneName";
const _Pe = "Permission";
const _Per = "Period";
const _Pl = "Placement";
const _Pla = "Platform";
const _Po = "Port";
const _Pr = "Prefix";
const _Pri = "Priority";
const _Pric = "Price";
const _Prim = "Primary";
const _Prin = "Principal";
const _Princ = "Principals";
const _Pro = "Protocols";
const _Prog = "Progress";
const _Prop = "Propagation";
const _Prov = "Provisioned";
const _Pu = "Public";
const _Pur = "Purchase";
const _Q = "Quantity";
const _R = "Resources";
const _RA = "ReleaseAddress";
const _RAA = "ResetAddressAttribute";
const _RAG = "RevokeAllGroups";
const _RAP = "RemoveAllowedPrincipals";
const _RART = "RemoveAllocationResourceTags";
const _RATC = "RestoreAddressToClassic";
const _RAe = "ResolveAlias";
const _RAo = "RoleArn";
const _RAu = "RuleAction";
const _RBET = "RecycleBinEnterTime";
const _RBETe = "RecycleBinExitTime";
const _RBUI = "RestorableByUserIds";
const _RC = "ResourceCidr";
const _RCS = "ResourceComplianceStatus";
const _RCVI = "RevokeClientVpnIngress";
const _RCe = "ReasonCodes";
const _RCec = "RecurringCharges";
const _RCet = "ReturnCode";
const _RD = "RestoreDuration";
const _RDAC = "ResourceDiscoveryAssociationCount";
const _RDI = "RamDiskId";
const _RDN = "RootDeviceName";
const _RDS = "ResourceDiscoveryStatus";
const _RDT = "RootDeviceType";
const _RE = "RemoveEntries";
const _RED = "RemoveEndDate";
const _REDKKI = "ResetEbsDefaultKmsKeyId";
const _RET = "RestoreExpiryTime";
const _REe = "ResponseError";
const _RF = "RemoveFields";
const _RFIA = "ResetFpgaImageAttribute";
const _RFP = "RekeyFuzzPercentage";
const _RGA = "RuleGroupArn";
const _RGI = "ReferencedGroupId";
const _RGIe = "ReferencedGroupInfo";
const _RGLBA = "RemoveGatewayLoadBalancerArns";
const _RGROP = "RuleGroupRuleOptionsPairs";
const _RGT = "RuleGroupType";
const _RGTP = "RuleGroupTypePairs";
const _RH = "ReleaseHosts";
const _RHS = "RequireHibernateSupport";
const _RI = "RebootInstances";
const _RIA = "ResetImageAttribute";
const _RIAe = "ResetInstanceAttribute";
const _RIENA = "RegisterInstanceEventNotificationAttributes";
const _RIFRB = "RestoreImageFromRecycleBin";
const _RII = "ReservedInstanceIds";
const _RIIPA = "ReplaceIamInstanceProfileAssociation";
const _RIIe = "ReservedInstancesId";
const _RIIes = "ReservedInstancesIds";
const _RIIese = "ReservedInstanceId";
const _RIL = "ReservedInstancesListings";
const _RILI = "ReservedInstancesListingId";
const _RIM = "ReservedInstancesModifications";
const _RIMI = "ReservedInstancesModificationIds";
const _RIMIe = "ReservedInstancesModificationId";
const _RINC = "RemoteIpv4NetworkCidr";
const _RINCe = "RemoteIpv6NetworkCidr";
const _RIO = "ReservedInstancesOfferings";
const _RIOI = "ReservedInstancesOfferingIds";
const _RIOIe = "ReservedInstancesOfferingId";
const _RIPA = "ReleaseIpamPoolAllocation";
const _RIS = "ReportInstanceStatus";
const _RIVR = "ReservedInstanceValueRollup";
const _RIVS = "ReservedInstanceValueSet";
const _RIa = "RamdiskId";
const _RIe = "RegisterImage";
const _RIeq = "RequesterId";
const _RIes = "ResourceIds";
const _RIese = "ReservedInstances";
const _RIeser = "ReservationId";
const _RIeso = "ResourceId";
const _RIu = "RunInstances";
const _RM = "ReasonMessage";
const _RMGM = "RegisteredMulticastGroupMembers";
const _RMGS = "RegisteredMulticastGroupSources";
const _RMPLV = "RestoreManagedPrefixListVersion";
const _RMTS = "RekeyMarginTimeSeconds";
const _RMe = "RequesterManaged";
const _RN = "RegionName";
const _RNAA = "ReplaceNetworkAclAssociation";
const _RNAE = "ReplaceNetworkAclEntry";
const _RNIA = "ResetNetworkInterfaceAttribute";
const _RNII = "RegisteredNetworkInterfaceIds";
const _RNLBA = "RemoveNetworkLoadBalancerArns";
const _RNS = "RemoveNetworkServices";
const _RNe = "RegionNames";
const _RNes = "ResourceName";
const _RNo = "RoleName";
const _RNu = "RuleNumber";
const _RO = "ResourceOwner";
const _ROI = "ResourceOwnerId";
const _ROR = "RemoveOperatingRegions";
const _ROS = "ResourceOverlapStatus";
const _ROo = "RouteOrigin";
const _ROu = "RuleOptions";
const _RP = "ResetPolicy";
const _RPC = "ReturnPathComponents";
const _RPCO = "RequesterPeeringConnectionOptions";
const _RPDN = "RemovePrivateDnsName";
const _RR = "ReplaceRoute";
const _RRTA = "ReplaceRouteTableAssociation";
const _RRTI = "RemoveRouteTableIds";
const _RRVT = "ReplaceRootVolumeTask";
const _RRVTI = "ReplaceRootVolumeTaskIds";
const _RRVTIe = "ReplaceRootVolumeTaskId";
const _RRVTe = "ReplaceRootVolumeTasks";
const _RRe = "ResourceRegion";
const _RS = "ReplacementStrategy";
const _RSA = "ResetSnapshotAttribute";
const _RSF = "RequestSpotFleet";
const _RSFRB = "RestoreSnapshotFromRecycleBin";
const _RSGE = "RevokeSecurityGroupEgress";
const _RSGI = "RevokeSecurityGroupIngress";
const _RSGIe = "RemoveSecurityGroupIds";
const _RSI = "RequestSpotInstances";
const _RSIAT = "RemoveSupportedIpAddressTypes";
const _RSIe = "RemoveSubnetIds";
const _RSIu = "RunScheduledInstances";
const _RST = "RestoreSnapshotTier";
const _RSTe = "RestoreStartTime";
const _RSe = "ResourceStatement";
const _RT = "ResourceType";
const _RTAI = "RouteTableAssociationId";
const _RTGCB = "RemoveTransitGatewayCidrBlocks";
const _RTGMDA = "RejectTransitGatewayMulticastDomainAssociations";
const _RTGMGM = "RegisterTransitGatewayMulticastGroupMembers";
const _RTGMGS = "RegisterTransitGatewayMulticastGroupSources";
const _RTGPA = "RejectTransitGatewayPeeringAttachment";
const _RTGR = "ReplaceTransitGatewayRoute";
const _RTGVA = "RejectTransitGatewayVpcAttachment";
const _RTI = "RouteTableId";
const _RTIe = "RequesterTgwInfo";
const _RTIo = "RouteTableIds";
const _RTR = "RouteTableRoute";
const _RTV = "RemainingTotalValue";
const _RTe = "ReservationType";
const _RTel = "ReleaseTime";
const _RTeq = "RequestTime";
const _RTes = "ResourceTag";
const _RTeso = "ResourceTypes";
const _RTesou = "ResourceTags";
const _RTo = "RouteTable";
const _RTou = "RouteTables";
const _RUI = "ReplaceUnhealthyInstances";
const _RUV = "RemainingUpfrontValue";
const _RV = "ReturnValue";
const _RVEC = "RejectVpcEndpointConnections";
const _RVI = "ReferencingVpcId";
const _RVIe = "RequesterVpcInfo";
const _RVPC = "RejectVpcPeeringConnection";
const _RVT = "ReplaceVpnTunnel";
const _RVe = "ReservationValue";
const _RWS = "ReplayWindowSize";
const _Ra = "Ramdisk";
const _Re = "Remove";
const _Rea = "Reason";
const _Rec = "Recurrence";
const _Reg = "Regions";
const _Regi = "Region";
const _Req = "Requested";
const _Res = "Resource";
const _Rese = "Reservations";
const _Resu = "Result";
const _Ret = "Return";
const _Ro = "Route";
const _Rou = "Routes";
const _S = "Source";
const _SA = "StartupAction";
const _SAI = "SecondaryAllocationIds";
const _SAMLPA = "SAMLProviderArn";
const _SAZ = "SingleAvailabilityZone";
const _SAo = "SourceAddresses";
const _SAou = "SourceAddress";
const _SAour = "SourceArn";
const _SAu = "SuggestedAccounts";
const _SAub = "SubnetArn";
const _SAup = "SupportedArchitectures";
const _SB = "S3Bucket";
const _SBM = "SupportedBootModes";
const _SC = "SubnetConfigurations";
const _SCA = "ServerCertificateArn";
const _SCAE = "SerialConsoleAccessEnabled";
const _SCB = "SourceCidrBlock";
const _SCR = "SubnetCidrReservation";
const _SCRI = "SubnetCidrReservationId";
const _SCSIG = "SustainedClockSpeedInGhz";
const _SCc = "ScopeCount";
const _SCe = "ServiceConfiguration";
const _SCer = "ServiceConfigurations";
const _SCn = "SnapshotConfiguration";
const _SD = "SpreadDomain";
const _SDC = "SourceDestCheck";
const _SDI = "SendDiagnosticInterrupt";
const _SDIH = "SlotDurationInHours";
const _SDLTV = "SuccessfullyDeletedLaunchTemplateVersions";
const _SDR = "StartDateRange";
const _SDS = "SpotDatafeedSubscription";
const _SDV = "SetDefaultVersion";
const _SDe = "ServiceDetails";
const _SDn = "SnapshotDetails";
const _SDt = "StartDate";
const _SEL = "S3ExportLocation";
const _SET = "SampledEndTime";
const _SF = "SupportedFeatures";
const _SFC = "SuccessfulFleetCancellations";
const _SFD = "SuccessfulFleetDeletions";
const _SFII = "SourceFpgaImageId";
const _SFR = "SuccessfulFleetRequests";
const _SFRC = "SpotFleetRequestConfig";
const _SFRCp = "SpotFleetRequestConfigs";
const _SFRI = "SpotFleetRequestIds";
const _SFRIp = "SpotFleetRequestId";
const _SFRS = "SpotFleetRequestState";
const _SG = "SecurityGroups";
const _SGFV = "SecurityGroupForVpcs";
const _SGI = "SecurityGroupIds";
const _SGIe = "SecurityGroupId";
const _SGR = "SecurityGroupRules";
const _SGRD = "SecurityGroupRuleDescriptions";
const _SGRI = "SecurityGroupRuleIds";
const _SGRIe = "SecurityGroupRuleId";
const _SGRS = "SecurityGroupReferencingSupport";
const _SGRSe = "SecurityGroupReferenceSet";
const _SGRe = "SecurityGroupRule";
const _SGe = "SecurityGroup";
const _SH = "StartHour";
const _SI = "StartInstances";
const _SIAS = "ScheduledInstanceAvailabilitySet";
const _SIAT = "SupportedIpAddressTypes";
const _SICR = "SubnetIpv4CidrReservations";
const _SICRu = "SubnetIpv6CidrReservations";
const _SICS = "SuccessfulInstanceCreditSpecifications";
const _SIGB = "SizeInGB";
const _SII = "SourceImageId";
const _SIIc = "ScheduledInstanceIds";
const _SIIch = "ScheduledInstanceId";
const _SIIo = "SourceInstanceId";
const _SIMB = "SizeInMiB";
const _SIP = "StaleIpPermissions";
const _SIPE = "StaleIpPermissionsEgress";
const _SIPI = "SourceIpamPoolId";
const _SIR = "SpotInstanceRequests";
const _SIRI = "SpotInstanceRequestIds";
const _SIRIp = "SpotInstanceRequestId";
const _SIS = "ScheduledInstanceSet";
const _SIT = "SpotInstanceType";
const _SITR = "StoreImageTaskResults";
const _SITi = "SingleInstanceType";
const _SIe = "ServiceId";
const _SIer = "ServiceIds";
const _SIn = "SnapshotId";
const _SIna = "SnapshotIds";
const _SIo = "SourceIp";
const _SIt = "StopInstances";
const _SIta = "StartingInstances";
const _SIto = "StoppingInstances";
const _SIu = "SubnetIds";
const _SIub = "SubnetId";
const _SIubs = "SubsystemId";
const _SK = "S3Key";
const _SKo = "S3objectKey";
const _SL = "SpreadLevel";
const _SLGR = "SearchLocalGatewayRoutes";
const _SLo = "S3Location";
const _SM = "StatusMessage";
const _SMPPOLP = "SpotMaxPricePercentageOverLowestPrice";
const _SMS = "SpotMaintenanceStrategies";
const _SMTP = "SpotMaxTotalPrice";
const _SMt = "StateMessage";
const _SN = "SessionNumber";
const _SNIA = "StartNetworkInsightsAnalysis";
const _SNIASA = "StartNetworkInsightsAccessScopeAnalysis";
const _SNS = "SriovNetSupport";
const _SNe = "ServiceName";
const _SNeq = "SequenceNumber";
const _SNer = "ServiceNames";
const _SO = "SpotOptions";
const _SOT = "S3ObjectTags";
const _SP = "S3Prefix";
const _SPA = "SamlProviderArn";
const _SPH = "SpotPriceHistory";
const _SPI = "ServicePermissionId";
const _SPIA = "SecondaryPrivateIpAddresses";
const _SPIAC = "SecondaryPrivateIpAddressCount";
const _SPL = "SourcePrefixLists";
const _SPR = "SourcePortRange";
const _SPRo = "SourcePortRanges";
const _SPS = "SpotPlacementScores";
const _SPo = "SourcePorts";
const _SPp = "SpotPrice";
const _SQPD = "SuccessfulQueuedPurchaseDeletions";
const _SR = "SourceRegion";
const _SRDT = "SupportedRootDeviceTypes";
const _SRO = "StaticRoutesOnly";
const _SRT = "SubnetRouteTable";
const _SRe = "ServiceResource";
const _SRo = "SourceResource";
const _SRt = "StateReason";
const _SS = "SseSpecification";
const _SSGN = "SourceSecurityGroupName";
const _SSGOI = "SourceSecurityGroupOwnerId";
const _SSGS = "StaleSecurityGroupSet";
const _SSI = "SourceSnapshotId";
const _SSIo = "SourceSnapshotIds";
const _SSP = "SelfServicePortal";
const _SSPU = "SelfServicePortalUrl";
const _SSS = "StaticSourcesSupport";
const _SSSAMLPA = "SelfServiceSAMLProviderArn";
const _SSSPA = "SelfServiceSamlProviderArn";
const _SST = "SampledStartTime";
const _SSTR = "SlotStartTimeRange";
const _SSe = "ServiceState";
const _SSu = "SupportedStrategies";
const _SSy = "SystemStatus";
const _ST = "SplitTunnel";
const _STC = "SpotTargetCapacity";
const _STD = "SnapshotTaskDetail";
const _STFR = "StoreTaskFailureReason";
const _STGMG = "SearchTransitGatewayMulticastGroups";
const _STGR = "SearchTransitGatewayRoutes";
const _STH = "SessionTimeoutHours";
const _STR = "SkipTunnelReplacement";
const _STRt = "StateTransitionReason";
const _STS = "SnapshotTierStatuses";
const _STSt = "StoreTaskState";
const _STT = "StateTransitionTime";
const _STa = "SampleTime";
const _STe = "ServiceType";
const _STo = "SourceType";
const _STs = "SseType";
const _STt = "StartTime";
const _STto = "StorageTier";
const _SUC = "SupportedUsageClasses";
const _SV = "SourceVersion";
const _SVESPDV = "StartVpcEndpointServicePrivateDnsVerification";
const _SVI = "SubsystemVendorId";
const _SVT = "SupportedVirtualizationTypes";
const _SVh = "ShellVersion";
const _SVo = "SourceVpc";
const _SVu = "SupportedVersions";
const _SWD = "StartWeekDay";
const _S_ = "S3";
const _Sc = "Scope";
const _Sco = "Score";
const _Se = "Service";
const _Set = "Settings";
const _Si = "Signature";
const _Siz = "Size";
const _Sn = "Snapshots";
const _So = "Sources";
const _Soc = "Sockets";
const _Sof = "Software";
const _St = "Storage";
const _Sta = "Statistic";
const _Star = "Start";
const _Stat = "State";
const _Statu = "Status";
const _Status = "Statuses";
const _Str = "Strategy";
const _Su = "Subnet";
const _Sub = "Subscriptions";
const _Subn = "Subnets";
const _Suc = "Successful";
const _Succ = "Success";
const _T = "Type";
const _TAAC = "TotalAvailableAddressCount";
const _TAC = "TotalAddressCount";
const _TAI = "TransferAccountId";
const _TC = "TargetConfigurations";
const _TCS = "TargetCapacitySpecification";
const _TCUT = "TargetCapacityUnitType";
const _TCVC = "TerminateClientVpnConnections";
const _TCVR = "TargetConfigurationValueRollup";
const _TCVS = "TargetConfigurationValueSet";
const _TCa = "TargetCapacity";
const _TCar = "TargetConfiguration";
const _TCo = "TotalCapacity";
const _TD = "TrafficDirection";
const _TDe = "TerminationDelay";
const _TE = "TargetEnvironment";
const _TED = "TermEndDate";
const _TET = "TcpEstablishedTimeout";
const _TEo = "TokenEndpoint";
const _TFC = "TotalFulfilledCapacity";
const _TFMIMB = "TotalFpgaMemoryInMiB";
const _TG = "TargetGroups";
const _TGA = "TransitGatewayAddress";
const _TGAI = "TransitGatewayAttachmentId";
const _TGAIr = "TransitGatewayAttachmentIds";
const _TGAP = "TransitGatewayAttachmentPropagations";
const _TGAr = "TransitGatewayAttachments";
const _TGAra = "TransitGatewayAttachment";
const _TGAran = "TransitGatewayArn";
const _TGArans = "TransitGatewayAsn";
const _TGC = "TargetGroupsConfig";
const _TGCB = "TransitGatewayCidrBlocks";
const _TGCP = "TransitGatewayConnectPeer";
const _TGCPI = "TransitGatewayConnectPeerId";
const _TGCPIr = "TransitGatewayConnectPeerIds";
const _TGCPr = "TransitGatewayConnectPeers";
const _TGCr = "TransitGatewayConnect";
const _TGCra = "TransitGatewayConnects";
const _TGI = "TransitGatewayId";
const _TGIr = "TransitGatewayIds";
const _TGMD = "TransitGatewayMulticastDomain";
const _TGMDA = "TransitGatewayMulticastDomainArn";
const _TGMDI = "TransitGatewayMulticastDomainId";
const _TGMDIr = "TransitGatewayMulticastDomainIds";
const _TGMDr = "TransitGatewayMulticastDomains";
const _TGMIMB = "TotalGpuMemoryInMiB";
const _TGOI = "TransitGatewayOwnerId";
const _TGPA = "TransitGatewayPeeringAttachment";
const _TGPAr = "TransitGatewayPeeringAttachments";
const _TGPLR = "TransitGatewayPrefixListReference";
const _TGPLRr = "TransitGatewayPrefixListReferences";
const _TGPT = "TransitGatewayPolicyTable";
const _TGPTE = "TransitGatewayPolicyTableEntries";
const _TGPTI = "TransitGatewayPolicyTableId";
const _TGPTIr = "TransitGatewayPolicyTableIds";
const _TGPTr = "TransitGatewayPolicyTables";
const _TGRT = "TransitGatewayRouteTable";
const _TGRTA = "TransitGatewayRouteTableAnnouncement";
const _TGRTAI = "TransitGatewayRouteTableAnnouncementId";
const _TGRTAIr = "TransitGatewayRouteTableAnnouncementIds";
const _TGRTAr = "TransitGatewayRouteTableAnnouncements";
const _TGRTI = "TransitGatewayRouteTableId";
const _TGRTIr = "TransitGatewayRouteTableIds";
const _TGRTP = "TransitGatewayRouteTablePropagations";
const _TGRTR = "TransitGatewayRouteTableRoute";
const _TGRTr = "TransitGatewayRouteTables";
const _TGVA = "TransitGatewayVpcAttachment";
const _TGVAr = "TransitGatewayVpcAttachments";
const _TGr = "TransitGateway";
const _TGra = "TransitGateways";
const _THP = "TotalHourlyPrice";
const _TI = "TerminateInstances";
const _TIC = "TunnelInsideCidr";
const _TICo = "TotalInstanceCount";
const _TII = "TrunkInterfaceId";
const _TIIC = "TunnelInsideIpv6Cidr";
const _TIIV = "TunnelInsideIpVersion";
const _TIMIMB = "TotalInferenceMemoryInMiB";
const _TIWE = "TerminateInstancesWithExpiration";
const _TIa = "TargetIops";
const _TIe = "TenantId";
const _TIer = "TerminatingInstances";
const _TLSGB = "TotalLocalStorageGB";
const _TMAE = "TargetMultiAttachEnabled";
const _TMF = "TrafficMirrorFilter";
const _TMFI = "TrafficMirrorFilterId";
const _TMFIr = "TrafficMirrorFilterIds";
const _TMFR = "TrafficMirrorFilterRule";
const _TMFRI = "TrafficMirrorFilterRuleId";
const _TMFr = "TrafficMirrorFilters";
const _TMS = "TrafficMirrorSession";
const _TMSI = "TrafficMirrorSessionId";
const _TMSIr = "TrafficMirrorSessionIds";
const _TMSr = "TrafficMirrorSessions";
const _TMT = "TrafficMirrorTarget";
const _TMTI = "TrafficMirrorTargetId";
const _TMTIr = "TrafficMirrorTargetIds";
const _TMTr = "TrafficMirrorTargets";
const _TNC = "TargetNetworkCidr";
const _TNI = "TargetNetworkId";
const _TO = "TunnelOptions";
const _TOAT = "TransferOfferAcceptedTimestamp";
const _TOET = "TransferOfferExpirationTimestamp";
const _TP = "ToPort";
const _TPC = "ThreadsPerCore";
const _TPT = "TrustProviderType";
const _TPr = "TransportProtocol";
const _TR = "ThroughResources";
const _TRC = "TargetResourceCount";
const _TRD = "TemporaryRestoreDays";
const _TRTI = "TargetRouteTableId";
const _TRi = "TimeRanges";
const _TS = "TagSpecifications";
const _TSD = "TermStartDate";
const _TSIGB = "TotalSizeInGB";
const _TSIH = "TotalScheduledInstanceHours";
const _TST = "TieringStartTime";
const _TSTa = "TaskStartTime";
const _TSa = "TargetSubnet";
const _TSag = "TagSet";
const _TSagp = "TagSpecification";
const _TSar = "TargetSize";
const _TSas = "TaskState";
const _TSp = "TpmSupport";
const _TT = "TrafficType";
const _TTC = "TotalTargetCapacity";
const _TTGAI = "TransportTransitGatewayAttachmentId";
const _TTa = "TargetThroughput";
const _TUP = "TotalUpfrontPrice";
const _TV = "TargetVersion";
const _TVC = "TotalVCpus";
const _TVSI = "TargetVpcSubnetId";
const _TVT = "TargetVolumeType";
const _Ta = "Tags";
const _Tag = "Tag";
const _Te = "Tenancy";
const _Ter = "Term";
const _Th = "Throughput";
const _Ti = "Tier";
const _Tim = "Timestamp";
const _To = "To";
const _U = "Url";
const _UB = "UserBucket";
const _UD = "UserData";
const _UDLTV = "UnsuccessfullyDeletedLaunchTemplateVersions";
const _UDe = "UefiData";
const _UDp = "UpdatedDate";
const _UDpd = "UpdateDate";
const _UE = "UploadEnd";
const _UF = "UpfrontFee";
const _UFD = "UnsuccessfulFleetDeletions";
const _UFR = "UnsuccessfulFleetRequests";
const _UG = "UserGroups";
const _UI = "UnmonitorInstances";
const _UIA = "UnassignIpv6Addresses";
const _UIAn = "UnassignedIpv6Addresses";
const _UIC = "UsedInstanceCount";
const _UICS = "UnsuccessfulInstanceCreditSpecifications";
const _UIE = "UserInfoEndpoint";
const _UIGP = "UserIdGroupPairs";
const _UIP = "UnknownIpPermissions";
const _UIPn = "UnassignedIpv6Prefixes";
const _UIs = "UserId";
const _UIse = "UserIds";
const _ULI = "UseLongIds";
const _ULIA = "UseLongIdsAggregated";
const _UO = "UsageOperation";
const _UOUT = "UsageOperationUpdateTime";
const _UP = "UploadPolicy";
const _UPIA = "UnassignPrivateIpAddresses";
const _UPNGA = "UnassignPrivateNatGatewayAddress";
const _UPS = "UploadPolicySignature";
const _UPp = "UpfrontPrice";
const _UPs = "UsagePrice";
const _US = "UnlockSnapshot";
const _USGRDE = "UpdateSecurityGroupRuleDescriptionsEgress";
const _USGRDI = "UpdateSecurityGroupRuleDescriptionsIngress";
const _UST = "UdpStreamTimeout";
const _USp = "UploadSize";
const _USpl = "UploadStart";
const _USs = "UsageStrategy";
const _UT = "UdpTimeout";
const _UTPT = "UserTrustProviderType";
const _UTp = "UpdateTime";
const _Un = "Unsuccessful";
const _Us = "Username";
const _V = "Version";
const _VA = "VpcAttachment";
const _VAE = "VerifiedAccessEndpoint";
const _VAEI = "VerifiedAccessEndpointId";
const _VAEIe = "VerifiedAccessEndpointIds";
const _VAEe = "VerifiedAccessEndpoints";
const _VAG = "VerifiedAccessGroup";
const _VAGA = "VerifiedAccessGroupArn";
const _VAGI = "VerifiedAccessGroupId";
const _VAGIe = "VerifiedAccessGroupIds";
const _VAGe = "VerifiedAccessGroups";
const _VAI = "VerifiedAccessInstance";
const _VAII = "VerifiedAccessInstanceId";
const _VAIIe = "VerifiedAccessInstanceIds";
const _VAIe = "VerifiedAccessInstances";
const _VATP = "VerifiedAccessTrustProvider";
const _VATPI = "VerifiedAccessTrustProviderId";
const _VATPIe = "VerifiedAccessTrustProviderIds";
const _VATPe = "VerifiedAccessTrustProviders";
const _VAp = "VpcAttachments";
const _VC = "VpnConnection";
const _VCC = "VCpuCount";
const _VCDSC = "VpnConnectionDeviceSampleConfiguration";
const _VCDT = "VpnConnectionDeviceTypes";
const _VCDTI = "VpnConnectionDeviceTypeId";
const _VCI = "VpnConnectionId";
const _VCIp = "VpnConnectionIds";
const _VCIpu = "VCpuInfo";
const _VCa = "ValidCores";
const _VCp = "VpnConnections";
const _VD = "VersionDescription";
const _VE = "VpcEndpoint";
const _VEC = "VpcEndpointConnections";
const _VECI = "VpcEndpointConnectionId";
const _VEI = "VpcEndpointIds";
const _VEIp = "VpcEndpointId";
const _VEO = "VpcEndpointOwner";
const _VEPS = "VpcEndpointPolicySupported";
const _VES = "VpnEcmpSupport";
const _VESp = "VpcEndpointService";
const _VESpc = "VpcEndpointState";
const _VET = "VpcEndpointType";
const _VEp = "VpcEndpoints";
const _VF = "ValidFrom";
const _VFR = "ValidationFailureReason";
const _VG = "VpnGateway";
const _VGI = "VpnGatewayId";
const _VGIp = "VpnGatewayIds";
const _VGp = "VpnGateways";
const _VI = "VpcId";
const _VIe = "VendorId";
const _VIl = "VlanId";
const _VIo = "VolumeId";
const _VIol = "VolumeIds";
const _VIp = "VpcIds";
const _VM = "VolumesModifications";
const _VMo = "VolumeModification";
const _VN = "VirtualName";
const _VNI = "VirtualNetworkId";
const _VNe = "VersionNumber";
const _VOI = "VpcOwnerId";
const _VP = "VpnPort";
const _VPC = "VpcPeeringConnection";
const _VPCI = "VpcPeeringConnectionId";
const _VPCIp = "VpcPeeringConnectionIds";
const _VPCp = "VpcPeeringConnections";
const _VPp = "VpnProtocol";
const _VS = "VolumeSize";
const _VSo = "VolumeStatuses";
const _VSol = "VolumeStatus";
const _VT = "VolumeType";
const _VTOIA = "VpnTunnelOutsideIpAddress";
const _VTPC = "ValidThreadsPerCore";
const _VTg = "VgwTelemetry";
const _VTi = "VirtualizationTypes";
const _VTir = "VirtualizationType";
const _VU = "ValidUntil";
const _Va = "Value";
const _Val = "Values";
const _Ve = "Versions";
const _Ven = "Vendor";
const _Vl = "Vlan";
const _Vo = "Volume";
const _Vol = "Volumes";
const _Vp = "Vpc";
const _Vpc = "Vpcs";
const _W = "Weight";
const _WBC = "WithdrawByoipCidr";
const _WC = "WeightedCapacity";
const _WM = "WarningMessage";
const _WU = "WakeUp";
const _Wa = "Warning";
const _ZI = "ZoneIds";
const _ZIo = "ZoneId";
const _ZN = "ZoneNames";
const _ZNo = "ZoneName";
const _ZT = "ZoneType";
const _a = "associations";
const _aA = "asnAssociation";
const _aAC = "availableAddressCount";
const _aAI = "awsAccountId";
const _aAId = "addressAllocationId";
const _aAS = "asnAssociationSet";
const _aASA = "autoAcceptSharedAssociations";
const _aASAu = "autoAcceptSharedAttachments";
const _aASc = "accountAttributeSet";
const _aASd = "additionalAccountSet";
const _aAc = "accessAll";
const _aBHP = "actualBlockHourlyPrice";
const _aC = "availableCapacity";
const _aCIA = "associateCarrierIpAddress";
const _aCT = "archivalCompleteTime";
const _aCc = "acceleratorCount";
const _aCd = "addressCount";
const _aD = "activeDirectory";
const _aDNL = "allocationDefaultNetmaskLength";
const _aDRFRV = "allowDnsResolutionFromRemoteVpc";
const _aDRTI = "associationDefaultRouteTableId";
const _aDS = "additionalDetailSet";
const _aDT = "additionalDetailType";
const _aDn = "announcementDirection";
const _aDp = "applicationDomain";
const _aE = "authorizationEndpoint";
const _aEC = "analyzedEniCount";
const _aEFLCLTRV = "allowEgressFromLocalClassicLinkToRemoteVpc";
const _aEFLVTRCL = "allowEgressFromLocalVpcToRemoteClassicLink";
const _aEIO = "autoEnableIO";
const _aF = "addressFamily";
const _aFS = "analysisFindingSet";
const _aI = "allocationId";
const _aIA = "assignedIpv6Addresses";
const _aIAC = "availableIpAddressCount";
const _aIAOC = "assignIpv6AddressOnCreation";
const _aIC = "availableInstanceCapacity";
const _aICv = "availableInstanceCount";
const _aIPS = "assignedIpv6PrefixSet";
const _aIPSs = "assignedIpv4PrefixSet";
const _aIS = "activeInstanceSet";
const _aITS = "allowedInstanceTypeSet";
const _aIc = "accountId";
const _aIm = "amiId";
const _aIs = "associationId";
const _aIss = "assetId";
const _aIt = "attachmentId";
const _aIu = "autoImport";
const _aL = "accessLogs";
const _aLI = "amiLaunchIndex";
const _aMIT = "allowsMultipleInstanceTypes";
const _aMNL = "allocationMinNetmaskLength";
const _aMNLl = "allocationMaxNetmaskLength";
const _aMS = "acceleratorManufacturerSet";
const _aMSp = "applianceModeSupport";
const _aN = "attributeName";
const _aNS = "acceleratorNameSet";
const _aO = "authenticationOptions";
const _aOI = "addressOwnerId";
const _aP = "allowedPrincipals";
const _aPCO = "accepterPeeringConnectionOptions";
const _aPHS = "alternatePathHintSet";
const _aPIA = "associatePublicIpAddress";
const _aPIAS = "assignedPrivateIpAddressesSet";
const _aPS = "addedPrincipalSet";
const _aPu = "autoPlacement";
const _aR = "authorizationRule";
const _aRA = "associatedRoleArn";
const _aRAd = "additionalRoutesAvailable";
const _aRC = "acceptedRouteCount";
const _aRS = "associatedRoleSet";
const _aRSu = "autoRecoverySupported";
const _aRTS = "allocationResourceTagSet";
const _aRc = "aclRule";
const _aRcc = "acceptanceRequired";
const _aRd = "addressRegion";
const _aRs = "associatedResource";
const _aRu = "autoRecovery";
const _aS = "associationState";
const _aSA = "amazonSideAsn";
const _aSS = "amdSevSnp";
const _aSc = "activityStatus";
const _aSct = "actionsSet";
const _aSd = "addressSet";
const _aSdd = "addressesSet";
const _aSl = "allocationStrategy";
const _aSn = "analysisStatus";
const _aSs = "associationStatus";
const _aSss = "associationSet";
const _aSt = "attachmentSet";
const _aStt = "attachmentStatuses";
const _aSw = "awsService";
const _aT = "addressTransfer";
const _aTGAI = "accepterTransitGatewayAttachmentId";
const _aTI = "accepterTgwInfo";
const _aTMMB = "acceleratorTotalMemoryMiB";
const _aTN = "associatedTargetNetwork";
const _aTS = "addressTransferStatus";
const _aTSc = "acceleratorTypeSet";
const _aTSd = "addressTransferSet";
const _aTd = "addressType";
const _aTdd = "addressingType";
const _aTl = "allocationType";
const _aTll = "allocationTime";
const _aTs = "associationTarget";
const _aTt = "attachTime";
const _aTtt = "attachedTo";
const _aTtta = "attachmentType";
const _aV = "attributeValue";
const _aVC = "availableVCpus";
const _aVI = "accepterVpcInfo";
const _aVS = "attributeValueSet";
const _aZ = "availabilityZone";
const _aZG = "availabilityZoneGroup";
const _aZI = "availabilityZoneId";
const _aZIv = "availabilityZoneInfo";
const _aZS = "availabilityZoneSet";
const _ac = "acl";
const _acc = "accelerators";
const _act = "active";
const _ad = "address";
const _af = "affinity";
const _am = "amount";
const _ar = "arn";
const _arc = "architecture";
const _as = "asn";
const _ass = "association";
const _at = "attachment";
const _att = "attachments";
const _b = "byoasn";
const _bA = "bgpAsn";
const _bBIG = "baselineBandwidthInGbps";
const _bBIM = "baselineBandwidthInMbps";
const _bC = "byoipCidr";
const _bCS = "byoipCidrSet";
const _bCg = "bgpConfigurations";
const _bCy = "bytesConverted";
const _bDM = "blockDeviceMapping";
const _bDMS = "blockDeviceMappingSet";
const _bDMl = "blockDurationMinutes";
const _bEBM = "baselineEbsBandwidthMbps";
const _bEDNS = "baseEndpointDnsNameSet";
const _bI = "bundleId";
const _bII = "branchInterfaceId";
const _bIT = "bundleInstanceTask";
const _bITS = "bundleInstanceTasksSet";
const _bIa = "baselineIops";
const _bM = "bootMode";
const _bMa = "bareMetal";
const _bN = "bucketName";
const _bO = "bucketOwner";
const _bP = "burstablePerformance";
const _bPS = "burstablePerformanceSupported";
const _bS = "byoasnSet";
const _bSg = "bgpStatus";
const _bT = "bannerText";
const _bTIMB = "baselineThroughputInMBps";
const _bl = "blackhole";
const _bu = "bucket";
const _c = "component";
const _cA = "componentArn";
const _cAS = "capacityAllocationSet";
const _cAUS = "coipAddressUsageSet";
const _cAe = "certificateArn";
const _cAo = "componentAccount";
const _cAr = "createdAt";
const _cB = "cidrBlock";
const _cBA = "cidrBlockAssociation";
const _cBAS = "cidrBlockAssociationSet";
const _cBDH = "capacityBlockDurationHours";
const _cBOI = "capacityBlockOfferingId";
const _cBOS = "capacityBlockOfferingSet";
const _cBS = "cidrBlockState";
const _cBSi = "cidrBlockSet";
const _cBr = "createdBy";
const _cC = "currencyCode";
const _cCB = "clientCidrBlock";
const _cCO = "clientConnectOptions";
const _cCRFE = "cancelCapacityReservationFleetError";
const _cCl = "clientConfiguration";
const _cCo = "coreCount";
const _cCoi = "coipCidr";
const _cCp = "cpuCredits";
const _cD = "createDate";
const _cDr = "creationDate";
const _cDre = "createdDate";
const _cE = "connectionEvents";
const _cET = "connectionEstablishedTime";
const _cETo = "connectionEndTime";
const _cEr = "cronExpression";
const _cF = "containerFormat";
const _cFS = "currentFleetState";
const _cG = "carrierGateway";
const _cGC = "customerGatewayConfiguration";
const _cGI = "carrierGatewayId";
const _cGIu = "customerGatewayId";
const _cGS = "carrierGatewaySet";
const _cGSu = "customerGatewaySet";
const _cGu = "customerGateway";
const _cGur = "currentGeneration";
const _cI = "carrierIp";
const _cIBM = "currentInstanceBootMode";
const _cIi = "cidrIp";
const _cIid = "cidrIpv6";
const _cIidr = "cidrIpv4";
const _cIl = "clientIp";
const _cIli = "clientId";
const _cIo = "componentId";
const _cIon = "connectionId";
const _cIop = "coIp";
const _cLB = "classicLoadBalancers";
const _cLBC = "classicLoadBalancersConfig";
const _cLBL = "classicLoadBalancerListener";
const _cLBO = "clientLoginBannerOptions";
const _cLDS = "classicLinkDnsSupported";
const _cLE = "classicLinkEnabled";
const _cLO = "connectionLogOptions";
const _cMKE = "customerManagedKeyEnabled";
const _cMS = "cpuManufacturerSet";
const _cN = "commonName";
const _cNA = "coreNetworkArn";
const _cNAA = "coreNetworkAttachmentArn";
const _cNAo = "connectionNotificationArn";
const _cNI = "connectionNotificationId";
const _cNIo = "coreNetworkId";
const _cNS = "connectionNotificationState";
const _cNSo = "connectionNotificationSet";
const _cNT = "connectionNotificationType";
const _cNo = "connectionNotification";
const _cO = "cpuOptions";
const _cOI = "customerOwnedIp";
const _cOIP = "customerOwnedIpv4Pool";
const _cOP = "coolOffPeriod";
const _cOPEO = "coolOffPeriodExpiresOn";
const _cP = "coipPool";
const _cPC = "connectPeerConfiguration";
const _cPI = "coipPoolId";
const _cPS = "coipPoolSet";
const _cR = "capacityReservation";
const _cRA = "capacityReservationArn";
const _cRCC = "clientRootCertificateChain";
const _cRFA = "capacityReservationFleetArn";
const _cRFI = "capacityReservationFleetId";
const _cRFS = "capacityReservationFleetSet";
const _cRGS = "capacityReservationGroupSet";
const _cRI = "capacityReservationId";
const _cRL = "certificateRevocationList";
const _cRO = "capacityReservationOptions";
const _cRP = "capacityReservationPreference";
const _cRRGA = "capacityReservationResourceGroupArn";
const _cRS = "capacityReservationSet";
const _cRSa = "capacityReservationSpecification";
const _cRT = "capacityReservationTarget";
const _cRa = "capacityRebalance";
const _cRo = "componentRegion";
const _cS = "cidrSet";
const _cSBN = "certificateS3BucketName";
const _cSFRS = "currentSpotFleetRequestState";
const _cSOK = "certificateS3ObjectKey";
const _cSl = "clientSecret";
const _cSo = "complianceStatus";
const _cSon = "connectionStatuses";
const _cSr = "creditSpecification";
const _cSu = "currentState";
const _cSur = "currentStatus";
const _cT = "clientToken";
const _cTC = "connectionTrackingConfiguration";
const _cTI = "conversionTaskId";
const _cTS = "connectionTrackingSpecification";
const _cTo = "conversionTasks";
const _cTom = "completeTime";
const _cTon = "conversionTask";
const _cTonn = "connectivityType";
const _cTr = "createTime";
const _cTre = "creationTime";
const _cTrea = "creationTimestamp";
const _cVE = "clientVpnEndpoint";
const _cVEI = "clientVpnEndpointId";
const _cVP = "createVolumePermission";
const _cVTN = "clientVpnTargetNetworks";
const _cWL = "cloudWatchLogs";
const _cWLO = "cloudWatchLogOptions";
const _ca = "category";
const _ch = "checksum";
const _ci = "cidr";
const _co = "code";
const _con = "connections";
const _conf = "configured";
const _cont = "context";
const _cor = "cores";
const _cou = "count";
const _d = "destination";
const _dA = "destinationArn";
const _dAIT = "denyAllIgwTraffic";
const _dART = "defaultAssociationRouteTable";
const _dAS = "destinationAddressSet";
const _dASe = "deprovisionedAddressSet";
const _dASi = "disableApiStop";
const _dAT = "disableApiTermination";
const _dAe = "destinationAddress";
const _dC = "destinationCidr";
const _dCA = "domainCertificateArn";
const _dCAR = "deliverCrossAccountRole";
const _dCB = "destinationCidrBlock";
const _dCS = "dhcpConfigurationSet";
const _dCe = "defaultCores";
const _dEKI = "dataEncryptionKeyId";
const _dES = "dnsEntrySet";
const _dFA = "defaultForAz";
const _dHIS = "dedicatedHostIdSet";
const _dHS = "dedicatedHostsSupported";
const _dI = "directoryId";
const _dICB = "destinationIpv6CidrBlock";
const _dIF = "diskImageFormat";
const _dIS = "diskImageSize";
const _dIe = "deviceIndex";
const _dIes = "destinationIp";
const _dLEM = "deliverLogsErrorMessage";
const _dLPA = "deliverLogsPermissionArn";
const _dLS = "deliverLogsStatus";
const _dMGM = "deregisteredMulticastGroupMembers";
const _dMGS = "deregisteredMulticastGroupSources";
const _dN = "deviceName";
const _dNCI = "defaultNetworkCardIndex";
const _dNII = "deregisteredNetworkInterfaceIds";
const _dNn = "dnsName";
const _dO = "dhcpOptions";
const _dOI = "dhcpOptionsId";
const _dOS = "dhcpOptionsSet";
const _dOT = "deleteOnTermination";
const _dOe = "destinationOptions";
const _dOev = "deviceOptions";
const _dOn = "dnsOptions";
const _dP = "destinationPort";
const _dPLI = "destinationPrefixListId";
const _dPLS = "destinationPrefixListSet";
const _dPR = "destinationPortRange";
const _dPRS = "destinationPortRangeSet";
const _dPRT = "defaultPropagationRouteTable";
const _dPS = "destinationPortSet";
const _dR = "discoveryRegion";
const _dRDAI = "defaultResourceDiscoveryAssociationId";
const _dRDI = "defaultResourceDiscoveryId";
const _dRIT = "dnsRecordIpType";
const _dRRV = "deleteReplacedRootVolume";
const _dRS = "dataRetentionSupport";
const _dRSa = "dataResponseSet";
const _dRTA = "defaultRouteTableAssociation";
const _dRTP = "defaultRouteTablePropagation";
const _dRy = "dynamicRouting";
const _dS = "dnsServer";
const _dSCR = "deletedSubnetCidrReservation";
const _dSe = "destinationSet";
const _dSel = "deliveryStatus";
const _dSeli = "deliveryStream";
const _dSn = "dnsSupport";
const _dT = "deletionTime";
const _dTA = "dpdTimeoutAction";
const _dTCT = "defaultTargetCapacityType";
const _dTPC = "defaultThreadsPerCore";
const _dTPT = "deviceTrustProviderType";
const _dTS = "dpdTimeoutSeconds";
const _dTe = "deprecationTime";
const _dTel = "deleteTime";
const _dTi = "disablingTime";
const _dTis = "disabledTime";
const _dV = "destinationVpc";
const _dVC = "defaultVCpus";
const _dVD = "deviceValidationDomain";
const _dVN = "defaultVersionNumber";
const _dVe = "defaultVersion";
const _de = "description";
const _dea = "deadline";
const _def = "default";
const _det = "details";
const _dev = "device";
const _di = "direction";
const _dis = "disks";
const _do = "domain";
const _du = "duration";
const _e = "egress";
const _eA = "enableAcceleration";
const _eB = "egressBytes";
const _eC = "errorCode";
const _eCTP = "excessCapacityTerminationPolicy";
const _eCx = "explanationCode";
const _eD = "endDate";
const _eDH = "enableDnsHostnames";
const _eDS = "enableDnsSupport";
const _eDT = "endDateType";
const _eDf = "effectiveDate";
const _eDn = "enableDns64";
const _eDnd = "endpointDomain";
const _eDv = "eventDescription";
const _eEBD = "ebsEncryptionByDefault";
const _eFRS = "egressFilterRuleSet";
const _eGAI = "elasticGpuAssociationId";
const _eGAS = "elasticGpuAssociationState";
const _eGASl = "elasticGpuAssociationSet";
const _eGAT = "elasticGpuAssociationTime";
const _eGH = "elasticGpuHealth";
const _eGI = "elasticGpuId";
const _eGS = "elasticGpuSet";
const _eGSS = "elasticGpuSpecificationSet";
const _eGSl = "elasticGpuState";
const _eGT = "elasticGpuType";
const _eH = "endHour";
const _eI = "exchangeId";
const _eIAA = "elasticInferenceAcceleratorArn";
const _eIAAI = "elasticInferenceAcceleratorAssociationId";
const _eIAAS = "elasticInferenceAcceleratorAssociationState";
const _eIAASl = "elasticInferenceAcceleratorAssociationSet";
const _eIAAT = "elasticInferenceAcceleratorAssociationTime";
const _eIAS = "elasticInferenceAcceleratorSet";
const _eITI = "exportImageTaskId";
const _eITS = "exportImageTaskSet";
const _eITSn = "encryptionInTransitSupported";
const _eITSx = "excludedInstanceTypeSet";
const _eIb = "ebsInfo";
const _eIf = "efaInfo";
const _eIv = "eventInformation";
const _eIve = "eventId";
const _eKKI = "encryptionKmsKeyId";
const _eLADI = "enableLniAtDeviceIndex";
const _eLBL = "elasticLoadBalancerListener";
const _eM = "errorMessage";
const _eNAUM = "enableNetworkAddressUsageMetrics";
const _eO = "ebsOptimized";
const _eOI = "ebsOptimizedInfo";
const _eOIG = "egressOnlyInternetGateway";
const _eOIGI = "egressOnlyInternetGatewayId";
const _eOIGS = "egressOnlyInternetGatewaySet";
const _eOS = "ebsOptimizedSupport";
const _eOn = "enclaveOptions";
const _eP = "egressPackets";
const _ePS = "excludePathSet";
const _eRNDAAAAR = "enableResourceNameDnsAAAARecord";
const _eRNDAR = "enableResourceNameDnsARecord";
const _eS = "ephemeralStorage";
const _eSE = "enaSrdEnabled";
const _eSS = "enaSrdSpecification";
const _eSSn = "enaSrdSupported";
const _eST = "eventSubType";
const _eSUE = "enaSrdUdpEnabled";
const _eSUS = "enaSrdUdpSpecification";
const _eSf = "efaSupported";
const _eSn = "encryptionSupport";
const _eSna = "enaSupport";
const _eSnt = "entrySet";
const _eSr = "errorSet";
const _eSv = "eventsSet";
const _eSx = "explanationSet";
const _eT = "expirationTime";
const _eTI = "exportTaskId";
const _eTLC = "enableTunnelLifecycleControl";
const _eTS = "exportTaskSet";
const _eTSi = "eipTagSet";
const _eTSx = "exportToS3";
const _eTn = "enablingTime";
const _eTna = "enabledTime";
const _eTnd = "endpointType";
const _eTndi = "endTime";
const _eTv = "eventType";
const _eTx = "exportTask";
const _eWD = "endWeekDay";
const _eb = "ebs";
const _en = "enabled";
const _enc = "encrypted";
const _end = "end";
const _er = "error";
const _ev = "event";
const _f = "format";
const _fA = "federatedAuthentication";
const _fAD = "filterAtDestination";
const _fAS = "filterAtSource";
const _fAi = "firstAddress";
const _fC = "fulfilledCapacity";
const _fCRS = "fleetCapacityReservationSet";
const _fCS = "findingComponentSet";
const _fCa = "failureCode";
const _fDN = "fipsDnsName";
const _fE = "fipsEnabled";
const _fF = "fileFormat";
const _fFCS = "failedFleetCancellationSet";
const _fFi = "findingsFound";
const _fI = "findingId";
const _fIA = "fpgaImageAttribute";
const _fIAS = "filterInArnSet";
const _fIGI = "fpgaImageGlobalId";
const _fII = "fpgaImageId";
const _fIS = "fleetInstanceSet";
const _fISp = "fpgaImageSet";
const _fIl = "fleetId";
const _fIp = "fpgaInfo";
const _fLI = "flowLogId";
const _fLIS = "flowLogIdSet";
const _fLISa = "fastLaunchImageSet";
const _fLS = "flowLogSet";
const _fLSl = "flowLogStatus";
const _fM = "failureMessage";
const _fODC = "fulfilledOnDemandCapacity";
const _fP = "fromPort";
const _fPCS = "forwardPathComponentSet";
const _fPi = "fixedPrice";
const _fQPDS = "failedQueuedPurchaseDeletionSet";
const _fR = "failureReason";
const _fRa = "fastRestored";
const _fS = "fleetSet";
const _fSR = "firewallStatelessRule";
const _fSRS = "fastSnapshotRestoreSet";
const _fSRSES = "fastSnapshotRestoreStateErrorSet";
const _fSRi = "firewallStatefulRule";
const _fSST = "firstSlotStartTime";
const _fSl = "fleetState";
const _fTE = "freeTierEligible";
const _fa = "fault";
const _fp = "fpgas";
const _fr = "from";
const _fre = "frequency";
const _g = "group";
const _gA = "groupArn";
const _gAS = "gatewayAssociationState";
const _gD = "groupDescription";
const _gI = "gatewayId";
const _gIA = "groupIpAddress";
const _gIp = "gpuInfo";
const _gIr = "groupId";
const _gK = "greKey";
const _gLBAS = "gatewayLoadBalancerArnSet";
const _gLBEI = "gatewayLoadBalancerEndpointId";
const _gM = "groupMember";
const _gN = "groupName";
const _gOI = "groupOwnerId";
const _gS = "groupSet";
const _gSr = "groupSource";
const _gp = "gpus";
const _gr = "groups";
const _h = "hypervisor";
const _hCP = "hiveCompatiblePartitions";
const _hE = "httpEndpoint";
const _hI = "hostId";
const _hIS = "hostIdSet";
const _hM = "hostMaintenance";
const _hO = "hibernationOptions";
const _hP = "hostProperties";
const _hPI = "httpProtocolIpv6";
const _hPRHL = "httpPutResponseHopLimit";
const _hPo = "hourlyPrice";
const _hR = "hostRecovery";
const _hRGA = "hostResourceGroupArn";
const _hRI = "hostReservationId";
const _hRS = "historyRecordSet";
const _hRSo = "hostReservationSet";
const _hS = "hostSet";
const _hSi = "hibernationSupported";
const _hT = "httpTokens";
const _hTo = "hostnameType";
const _hZI = "hostedZoneId";
const _i = "item";
const _iA = "interfaceAssociation";
const _iAC = "ipv6AddressCount";
const _iAI = "inferenceAcceleratorInfo";
const _iAPI = "ipv4AddressesPerInterface";
const _iAPIp = "ipv6AddressesPerInterface";
const _iAS = "interfaceAssociationSet";
const _iASp = "ipv6AddressesSet";
const _iAT = "ipAddressType";
const _iATOI = "includeAllTagsOfInstance";
const _iAp = "ipAddress";
const _iApa = "ipamArn";
const _iApv = "ipv6Address";
const _iB = "ingressBytes";
const _iBPAS = "imageBlockPublicAccessState";
const _iC = "instanceCount";
const _iCAS = "ipv6CidrAssociationSet";
const _iCB = "ipv6CidrBlock";
const _iCBA = "ipv6CidrBlockAssociation";
const _iCBAS = "ipv6CidrBlockAssociationSet";
const _iCBS = "ipv6CidrBlockState";
const _iCBSp = "ipv6CidrBlockSet";
const _iCBn = "insideCidrBlocks";
const _iCE = "instanceConnectEndpoint";
const _iCEA = "instanceConnectEndpointArn";
const _iCEI = "instanceConnectEndpointId";
const _iCES = "instanceConnectEndpointSet";
const _iCSS = "instanceCreditSpecificationSet";
const _iCn = "instanceCounts";
const _iCp = "ipv6Cidr";
const _iD = "imageData";
const _iDAS = "ipamDiscoveredAccountSet";
const _iDPAS = "ipamDiscoveredPublicAddressSet";
const _iDRCS = "ipamDiscoveredResourceCidrSet";
const _iDs = "isDefault";
const _iE = "instanceExport";
const _iEI = "instanceEventId";
const _iEW = "instanceEventWindow";
const _iEWI = "instanceEventWindowId";
const _iEWS = "instanceEventWindowState";
const _iEWSn = "instanceEventWindowSet";
const _iEs = "isEgress";
const _iF = "instanceFamily";
const _iFCS = "instanceFamilyCreditSpecification";
const _iFR = "iamFleetRole";
const _iFRS = "ingressFilterRuleSet";
const _iG = "internetGateway";
const _iGI = "internetGatewayId";
const _iGS = "internetGatewaySet";
const _iGSn = "instanceGenerationSet";
const _iH = "instanceHealth";
const _iHn = "inboundHeader";
const _iI = "instanceId";
const _iIB = "instanceInterruptionBehavior";
const _iIP = "iamInstanceProfile";
const _iIPA = "iamInstanceProfileAssociation";
const _iIPAS = "iamInstanceProfileAssociationSet";
const _iIS = "instanceIdSet";
const _iISB = "instanceInitiatedShutdownBehavior";
const _iITS = "importImageTaskSet";
const _iIm = "importInstance";
const _iIma = "imageId";
const _iIn = "instanceIds";
const _iIp = "ipamId";
const _iL = "imageLocation";
const _iLn = "instanceLifecycle";
const _iMC = "instanceMatchCriteria";
const _iMO = "instanceMetadataOptions";
const _iMOn = "instanceMarketOptions";
const _iMT = "instanceMetadataTags";
const _iMU = "importManifestUrl";
const _iN = "ipv6Native";
const _iOA = "imageOwnerAlias";
const _iOI = "imageOwnerId";
const _iOIn = "instanceOwnerId";
const _iOIp = "ipOwnerId";
const _iP = "instancePort";
const _iPA = "ipamPoolAllocation";
const _iPAI = "ipamPoolAllocationId";
const _iPAS = "ipamPoolAllocationSet";
const _iPAp = "ipamPoolArn";
const _iPC = "ipamPoolCidr";
const _iPCI = "ipamPoolCidrId";
const _iPCS = "ipamPoolCidrSet";
const _iPCp = "ipv4PrefixCount";
const _iPCpv = "ipv6PrefixCount";
const _iPE = "ipPermissionsEgress";
const _iPI = "isPrimaryIpv6";
const _iPIp = "ipamPoolId";
const _iPR = "isPermanentRestore";
const _iPS = "ipamPoolSet";
const _iPSp = "ipv6PoolSet";
const _iPSpv = "ipv4PrefixSet";
const _iPSpvr = "ipv6PrefixSet";
const _iPTUC = "instancePoolsToUseCount";
const _iPn = "instancePlatform";
const _iPng = "ingressPackets";
const _iPnt = "interfacePermission";
const _iPnte = "interfaceProtocol";
const _iPo = "ioPerformance";
const _iPp = "ipamPool";
const _iPpe = "ipPermissions";
const _iPpr = "ipProtocol";
const _iPpv = "ipv4Prefix";
const _iPpvo = "ipv6Pool";
const _iPpvr = "ipv6Prefix";
const _iPs = "isPublic";
const _iPsr = "isPrimary";
const _iR = "instanceRequirements";
const _iRC = "ipamResourceCidr";
const _iRCS = "ipamResourceCidrSet";
const _iRD = "ipamResourceDiscovery";
const _iRDA = "ipamResourceDiscoveryAssociation";
const _iRDAA = "ipamResourceDiscoveryAssociationArn";
const _iRDAI = "ipamResourceDiscoveryAssociationId";
const _iRDAS = "ipamResourceDiscoveryAssociationSet";
const _iRDAp = "ipamResourceDiscoveryArn";
const _iRDI = "ipamResourceDiscoveryId";
const _iRDR = "ipamResourceDiscoveryRegion";
const _iRDS = "ipamResourceDiscoverySet";
const _iRT = "ingressRouteTable";
const _iRp = "ipamRegion";
const _iRpa = "ipRanges";
const _iRpv = "ipv6Ranges";
const _iS = "ipamScope";
const _iSA = "ipamScopeArn";
const _iSI = "instanceStorageInfo";
const _iSIp = "ipamScopeId";
const _iSS = "instanceStatusSet";
const _iSSn = "instanceStorageSupported";
const _iSSp = "ipamScopeSet";
const _iST = "ipamScopeType";
const _iSTS = "importSnapshotTaskSet";
const _iSg = "igmpv2Support";
const _iSm = "imagesSet";
const _iSma = "imageState";
const _iSmag = "imageSet";
const _iSmd = "imdsSupport";
const _iSmp = "impairedSince";
const _iSn = "instancesSet";
const _iSns = "instanceSet";
const _iSnst = "instanceState";
const _iSnsta = "instanceStatus";
const _iSp = "ipamSet";
const _iSpv = "ipv6Supported";
const _iSpvu = "ipv6Support";
const _iT = "instanceType";
const _iTA = "instanceTagAttribute";
const _iTC = "icmpTypeCode";
const _iTCn = "includeTrustContext";
const _iTI = "importTaskId";
const _iTKS = "instanceTagKeySet";
const _iTOS = "instanceTypeOfferingSet";
const _iTS = "instanceTypeSet";
const _iTSS = "instanceTypeSpecificationSet";
const _iTm = "imageType";
const _iTn = "instanceTypes";
const _iTns = "instanceTenancy";
const _iTnt = "interfaceType";
const _iU = "ipUsage";
const _iUS = "instanceUsageSet";
const _iV = "importVolume";
const _iVE = "isValidExchange";
const _iVS = "ikeVersionSet";
const _id = "id";
const _im = "image";
const _in = "instance";
const _ins = "instances";
const _int = "interval";
const _io = "iops";
const _ip = "ipam";
const _is = "issuer";
const _k = "key";
const _kDF = "kinesisDataFirehose";
const _kF = "keyFingerprint";
const _kI = "kernelId";
const _kKA = "kmsKeyArn";
const _kKI = "kmsKeyId";
const _kM = "keyMaterial";
const _kN = "keyName";
const _kPI = "keyPairId";
const _kS = "keySet";
const _kT = "keyType";
const _ke = "kernel";
const _key = "keyword";
const _l = "lifecycle";
const _lA = "localAddress";
const _lADT = "lastAttemptedDiscoveryTime";
const _lAZ = "launchedAvailabilityZone";
const _lAa = "lastAddress";
const _lBA = "loadBalancerArn";
const _lBAo = "localBgpAsn";
const _lBC = "loadBalancersConfig";
const _lBLP = "loadBalancerListenerPort";
const _lBO = "loadBalancerOptions";
const _lBP = "loadBalancerPort";
const _lBS = "loadBalancerSet";
const _lBT = "loadBalancerTarget";
const _lBTG = "loadBalancerTargetGroup";
const _lBTGS = "loadBalancerTargetGroupSet";
const _lBTP = "loadBalancerTargetPort";
const _lC = "loggingConfiguration";
const _lCA = "licenseConfigurationArn";
const _lCO = "lockCreatedOn";
const _lCS = "loggingConfigurationSet";
const _lD = "logDestination";
const _lDST = "lockDurationStartTime";
const _lDT = "logDestinationType";
const _lDo = "lockDuration";
const _lE = "logEnabled";
const _lEO = "lockExpiresOn";
const _lET = "lastEvaluatedTime";
const _lEa = "lastError";
const _lF = "logFormat";
const _lFA = "lambdaFunctionArn";
const _lG = "launchGroup";
const _lGA = "logGroupArn";
const _lGI = "localGatewayId";
const _lGN = "logGroupName";
const _lGRT = "localGatewayRouteTable";
const _lGRTA = "localGatewayRouteTableArn";
const _lGRTI = "localGatewayRouteTableId";
const _lGRTS = "localGatewayRouteTableSet";
const _lGRTVA = "localGatewayRouteTableVpcAssociation";
const _lGRTVAI = "localGatewayRouteTableVpcAssociationId";
const _lGRTVAS = "localGatewayRouteTableVpcAssociationSet";
const _lGRTVIGA = "localGatewayRouteTableVirtualInterfaceGroupAssociation";
const _lGRTVIGAI = "localGatewayRouteTableVirtualInterfaceGroupAssociationId";
const _lGRTVIGAS = "localGatewayRouteTableVirtualInterfaceGroupAssociationSet";
const _lGS = "localGatewaySet";
const _lGVIGI = "localGatewayVirtualInterfaceGroupId";
const _lGVIGS = "localGatewayVirtualInterfaceGroupSet";
const _lGVII = "localGatewayVirtualInterfaceId";
const _lGVIIS = "localGatewayVirtualInterfaceIdSet";
const _lGVIS = "localGatewayVirtualInterfaceSet";
const _lGo = "logGroup";
const _lINC = "localIpv4NetworkCidr";
const _lINCo = "localIpv6NetworkCidr";
const _lLT = "lastLaunchedTime";
const _lMA = "lastMaintenanceApplied";
const _lO = "logOptions";
const _lOF = "logOutputFormat";
const _lP = "loadPermissions";
const _lPa = "launchPermission";
const _lS = "licenseSpecifications";
const _lSC = "lastStatusChange";
const _lSDT = "lastSuccessfulDiscoveryTime";
const _lSTS = "localStorageTypeSet";
const _lSa = "launchSpecifications";
const _lSau = "launchSpecification";
const _lSi = "licenseSet";
const _lSo = "localStorage";
const _lSoc = "lockState";
const _lT = "launchTemplate";
const _lTAO = "launchTemplateAndOverrides";
const _lTC = "launchTemplateConfigs";
const _lTD = "launchTemplateData";
const _lTI = "launchTemplateId";
const _lTN = "launchTemplateName";
const _lTOS = "lastTieringOperationStatus";
const _lTOSD = "lastTieringOperationStatusDetail";
const _lTP = "lastTieringProgress";
const _lTS = "launchTemplateSpecification";
const _lTST = "lastTieringStartTime";
const _lTV = "launchTemplateVersion";
const _lTVS = "launchTemplateVersionSet";
const _lTa = "launchTemplates";
const _lTau = "launchTime";
const _lTi = "licenseType";
const _lTo = "locationType";
const _lUT = "lastUpdatedTime";
const _lV = "logVersion";
const _lVN = "latestVersionNumber";
const _lo = "location";
const _loc = "locale";
const _m = "min";
const _mA = "mutualAuthentication";
const _mAAA = "maintenanceAutoAppliedAfter";
const _mAE = "multiAttachEnabled";
const _mAI = "maxAggregationInterval";
const _mASS = "movingAddressStatusSet";
const _mAa = "macAddress";
const _mBIM = "maximumBandwidthInMbps";
const _mC = "missingComponent";
const _mCOIOL = "mapCustomerOwnedIpOnLaunch";
const _mD = "maintenanceDetails";
const _mDA = "multicastDomainAssociations";
const _mDK = "metaDataKey";
const _mDV = "metaDataValue";
const _mDe = "metaData";
const _mE = "maxEntries";
const _mEI = "maximumEfaInterfaces";
const _mG = "multicastGroups";
const _mGBPVC = "memoryGiBPerVCpu";
const _mI = "maximumIops";
const _mIe = "memoryInfo";
const _mMB = "memoryMiB";
const _mNC = "maximumNetworkCards";
const _mNI = "maximumNetworkInterfaces";
const _mO = "metadataOptions";
const _mOSLRG = "memberOfServiceLinkedResourceGroup";
const _mOa = "maintenanceOptions";
const _mP = "maxPrice";
const _mPIOL = "mapPublicIpOnLaunch";
const _mPL = "maxParallelLaunches";
const _mPS = "metricPointSet";
const _mPSa = "matchPathSet";
const _mR = "maxResults";
const _mRS = "modificationResultSet";
const _mS = "messageSet";
const _mSa = "managementState";
const _mSai = "maintenanceStrategies";
const _mSo = "moveStatus";
const _mSod = "modificationState";
const _mSu = "multicastSupport";
const _mT = "marketType";
const _mTC = "minTargetCapacity";
const _mTDID = "maxTermDurationInDays";
const _mTDIDi = "minTermDurationInDays";
const _mTIMB = "maximumThroughputInMBps";
const _mTP = "maxTotalPrice";
const _mTe = "memberType";
const _mVE = "managesVpcEndpoints";
const _ma = "max";
const _mai = "main";
const _man = "manufacturer";
const _mar = "marketplace";
const _me = "message";
const _mem = "member";
const _met = "metric";
const _mo = "monitoring";
const _mod = "mode";
const _n = "name";
const _nA = "networkAcl";
const _nAAI = "networkAclAssociationId";
const _nAI = "networkAclId";
const _nAIe = "newAssociationId";
const _nAS = "networkAclSet";
const _nAo = "notAfter";
const _nB = "notBefore";
const _nBD = "notBeforeDeadline";
const _nBG = "networkBorderGroup";
const _nBGe = "networkBandwidthGbps";
const _nC = "networkCards";
const _nCI = "networkCardIndex";
const _nD = "noDevice";
const _nES = "nitroEnclavesSupport";
const _nG = "natGateway";
const _nGAS = "natGatewayAddressSet";
const _nGI = "natGatewayId";
const _nGS = "natGatewaySet";
const _nI = "networkId";
const _nIA = "networkInsightsAnalysis";
const _nIAA = "networkInsightsAnalysisArn";
const _nIAI = "networkInsightsAnalysisId";
const _nIAS = "networkInsightsAccessScope";
const _nIASA = "networkInsightsAccessScopeArn";
const _nIASAA = "networkInsightsAccessScopeAnalysisArn";
const _nIASAI = "networkInsightsAccessScopeAnalysisId";
const _nIASAS = "networkInsightsAccessScopeAnalysisSet";
const _nIASAe = "networkInsightsAccessScopeAnalysis";
const _nIASC = "networkInsightsAccessScopeContent";
const _nIASI = "networkInsightsAccessScopeId";
const _nIASS = "networkInsightsAccessScopeSet";
const _nIASe = "networkInsightsAnalysisSet";
const _nIC = "networkInterfaceCount";
const _nID = "networkInterfaceDescription";
const _nII = "networkInterfaceId";
const _nIIS = "networkInterfaceIdSet";
const _nIO = "networkInterfaceOptions";
const _nIOI = "networkInterfaceOwnerId";
const _nIP = "networkInsightsPath";
const _nIPA = "networkInsightsPathArn";
const _nIPI = "networkInsightsPathId";
const _nIPIe = "networkInterfacePermissionId";
const _nIPS = "networkInsightsPathSet";
const _nIPe = "networkInterfacePermissions";
const _nIS = "networkInterfaceSet";
const _nIe = "networkInterface";
const _nIet = "networkInfo";
const _nL = "netmaskLength";
const _nLBA = "networkLoadBalancerArn";
const _nLBAS = "networkLoadBalancerArnSet";
const _nNS = "networkNodeSet";
const _nP = "networkPerformance";
const _nPF = "networkPathFound";
const _nPe = "networkPlatform";
const _nS = "nvmeSupport";
const _nSS = "networkServiceSet";
const _nSST = "nextSlotStartTime";
const _nT = "networkType";
const _nTI = "nitroTpmInfo";
const _nTS = "nitroTpmSupport";
const _nTe = "nextToken";
const _o = "origin";
const _oA = "outpostArn";
const _oAr = "organizationArn";
const _oAw = "ownerAlias";
const _oC = "offeringClass";
const _oDAS = "onDemandAllocationStrategy";
const _oDFC = "onDemandFulfilledCapacity";
const _oDMPPOLP = "onDemandMaxPricePercentageOverLowestPrice";
const _oDMTP = "onDemandMaxTotalPrice";
const _oDO = "onDemandOptions";
const _oDS = "occurrenceDaySet";
const _oDTC = "onDemandTargetCapacity";
const _oH = "outboundHeader";
const _oI = "ownerId";
const _oIA = "outsideIpAddress";
const _oIAT = "outsideIpAddressType";
const _oIS = "optInStatus";
const _oIf = "offeringId";
const _oIr = "originalIops";
const _oK = "objectKey";
const _oMAE = "originalMultiAttachEnabled";
const _oO = "oidcOptions";
const _oRIWEA = "outputReservedInstancesWillExpireAt";
const _oRS = "operatingRegionSet";
const _oRTE = "occurrenceRelativeToEnd";
const _oS = "offeringSet";
const _oST = "oldestSampleTime";
const _oSr = "originalSize";
const _oSv = "overlapStatus";
const _oT = "optimizingTime";
const _oTf = "offeringType";
const _oTr = "originalThroughput";
const _oU = "occurrenceUnit";
const _oUA = "organizationalUnitArn";
const _oVT = "originalVolumeType";
const _op = "options";
const _ou = "output";
const _ov = "overrides";
const _ow = "owner";
const _p = "principal";
const _pA = "poolArn";
const _pAI = "peeringAttachmentId";
const _pAR = "poolAddressRange";
const _pARS = "poolAddressRangeSet";
const _pAe = "peerAddress";
const _pAee = "peerAsn";
const _pAu = "publiclyAdvertisable";
const _pB = "provisionedBandwidth";
const _pBA = "peerBgpAsn";
const _pBIG = "peakBandwidthInGbps";
const _pC = "productCodes";
const _pCB = "poolCidrBlock";
const _pCBS = "poolCidrBlockSet";
const _pCI = "preserveClientIp";
const _pCNI = "peerCoreNetworkId";
const _pCS = "poolCidrSet";
const _pCSS = "postureComplianceStatusSet";
const _pCa = "partitionCount";
const _pCo = "poolCount";
const _pCr = "productCode";
const _pD = "passwordData";
const _pDE = "privateDnsEnabled";
const _pDHGNS = "phase1DHGroupNumberSet";
const _pDHGNSh = "phase2DHGroupNumberSet";
const _pDN = "privateDnsName";
const _pDNC = "privateDnsNameConfiguration";
const _pDNO = "privateDnsNameOptions";
const _pDNOOL = "privateDnsNameOptionsOnLaunch";
const _pDNS = "privateDnsNameSet";
const _pDNVS = "privateDnsNameVerificationState";
const _pDNu = "publicDnsName";
const _pDOFIRE = "privateDnsOnlyForInboundResolverEndpoint";
const _pDRTI = "propagationDefaultRouteTableId";
const _pDS = "pricingDetailsSet";
const _pDSI = "publicDefaultScopeId";
const _pDSIr = "privateDefaultScopeId";
const _pDa = "paymentDue";
const _pDl = "platformDetails";
const _pDo = "policyDocument";
const _pDoo = "poolDepth";
const _pDr = "productDescription";
const _pE = "policyEnabled";
const _pEAS = "phase1EncryptionAlgorithmSet";
const _pEASh = "phase2EncryptionAlgorithmSet";
const _pF = "packetField";
const _pFS = "previousFleetState";
const _pG = "placementGroup";
const _pGA = "placementGroupArn";
const _pGI = "placementGroupInfo";
const _pGS = "placementGroupSet";
const _pHP = "perHourPartition";
const _pHS = "packetHeaderStatement";
const _pI = "publicIp";
const _pIA = "privateIpAddress";
const _pIAS = "privateIpAddressesSet";
const _pIASh = "phase1IntegrityAlgorithmSet";
const _pIASha = "phase2IntegrityAlgorithmSet";
const _pIP = "publicIpv4Pool";
const _pIPI = "publicIpv4PoolId";
const _pIPS = "publicIpv4PoolSet";
const _pIS = "publicIpSource";
const _pIc = "pciId";
const _pIo = "poolId";
const _pIr = "processorInfo";
const _pIri = "primaryIpv6";
const _pIriv = "privateIp";
const _pK = "publicKey";
const _pL = "prefixList";
const _pLA = "prefixListArn";
const _pLAS = "prefixListAssociationSet";
const _pLI = "prefixListId";
const _pLIr = "prefixListIds";
const _pLN = "prefixListName";
const _pLOI = "prefixListOwnerId";
const _pLS = "prefixListSet";
const _pLSh = "phase1LifetimeSeconds";
const _pLSha = "phase2LifetimeSeconds";
const _pLa = "packetLength";
const _pM = "pendingMaintenance";
const _pN = "partitionNumber";
const _pO = "paymentOption";
const _pOe = "peeringOptions";
const _pP = "progressPercentage";
const _pR = "ptrRecord";
const _pRN = "policyRuleNumber";
const _pRNo = "policyReferenceName";
const _pRS = "portRangeSet";
const _pRU = "ptrRecordUpdate";
const _pRa = "payerResponsibility";
const _pRo = "portRange";
const _pRol = "policyRule";
const _pS = "previousState";
const _pSET = "previousSlotEndTime";
const _pSFRS = "previousSpotFleetRequestState";
const _pSK = "preSharedKey";
const _pSKU = "publicSigningKeyUrl";
const _pSe = "permissionState";
const _pSee = "peeringStatus";
const _pSr = "principalSet";
const _pSre = "previousStatus";
const _pSri = "priceSchedules";
const _pSro = "protocolSet";
const _pT = "principalType";
const _pTGI = "peerTransitGatewayId";
const _pTr = "provisionTime";
const _pTu = "purchaseToken";
const _pVI = "primaryVpcId";
const _pVS = "propagatingVgwSet";
const _pZI = "parentZoneId";
const _pZN = "parentZoneName";
const _pe = "period";
const _per = "permission";
const _pl = "platform";
const _pla = "placement";
const _po = "port";
const _pr = "protocol";
const _pre = "prefix";
const _pri = "priority";
const _pric = "price";
const _prim = "primary";
const _pro = "progress";
const _prop = "propagation";
const _prov = "provisioned";
const _pu = "public";
const _pur = "purchase";
const _r = "return";
const _rA = "ruleAction";
const _rBET = "recycleBinEnterTime";
const _rBETe = "recycleBinExitTime";
const _rC = "returnCode";
const _rCS = "resourceComplianceStatus";
const _rCe = "resourceCidr";
const _rCec = "recurringCharges";
const _rD = "restoreDuration";
const _rDAC = "resourceDiscoveryAssociationCount";
const _rDI = "ramDiskId";
const _rDN = "rootDeviceName";
const _rDS = "resourceDiscoveryStatus";
const _rDT = "rootDeviceType";
const _rE = "responseError";
const _rET = "restoreExpiryTime";
const _rEe = "regionEndpoint";
const _rFP = "rekeyFuzzPercentage";
const _rGA = "ruleGroupArn";
const _rGI = "referencedGroupInfo";
const _rGROPS = "ruleGroupRuleOptionsPairSet";
const _rGT = "ruleGroupType";
const _rGTPS = "ruleGroupTypePairSet";
const _rHS = "requireHibernateSupport";
const _rI = "regionInfo";
const _rII = "reservedInstancesId";
const _rIIe = "reservedInstanceId";
const _rILI = "reservedInstancesListingId";
const _rILS = "reservedInstancesListingsSet";
const _rIMI = "reservedInstancesModificationId";
const _rIMS = "reservedInstancesModificationsSet";
const _rINC = "remoteIpv4NetworkCidr";
const _rINCe = "remoteIpv6NetworkCidr";
const _rIOI = "reservedInstancesOfferingId";
const _rIOS = "reservedInstancesOfferingsSet";
const _rIS = "reservedInstancesSet";
const _rIVR = "reservedInstanceValueRollup";
const _rIVS = "reservedInstanceValueSet";
const _rIa = "ramdiskId";
const _rIe = "resourceId";
const _rIeq = "requesterId";
const _rIes = "reservationId";
const _rM = "requesterManaged";
const _rMGM = "registeredMulticastGroupMembers";
const _rMGS = "registeredMulticastGroupSources";
const _rMTS = "rekeyMarginTimeSeconds";
const _rN = "ruleNumber";
const _rNII = "registeredNetworkInterfaceIds";
const _rNe = "regionName";
const _rNes = "resourceName";
const _rNo = "roleName";
const _rO = "resourceOwner";
const _rOI = "resourceOwnerId";
const _rOS = "ruleOptionSet";
const _rOSe = "resourceOverlapStatus";
const _rOo = "routeOrigin";
const _rPCO = "requesterPeeringConnectionOptions";
const _rPCS = "returnPathComponentSet";
const _rR = "resourceRegion";
const _rRVT = "replaceRootVolumeTask";
const _rRVTI = "replaceRootVolumeTaskId";
const _rRVTS = "replaceRootVolumeTaskSet";
const _rS = "reservationSet";
const _rST = "restoreStartTime";
const _rSe = "replacementStrategy";
const _rSes = "resourceStatement";
const _rSeso = "resourceSet";
const _rSo = "routeSet";
const _rT = "reservationType";
const _rTAI = "routeTableAssociationId";
const _rTI = "routeTableId";
const _rTIS = "routeTableIdSet";
const _rTIe = "requesterTgwInfo";
const _rTR = "routeTableRoute";
const _rTS = "routeTableSet";
const _rTSe = "resourceTagSet";
const _rTSes = "resourceTypeSet";
const _rTV = "remainingTotalValue";
const _rTe = "resourceType";
const _rTel = "releaseTime";
const _rTeq = "requestTime";
const _rTo = "routeTable";
const _rUI = "replaceUnhealthyInstances";
const _rUV = "remainingUpfrontValue";
const _rV = "returnValue";
const _rVI = "referencingVpcId";
const _rVIe = "requesterVpcInfo";
const _rVe = "reservationValue";
const _rWS = "replayWindowSize";
const _ra = "ramdisk";
const _re = "result";
const _rea = "reason";
const _rec = "recurrence";
const _reg = "region";
const _req = "requested";
const _res = "resource";
const _ro = "route";
const _rou = "routes";
const _s = "source";
const _sA = "sourceArn";
const _sAS = "sourceAddressSet";
const _sASu = "suggestedAccountSet";
const _sAZ = "singleAvailabilityZone";
const _sAo = "sourceAddress";
const _sAt = "startupAction";
const _sAu = "supportedArchitectures";
const _sAub = "subnetArn";
const _sB = "s3Bucket";
const _sBM = "supportedBootModes";
const _sC = "serviceConfiguration";
const _sCA = "serverCertificateArn";
const _sCAE = "serialConsoleAccessEnabled";
const _sCB = "sourceCidrBlock";
const _sCR = "subnetCidrReservation";
const _sCRI = "subnetCidrReservationId";
const _sCS = "serviceConfigurationSet";
const _sCSIG = "sustainedClockSpeedInGhz";
const _sCc = "scopeCount";
const _sCn = "snapshotConfiguration";
const _sD = "startDate";
const _sDC = "sourceDestCheck";
const _sDIH = "slotDurationInHours";
const _sDLTVS = "successfullyDeletedLaunchTemplateVersionSet";
const _sDS = "spotDatafeedSubscription";
const _sDSe = "serviceDetailSet";
const _sDSn = "snapshotDetailSet";
const _sDp = "spreadDomain";
const _sEL = "s3ExportLocation";
const _sET = "sampledEndTime";
const _sF = "supportedFeatures";
const _sFCS = "successfulFleetCancellationSet";
const _sFDS = "successfulFleetDeletionSet";
const _sFRC = "spotFleetRequestConfig";
const _sFRCS = "spotFleetRequestConfigSet";
const _sFRI = "spotFleetRequestId";
const _sFRS = "successfulFleetRequestSet";
const _sFRSp = "spotFleetRequestState";
const _sG = "securityGroup";
const _sGFVS = "securityGroupForVpcSet";
const _sGI = "securityGroupId";
const _sGIS = "securityGroupIdSet";
const _sGIe = "securityGroupIds";
const _sGIec = "securityGroupInfo";
const _sGR = "securityGroupRule";
const _sGRI = "securityGroupRuleId";
const _sGRS = "securityGroupRuleSet";
const _sGRSe = "securityGroupReferenceSet";
const _sGRSec = "securityGroupReferencingSupport";
const _sGS = "securityGroupSet";
const _sGe = "securityGroups";
const _sH = "startHour";
const _sI = "serviceId";
const _sIAS = "scheduledInstanceAvailabilitySet";
const _sIATS = "supportedIpAddressTypeSet";
const _sICRS = "subnetIpv4CidrReservationSet";
const _sICRSu = "subnetIpv6CidrReservationSet";
const _sICSS = "successfulInstanceCreditSpecificationSet";
const _sIGB = "sizeInGB";
const _sII = "sourceInstanceId";
const _sIIc = "scheduledInstanceId";
const _sIMB = "sizeInMiB";
const _sIP = "staleIpPermissions";
const _sIPE = "staleIpPermissionsEgress";
const _sIPI = "sourceIpamPoolId";
const _sIRI = "spotInstanceRequestId";
const _sIRS = "spotInstanceRequestSet";
const _sIS = "scheduledInstanceSet";
const _sISu = "subnetIdSet";
const _sIT = "spotInstanceType";
const _sITRS = "storeImageTaskResultSet";
const _sITi = "singleInstanceType";
const _sIn = "snapshotId";
const _sIo = "sourceIp";
const _sIu = "subnetId";
const _sIub = "subnetIds";
const _sK = "s3Key";
const _sKo = "s3objectKey";
const _sL = "s3Location";
const _sLp = "spreadLevel";
const _sM = "statusMessage";
const _sMPPOLP = "spotMaxPricePercentageOverLowestPrice";
const _sMS = "spotMaintenanceStrategies";
const _sMTP = "spotMaxTotalPrice";
const _sMt = "stateMessage";
const _sN = "serviceName";
const _sNS = "serviceNameSet";
const _sNSr = "sriovNetSupport";
const _sNe = "sequenceNumber";
const _sNes = "sessionNumber";
const _sO = "spotOptions";
const _sP = "s3Prefix";
const _sPA = "samlProviderArn";
const _sPHS = "spotPriceHistorySet";
const _sPI = "servicePermissionId";
const _sPIAC = "secondaryPrivateIpAddressCount";
const _sPLS = "sourcePrefixListSet";
const _sPR = "sourcePortRange";
const _sPRS = "sourcePortRangeSet";
const _sPS = "sourcePortSet";
const _sPSS = "spotPlacementScoreSet";
const _sPp = "spotPrice";
const _sQPDS = "successfulQueuedPurchaseDeletionSet";
const _sR = "stateReason";
const _sRDT = "supportedRootDeviceTypes";
const _sRO = "staticRoutesOnly";
const _sRT = "subnetRouteTable";
const _sRe = "serviceResource";
const _sRo = "sourceResource";
const _sS = "snapshotSet";
const _sSGS = "staleSecurityGroupSet";
const _sSPU = "selfServicePortalUrl";
const _sSS = "staticSourcesSupport";
const _sSSPA = "selfServiceSamlProviderArn";
const _sST = "sampledStartTime";
const _sSe = "settingSet";
const _sSer = "serviceState";
const _sSo = "sourceSet";
const _sSs = "sseSpecification";
const _sSt = "statusSet";
const _sSu = "subscriptionSet";
const _sSub = "subnetSet";
const _sSup = "supportedStrategies";
const _sSy = "systemStatus";
const _sT = "startTime";
const _sTC = "spotTargetCapacity";
const _sTD = "snapshotTaskDetail";
const _sTFR = "storeTaskFailureReason";
const _sTH = "sessionTimeoutHours";
const _sTR = "stateTransitionReason";
const _sTS = "storeTaskState";
const _sTSS = "snapshotTierStatusSet";
const _sTT = "stateTransitionTime";
const _sTa = "sampleTime";
const _sTe = "serviceType";
const _sTo = "sourceType";
const _sTp = "splitTunnel";
const _sTs = "sseType";
const _sTt = "storageTier";
const _sUC = "supportedUsageClasses";
const _sV = "sourceVpc";
const _sVT = "supportedVirtualizationTypes";
const _sVh = "shellVersion";
const _sVu = "supportedVersions";
const _sWD = "startWeekDay";
const _s_ = "s3";
const _sc = "scope";
const _sco = "score";
const _se = "service";
const _si = "size";
const _so = "sockets";
const _sof = "software";
const _st = "state";
const _sta = "status";
const _star = "start";
const _stat = "statistic";
const _sto = "storage";
const _str = "strategy";
const _su = "subnet";
const _sub = "subnets";
const _suc = "successful";
const _succ = "success";
const _t = "tenancy";
const _tAAC = "totalAvailableAddressCount";
const _tAC = "totalAddressCount";
const _tAI = "transferAccountId";
const _tC = "totalCapacity";
const _tCS = "targetCapacitySpecification";
const _tCUT = "targetCapacityUnitType";
const _tCVR = "targetConfigurationValueRollup";
const _tCVS = "targetConfigurationValueSet";
const _tCa = "targetConfiguration";
const _tCar = "targetCapacity";
const _tD = "terminationDelay";
const _tDr = "trafficDirection";
const _tE = "targetEnvironment";
const _tED = "termEndDate";
const _tET = "tcpEstablishedTimeout";
const _tEo = "tokenEndpoint";
const _tFC = "totalFulfilledCapacity";
const _tFMIMB = "totalFpgaMemoryInMiB";
const _tG = "transitGateway";
const _tGA = "transitGatewayAttachments";
const _tGAI = "transitGatewayAttachmentId";
const _tGAP = "transitGatewayAttachmentPropagations";
const _tGAr = "transitGatewayAttachment";
const _tGAra = "transitGatewayArn";
const _tGAran = "transitGatewayAsn";
const _tGArans = "transitGatewayAddress";
const _tGC = "transitGatewayConnect";
const _tGCB = "transitGatewayCidrBlocks";
const _tGCP = "transitGatewayConnectPeer";
const _tGCPI = "transitGatewayConnectPeerId";
const _tGCPS = "transitGatewayConnectPeerSet";
const _tGCS = "transitGatewayConnectSet";
const _tGCa = "targetGroupsConfig";
const _tGI = "transitGatewayId";
const _tGMD = "transitGatewayMulticastDomain";
const _tGMDA = "transitGatewayMulticastDomainArn";
const _tGMDI = "transitGatewayMulticastDomainId";
const _tGMDr = "transitGatewayMulticastDomains";
const _tGMIMB = "totalGpuMemoryInMiB";
const _tGOI = "transitGatewayOwnerId";
const _tGPA = "transitGatewayPeeringAttachment";
const _tGPAr = "transitGatewayPeeringAttachments";
const _tGPLR = "transitGatewayPrefixListReference";
const _tGPLRS = "transitGatewayPrefixListReferenceSet";
const _tGPT = "transitGatewayPolicyTable";
const _tGPTE = "transitGatewayPolicyTableEntries";
const _tGPTI = "transitGatewayPolicyTableId";
const _tGPTr = "transitGatewayPolicyTables";
const _tGRT = "transitGatewayRouteTable";
const _tGRTA = "transitGatewayRouteTableAnnouncement";
const _tGRTAI = "transitGatewayRouteTableAnnouncementId";
const _tGRTAr = "transitGatewayRouteTableAnnouncements";
const _tGRTI = "transitGatewayRouteTableId";
const _tGRTP = "transitGatewayRouteTablePropagations";
const _tGRTR = "transitGatewayRouteTableRoute";
const _tGRTr = "transitGatewayRouteTables";
const _tGS = "transitGatewaySet";
const _tGVA = "transitGatewayVpcAttachment";
const _tGVAr = "transitGatewayVpcAttachments";
const _tGa = "targetGroups";
const _tHP = "totalHourlyPrice";
const _tI = "tenantId";
const _tIC = "totalInstanceCount";
const _tICu = "tunnelInsideCidr";
const _tII = "trunkInterfaceId";
const _tIIC = "tunnelInsideIpv6Cidr";
const _tIIV = "tunnelInsideIpVersion";
const _tIMIMB = "totalInferenceMemoryInMiB";
const _tIWE = "terminateInstancesWithExpiration";
const _tIa = "targetIops";
const _tLSGB = "totalLocalStorageGB";
const _tMAE = "targetMultiAttachEnabled";
const _tMF = "trafficMirrorFilter";
const _tMFI = "trafficMirrorFilterId";
const _tMFR = "trafficMirrorFilterRule";
const _tMFRI = "trafficMirrorFilterRuleId";
const _tMFS = "trafficMirrorFilterSet";
const _tMS = "trafficMirrorSession";
const _tMSI = "trafficMirrorSessionId";
const _tMSS = "trafficMirrorSessionSet";
const _tMT = "trafficMirrorTarget";
const _tMTI = "trafficMirrorTargetId";
const _tMTS = "trafficMirrorTargetSet";
const _tNI = "targetNetworkId";
const _tOAT = "transferOfferAcceptedTimestamp";
const _tOET = "transferOfferExpirationTimestamp";
const _tOS = "tunnelOptionSet";
const _tP = "transportProtocol";
const _tPC = "threadsPerCore";
const _tPT = "trustProviderType";
const _tPo = "toPort";
const _tRC = "targetResourceCount";
const _tRS = "throughResourceSet";
const _tRSi = "timeRangeSet";
const _tRTI = "targetRouteTableId";
const _tS = "tagSet";
const _tSD = "termStartDate";
const _tSIGB = "totalSizeInGB";
const _tSIH = "totalScheduledInstanceHours";
const _tSS = "tagSpecificationSet";
const _tST = "tieringStartTime";
const _tSTa = "taskStartTime";
const _tSa = "targetSubnet";
const _tSar = "targetSize";
const _tSas = "taskState";
const _tSp = "tpmSupport";
const _tT = "trafficType";
const _tTC = "totalTargetCapacity";
const _tTGAI = "transportTransitGatewayAttachmentId";
const _tTa = "targetThroughput";
const _tUP = "totalUpfrontPrice";
const _tVC = "totalVCpus";
const _tVT = "targetVolumeType";
const _ta = "tags";
const _tag = "tag";
const _te = "term";
const _th = "throughput";
const _ti = "timestamp";
const _tie = "tier";
const _to = "to";
const _ty = "type";
const _u = "unsuccessful";
const _uB = "userBucket";
const _uD = "uefiData";
const _uDLTVS = "unsuccessfullyDeletedLaunchTemplateVersionSet";
const _uDp = "updatedDate";
const _uDpd = "updateDate";
const _uDs = "userData";
const _uF = "upfrontFee";
const _uFDS = "unsuccessfulFleetDeletionSet";
const _uFRS = "unsuccessfulFleetRequestSet";
const _uI = "userId";
const _uIA = "unassignedIpv6Addresses";
const _uIC = "usedInstanceCount";
const _uICSS = "unsuccessfulInstanceCreditSpecificationSet";
const _uIE = "userInfoEndpoint";
const _uIPS = "unknownIpPermissionSet";
const _uIPSn = "unassignedIpv6PrefixSet";
const _uLI = "useLongIds";
const _uLIA = "useLongIdsAggregated";
const _uO = "usageOperation";
const _uOUT = "usageOperationUpdateTime";
const _uP = "upfrontPrice";
const _uPS = "uploadPolicySignature";
const _uPp = "uploadPolicy";
const _uPs = "usagePrice";
const _uS = "usageStrategy";
const _uST = "udpStreamTimeout";
const _uT = "updateTime";
const _uTPT = "userTrustProviderType";
const _uTd = "udpTimeout";
const _ur = "url";
const _us = "username";
const _v = "value";
const _vAE = "verifiedAccessEndpoint";
const _vAEI = "verifiedAccessEndpointId";
const _vAES = "verifiedAccessEndpointSet";
const _vAG = "verifiedAccessGroup";
const _vAGA = "verifiedAccessGroupArn";
const _vAGI = "verifiedAccessGroupId";
const _vAGS = "verifiedAccessGroupSet";
const _vAI = "verifiedAccessInstance";
const _vAII = "verifiedAccessInstanceId";
const _vAIS = "verifiedAccessInstanceSet";
const _vATP = "verifiedAccessTrustProvider";
const _vATPI = "verifiedAccessTrustProviderId";
const _vATPS = "verifiedAccessTrustProviderSet";
const _vC = "vpnConnection";
const _vCC = "vCpuCount";
const _vCDSC = "vpnConnectionDeviceSampleConfiguration";
const _vCDTI = "vpnConnectionDeviceTypeId";
const _vCDTS = "vpnConnectionDeviceTypeSet";
const _vCI = "vpnConnectionId";
const _vCIp = "vCpuInfo";
const _vCS = "vpnConnectionSet";
const _vCa = "validCores";
const _vD = "versionDescription";
const _vE = "vpcEndpoint";
const _vECI = "vpcEndpointConnectionId";
const _vECS = "vpcEndpointConnectionSet";
const _vEI = "vpcEndpointId";
const _vEO = "vpcEndpointOwner";
const _vEPS = "vpcEndpointPolicySupported";
const _vES = "vpcEndpointService";
const _vESp = "vpcEndpointSet";
const _vESpc = "vpcEndpointState";
const _vESpn = "vpnEcmpSupport";
const _vET = "vpcEndpointType";
const _vF = "validFrom";
const _vFR = "validationFailureReason";
const _vG = "vpnGateway";
const _vGI = "vpnGatewayId";
const _vGS = "vpnGatewaySet";
const _vI = "vpcId";
const _vIl = "vlanId";
const _vIo = "volumeId";
const _vM = "volumeModification";
const _vMS = "volumeModificationSet";
const _vN = "virtualName";
const _vNI = "virtualNetworkId";
const _vNe = "versionNumber";
const _vOI = "vpcOwnerId";
const _vP = "vpnProtocol";
const _vPC = "vpcPeeringConnection";
const _vPCI = "vpcPeeringConnectionId";
const _vPCS = "vpcPeeringConnectionSet";
const _vPp = "vpnPort";
const _vS = "volumeSet";
const _vSS = "volumeStatusSet";
const _vSa = "valueSet";
const _vSo = "volumeSize";
const _vSol = "volumeStatus";
const _vSp = "vpcSet";
const _vT = "volumeType";
const _vTOIA = "vpnTunnelOutsideIpAddress";
const _vTPC = "validThreadsPerCore";
const _vTg = "vgwTelemetry";
const _vTi = "virtualizationType";
const _vU = "validUntil";
const _ve = "version";
const _ven = "vendor";
const _vl = "vlan";
const _vo = "volumes";
const _vol = "volume";
const _vp = "vpc";
const _vpc = "vpcs";
const _w = "warning";
const _wC = "weightedCapacity";
const _wM = "warningMessage";
const _we = "weight";
const _zI = "zoneId";
const _zN = "zoneName";
const _zS = "zoneState";
const _zT = "zoneType";

const parseBody = (streamBody: any, context: __SerdeContext): any =>
  collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
      const parser = new XMLParser({
        attributeNamePrefix: "",
        htmlEntities: true,
        ignoreAttributes: false,
        ignoreDeclaration: true,
        parseTagValue: false,
        trimValues: false,
        tagValueProcessor: (_: any, val: any) => (val.trim() === "" && val.includes("\n") ? "" : undefined),
      });
      parser.addEntity("#xD", "\r");
      parser.addEntity("#10", "\n");
      const parsedObj = parser.parse(encoded);
      const textNodeName = "#text";
      const key = Object.keys(parsedObj)[0];
      const parsedObjToReturn = parsedObj[key];
      if (parsedObjToReturn[textNodeName]) {
        parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
        delete parsedObjToReturn[textNodeName];
      }
      return __getValueFromTextNode(parsedObjToReturn);
    }
    return {};
  });

const parseErrorBody = async (errorBody: any, context: __SerdeContext) => {
  const value = await parseBody(errorBody, context);
  if (value.Error) {
    value.Error.message = value.Error.message ?? value.Error.Message;
  }
  return value;
};

const buildFormUrlencodedString = (formEntries: Record<string, string>): string =>
  Object.entries(formEntries)
    .map(([key, value]) => __extendedEncodeURIComponent(key) + "=" + __extendedEncodeURIComponent(value))
    .join("&");

const loadEc2ErrorCode = (output: __HttpResponse, data: any): string | undefined => {
  if (data.Errors.Error?.Code !== undefined) {
    return data.Errors.Error.Code;
  }
  if (output.statusCode == 404) {
    return "NotFound";
  }
};
